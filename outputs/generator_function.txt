import hashlib
import inspect
import logging
import os
import re
import sys
import tempfile
import csv
import gzip
from datetime import datetime
from time import time
from io import StringIO
from sqlalchemy import event
from sqlalchemy.engine import Engine
from sqlalchemy.schema import DropTable
from sqlalchemy.ext.compiler import compiles

import pandas
import sqlalchemy

import lore
from lore.util import timer
from lore.stores import query_cached


logger = logging.getLogger(__name__)


@compiles(DropTable, 'postgresql')
def _compile_drop_table(element, compiler, **kwargs):
    return compiler.visit_drop_table(element) + ' CASCADE'


class Connection(object):
    UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads')
    IAM_ROLE = os.environ.get('IAM_ROLE', None)
    
    def __init__(self, url, **kwargs):
        for int_value in ['pool_size', 'pool_recycle', 'max_overflow']:
            if int_value in kwargs:
                kwargs[int_value] = int(kwargs[int_value])
        if 'poolclass' in kwargs:
            kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'])
        if '__name__' in kwargs:
            del kwargs['__name__']
        self._engine = sqlalchemy.create_engine(url, **kwargs)
        self._connection = None
        self._metadata = None
        self._transactions = []
    
    def __enter__(self):
        if self._connection is None:
            self._connection = self._engine.connect()
        self._transactions.append(self._connection.begin())
        return self
    
    def __exit__(self, type, value, traceback):
        transaction = self._transactions.pop()
        if type is None:
            transaction.commit()
        else:
            transaction.rollback()

    @staticmethod
    def path(filename, extension='.sql'):
        return os.path.join(
            lore.env.root, lore.env.project, 'extracts',
            filename + extension)

    def execute(self, sql=None, filename=None, **kwargs):
        self.__execute(self.__prepare(sql, filename), kwargs)

    def insert(self, table, dataframe, batch_size=None):
        if batch_size is None:
            batch_size = len(dataframe)

        if self._connection is None:
            self._connection = self._engine.connect()

        dataframe.to_sql(
            table,
            self._connection,
            if_exists='append',
            index=False,
            chunksize=batch_size
        )

    def replace(self, table, dataframe, batch_size=None):
        import migrate.changeset
        global _after_replace_callbacks
        
        with timer('REPLACE ' + table):
            suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8')
            self.metadata
            temp = 'tmp_'.encode('utf-8')
            source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine)
            destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56]
            destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False)
            for column in source.columns:
                destination.append_column(column.copy())
            destination.create()

            original_names = {}
            for index in source.indexes:
                # make sure the name is < 63 chars with the suffix
                name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60]
                original_names[name] = index.name
                columns = []
                for column in index.columns:
                    columns.append(next(x for x in destination.columns if x.name == column.name))
                new = sqlalchemy.Index(name, *columns)
                new.unique = index.unique
                new.table = destination
                new.create(bind=self._connection)
            self.insert(destination.name, dataframe, batch_size=batch_size)
            self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % table)

            with self as transaction:
                backup = sqlalchemy.Table(table + '_b', self.metadata)
                backup.drop(bind=self._connection, checkfirst=True)
                source.rename(name=source.name + '_b', connection=self._connection)
                destination.rename(name=table, connection=self._connection)
                for index in source.indexes:
                    index.rename(index.name[0:-2] + '_b', connection=self._connection)
                for index in destination.indexes:
                    index.rename(original_names[index.name], connection=self._connection)
        
        for func in _after_replace_callbacks:
            func(destination, source)
        
    @property
    def metadata(self):
        if not self._metadata:
            self._metadata = sqlalchemy.MetaData(bind=self._engine)

        return self._metadata

    def select(self, sql=None, filename=None, **kwargs):
        cache = kwargs.pop('cache', False)
        sql = self.__prepare(sql, filename)
        return self._select(sql, kwargs, cache=cache)

    @query_cached
    def _select(self, sql, bindings):
        return self.__execute(sql, bindings).fetchall()

    def unload(self, sql=None, filename=None, **kwargs):
        cache = kwargs.pop('cache', False)
        sql = self.__prepare(sql, filename)
        return self._unload(sql, kwargs, cache=cache)
    
    @query_cached
    def _unload(self, sql, bindings):
        key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest()

        match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
        if match:
            columns = []
            nested = 0
            potential = match[1].split(',')
            for column in potential:
                nested += column.count('(')
                nested -= column.count(')')
                if nested == 0:
                    columns.append(column.split()[-1].split('.')[-1].strip())
                elif column == potential[-1]:
                    column = re.split('from', column, flags=re.IGNORECASE)[0].strip()
                    columns.append(column.split()[-1].split('.')[-1].strip())
        else:
            columns = []
        logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns))

        sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "') "
        sql += "TO 's3://" + os.path.join(
            lore.io.bucket.name,
            self.UNLOAD_PREFIX,
            key,
            ''
        ) + "' "
        if Connection.IAM_ROLE:
            sql += "IAM_ROLE '" + Connection.IAM_ROLE + "' "
        sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRITE"
        if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL):
            logger.warning('LIMIT clause is not supported by unload, returning full set.')
            sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
        self.__execute(sql, bindings)
        return key, columns

    @query_cached
    def load(self, key, columns):
        result = [columns]
        with timer('load:'):
            for entry in lore.io.bucket.objects.filter(
                Prefix=os.path.join(self.UNLOAD_PREFIX, key)
            ):
                temp = tempfile.NamedTemporaryFile()
                lore.io.bucket.download_file(entry.key, temp.name)
                with gzip.open(temp.name, 'rt') as gz:
                    result += list(csv.reader(gz, delimiter='|', quotechar='"'))
        
            return result
    
    @query_cached
    def load_dataframe(self, key, columns):
        with timer('load_dataframe:'):
            frames = []
            for entry in lore.io.bucket.objects.filter(
                Prefix=os.path.join(self.UNLOAD_PREFIX, key)
            ):
                temp = tempfile.NamedTemporaryFile()
                lore.io.bucket.download_file(entry.key, temp.name)
                dataframe = pandas.read_csv(
                    temp.name,
                    delimiter='|',
                    quotechar='"',
                    compression='gzip',
                    error_bad_lines=False
                )
                dataframe.columns = columns
                frames.append(dataframe)

            result = pandas.concat(frames)
            result.columns = columns
            buffer = StringIO()
            result.info(buf=buffer, memory_usage='deep')
            logger.info(buffer.getvalue())
            logger.info(result.head())
            return result
        
    def dataframe(self, sql=None, filename=None, **kwargs):
        cache = kwargs.pop('cache', False)
        sql = self.__prepare(sql, filename)
        dataframe = self._dataframe(sql, kwargs, cache=cache)
        buffer = StringIO()
        dataframe.info(buf=buffer, memory_usage='deep')
        logger.info(buffer.getvalue())
        logger.info(dataframe.head())
        return dataframe
        
    @query_cached
    def _dataframe(self, sql, bindings):
        with timer("dataframe:"):
            if self._connection is None:
                self._connection = self._engine.connect()
            dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings)
            return dataframe

    def quote_identifier(self, identifier):
        return self._engine.dialect.identifier_preparer.quote(identifier)
        

    def __prepare(self, sql, filename):
        if sql is None and filename is not None:
            filename = Connection.path(filename, '.sql')
            logger.debug("READ SQL FILE: " + filename)
            with open(filename) as file:
                sql = file.read()
        # support mustache style bindings
        sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sql)
        return sql

    def __execute(self, sql, bindings):
        if self._connection is None:
            self._connection = self._engine.connect()
        return self._connection.execute(sql, bindings)


@event.listens_for(Engine, "before_cursor_execute", retval=True)
def comment_sql_calls(conn, cursor, statement, parameters, context, executemany):
    conn.info.setdefault('query_start_time', []).append(datetime.now())

    stack = inspect.stack()[1:-1]
    if sys.version_info.major == 3:
        stack = [(x.filename, x.lineno, x.function) for x in stack]
    else:
        stack = [(x[1], x[2], x[3]) for x in stack]

    paths = [x[0] for x in stack]
    origin = next((x for x in paths if lore.env.project in x), None)
    if origin is None:
        origin = next((x for x in paths if 'sqlalchemy' not in x), None)
    if origin is None:
        origin = paths[0]
    caller = next(x for x in stack if x[0] == origin)

    statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statement
    logger.debug(statement)
    return statement, parameters


@event.listens_for(Engine, "after_cursor_execute")
def time_sql_calls(conn, cursor, statement, parameters, context, executemany):
    total = datetime.now() - conn.info['query_start_time'].pop(-1)
    logger.info("SQL: %s" % total)


_after_replace_callbacks = []
def after_replace(func):
    global _after_replace_callbacks
    _after_replace_callbacks.append(func)
*********
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: h
1 retval: import h
char: a
1 retval: import ha
char: s
1 retval: import has
char: h
1 retval: import hash
char: l
1 retval: import hashl
char: i
1 retval: import hashli
char: b
1 retval: import hashlib
char: 

1 retval: import hashlib
2 retval: import hashlib
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: i
1 retval: import i
char: n
1 retval: import in
char: s
1 retval: import ins
char: p
1 retval: import insp
char: e
1 retval: import inspe
char: c
1 retval: import inspec
char: t
1 retval: import inspect
char: 

1 retval: import inspect
2 retval: import inspect
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: l
1 retval: import l
char: o
1 retval: import lo
char: g
1 retval: import log
char: g
1 retval: import logg
char: i
1 retval: import loggi
char: n
1 retval: import loggin
char: g
1 retval: import logging
char: 

1 retval: import logging
2 retval: import logging
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: o
1 retval: import o
char: s
1 retval: import os
char: 

1 retval: import os
2 retval: import os
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: r
1 retval: import r
char: e
1 retval: import re
char: 

1 retval: import re
2 retval: import re
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: s
1 retval: import s
char: y
1 retval: import sy
char: s
1 retval: import sys
char: 

1 retval: import sys
2 retval: import sys
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: t
1 retval: import t
char: e
1 retval: import te
char: m
1 retval: import tem
char: p
1 retval: import temp
char: f
1 retval: import tempf
char: i
1 retval: import tempfi
char: l
1 retval: import tempfil
char: e
1 retval: import tempfile
char: 

1 retval: import tempfile
2 retval: import tempfile
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: c
1 retval: import c
char: s
1 retval: import cs
char: v
1 retval: import csv
char: 

1 retval: import csv
2 retval: import csv
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: g
1 retval: import g
char: z
1 retval: import gz
char: i
1 retval: import gzi
char: p
1 retval: import gzip
char: 

1 retval: import gzip
2 retval: import gzip
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: d
1 retval: from d
char: a
1 retval: from da
char: t
1 retval: from dat
char: e
1 retval: from date
char: t
1 retval: from datet
char: i
1 retval: from dateti
char: m
1 retval: from datetim
char: e
1 retval: from datetime
char:  
1 retval: from datetime 
char: i
1 retval: from datetime i
char: m
1 retval: from datetime im
char: p
1 retval: from datetime imp
char: o
1 retval: from datetime impo
char: r
1 retval: from datetime impor
char: t
1 retval: from datetime import
char:  
1 retval: from datetime import 
char: d
1 retval: from datetime import d
char: a
1 retval: from datetime import da
char: t
1 retval: from datetime import dat
char: e
1 retval: from datetime import date
char: t
1 retval: from datetime import datet
char: i
1 retval: from datetime import dateti
char: m
1 retval: from datetime import datetim
char: e
1 retval: from datetime import datetime
char: 

1 retval: from datetime import datetime
2 retval: from datetime import datetime
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: t
1 retval: from t
char: i
1 retval: from ti
char: m
1 retval: from tim
char: e
1 retval: from time
char:  
1 retval: from time 
char: i
1 retval: from time i
char: m
1 retval: from time im
char: p
1 retval: from time imp
char: o
1 retval: from time impo
char: r
1 retval: from time impor
char: t
1 retval: from time import
char:  
1 retval: from time import 
char: t
1 retval: from time import t
char: i
1 retval: from time import ti
char: m
1 retval: from time import tim
char: e
1 retval: from time import time
char: 

1 retval: from time import time
2 retval: from time import time
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: i
1 retval: from i
char: o
1 retval: from io
char:  
1 retval: from io 
char: i
1 retval: from io i
char: m
1 retval: from io im
char: p
1 retval: from io imp
char: o
1 retval: from io impo
char: r
1 retval: from io impor
char: t
1 retval: from io import
char:  
1 retval: from io import 
char: S
1 retval: from io import S
char: t
1 retval: from io import St
char: r
1 retval: from io import Str
char: i
1 retval: from io import Stri
char: n
1 retval: from io import Strin
char: g
1 retval: from io import String
char: I
1 retval: from io import StringI
char: O
1 retval: from io import StringIO
char: 

1 retval: from io import StringIO
2 retval: from io import StringIO
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: s
1 retval: from s
char: q
1 retval: from sq
char: l
1 retval: from sql
char: a
1 retval: from sqla
char: l
1 retval: from sqlal
char: c
1 retval: from sqlalc
char: h
1 retval: from sqlalch
char: e
1 retval: from sqlalche
char: m
1 retval: from sqlalchem
char: y
1 retval: from sqlalchemy
char:  
1 retval: from sqlalchemy 
char: i
1 retval: from sqlalchemy i
char: m
1 retval: from sqlalchemy im
char: p
1 retval: from sqlalchemy imp
char: o
1 retval: from sqlalchemy impo
char: r
1 retval: from sqlalchemy impor
char: t
1 retval: from sqlalchemy import
char:  
1 retval: from sqlalchemy import 
char: e
1 retval: from sqlalchemy import e
char: v
1 retval: from sqlalchemy import ev
char: e
1 retval: from sqlalchemy import eve
char: n
1 retval: from sqlalchemy import even
char: t
1 retval: from sqlalchemy import event
char: 

1 retval: from sqlalchemy import event
2 retval: from sqlalchemy import event
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: s
1 retval: from s
char: q
1 retval: from sq
char: l
1 retval: from sql
char: a
1 retval: from sqla
char: l
1 retval: from sqlal
char: c
1 retval: from sqlalc
char: h
1 retval: from sqlalch
char: e
1 retval: from sqlalche
char: m
1 retval: from sqlalchem
char: y
1 retval: from sqlalchemy
char: .
1 retval: from sqlalchemy.
char: e
1 retval: from sqlalchemy.e
char: n
1 retval: from sqlalchemy.en
char: g
1 retval: from sqlalchemy.eng
char: i
1 retval: from sqlalchemy.engi
char: n
1 retval: from sqlalchemy.engin
char: e
1 retval: from sqlalchemy.engine
char:  
1 retval: from sqlalchemy.engine 
char: i
1 retval: from sqlalchemy.engine i
char: m
1 retval: from sqlalchemy.engine im
char: p
1 retval: from sqlalchemy.engine imp
char: o
1 retval: from sqlalchemy.engine impo
char: r
1 retval: from sqlalchemy.engine impor
char: t
1 retval: from sqlalchemy.engine import
char:  
1 retval: from sqlalchemy.engine import 
char: E
1 retval: from sqlalchemy.engine import E
char: n
1 retval: from sqlalchemy.engine import En
char: g
1 retval: from sqlalchemy.engine import Eng
char: i
1 retval: from sqlalchemy.engine import Engi
char: n
1 retval: from sqlalchemy.engine import Engin
char: e
1 retval: from sqlalchemy.engine import Engine
char: 

1 retval: from sqlalchemy.engine import Engine
2 retval: from sqlalchemy.engine import Engine
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: s
1 retval: from s
char: q
1 retval: from sq
char: l
1 retval: from sql
char: a
1 retval: from sqla
char: l
1 retval: from sqlal
char: c
1 retval: from sqlalc
char: h
1 retval: from sqlalch
char: e
1 retval: from sqlalche
char: m
1 retval: from sqlalchem
char: y
1 retval: from sqlalchemy
char: .
1 retval: from sqlalchemy.
char: s
1 retval: from sqlalchemy.s
char: c
1 retval: from sqlalchemy.sc
char: h
1 retval: from sqlalchemy.sch
char: e
1 retval: from sqlalchemy.sche
char: m
1 retval: from sqlalchemy.schem
char: a
1 retval: from sqlalchemy.schema
char:  
1 retval: from sqlalchemy.schema 
char: i
1 retval: from sqlalchemy.schema i
char: m
1 retval: from sqlalchemy.schema im
char: p
1 retval: from sqlalchemy.schema imp
char: o
1 retval: from sqlalchemy.schema impo
char: r
1 retval: from sqlalchemy.schema impor
char: t
1 retval: from sqlalchemy.schema import
char:  
1 retval: from sqlalchemy.schema import 
char: D
1 retval: from sqlalchemy.schema import D
char: r
1 retval: from sqlalchemy.schema import Dr
char: o
1 retval: from sqlalchemy.schema import Dro
char: p
1 retval: from sqlalchemy.schema import Drop
char: T
1 retval: from sqlalchemy.schema import DropT
char: a
1 retval: from sqlalchemy.schema import DropTa
char: b
1 retval: from sqlalchemy.schema import DropTab
char: l
1 retval: from sqlalchemy.schema import DropTabl
char: e
1 retval: from sqlalchemy.schema import DropTable
char: 

1 retval: from sqlalchemy.schema import DropTable
2 retval: from sqlalchemy.schema import DropTable
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: s
1 retval: from s
char: q
1 retval: from sq
char: l
1 retval: from sql
char: a
1 retval: from sqla
char: l
1 retval: from sqlal
char: c
1 retval: from sqlalc
char: h
1 retval: from sqlalch
char: e
1 retval: from sqlalche
char: m
1 retval: from sqlalchem
char: y
1 retval: from sqlalchemy
char: .
1 retval: from sqlalchemy.
char: e
1 retval: from sqlalchemy.e
char: x
1 retval: from sqlalchemy.ex
char: t
1 retval: from sqlalchemy.ext
char: .
1 retval: from sqlalchemy.ext.
char: c
1 retval: from sqlalchemy.ext.c
char: o
1 retval: from sqlalchemy.ext.co
char: m
1 retval: from sqlalchemy.ext.com
char: p
1 retval: from sqlalchemy.ext.comp
char: i
1 retval: from sqlalchemy.ext.compi
char: l
1 retval: from sqlalchemy.ext.compil
char: e
1 retval: from sqlalchemy.ext.compile
char: r
1 retval: from sqlalchemy.ext.compiler
char:  
1 retval: from sqlalchemy.ext.compiler 
char: i
1 retval: from sqlalchemy.ext.compiler i
char: m
1 retval: from sqlalchemy.ext.compiler im
char: p
1 retval: from sqlalchemy.ext.compiler imp
char: o
1 retval: from sqlalchemy.ext.compiler impo
char: r
1 retval: from sqlalchemy.ext.compiler impor
char: t
1 retval: from sqlalchemy.ext.compiler import
char:  
1 retval: from sqlalchemy.ext.compiler import 
char: c
1 retval: from sqlalchemy.ext.compiler import c
char: o
1 retval: from sqlalchemy.ext.compiler import co
char: m
1 retval: from sqlalchemy.ext.compiler import com
char: p
1 retval: from sqlalchemy.ext.compiler import comp
char: i
1 retval: from sqlalchemy.ext.compiler import compi
char: l
1 retval: from sqlalchemy.ext.compiler import compil
char: e
1 retval: from sqlalchemy.ext.compiler import compile
char: s
1 retval: from sqlalchemy.ext.compiler import compiles
char: 

1 retval: from sqlalchemy.ext.compiler import compiles
2 retval: from sqlalchemy.ext.compiler import compiles
char: 

1 retval: 
2 retval: 
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: p
1 retval: import p
char: a
1 retval: import pa
char: n
1 retval: import pan
char: d
1 retval: import pand
char: a
1 retval: import panda
char: s
1 retval: import pandas
char: 

1 retval: import pandas
2 retval: import pandas
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: s
1 retval: import s
char: q
1 retval: import sq
char: l
1 retval: import sql
char: a
1 retval: import sqla
char: l
1 retval: import sqlal
char: c
1 retval: import sqlalc
char: h
1 retval: import sqlalch
char: e
1 retval: import sqlalche
char: m
1 retval: import sqlalchem
char: y
1 retval: import sqlalchemy
char: 

1 retval: import sqlalchemy
2 retval: import sqlalchemy
char: 

1 retval: 
2 retval: 
char: i
1 retval: i
char: m
1 retval: im
char: p
1 retval: imp
char: o
1 retval: impo
char: r
1 retval: impor
char: t
1 retval: import
char:  
1 retval: import 
char: l
1 retval: import l
char: o
1 retval: import lo
char: r
1 retval: import lor
char: e
1 retval: import lore
char: 

1 retval: import lore
2 retval: import lore
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: l
1 retval: from l
char: o
1 retval: from lo
char: r
1 retval: from lor
char: e
1 retval: from lore
char: .
1 retval: from lore.
char: u
1 retval: from lore.u
char: t
1 retval: from lore.ut
char: i
1 retval: from lore.uti
char: l
1 retval: from lore.util
char:  
1 retval: from lore.util 
char: i
1 retval: from lore.util i
char: m
1 retval: from lore.util im
char: p
1 retval: from lore.util imp
char: o
1 retval: from lore.util impo
char: r
1 retval: from lore.util impor
char: t
1 retval: from lore.util import
char:  
1 retval: from lore.util import 
char: t
1 retval: from lore.util import t
char: i
1 retval: from lore.util import ti
char: m
1 retval: from lore.util import tim
char: e
1 retval: from lore.util import time
char: r
1 retval: from lore.util import timer
char: 

1 retval: from lore.util import timer
2 retval: from lore.util import timer
char: f
1 retval: f
char: r
1 retval: fr
char: o
1 retval: fro
char: m
1 retval: from
char:  
1 retval: from 
char: l
1 retval: from l
char: o
1 retval: from lo
char: r
1 retval: from lor
char: e
1 retval: from lore
char: .
1 retval: from lore.
char: s
1 retval: from lore.s
char: t
1 retval: from lore.st
char: o
1 retval: from lore.sto
char: r
1 retval: from lore.stor
char: e
1 retval: from lore.store
char: s
1 retval: from lore.stores
char:  
1 retval: from lore.stores 
char: i
1 retval: from lore.stores i
char: m
1 retval: from lore.stores im
char: p
1 retval: from lore.stores imp
char: o
1 retval: from lore.stores impo
char: r
1 retval: from lore.stores impor
char: t
1 retval: from lore.stores import
char:  
1 retval: from lore.stores import 
char: q
1 retval: from lore.stores import q
char: u
1 retval: from lore.stores import qu
char: e
1 retval: from lore.stores import que
char: r
1 retval: from lore.stores import quer
char: y
1 retval: from lore.stores import query
char: _
1 retval: from lore.stores import query_
char: c
1 retval: from lore.stores import query_c
char: a
1 retval: from lore.stores import query_ca
char: c
1 retval: from lore.stores import query_cac
char: h
1 retval: from lore.stores import query_cach
char: e
1 retval: from lore.stores import query_cache
char: d
1 retval: from lore.stores import query_cached
char: 

1 retval: from lore.stores import query_cached
2 retval: from lore.stores import query_cached
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: l
1 retval: l
char: o
1 retval: lo
char: g
1 retval: log
char: g
1 retval: logg
char: e
1 retval: logge
char: r
1 retval: logger
char:  
1 retval: logger 
char: =
1 retval: logger =
char:  
1 retval: logger = 
char: l
1 retval: logger = l
char: o
1 retval: logger = lo
char: g
1 retval: logger = log
char: g
1 retval: logger = logg
char: i
1 retval: logger = loggi
char: n
1 retval: logger = loggin
char: g
1 retval: logger = logging
char: .
1 retval: logger = logging.
char: g
1 retval: logger = logging.g
char: e
1 retval: logger = logging.ge
char: t
1 retval: logger = logging.get
char: L
1 retval: logger = logging.getL
char: o
1 retval: logger = logging.getLo
char: g
1 retval: logger = logging.getLog
char: g
1 retval: logger = logging.getLogg
char: e
1 retval: logger = logging.getLogge
char: r
1 retval: logger = logging.getLogger
char: (
1 retval: logger = logging.getLogger(
char: _
1 retval: logger = logging.getLogger(_
char: _
1 retval: logger = logging.getLogger(__
char: n
1 retval: logger = logging.getLogger(__n
char: a
1 retval: logger = logging.getLogger(__na
char: m
1 retval: logger = logging.getLogger(__nam
char: e
1 retval: logger = logging.getLogger(__name
char: _
1 retval: logger = logging.getLogger(__name_
char: _
1 retval: logger = logging.getLogger(__name__
char: )
1 retval: logger = logging.getLogger(__name__)
char: 

1 retval: logger = logging.getLogger(__name__)
2 retval: logger = logging.getLogger(__name__)
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: @
1 retval: @
char: c
1 retval: @c
char: o
1 retval: @co
char: m
1 retval: @com
char: p
1 retval: @comp
char: i
1 retval: @compi
char: l
1 retval: @compil
char: e
1 retval: @compile
char: s
1 retval: @compiles
char: (
1 retval: @compiles(
char: D
1 retval: @compiles(D
char: r
1 retval: @compiles(Dr
char: o
1 retval: @compiles(Dro
char: p
1 retval: @compiles(Drop
char: T
1 retval: @compiles(DropT
char: a
1 retval: @compiles(DropTa
char: b
1 retval: @compiles(DropTab
char: l
1 retval: @compiles(DropTabl
char: e
1 retval: @compiles(DropTable
char: ,
1 retval: @compiles(DropTable,
char:  
1 retval: @compiles(DropTable, 
char: '
1 retval: @compiles(DropTable, '
char: p
1 retval: @compiles(DropTable, 'p
char: o
1 retval: @compiles(DropTable, 'po
char: s
1 retval: @compiles(DropTable, 'pos
char: t
1 retval: @compiles(DropTable, 'post
char: g
1 retval: @compiles(DropTable, 'postg
char: r
1 retval: @compiles(DropTable, 'postgr
char: e
1 retval: @compiles(DropTable, 'postgre
char: s
1 retval: @compiles(DropTable, 'postgres
char: q
1 retval: @compiles(DropTable, 'postgresq
char: l
1 retval: @compiles(DropTable, 'postgresql
char: '
1 retval: @compiles(DropTable, 'postgresql'
char: )
1 retval: @compiles(DropTable, 'postgresql')
char: 

1 retval: @compiles(DropTable, 'postgresql')
2 retval: @compiles(DropTable, 'postgresql')
char: d
1 retval: d
char: e
1 retval: de
char: f
1 retval: def
char:  
1 retval: def 
char: _
1 retval: def _
char: c
1 retval: def _c
char: o
1 retval: def _co
char: m
1 retval: def _com
char: p
1 retval: def _comp
char: i
1 retval: def _compi
char: l
1 retval: def _compil
char: e
1 retval: def _compile
char: _
1 retval: def _compile_
char: d
1 retval: def _compile_d
char: r
1 retval: def _compile_dr
char: o
1 retval: def _compile_dro
char: p
1 retval: def _compile_drop
char: _
1 retval: def _compile_drop_
char: t
1 retval: def _compile_drop_t
char: a
1 retval: def _compile_drop_ta
char: b
1 retval: def _compile_drop_tab
char: l
1 retval: def _compile_drop_tabl
char: e
1 retval: def _compile_drop_table
char: (
1 retval: def _compile_drop_table(
char: e
1 retval: def _compile_drop_table(e
char: l
1 retval: def _compile_drop_table(el
char: e
1 retval: def _compile_drop_table(ele
char: m
1 retval: def _compile_drop_table(elem
char: e
1 retval: def _compile_drop_table(eleme
char: n
1 retval: def _compile_drop_table(elemen
char: t
1 retval: def _compile_drop_table(element
char: ,
1 retval: def _compile_drop_table(element,
char:  
1 retval: def _compile_drop_table(element, 
char: c
1 retval: def _compile_drop_table(element, c
char: o
1 retval: def _compile_drop_table(element, co
char: m
1 retval: def _compile_drop_table(element, com
char: p
1 retval: def _compile_drop_table(element, comp
char: i
1 retval: def _compile_drop_table(element, compi
char: l
1 retval: def _compile_drop_table(element, compil
char: e
1 retval: def _compile_drop_table(element, compile
char: r
1 retval: def _compile_drop_table(element, compiler
char: ,
1 retval: def _compile_drop_table(element, compiler,
char:  
1 retval: def _compile_drop_table(element, compiler, 
char: *
1 retval: def _compile_drop_table(element, compiler, *
char: *
1 retval: def _compile_drop_table(element, compiler, **
char: k
1 retval: def _compile_drop_table(element, compiler, **k
char: w
1 retval: def _compile_drop_table(element, compiler, **kw
char: a
1 retval: def _compile_drop_table(element, compiler, **kwa
char: r
1 retval: def _compile_drop_table(element, compiler, **kwar
char: g
1 retval: def _compile_drop_table(element, compiler, **kwarg
char: s
1 retval: def _compile_drop_table(element, compiler, **kwargs
char: )
1 retval: def _compile_drop_table(element, compiler, **kwargs)
char: :
1 retval: def _compile_drop_table(element, compiler, **kwargs):
char: 

1 retval: def _compile_drop_table(element, compiler, **kwargs):
2 retval: def _compile_drop_table(element, compiler, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: r
1 retval:     r
char: e
1 retval:     re
char: t
1 retval:     ret
char: u
1 retval:     retu
char: r
1 retval:     retur
char: n
1 retval:     return
char:  
1 retval:     return 
char: c
1 retval:     return c
char: o
1 retval:     return co
char: m
1 retval:     return com
char: p
1 retval:     return comp
char: i
1 retval:     return compi
char: l
1 retval:     return compil
char: e
1 retval:     return compile
char: r
1 retval:     return compiler
char: .
1 retval:     return compiler.
char: v
1 retval:     return compiler.v
char: i
1 retval:     return compiler.vi
char: s
1 retval:     return compiler.vis
char: i
1 retval:     return compiler.visi
char: t
1 retval:     return compiler.visit
char: _
1 retval:     return compiler.visit_
char: d
1 retval:     return compiler.visit_d
char: r
1 retval:     return compiler.visit_dr
char: o
1 retval:     return compiler.visit_dro
char: p
1 retval:     return compiler.visit_drop
char: _
1 retval:     return compiler.visit_drop_
char: t
1 retval:     return compiler.visit_drop_t
char: a
1 retval:     return compiler.visit_drop_ta
char: b
1 retval:     return compiler.visit_drop_tab
char: l
1 retval:     return compiler.visit_drop_tabl
char: e
1 retval:     return compiler.visit_drop_table
char: (
1 retval:     return compiler.visit_drop_table(
char: e
1 retval:     return compiler.visit_drop_table(e
char: l
1 retval:     return compiler.visit_drop_table(el
char: e
1 retval:     return compiler.visit_drop_table(ele
char: m
1 retval:     return compiler.visit_drop_table(elem
char: e
1 retval:     return compiler.visit_drop_table(eleme
char: n
1 retval:     return compiler.visit_drop_table(elemen
char: t
1 retval:     return compiler.visit_drop_table(element
char: )
1 retval:     return compiler.visit_drop_table(element)
char:  
1 retval:     return compiler.visit_drop_table(element) 
char: +
1 retval:     return compiler.visit_drop_table(element) +
char:  
1 retval:     return compiler.visit_drop_table(element) + 
char: '
1 retval:     return compiler.visit_drop_table(element) + '
char:  
1 retval:     return compiler.visit_drop_table(element) + ' 
char: C
1 retval:     return compiler.visit_drop_table(element) + ' C
char: A
1 retval:     return compiler.visit_drop_table(element) + ' CA
char: S
1 retval:     return compiler.visit_drop_table(element) + ' CAS
char: C
1 retval:     return compiler.visit_drop_table(element) + ' CASC
char: A
1 retval:     return compiler.visit_drop_table(element) + ' CASCA
char: D
1 retval:     return compiler.visit_drop_table(element) + ' CASCAD
char: E
1 retval:     return compiler.visit_drop_table(element) + ' CASCADE
char: '
1 retval:     return compiler.visit_drop_table(element) + ' CASCADE'
char: 

1 retval:     return compiler.visit_drop_table(element) + ' CASCADE'
2 retval:     return compiler.visit_drop_table(element) + ' CASCADE'
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: c
1 retval: c
char: l
1 retval: cl
char: a
1 retval: cla
char: s
1 retval: clas
char: s
1 retval: class
char:  
1 retval: class 
char: C
1 retval: class C
char: o
1 retval: class Co
char: n
1 retval: class Con
char: n
1 retval: class Conn
char: e
1 retval: class Conne
char: c
1 retval: class Connec
char: t
1 retval: class Connect
char: i
1 retval: class Connecti
char: o
1 retval: class Connectio
char: n
1 retval: class Connection
char: (
1 retval: class Connection(
char: o
1 retval: class Connection(o
char: b
1 retval: class Connection(ob
char: j
1 retval: class Connection(obj
char: e
1 retval: class Connection(obje
char: c
1 retval: class Connection(objec
char: t
1 retval: class Connection(object
char: )
1 retval: class Connection(object)
char: :
1 retval: class Connection(object):
char: 

1 retval: class Connection(object):
2 retval: class Connection(object):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: U
1 retval:     U
char: N
1 retval:     UN
char: L
1 retval:     UNL
char: O
1 retval:     UNLO
char: A
1 retval:     UNLOA
char: D
1 retval:     UNLOAD
char: _
1 retval:     UNLOAD_
char: P
1 retval:     UNLOAD_P
char: R
1 retval:     UNLOAD_PR
char: E
1 retval:     UNLOAD_PRE
char: F
1 retval:     UNLOAD_PREF
char: I
1 retval:     UNLOAD_PREFI
char: X
1 retval:     UNLOAD_PREFIX
char:  
1 retval:     UNLOAD_PREFIX 
char: =
1 retval:     UNLOAD_PREFIX =
char:  
1 retval:     UNLOAD_PREFIX = 
char: o
1 retval:     UNLOAD_PREFIX = o
char: s
1 retval:     UNLOAD_PREFIX = os
char: .
1 retval:     UNLOAD_PREFIX = os.
char: p
1 retval:     UNLOAD_PREFIX = os.p
char: a
1 retval:     UNLOAD_PREFIX = os.pa
char: t
1 retval:     UNLOAD_PREFIX = os.pat
char: h
1 retval:     UNLOAD_PREFIX = os.path
char: .
1 retval:     UNLOAD_PREFIX = os.path.
char: j
1 retval:     UNLOAD_PREFIX = os.path.j
char: o
1 retval:     UNLOAD_PREFIX = os.path.jo
char: i
1 retval:     UNLOAD_PREFIX = os.path.joi
char: n
1 retval:     UNLOAD_PREFIX = os.path.join
char: (
1 retval:     UNLOAD_PREFIX = os.path.join(
char: l
1 retval:     UNLOAD_PREFIX = os.path.join(l
char: o
1 retval:     UNLOAD_PREFIX = os.path.join(lo
char: r
1 retval:     UNLOAD_PREFIX = os.path.join(lor
char: e
1 retval:     UNLOAD_PREFIX = os.path.join(lore
char: .
1 retval:     UNLOAD_PREFIX = os.path.join(lore.
char: e
1 retval:     UNLOAD_PREFIX = os.path.join(lore.e
char: n
1 retval:     UNLOAD_PREFIX = os.path.join(lore.en
char: v
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env
char: .
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.
char: n
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.n
char: a
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.na
char: m
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.nam
char: e
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name
char: ,
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name,
char:  
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 
char: '
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, '
char: u
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'u
char: n
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'un
char: l
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unl
char: o
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unlo
char: a
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloa
char: d
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unload
char: s
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads
char: '
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads'
char: )
1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads')
char: 

1 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads')
2 retval:     UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: I
1 retval:     I
char: A
1 retval:     IA
char: M
1 retval:     IAM
char: _
1 retval:     IAM_
char: R
1 retval:     IAM_R
char: O
1 retval:     IAM_RO
char: L
1 retval:     IAM_ROL
char: E
1 retval:     IAM_ROLE
char:  
1 retval:     IAM_ROLE 
char: =
1 retval:     IAM_ROLE =
char:  
1 retval:     IAM_ROLE = 
char: o
1 retval:     IAM_ROLE = o
char: s
1 retval:     IAM_ROLE = os
char: .
1 retval:     IAM_ROLE = os.
char: e
1 retval:     IAM_ROLE = os.e
char: n
1 retval:     IAM_ROLE = os.en
char: v
1 retval:     IAM_ROLE = os.env
char: i
1 retval:     IAM_ROLE = os.envi
char: r
1 retval:     IAM_ROLE = os.envir
char: o
1 retval:     IAM_ROLE = os.enviro
char: n
1 retval:     IAM_ROLE = os.environ
char: .
1 retval:     IAM_ROLE = os.environ.
char: g
1 retval:     IAM_ROLE = os.environ.g
char: e
1 retval:     IAM_ROLE = os.environ.ge
char: t
1 retval:     IAM_ROLE = os.environ.get
char: (
1 retval:     IAM_ROLE = os.environ.get(
char: '
1 retval:     IAM_ROLE = os.environ.get('
char: I
1 retval:     IAM_ROLE = os.environ.get('I
char: A
1 retval:     IAM_ROLE = os.environ.get('IA
char: M
1 retval:     IAM_ROLE = os.environ.get('IAM
char: _
1 retval:     IAM_ROLE = os.environ.get('IAM_
char: R
1 retval:     IAM_ROLE = os.environ.get('IAM_R
char: O
1 retval:     IAM_ROLE = os.environ.get('IAM_RO
char: L
1 retval:     IAM_ROLE = os.environ.get('IAM_ROL
char: E
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE
char: '
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE'
char: ,
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE',
char:  
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', 
char: N
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', N
char: o
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', No
char: n
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', Non
char: e
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', None
char: )
1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', None)
char: 

1 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', None)
2 retval:     IAM_ROLE = os.environ.get('IAM_ROLE', None)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: 

1 retval:     
2 retval:     
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: _
1 retval:     def __
char: i
1 retval:     def __i
char: n
1 retval:     def __in
char: i
1 retval:     def __ini
char: t
1 retval:     def __init
char: _
1 retval:     def __init_
char: _
1 retval:     def __init__
char: (
1 retval:     def __init__(
char: s
1 retval:     def __init__(s
char: e
1 retval:     def __init__(se
char: l
1 retval:     def __init__(sel
char: f
1 retval:     def __init__(self
char: ,
1 retval:     def __init__(self,
char:  
1 retval:     def __init__(self, 
char: u
1 retval:     def __init__(self, u
char: r
1 retval:     def __init__(self, ur
char: l
1 retval:     def __init__(self, url
char: ,
1 retval:     def __init__(self, url,
char:  
1 retval:     def __init__(self, url, 
char: *
1 retval:     def __init__(self, url, *
char: *
1 retval:     def __init__(self, url, **
char: k
1 retval:     def __init__(self, url, **k
char: w
1 retval:     def __init__(self, url, **kw
char: a
1 retval:     def __init__(self, url, **kwa
char: r
1 retval:     def __init__(self, url, **kwar
char: g
1 retval:     def __init__(self, url, **kwarg
char: s
1 retval:     def __init__(self, url, **kwargs
char: )
1 retval:     def __init__(self, url, **kwargs)
char: :
1 retval:     def __init__(self, url, **kwargs):
char: 

1 retval:     def __init__(self, url, **kwargs):
2 retval:     def __init__(self, url, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: f
1 retval:         f
char: o
1 retval:         fo
char: r
1 retval:         for
char:  
1 retval:         for 
char: i
1 retval:         for i
char: n
1 retval:         for in
char: t
1 retval:         for int
char: _
1 retval:         for int_
char: v
1 retval:         for int_v
char: a
1 retval:         for int_va
char: l
1 retval:         for int_val
char: u
1 retval:         for int_valu
char: e
1 retval:         for int_value
char:  
1 retval:         for int_value 
char: i
1 retval:         for int_value i
char: n
1 retval:         for int_value in
char:  
1 retval:         for int_value in 
char: [
1 retval:         for int_value in [
char: '
1 retval:         for int_value in ['
char: p
1 retval:         for int_value in ['p
char: o
1 retval:         for int_value in ['po
char: o
1 retval:         for int_value in ['poo
char: l
1 retval:         for int_value in ['pool
char: _
1 retval:         for int_value in ['pool_
char: s
1 retval:         for int_value in ['pool_s
char: i
1 retval:         for int_value in ['pool_si
char: z
1 retval:         for int_value in ['pool_siz
char: e
1 retval:         for int_value in ['pool_size
char: '
1 retval:         for int_value in ['pool_size'
char: ,
1 retval:         for int_value in ['pool_size',
char:  
1 retval:         for int_value in ['pool_size', 
char: '
1 retval:         for int_value in ['pool_size', '
char: p
1 retval:         for int_value in ['pool_size', 'p
char: o
1 retval:         for int_value in ['pool_size', 'po
char: o
1 retval:         for int_value in ['pool_size', 'poo
char: l
1 retval:         for int_value in ['pool_size', 'pool
char: _
1 retval:         for int_value in ['pool_size', 'pool_
char: r
1 retval:         for int_value in ['pool_size', 'pool_r
char: e
1 retval:         for int_value in ['pool_size', 'pool_re
char: c
1 retval:         for int_value in ['pool_size', 'pool_rec
char: y
1 retval:         for int_value in ['pool_size', 'pool_recy
char: c
1 retval:         for int_value in ['pool_size', 'pool_recyc
char: l
1 retval:         for int_value in ['pool_size', 'pool_recycl
char: e
1 retval:         for int_value in ['pool_size', 'pool_recycle
char: '
1 retval:         for int_value in ['pool_size', 'pool_recycle'
char: ,
1 retval:         for int_value in ['pool_size', 'pool_recycle',
char:  
1 retval:         for int_value in ['pool_size', 'pool_recycle', 
char: '
1 retval:         for int_value in ['pool_size', 'pool_recycle', '
char: m
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'm
char: a
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'ma
char: x
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max
char: _
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_
char: o
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_o
char: v
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_ov
char: e
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_ove
char: r
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_over
char: f
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overf
char: l
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overfl
char: o
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflo
char: w
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow
char: '
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow'
char: ]
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow']
char: :
1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow']:
char: 

1 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow']:
2 retval:         for int_value in ['pool_size', 'pool_recycle', 'max_overflow']:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: i
1 retval:             i
char: f
1 retval:             if
char:  
1 retval:             if 
char: i
1 retval:             if i
char: n
1 retval:             if in
char: t
1 retval:             if int
char: _
1 retval:             if int_
char: v
1 retval:             if int_v
char: a
1 retval:             if int_va
char: l
1 retval:             if int_val
char: u
1 retval:             if int_valu
char: e
1 retval:             if int_value
char:  
1 retval:             if int_value 
char: i
1 retval:             if int_value i
char: n
1 retval:             if int_value in
char:  
1 retval:             if int_value in 
char: k
1 retval:             if int_value in k
char: w
1 retval:             if int_value in kw
char: a
1 retval:             if int_value in kwa
char: r
1 retval:             if int_value in kwar
char: g
1 retval:             if int_value in kwarg
char: s
1 retval:             if int_value in kwargs
char: :
1 retval:             if int_value in kwargs:
char: 

1 retval:             if int_value in kwargs:
2 retval:             if int_value in kwargs:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: k
1 retval:                 k
char: w
1 retval:                 kw
char: a
1 retval:                 kwa
char: r
1 retval:                 kwar
char: g
1 retval:                 kwarg
char: s
1 retval:                 kwargs
char: [
1 retval:                 kwargs[
char: i
1 retval:                 kwargs[i
char: n
1 retval:                 kwargs[in
char: t
1 retval:                 kwargs[int
char: _
1 retval:                 kwargs[int_
char: v
1 retval:                 kwargs[int_v
char: a
1 retval:                 kwargs[int_va
char: l
1 retval:                 kwargs[int_val
char: u
1 retval:                 kwargs[int_valu
char: e
1 retval:                 kwargs[int_value
char: ]
1 retval:                 kwargs[int_value]
char:  
1 retval:                 kwargs[int_value] 
char: =
1 retval:                 kwargs[int_value] =
char:  
1 retval:                 kwargs[int_value] = 
char: i
1 retval:                 kwargs[int_value] = i
char: n
1 retval:                 kwargs[int_value] = in
char: t
1 retval:                 kwargs[int_value] = int
char: (
1 retval:                 kwargs[int_value] = int(
char: k
1 retval:                 kwargs[int_value] = int(k
char: w
1 retval:                 kwargs[int_value] = int(kw
char: a
1 retval:                 kwargs[int_value] = int(kwa
char: r
1 retval:                 kwargs[int_value] = int(kwar
char: g
1 retval:                 kwargs[int_value] = int(kwarg
char: s
1 retval:                 kwargs[int_value] = int(kwargs
char: [
1 retval:                 kwargs[int_value] = int(kwargs[
char: i
1 retval:                 kwargs[int_value] = int(kwargs[i
char: n
1 retval:                 kwargs[int_value] = int(kwargs[in
char: t
1 retval:                 kwargs[int_value] = int(kwargs[int
char: _
1 retval:                 kwargs[int_value] = int(kwargs[int_
char: v
1 retval:                 kwargs[int_value] = int(kwargs[int_v
char: a
1 retval:                 kwargs[int_value] = int(kwargs[int_va
char: l
1 retval:                 kwargs[int_value] = int(kwargs[int_val
char: u
1 retval:                 kwargs[int_value] = int(kwargs[int_valu
char: e
1 retval:                 kwargs[int_value] = int(kwargs[int_value
char: ]
1 retval:                 kwargs[int_value] = int(kwargs[int_value]
char: )
1 retval:                 kwargs[int_value] = int(kwargs[int_value])
char: 

1 retval:                 kwargs[int_value] = int(kwargs[int_value])
2 retval:                 kwargs[int_value] = int(kwargs[int_value])
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: '
1 retval:         if '
char: p
1 retval:         if 'p
char: o
1 retval:         if 'po
char: o
1 retval:         if 'poo
char: l
1 retval:         if 'pool
char: c
1 retval:         if 'poolc
char: l
1 retval:         if 'poolcl
char: a
1 retval:         if 'poolcla
char: s
1 retval:         if 'poolclas
char: s
1 retval:         if 'poolclass
char: '
1 retval:         if 'poolclass'
char:  
1 retval:         if 'poolclass' 
char: i
1 retval:         if 'poolclass' i
char: n
1 retval:         if 'poolclass' in
char:  
1 retval:         if 'poolclass' in 
char: k
1 retval:         if 'poolclass' in k
char: w
1 retval:         if 'poolclass' in kw
char: a
1 retval:         if 'poolclass' in kwa
char: r
1 retval:         if 'poolclass' in kwar
char: g
1 retval:         if 'poolclass' in kwarg
char: s
1 retval:         if 'poolclass' in kwargs
char: :
1 retval:         if 'poolclass' in kwargs:
char: 

1 retval:         if 'poolclass' in kwargs:
2 retval:         if 'poolclass' in kwargs:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: k
1 retval:             k
char: w
1 retval:             kw
char: a
1 retval:             kwa
char: r
1 retval:             kwar
char: g
1 retval:             kwarg
char: s
1 retval:             kwargs
char: [
1 retval:             kwargs[
char: '
1 retval:             kwargs['
char: p
1 retval:             kwargs['p
char: o
1 retval:             kwargs['po
char: o
1 retval:             kwargs['poo
char: l
1 retval:             kwargs['pool
char: c
1 retval:             kwargs['poolc
char: l
1 retval:             kwargs['poolcl
char: a
1 retval:             kwargs['poolcla
char: s
1 retval:             kwargs['poolclas
char: s
1 retval:             kwargs['poolclass
char: '
1 retval:             kwargs['poolclass'
char: ]
1 retval:             kwargs['poolclass']
char:  
1 retval:             kwargs['poolclass'] 
char: =
1 retval:             kwargs['poolclass'] =
char:  
1 retval:             kwargs['poolclass'] = 
char: g
1 retval:             kwargs['poolclass'] = g
char: e
1 retval:             kwargs['poolclass'] = ge
char: t
1 retval:             kwargs['poolclass'] = get
char: a
1 retval:             kwargs['poolclass'] = geta
char: t
1 retval:             kwargs['poolclass'] = getat
char: t
1 retval:             kwargs['poolclass'] = getatt
char: r
1 retval:             kwargs['poolclass'] = getattr
char: (
1 retval:             kwargs['poolclass'] = getattr(
char: s
1 retval:             kwargs['poolclass'] = getattr(s
char: q
1 retval:             kwargs['poolclass'] = getattr(sq
char: l
1 retval:             kwargs['poolclass'] = getattr(sql
char: a
1 retval:             kwargs['poolclass'] = getattr(sqla
char: l
1 retval:             kwargs['poolclass'] = getattr(sqlal
char: c
1 retval:             kwargs['poolclass'] = getattr(sqlalc
char: h
1 retval:             kwargs['poolclass'] = getattr(sqlalch
char: e
1 retval:             kwargs['poolclass'] = getattr(sqlalche
char: m
1 retval:             kwargs['poolclass'] = getattr(sqlalchem
char: y
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy
char: .
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.
char: p
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.p
char: o
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.po
char: o
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.poo
char: l
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool
char: ,
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool,
char:  
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, 
char: k
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, k
char: w
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kw
char: a
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwa
char: r
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwar
char: g
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwarg
char: s
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs
char: [
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs[
char: '
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['
char: p
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['p
char: o
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['po
char: o
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poo
char: l
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['pool
char: c
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolc
char: l
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolcl
char: a
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolcla
char: s
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclas
char: s
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass
char: '
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'
char: ]
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass']
char: )
1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'])
char: 

1 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'])
2 retval:             kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'])
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: '
1 retval:         if '
char: _
1 retval:         if '_
char: _
1 retval:         if '__
char: n
1 retval:         if '__n
char: a
1 retval:         if '__na
char: m
1 retval:         if '__nam
char: e
1 retval:         if '__name
char: _
1 retval:         if '__name_
char: _
1 retval:         if '__name__
char: '
1 retval:         if '__name__'
char:  
1 retval:         if '__name__' 
char: i
1 retval:         if '__name__' i
char: n
1 retval:         if '__name__' in
char:  
1 retval:         if '__name__' in 
char: k
1 retval:         if '__name__' in k
char: w
1 retval:         if '__name__' in kw
char: a
1 retval:         if '__name__' in kwa
char: r
1 retval:         if '__name__' in kwar
char: g
1 retval:         if '__name__' in kwarg
char: s
1 retval:         if '__name__' in kwargs
char: :
1 retval:         if '__name__' in kwargs:
char: 

1 retval:         if '__name__' in kwargs:
2 retval:         if '__name__' in kwargs:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: d
1 retval:             d
char: e
1 retval:             de
char: l
1 retval:             del
char:  
1 retval:             del 
char: k
1 retval:             del k
char: w
1 retval:             del kw
char: a
1 retval:             del kwa
char: r
1 retval:             del kwar
char: g
1 retval:             del kwarg
char: s
1 retval:             del kwargs
char: [
1 retval:             del kwargs[
char: '
1 retval:             del kwargs['
char: _
1 retval:             del kwargs['_
char: _
1 retval:             del kwargs['__
char: n
1 retval:             del kwargs['__n
char: a
1 retval:             del kwargs['__na
char: m
1 retval:             del kwargs['__nam
char: e
1 retval:             del kwargs['__name
char: _
1 retval:             del kwargs['__name_
char: _
1 retval:             del kwargs['__name__
char: '
1 retval:             del kwargs['__name__'
char: ]
1 retval:             del kwargs['__name__']
char: 

1 retval:             del kwargs['__name__']
2 retval:             del kwargs['__name__']
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: e
1 retval:         self._e
char: n
1 retval:         self._en
char: g
1 retval:         self._eng
char: i
1 retval:         self._engi
char: n
1 retval:         self._engin
char: e
1 retval:         self._engine
char:  
1 retval:         self._engine 
char: =
1 retval:         self._engine =
char:  
1 retval:         self._engine = 
char: s
1 retval:         self._engine = s
char: q
1 retval:         self._engine = sq
char: l
1 retval:         self._engine = sql
char: a
1 retval:         self._engine = sqla
char: l
1 retval:         self._engine = sqlal
char: c
1 retval:         self._engine = sqlalc
char: h
1 retval:         self._engine = sqlalch
char: e
1 retval:         self._engine = sqlalche
char: m
1 retval:         self._engine = sqlalchem
char: y
1 retval:         self._engine = sqlalchemy
char: .
1 retval:         self._engine = sqlalchemy.
char: c
1 retval:         self._engine = sqlalchemy.c
char: r
1 retval:         self._engine = sqlalchemy.cr
char: e
1 retval:         self._engine = sqlalchemy.cre
char: a
1 retval:         self._engine = sqlalchemy.crea
char: t
1 retval:         self._engine = sqlalchemy.creat
char: e
1 retval:         self._engine = sqlalchemy.create
char: _
1 retval:         self._engine = sqlalchemy.create_
char: e
1 retval:         self._engine = sqlalchemy.create_e
char: n
1 retval:         self._engine = sqlalchemy.create_en
char: g
1 retval:         self._engine = sqlalchemy.create_eng
char: i
1 retval:         self._engine = sqlalchemy.create_engi
char: n
1 retval:         self._engine = sqlalchemy.create_engin
char: e
1 retval:         self._engine = sqlalchemy.create_engine
char: (
1 retval:         self._engine = sqlalchemy.create_engine(
char: u
1 retval:         self._engine = sqlalchemy.create_engine(u
char: r
1 retval:         self._engine = sqlalchemy.create_engine(ur
char: l
1 retval:         self._engine = sqlalchemy.create_engine(url
char: ,
1 retval:         self._engine = sqlalchemy.create_engine(url,
char:  
1 retval:         self._engine = sqlalchemy.create_engine(url, 
char: *
1 retval:         self._engine = sqlalchemy.create_engine(url, *
char: *
1 retval:         self._engine = sqlalchemy.create_engine(url, **
char: k
1 retval:         self._engine = sqlalchemy.create_engine(url, **k
char: w
1 retval:         self._engine = sqlalchemy.create_engine(url, **kw
char: a
1 retval:         self._engine = sqlalchemy.create_engine(url, **kwa
char: r
1 retval:         self._engine = sqlalchemy.create_engine(url, **kwar
char: g
1 retval:         self._engine = sqlalchemy.create_engine(url, **kwarg
char: s
1 retval:         self._engine = sqlalchemy.create_engine(url, **kwargs
char: )
1 retval:         self._engine = sqlalchemy.create_engine(url, **kwargs)
char: 

1 retval:         self._engine = sqlalchemy.create_engine(url, **kwargs)
2 retval:         self._engine = sqlalchemy.create_engine(url, **kwargs)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: c
1 retval:         self._c
char: o
1 retval:         self._co
char: n
1 retval:         self._con
char: n
1 retval:         self._conn
char: e
1 retval:         self._conne
char: c
1 retval:         self._connec
char: t
1 retval:         self._connect
char: i
1 retval:         self._connecti
char: o
1 retval:         self._connectio
char: n
1 retval:         self._connection
char:  
1 retval:         self._connection 
char: =
1 retval:         self._connection =
char:  
1 retval:         self._connection = 
char: N
1 retval:         self._connection = N
char: o
1 retval:         self._connection = No
char: n
1 retval:         self._connection = Non
char: e
1 retval:         self._connection = None
char: 

1 retval:         self._connection = None
2 retval:         self._connection = None
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: m
1 retval:         self._m
char: e
1 retval:         self._me
char: t
1 retval:         self._met
char: a
1 retval:         self._meta
char: d
1 retval:         self._metad
char: a
1 retval:         self._metada
char: t
1 retval:         self._metadat
char: a
1 retval:         self._metadata
char:  
1 retval:         self._metadata 
char: =
1 retval:         self._metadata =
char:  
1 retval:         self._metadata = 
char: N
1 retval:         self._metadata = N
char: o
1 retval:         self._metadata = No
char: n
1 retval:         self._metadata = Non
char: e
1 retval:         self._metadata = None
char: 

1 retval:         self._metadata = None
2 retval:         self._metadata = None
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: t
1 retval:         self._t
char: r
1 retval:         self._tr
char: a
1 retval:         self._tra
char: n
1 retval:         self._tran
char: s
1 retval:         self._trans
char: a
1 retval:         self._transa
char: c
1 retval:         self._transac
char: t
1 retval:         self._transact
char: i
1 retval:         self._transacti
char: o
1 retval:         self._transactio
char: n
1 retval:         self._transaction
char: s
1 retval:         self._transactions
char:  
1 retval:         self._transactions 
char: =
1 retval:         self._transactions =
char:  
1 retval:         self._transactions = 
char: [
1 retval:         self._transactions = [
char: ]
1 retval:         self._transactions = []
char: 

1 retval:         self._transactions = []
2 retval:         self._transactions = []
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: 

1 retval:     
2 retval:     
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: _
1 retval:     def __
char: e
1 retval:     def __e
char: n
1 retval:     def __en
char: t
1 retval:     def __ent
char: e
1 retval:     def __ente
char: r
1 retval:     def __enter
char: _
1 retval:     def __enter_
char: _
1 retval:     def __enter__
char: (
1 retval:     def __enter__(
char: s
1 retval:     def __enter__(s
char: e
1 retval:     def __enter__(se
char: l
1 retval:     def __enter__(sel
char: f
1 retval:     def __enter__(self
char: )
1 retval:     def __enter__(self)
char: :
1 retval:     def __enter__(self):
char: 

1 retval:     def __enter__(self):
2 retval:     def __enter__(self):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: s
1 retval:         if s
char: e
1 retval:         if se
char: l
1 retval:         if sel
char: f
1 retval:         if self
char: .
1 retval:         if self.
char: _
1 retval:         if self._
char: c
1 retval:         if self._c
char: o
1 retval:         if self._co
char: n
1 retval:         if self._con
char: n
1 retval:         if self._conn
char: e
1 retval:         if self._conne
char: c
1 retval:         if self._connec
char: t
1 retval:         if self._connect
char: i
1 retval:         if self._connecti
char: o
1 retval:         if self._connectio
char: n
1 retval:         if self._connection
char:  
1 retval:         if self._connection 
char: i
1 retval:         if self._connection i
char: s
1 retval:         if self._connection is
char:  
1 retval:         if self._connection is 
char: N
1 retval:         if self._connection is N
char: o
1 retval:         if self._connection is No
char: n
1 retval:         if self._connection is Non
char: e
1 retval:         if self._connection is None
char: :
1 retval:         if self._connection is None:
char: 

1 retval:         if self._connection is None:
2 retval:         if self._connection is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: _
1 retval:             self._
char: c
1 retval:             self._c
char: o
1 retval:             self._co
char: n
1 retval:             self._con
char: n
1 retval:             self._conn
char: e
1 retval:             self._conne
char: c
1 retval:             self._connec
char: t
1 retval:             self._connect
char: i
1 retval:             self._connecti
char: o
1 retval:             self._connectio
char: n
1 retval:             self._connection
char:  
1 retval:             self._connection 
char: =
1 retval:             self._connection =
char:  
1 retval:             self._connection = 
char: s
1 retval:             self._connection = s
char: e
1 retval:             self._connection = se
char: l
1 retval:             self._connection = sel
char: f
1 retval:             self._connection = self
char: .
1 retval:             self._connection = self.
char: _
1 retval:             self._connection = self._
char: e
1 retval:             self._connection = self._e
char: n
1 retval:             self._connection = self._en
char: g
1 retval:             self._connection = self._eng
char: i
1 retval:             self._connection = self._engi
char: n
1 retval:             self._connection = self._engin
char: e
1 retval:             self._connection = self._engine
char: .
1 retval:             self._connection = self._engine.
char: c
1 retval:             self._connection = self._engine.c
char: o
1 retval:             self._connection = self._engine.co
char: n
1 retval:             self._connection = self._engine.con
char: n
1 retval:             self._connection = self._engine.conn
char: e
1 retval:             self._connection = self._engine.conne
char: c
1 retval:             self._connection = self._engine.connec
char: t
1 retval:             self._connection = self._engine.connect
char: (
1 retval:             self._connection = self._engine.connect(
char: )
1 retval:             self._connection = self._engine.connect()
char: 

1 retval:             self._connection = self._engine.connect()
2 retval:             self._connection = self._engine.connect()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: t
1 retval:         self._t
char: r
1 retval:         self._tr
char: a
1 retval:         self._tra
char: n
1 retval:         self._tran
char: s
1 retval:         self._trans
char: a
1 retval:         self._transa
char: c
1 retval:         self._transac
char: t
1 retval:         self._transact
char: i
1 retval:         self._transacti
char: o
1 retval:         self._transactio
char: n
1 retval:         self._transaction
char: s
1 retval:         self._transactions
char: .
1 retval:         self._transactions.
char: a
1 retval:         self._transactions.a
char: p
1 retval:         self._transactions.ap
char: p
1 retval:         self._transactions.app
char: e
1 retval:         self._transactions.appe
char: n
1 retval:         self._transactions.appen
char: d
1 retval:         self._transactions.append
char: (
1 retval:         self._transactions.append(
char: s
1 retval:         self._transactions.append(s
char: e
1 retval:         self._transactions.append(se
char: l
1 retval:         self._transactions.append(sel
char: f
1 retval:         self._transactions.append(self
char: .
1 retval:         self._transactions.append(self.
char: _
1 retval:         self._transactions.append(self._
char: c
1 retval:         self._transactions.append(self._c
char: o
1 retval:         self._transactions.append(self._co
char: n
1 retval:         self._transactions.append(self._con
char: n
1 retval:         self._transactions.append(self._conn
char: e
1 retval:         self._transactions.append(self._conne
char: c
1 retval:         self._transactions.append(self._connec
char: t
1 retval:         self._transactions.append(self._connect
char: i
1 retval:         self._transactions.append(self._connecti
char: o
1 retval:         self._transactions.append(self._connectio
char: n
1 retval:         self._transactions.append(self._connection
char: .
1 retval:         self._transactions.append(self._connection.
char: b
1 retval:         self._transactions.append(self._connection.b
char: e
1 retval:         self._transactions.append(self._connection.be
char: g
1 retval:         self._transactions.append(self._connection.beg
char: i
1 retval:         self._transactions.append(self._connection.begi
char: n
1 retval:         self._transactions.append(self._connection.begin
char: (
1 retval:         self._transactions.append(self._connection.begin(
char: )
1 retval:         self._transactions.append(self._connection.begin()
char: )
1 retval:         self._transactions.append(self._connection.begin())
char: 

1 retval:         self._transactions.append(self._connection.begin())
2 retval:         self._transactions.append(self._connection.begin())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: 

1 retval:         return self
2 retval:         return self
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: 

1 retval:     
2 retval:     
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: _
1 retval:     def __
char: e
1 retval:     def __e
char: x
1 retval:     def __ex
char: i
1 retval:     def __exi
char: t
1 retval:     def __exit
char: _
1 retval:     def __exit_
char: _
1 retval:     def __exit__
char: (
1 retval:     def __exit__(
char: s
1 retval:     def __exit__(s
char: e
1 retval:     def __exit__(se
char: l
1 retval:     def __exit__(sel
char: f
1 retval:     def __exit__(self
char: ,
1 retval:     def __exit__(self,
char:  
1 retval:     def __exit__(self, 
char: t
1 retval:     def __exit__(self, t
char: y
1 retval:     def __exit__(self, ty
char: p
1 retval:     def __exit__(self, typ
char: e
1 retval:     def __exit__(self, type
char: ,
1 retval:     def __exit__(self, type,
char:  
1 retval:     def __exit__(self, type, 
char: v
1 retval:     def __exit__(self, type, v
char: a
1 retval:     def __exit__(self, type, va
char: l
1 retval:     def __exit__(self, type, val
char: u
1 retval:     def __exit__(self, type, valu
char: e
1 retval:     def __exit__(self, type, value
char: ,
1 retval:     def __exit__(self, type, value,
char:  
1 retval:     def __exit__(self, type, value, 
char: t
1 retval:     def __exit__(self, type, value, t
char: r
1 retval:     def __exit__(self, type, value, tr
char: a
1 retval:     def __exit__(self, type, value, tra
char: c
1 retval:     def __exit__(self, type, value, trac
char: e
1 retval:     def __exit__(self, type, value, trace
char: b
1 retval:     def __exit__(self, type, value, traceb
char: a
1 retval:     def __exit__(self, type, value, traceba
char: c
1 retval:     def __exit__(self, type, value, tracebac
char: k
1 retval:     def __exit__(self, type, value, traceback
char: )
1 retval:     def __exit__(self, type, value, traceback)
char: :
1 retval:     def __exit__(self, type, value, traceback):
char: 

1 retval:     def __exit__(self, type, value, traceback):
2 retval:     def __exit__(self, type, value, traceback):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: t
1 retval:         t
char: r
1 retval:         tr
char: a
1 retval:         tra
char: n
1 retval:         tran
char: s
1 retval:         trans
char: a
1 retval:         transa
char: c
1 retval:         transac
char: t
1 retval:         transact
char: i
1 retval:         transacti
char: o
1 retval:         transactio
char: n
1 retval:         transaction
char:  
1 retval:         transaction 
char: =
1 retval:         transaction =
char:  
1 retval:         transaction = 
char: s
1 retval:         transaction = s
char: e
1 retval:         transaction = se
char: l
1 retval:         transaction = sel
char: f
1 retval:         transaction = self
char: .
1 retval:         transaction = self.
char: _
1 retval:         transaction = self._
char: t
1 retval:         transaction = self._t
char: r
1 retval:         transaction = self._tr
char: a
1 retval:         transaction = self._tra
char: n
1 retval:         transaction = self._tran
char: s
1 retval:         transaction = self._trans
char: a
1 retval:         transaction = self._transa
char: c
1 retval:         transaction = self._transac
char: t
1 retval:         transaction = self._transact
char: i
1 retval:         transaction = self._transacti
char: o
1 retval:         transaction = self._transactio
char: n
1 retval:         transaction = self._transaction
char: s
1 retval:         transaction = self._transactions
char: .
1 retval:         transaction = self._transactions.
char: p
1 retval:         transaction = self._transactions.p
char: o
1 retval:         transaction = self._transactions.po
char: p
1 retval:         transaction = self._transactions.pop
char: (
1 retval:         transaction = self._transactions.pop(
char: )
1 retval:         transaction = self._transactions.pop()
char: 

1 retval:         transaction = self._transactions.pop()
2 retval:         transaction = self._transactions.pop()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: t
1 retval:         if t
char: y
1 retval:         if ty
char: p
1 retval:         if typ
char: e
1 retval:         if type
char:  
1 retval:         if type 
char: i
1 retval:         if type i
char: s
1 retval:         if type is
char:  
1 retval:         if type is 
char: N
1 retval:         if type is N
char: o
1 retval:         if type is No
char: n
1 retval:         if type is Non
char: e
1 retval:         if type is None
char: :
1 retval:         if type is None:
char: 

1 retval:         if type is None:
2 retval:         if type is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: t
1 retval:             t
char: r
1 retval:             tr
char: a
1 retval:             tra
char: n
1 retval:             tran
char: s
1 retval:             trans
char: a
1 retval:             transa
char: c
1 retval:             transac
char: t
1 retval:             transact
char: i
1 retval:             transacti
char: o
1 retval:             transactio
char: n
1 retval:             transaction
char: .
1 retval:             transaction.
char: c
1 retval:             transaction.c
char: o
1 retval:             transaction.co
char: m
1 retval:             transaction.com
char: m
1 retval:             transaction.comm
char: i
1 retval:             transaction.commi
char: t
1 retval:             transaction.commit
char: (
1 retval:             transaction.commit(
char: )
1 retval:             transaction.commit()
char: 

1 retval:             transaction.commit()
2 retval:             transaction.commit()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: e
1 retval:         e
char: l
1 retval:         el
char: s
1 retval:         els
char: e
1 retval:         else
char: :
1 retval:         else:
char: 

1 retval:         else:
2 retval:         else:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: t
1 retval:             t
char: r
1 retval:             tr
char: a
1 retval:             tra
char: n
1 retval:             tran
char: s
1 retval:             trans
char: a
1 retval:             transa
char: c
1 retval:             transac
char: t
1 retval:             transact
char: i
1 retval:             transacti
char: o
1 retval:             transactio
char: n
1 retval:             transaction
char: .
1 retval:             transaction.
char: r
1 retval:             transaction.r
char: o
1 retval:             transaction.ro
char: l
1 retval:             transaction.rol
char: l
1 retval:             transaction.roll
char: b
1 retval:             transaction.rollb
char: a
1 retval:             transaction.rollba
char: c
1 retval:             transaction.rollbac
char: k
1 retval:             transaction.rollback
char: (
1 retval:             transaction.rollback(
char: )
1 retval:             transaction.rollback()
char: 

1 retval:             transaction.rollback()
2 retval:             transaction.rollback()
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: s
1 retval:     @s
char: t
1 retval:     @st
char: a
1 retval:     @sta
char: t
1 retval:     @stat
char: i
1 retval:     @stati
char: c
1 retval:     @static
char: m
1 retval:     @staticm
char: e
1 retval:     @staticme
char: t
1 retval:     @staticmet
char: h
1 retval:     @staticmeth
char: o
1 retval:     @staticmetho
char: d
1 retval:     @staticmethod
char: 

1 retval:     @staticmethod
2 retval:     @staticmethod
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: p
1 retval:     def p
char: a
1 retval:     def pa
char: t
1 retval:     def pat
char: h
1 retval:     def path
char: (
1 retval:     def path(
char: f
1 retval:     def path(f
char: i
1 retval:     def path(fi
char: l
1 retval:     def path(fil
char: e
1 retval:     def path(file
char: n
1 retval:     def path(filen
char: a
1 retval:     def path(filena
char: m
1 retval:     def path(filenam
char: e
1 retval:     def path(filename
char: ,
1 retval:     def path(filename,
char:  
1 retval:     def path(filename, 
char: e
1 retval:     def path(filename, e
char: x
1 retval:     def path(filename, ex
char: t
1 retval:     def path(filename, ext
char: e
1 retval:     def path(filename, exte
char: n
1 retval:     def path(filename, exten
char: s
1 retval:     def path(filename, extens
char: i
1 retval:     def path(filename, extensi
char: o
1 retval:     def path(filename, extensio
char: n
1 retval:     def path(filename, extension
char: =
1 retval:     def path(filename, extension=
char: '
1 retval:     def path(filename, extension='
char: .
1 retval:     def path(filename, extension='.
char: s
1 retval:     def path(filename, extension='.s
char: q
1 retval:     def path(filename, extension='.sq
char: l
1 retval:     def path(filename, extension='.sql
char: '
1 retval:     def path(filename, extension='.sql'
char: )
1 retval:     def path(filename, extension='.sql')
char: :
1 retval:     def path(filename, extension='.sql'):
char: 

1 retval:     def path(filename, extension='.sql'):
2 retval:     def path(filename, extension='.sql'):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: o
1 retval:         return o
char: s
1 retval:         return os
char: .
1 retval:         return os.
char: p
1 retval:         return os.p
char: a
1 retval:         return os.pa
char: t
1 retval:         return os.pat
char: h
1 retval:         return os.path
char: .
1 retval:         return os.path.
char: j
1 retval:         return os.path.j
char: o
1 retval:         return os.path.jo
char: i
1 retval:         return os.path.joi
char: n
1 retval:         return os.path.join
char: (
1 retval:         return os.path.join(
char: 

1 retval:         return os.path.join(
2 retval:         return os.path.join(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: r
1 retval:             lor
char: e
1 retval:             lore
char: .
1 retval:             lore.
char: e
1 retval:             lore.e
char: n
1 retval:             lore.en
char: v
1 retval:             lore.env
char: .
1 retval:             lore.env.
char: r
1 retval:             lore.env.r
char: o
1 retval:             lore.env.ro
char: o
1 retval:             lore.env.roo
char: t
1 retval:             lore.env.root
char: ,
1 retval:             lore.env.root,
char:  
1 retval:             lore.env.root, 
char: l
1 retval:             lore.env.root, l
char: o
1 retval:             lore.env.root, lo
char: r
1 retval:             lore.env.root, lor
char: e
1 retval:             lore.env.root, lore
char: .
1 retval:             lore.env.root, lore.
char: e
1 retval:             lore.env.root, lore.e
char: n
1 retval:             lore.env.root, lore.en
char: v
1 retval:             lore.env.root, lore.env
char: .
1 retval:             lore.env.root, lore.env.
char: p
1 retval:             lore.env.root, lore.env.p
char: r
1 retval:             lore.env.root, lore.env.pr
char: o
1 retval:             lore.env.root, lore.env.pro
char: j
1 retval:             lore.env.root, lore.env.proj
char: e
1 retval:             lore.env.root, lore.env.proje
char: c
1 retval:             lore.env.root, lore.env.projec
char: t
1 retval:             lore.env.root, lore.env.project
char: ,
1 retval:             lore.env.root, lore.env.project,
char:  
1 retval:             lore.env.root, lore.env.project, 
char: '
1 retval:             lore.env.root, lore.env.project, '
char: e
1 retval:             lore.env.root, lore.env.project, 'e
char: x
1 retval:             lore.env.root, lore.env.project, 'ex
char: t
1 retval:             lore.env.root, lore.env.project, 'ext
char: r
1 retval:             lore.env.root, lore.env.project, 'extr
char: a
1 retval:             lore.env.root, lore.env.project, 'extra
char: c
1 retval:             lore.env.root, lore.env.project, 'extrac
char: t
1 retval:             lore.env.root, lore.env.project, 'extract
char: s
1 retval:             lore.env.root, lore.env.project, 'extracts
char: '
1 retval:             lore.env.root, lore.env.project, 'extracts'
char: ,
1 retval:             lore.env.root, lore.env.project, 'extracts',
char: 

1 retval:             lore.env.root, lore.env.project, 'extracts',
2 retval:             lore.env.root, lore.env.project, 'extracts',
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: i
1 retval:             fi
char: l
1 retval:             fil
char: e
1 retval:             file
char: n
1 retval:             filen
char: a
1 retval:             filena
char: m
1 retval:             filenam
char: e
1 retval:             filename
char:  
1 retval:             filename 
char: +
1 retval:             filename +
char:  
1 retval:             filename + 
char: e
1 retval:             filename + e
char: x
1 retval:             filename + ex
char: t
1 retval:             filename + ext
char: e
1 retval:             filename + exte
char: n
1 retval:             filename + exten
char: s
1 retval:             filename + extens
char: i
1 retval:             filename + extensi
char: o
1 retval:             filename + extensio
char: n
1 retval:             filename + extension
char: )
1 retval:             filename + extension)
char: 

1 retval:             filename + extension)
2 retval:             filename + extension)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: e
1 retval:     def e
char: x
1 retval:     def ex
char: e
1 retval:     def exe
char: c
1 retval:     def exec
char: u
1 retval:     def execu
char: t
1 retval:     def execut
char: e
1 retval:     def execute
char: (
1 retval:     def execute(
char: s
1 retval:     def execute(s
char: e
1 retval:     def execute(se
char: l
1 retval:     def execute(sel
char: f
1 retval:     def execute(self
char: ,
1 retval:     def execute(self,
char:  
1 retval:     def execute(self, 
char: s
1 retval:     def execute(self, s
char: q
1 retval:     def execute(self, sq
char: l
1 retval:     def execute(self, sql
char: =
1 retval:     def execute(self, sql=
char: N
1 retval:     def execute(self, sql=N
char: o
1 retval:     def execute(self, sql=No
char: n
1 retval:     def execute(self, sql=Non
char: e
1 retval:     def execute(self, sql=None
char: ,
1 retval:     def execute(self, sql=None,
char:  
1 retval:     def execute(self, sql=None, 
char: f
1 retval:     def execute(self, sql=None, f
char: i
1 retval:     def execute(self, sql=None, fi
char: l
1 retval:     def execute(self, sql=None, fil
char: e
1 retval:     def execute(self, sql=None, file
char: n
1 retval:     def execute(self, sql=None, filen
char: a
1 retval:     def execute(self, sql=None, filena
char: m
1 retval:     def execute(self, sql=None, filenam
char: e
1 retval:     def execute(self, sql=None, filename
char: =
1 retval:     def execute(self, sql=None, filename=
char: N
1 retval:     def execute(self, sql=None, filename=N
char: o
1 retval:     def execute(self, sql=None, filename=No
char: n
1 retval:     def execute(self, sql=None, filename=Non
char: e
1 retval:     def execute(self, sql=None, filename=None
char: ,
1 retval:     def execute(self, sql=None, filename=None,
char:  
1 retval:     def execute(self, sql=None, filename=None, 
char: *
1 retval:     def execute(self, sql=None, filename=None, *
char: *
1 retval:     def execute(self, sql=None, filename=None, **
char: k
1 retval:     def execute(self, sql=None, filename=None, **k
char: w
1 retval:     def execute(self, sql=None, filename=None, **kw
char: a
1 retval:     def execute(self, sql=None, filename=None, **kwa
char: r
1 retval:     def execute(self, sql=None, filename=None, **kwar
char: g
1 retval:     def execute(self, sql=None, filename=None, **kwarg
char: s
1 retval:     def execute(self, sql=None, filename=None, **kwargs
char: )
1 retval:     def execute(self, sql=None, filename=None, **kwargs)
char: :
1 retval:     def execute(self, sql=None, filename=None, **kwargs):
char: 

1 retval:     def execute(self, sql=None, filename=None, **kwargs):
2 retval:     def execute(self, sql=None, filename=None, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: _
1 retval:         self.__
char: e
1 retval:         self.__e
char: x
1 retval:         self.__ex
char: e
1 retval:         self.__exe
char: c
1 retval:         self.__exec
char: u
1 retval:         self.__execu
char: t
1 retval:         self.__execut
char: e
1 retval:         self.__execute
char: (
1 retval:         self.__execute(
char: s
1 retval:         self.__execute(s
char: e
1 retval:         self.__execute(se
char: l
1 retval:         self.__execute(sel
char: f
1 retval:         self.__execute(self
char: .
1 retval:         self.__execute(self.
char: _
1 retval:         self.__execute(self._
char: _
1 retval:         self.__execute(self.__
char: p
1 retval:         self.__execute(self.__p
char: r
1 retval:         self.__execute(self.__pr
char: e
1 retval:         self.__execute(self.__pre
char: p
1 retval:         self.__execute(self.__prep
char: a
1 retval:         self.__execute(self.__prepa
char: r
1 retval:         self.__execute(self.__prepar
char: e
1 retval:         self.__execute(self.__prepare
char: (
1 retval:         self.__execute(self.__prepare(
char: s
1 retval:         self.__execute(self.__prepare(s
char: q
1 retval:         self.__execute(self.__prepare(sq
char: l
1 retval:         self.__execute(self.__prepare(sql
char: ,
1 retval:         self.__execute(self.__prepare(sql,
char:  
1 retval:         self.__execute(self.__prepare(sql, 
char: f
1 retval:         self.__execute(self.__prepare(sql, f
char: i
1 retval:         self.__execute(self.__prepare(sql, fi
char: l
1 retval:         self.__execute(self.__prepare(sql, fil
char: e
1 retval:         self.__execute(self.__prepare(sql, file
char: n
1 retval:         self.__execute(self.__prepare(sql, filen
char: a
1 retval:         self.__execute(self.__prepare(sql, filena
char: m
1 retval:         self.__execute(self.__prepare(sql, filenam
char: e
1 retval:         self.__execute(self.__prepare(sql, filename
char: )
1 retval:         self.__execute(self.__prepare(sql, filename)
char: ,
1 retval:         self.__execute(self.__prepare(sql, filename),
char:  
1 retval:         self.__execute(self.__prepare(sql, filename), 
char: k
1 retval:         self.__execute(self.__prepare(sql, filename), k
char: w
1 retval:         self.__execute(self.__prepare(sql, filename), kw
char: a
1 retval:         self.__execute(self.__prepare(sql, filename), kwa
char: r
1 retval:         self.__execute(self.__prepare(sql, filename), kwar
char: g
1 retval:         self.__execute(self.__prepare(sql, filename), kwarg
char: s
1 retval:         self.__execute(self.__prepare(sql, filename), kwargs
char: )
1 retval:         self.__execute(self.__prepare(sql, filename), kwargs)
char: 

1 retval:         self.__execute(self.__prepare(sql, filename), kwargs)
2 retval:         self.__execute(self.__prepare(sql, filename), kwargs)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: i
1 retval:     def i
char: n
1 retval:     def in
char: s
1 retval:     def ins
char: e
1 retval:     def inse
char: r
1 retval:     def inser
char: t
1 retval:     def insert
char: (
1 retval:     def insert(
char: s
1 retval:     def insert(s
char: e
1 retval:     def insert(se
char: l
1 retval:     def insert(sel
char: f
1 retval:     def insert(self
char: ,
1 retval:     def insert(self,
char:  
1 retval:     def insert(self, 
char: t
1 retval:     def insert(self, t
char: a
1 retval:     def insert(self, ta
char: b
1 retval:     def insert(self, tab
char: l
1 retval:     def insert(self, tabl
char: e
1 retval:     def insert(self, table
char: ,
1 retval:     def insert(self, table,
char:  
1 retval:     def insert(self, table, 
char: d
1 retval:     def insert(self, table, d
char: a
1 retval:     def insert(self, table, da
char: t
1 retval:     def insert(self, table, dat
char: a
1 retval:     def insert(self, table, data
char: f
1 retval:     def insert(self, table, dataf
char: r
1 retval:     def insert(self, table, datafr
char: a
1 retval:     def insert(self, table, datafra
char: m
1 retval:     def insert(self, table, datafram
char: e
1 retval:     def insert(self, table, dataframe
char: ,
1 retval:     def insert(self, table, dataframe,
char:  
1 retval:     def insert(self, table, dataframe, 
char: b
1 retval:     def insert(self, table, dataframe, b
char: a
1 retval:     def insert(self, table, dataframe, ba
char: t
1 retval:     def insert(self, table, dataframe, bat
char: c
1 retval:     def insert(self, table, dataframe, batc
char: h
1 retval:     def insert(self, table, dataframe, batch
char: _
1 retval:     def insert(self, table, dataframe, batch_
char: s
1 retval:     def insert(self, table, dataframe, batch_s
char: i
1 retval:     def insert(self, table, dataframe, batch_si
char: z
1 retval:     def insert(self, table, dataframe, batch_siz
char: e
1 retval:     def insert(self, table, dataframe, batch_size
char: =
1 retval:     def insert(self, table, dataframe, batch_size=
char: N
1 retval:     def insert(self, table, dataframe, batch_size=N
char: o
1 retval:     def insert(self, table, dataframe, batch_size=No
char: n
1 retval:     def insert(self, table, dataframe, batch_size=Non
char: e
1 retval:     def insert(self, table, dataframe, batch_size=None
char: )
1 retval:     def insert(self, table, dataframe, batch_size=None)
char: :
1 retval:     def insert(self, table, dataframe, batch_size=None):
char: 

1 retval:     def insert(self, table, dataframe, batch_size=None):
2 retval:     def insert(self, table, dataframe, batch_size=None):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: b
1 retval:         if b
char: a
1 retval:         if ba
char: t
1 retval:         if bat
char: c
1 retval:         if batc
char: h
1 retval:         if batch
char: _
1 retval:         if batch_
char: s
1 retval:         if batch_s
char: i
1 retval:         if batch_si
char: z
1 retval:         if batch_siz
char: e
1 retval:         if batch_size
char:  
1 retval:         if batch_size 
char: i
1 retval:         if batch_size i
char: s
1 retval:         if batch_size is
char:  
1 retval:         if batch_size is 
char: N
1 retval:         if batch_size is N
char: o
1 retval:         if batch_size is No
char: n
1 retval:         if batch_size is Non
char: e
1 retval:         if batch_size is None
char: :
1 retval:         if batch_size is None:
char: 

1 retval:         if batch_size is None:
2 retval:         if batch_size is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: b
1 retval:             b
char: a
1 retval:             ba
char: t
1 retval:             bat
char: c
1 retval:             batc
char: h
1 retval:             batch
char: _
1 retval:             batch_
char: s
1 retval:             batch_s
char: i
1 retval:             batch_si
char: z
1 retval:             batch_siz
char: e
1 retval:             batch_size
char:  
1 retval:             batch_size 
char: =
1 retval:             batch_size =
char:  
1 retval:             batch_size = 
char: l
1 retval:             batch_size = l
char: e
1 retval:             batch_size = le
char: n
1 retval:             batch_size = len
char: (
1 retval:             batch_size = len(
char: d
1 retval:             batch_size = len(d
char: a
1 retval:             batch_size = len(da
char: t
1 retval:             batch_size = len(dat
char: a
1 retval:             batch_size = len(data
char: f
1 retval:             batch_size = len(dataf
char: r
1 retval:             batch_size = len(datafr
char: a
1 retval:             batch_size = len(datafra
char: m
1 retval:             batch_size = len(datafram
char: e
1 retval:             batch_size = len(dataframe
char: )
1 retval:             batch_size = len(dataframe)
char: 

1 retval:             batch_size = len(dataframe)
2 retval:             batch_size = len(dataframe)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: s
1 retval:         if s
char: e
1 retval:         if se
char: l
1 retval:         if sel
char: f
1 retval:         if self
char: .
1 retval:         if self.
char: _
1 retval:         if self._
char: c
1 retval:         if self._c
char: o
1 retval:         if self._co
char: n
1 retval:         if self._con
char: n
1 retval:         if self._conn
char: e
1 retval:         if self._conne
char: c
1 retval:         if self._connec
char: t
1 retval:         if self._connect
char: i
1 retval:         if self._connecti
char: o
1 retval:         if self._connectio
char: n
1 retval:         if self._connection
char:  
1 retval:         if self._connection 
char: i
1 retval:         if self._connection i
char: s
1 retval:         if self._connection is
char:  
1 retval:         if self._connection is 
char: N
1 retval:         if self._connection is N
char: o
1 retval:         if self._connection is No
char: n
1 retval:         if self._connection is Non
char: e
1 retval:         if self._connection is None
char: :
1 retval:         if self._connection is None:
char: 

1 retval:         if self._connection is None:
2 retval:         if self._connection is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: _
1 retval:             self._
char: c
1 retval:             self._c
char: o
1 retval:             self._co
char: n
1 retval:             self._con
char: n
1 retval:             self._conn
char: e
1 retval:             self._conne
char: c
1 retval:             self._connec
char: t
1 retval:             self._connect
char: i
1 retval:             self._connecti
char: o
1 retval:             self._connectio
char: n
1 retval:             self._connection
char:  
1 retval:             self._connection 
char: =
1 retval:             self._connection =
char:  
1 retval:             self._connection = 
char: s
1 retval:             self._connection = s
char: e
1 retval:             self._connection = se
char: l
1 retval:             self._connection = sel
char: f
1 retval:             self._connection = self
char: .
1 retval:             self._connection = self.
char: _
1 retval:             self._connection = self._
char: e
1 retval:             self._connection = self._e
char: n
1 retval:             self._connection = self._en
char: g
1 retval:             self._connection = self._eng
char: i
1 retval:             self._connection = self._engi
char: n
1 retval:             self._connection = self._engin
char: e
1 retval:             self._connection = self._engine
char: .
1 retval:             self._connection = self._engine.
char: c
1 retval:             self._connection = self._engine.c
char: o
1 retval:             self._connection = self._engine.co
char: n
1 retval:             self._connection = self._engine.con
char: n
1 retval:             self._connection = self._engine.conn
char: e
1 retval:             self._connection = self._engine.conne
char: c
1 retval:             self._connection = self._engine.connec
char: t
1 retval:             self._connection = self._engine.connect
char: (
1 retval:             self._connection = self._engine.connect(
char: )
1 retval:             self._connection = self._engine.connect()
char: 

1 retval:             self._connection = self._engine.connect()
2 retval:             self._connection = self._engine.connect()
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: d
1 retval:         d
char: a
1 retval:         da
char: t
1 retval:         dat
char: a
1 retval:         data
char: f
1 retval:         dataf
char: r
1 retval:         datafr
char: a
1 retval:         datafra
char: m
1 retval:         datafram
char: e
1 retval:         dataframe
char: .
1 retval:         dataframe.
char: t
1 retval:         dataframe.t
char: o
1 retval:         dataframe.to
char: _
1 retval:         dataframe.to_
char: s
1 retval:         dataframe.to_s
char: q
1 retval:         dataframe.to_sq
char: l
1 retval:         dataframe.to_sql
char: (
1 retval:         dataframe.to_sql(
char: 

1 retval:         dataframe.to_sql(
2 retval:         dataframe.to_sql(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: t
1 retval:             t
char: a
1 retval:             ta
char: b
1 retval:             tab
char: l
1 retval:             tabl
char: e
1 retval:             table
char: ,
1 retval:             table,
char: 

1 retval:             table,
2 retval:             table,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: _
1 retval:             self._
char: c
1 retval:             self._c
char: o
1 retval:             self._co
char: n
1 retval:             self._con
char: n
1 retval:             self._conn
char: e
1 retval:             self._conne
char: c
1 retval:             self._connec
char: t
1 retval:             self._connect
char: i
1 retval:             self._connecti
char: o
1 retval:             self._connectio
char: n
1 retval:             self._connection
char: ,
1 retval:             self._connection,
char: 

1 retval:             self._connection,
2 retval:             self._connection,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: i
1 retval:             i
char: f
1 retval:             if
char: _
1 retval:             if_
char: e
1 retval:             if_e
char: x
1 retval:             if_ex
char: i
1 retval:             if_exi
char: s
1 retval:             if_exis
char: t
1 retval:             if_exist
char: s
1 retval:             if_exists
char: =
1 retval:             if_exists=
char: '
1 retval:             if_exists='
char: a
1 retval:             if_exists='a
char: p
1 retval:             if_exists='ap
char: p
1 retval:             if_exists='app
char: e
1 retval:             if_exists='appe
char: n
1 retval:             if_exists='appen
char: d
1 retval:             if_exists='append
char: '
1 retval:             if_exists='append'
char: ,
1 retval:             if_exists='append',
char: 

1 retval:             if_exists='append',
2 retval:             if_exists='append',
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: i
1 retval:             i
char: n
1 retval:             in
char: d
1 retval:             ind
char: e
1 retval:             inde
char: x
1 retval:             index
char: =
1 retval:             index=
char: F
1 retval:             index=F
char: a
1 retval:             index=Fa
char: l
1 retval:             index=Fal
char: s
1 retval:             index=Fals
char: e
1 retval:             index=False
char: ,
1 retval:             index=False,
char: 

1 retval:             index=False,
2 retval:             index=False,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: c
1 retval:             c
char: h
1 retval:             ch
char: u
1 retval:             chu
char: n
1 retval:             chun
char: k
1 retval:             chunk
char: s
1 retval:             chunks
char: i
1 retval:             chunksi
char: z
1 retval:             chunksiz
char: e
1 retval:             chunksize
char: =
1 retval:             chunksize=
char: b
1 retval:             chunksize=b
char: a
1 retval:             chunksize=ba
char: t
1 retval:             chunksize=bat
char: c
1 retval:             chunksize=batc
char: h
1 retval:             chunksize=batch
char: _
1 retval:             chunksize=batch_
char: s
1 retval:             chunksize=batch_s
char: i
1 retval:             chunksize=batch_si
char: z
1 retval:             chunksize=batch_siz
char: e
1 retval:             chunksize=batch_size
char: 

1 retval:             chunksize=batch_size
2 retval:             chunksize=batch_size
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: )
1 retval:         )
char: 

1 retval:         )
2 retval:         )
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: r
1 retval:     def r
char: e
1 retval:     def re
char: p
1 retval:     def rep
char: l
1 retval:     def repl
char: a
1 retval:     def repla
char: c
1 retval:     def replac
char: e
1 retval:     def replace
char: (
1 retval:     def replace(
char: s
1 retval:     def replace(s
char: e
1 retval:     def replace(se
char: l
1 retval:     def replace(sel
char: f
1 retval:     def replace(self
char: ,
1 retval:     def replace(self,
char:  
1 retval:     def replace(self, 
char: t
1 retval:     def replace(self, t
char: a
1 retval:     def replace(self, ta
char: b
1 retval:     def replace(self, tab
char: l
1 retval:     def replace(self, tabl
char: e
1 retval:     def replace(self, table
char: ,
1 retval:     def replace(self, table,
char:  
1 retval:     def replace(self, table, 
char: d
1 retval:     def replace(self, table, d
char: a
1 retval:     def replace(self, table, da
char: t
1 retval:     def replace(self, table, dat
char: a
1 retval:     def replace(self, table, data
char: f
1 retval:     def replace(self, table, dataf
char: r
1 retval:     def replace(self, table, datafr
char: a
1 retval:     def replace(self, table, datafra
char: m
1 retval:     def replace(self, table, datafram
char: e
1 retval:     def replace(self, table, dataframe
char: ,
1 retval:     def replace(self, table, dataframe,
char:  
1 retval:     def replace(self, table, dataframe, 
char: b
1 retval:     def replace(self, table, dataframe, b
char: a
1 retval:     def replace(self, table, dataframe, ba
char: t
1 retval:     def replace(self, table, dataframe, bat
char: c
1 retval:     def replace(self, table, dataframe, batc
char: h
1 retval:     def replace(self, table, dataframe, batch
char: _
1 retval:     def replace(self, table, dataframe, batch_
char: s
1 retval:     def replace(self, table, dataframe, batch_s
char: i
1 retval:     def replace(self, table, dataframe, batch_si
char: z
1 retval:     def replace(self, table, dataframe, batch_siz
char: e
1 retval:     def replace(self, table, dataframe, batch_size
char: =
1 retval:     def replace(self, table, dataframe, batch_size=
char: N
1 retval:     def replace(self, table, dataframe, batch_size=N
char: o
1 retval:     def replace(self, table, dataframe, batch_size=No
char: n
1 retval:     def replace(self, table, dataframe, batch_size=Non
char: e
1 retval:     def replace(self, table, dataframe, batch_size=None
char: )
1 retval:     def replace(self, table, dataframe, batch_size=None)
char: :
1 retval:     def replace(self, table, dataframe, batch_size=None):
char: 

1 retval:     def replace(self, table, dataframe, batch_size=None):
2 retval:     def replace(self, table, dataframe, batch_size=None):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: m
1 retval:         im
char: p
1 retval:         imp
char: o
1 retval:         impo
char: r
1 retval:         impor
char: t
1 retval:         import
char:  
1 retval:         import 
char: m
1 retval:         import m
char: i
1 retval:         import mi
char: g
1 retval:         import mig
char: r
1 retval:         import migr
char: a
1 retval:         import migra
char: t
1 retval:         import migrat
char: e
1 retval:         import migrate
char: .
1 retval:         import migrate.
char: c
1 retval:         import migrate.c
char: h
1 retval:         import migrate.ch
char: a
1 retval:         import migrate.cha
char: n
1 retval:         import migrate.chan
char: g
1 retval:         import migrate.chang
char: e
1 retval:         import migrate.change
char: s
1 retval:         import migrate.changes
char: e
1 retval:         import migrate.changese
char: t
1 retval:         import migrate.changeset
char: 

1 retval:         import migrate.changeset
2 retval:         import migrate.changeset
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: g
1 retval:         g
char: l
1 retval:         gl
char: o
1 retval:         glo
char: b
1 retval:         glob
char: a
1 retval:         globa
char: l
1 retval:         global
char:  
1 retval:         global 
char: _
1 retval:         global _
char: a
1 retval:         global _a
char: f
1 retval:         global _af
char: t
1 retval:         global _aft
char: e
1 retval:         global _afte
char: r
1 retval:         global _after
char: _
1 retval:         global _after_
char: r
1 retval:         global _after_r
char: e
1 retval:         global _after_re
char: p
1 retval:         global _after_rep
char: l
1 retval:         global _after_repl
char: a
1 retval:         global _after_repla
char: c
1 retval:         global _after_replac
char: e
1 retval:         global _after_replace
char: _
1 retval:         global _after_replace_
char: c
1 retval:         global _after_replace_c
char: a
1 retval:         global _after_replace_ca
char: l
1 retval:         global _after_replace_cal
char: l
1 retval:         global _after_replace_call
char: b
1 retval:         global _after_replace_callb
char: a
1 retval:         global _after_replace_callba
char: c
1 retval:         global _after_replace_callbac
char: k
1 retval:         global _after_replace_callback
char: s
1 retval:         global _after_replace_callbacks
char: 

1 retval:         global _after_replace_callbacks
2 retval:         global _after_replace_callbacks
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: w
1 retval:         w
char: i
1 retval:         wi
char: t
1 retval:         wit
char: h
1 retval:         with
char:  
1 retval:         with 
char: t
1 retval:         with t
char: i
1 retval:         with ti
char: m
1 retval:         with tim
char: e
1 retval:         with time
char: r
1 retval:         with timer
char: (
1 retval:         with timer(
char: '
1 retval:         with timer('
char: R
1 retval:         with timer('R
char: E
1 retval:         with timer('RE
char: P
1 retval:         with timer('REP
char: L
1 retval:         with timer('REPL
char: A
1 retval:         with timer('REPLA
char: C
1 retval:         with timer('REPLAC
char: E
1 retval:         with timer('REPLACE
char:  
1 retval:         with timer('REPLACE 
char: '
1 retval:         with timer('REPLACE '
char:  
1 retval:         with timer('REPLACE ' 
char: +
1 retval:         with timer('REPLACE ' +
char:  
1 retval:         with timer('REPLACE ' + 
char: t
1 retval:         with timer('REPLACE ' + t
char: a
1 retval:         with timer('REPLACE ' + ta
char: b
1 retval:         with timer('REPLACE ' + tab
char: l
1 retval:         with timer('REPLACE ' + tabl
char: e
1 retval:         with timer('REPLACE ' + table
char: )
1 retval:         with timer('REPLACE ' + table)
char: :
1 retval:         with timer('REPLACE ' + table):
char: 

1 retval:         with timer('REPLACE ' + table):
2 retval:         with timer('REPLACE ' + table):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: u
1 retval:             su
char: f
1 retval:             suf
char: f
1 retval:             suff
char: i
1 retval:             suffi
char: x
1 retval:             suffix
char:  
1 retval:             suffix 
char: =
1 retval:             suffix =
char:  
1 retval:             suffix = 
char: d
1 retval:             suffix = d
char: a
1 retval:             suffix = da
char: t
1 retval:             suffix = dat
char: e
1 retval:             suffix = date
char: t
1 retval:             suffix = datet
char: i
1 retval:             suffix = dateti
char: m
1 retval:             suffix = datetim
char: e
1 retval:             suffix = datetime
char: .
1 retval:             suffix = datetime.
char: n
1 retval:             suffix = datetime.n
char: o
1 retval:             suffix = datetime.no
char: w
1 retval:             suffix = datetime.now
char: (
1 retval:             suffix = datetime.now(
char: )
1 retval:             suffix = datetime.now()
char: .
1 retval:             suffix = datetime.now().
char: s
1 retval:             suffix = datetime.now().s
char: t
1 retval:             suffix = datetime.now().st
char: r
1 retval:             suffix = datetime.now().str
char: f
1 retval:             suffix = datetime.now().strf
char: t
1 retval:             suffix = datetime.now().strft
char: i
1 retval:             suffix = datetime.now().strfti
char: m
1 retval:             suffix = datetime.now().strftim
char: e
1 retval:             suffix = datetime.now().strftime
char: (
1 retval:             suffix = datetime.now().strftime(
char: '
1 retval:             suffix = datetime.now().strftime('
char: _
1 retval:             suffix = datetime.now().strftime('_
char: %
1 retval:             suffix = datetime.now().strftime('_%
char: Y
1 retval:             suffix = datetime.now().strftime('_%Y
char: %
1 retval:             suffix = datetime.now().strftime('_%Y%
char: m
1 retval:             suffix = datetime.now().strftime('_%Y%m
char: %
1 retval:             suffix = datetime.now().strftime('_%Y%m%
char: d
1 retval:             suffix = datetime.now().strftime('_%Y%m%d
char: %
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%
char: H
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H
char: %
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%
char: M
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M
char: %
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%
char: S
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S
char: '
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S'
char: )
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S')
char: .
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').
char: e
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').e
char: n
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').en
char: c
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').enc
char: o
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').enco
char: d
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encod
char: e
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode
char: (
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode(
char: '
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('
char: u
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('u
char: t
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('ut
char: f
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf
char: -
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-
char: 8
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8
char: '
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8'
char: )
1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8')
char: 

1 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8')
2 retval:             suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: m
1 retval:             self.m
char: e
1 retval:             self.me
char: t
1 retval:             self.met
char: a
1 retval:             self.meta
char: d
1 retval:             self.metad
char: a
1 retval:             self.metada
char: t
1 retval:             self.metadat
char: a
1 retval:             self.metadata
char: 

1 retval:             self.metadata
2 retval:             self.metadata
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: t
1 retval:             t
char: e
1 retval:             te
char: m
1 retval:             tem
char: p
1 retval:             temp
char:  
1 retval:             temp 
char: =
1 retval:             temp =
char:  
1 retval:             temp = 
char: '
1 retval:             temp = '
char: t
1 retval:             temp = 't
char: m
1 retval:             temp = 'tm
char: p
1 retval:             temp = 'tmp
char: _
1 retval:             temp = 'tmp_
char: '
1 retval:             temp = 'tmp_'
char: .
1 retval:             temp = 'tmp_'.
char: e
1 retval:             temp = 'tmp_'.e
char: n
1 retval:             temp = 'tmp_'.en
char: c
1 retval:             temp = 'tmp_'.enc
char: o
1 retval:             temp = 'tmp_'.enco
char: d
1 retval:             temp = 'tmp_'.encod
char: e
1 retval:             temp = 'tmp_'.encode
char: (
1 retval:             temp = 'tmp_'.encode(
char: '
1 retval:             temp = 'tmp_'.encode('
char: u
1 retval:             temp = 'tmp_'.encode('u
char: t
1 retval:             temp = 'tmp_'.encode('ut
char: f
1 retval:             temp = 'tmp_'.encode('utf
char: -
1 retval:             temp = 'tmp_'.encode('utf-
char: 8
1 retval:             temp = 'tmp_'.encode('utf-8
char: '
1 retval:             temp = 'tmp_'.encode('utf-8'
char: )
1 retval:             temp = 'tmp_'.encode('utf-8')
char: 

1 retval:             temp = 'tmp_'.encode('utf-8')
2 retval:             temp = 'tmp_'.encode('utf-8')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: o
1 retval:             so
char: u
1 retval:             sou
char: r
1 retval:             sour
char: c
1 retval:             sourc
char: e
1 retval:             source
char:  
1 retval:             source 
char: =
1 retval:             source =
char:  
1 retval:             source = 
char: s
1 retval:             source = s
char: q
1 retval:             source = sq
char: l
1 retval:             source = sql
char: a
1 retval:             source = sqla
char: l
1 retval:             source = sqlal
char: c
1 retval:             source = sqlalc
char: h
1 retval:             source = sqlalch
char: e
1 retval:             source = sqlalche
char: m
1 retval:             source = sqlalchem
char: y
1 retval:             source = sqlalchemy
char: .
1 retval:             source = sqlalchemy.
char: T
1 retval:             source = sqlalchemy.T
char: a
1 retval:             source = sqlalchemy.Ta
char: b
1 retval:             source = sqlalchemy.Tab
char: l
1 retval:             source = sqlalchemy.Tabl
char: e
1 retval:             source = sqlalchemy.Table
char: (
1 retval:             source = sqlalchemy.Table(
char: t
1 retval:             source = sqlalchemy.Table(t
char: a
1 retval:             source = sqlalchemy.Table(ta
char: b
1 retval:             source = sqlalchemy.Table(tab
char: l
1 retval:             source = sqlalchemy.Table(tabl
char: e
1 retval:             source = sqlalchemy.Table(table
char: ,
1 retval:             source = sqlalchemy.Table(table,
char:  
1 retval:             source = sqlalchemy.Table(table, 
char: s
1 retval:             source = sqlalchemy.Table(table, s
char: e
1 retval:             source = sqlalchemy.Table(table, se
char: l
1 retval:             source = sqlalchemy.Table(table, sel
char: f
1 retval:             source = sqlalchemy.Table(table, self
char: .
1 retval:             source = sqlalchemy.Table(table, self.
char: m
1 retval:             source = sqlalchemy.Table(table, self.m
char: e
1 retval:             source = sqlalchemy.Table(table, self.me
char: t
1 retval:             source = sqlalchemy.Table(table, self.met
char: a
1 retval:             source = sqlalchemy.Table(table, self.meta
char: d
1 retval:             source = sqlalchemy.Table(table, self.metad
char: a
1 retval:             source = sqlalchemy.Table(table, self.metada
char: t
1 retval:             source = sqlalchemy.Table(table, self.metadat
char: a
1 retval:             source = sqlalchemy.Table(table, self.metadata
char: ,
1 retval:             source = sqlalchemy.Table(table, self.metadata,
char:  
1 retval:             source = sqlalchemy.Table(table, self.metadata, 
char: a
1 retval:             source = sqlalchemy.Table(table, self.metadata, a
char: u
1 retval:             source = sqlalchemy.Table(table, self.metadata, au
char: t
1 retval:             source = sqlalchemy.Table(table, self.metadata, aut
char: o
1 retval:             source = sqlalchemy.Table(table, self.metadata, auto
char: l
1 retval:             source = sqlalchemy.Table(table, self.metadata, autol
char: o
1 retval:             source = sqlalchemy.Table(table, self.metadata, autolo
char: a
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoloa
char: d
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload
char: =
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=
char: T
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=T
char: r
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=Tr
char: u
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=Tru
char: e
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True
char: ,
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True,
char:  
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, 
char: a
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, a
char: u
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, au
char: t
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, aut
char: o
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, auto
char: l
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autol
char: o
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autolo
char: a
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoloa
char: d
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload
char: _
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_
char: w
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_w
char: i
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_wi
char: t
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_wit
char: h
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with
char: =
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=
char: s
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=s
char: e
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=se
char: l
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=sel
char: f
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self
char: .
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self.
char: _
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._
char: e
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._e
char: n
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._en
char: g
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._eng
char: i
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engi
char: n
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engin
char: e
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine
char: )
1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine)
char: 

1 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine)
2 retval:             source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: d
1 retval:             d
char: e
1 retval:             de
char: s
1 retval:             des
char: t
1 retval:             dest
char: i
1 retval:             desti
char: n
1 retval:             destin
char: a
1 retval:             destina
char: t
1 retval:             destinat
char: i
1 retval:             destinati
char: o
1 retval:             destinatio
char: n
1 retval:             destination
char: _
1 retval:             destination_
char: n
1 retval:             destination_n
char: a
1 retval:             destination_na
char: m
1 retval:             destination_nam
char: e
1 retval:             destination_name
char:  
1 retval:             destination_name 
char: =
1 retval:             destination_name =
char:  
1 retval:             destination_name = 
char: '
1 retval:             destination_name = '
char: t
1 retval:             destination_name = 't
char: m
1 retval:             destination_name = 'tm
char: p
1 retval:             destination_name = 'tmp
char: _
1 retval:             destination_name = 'tmp_
char: '
1 retval:             destination_name = 'tmp_'
char:  
1 retval:             destination_name = 'tmp_' 
char: +
1 retval:             destination_name = 'tmp_' +
char:  
1 retval:             destination_name = 'tmp_' + 
char: h
1 retval:             destination_name = 'tmp_' + h
char: a
1 retval:             destination_name = 'tmp_' + ha
char: s
1 retval:             destination_name = 'tmp_' + has
char: h
1 retval:             destination_name = 'tmp_' + hash
char: l
1 retval:             destination_name = 'tmp_' + hashl
char: i
1 retval:             destination_name = 'tmp_' + hashli
char: b
1 retval:             destination_name = 'tmp_' + hashlib
char: .
1 retval:             destination_name = 'tmp_' + hashlib.
char: s
1 retval:             destination_name = 'tmp_' + hashlib.s
char: h
1 retval:             destination_name = 'tmp_' + hashlib.sh
char: a
1 retval:             destination_name = 'tmp_' + hashlib.sha
char: 2
1 retval:             destination_name = 'tmp_' + hashlib.sha2
char: 5
1 retval:             destination_name = 'tmp_' + hashlib.sha25
char: 6
1 retval:             destination_name = 'tmp_' + hashlib.sha256
char: (
1 retval:             destination_name = 'tmp_' + hashlib.sha256(
char: t
1 retval:             destination_name = 'tmp_' + hashlib.sha256(t
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(te
char: m
1 retval:             destination_name = 'tmp_' + hashlib.sha256(tem
char: p
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp
char:  
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp 
char: +
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp +
char:  
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + 
char: t
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + t
char: a
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + ta
char: b
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + tab
char: l
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + tabl
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table
char: .
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.e
char: n
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.en
char: c
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.enc
char: o
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.enco
char: d
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encod
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode
char: (
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode(
char: '
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('
char: u
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('u
char: t
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('ut
char: f
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf
char: -
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-
char: 8
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8
char: '
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8'
char: )
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8')
char:  
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') 
char: +
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') +
char:  
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + 
char: s
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + s
char: u
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + su
char: f
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suf
char: f
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suff
char: i
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffi
char: x
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix
char: )
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix)
char: .
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).
char: h
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).h
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).he
char: x
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hex
char: d
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexd
char: i
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdi
char: g
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdig
char: e
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdige
char: s
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdiges
char: t
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest
char: (
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest(
char: )
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()
char: [
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[
char: 0
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0
char: :
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:
char: 5
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:5
char: 6
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56
char: ]
1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56]
char: 

1 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56]
2 retval:             destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: d
1 retval:             d
char: e
1 retval:             de
char: s
1 retval:             des
char: t
1 retval:             dest
char: i
1 retval:             desti
char: n
1 retval:             destin
char: a
1 retval:             destina
char: t
1 retval:             destinat
char: i
1 retval:             destinati
char: o
1 retval:             destinatio
char: n
1 retval:             destination
char:  
1 retval:             destination 
char: =
1 retval:             destination =
char:  
1 retval:             destination = 
char: s
1 retval:             destination = s
char: q
1 retval:             destination = sq
char: l
1 retval:             destination = sql
char: a
1 retval:             destination = sqla
char: l
1 retval:             destination = sqlal
char: c
1 retval:             destination = sqlalc
char: h
1 retval:             destination = sqlalch
char: e
1 retval:             destination = sqlalche
char: m
1 retval:             destination = sqlalchem
char: y
1 retval:             destination = sqlalchemy
char: .
1 retval:             destination = sqlalchemy.
char: T
1 retval:             destination = sqlalchemy.T
char: a
1 retval:             destination = sqlalchemy.Ta
char: b
1 retval:             destination = sqlalchemy.Tab
char: l
1 retval:             destination = sqlalchemy.Tabl
char: e
1 retval:             destination = sqlalchemy.Table
char: (
1 retval:             destination = sqlalchemy.Table(
char: d
1 retval:             destination = sqlalchemy.Table(d
char: e
1 retval:             destination = sqlalchemy.Table(de
char: s
1 retval:             destination = sqlalchemy.Table(des
char: t
1 retval:             destination = sqlalchemy.Table(dest
char: i
1 retval:             destination = sqlalchemy.Table(desti
char: n
1 retval:             destination = sqlalchemy.Table(destin
char: a
1 retval:             destination = sqlalchemy.Table(destina
char: t
1 retval:             destination = sqlalchemy.Table(destinat
char: i
1 retval:             destination = sqlalchemy.Table(destinati
char: o
1 retval:             destination = sqlalchemy.Table(destinatio
char: n
1 retval:             destination = sqlalchemy.Table(destination
char: _
1 retval:             destination = sqlalchemy.Table(destination_
char: n
1 retval:             destination = sqlalchemy.Table(destination_n
char: a
1 retval:             destination = sqlalchemy.Table(destination_na
char: m
1 retval:             destination = sqlalchemy.Table(destination_nam
char: e
1 retval:             destination = sqlalchemy.Table(destination_name
char: ,
1 retval:             destination = sqlalchemy.Table(destination_name,
char:  
1 retval:             destination = sqlalchemy.Table(destination_name, 
char: s
1 retval:             destination = sqlalchemy.Table(destination_name, s
char: e
1 retval:             destination = sqlalchemy.Table(destination_name, se
char: l
1 retval:             destination = sqlalchemy.Table(destination_name, sel
char: f
1 retval:             destination = sqlalchemy.Table(destination_name, self
char: .
1 retval:             destination = sqlalchemy.Table(destination_name, self.
char: m
1 retval:             destination = sqlalchemy.Table(destination_name, self.m
char: e
1 retval:             destination = sqlalchemy.Table(destination_name, self.me
char: t
1 retval:             destination = sqlalchemy.Table(destination_name, self.met
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.meta
char: d
1 retval:             destination = sqlalchemy.Table(destination_name, self.metad
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.metada
char: t
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadat
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata
char: ,
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata,
char:  
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, 
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, a
char: u
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, au
char: t
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, aut
char: o
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, auto
char: l
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autol
char: o
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autolo
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoloa
char: d
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload
char: =
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=
char: F
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=F
char: a
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=Fa
char: l
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=Fal
char: s
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=Fals
char: e
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False
char: )
1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False)
char: 

1 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False)
2 retval:             destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: o
1 retval:             fo
char: r
1 retval:             for
char:  
1 retval:             for 
char: c
1 retval:             for c
char: o
1 retval:             for co
char: l
1 retval:             for col
char: u
1 retval:             for colu
char: m
1 retval:             for colum
char: n
1 retval:             for column
char:  
1 retval:             for column 
char: i
1 retval:             for column i
char: n
1 retval:             for column in
char:  
1 retval:             for column in 
char: s
1 retval:             for column in s
char: o
1 retval:             for column in so
char: u
1 retval:             for column in sou
char: r
1 retval:             for column in sour
char: c
1 retval:             for column in sourc
char: e
1 retval:             for column in source
char: .
1 retval:             for column in source.
char: c
1 retval:             for column in source.c
char: o
1 retval:             for column in source.co
char: l
1 retval:             for column in source.col
char: u
1 retval:             for column in source.colu
char: m
1 retval:             for column in source.colum
char: n
1 retval:             for column in source.column
char: s
1 retval:             for column in source.columns
char: :
1 retval:             for column in source.columns:
char: 

1 retval:             for column in source.columns:
2 retval:             for column in source.columns:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: d
1 retval:                 d
char: e
1 retval:                 de
char: s
1 retval:                 des
char: t
1 retval:                 dest
char: i
1 retval:                 desti
char: n
1 retval:                 destin
char: a
1 retval:                 destina
char: t
1 retval:                 destinat
char: i
1 retval:                 destinati
char: o
1 retval:                 destinatio
char: n
1 retval:                 destination
char: .
1 retval:                 destination.
char: a
1 retval:                 destination.a
char: p
1 retval:                 destination.ap
char: p
1 retval:                 destination.app
char: e
1 retval:                 destination.appe
char: n
1 retval:                 destination.appen
char: d
1 retval:                 destination.append
char: _
1 retval:                 destination.append_
char: c
1 retval:                 destination.append_c
char: o
1 retval:                 destination.append_co
char: l
1 retval:                 destination.append_col
char: u
1 retval:                 destination.append_colu
char: m
1 retval:                 destination.append_colum
char: n
1 retval:                 destination.append_column
char: (
1 retval:                 destination.append_column(
char: c
1 retval:                 destination.append_column(c
char: o
1 retval:                 destination.append_column(co
char: l
1 retval:                 destination.append_column(col
char: u
1 retval:                 destination.append_column(colu
char: m
1 retval:                 destination.append_column(colum
char: n
1 retval:                 destination.append_column(column
char: .
1 retval:                 destination.append_column(column.
char: c
1 retval:                 destination.append_column(column.c
char: o
1 retval:                 destination.append_column(column.co
char: p
1 retval:                 destination.append_column(column.cop
char: y
1 retval:                 destination.append_column(column.copy
char: (
1 retval:                 destination.append_column(column.copy(
char: )
1 retval:                 destination.append_column(column.copy()
char: )
1 retval:                 destination.append_column(column.copy())
char: 

1 retval:                 destination.append_column(column.copy())
2 retval:                 destination.append_column(column.copy())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: d
1 retval:             d
char: e
1 retval:             de
char: s
1 retval:             des
char: t
1 retval:             dest
char: i
1 retval:             desti
char: n
1 retval:             destin
char: a
1 retval:             destina
char: t
1 retval:             destinat
char: i
1 retval:             destinati
char: o
1 retval:             destinatio
char: n
1 retval:             destination
char: .
1 retval:             destination.
char: c
1 retval:             destination.c
char: r
1 retval:             destination.cr
char: e
1 retval:             destination.cre
char: a
1 retval:             destination.crea
char: t
1 retval:             destination.creat
char: e
1 retval:             destination.create
char: (
1 retval:             destination.create(
char: )
1 retval:             destination.create()
char: 

1 retval:             destination.create()
2 retval:             destination.create()
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: o
1 retval:             o
char: r
1 retval:             or
char: i
1 retval:             ori
char: g
1 retval:             orig
char: i
1 retval:             origi
char: n
1 retval:             origin
char: a
1 retval:             origina
char: l
1 retval:             original
char: _
1 retval:             original_
char: n
1 retval:             original_n
char: a
1 retval:             original_na
char: m
1 retval:             original_nam
char: e
1 retval:             original_name
char: s
1 retval:             original_names
char:  
1 retval:             original_names 
char: =
1 retval:             original_names =
char:  
1 retval:             original_names = 
char: {
1 retval:             original_names = {
char: }
1 retval:             original_names = {}
char: 

1 retval:             original_names = {}
2 retval:             original_names = {}
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: o
1 retval:             fo
char: r
1 retval:             for
char:  
1 retval:             for 
char: i
1 retval:             for i
char: n
1 retval:             for in
char: d
1 retval:             for ind
char: e
1 retval:             for inde
char: x
1 retval:             for index
char:  
1 retval:             for index 
char: i
1 retval:             for index i
char: n
1 retval:             for index in
char:  
1 retval:             for index in 
char: s
1 retval:             for index in s
char: o
1 retval:             for index in so
char: u
1 retval:             for index in sou
char: r
1 retval:             for index in sour
char: c
1 retval:             for index in sourc
char: e
1 retval:             for index in source
char: .
1 retval:             for index in source.
char: i
1 retval:             for index in source.i
char: n
1 retval:             for index in source.in
char: d
1 retval:             for index in source.ind
char: e
1 retval:             for index in source.inde
char: x
1 retval:             for index in source.index
char: e
1 retval:             for index in source.indexe
char: s
1 retval:             for index in source.indexes
char: :
1 retval:             for index in source.indexes:
char: 

1 retval:             for index in source.indexes:
2 retval:             for index in source.indexes:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: #
1 retval:                 #
char:  
1 retval:                 # 
char: m
1 retval:                 # m
char: a
1 retval:                 # ma
char: k
1 retval:                 # mak
char: e
1 retval:                 # make
char:  
1 retval:                 # make 
char: s
1 retval:                 # make s
char: u
1 retval:                 # make su
char: r
1 retval:                 # make sur
char: e
1 retval:                 # make sure
char:  
1 retval:                 # make sure 
char: t
1 retval:                 # make sure t
char: h
1 retval:                 # make sure th
char: e
1 retval:                 # make sure the
char:  
1 retval:                 # make sure the 
char: n
1 retval:                 # make sure the n
char: a
1 retval:                 # make sure the na
char: m
1 retval:                 # make sure the nam
char: e
1 retval:                 # make sure the name
char:  
1 retval:                 # make sure the name 
char: i
1 retval:                 # make sure the name i
char: s
1 retval:                 # make sure the name is
char:  
1 retval:                 # make sure the name is 
char: <
1 retval:                 # make sure the name is <
char:  
1 retval:                 # make sure the name is < 
char: 6
1 retval:                 # make sure the name is < 6
char: 3
1 retval:                 # make sure the name is < 63
char:  
1 retval:                 # make sure the name is < 63 
char: c
1 retval:                 # make sure the name is < 63 c
char: h
1 retval:                 # make sure the name is < 63 ch
char: a
1 retval:                 # make sure the name is < 63 cha
char: r
1 retval:                 # make sure the name is < 63 char
char: s
1 retval:                 # make sure the name is < 63 chars
char:  
1 retval:                 # make sure the name is < 63 chars 
char: w
1 retval:                 # make sure the name is < 63 chars w
char: i
1 retval:                 # make sure the name is < 63 chars wi
char: t
1 retval:                 # make sure the name is < 63 chars wit
char: h
1 retval:                 # make sure the name is < 63 chars with
char:  
1 retval:                 # make sure the name is < 63 chars with 
char: t
1 retval:                 # make sure the name is < 63 chars with t
char: h
1 retval:                 # make sure the name is < 63 chars with th
char: e
1 retval:                 # make sure the name is < 63 chars with the
char:  
1 retval:                 # make sure the name is < 63 chars with the 
char: s
1 retval:                 # make sure the name is < 63 chars with the s
char: u
1 retval:                 # make sure the name is < 63 chars with the su
char: f
1 retval:                 # make sure the name is < 63 chars with the suf
char: f
1 retval:                 # make sure the name is < 63 chars with the suff
char: i
1 retval:                 # make sure the name is < 63 chars with the suffi
char: x
1 retval:                 # make sure the name is < 63 chars with the suffix
char: 

1 retval:                 # make sure the name is < 63 chars with the suffix
2 retval:                 # make sure the name is < 63 chars with the suffix
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: a
1 retval:                 na
char: m
1 retval:                 nam
char: e
1 retval:                 name
char:  
1 retval:                 name 
char: =
1 retval:                 name =
char:  
1 retval:                 name = 
char: h
1 retval:                 name = h
char: a
1 retval:                 name = ha
char: s
1 retval:                 name = has
char: h
1 retval:                 name = hash
char: l
1 retval:                 name = hashl
char: i
1 retval:                 name = hashli
char: b
1 retval:                 name = hashlib
char: .
1 retval:                 name = hashlib.
char: s
1 retval:                 name = hashlib.s
char: h
1 retval:                 name = hashlib.sh
char: a
1 retval:                 name = hashlib.sha
char: 2
1 retval:                 name = hashlib.sha2
char: 5
1 retval:                 name = hashlib.sha25
char: 6
1 retval:                 name = hashlib.sha256
char: (
1 retval:                 name = hashlib.sha256(
char: t
1 retval:                 name = hashlib.sha256(t
char: e
1 retval:                 name = hashlib.sha256(te
char: m
1 retval:                 name = hashlib.sha256(tem
char: p
1 retval:                 name = hashlib.sha256(temp
char:  
1 retval:                 name = hashlib.sha256(temp 
char: +
1 retval:                 name = hashlib.sha256(temp +
char:  
1 retval:                 name = hashlib.sha256(temp + 
char: i
1 retval:                 name = hashlib.sha256(temp + i
char: n
1 retval:                 name = hashlib.sha256(temp + in
char: d
1 retval:                 name = hashlib.sha256(temp + ind
char: e
1 retval:                 name = hashlib.sha256(temp + inde
char: x
1 retval:                 name = hashlib.sha256(temp + index
char: .
1 retval:                 name = hashlib.sha256(temp + index.
char: n
1 retval:                 name = hashlib.sha256(temp + index.n
char: a
1 retval:                 name = hashlib.sha256(temp + index.na
char: m
1 retval:                 name = hashlib.sha256(temp + index.nam
char: e
1 retval:                 name = hashlib.sha256(temp + index.name
char: .
1 retval:                 name = hashlib.sha256(temp + index.name.
char: e
1 retval:                 name = hashlib.sha256(temp + index.name.e
char: n
1 retval:                 name = hashlib.sha256(temp + index.name.en
char: c
1 retval:                 name = hashlib.sha256(temp + index.name.enc
char: o
1 retval:                 name = hashlib.sha256(temp + index.name.enco
char: d
1 retval:                 name = hashlib.sha256(temp + index.name.encod
char: e
1 retval:                 name = hashlib.sha256(temp + index.name.encode
char: (
1 retval:                 name = hashlib.sha256(temp + index.name.encode(
char: '
1 retval:                 name = hashlib.sha256(temp + index.name.encode('
char: u
1 retval:                 name = hashlib.sha256(temp + index.name.encode('u
char: t
1 retval:                 name = hashlib.sha256(temp + index.name.encode('ut
char: f
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf
char: -
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-
char: 8
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8
char: '
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8'
char: )
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8')
char:  
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') 
char: +
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') +
char:  
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + 
char: s
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + s
char: u
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + su
char: f
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suf
char: f
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suff
char: i
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffi
char: x
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix
char: )
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix)
char: .
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).
char: h
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).h
char: e
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).he
char: x
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hex
char: d
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexd
char: i
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdi
char: g
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdig
char: e
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdige
char: s
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdiges
char: t
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest
char: (
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest(
char: )
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()
char: [
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[
char: 0
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0
char: :
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:
char: 6
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:6
char: 0
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60
char: ]
1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60]
char: 

1 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60]
2 retval:                 name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: o
1 retval:                 o
char: r
1 retval:                 or
char: i
1 retval:                 ori
char: g
1 retval:                 orig
char: i
1 retval:                 origi
char: n
1 retval:                 origin
char: a
1 retval:                 origina
char: l
1 retval:                 original
char: _
1 retval:                 original_
char: n
1 retval:                 original_n
char: a
1 retval:                 original_na
char: m
1 retval:                 original_nam
char: e
1 retval:                 original_name
char: s
1 retval:                 original_names
char: [
1 retval:                 original_names[
char: n
1 retval:                 original_names[n
char: a
1 retval:                 original_names[na
char: m
1 retval:                 original_names[nam
char: e
1 retval:                 original_names[name
char: ]
1 retval:                 original_names[name]
char:  
1 retval:                 original_names[name] 
char: =
1 retval:                 original_names[name] =
char:  
1 retval:                 original_names[name] = 
char: i
1 retval:                 original_names[name] = i
char: n
1 retval:                 original_names[name] = in
char: d
1 retval:                 original_names[name] = ind
char: e
1 retval:                 original_names[name] = inde
char: x
1 retval:                 original_names[name] = index
char: .
1 retval:                 original_names[name] = index.
char: n
1 retval:                 original_names[name] = index.n
char: a
1 retval:                 original_names[name] = index.na
char: m
1 retval:                 original_names[name] = index.nam
char: e
1 retval:                 original_names[name] = index.name
char: 

1 retval:                 original_names[name] = index.name
2 retval:                 original_names[name] = index.name
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: c
1 retval:                 c
char: o
1 retval:                 co
char: l
1 retval:                 col
char: u
1 retval:                 colu
char: m
1 retval:                 colum
char: n
1 retval:                 column
char: s
1 retval:                 columns
char:  
1 retval:                 columns 
char: =
1 retval:                 columns =
char:  
1 retval:                 columns = 
char: [
1 retval:                 columns = [
char: ]
1 retval:                 columns = []
char: 

1 retval:                 columns = []
2 retval:                 columns = []
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: f
1 retval:                 f
char: o
1 retval:                 fo
char: r
1 retval:                 for
char:  
1 retval:                 for 
char: c
1 retval:                 for c
char: o
1 retval:                 for co
char: l
1 retval:                 for col
char: u
1 retval:                 for colu
char: m
1 retval:                 for colum
char: n
1 retval:                 for column
char:  
1 retval:                 for column 
char: i
1 retval:                 for column i
char: n
1 retval:                 for column in
char:  
1 retval:                 for column in 
char: i
1 retval:                 for column in i
char: n
1 retval:                 for column in in
char: d
1 retval:                 for column in ind
char: e
1 retval:                 for column in inde
char: x
1 retval:                 for column in index
char: .
1 retval:                 for column in index.
char: c
1 retval:                 for column in index.c
char: o
1 retval:                 for column in index.co
char: l
1 retval:                 for column in index.col
char: u
1 retval:                 for column in index.colu
char: m
1 retval:                 for column in index.colum
char: n
1 retval:                 for column in index.column
char: s
1 retval:                 for column in index.columns
char: :
1 retval:                 for column in index.columns:
char: 

1 retval:                 for column in index.columns:
2 retval:                 for column in index.columns:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: c
1 retval:                     c
char: o
1 retval:                     co
char: l
1 retval:                     col
char: u
1 retval:                     colu
char: m
1 retval:                     colum
char: n
1 retval:                     column
char: s
1 retval:                     columns
char: .
1 retval:                     columns.
char: a
1 retval:                     columns.a
char: p
1 retval:                     columns.ap
char: p
1 retval:                     columns.app
char: e
1 retval:                     columns.appe
char: n
1 retval:                     columns.appen
char: d
1 retval:                     columns.append
char: (
1 retval:                     columns.append(
char: n
1 retval:                     columns.append(n
char: e
1 retval:                     columns.append(ne
char: x
1 retval:                     columns.append(nex
char: t
1 retval:                     columns.append(next
char: (
1 retval:                     columns.append(next(
char: x
1 retval:                     columns.append(next(x
char:  
1 retval:                     columns.append(next(x 
char: f
1 retval:                     columns.append(next(x f
char: o
1 retval:                     columns.append(next(x fo
char: r
1 retval:                     columns.append(next(x for
char:  
1 retval:                     columns.append(next(x for 
char: x
1 retval:                     columns.append(next(x for x
char:  
1 retval:                     columns.append(next(x for x 
char: i
1 retval:                     columns.append(next(x for x i
char: n
1 retval:                     columns.append(next(x for x in
char:  
1 retval:                     columns.append(next(x for x in 
char: d
1 retval:                     columns.append(next(x for x in d
char: e
1 retval:                     columns.append(next(x for x in de
char: s
1 retval:                     columns.append(next(x for x in des
char: t
1 retval:                     columns.append(next(x for x in dest
char: i
1 retval:                     columns.append(next(x for x in desti
char: n
1 retval:                     columns.append(next(x for x in destin
char: a
1 retval:                     columns.append(next(x for x in destina
char: t
1 retval:                     columns.append(next(x for x in destinat
char: i
1 retval:                     columns.append(next(x for x in destinati
char: o
1 retval:                     columns.append(next(x for x in destinatio
char: n
1 retval:                     columns.append(next(x for x in destination
char: .
1 retval:                     columns.append(next(x for x in destination.
char: c
1 retval:                     columns.append(next(x for x in destination.c
char: o
1 retval:                     columns.append(next(x for x in destination.co
char: l
1 retval:                     columns.append(next(x for x in destination.col
char: u
1 retval:                     columns.append(next(x for x in destination.colu
char: m
1 retval:                     columns.append(next(x for x in destination.colum
char: n
1 retval:                     columns.append(next(x for x in destination.column
char: s
1 retval:                     columns.append(next(x for x in destination.columns
char:  
1 retval:                     columns.append(next(x for x in destination.columns 
char: i
1 retval:                     columns.append(next(x for x in destination.columns i
char: f
1 retval:                     columns.append(next(x for x in destination.columns if
char:  
1 retval:                     columns.append(next(x for x in destination.columns if 
char: x
1 retval:                     columns.append(next(x for x in destination.columns if x
char: .
1 retval:                     columns.append(next(x for x in destination.columns if x.
char: n
1 retval:                     columns.append(next(x for x in destination.columns if x.n
char: a
1 retval:                     columns.append(next(x for x in destination.columns if x.na
char: m
1 retval:                     columns.append(next(x for x in destination.columns if x.nam
char: e
1 retval:                     columns.append(next(x for x in destination.columns if x.name
char:  
1 retval:                     columns.append(next(x for x in destination.columns if x.name 
char: =
1 retval:                     columns.append(next(x for x in destination.columns if x.name =
char: =
1 retval:                     columns.append(next(x for x in destination.columns if x.name ==
char:  
1 retval:                     columns.append(next(x for x in destination.columns if x.name == 
char: c
1 retval:                     columns.append(next(x for x in destination.columns if x.name == c
char: o
1 retval:                     columns.append(next(x for x in destination.columns if x.name == co
char: l
1 retval:                     columns.append(next(x for x in destination.columns if x.name == col
char: u
1 retval:                     columns.append(next(x for x in destination.columns if x.name == colu
char: m
1 retval:                     columns.append(next(x for x in destination.columns if x.name == colum
char: n
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column
char: .
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.
char: n
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.n
char: a
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.na
char: m
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.nam
char: e
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.name
char: )
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.name)
char: )
1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.name))
char: 

1 retval:                     columns.append(next(x for x in destination.columns if x.name == column.name))
2 retval:                     columns.append(next(x for x in destination.columns if x.name == column.name))
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: w
1 retval:                 new
char:  
1 retval:                 new 
char: =
1 retval:                 new =
char:  
1 retval:                 new = 
char: s
1 retval:                 new = s
char: q
1 retval:                 new = sq
char: l
1 retval:                 new = sql
char: a
1 retval:                 new = sqla
char: l
1 retval:                 new = sqlal
char: c
1 retval:                 new = sqlalc
char: h
1 retval:                 new = sqlalch
char: e
1 retval:                 new = sqlalche
char: m
1 retval:                 new = sqlalchem
char: y
1 retval:                 new = sqlalchemy
char: .
1 retval:                 new = sqlalchemy.
char: I
1 retval:                 new = sqlalchemy.I
char: n
1 retval:                 new = sqlalchemy.In
char: d
1 retval:                 new = sqlalchemy.Ind
char: e
1 retval:                 new = sqlalchemy.Inde
char: x
1 retval:                 new = sqlalchemy.Index
char: (
1 retval:                 new = sqlalchemy.Index(
char: n
1 retval:                 new = sqlalchemy.Index(n
char: a
1 retval:                 new = sqlalchemy.Index(na
char: m
1 retval:                 new = sqlalchemy.Index(nam
char: e
1 retval:                 new = sqlalchemy.Index(name
char: ,
1 retval:                 new = sqlalchemy.Index(name,
char:  
1 retval:                 new = sqlalchemy.Index(name, 
char: *
1 retval:                 new = sqlalchemy.Index(name, *
char: c
1 retval:                 new = sqlalchemy.Index(name, *c
char: o
1 retval:                 new = sqlalchemy.Index(name, *co
char: l
1 retval:                 new = sqlalchemy.Index(name, *col
char: u
1 retval:                 new = sqlalchemy.Index(name, *colu
char: m
1 retval:                 new = sqlalchemy.Index(name, *colum
char: n
1 retval:                 new = sqlalchemy.Index(name, *column
char: s
1 retval:                 new = sqlalchemy.Index(name, *columns
char: )
1 retval:                 new = sqlalchemy.Index(name, *columns)
char: 

1 retval:                 new = sqlalchemy.Index(name, *columns)
2 retval:                 new = sqlalchemy.Index(name, *columns)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: w
1 retval:                 new
char: .
1 retval:                 new.
char: u
1 retval:                 new.u
char: n
1 retval:                 new.un
char: i
1 retval:                 new.uni
char: q
1 retval:                 new.uniq
char: u
1 retval:                 new.uniqu
char: e
1 retval:                 new.unique
char:  
1 retval:                 new.unique 
char: =
1 retval:                 new.unique =
char:  
1 retval:                 new.unique = 
char: i
1 retval:                 new.unique = i
char: n
1 retval:                 new.unique = in
char: d
1 retval:                 new.unique = ind
char: e
1 retval:                 new.unique = inde
char: x
1 retval:                 new.unique = index
char: .
1 retval:                 new.unique = index.
char: u
1 retval:                 new.unique = index.u
char: n
1 retval:                 new.unique = index.un
char: i
1 retval:                 new.unique = index.uni
char: q
1 retval:                 new.unique = index.uniq
char: u
1 retval:                 new.unique = index.uniqu
char: e
1 retval:                 new.unique = index.unique
char: 

1 retval:                 new.unique = index.unique
2 retval:                 new.unique = index.unique
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: w
1 retval:                 new
char: .
1 retval:                 new.
char: t
1 retval:                 new.t
char: a
1 retval:                 new.ta
char: b
1 retval:                 new.tab
char: l
1 retval:                 new.tabl
char: e
1 retval:                 new.table
char:  
1 retval:                 new.table 
char: =
1 retval:                 new.table =
char:  
1 retval:                 new.table = 
char: d
1 retval:                 new.table = d
char: e
1 retval:                 new.table = de
char: s
1 retval:                 new.table = des
char: t
1 retval:                 new.table = dest
char: i
1 retval:                 new.table = desti
char: n
1 retval:                 new.table = destin
char: a
1 retval:                 new.table = destina
char: t
1 retval:                 new.table = destinat
char: i
1 retval:                 new.table = destinati
char: o
1 retval:                 new.table = destinatio
char: n
1 retval:                 new.table = destination
char: 

1 retval:                 new.table = destination
2 retval:                 new.table = destination
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: w
1 retval:                 new
char: .
1 retval:                 new.
char: c
1 retval:                 new.c
char: r
1 retval:                 new.cr
char: e
1 retval:                 new.cre
char: a
1 retval:                 new.crea
char: t
1 retval:                 new.creat
char: e
1 retval:                 new.create
char: (
1 retval:                 new.create(
char: b
1 retval:                 new.create(b
char: i
1 retval:                 new.create(bi
char: n
1 retval:                 new.create(bin
char: d
1 retval:                 new.create(bind
char: =
1 retval:                 new.create(bind=
char: s
1 retval:                 new.create(bind=s
char: e
1 retval:                 new.create(bind=se
char: l
1 retval:                 new.create(bind=sel
char: f
1 retval:                 new.create(bind=self
char: .
1 retval:                 new.create(bind=self.
char: _
1 retval:                 new.create(bind=self._
char: c
1 retval:                 new.create(bind=self._c
char: o
1 retval:                 new.create(bind=self._co
char: n
1 retval:                 new.create(bind=self._con
char: n
1 retval:                 new.create(bind=self._conn
char: e
1 retval:                 new.create(bind=self._conne
char: c
1 retval:                 new.create(bind=self._connec
char: t
1 retval:                 new.create(bind=self._connect
char: i
1 retval:                 new.create(bind=self._connecti
char: o
1 retval:                 new.create(bind=self._connectio
char: n
1 retval:                 new.create(bind=self._connection
char: )
1 retval:                 new.create(bind=self._connection)
char: 

1 retval:                 new.create(bind=self._connection)
2 retval:                 new.create(bind=self._connection)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: i
1 retval:             self.i
char: n
1 retval:             self.in
char: s
1 retval:             self.ins
char: e
1 retval:             self.inse
char: r
1 retval:             self.inser
char: t
1 retval:             self.insert
char: (
1 retval:             self.insert(
char: d
1 retval:             self.insert(d
char: e
1 retval:             self.insert(de
char: s
1 retval:             self.insert(des
char: t
1 retval:             self.insert(dest
char: i
1 retval:             self.insert(desti
char: n
1 retval:             self.insert(destin
char: a
1 retval:             self.insert(destina
char: t
1 retval:             self.insert(destinat
char: i
1 retval:             self.insert(destinati
char: o
1 retval:             self.insert(destinatio
char: n
1 retval:             self.insert(destination
char: .
1 retval:             self.insert(destination.
char: n
1 retval:             self.insert(destination.n
char: a
1 retval:             self.insert(destination.na
char: m
1 retval:             self.insert(destination.nam
char: e
1 retval:             self.insert(destination.name
char: ,
1 retval:             self.insert(destination.name,
char:  
1 retval:             self.insert(destination.name, 
char: d
1 retval:             self.insert(destination.name, d
char: a
1 retval:             self.insert(destination.name, da
char: t
1 retval:             self.insert(destination.name, dat
char: a
1 retval:             self.insert(destination.name, data
char: f
1 retval:             self.insert(destination.name, dataf
char: r
1 retval:             self.insert(destination.name, datafr
char: a
1 retval:             self.insert(destination.name, datafra
char: m
1 retval:             self.insert(destination.name, datafram
char: e
1 retval:             self.insert(destination.name, dataframe
char: ,
1 retval:             self.insert(destination.name, dataframe,
char:  
1 retval:             self.insert(destination.name, dataframe, 
char: b
1 retval:             self.insert(destination.name, dataframe, b
char: a
1 retval:             self.insert(destination.name, dataframe, ba
char: t
1 retval:             self.insert(destination.name, dataframe, bat
char: c
1 retval:             self.insert(destination.name, dataframe, batc
char: h
1 retval:             self.insert(destination.name, dataframe, batch
char: _
1 retval:             self.insert(destination.name, dataframe, batch_
char: s
1 retval:             self.insert(destination.name, dataframe, batch_s
char: i
1 retval:             self.insert(destination.name, dataframe, batch_si
char: z
1 retval:             self.insert(destination.name, dataframe, batch_siz
char: e
1 retval:             self.insert(destination.name, dataframe, batch_size
char: =
1 retval:             self.insert(destination.name, dataframe, batch_size=
char: b
1 retval:             self.insert(destination.name, dataframe, batch_size=b
char: a
1 retval:             self.insert(destination.name, dataframe, batch_size=ba
char: t
1 retval:             self.insert(destination.name, dataframe, batch_size=bat
char: c
1 retval:             self.insert(destination.name, dataframe, batch_size=batc
char: h
1 retval:             self.insert(destination.name, dataframe, batch_size=batch
char: _
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_
char: s
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_s
char: i
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_si
char: z
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_siz
char: e
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_size
char: )
1 retval:             self.insert(destination.name, dataframe, batch_size=batch_size)
char: 

1 retval:             self.insert(destination.name, dataframe, batch_size=batch_size)
2 retval:             self.insert(destination.name, dataframe, batch_size=batch_size)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: e
1 retval:             self.e
char: x
1 retval:             self.ex
char: e
1 retval:             self.exe
char: c
1 retval:             self.exec
char: u
1 retval:             self.execu
char: t
1 retval:             self.execut
char: e
1 retval:             self.execute
char: (
1 retval:             self.execute(
char: "
1 retval:             self.execute("
char: B
1 retval:             self.execute("B
char: E
1 retval:             self.execute("BE
char: G
1 retval:             self.execute("BEG
char: I
1 retval:             self.execute("BEGI
char: N
1 retval:             self.execute("BEGIN
char: ;
1 retval:             self.execute("BEGIN;
char:  
1 retval:             self.execute("BEGIN; 
char: S
1 retval:             self.execute("BEGIN; S
char: E
1 retval:             self.execute("BEGIN; SE
char: T
1 retval:             self.execute("BEGIN; SET
char:  
1 retval:             self.execute("BEGIN; SET 
char: L
1 retval:             self.execute("BEGIN; SET L
char: O
1 retval:             self.execute("BEGIN; SET LO
char: C
1 retval:             self.execute("BEGIN; SET LOC
char: A
1 retval:             self.execute("BEGIN; SET LOCA
char: L
1 retval:             self.execute("BEGIN; SET LOCAL
char:  
1 retval:             self.execute("BEGIN; SET LOCAL 
char: s
1 retval:             self.execute("BEGIN; SET LOCAL s
char: t
1 retval:             self.execute("BEGIN; SET LOCAL st
char: a
1 retval:             self.execute("BEGIN; SET LOCAL sta
char: t
1 retval:             self.execute("BEGIN; SET LOCAL stat
char: e
1 retval:             self.execute("BEGIN; SET LOCAL state
char: m
1 retval:             self.execute("BEGIN; SET LOCAL statem
char: e
1 retval:             self.execute("BEGIN; SET LOCAL stateme
char: n
1 retval:             self.execute("BEGIN; SET LOCAL statemen
char: t
1 retval:             self.execute("BEGIN; SET LOCAL statement
char: _
1 retval:             self.execute("BEGIN; SET LOCAL statement_
char: t
1 retval:             self.execute("BEGIN; SET LOCAL statement_t
char: i
1 retval:             self.execute("BEGIN; SET LOCAL statement_ti
char: m
1 retval:             self.execute("BEGIN; SET LOCAL statement_tim
char: e
1 retval:             self.execute("BEGIN; SET LOCAL statement_time
char: o
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeo
char: u
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeou
char: t
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout 
char: =
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout =
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = 
char: '
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '
char: 1
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1
char: m
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1m
char: i
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1mi
char: n
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min
char: '
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'
char: ;
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min';
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; 
char: A
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; A
char: N
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; AN
char: A
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANA
char: L
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANAL
char: Y
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALY
char: Z
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZ
char: E
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE 
char: %
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %
char: s
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s
char: ;
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s;
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; 
char: C
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; C
char: O
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; CO
char: M
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COM
char: M
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMM
char: I
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMI
char: T
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT
char: ;
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;
char: "
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;"
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" 
char: %
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" %
char:  
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % 
char: t
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % t
char: a
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % ta
char: b
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % tab
char: l
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % tabl
char: e
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % table
char: )
1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % table)
char: 

1 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % table)
2 retval:             self.execute("BEGIN; SET LOCAL statement_timeout = '1min'; ANALYZE %s; COMMIT;" % table)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: w
1 retval:             w
char: i
1 retval:             wi
char: t
1 retval:             wit
char: h
1 retval:             with
char:  
1 retval:             with 
char: s
1 retval:             with s
char: e
1 retval:             with se
char: l
1 retval:             with sel
char: f
1 retval:             with self
char:  
1 retval:             with self 
char: a
1 retval:             with self a
char: s
1 retval:             with self as
char:  
1 retval:             with self as 
char: t
1 retval:             with self as t
char: r
1 retval:             with self as tr
char: a
1 retval:             with self as tra
char: n
1 retval:             with self as tran
char: s
1 retval:             with self as trans
char: a
1 retval:             with self as transa
char: c
1 retval:             with self as transac
char: t
1 retval:             with self as transact
char: i
1 retval:             with self as transacti
char: o
1 retval:             with self as transactio
char: n
1 retval:             with self as transaction
char: :
1 retval:             with self as transaction:
char: 

1 retval:             with self as transaction:
2 retval:             with self as transaction:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: b
1 retval:                 b
char: a
1 retval:                 ba
char: c
1 retval:                 bac
char: k
1 retval:                 back
char: u
1 retval:                 backu
char: p
1 retval:                 backup
char:  
1 retval:                 backup 
char: =
1 retval:                 backup =
char:  
1 retval:                 backup = 
char: s
1 retval:                 backup = s
char: q
1 retval:                 backup = sq
char: l
1 retval:                 backup = sql
char: a
1 retval:                 backup = sqla
char: l
1 retval:                 backup = sqlal
char: c
1 retval:                 backup = sqlalc
char: h
1 retval:                 backup = sqlalch
char: e
1 retval:                 backup = sqlalche
char: m
1 retval:                 backup = sqlalchem
char: y
1 retval:                 backup = sqlalchemy
char: .
1 retval:                 backup = sqlalchemy.
char: T
1 retval:                 backup = sqlalchemy.T
char: a
1 retval:                 backup = sqlalchemy.Ta
char: b
1 retval:                 backup = sqlalchemy.Tab
char: l
1 retval:                 backup = sqlalchemy.Tabl
char: e
1 retval:                 backup = sqlalchemy.Table
char: (
1 retval:                 backup = sqlalchemy.Table(
char: t
1 retval:                 backup = sqlalchemy.Table(t
char: a
1 retval:                 backup = sqlalchemy.Table(ta
char: b
1 retval:                 backup = sqlalchemy.Table(tab
char: l
1 retval:                 backup = sqlalchemy.Table(tabl
char: e
1 retval:                 backup = sqlalchemy.Table(table
char:  
1 retval:                 backup = sqlalchemy.Table(table 
char: +
1 retval:                 backup = sqlalchemy.Table(table +
char:  
1 retval:                 backup = sqlalchemy.Table(table + 
char: '
1 retval:                 backup = sqlalchemy.Table(table + '
char: _
1 retval:                 backup = sqlalchemy.Table(table + '_
char: b
1 retval:                 backup = sqlalchemy.Table(table + '_b
char: '
1 retval:                 backup = sqlalchemy.Table(table + '_b'
char: ,
1 retval:                 backup = sqlalchemy.Table(table + '_b',
char:  
1 retval:                 backup = sqlalchemy.Table(table + '_b', 
char: s
1 retval:                 backup = sqlalchemy.Table(table + '_b', s
char: e
1 retval:                 backup = sqlalchemy.Table(table + '_b', se
char: l
1 retval:                 backup = sqlalchemy.Table(table + '_b', sel
char: f
1 retval:                 backup = sqlalchemy.Table(table + '_b', self
char: .
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.
char: m
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.m
char: e
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.me
char: t
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.met
char: a
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.meta
char: d
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metad
char: a
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metada
char: t
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metadat
char: a
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metadata
char: )
1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metadata)
char: 

1 retval:                 backup = sqlalchemy.Table(table + '_b', self.metadata)
2 retval:                 backup = sqlalchemy.Table(table + '_b', self.metadata)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: b
1 retval:                 b
char: a
1 retval:                 ba
char: c
1 retval:                 bac
char: k
1 retval:                 back
char: u
1 retval:                 backu
char: p
1 retval:                 backup
char: .
1 retval:                 backup.
char: d
1 retval:                 backup.d
char: r
1 retval:                 backup.dr
char: o
1 retval:                 backup.dro
char: p
1 retval:                 backup.drop
char: (
1 retval:                 backup.drop(
char: b
1 retval:                 backup.drop(b
char: i
1 retval:                 backup.drop(bi
char: n
1 retval:                 backup.drop(bin
char: d
1 retval:                 backup.drop(bind
char: =
1 retval:                 backup.drop(bind=
char: s
1 retval:                 backup.drop(bind=s
char: e
1 retval:                 backup.drop(bind=se
char: l
1 retval:                 backup.drop(bind=sel
char: f
1 retval:                 backup.drop(bind=self
char: .
1 retval:                 backup.drop(bind=self.
char: _
1 retval:                 backup.drop(bind=self._
char: c
1 retval:                 backup.drop(bind=self._c
char: o
1 retval:                 backup.drop(bind=self._co
char: n
1 retval:                 backup.drop(bind=self._con
char: n
1 retval:                 backup.drop(bind=self._conn
char: e
1 retval:                 backup.drop(bind=self._conne
char: c
1 retval:                 backup.drop(bind=self._connec
char: t
1 retval:                 backup.drop(bind=self._connect
char: i
1 retval:                 backup.drop(bind=self._connecti
char: o
1 retval:                 backup.drop(bind=self._connectio
char: n
1 retval:                 backup.drop(bind=self._connection
char: ,
1 retval:                 backup.drop(bind=self._connection,
char:  
1 retval:                 backup.drop(bind=self._connection, 
char: c
1 retval:                 backup.drop(bind=self._connection, c
char: h
1 retval:                 backup.drop(bind=self._connection, ch
char: e
1 retval:                 backup.drop(bind=self._connection, che
char: c
1 retval:                 backup.drop(bind=self._connection, chec
char: k
1 retval:                 backup.drop(bind=self._connection, check
char: f
1 retval:                 backup.drop(bind=self._connection, checkf
char: i
1 retval:                 backup.drop(bind=self._connection, checkfi
char: r
1 retval:                 backup.drop(bind=self._connection, checkfir
char: s
1 retval:                 backup.drop(bind=self._connection, checkfirs
char: t
1 retval:                 backup.drop(bind=self._connection, checkfirst
char: =
1 retval:                 backup.drop(bind=self._connection, checkfirst=
char: T
1 retval:                 backup.drop(bind=self._connection, checkfirst=T
char: r
1 retval:                 backup.drop(bind=self._connection, checkfirst=Tr
char: u
1 retval:                 backup.drop(bind=self._connection, checkfirst=Tru
char: e
1 retval:                 backup.drop(bind=self._connection, checkfirst=True
char: )
1 retval:                 backup.drop(bind=self._connection, checkfirst=True)
char: 

1 retval:                 backup.drop(bind=self._connection, checkfirst=True)
2 retval:                 backup.drop(bind=self._connection, checkfirst=True)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: s
1 retval:                 s
char: o
1 retval:                 so
char: u
1 retval:                 sou
char: r
1 retval:                 sour
char: c
1 retval:                 sourc
char: e
1 retval:                 source
char: .
1 retval:                 source.
char: r
1 retval:                 source.r
char: e
1 retval:                 source.re
char: n
1 retval:                 source.ren
char: a
1 retval:                 source.rena
char: m
1 retval:                 source.renam
char: e
1 retval:                 source.rename
char: (
1 retval:                 source.rename(
char: n
1 retval:                 source.rename(n
char: a
1 retval:                 source.rename(na
char: m
1 retval:                 source.rename(nam
char: e
1 retval:                 source.rename(name
char: =
1 retval:                 source.rename(name=
char: s
1 retval:                 source.rename(name=s
char: o
1 retval:                 source.rename(name=so
char: u
1 retval:                 source.rename(name=sou
char: r
1 retval:                 source.rename(name=sour
char: c
1 retval:                 source.rename(name=sourc
char: e
1 retval:                 source.rename(name=source
char: .
1 retval:                 source.rename(name=source.
char: n
1 retval:                 source.rename(name=source.n
char: a
1 retval:                 source.rename(name=source.na
char: m
1 retval:                 source.rename(name=source.nam
char: e
1 retval:                 source.rename(name=source.name
char:  
1 retval:                 source.rename(name=source.name 
char: +
1 retval:                 source.rename(name=source.name +
char:  
1 retval:                 source.rename(name=source.name + 
char: '
1 retval:                 source.rename(name=source.name + '
char: _
1 retval:                 source.rename(name=source.name + '_
char: b
1 retval:                 source.rename(name=source.name + '_b
char: '
1 retval:                 source.rename(name=source.name + '_b'
char: ,
1 retval:                 source.rename(name=source.name + '_b',
char:  
1 retval:                 source.rename(name=source.name + '_b', 
char: c
1 retval:                 source.rename(name=source.name + '_b', c
char: o
1 retval:                 source.rename(name=source.name + '_b', co
char: n
1 retval:                 source.rename(name=source.name + '_b', con
char: n
1 retval:                 source.rename(name=source.name + '_b', conn
char: e
1 retval:                 source.rename(name=source.name + '_b', conne
char: c
1 retval:                 source.rename(name=source.name + '_b', connec
char: t
1 retval:                 source.rename(name=source.name + '_b', connect
char: i
1 retval:                 source.rename(name=source.name + '_b', connecti
char: o
1 retval:                 source.rename(name=source.name + '_b', connectio
char: n
1 retval:                 source.rename(name=source.name + '_b', connection
char: =
1 retval:                 source.rename(name=source.name + '_b', connection=
char: s
1 retval:                 source.rename(name=source.name + '_b', connection=s
char: e
1 retval:                 source.rename(name=source.name + '_b', connection=se
char: l
1 retval:                 source.rename(name=source.name + '_b', connection=sel
char: f
1 retval:                 source.rename(name=source.name + '_b', connection=self
char: .
1 retval:                 source.rename(name=source.name + '_b', connection=self.
char: _
1 retval:                 source.rename(name=source.name + '_b', connection=self._
char: c
1 retval:                 source.rename(name=source.name + '_b', connection=self._c
char: o
1 retval:                 source.rename(name=source.name + '_b', connection=self._co
char: n
1 retval:                 source.rename(name=source.name + '_b', connection=self._con
char: n
1 retval:                 source.rename(name=source.name + '_b', connection=self._conn
char: e
1 retval:                 source.rename(name=source.name + '_b', connection=self._conne
char: c
1 retval:                 source.rename(name=source.name + '_b', connection=self._connec
char: t
1 retval:                 source.rename(name=source.name + '_b', connection=self._connect
char: i
1 retval:                 source.rename(name=source.name + '_b', connection=self._connecti
char: o
1 retval:                 source.rename(name=source.name + '_b', connection=self._connectio
char: n
1 retval:                 source.rename(name=source.name + '_b', connection=self._connection
char: )
1 retval:                 source.rename(name=source.name + '_b', connection=self._connection)
char: 

1 retval:                 source.rename(name=source.name + '_b', connection=self._connection)
2 retval:                 source.rename(name=source.name + '_b', connection=self._connection)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: d
1 retval:                 d
char: e
1 retval:                 de
char: s
1 retval:                 des
char: t
1 retval:                 dest
char: i
1 retval:                 desti
char: n
1 retval:                 destin
char: a
1 retval:                 destina
char: t
1 retval:                 destinat
char: i
1 retval:                 destinati
char: o
1 retval:                 destinatio
char: n
1 retval:                 destination
char: .
1 retval:                 destination.
char: r
1 retval:                 destination.r
char: e
1 retval:                 destination.re
char: n
1 retval:                 destination.ren
char: a
1 retval:                 destination.rena
char: m
1 retval:                 destination.renam
char: e
1 retval:                 destination.rename
char: (
1 retval:                 destination.rename(
char: n
1 retval:                 destination.rename(n
char: a
1 retval:                 destination.rename(na
char: m
1 retval:                 destination.rename(nam
char: e
1 retval:                 destination.rename(name
char: =
1 retval:                 destination.rename(name=
char: t
1 retval:                 destination.rename(name=t
char: a
1 retval:                 destination.rename(name=ta
char: b
1 retval:                 destination.rename(name=tab
char: l
1 retval:                 destination.rename(name=tabl
char: e
1 retval:                 destination.rename(name=table
char: ,
1 retval:                 destination.rename(name=table,
char:  
1 retval:                 destination.rename(name=table, 
char: c
1 retval:                 destination.rename(name=table, c
char: o
1 retval:                 destination.rename(name=table, co
char: n
1 retval:                 destination.rename(name=table, con
char: n
1 retval:                 destination.rename(name=table, conn
char: e
1 retval:                 destination.rename(name=table, conne
char: c
1 retval:                 destination.rename(name=table, connec
char: t
1 retval:                 destination.rename(name=table, connect
char: i
1 retval:                 destination.rename(name=table, connecti
char: o
1 retval:                 destination.rename(name=table, connectio
char: n
1 retval:                 destination.rename(name=table, connection
char: =
1 retval:                 destination.rename(name=table, connection=
char: s
1 retval:                 destination.rename(name=table, connection=s
char: e
1 retval:                 destination.rename(name=table, connection=se
char: l
1 retval:                 destination.rename(name=table, connection=sel
char: f
1 retval:                 destination.rename(name=table, connection=self
char: .
1 retval:                 destination.rename(name=table, connection=self.
char: _
1 retval:                 destination.rename(name=table, connection=self._
char: c
1 retval:                 destination.rename(name=table, connection=self._c
char: o
1 retval:                 destination.rename(name=table, connection=self._co
char: n
1 retval:                 destination.rename(name=table, connection=self._con
char: n
1 retval:                 destination.rename(name=table, connection=self._conn
char: e
1 retval:                 destination.rename(name=table, connection=self._conne
char: c
1 retval:                 destination.rename(name=table, connection=self._connec
char: t
1 retval:                 destination.rename(name=table, connection=self._connect
char: i
1 retval:                 destination.rename(name=table, connection=self._connecti
char: o
1 retval:                 destination.rename(name=table, connection=self._connectio
char: n
1 retval:                 destination.rename(name=table, connection=self._connection
char: )
1 retval:                 destination.rename(name=table, connection=self._connection)
char: 

1 retval:                 destination.rename(name=table, connection=self._connection)
2 retval:                 destination.rename(name=table, connection=self._connection)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: f
1 retval:                 f
char: o
1 retval:                 fo
char: r
1 retval:                 for
char:  
1 retval:                 for 
char: i
1 retval:                 for i
char: n
1 retval:                 for in
char: d
1 retval:                 for ind
char: e
1 retval:                 for inde
char: x
1 retval:                 for index
char:  
1 retval:                 for index 
char: i
1 retval:                 for index i
char: n
1 retval:                 for index in
char:  
1 retval:                 for index in 
char: s
1 retval:                 for index in s
char: o
1 retval:                 for index in so
char: u
1 retval:                 for index in sou
char: r
1 retval:                 for index in sour
char: c
1 retval:                 for index in sourc
char: e
1 retval:                 for index in source
char: .
1 retval:                 for index in source.
char: i
1 retval:                 for index in source.i
char: n
1 retval:                 for index in source.in
char: d
1 retval:                 for index in source.ind
char: e
1 retval:                 for index in source.inde
char: x
1 retval:                 for index in source.index
char: e
1 retval:                 for index in source.indexe
char: s
1 retval:                 for index in source.indexes
char: :
1 retval:                 for index in source.indexes:
char: 

1 retval:                 for index in source.indexes:
2 retval:                 for index in source.indexes:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: i
1 retval:                     i
char: n
1 retval:                     in
char: d
1 retval:                     ind
char: e
1 retval:                     inde
char: x
1 retval:                     index
char: .
1 retval:                     index.
char: r
1 retval:                     index.r
char: e
1 retval:                     index.re
char: n
1 retval:                     index.ren
char: a
1 retval:                     index.rena
char: m
1 retval:                     index.renam
char: e
1 retval:                     index.rename
char: (
1 retval:                     index.rename(
char: i
1 retval:                     index.rename(i
char: n
1 retval:                     index.rename(in
char: d
1 retval:                     index.rename(ind
char: e
1 retval:                     index.rename(inde
char: x
1 retval:                     index.rename(index
char: .
1 retval:                     index.rename(index.
char: n
1 retval:                     index.rename(index.n
char: a
1 retval:                     index.rename(index.na
char: m
1 retval:                     index.rename(index.nam
char: e
1 retval:                     index.rename(index.name
char: [
1 retval:                     index.rename(index.name[
char: 0
1 retval:                     index.rename(index.name[0
char: :
1 retval:                     index.rename(index.name[0:
char: -
1 retval:                     index.rename(index.name[0:-
char: 2
1 retval:                     index.rename(index.name[0:-2
char: ]
1 retval:                     index.rename(index.name[0:-2]
char:  
1 retval:                     index.rename(index.name[0:-2] 
char: +
1 retval:                     index.rename(index.name[0:-2] +
char:  
1 retval:                     index.rename(index.name[0:-2] + 
char: '
1 retval:                     index.rename(index.name[0:-2] + '
char: _
1 retval:                     index.rename(index.name[0:-2] + '_
char: b
1 retval:                     index.rename(index.name[0:-2] + '_b
char: '
1 retval:                     index.rename(index.name[0:-2] + '_b'
char: ,
1 retval:                     index.rename(index.name[0:-2] + '_b',
char:  
1 retval:                     index.rename(index.name[0:-2] + '_b', 
char: c
1 retval:                     index.rename(index.name[0:-2] + '_b', c
char: o
1 retval:                     index.rename(index.name[0:-2] + '_b', co
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', con
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', conn
char: e
1 retval:                     index.rename(index.name[0:-2] + '_b', conne
char: c
1 retval:                     index.rename(index.name[0:-2] + '_b', connec
char: t
1 retval:                     index.rename(index.name[0:-2] + '_b', connect
char: i
1 retval:                     index.rename(index.name[0:-2] + '_b', connecti
char: o
1 retval:                     index.rename(index.name[0:-2] + '_b', connectio
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', connection
char: =
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=
char: s
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=s
char: e
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=se
char: l
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=sel
char: f
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self
char: .
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self.
char: _
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._
char: c
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._c
char: o
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._co
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._con
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._conn
char: e
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._conne
char: c
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connec
char: t
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connect
char: i
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connecti
char: o
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connectio
char: n
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connection
char: )
1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connection)
char: 

1 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connection)
2 retval:                     index.rename(index.name[0:-2] + '_b', connection=self._connection)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: f
1 retval:                 f
char: o
1 retval:                 fo
char: r
1 retval:                 for
char:  
1 retval:                 for 
char: i
1 retval:                 for i
char: n
1 retval:                 for in
char: d
1 retval:                 for ind
char: e
1 retval:                 for inde
char: x
1 retval:                 for index
char:  
1 retval:                 for index 
char: i
1 retval:                 for index i
char: n
1 retval:                 for index in
char:  
1 retval:                 for index in 
char: d
1 retval:                 for index in d
char: e
1 retval:                 for index in de
char: s
1 retval:                 for index in des
char: t
1 retval:                 for index in dest
char: i
1 retval:                 for index in desti
char: n
1 retval:                 for index in destin
char: a
1 retval:                 for index in destina
char: t
1 retval:                 for index in destinat
char: i
1 retval:                 for index in destinati
char: o
1 retval:                 for index in destinatio
char: n
1 retval:                 for index in destination
char: .
1 retval:                 for index in destination.
char: i
1 retval:                 for index in destination.i
char: n
1 retval:                 for index in destination.in
char: d
1 retval:                 for index in destination.ind
char: e
1 retval:                 for index in destination.inde
char: x
1 retval:                 for index in destination.index
char: e
1 retval:                 for index in destination.indexe
char: s
1 retval:                 for index in destination.indexes
char: :
1 retval:                 for index in destination.indexes:
char: 

1 retval:                 for index in destination.indexes:
2 retval:                 for index in destination.indexes:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: i
1 retval:                     i
char: n
1 retval:                     in
char: d
1 retval:                     ind
char: e
1 retval:                     inde
char: x
1 retval:                     index
char: .
1 retval:                     index.
char: r
1 retval:                     index.r
char: e
1 retval:                     index.re
char: n
1 retval:                     index.ren
char: a
1 retval:                     index.rena
char: m
1 retval:                     index.renam
char: e
1 retval:                     index.rename
char: (
1 retval:                     index.rename(
char: o
1 retval:                     index.rename(o
char: r
1 retval:                     index.rename(or
char: i
1 retval:                     index.rename(ori
char: g
1 retval:                     index.rename(orig
char: i
1 retval:                     index.rename(origi
char: n
1 retval:                     index.rename(origin
char: a
1 retval:                     index.rename(origina
char: l
1 retval:                     index.rename(original
char: _
1 retval:                     index.rename(original_
char: n
1 retval:                     index.rename(original_n
char: a
1 retval:                     index.rename(original_na
char: m
1 retval:                     index.rename(original_nam
char: e
1 retval:                     index.rename(original_name
char: s
1 retval:                     index.rename(original_names
char: [
1 retval:                     index.rename(original_names[
char: i
1 retval:                     index.rename(original_names[i
char: n
1 retval:                     index.rename(original_names[in
char: d
1 retval:                     index.rename(original_names[ind
char: e
1 retval:                     index.rename(original_names[inde
char: x
1 retval:                     index.rename(original_names[index
char: .
1 retval:                     index.rename(original_names[index.
char: n
1 retval:                     index.rename(original_names[index.n
char: a
1 retval:                     index.rename(original_names[index.na
char: m
1 retval:                     index.rename(original_names[index.nam
char: e
1 retval:                     index.rename(original_names[index.name
char: ]
1 retval:                     index.rename(original_names[index.name]
char: ,
1 retval:                     index.rename(original_names[index.name],
char:  
1 retval:                     index.rename(original_names[index.name], 
char: c
1 retval:                     index.rename(original_names[index.name], c
char: o
1 retval:                     index.rename(original_names[index.name], co
char: n
1 retval:                     index.rename(original_names[index.name], con
char: n
1 retval:                     index.rename(original_names[index.name], conn
char: e
1 retval:                     index.rename(original_names[index.name], conne
char: c
1 retval:                     index.rename(original_names[index.name], connec
char: t
1 retval:                     index.rename(original_names[index.name], connect
char: i
1 retval:                     index.rename(original_names[index.name], connecti
char: o
1 retval:                     index.rename(original_names[index.name], connectio
char: n
1 retval:                     index.rename(original_names[index.name], connection
char: =
1 retval:                     index.rename(original_names[index.name], connection=
char: s
1 retval:                     index.rename(original_names[index.name], connection=s
char: e
1 retval:                     index.rename(original_names[index.name], connection=se
char: l
1 retval:                     index.rename(original_names[index.name], connection=sel
char: f
1 retval:                     index.rename(original_names[index.name], connection=self
char: .
1 retval:                     index.rename(original_names[index.name], connection=self.
char: _
1 retval:                     index.rename(original_names[index.name], connection=self._
char: c
1 retval:                     index.rename(original_names[index.name], connection=self._c
char: o
1 retval:                     index.rename(original_names[index.name], connection=self._co
char: n
1 retval:                     index.rename(original_names[index.name], connection=self._con
char: n
1 retval:                     index.rename(original_names[index.name], connection=self._conn
char: e
1 retval:                     index.rename(original_names[index.name], connection=self._conne
char: c
1 retval:                     index.rename(original_names[index.name], connection=self._connec
char: t
1 retval:                     index.rename(original_names[index.name], connection=self._connect
char: i
1 retval:                     index.rename(original_names[index.name], connection=self._connecti
char: o
1 retval:                     index.rename(original_names[index.name], connection=self._connectio
char: n
1 retval:                     index.rename(original_names[index.name], connection=self._connection
char: )
1 retval:                     index.rename(original_names[index.name], connection=self._connection)
char: 

1 retval:                     index.rename(original_names[index.name], connection=self._connection)
2 retval:                     index.rename(original_names[index.name], connection=self._connection)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: f
1 retval:         f
char: o
1 retval:         fo
char: r
1 retval:         for
char:  
1 retval:         for 
char: f
1 retval:         for f
char: u
1 retval:         for fu
char: n
1 retval:         for fun
char: c
1 retval:         for func
char:  
1 retval:         for func 
char: i
1 retval:         for func i
char: n
1 retval:         for func in
char:  
1 retval:         for func in 
char: _
1 retval:         for func in _
char: a
1 retval:         for func in _a
char: f
1 retval:         for func in _af
char: t
1 retval:         for func in _aft
char: e
1 retval:         for func in _afte
char: r
1 retval:         for func in _after
char: _
1 retval:         for func in _after_
char: r
1 retval:         for func in _after_r
char: e
1 retval:         for func in _after_re
char: p
1 retval:         for func in _after_rep
char: l
1 retval:         for func in _after_repl
char: a
1 retval:         for func in _after_repla
char: c
1 retval:         for func in _after_replac
char: e
1 retval:         for func in _after_replace
char: _
1 retval:         for func in _after_replace_
char: c
1 retval:         for func in _after_replace_c
char: a
1 retval:         for func in _after_replace_ca
char: l
1 retval:         for func in _after_replace_cal
char: l
1 retval:         for func in _after_replace_call
char: b
1 retval:         for func in _after_replace_callb
char: a
1 retval:         for func in _after_replace_callba
char: c
1 retval:         for func in _after_replace_callbac
char: k
1 retval:         for func in _after_replace_callback
char: s
1 retval:         for func in _after_replace_callbacks
char: :
1 retval:         for func in _after_replace_callbacks:
char: 

1 retval:         for func in _after_replace_callbacks:
2 retval:         for func in _after_replace_callbacks:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: u
1 retval:             fu
char: n
1 retval:             fun
char: c
1 retval:             func
char: (
1 retval:             func(
char: d
1 retval:             func(d
char: e
1 retval:             func(de
char: s
1 retval:             func(des
char: t
1 retval:             func(dest
char: i
1 retval:             func(desti
char: n
1 retval:             func(destin
char: a
1 retval:             func(destina
char: t
1 retval:             func(destinat
char: i
1 retval:             func(destinati
char: o
1 retval:             func(destinatio
char: n
1 retval:             func(destination
char: ,
1 retval:             func(destination,
char:  
1 retval:             func(destination, 
char: s
1 retval:             func(destination, s
char: o
1 retval:             func(destination, so
char: u
1 retval:             func(destination, sou
char: r
1 retval:             func(destination, sour
char: c
1 retval:             func(destination, sourc
char: e
1 retval:             func(destination, source
char: )
1 retval:             func(destination, source)
char: 

1 retval:             func(destination, source)
2 retval:             func(destination, source)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: p
1 retval:     @p
char: r
1 retval:     @pr
char: o
1 retval:     @pro
char: p
1 retval:     @prop
char: e
1 retval:     @prope
char: r
1 retval:     @proper
char: t
1 retval:     @propert
char: y
1 retval:     @property
char: 

1 retval:     @property
2 retval:     @property
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: m
1 retval:     def m
char: e
1 retval:     def me
char: t
1 retval:     def met
char: a
1 retval:     def meta
char: d
1 retval:     def metad
char: a
1 retval:     def metada
char: t
1 retval:     def metadat
char: a
1 retval:     def metadata
char: (
1 retval:     def metadata(
char: s
1 retval:     def metadata(s
char: e
1 retval:     def metadata(se
char: l
1 retval:     def metadata(sel
char: f
1 retval:     def metadata(self
char: )
1 retval:     def metadata(self)
char: :
1 retval:     def metadata(self):
char: 

1 retval:     def metadata(self):
2 retval:     def metadata(self):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: n
1 retval:         if n
char: o
1 retval:         if no
char: t
1 retval:         if not
char:  
1 retval:         if not 
char: s
1 retval:         if not s
char: e
1 retval:         if not se
char: l
1 retval:         if not sel
char: f
1 retval:         if not self
char: .
1 retval:         if not self.
char: _
1 retval:         if not self._
char: m
1 retval:         if not self._m
char: e
1 retval:         if not self._me
char: t
1 retval:         if not self._met
char: a
1 retval:         if not self._meta
char: d
1 retval:         if not self._metad
char: a
1 retval:         if not self._metada
char: t
1 retval:         if not self._metadat
char: a
1 retval:         if not self._metadata
char: :
1 retval:         if not self._metadata:
char: 

1 retval:         if not self._metadata:
2 retval:         if not self._metadata:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: _
1 retval:             self._
char: m
1 retval:             self._m
char: e
1 retval:             self._me
char: t
1 retval:             self._met
char: a
1 retval:             self._meta
char: d
1 retval:             self._metad
char: a
1 retval:             self._metada
char: t
1 retval:             self._metadat
char: a
1 retval:             self._metadata
char:  
1 retval:             self._metadata 
char: =
1 retval:             self._metadata =
char:  
1 retval:             self._metadata = 
char: s
1 retval:             self._metadata = s
char: q
1 retval:             self._metadata = sq
char: l
1 retval:             self._metadata = sql
char: a
1 retval:             self._metadata = sqla
char: l
1 retval:             self._metadata = sqlal
char: c
1 retval:             self._metadata = sqlalc
char: h
1 retval:             self._metadata = sqlalch
char: e
1 retval:             self._metadata = sqlalche
char: m
1 retval:             self._metadata = sqlalchem
char: y
1 retval:             self._metadata = sqlalchemy
char: .
1 retval:             self._metadata = sqlalchemy.
char: M
1 retval:             self._metadata = sqlalchemy.M
char: e
1 retval:             self._metadata = sqlalchemy.Me
char: t
1 retval:             self._metadata = sqlalchemy.Met
char: a
1 retval:             self._metadata = sqlalchemy.Meta
char: D
1 retval:             self._metadata = sqlalchemy.MetaD
char: a
1 retval:             self._metadata = sqlalchemy.MetaDa
char: t
1 retval:             self._metadata = sqlalchemy.MetaDat
char: a
1 retval:             self._metadata = sqlalchemy.MetaData
char: (
1 retval:             self._metadata = sqlalchemy.MetaData(
char: b
1 retval:             self._metadata = sqlalchemy.MetaData(b
char: i
1 retval:             self._metadata = sqlalchemy.MetaData(bi
char: n
1 retval:             self._metadata = sqlalchemy.MetaData(bin
char: d
1 retval:             self._metadata = sqlalchemy.MetaData(bind
char: =
1 retval:             self._metadata = sqlalchemy.MetaData(bind=
char: s
1 retval:             self._metadata = sqlalchemy.MetaData(bind=s
char: e
1 retval:             self._metadata = sqlalchemy.MetaData(bind=se
char: l
1 retval:             self._metadata = sqlalchemy.MetaData(bind=sel
char: f
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self
char: .
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self.
char: _
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._
char: e
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._e
char: n
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._en
char: g
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._eng
char: i
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engi
char: n
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engin
char: e
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engine
char: )
1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engine)
char: 

1 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engine)
2 retval:             self._metadata = sqlalchemy.MetaData(bind=self._engine)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: m
1 retval:         return self._m
char: e
1 retval:         return self._me
char: t
1 retval:         return self._met
char: a
1 retval:         return self._meta
char: d
1 retval:         return self._metad
char: a
1 retval:         return self._metada
char: t
1 retval:         return self._metadat
char: a
1 retval:         return self._metadata
char: 

1 retval:         return self._metadata
2 retval:         return self._metadata
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: s
1 retval:     def s
char: e
1 retval:     def se
char: l
1 retval:     def sel
char: e
1 retval:     def sele
char: c
1 retval:     def selec
char: t
1 retval:     def select
char: (
1 retval:     def select(
char: s
1 retval:     def select(s
char: e
1 retval:     def select(se
char: l
1 retval:     def select(sel
char: f
1 retval:     def select(self
char: ,
1 retval:     def select(self,
char:  
1 retval:     def select(self, 
char: s
1 retval:     def select(self, s
char: q
1 retval:     def select(self, sq
char: l
1 retval:     def select(self, sql
char: =
1 retval:     def select(self, sql=
char: N
1 retval:     def select(self, sql=N
char: o
1 retval:     def select(self, sql=No
char: n
1 retval:     def select(self, sql=Non
char: e
1 retval:     def select(self, sql=None
char: ,
1 retval:     def select(self, sql=None,
char:  
1 retval:     def select(self, sql=None, 
char: f
1 retval:     def select(self, sql=None, f
char: i
1 retval:     def select(self, sql=None, fi
char: l
1 retval:     def select(self, sql=None, fil
char: e
1 retval:     def select(self, sql=None, file
char: n
1 retval:     def select(self, sql=None, filen
char: a
1 retval:     def select(self, sql=None, filena
char: m
1 retval:     def select(self, sql=None, filenam
char: e
1 retval:     def select(self, sql=None, filename
char: =
1 retval:     def select(self, sql=None, filename=
char: N
1 retval:     def select(self, sql=None, filename=N
char: o
1 retval:     def select(self, sql=None, filename=No
char: n
1 retval:     def select(self, sql=None, filename=Non
char: e
1 retval:     def select(self, sql=None, filename=None
char: ,
1 retval:     def select(self, sql=None, filename=None,
char:  
1 retval:     def select(self, sql=None, filename=None, 
char: *
1 retval:     def select(self, sql=None, filename=None, *
char: *
1 retval:     def select(self, sql=None, filename=None, **
char: k
1 retval:     def select(self, sql=None, filename=None, **k
char: w
1 retval:     def select(self, sql=None, filename=None, **kw
char: a
1 retval:     def select(self, sql=None, filename=None, **kwa
char: r
1 retval:     def select(self, sql=None, filename=None, **kwar
char: g
1 retval:     def select(self, sql=None, filename=None, **kwarg
char: s
1 retval:     def select(self, sql=None, filename=None, **kwargs
char: )
1 retval:     def select(self, sql=None, filename=None, **kwargs)
char: :
1 retval:     def select(self, sql=None, filename=None, **kwargs):
char: 

1 retval:     def select(self, sql=None, filename=None, **kwargs):
2 retval:     def select(self, sql=None, filename=None, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: c
1 retval:         c
char: a
1 retval:         ca
char: c
1 retval:         cac
char: h
1 retval:         cach
char: e
1 retval:         cache
char:  
1 retval:         cache 
char: =
1 retval:         cache =
char:  
1 retval:         cache = 
char: k
1 retval:         cache = k
char: w
1 retval:         cache = kw
char: a
1 retval:         cache = kwa
char: r
1 retval:         cache = kwar
char: g
1 retval:         cache = kwarg
char: s
1 retval:         cache = kwargs
char: .
1 retval:         cache = kwargs.
char: p
1 retval:         cache = kwargs.p
char: o
1 retval:         cache = kwargs.po
char: p
1 retval:         cache = kwargs.pop
char: (
1 retval:         cache = kwargs.pop(
char: '
1 retval:         cache = kwargs.pop('
char: c
1 retval:         cache = kwargs.pop('c
char: a
1 retval:         cache = kwargs.pop('ca
char: c
1 retval:         cache = kwargs.pop('cac
char: h
1 retval:         cache = kwargs.pop('cach
char: e
1 retval:         cache = kwargs.pop('cache
char: '
1 retval:         cache = kwargs.pop('cache'
char: ,
1 retval:         cache = kwargs.pop('cache',
char:  
1 retval:         cache = kwargs.pop('cache', 
char: F
1 retval:         cache = kwargs.pop('cache', F
char: a
1 retval:         cache = kwargs.pop('cache', Fa
char: l
1 retval:         cache = kwargs.pop('cache', Fal
char: s
1 retval:         cache = kwargs.pop('cache', Fals
char: e
1 retval:         cache = kwargs.pop('cache', False
char: )
1 retval:         cache = kwargs.pop('cache', False)
char: 

1 retval:         cache = kwargs.pop('cache', False)
2 retval:         cache = kwargs.pop('cache', False)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: =
1 retval:         sql =
char:  
1 retval:         sql = 
char: s
1 retval:         sql = s
char: e
1 retval:         sql = se
char: l
1 retval:         sql = sel
char: f
1 retval:         sql = self
char: .
1 retval:         sql = self.
char: _
1 retval:         sql = self._
char: _
1 retval:         sql = self.__
char: p
1 retval:         sql = self.__p
char: r
1 retval:         sql = self.__pr
char: e
1 retval:         sql = self.__pre
char: p
1 retval:         sql = self.__prep
char: a
1 retval:         sql = self.__prepa
char: r
1 retval:         sql = self.__prepar
char: e
1 retval:         sql = self.__prepare
char: (
1 retval:         sql = self.__prepare(
char: s
1 retval:         sql = self.__prepare(s
char: q
1 retval:         sql = self.__prepare(sq
char: l
1 retval:         sql = self.__prepare(sql
char: ,
1 retval:         sql = self.__prepare(sql,
char:  
1 retval:         sql = self.__prepare(sql, 
char: f
1 retval:         sql = self.__prepare(sql, f
char: i
1 retval:         sql = self.__prepare(sql, fi
char: l
1 retval:         sql = self.__prepare(sql, fil
char: e
1 retval:         sql = self.__prepare(sql, file
char: n
1 retval:         sql = self.__prepare(sql, filen
char: a
1 retval:         sql = self.__prepare(sql, filena
char: m
1 retval:         sql = self.__prepare(sql, filenam
char: e
1 retval:         sql = self.__prepare(sql, filename
char: )
1 retval:         sql = self.__prepare(sql, filename)
char: 

1 retval:         sql = self.__prepare(sql, filename)
2 retval:         sql = self.__prepare(sql, filename)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: s
1 retval:         return self._s
char: e
1 retval:         return self._se
char: l
1 retval:         return self._sel
char: e
1 retval:         return self._sele
char: c
1 retval:         return self._selec
char: t
1 retval:         return self._select
char: (
1 retval:         return self._select(
char: s
1 retval:         return self._select(s
char: q
1 retval:         return self._select(sq
char: l
1 retval:         return self._select(sql
char: ,
1 retval:         return self._select(sql,
char:  
1 retval:         return self._select(sql, 
char: k
1 retval:         return self._select(sql, k
char: w
1 retval:         return self._select(sql, kw
char: a
1 retval:         return self._select(sql, kwa
char: r
1 retval:         return self._select(sql, kwar
char: g
1 retval:         return self._select(sql, kwarg
char: s
1 retval:         return self._select(sql, kwargs
char: ,
1 retval:         return self._select(sql, kwargs,
char:  
1 retval:         return self._select(sql, kwargs, 
char: c
1 retval:         return self._select(sql, kwargs, c
char: a
1 retval:         return self._select(sql, kwargs, ca
char: c
1 retval:         return self._select(sql, kwargs, cac
char: h
1 retval:         return self._select(sql, kwargs, cach
char: e
1 retval:         return self._select(sql, kwargs, cache
char: =
1 retval:         return self._select(sql, kwargs, cache=
char: c
1 retval:         return self._select(sql, kwargs, cache=c
char: a
1 retval:         return self._select(sql, kwargs, cache=ca
char: c
1 retval:         return self._select(sql, kwargs, cache=cac
char: h
1 retval:         return self._select(sql, kwargs, cache=cach
char: e
1 retval:         return self._select(sql, kwargs, cache=cache
char: )
1 retval:         return self._select(sql, kwargs, cache=cache)
char: 

1 retval:         return self._select(sql, kwargs, cache=cache)
2 retval:         return self._select(sql, kwargs, cache=cache)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: q
1 retval:     @q
char: u
1 retval:     @qu
char: e
1 retval:     @que
char: r
1 retval:     @quer
char: y
1 retval:     @query
char: _
1 retval:     @query_
char: c
1 retval:     @query_c
char: a
1 retval:     @query_ca
char: c
1 retval:     @query_cac
char: h
1 retval:     @query_cach
char: e
1 retval:     @query_cache
char: d
1 retval:     @query_cached
char: 

1 retval:     @query_cached
2 retval:     @query_cached
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: s
1 retval:     def _s
char: e
1 retval:     def _se
char: l
1 retval:     def _sel
char: e
1 retval:     def _sele
char: c
1 retval:     def _selec
char: t
1 retval:     def _select
char: (
1 retval:     def _select(
char: s
1 retval:     def _select(s
char: e
1 retval:     def _select(se
char: l
1 retval:     def _select(sel
char: f
1 retval:     def _select(self
char: ,
1 retval:     def _select(self,
char:  
1 retval:     def _select(self, 
char: s
1 retval:     def _select(self, s
char: q
1 retval:     def _select(self, sq
char: l
1 retval:     def _select(self, sql
char: ,
1 retval:     def _select(self, sql,
char:  
1 retval:     def _select(self, sql, 
char: b
1 retval:     def _select(self, sql, b
char: i
1 retval:     def _select(self, sql, bi
char: n
1 retval:     def _select(self, sql, bin
char: d
1 retval:     def _select(self, sql, bind
char: i
1 retval:     def _select(self, sql, bindi
char: n
1 retval:     def _select(self, sql, bindin
char: g
1 retval:     def _select(self, sql, binding
char: s
1 retval:     def _select(self, sql, bindings
char: )
1 retval:     def _select(self, sql, bindings)
char: :
1 retval:     def _select(self, sql, bindings):
char: 

1 retval:     def _select(self, sql, bindings):
2 retval:     def _select(self, sql, bindings):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: _
1 retval:         return self.__
char: e
1 retval:         return self.__e
char: x
1 retval:         return self.__ex
char: e
1 retval:         return self.__exe
char: c
1 retval:         return self.__exec
char: u
1 retval:         return self.__execu
char: t
1 retval:         return self.__execut
char: e
1 retval:         return self.__execute
char: (
1 retval:         return self.__execute(
char: s
1 retval:         return self.__execute(s
char: q
1 retval:         return self.__execute(sq
char: l
1 retval:         return self.__execute(sql
char: ,
1 retval:         return self.__execute(sql,
char:  
1 retval:         return self.__execute(sql, 
char: b
1 retval:         return self.__execute(sql, b
char: i
1 retval:         return self.__execute(sql, bi
char: n
1 retval:         return self.__execute(sql, bin
char: d
1 retval:         return self.__execute(sql, bind
char: i
1 retval:         return self.__execute(sql, bindi
char: n
1 retval:         return self.__execute(sql, bindin
char: g
1 retval:         return self.__execute(sql, binding
char: s
1 retval:         return self.__execute(sql, bindings
char: )
1 retval:         return self.__execute(sql, bindings)
char: .
1 retval:         return self.__execute(sql, bindings).
char: f
1 retval:         return self.__execute(sql, bindings).f
char: e
1 retval:         return self.__execute(sql, bindings).fe
char: t
1 retval:         return self.__execute(sql, bindings).fet
char: c
1 retval:         return self.__execute(sql, bindings).fetc
char: h
1 retval:         return self.__execute(sql, bindings).fetch
char: a
1 retval:         return self.__execute(sql, bindings).fetcha
char: l
1 retval:         return self.__execute(sql, bindings).fetchal
char: l
1 retval:         return self.__execute(sql, bindings).fetchall
char: (
1 retval:         return self.__execute(sql, bindings).fetchall(
char: )
1 retval:         return self.__execute(sql, bindings).fetchall()
char: 

1 retval:         return self.__execute(sql, bindings).fetchall()
2 retval:         return self.__execute(sql, bindings).fetchall()
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: u
1 retval:     def u
char: n
1 retval:     def un
char: l
1 retval:     def unl
char: o
1 retval:     def unlo
char: a
1 retval:     def unloa
char: d
1 retval:     def unload
char: (
1 retval:     def unload(
char: s
1 retval:     def unload(s
char: e
1 retval:     def unload(se
char: l
1 retval:     def unload(sel
char: f
1 retval:     def unload(self
char: ,
1 retval:     def unload(self,
char:  
1 retval:     def unload(self, 
char: s
1 retval:     def unload(self, s
char: q
1 retval:     def unload(self, sq
char: l
1 retval:     def unload(self, sql
char: =
1 retval:     def unload(self, sql=
char: N
1 retval:     def unload(self, sql=N
char: o
1 retval:     def unload(self, sql=No
char: n
1 retval:     def unload(self, sql=Non
char: e
1 retval:     def unload(self, sql=None
char: ,
1 retval:     def unload(self, sql=None,
char:  
1 retval:     def unload(self, sql=None, 
char: f
1 retval:     def unload(self, sql=None, f
char: i
1 retval:     def unload(self, sql=None, fi
char: l
1 retval:     def unload(self, sql=None, fil
char: e
1 retval:     def unload(self, sql=None, file
char: n
1 retval:     def unload(self, sql=None, filen
char: a
1 retval:     def unload(self, sql=None, filena
char: m
1 retval:     def unload(self, sql=None, filenam
char: e
1 retval:     def unload(self, sql=None, filename
char: =
1 retval:     def unload(self, sql=None, filename=
char: N
1 retval:     def unload(self, sql=None, filename=N
char: o
1 retval:     def unload(self, sql=None, filename=No
char: n
1 retval:     def unload(self, sql=None, filename=Non
char: e
1 retval:     def unload(self, sql=None, filename=None
char: ,
1 retval:     def unload(self, sql=None, filename=None,
char:  
1 retval:     def unload(self, sql=None, filename=None, 
char: *
1 retval:     def unload(self, sql=None, filename=None, *
char: *
1 retval:     def unload(self, sql=None, filename=None, **
char: k
1 retval:     def unload(self, sql=None, filename=None, **k
char: w
1 retval:     def unload(self, sql=None, filename=None, **kw
char: a
1 retval:     def unload(self, sql=None, filename=None, **kwa
char: r
1 retval:     def unload(self, sql=None, filename=None, **kwar
char: g
1 retval:     def unload(self, sql=None, filename=None, **kwarg
char: s
1 retval:     def unload(self, sql=None, filename=None, **kwargs
char: )
1 retval:     def unload(self, sql=None, filename=None, **kwargs)
char: :
1 retval:     def unload(self, sql=None, filename=None, **kwargs):
char: 

1 retval:     def unload(self, sql=None, filename=None, **kwargs):
2 retval:     def unload(self, sql=None, filename=None, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: c
1 retval:         c
char: a
1 retval:         ca
char: c
1 retval:         cac
char: h
1 retval:         cach
char: e
1 retval:         cache
char:  
1 retval:         cache 
char: =
1 retval:         cache =
char:  
1 retval:         cache = 
char: k
1 retval:         cache = k
char: w
1 retval:         cache = kw
char: a
1 retval:         cache = kwa
char: r
1 retval:         cache = kwar
char: g
1 retval:         cache = kwarg
char: s
1 retval:         cache = kwargs
char: .
1 retval:         cache = kwargs.
char: p
1 retval:         cache = kwargs.p
char: o
1 retval:         cache = kwargs.po
char: p
1 retval:         cache = kwargs.pop
char: (
1 retval:         cache = kwargs.pop(
char: '
1 retval:         cache = kwargs.pop('
char: c
1 retval:         cache = kwargs.pop('c
char: a
1 retval:         cache = kwargs.pop('ca
char: c
1 retval:         cache = kwargs.pop('cac
char: h
1 retval:         cache = kwargs.pop('cach
char: e
1 retval:         cache = kwargs.pop('cache
char: '
1 retval:         cache = kwargs.pop('cache'
char: ,
1 retval:         cache = kwargs.pop('cache',
char:  
1 retval:         cache = kwargs.pop('cache', 
char: F
1 retval:         cache = kwargs.pop('cache', F
char: a
1 retval:         cache = kwargs.pop('cache', Fa
char: l
1 retval:         cache = kwargs.pop('cache', Fal
char: s
1 retval:         cache = kwargs.pop('cache', Fals
char: e
1 retval:         cache = kwargs.pop('cache', False
char: )
1 retval:         cache = kwargs.pop('cache', False)
char: 

1 retval:         cache = kwargs.pop('cache', False)
2 retval:         cache = kwargs.pop('cache', False)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: =
1 retval:         sql =
char:  
1 retval:         sql = 
char: s
1 retval:         sql = s
char: e
1 retval:         sql = se
char: l
1 retval:         sql = sel
char: f
1 retval:         sql = self
char: .
1 retval:         sql = self.
char: _
1 retval:         sql = self._
char: _
1 retval:         sql = self.__
char: p
1 retval:         sql = self.__p
char: r
1 retval:         sql = self.__pr
char: e
1 retval:         sql = self.__pre
char: p
1 retval:         sql = self.__prep
char: a
1 retval:         sql = self.__prepa
char: r
1 retval:         sql = self.__prepar
char: e
1 retval:         sql = self.__prepare
char: (
1 retval:         sql = self.__prepare(
char: s
1 retval:         sql = self.__prepare(s
char: q
1 retval:         sql = self.__prepare(sq
char: l
1 retval:         sql = self.__prepare(sql
char: ,
1 retval:         sql = self.__prepare(sql,
char:  
1 retval:         sql = self.__prepare(sql, 
char: f
1 retval:         sql = self.__prepare(sql, f
char: i
1 retval:         sql = self.__prepare(sql, fi
char: l
1 retval:         sql = self.__prepare(sql, fil
char: e
1 retval:         sql = self.__prepare(sql, file
char: n
1 retval:         sql = self.__prepare(sql, filen
char: a
1 retval:         sql = self.__prepare(sql, filena
char: m
1 retval:         sql = self.__prepare(sql, filenam
char: e
1 retval:         sql = self.__prepare(sql, filename
char: )
1 retval:         sql = self.__prepare(sql, filename)
char: 

1 retval:         sql = self.__prepare(sql, filename)
2 retval:         sql = self.__prepare(sql, filename)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: u
1 retval:         return self._u
char: n
1 retval:         return self._un
char: l
1 retval:         return self._unl
char: o
1 retval:         return self._unlo
char: a
1 retval:         return self._unloa
char: d
1 retval:         return self._unload
char: (
1 retval:         return self._unload(
char: s
1 retval:         return self._unload(s
char: q
1 retval:         return self._unload(sq
char: l
1 retval:         return self._unload(sql
char: ,
1 retval:         return self._unload(sql,
char:  
1 retval:         return self._unload(sql, 
char: k
1 retval:         return self._unload(sql, k
char: w
1 retval:         return self._unload(sql, kw
char: a
1 retval:         return self._unload(sql, kwa
char: r
1 retval:         return self._unload(sql, kwar
char: g
1 retval:         return self._unload(sql, kwarg
char: s
1 retval:         return self._unload(sql, kwargs
char: ,
1 retval:         return self._unload(sql, kwargs,
char:  
1 retval:         return self._unload(sql, kwargs, 
char: c
1 retval:         return self._unload(sql, kwargs, c
char: a
1 retval:         return self._unload(sql, kwargs, ca
char: c
1 retval:         return self._unload(sql, kwargs, cac
char: h
1 retval:         return self._unload(sql, kwargs, cach
char: e
1 retval:         return self._unload(sql, kwargs, cache
char: =
1 retval:         return self._unload(sql, kwargs, cache=
char: c
1 retval:         return self._unload(sql, kwargs, cache=c
char: a
1 retval:         return self._unload(sql, kwargs, cache=ca
char: c
1 retval:         return self._unload(sql, kwargs, cache=cac
char: h
1 retval:         return self._unload(sql, kwargs, cache=cach
char: e
1 retval:         return self._unload(sql, kwargs, cache=cache
char: )
1 retval:         return self._unload(sql, kwargs, cache=cache)
char: 

1 retval:         return self._unload(sql, kwargs, cache=cache)
2 retval:         return self._unload(sql, kwargs, cache=cache)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: 

1 retval:     
2 retval:     
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: q
1 retval:     @q
char: u
1 retval:     @qu
char: e
1 retval:     @que
char: r
1 retval:     @quer
char: y
1 retval:     @query
char: _
1 retval:     @query_
char: c
1 retval:     @query_c
char: a
1 retval:     @query_ca
char: c
1 retval:     @query_cac
char: h
1 retval:     @query_cach
char: e
1 retval:     @query_cache
char: d
1 retval:     @query_cached
char: 

1 retval:     @query_cached
2 retval:     @query_cached
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: u
1 retval:     def _u
char: n
1 retval:     def _un
char: l
1 retval:     def _unl
char: o
1 retval:     def _unlo
char: a
1 retval:     def _unloa
char: d
1 retval:     def _unload
char: (
1 retval:     def _unload(
char: s
1 retval:     def _unload(s
char: e
1 retval:     def _unload(se
char: l
1 retval:     def _unload(sel
char: f
1 retval:     def _unload(self
char: ,
1 retval:     def _unload(self,
char:  
1 retval:     def _unload(self, 
char: s
1 retval:     def _unload(self, s
char: q
1 retval:     def _unload(self, sq
char: l
1 retval:     def _unload(self, sql
char: ,
1 retval:     def _unload(self, sql,
char:  
1 retval:     def _unload(self, sql, 
char: b
1 retval:     def _unload(self, sql, b
char: i
1 retval:     def _unload(self, sql, bi
char: n
1 retval:     def _unload(self, sql, bin
char: d
1 retval:     def _unload(self, sql, bind
char: i
1 retval:     def _unload(self, sql, bindi
char: n
1 retval:     def _unload(self, sql, bindin
char: g
1 retval:     def _unload(self, sql, binding
char: s
1 retval:     def _unload(self, sql, bindings
char: )
1 retval:     def _unload(self, sql, bindings)
char: :
1 retval:     def _unload(self, sql, bindings):
char: 

1 retval:     def _unload(self, sql, bindings):
2 retval:     def _unload(self, sql, bindings):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: k
1 retval:         k
char: e
1 retval:         ke
char: y
1 retval:         key
char:  
1 retval:         key 
char: =
1 retval:         key =
char:  
1 retval:         key = 
char: h
1 retval:         key = h
char: a
1 retval:         key = ha
char: s
1 retval:         key = has
char: h
1 retval:         key = hash
char: l
1 retval:         key = hashl
char: i
1 retval:         key = hashli
char: b
1 retval:         key = hashlib
char: .
1 retval:         key = hashlib.
char: s
1 retval:         key = hashlib.s
char: h
1 retval:         key = hashlib.sh
char: a
1 retval:         key = hashlib.sha
char: 1
1 retval:         key = hashlib.sha1
char: (
1 retval:         key = hashlib.sha1(
char: s
1 retval:         key = hashlib.sha1(s
char: t
1 retval:         key = hashlib.sha1(st
char: r
1 retval:         key = hashlib.sha1(str
char: (
1 retval:         key = hashlib.sha1(str(
char: s
1 retval:         key = hashlib.sha1(str(s
char: q
1 retval:         key = hashlib.sha1(str(sq
char: l
1 retval:         key = hashlib.sha1(str(sql
char: )
1 retval:         key = hashlib.sha1(str(sql)
char: .
1 retval:         key = hashlib.sha1(str(sql).
char: e
1 retval:         key = hashlib.sha1(str(sql).e
char: n
1 retval:         key = hashlib.sha1(str(sql).en
char: c
1 retval:         key = hashlib.sha1(str(sql).enc
char: o
1 retval:         key = hashlib.sha1(str(sql).enco
char: d
1 retval:         key = hashlib.sha1(str(sql).encod
char: e
1 retval:         key = hashlib.sha1(str(sql).encode
char: (
1 retval:         key = hashlib.sha1(str(sql).encode(
char: '
1 retval:         key = hashlib.sha1(str(sql).encode('
char: u
1 retval:         key = hashlib.sha1(str(sql).encode('u
char: t
1 retval:         key = hashlib.sha1(str(sql).encode('ut
char: f
1 retval:         key = hashlib.sha1(str(sql).encode('utf
char: -
1 retval:         key = hashlib.sha1(str(sql).encode('utf-
char: 8
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8
char: '
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8'
char: )
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')
char: )
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8'))
char: .
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).
char: h
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).h
char: e
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).he
char: x
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hex
char: d
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexd
char: i
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdi
char: g
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdig
char: e
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdige
char: s
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdiges
char: t
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest
char: (
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest(
char: )
1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest()
char: 

1 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest()
2 retval:         key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest()
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: m
1 retval:         m
char: a
1 retval:         ma
char: t
1 retval:         mat
char: c
1 retval:         matc
char: h
1 retval:         match
char:  
1 retval:         match 
char: =
1 retval:         match =
char:  
1 retval:         match = 
char: r
1 retval:         match = r
char: e
1 retval:         match = re
char: .
1 retval:         match = re.
char: m
1 retval:         match = re.m
char: a
1 retval:         match = re.ma
char: t
1 retval:         match = re.mat
char: c
1 retval:         match = re.matc
char: h
1 retval:         match = re.match
char: (
1 retval:         match = re.match(
char: r
1 retval:         match = re.match(r
char: '
1 retval:         match = re.match(r'
char: .
1 retval:         match = re.match(r'.
char: *
1 retval:         match = re.match(r'.*
char: ?
1 retval:         match = re.match(r'.*?
char: s
1 retval:         match = re.match(r'.*?s
char: e
1 retval:         match = re.match(r'.*?se
char: l
1 retval:         match = re.match(r'.*?sel
char: e
1 retval:         match = re.match(r'.*?sele
char: c
1 retval:         match = re.match(r'.*?selec
char: t
1 retval:         match = re.match(r'.*?select
char: \
1 retval:         match = re.match(r'.*?select\
char: s
1 retval:         match = re.match(r'.*?select\s
char: (
1 retval:         match = re.match(r'.*?select\s(
char: .
1 retval:         match = re.match(r'.*?select\s(.
char: *
1 retval:         match = re.match(r'.*?select\s(.*
char: )
1 retval:         match = re.match(r'.*?select\s(.*)
char: f
1 retval:         match = re.match(r'.*?select\s(.*)f
char: r
1 retval:         match = re.match(r'.*?select\s(.*)fr
char: o
1 retval:         match = re.match(r'.*?select\s(.*)fro
char: m
1 retval:         match = re.match(r'.*?select\s(.*)from
char: .
1 retval:         match = re.match(r'.*?select\s(.*)from.
char: *
1 retval:         match = re.match(r'.*?select\s(.*)from.*
char: '
1 retval:         match = re.match(r'.*?select\s(.*)from.*'
char: ,
1 retval:         match = re.match(r'.*?select\s(.*)from.*',
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', 
char: s
1 retval:         match = re.match(r'.*?select\s(.*)from.*', s
char: q
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sq
char: l
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql
char: ,
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql,
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, 
char: f
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, f
char: l
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, fl
char: a
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, fla
char: g
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flag
char: s
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags
char: =
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=
char: r
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=r
char: e
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re
char: .
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.
char: I
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.I
char: G
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IG
char: N
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGN
char: O
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNO
char: R
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNOR
char: E
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORE
char: C
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNOREC
char: A
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECA
char: S
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECAS
char: E
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE 
char: |
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE |
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | 
char: r
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | r
char: e
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re
char: .
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.
char: U
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.U
char: N
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UN
char: I
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNI
char: C
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNIC
char: O
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICO
char: D
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICOD
char: E
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE 
char: |
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE |
char:  
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | 
char: r
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | r
char: e
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re
char: .
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.
char: D
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.D
char: O
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DO
char: T
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOT
char: A
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTA
char: L
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTAL
char: L
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL
char: )
1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
char: 

1 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
2 retval:         match = re.match(r'.*?select\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: m
1 retval:         if m
char: a
1 retval:         if ma
char: t
1 retval:         if mat
char: c
1 retval:         if matc
char: h
1 retval:         if match
char: :
1 retval:         if match:
char: 

1 retval:         if match:
2 retval:         if match:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: c
1 retval:             c
char: o
1 retval:             co
char: l
1 retval:             col
char: u
1 retval:             colu
char: m
1 retval:             colum
char: n
1 retval:             column
char: s
1 retval:             columns
char:  
1 retval:             columns 
char: =
1 retval:             columns =
char:  
1 retval:             columns = 
char: [
1 retval:             columns = [
char: ]
1 retval:             columns = []
char: 

1 retval:             columns = []
2 retval:             columns = []
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: n
1 retval:             n
char: e
1 retval:             ne
char: s
1 retval:             nes
char: t
1 retval:             nest
char: e
1 retval:             neste
char: d
1 retval:             nested
char:  
1 retval:             nested 
char: =
1 retval:             nested =
char:  
1 retval:             nested = 
char: 0
1 retval:             nested = 0
char: 

1 retval:             nested = 0
2 retval:             nested = 0
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: p
1 retval:             p
char: o
1 retval:             po
char: t
1 retval:             pot
char: e
1 retval:             pote
char: n
1 retval:             poten
char: t
1 retval:             potent
char: i
1 retval:             potenti
char: a
1 retval:             potentia
char: l
1 retval:             potential
char:  
1 retval:             potential 
char: =
1 retval:             potential =
char:  
1 retval:             potential = 
char: m
1 retval:             potential = m
char: a
1 retval:             potential = ma
char: t
1 retval:             potential = mat
char: c
1 retval:             potential = matc
char: h
1 retval:             potential = match
char: [
1 retval:             potential = match[
char: 1
1 retval:             potential = match[1
char: ]
1 retval:             potential = match[1]
char: .
1 retval:             potential = match[1].
char: s
1 retval:             potential = match[1].s
char: p
1 retval:             potential = match[1].sp
char: l
1 retval:             potential = match[1].spl
char: i
1 retval:             potential = match[1].spli
char: t
1 retval:             potential = match[1].split
char: (
1 retval:             potential = match[1].split(
char: '
1 retval:             potential = match[1].split('
char: ,
1 retval:             potential = match[1].split(',
char: '
1 retval:             potential = match[1].split(','
char: )
1 retval:             potential = match[1].split(',')
char: 

1 retval:             potential = match[1].split(',')
2 retval:             potential = match[1].split(',')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: o
1 retval:             fo
char: r
1 retval:             for
char:  
1 retval:             for 
char: c
1 retval:             for c
char: o
1 retval:             for co
char: l
1 retval:             for col
char: u
1 retval:             for colu
char: m
1 retval:             for colum
char: n
1 retval:             for column
char:  
1 retval:             for column 
char: i
1 retval:             for column i
char: n
1 retval:             for column in
char:  
1 retval:             for column in 
char: p
1 retval:             for column in p
char: o
1 retval:             for column in po
char: t
1 retval:             for column in pot
char: e
1 retval:             for column in pote
char: n
1 retval:             for column in poten
char: t
1 retval:             for column in potent
char: i
1 retval:             for column in potenti
char: a
1 retval:             for column in potentia
char: l
1 retval:             for column in potential
char: :
1 retval:             for column in potential:
char: 

1 retval:             for column in potential:
2 retval:             for column in potential:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: s
1 retval:                 nes
char: t
1 retval:                 nest
char: e
1 retval:                 neste
char: d
1 retval:                 nested
char:  
1 retval:                 nested 
char: +
1 retval:                 nested +
char: =
1 retval:                 nested +=
char:  
1 retval:                 nested += 
char: c
1 retval:                 nested += c
char: o
1 retval:                 nested += co
char: l
1 retval:                 nested += col
char: u
1 retval:                 nested += colu
char: m
1 retval:                 nested += colum
char: n
1 retval:                 nested += column
char: .
1 retval:                 nested += column.
char: c
1 retval:                 nested += column.c
char: o
1 retval:                 nested += column.co
char: u
1 retval:                 nested += column.cou
char: n
1 retval:                 nested += column.coun
char: t
1 retval:                 nested += column.count
char: (
1 retval:                 nested += column.count(
char: '
1 retval:                 nested += column.count('
char: (
1 retval:                 nested += column.count('(
char: '
1 retval:                 nested += column.count('('
char: )
1 retval:                 nested += column.count('(')
char: 

1 retval:                 nested += column.count('(')
2 retval:                 nested += column.count('(')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: n
1 retval:                 n
char: e
1 retval:                 ne
char: s
1 retval:                 nes
char: t
1 retval:                 nest
char: e
1 retval:                 neste
char: d
1 retval:                 nested
char:  
1 retval:                 nested 
char: -
1 retval:                 nested -
char: =
1 retval:                 nested -=
char:  
1 retval:                 nested -= 
char: c
1 retval:                 nested -= c
char: o
1 retval:                 nested -= co
char: l
1 retval:                 nested -= col
char: u
1 retval:                 nested -= colu
char: m
1 retval:                 nested -= colum
char: n
1 retval:                 nested -= column
char: .
1 retval:                 nested -= column.
char: c
1 retval:                 nested -= column.c
char: o
1 retval:                 nested -= column.co
char: u
1 retval:                 nested -= column.cou
char: n
1 retval:                 nested -= column.coun
char: t
1 retval:                 nested -= column.count
char: (
1 retval:                 nested -= column.count(
char: '
1 retval:                 nested -= column.count('
char: )
1 retval:                 nested -= column.count(')
char: '
1 retval:                 nested -= column.count(')'
char: )
1 retval:                 nested -= column.count(')')
char: 

1 retval:                 nested -= column.count(')')
2 retval:                 nested -= column.count(')')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: i
1 retval:                 i
char: f
1 retval:                 if
char:  
1 retval:                 if 
char: n
1 retval:                 if n
char: e
1 retval:                 if ne
char: s
1 retval:                 if nes
char: t
1 retval:                 if nest
char: e
1 retval:                 if neste
char: d
1 retval:                 if nested
char:  
1 retval:                 if nested 
char: =
1 retval:                 if nested =
char: =
1 retval:                 if nested ==
char:  
1 retval:                 if nested == 
char: 0
1 retval:                 if nested == 0
char: :
1 retval:                 if nested == 0:
char: 

1 retval:                 if nested == 0:
2 retval:                 if nested == 0:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: c
1 retval:                     c
char: o
1 retval:                     co
char: l
1 retval:                     col
char: u
1 retval:                     colu
char: m
1 retval:                     colum
char: n
1 retval:                     column
char: s
1 retval:                     columns
char: .
1 retval:                     columns.
char: a
1 retval:                     columns.a
char: p
1 retval:                     columns.ap
char: p
1 retval:                     columns.app
char: e
1 retval:                     columns.appe
char: n
1 retval:                     columns.appen
char: d
1 retval:                     columns.append
char: (
1 retval:                     columns.append(
char: c
1 retval:                     columns.append(c
char: o
1 retval:                     columns.append(co
char: l
1 retval:                     columns.append(col
char: u
1 retval:                     columns.append(colu
char: m
1 retval:                     columns.append(colum
char: n
1 retval:                     columns.append(column
char: .
1 retval:                     columns.append(column.
char: s
1 retval:                     columns.append(column.s
char: p
1 retval:                     columns.append(column.sp
char: l
1 retval:                     columns.append(column.spl
char: i
1 retval:                     columns.append(column.spli
char: t
1 retval:                     columns.append(column.split
char: (
1 retval:                     columns.append(column.split(
char: )
1 retval:                     columns.append(column.split()
char: [
1 retval:                     columns.append(column.split()[
char: -
1 retval:                     columns.append(column.split()[-
char: 1
1 retval:                     columns.append(column.split()[-1
char: ]
1 retval:                     columns.append(column.split()[-1]
char: .
1 retval:                     columns.append(column.split()[-1].
char: s
1 retval:                     columns.append(column.split()[-1].s
char: p
1 retval:                     columns.append(column.split()[-1].sp
char: l
1 retval:                     columns.append(column.split()[-1].spl
char: i
1 retval:                     columns.append(column.split()[-1].spli
char: t
1 retval:                     columns.append(column.split()[-1].split
char: (
1 retval:                     columns.append(column.split()[-1].split(
char: '
1 retval:                     columns.append(column.split()[-1].split('
char: .
1 retval:                     columns.append(column.split()[-1].split('.
char: '
1 retval:                     columns.append(column.split()[-1].split('.'
char: )
1 retval:                     columns.append(column.split()[-1].split('.')
char: [
1 retval:                     columns.append(column.split()[-1].split('.')[
char: -
1 retval:                     columns.append(column.split()[-1].split('.')[-
char: 1
1 retval:                     columns.append(column.split()[-1].split('.')[-1
char: ]
1 retval:                     columns.append(column.split()[-1].split('.')[-1]
char: .
1 retval:                     columns.append(column.split()[-1].split('.')[-1].
char: s
1 retval:                     columns.append(column.split()[-1].split('.')[-1].s
char: t
1 retval:                     columns.append(column.split()[-1].split('.')[-1].st
char: r
1 retval:                     columns.append(column.split()[-1].split('.')[-1].str
char: i
1 retval:                     columns.append(column.split()[-1].split('.')[-1].stri
char: p
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip
char: (
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip(
char: )
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip()
char: )
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
char: 

1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
2 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: e
1 retval:                 e
char: l
1 retval:                 el
char: i
1 retval:                 eli
char: f
1 retval:                 elif
char:  
1 retval:                 elif 
char: c
1 retval:                 elif c
char: o
1 retval:                 elif co
char: l
1 retval:                 elif col
char: u
1 retval:                 elif colu
char: m
1 retval:                 elif colum
char: n
1 retval:                 elif column
char:  
1 retval:                 elif column 
char: =
1 retval:                 elif column =
char: =
1 retval:                 elif column ==
char:  
1 retval:                 elif column == 
char: p
1 retval:                 elif column == p
char: o
1 retval:                 elif column == po
char: t
1 retval:                 elif column == pot
char: e
1 retval:                 elif column == pote
char: n
1 retval:                 elif column == poten
char: t
1 retval:                 elif column == potent
char: i
1 retval:                 elif column == potenti
char: a
1 retval:                 elif column == potentia
char: l
1 retval:                 elif column == potential
char: [
1 retval:                 elif column == potential[
char: -
1 retval:                 elif column == potential[-
char: 1
1 retval:                 elif column == potential[-1
char: ]
1 retval:                 elif column == potential[-1]
char: :
1 retval:                 elif column == potential[-1]:
char: 

1 retval:                 elif column == potential[-1]:
2 retval:                 elif column == potential[-1]:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: c
1 retval:                     c
char: o
1 retval:                     co
char: l
1 retval:                     col
char: u
1 retval:                     colu
char: m
1 retval:                     colum
char: n
1 retval:                     column
char:  
1 retval:                     column 
char: =
1 retval:                     column =
char:  
1 retval:                     column = 
char: r
1 retval:                     column = r
char: e
1 retval:                     column = re
char: .
1 retval:                     column = re.
char: s
1 retval:                     column = re.s
char: p
1 retval:                     column = re.sp
char: l
1 retval:                     column = re.spl
char: i
1 retval:                     column = re.spli
char: t
1 retval:                     column = re.split
char: (
1 retval:                     column = re.split(
char: '
1 retval:                     column = re.split('
char: f
1 retval:                     column = re.split('f
char: r
1 retval:                     column = re.split('fr
char: o
1 retval:                     column = re.split('fro
char: m
1 retval:                     column = re.split('from
char: '
1 retval:                     column = re.split('from'
char: ,
1 retval:                     column = re.split('from',
char:  
1 retval:                     column = re.split('from', 
char: c
1 retval:                     column = re.split('from', c
char: o
1 retval:                     column = re.split('from', co
char: l
1 retval:                     column = re.split('from', col
char: u
1 retval:                     column = re.split('from', colu
char: m
1 retval:                     column = re.split('from', colum
char: n
1 retval:                     column = re.split('from', column
char: ,
1 retval:                     column = re.split('from', column,
char:  
1 retval:                     column = re.split('from', column, 
char: f
1 retval:                     column = re.split('from', column, f
char: l
1 retval:                     column = re.split('from', column, fl
char: a
1 retval:                     column = re.split('from', column, fla
char: g
1 retval:                     column = re.split('from', column, flag
char: s
1 retval:                     column = re.split('from', column, flags
char: =
1 retval:                     column = re.split('from', column, flags=
char: r
1 retval:                     column = re.split('from', column, flags=r
char: e
1 retval:                     column = re.split('from', column, flags=re
char: .
1 retval:                     column = re.split('from', column, flags=re.
char: I
1 retval:                     column = re.split('from', column, flags=re.I
char: G
1 retval:                     column = re.split('from', column, flags=re.IG
char: N
1 retval:                     column = re.split('from', column, flags=re.IGN
char: O
1 retval:                     column = re.split('from', column, flags=re.IGNO
char: R
1 retval:                     column = re.split('from', column, flags=re.IGNOR
char: E
1 retval:                     column = re.split('from', column, flags=re.IGNORE
char: C
1 retval:                     column = re.split('from', column, flags=re.IGNOREC
char: A
1 retval:                     column = re.split('from', column, flags=re.IGNORECA
char: S
1 retval:                     column = re.split('from', column, flags=re.IGNORECAS
char: E
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE
char: )
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)
char: [
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[
char: 0
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0
char: ]
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0]
char: .
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].
char: s
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].s
char: t
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].st
char: r
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].str
char: i
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].stri
char: p
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].strip
char: (
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].strip(
char: )
1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].strip()
char: 

1 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].strip()
2 retval:                     column = re.split('from', column, flags=re.IGNORECASE)[0].strip()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: c
1 retval:                     c
char: o
1 retval:                     co
char: l
1 retval:                     col
char: u
1 retval:                     colu
char: m
1 retval:                     colum
char: n
1 retval:                     column
char: s
1 retval:                     columns
char: .
1 retval:                     columns.
char: a
1 retval:                     columns.a
char: p
1 retval:                     columns.ap
char: p
1 retval:                     columns.app
char: e
1 retval:                     columns.appe
char: n
1 retval:                     columns.appen
char: d
1 retval:                     columns.append
char: (
1 retval:                     columns.append(
char: c
1 retval:                     columns.append(c
char: o
1 retval:                     columns.append(co
char: l
1 retval:                     columns.append(col
char: u
1 retval:                     columns.append(colu
char: m
1 retval:                     columns.append(colum
char: n
1 retval:                     columns.append(column
char: .
1 retval:                     columns.append(column.
char: s
1 retval:                     columns.append(column.s
char: p
1 retval:                     columns.append(column.sp
char: l
1 retval:                     columns.append(column.spl
char: i
1 retval:                     columns.append(column.spli
char: t
1 retval:                     columns.append(column.split
char: (
1 retval:                     columns.append(column.split(
char: )
1 retval:                     columns.append(column.split()
char: [
1 retval:                     columns.append(column.split()[
char: -
1 retval:                     columns.append(column.split()[-
char: 1
1 retval:                     columns.append(column.split()[-1
char: ]
1 retval:                     columns.append(column.split()[-1]
char: .
1 retval:                     columns.append(column.split()[-1].
char: s
1 retval:                     columns.append(column.split()[-1].s
char: p
1 retval:                     columns.append(column.split()[-1].sp
char: l
1 retval:                     columns.append(column.split()[-1].spl
char: i
1 retval:                     columns.append(column.split()[-1].spli
char: t
1 retval:                     columns.append(column.split()[-1].split
char: (
1 retval:                     columns.append(column.split()[-1].split(
char: '
1 retval:                     columns.append(column.split()[-1].split('
char: .
1 retval:                     columns.append(column.split()[-1].split('.
char: '
1 retval:                     columns.append(column.split()[-1].split('.'
char: )
1 retval:                     columns.append(column.split()[-1].split('.')
char: [
1 retval:                     columns.append(column.split()[-1].split('.')[
char: -
1 retval:                     columns.append(column.split()[-1].split('.')[-
char: 1
1 retval:                     columns.append(column.split()[-1].split('.')[-1
char: ]
1 retval:                     columns.append(column.split()[-1].split('.')[-1]
char: .
1 retval:                     columns.append(column.split()[-1].split('.')[-1].
char: s
1 retval:                     columns.append(column.split()[-1].split('.')[-1].s
char: t
1 retval:                     columns.append(column.split()[-1].split('.')[-1].st
char: r
1 retval:                     columns.append(column.split()[-1].split('.')[-1].str
char: i
1 retval:                     columns.append(column.split()[-1].split('.')[-1].stri
char: p
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip
char: (
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip(
char: )
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip()
char: )
1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
char: 

1 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
2 retval:                     columns.append(column.split()[-1].split('.')[-1].strip())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: e
1 retval:         e
char: l
1 retval:         el
char: s
1 retval:         els
char: e
1 retval:         else
char: :
1 retval:         else:
char: 

1 retval:         else:
2 retval:         else:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: c
1 retval:             c
char: o
1 retval:             co
char: l
1 retval:             col
char: u
1 retval:             colu
char: m
1 retval:             colum
char: n
1 retval:             column
char: s
1 retval:             columns
char:  
1 retval:             columns 
char: =
1 retval:             columns =
char:  
1 retval:             columns = 
char: [
1 retval:             columns = [
char: ]
1 retval:             columns = []
char: 

1 retval:             columns = []
2 retval:             columns = []
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: l
1 retval:         l
char: o
1 retval:         lo
char: g
1 retval:         log
char: g
1 retval:         logg
char: e
1 retval:         logge
char: r
1 retval:         logger
char: .
1 retval:         logger.
char: w
1 retval:         logger.w
char: a
1 retval:         logger.wa
char: r
1 retval:         logger.war
char: n
1 retval:         logger.warn
char: i
1 retval:         logger.warni
char: n
1 retval:         logger.warnin
char: g
1 retval:         logger.warning
char: (
1 retval:         logger.warning(
char: "
1 retval:         logger.warning("
char: R
1 retval:         logger.warning("R
char: e
1 retval:         logger.warning("Re
char: d
1 retval:         logger.warning("Red
char: s
1 retval:         logger.warning("Reds
char: h
1 retval:         logger.warning("Redsh
char: i
1 retval:         logger.warning("Redshi
char: f
1 retval:         logger.warning("Redshif
char: t
1 retval:         logger.warning("Redshift
char:  
1 retval:         logger.warning("Redshift 
char: u
1 retval:         logger.warning("Redshift u
char: n
1 retval:         logger.warning("Redshift un
char: l
1 retval:         logger.warning("Redshift unl
char: o
1 retval:         logger.warning("Redshift unlo
char: a
1 retval:         logger.warning("Redshift unloa
char: d
1 retval:         logger.warning("Redshift unload
char:  
1 retval:         logger.warning("Redshift unload 
char: r
1 retval:         logger.warning("Redshift unload r
char: e
1 retval:         logger.warning("Redshift unload re
char: q
1 retval:         logger.warning("Redshift unload req
char: u
1 retval:         logger.warning("Redshift unload requ
char: i
1 retval:         logger.warning("Redshift unload requi
char: r
1 retval:         logger.warning("Redshift unload requir
char: e
1 retval:         logger.warning("Redshift unload require
char: s
1 retval:         logger.warning("Redshift unload requires
char:  
1 retval:         logger.warning("Redshift unload requires 
char: p
1 retval:         logger.warning("Redshift unload requires p
char: o
1 retval:         logger.warning("Redshift unload requires po
char: o
1 retval:         logger.warning("Redshift unload requires poo
char: r
1 retval:         logger.warning("Redshift unload requires poor
char: l
1 retval:         logger.warning("Redshift unload requires poorl
char: y
1 retval:         logger.warning("Redshift unload requires poorly
char:  
1 retval:         logger.warning("Redshift unload requires poorly 
char: p
1 retval:         logger.warning("Redshift unload requires poorly p
char: a
1 retval:         logger.warning("Redshift unload requires poorly pa
char: r
1 retval:         logger.warning("Redshift unload requires poorly par
char: s
1 retval:         logger.warning("Redshift unload requires poorly pars
char: i
1 retval:         logger.warning("Redshift unload requires poorly parsi
char: n
1 retval:         logger.warning("Redshift unload requires poorly parsin
char: g
1 retval:         logger.warning("Redshift unload requires poorly parsing
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing 
char: c
1 retval:         logger.warning("Redshift unload requires poorly parsing c
char: o
1 retval:         logger.warning("Redshift unload requires poorly parsing co
char: l
1 retval:         logger.warning("Redshift unload requires poorly parsing col
char: u
1 retval:         logger.warning("Redshift unload requires poorly parsing colu
char: m
1 retval:         logger.warning("Redshift unload requires poorly parsing colum
char: n
1 retval:         logger.warning("Redshift unload requires poorly parsing column
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing column 
char: n
1 retval:         logger.warning("Redshift unload requires poorly parsing column n
char: a
1 retval:         logger.warning("Redshift unload requires poorly parsing column na
char: m
1 retval:         logger.warning("Redshift unload requires poorly parsing column nam
char: e
1 retval:         logger.warning("Redshift unload requires poorly parsing column name
char: s
1 retval:         logger.warning("Redshift unload requires poorly parsing column names
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing column names 
char: f
1 retval:         logger.warning("Redshift unload requires poorly parsing column names f
char: r
1 retval:         logger.warning("Redshift unload requires poorly parsing column names fr
char: o
1 retval:         logger.warning("Redshift unload requires poorly parsing column names fro
char: m
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from 
char: s
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from s
char: q
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sq
char: l
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql
char: ,
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql,
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, 
char: f
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, f
char: o
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, fo
char: u
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, fou
char: n
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, foun
char: d
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found
char: :
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found:
char:  
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: 
char: {
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {
char: }
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}
char: "
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}"
char: .
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".
char: f
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".f
char: o
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".fo
char: r
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".for
char: m
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".form
char: a
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".forma
char: t
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format
char: (
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(
char: c
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(c
char: o
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(co
char: l
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(col
char: u
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(colu
char: m
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(colum
char: n
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(column
char: s
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns
char: )
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns)
char: )
1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns))
char: 

1 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns))
2 retval:         logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns))
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: =
1 retval:         sql =
char:  
1 retval:         sql = 
char: "
1 retval:         sql = "
char: U
1 retval:         sql = "U
char: N
1 retval:         sql = "UN
char: L
1 retval:         sql = "UNL
char: O
1 retval:         sql = "UNLO
char: A
1 retval:         sql = "UNLOA
char: D
1 retval:         sql = "UNLOAD
char:  
1 retval:         sql = "UNLOAD 
char: (
1 retval:         sql = "UNLOAD (
char: '
1 retval:         sql = "UNLOAD ('
char: "
1 retval:         sql = "UNLOAD ('"
char:  
1 retval:         sql = "UNLOAD ('" 
char: +
1 retval:         sql = "UNLOAD ('" +
char:  
1 retval:         sql = "UNLOAD ('" + 
char: s
1 retval:         sql = "UNLOAD ('" + s
char: q
1 retval:         sql = "UNLOAD ('" + sq
char: l
1 retval:         sql = "UNLOAD ('" + sql
char: .
1 retval:         sql = "UNLOAD ('" + sql.
char: r
1 retval:         sql = "UNLOAD ('" + sql.r
char: e
1 retval:         sql = "UNLOAD ('" + sql.re
char: p
1 retval:         sql = "UNLOAD ('" + sql.rep
char: l
1 retval:         sql = "UNLOAD ('" + sql.repl
char: a
1 retval:         sql = "UNLOAD ('" + sql.repla
char: c
1 retval:         sql = "UNLOAD ('" + sql.replac
char: e
1 retval:         sql = "UNLOAD ('" + sql.replace
char: (
1 retval:         sql = "UNLOAD ('" + sql.replace(
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\'
char: ,
1 retval:         sql = "UNLOAD ('" + sql.replace('\\',
char:  
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', 
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\'
char: )
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\')
char: .
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').
char: r
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').r
char: e
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').re
char: p
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').rep
char: l
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').repl
char: a
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').repla
char: c
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replac
char: e
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace
char: (
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace(
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'"
char: ,
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'",
char:  
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", 
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\
char: \
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'"
char: )
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'")
char:  
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") 
char: +
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") +
char:  
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + 
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "
char: '
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "'
char: )
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "')
char:  
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "') 
char: "
1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "') "
char: 

1 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "') "
2 retval:         sql = "UNLOAD ('" + sql.replace('\\', '\\\\').replace("'", "\\'") + "') "
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: +
1 retval:         sql +
char: =
1 retval:         sql +=
char:  
1 retval:         sql += 
char: "
1 retval:         sql += "
char: T
1 retval:         sql += "T
char: O
1 retval:         sql += "TO
char:  
1 retval:         sql += "TO 
char: '
1 retval:         sql += "TO '
char: s
1 retval:         sql += "TO 's
char: 3
1 retval:         sql += "TO 's3
char: :
1 retval:         sql += "TO 's3:
char: /
1 retval:         sql += "TO 's3:/
char: /
1 retval:         sql += "TO 's3://
char: "
1 retval:         sql += "TO 's3://"
char:  
1 retval:         sql += "TO 's3://" 
char: +
1 retval:         sql += "TO 's3://" +
char:  
1 retval:         sql += "TO 's3://" + 
char: o
1 retval:         sql += "TO 's3://" + o
char: s
1 retval:         sql += "TO 's3://" + os
char: .
1 retval:         sql += "TO 's3://" + os.
char: p
1 retval:         sql += "TO 's3://" + os.p
char: a
1 retval:         sql += "TO 's3://" + os.pa
char: t
1 retval:         sql += "TO 's3://" + os.pat
char: h
1 retval:         sql += "TO 's3://" + os.path
char: .
1 retval:         sql += "TO 's3://" + os.path.
char: j
1 retval:         sql += "TO 's3://" + os.path.j
char: o
1 retval:         sql += "TO 's3://" + os.path.jo
char: i
1 retval:         sql += "TO 's3://" + os.path.joi
char: n
1 retval:         sql += "TO 's3://" + os.path.join
char: (
1 retval:         sql += "TO 's3://" + os.path.join(
char: 

1 retval:         sql += "TO 's3://" + os.path.join(
2 retval:         sql += "TO 's3://" + os.path.join(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: r
1 retval:             lor
char: e
1 retval:             lore
char: .
1 retval:             lore.
char: i
1 retval:             lore.i
char: o
1 retval:             lore.io
char: .
1 retval:             lore.io.
char: b
1 retval:             lore.io.b
char: u
1 retval:             lore.io.bu
char: c
1 retval:             lore.io.buc
char: k
1 retval:             lore.io.buck
char: e
1 retval:             lore.io.bucke
char: t
1 retval:             lore.io.bucket
char: .
1 retval:             lore.io.bucket.
char: n
1 retval:             lore.io.bucket.n
char: a
1 retval:             lore.io.bucket.na
char: m
1 retval:             lore.io.bucket.nam
char: e
1 retval:             lore.io.bucket.name
char: ,
1 retval:             lore.io.bucket.name,
char: 

1 retval:             lore.io.bucket.name,
2 retval:             lore.io.bucket.name,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: U
1 retval:             self.U
char: N
1 retval:             self.UN
char: L
1 retval:             self.UNL
char: O
1 retval:             self.UNLO
char: A
1 retval:             self.UNLOA
char: D
1 retval:             self.UNLOAD
char: _
1 retval:             self.UNLOAD_
char: P
1 retval:             self.UNLOAD_P
char: R
1 retval:             self.UNLOAD_PR
char: E
1 retval:             self.UNLOAD_PRE
char: F
1 retval:             self.UNLOAD_PREF
char: I
1 retval:             self.UNLOAD_PREFI
char: X
1 retval:             self.UNLOAD_PREFIX
char: ,
1 retval:             self.UNLOAD_PREFIX,
char: 

1 retval:             self.UNLOAD_PREFIX,
2 retval:             self.UNLOAD_PREFIX,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: k
1 retval:             k
char: e
1 retval:             ke
char: y
1 retval:             key
char: ,
1 retval:             key,
char: 

1 retval:             key,
2 retval:             key,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: '
1 retval:             '
char: '
1 retval:             ''
char: 

1 retval:             ''
2 retval:             ''
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: )
1 retval:         )
char:  
1 retval:         ) 
char: +
1 retval:         ) +
char:  
1 retval:         ) + 
char: "
1 retval:         ) + "
char: '
1 retval:         ) + "'
char:  
1 retval:         ) + "' 
char: "
1 retval:         ) + "' "
char: 

1 retval:         ) + "' "
2 retval:         ) + "' "
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: C
1 retval:         if C
char: o
1 retval:         if Co
char: n
1 retval:         if Con
char: n
1 retval:         if Conn
char: e
1 retval:         if Conne
char: c
1 retval:         if Connec
char: t
1 retval:         if Connect
char: i
1 retval:         if Connecti
char: o
1 retval:         if Connectio
char: n
1 retval:         if Connection
char: .
1 retval:         if Connection.
char: I
1 retval:         if Connection.I
char: A
1 retval:         if Connection.IA
char: M
1 retval:         if Connection.IAM
char: _
1 retval:         if Connection.IAM_
char: R
1 retval:         if Connection.IAM_R
char: O
1 retval:         if Connection.IAM_RO
char: L
1 retval:         if Connection.IAM_ROL
char: E
1 retval:         if Connection.IAM_ROLE
char: :
1 retval:         if Connection.IAM_ROLE:
char: 

1 retval:         if Connection.IAM_ROLE:
2 retval:         if Connection.IAM_ROLE:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: q
1 retval:             sq
char: l
1 retval:             sql
char:  
1 retval:             sql 
char: +
1 retval:             sql +
char: =
1 retval:             sql +=
char:  
1 retval:             sql += 
char: "
1 retval:             sql += "
char: I
1 retval:             sql += "I
char: A
1 retval:             sql += "IA
char: M
1 retval:             sql += "IAM
char: _
1 retval:             sql += "IAM_
char: R
1 retval:             sql += "IAM_R
char: O
1 retval:             sql += "IAM_RO
char: L
1 retval:             sql += "IAM_ROL
char: E
1 retval:             sql += "IAM_ROLE
char:  
1 retval:             sql += "IAM_ROLE 
char: '
1 retval:             sql += "IAM_ROLE '
char: "
1 retval:             sql += "IAM_ROLE '"
char:  
1 retval:             sql += "IAM_ROLE '" 
char: +
1 retval:             sql += "IAM_ROLE '" +
char:  
1 retval:             sql += "IAM_ROLE '" + 
char: C
1 retval:             sql += "IAM_ROLE '" + C
char: o
1 retval:             sql += "IAM_ROLE '" + Co
char: n
1 retval:             sql += "IAM_ROLE '" + Con
char: n
1 retval:             sql += "IAM_ROLE '" + Conn
char: e
1 retval:             sql += "IAM_ROLE '" + Conne
char: c
1 retval:             sql += "IAM_ROLE '" + Connec
char: t
1 retval:             sql += "IAM_ROLE '" + Connect
char: i
1 retval:             sql += "IAM_ROLE '" + Connecti
char: o
1 retval:             sql += "IAM_ROLE '" + Connectio
char: n
1 retval:             sql += "IAM_ROLE '" + Connection
char: .
1 retval:             sql += "IAM_ROLE '" + Connection.
char: I
1 retval:             sql += "IAM_ROLE '" + Connection.I
char: A
1 retval:             sql += "IAM_ROLE '" + Connection.IA
char: M
1 retval:             sql += "IAM_ROLE '" + Connection.IAM
char: _
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_
char: R
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_R
char: O
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_RO
char: L
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROL
char: E
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE
char:  
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE 
char: +
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE +
char:  
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + 
char: "
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "
char: '
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "'
char:  
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "' 
char: "
1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "' "
char: 

1 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "' "
2 retval:             sql += "IAM_ROLE '" + Connection.IAM_ROLE + "' "
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: +
1 retval:         sql +
char: =
1 retval:         sql +=
char:  
1 retval:         sql += 
char: "
1 retval:         sql += "
char: D
1 retval:         sql += "D
char: E
1 retval:         sql += "DE
char: L
1 retval:         sql += "DEL
char: I
1 retval:         sql += "DELI
char: M
1 retval:         sql += "DELIM
char: I
1 retval:         sql += "DELIMI
char: T
1 retval:         sql += "DELIMIT
char: E
1 retval:         sql += "DELIMITE
char: R
1 retval:         sql += "DELIMITER
char:  
1 retval:         sql += "DELIMITER 
char: '
1 retval:         sql += "DELIMITER '
char: |
1 retval:         sql += "DELIMITER '|
char: '
1 retval:         sql += "DELIMITER '|'
char:  
1 retval:         sql += "DELIMITER '|' 
char: A
1 retval:         sql += "DELIMITER '|' A
char: D
1 retval:         sql += "DELIMITER '|' AD
char: D
1 retval:         sql += "DELIMITER '|' ADD
char: Q
1 retval:         sql += "DELIMITER '|' ADDQ
char: U
1 retval:         sql += "DELIMITER '|' ADDQU
char: O
1 retval:         sql += "DELIMITER '|' ADDQUO
char: T
1 retval:         sql += "DELIMITER '|' ADDQUOT
char: E
1 retval:         sql += "DELIMITER '|' ADDQUOTE
char: S
1 retval:         sql += "DELIMITER '|' ADDQUOTES
char:  
1 retval:         sql += "DELIMITER '|' ADDQUOTES 
char: G
1 retval:         sql += "DELIMITER '|' ADDQUOTES G
char: Z
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZ
char: I
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZI
char: P
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP
char:  
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP 
char: A
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP A
char: L
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP AL
char: L
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALL
char: O
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLO
char: W
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOW
char: O
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWO
char: V
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOV
char: E
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVE
char: R
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVER
char: W
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERW
char: R
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWR
char: I
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRI
char: T
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRIT
char: E
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRITE
char: "
1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRITE"
char: 

1 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRITE"
2 retval:         sql += "DELIMITER '|' ADDQUOTES GZIP ALLOWOVERWRITE"
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: r
1 retval:         if r
char: e
1 retval:         if re
char: .
1 retval:         if re.
char: m
1 retval:         if re.m
char: a
1 retval:         if re.ma
char: t
1 retval:         if re.mat
char: c
1 retval:         if re.matc
char: h
1 retval:         if re.match
char: (
1 retval:         if re.match(
char: r
1 retval:         if re.match(r
char: '
1 retval:         if re.match(r'
char: (
1 retval:         if re.match(r'(
char: .
1 retval:         if re.match(r'(.
char: *
1 retval:         if re.match(r'(.*
char: ?
1 retval:         if re.match(r'(.*?
char: )
1 retval:         if re.match(r'(.*?)
char: (
1 retval:         if re.match(r'(.*?)(
char: l
1 retval:         if re.match(r'(.*?)(l
char: i
1 retval:         if re.match(r'(.*?)(li
char: m
1 retval:         if re.match(r'(.*?)(lim
char: i
1 retval:         if re.match(r'(.*?)(limi
char: t
1 retval:         if re.match(r'(.*?)(limit
char: \
1 retval:         if re.match(r'(.*?)(limit\
char: s
1 retval:         if re.match(r'(.*?)(limit\s
char: +
1 retval:         if re.match(r'(.*?)(limit\s+
char: \
1 retval:         if re.match(r'(.*?)(limit\s+\
char: d
1 retval:         if re.match(r'(.*?)(limit\s+\d
char: +
1 retval:         if re.match(r'(.*?)(limit\s+\d+
char: )
1 retval:         if re.match(r'(.*?)(limit\s+\d+)
char: (
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(
char: .
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.
char: *
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*
char: )
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)
char: '
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)'
char: ,
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)',
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', 
char: s
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', s
char: q
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sq
char: l
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql
char: ,
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql,
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, 
char: r
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, r
char: e
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re
char: .
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.
char: I
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.I
char: G
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IG
char: N
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGN
char: O
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNO
char: R
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNOR
char: E
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORE
char: C
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNOREC
char: A
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECA
char: S
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECAS
char: E
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE 
char: |
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE |
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | 
char: r
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | r
char: e
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re
char: .
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.
char: U
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.U
char: N
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UN
char: I
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNI
char: C
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNIC
char: O
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICO
char: D
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICOD
char: E
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE 
char: |
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE |
char:  
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | 
char: r
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | r
char: e
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re
char: .
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.
char: D
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.D
char: O
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DO
char: T
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOT
char: A
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTA
char: L
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTAL
char: L
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL
char: )
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL)
char: :
1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL):
char: 

1 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL):
2 retval:         if re.match(r'(.*?)(limit\s+\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: g
1 retval:             log
char: g
1 retval:             logg
char: e
1 retval:             logge
char: r
1 retval:             logger
char: .
1 retval:             logger.
char: w
1 retval:             logger.w
char: a
1 retval:             logger.wa
char: r
1 retval:             logger.war
char: n
1 retval:             logger.warn
char: i
1 retval:             logger.warni
char: n
1 retval:             logger.warnin
char: g
1 retval:             logger.warning
char: (
1 retval:             logger.warning(
char: '
1 retval:             logger.warning('
char: L
1 retval:             logger.warning('L
char: I
1 retval:             logger.warning('LI
char: M
1 retval:             logger.warning('LIM
char: I
1 retval:             logger.warning('LIMI
char: T
1 retval:             logger.warning('LIMIT
char:  
1 retval:             logger.warning('LIMIT 
char: c
1 retval:             logger.warning('LIMIT c
char: l
1 retval:             logger.warning('LIMIT cl
char: a
1 retval:             logger.warning('LIMIT cla
char: u
1 retval:             logger.warning('LIMIT clau
char: s
1 retval:             logger.warning('LIMIT claus
char: e
1 retval:             logger.warning('LIMIT clause
char:  
1 retval:             logger.warning('LIMIT clause 
char: i
1 retval:             logger.warning('LIMIT clause i
char: s
1 retval:             logger.warning('LIMIT clause is
char:  
1 retval:             logger.warning('LIMIT clause is 
char: n
1 retval:             logger.warning('LIMIT clause is n
char: o
1 retval:             logger.warning('LIMIT clause is no
char: t
1 retval:             logger.warning('LIMIT clause is not
char:  
1 retval:             logger.warning('LIMIT clause is not 
char: s
1 retval:             logger.warning('LIMIT clause is not s
char: u
1 retval:             logger.warning('LIMIT clause is not su
char: p
1 retval:             logger.warning('LIMIT clause is not sup
char: p
1 retval:             logger.warning('LIMIT clause is not supp
char: o
1 retval:             logger.warning('LIMIT clause is not suppo
char: r
1 retval:             logger.warning('LIMIT clause is not suppor
char: t
1 retval:             logger.warning('LIMIT clause is not support
char: e
1 retval:             logger.warning('LIMIT clause is not supporte
char: d
1 retval:             logger.warning('LIMIT clause is not supported
char:  
1 retval:             logger.warning('LIMIT clause is not supported 
char: b
1 retval:             logger.warning('LIMIT clause is not supported b
char: y
1 retval:             logger.warning('LIMIT clause is not supported by
char:  
1 retval:             logger.warning('LIMIT clause is not supported by 
char: u
1 retval:             logger.warning('LIMIT clause is not supported by u
char: n
1 retval:             logger.warning('LIMIT clause is not supported by un
char: l
1 retval:             logger.warning('LIMIT clause is not supported by unl
char: o
1 retval:             logger.warning('LIMIT clause is not supported by unlo
char: a
1 retval:             logger.warning('LIMIT clause is not supported by unloa
char: d
1 retval:             logger.warning('LIMIT clause is not supported by unload
char: ,
1 retval:             logger.warning('LIMIT clause is not supported by unload,
char:  
1 retval:             logger.warning('LIMIT clause is not supported by unload, 
char: r
1 retval:             logger.warning('LIMIT clause is not supported by unload, r
char: e
1 retval:             logger.warning('LIMIT clause is not supported by unload, re
char: t
1 retval:             logger.warning('LIMIT clause is not supported by unload, ret
char: u
1 retval:             logger.warning('LIMIT clause is not supported by unload, retu
char: r
1 retval:             logger.warning('LIMIT clause is not supported by unload, retur
char: n
1 retval:             logger.warning('LIMIT clause is not supported by unload, return
char: i
1 retval:             logger.warning('LIMIT clause is not supported by unload, returni
char: n
1 retval:             logger.warning('LIMIT clause is not supported by unload, returnin
char: g
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning
char:  
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning 
char: f
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning f
char: u
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning fu
char: l
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning ful
char: l
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full
char:  
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full 
char: s
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full s
char: e
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full se
char: t
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set
char: .
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set.
char: '
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set.'
char: )
1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set.')
char: 

1 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set.')
2 retval:             logger.warning('LIMIT clause is not supported by unload, returning full set.')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: q
1 retval:             sq
char: l
1 retval:             sql
char:  
1 retval:             sql 
char: =
1 retval:             sql =
char:  
1 retval:             sql = 
char: r
1 retval:             sql = r
char: e
1 retval:             sql = re
char: .
1 retval:             sql = re.
char: s
1 retval:             sql = re.s
char: u
1 retval:             sql = re.su
char: b
1 retval:             sql = re.sub
char: (
1 retval:             sql = re.sub(
char: r
1 retval:             sql = re.sub(r
char: '
1 retval:             sql = re.sub(r'
char: (
1 retval:             sql = re.sub(r'(
char: .
1 retval:             sql = re.sub(r'(.
char: *
1 retval:             sql = re.sub(r'(.*
char: ?
1 retval:             sql = re.sub(r'(.*?
char: )
1 retval:             sql = re.sub(r'(.*?)
char: (
1 retval:             sql = re.sub(r'(.*?)(
char: l
1 retval:             sql = re.sub(r'(.*?)(l
char: i
1 retval:             sql = re.sub(r'(.*?)(li
char: m
1 retval:             sql = re.sub(r'(.*?)(lim
char: i
1 retval:             sql = re.sub(r'(.*?)(limi
char: t
1 retval:             sql = re.sub(r'(.*?)(limit
char: \
1 retval:             sql = re.sub(r'(.*?)(limit\
char: s
1 retval:             sql = re.sub(r'(.*?)(limit\s
char: +
1 retval:             sql = re.sub(r'(.*?)(limit\s+
char: \
1 retval:             sql = re.sub(r'(.*?)(limit\s+\
char: d
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d
char: +
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+
char: )
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)
char: (
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(
char: .
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.
char: *
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*
char: )
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)
char: '
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)'
char: ,
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)',
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', 
char: r
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r
char: '
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'
char: \
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\
char: 1
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1
char: \
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\
char: 3
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3
char: '
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3'
char: ,
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3',
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', 
char: s
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', s
char: q
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sq
char: l
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql
char: ,
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql,
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, 
char: f
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, f
char: l
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, fl
char: a
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, fla
char: g
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flag
char: s
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags
char: =
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=
char: r
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=r
char: e
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re
char: .
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.
char: I
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.I
char: G
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IG
char: N
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGN
char: O
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNO
char: R
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNOR
char: E
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORE
char: C
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNOREC
char: A
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECA
char: S
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECAS
char: E
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE 
char: |
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE |
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | 
char: r
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | r
char: e
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re
char: .
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.
char: U
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.U
char: N
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UN
char: I
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNI
char: C
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNIC
char: O
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICO
char: D
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICOD
char: E
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE 
char: |
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE |
char:  
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | 
char: r
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | r
char: e
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re
char: .
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.
char: D
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.D
char: O
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DO
char: T
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOT
char: A
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTA
char: L
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTAL
char: L
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL
char: )
1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
char: 

1 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
2 retval:             sql = re.sub(r'(.*?)(limit\s+\d+)(.*)', r'\1\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: e
1 retval:         se
char: l
1 retval:         sel
char: f
1 retval:         self
char: .
1 retval:         self.
char: _
1 retval:         self._
char: _
1 retval:         self.__
char: e
1 retval:         self.__e
char: x
1 retval:         self.__ex
char: e
1 retval:         self.__exe
char: c
1 retval:         self.__exec
char: u
1 retval:         self.__execu
char: t
1 retval:         self.__execut
char: e
1 retval:         self.__execute
char: (
1 retval:         self.__execute(
char: s
1 retval:         self.__execute(s
char: q
1 retval:         self.__execute(sq
char: l
1 retval:         self.__execute(sql
char: ,
1 retval:         self.__execute(sql,
char:  
1 retval:         self.__execute(sql, 
char: b
1 retval:         self.__execute(sql, b
char: i
1 retval:         self.__execute(sql, bi
char: n
1 retval:         self.__execute(sql, bin
char: d
1 retval:         self.__execute(sql, bind
char: i
1 retval:         self.__execute(sql, bindi
char: n
1 retval:         self.__execute(sql, bindin
char: g
1 retval:         self.__execute(sql, binding
char: s
1 retval:         self.__execute(sql, bindings
char: )
1 retval:         self.__execute(sql, bindings)
char: 

1 retval:         self.__execute(sql, bindings)
2 retval:         self.__execute(sql, bindings)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: k
1 retval:         return k
char: e
1 retval:         return ke
char: y
1 retval:         return key
char: ,
1 retval:         return key,
char:  
1 retval:         return key, 
char: c
1 retval:         return key, c
char: o
1 retval:         return key, co
char: l
1 retval:         return key, col
char: u
1 retval:         return key, colu
char: m
1 retval:         return key, colum
char: n
1 retval:         return key, column
char: s
1 retval:         return key, columns
char: 

1 retval:         return key, columns
2 retval:         return key, columns
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: q
1 retval:     @q
char: u
1 retval:     @qu
char: e
1 retval:     @que
char: r
1 retval:     @quer
char: y
1 retval:     @query
char: _
1 retval:     @query_
char: c
1 retval:     @query_c
char: a
1 retval:     @query_ca
char: c
1 retval:     @query_cac
char: h
1 retval:     @query_cach
char: e
1 retval:     @query_cache
char: d
1 retval:     @query_cached
char: 

1 retval:     @query_cached
2 retval:     @query_cached
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: l
1 retval:     def l
char: o
1 retval:     def lo
char: a
1 retval:     def loa
char: d
1 retval:     def load
char: (
1 retval:     def load(
char: s
1 retval:     def load(s
char: e
1 retval:     def load(se
char: l
1 retval:     def load(sel
char: f
1 retval:     def load(self
char: ,
1 retval:     def load(self,
char:  
1 retval:     def load(self, 
char: k
1 retval:     def load(self, k
char: e
1 retval:     def load(self, ke
char: y
1 retval:     def load(self, key
char: ,
1 retval:     def load(self, key,
char:  
1 retval:     def load(self, key, 
char: c
1 retval:     def load(self, key, c
char: o
1 retval:     def load(self, key, co
char: l
1 retval:     def load(self, key, col
char: u
1 retval:     def load(self, key, colu
char: m
1 retval:     def load(self, key, colum
char: n
1 retval:     def load(self, key, column
char: s
1 retval:     def load(self, key, columns
char: )
1 retval:     def load(self, key, columns)
char: :
1 retval:     def load(self, key, columns):
char: 

1 retval:     def load(self, key, columns):
2 retval:     def load(self, key, columns):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: s
1 retval:         res
char: u
1 retval:         resu
char: l
1 retval:         resul
char: t
1 retval:         result
char:  
1 retval:         result 
char: =
1 retval:         result =
char:  
1 retval:         result = 
char: [
1 retval:         result = [
char: c
1 retval:         result = [c
char: o
1 retval:         result = [co
char: l
1 retval:         result = [col
char: u
1 retval:         result = [colu
char: m
1 retval:         result = [colum
char: n
1 retval:         result = [column
char: s
1 retval:         result = [columns
char: ]
1 retval:         result = [columns]
char: 

1 retval:         result = [columns]
2 retval:         result = [columns]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: w
1 retval:         w
char: i
1 retval:         wi
char: t
1 retval:         wit
char: h
1 retval:         with
char:  
1 retval:         with 
char: t
1 retval:         with t
char: i
1 retval:         with ti
char: m
1 retval:         with tim
char: e
1 retval:         with time
char: r
1 retval:         with timer
char: (
1 retval:         with timer(
char: '
1 retval:         with timer('
char: l
1 retval:         with timer('l
char: o
1 retval:         with timer('lo
char: a
1 retval:         with timer('loa
char: d
1 retval:         with timer('load
char: :
1 retval:         with timer('load:
char: '
1 retval:         with timer('load:'
char: )
1 retval:         with timer('load:')
char: :
1 retval:         with timer('load:'):
char: 

1 retval:         with timer('load:'):
2 retval:         with timer('load:'):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: o
1 retval:             fo
char: r
1 retval:             for
char:  
1 retval:             for 
char: e
1 retval:             for e
char: n
1 retval:             for en
char: t
1 retval:             for ent
char: r
1 retval:             for entr
char: y
1 retval:             for entry
char:  
1 retval:             for entry 
char: i
1 retval:             for entry i
char: n
1 retval:             for entry in
char:  
1 retval:             for entry in 
char: l
1 retval:             for entry in l
char: o
1 retval:             for entry in lo
char: r
1 retval:             for entry in lor
char: e
1 retval:             for entry in lore
char: .
1 retval:             for entry in lore.
char: i
1 retval:             for entry in lore.i
char: o
1 retval:             for entry in lore.io
char: .
1 retval:             for entry in lore.io.
char: b
1 retval:             for entry in lore.io.b
char: u
1 retval:             for entry in lore.io.bu
char: c
1 retval:             for entry in lore.io.buc
char: k
1 retval:             for entry in lore.io.buck
char: e
1 retval:             for entry in lore.io.bucke
char: t
1 retval:             for entry in lore.io.bucket
char: .
1 retval:             for entry in lore.io.bucket.
char: o
1 retval:             for entry in lore.io.bucket.o
char: b
1 retval:             for entry in lore.io.bucket.ob
char: j
1 retval:             for entry in lore.io.bucket.obj
char: e
1 retval:             for entry in lore.io.bucket.obje
char: c
1 retval:             for entry in lore.io.bucket.objec
char: t
1 retval:             for entry in lore.io.bucket.object
char: s
1 retval:             for entry in lore.io.bucket.objects
char: .
1 retval:             for entry in lore.io.bucket.objects.
char: f
1 retval:             for entry in lore.io.bucket.objects.f
char: i
1 retval:             for entry in lore.io.bucket.objects.fi
char: l
1 retval:             for entry in lore.io.bucket.objects.fil
char: t
1 retval:             for entry in lore.io.bucket.objects.filt
char: e
1 retval:             for entry in lore.io.bucket.objects.filte
char: r
1 retval:             for entry in lore.io.bucket.objects.filter
char: (
1 retval:             for entry in lore.io.bucket.objects.filter(
char: 

1 retval:             for entry in lore.io.bucket.objects.filter(
2 retval:             for entry in lore.io.bucket.objects.filter(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: P
1 retval:                 P
char: r
1 retval:                 Pr
char: e
1 retval:                 Pre
char: f
1 retval:                 Pref
char: i
1 retval:                 Prefi
char: x
1 retval:                 Prefix
char: =
1 retval:                 Prefix=
char: o
1 retval:                 Prefix=o
char: s
1 retval:                 Prefix=os
char: .
1 retval:                 Prefix=os.
char: p
1 retval:                 Prefix=os.p
char: a
1 retval:                 Prefix=os.pa
char: t
1 retval:                 Prefix=os.pat
char: h
1 retval:                 Prefix=os.path
char: .
1 retval:                 Prefix=os.path.
char: j
1 retval:                 Prefix=os.path.j
char: o
1 retval:                 Prefix=os.path.jo
char: i
1 retval:                 Prefix=os.path.joi
char: n
1 retval:                 Prefix=os.path.join
char: (
1 retval:                 Prefix=os.path.join(
char: s
1 retval:                 Prefix=os.path.join(s
char: e
1 retval:                 Prefix=os.path.join(se
char: l
1 retval:                 Prefix=os.path.join(sel
char: f
1 retval:                 Prefix=os.path.join(self
char: .
1 retval:                 Prefix=os.path.join(self.
char: U
1 retval:                 Prefix=os.path.join(self.U
char: N
1 retval:                 Prefix=os.path.join(self.UN
char: L
1 retval:                 Prefix=os.path.join(self.UNL
char: O
1 retval:                 Prefix=os.path.join(self.UNLO
char: A
1 retval:                 Prefix=os.path.join(self.UNLOA
char: D
1 retval:                 Prefix=os.path.join(self.UNLOAD
char: _
1 retval:                 Prefix=os.path.join(self.UNLOAD_
char: P
1 retval:                 Prefix=os.path.join(self.UNLOAD_P
char: R
1 retval:                 Prefix=os.path.join(self.UNLOAD_PR
char: E
1 retval:                 Prefix=os.path.join(self.UNLOAD_PRE
char: F
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREF
char: I
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFI
char: X
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX
char: ,
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX,
char:  
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, 
char: k
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, k
char: e
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, ke
char: y
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key
char: )
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
char: 

1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
2 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: )
1 retval:             )
char: :
1 retval:             ):
char: 

1 retval:             ):
2 retval:             ):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: t
1 retval:                 t
char: e
1 retval:                 te
char: m
1 retval:                 tem
char: p
1 retval:                 temp
char:  
1 retval:                 temp 
char: =
1 retval:                 temp =
char:  
1 retval:                 temp = 
char: t
1 retval:                 temp = t
char: e
1 retval:                 temp = te
char: m
1 retval:                 temp = tem
char: p
1 retval:                 temp = temp
char: f
1 retval:                 temp = tempf
char: i
1 retval:                 temp = tempfi
char: l
1 retval:                 temp = tempfil
char: e
1 retval:                 temp = tempfile
char: .
1 retval:                 temp = tempfile.
char: N
1 retval:                 temp = tempfile.N
char: a
1 retval:                 temp = tempfile.Na
char: m
1 retval:                 temp = tempfile.Nam
char: e
1 retval:                 temp = tempfile.Name
char: d
1 retval:                 temp = tempfile.Named
char: T
1 retval:                 temp = tempfile.NamedT
char: e
1 retval:                 temp = tempfile.NamedTe
char: m
1 retval:                 temp = tempfile.NamedTem
char: p
1 retval:                 temp = tempfile.NamedTemp
char: o
1 retval:                 temp = tempfile.NamedTempo
char: r
1 retval:                 temp = tempfile.NamedTempor
char: a
1 retval:                 temp = tempfile.NamedTempora
char: r
1 retval:                 temp = tempfile.NamedTemporar
char: y
1 retval:                 temp = tempfile.NamedTemporary
char: F
1 retval:                 temp = tempfile.NamedTemporaryF
char: i
1 retval:                 temp = tempfile.NamedTemporaryFi
char: l
1 retval:                 temp = tempfile.NamedTemporaryFil
char: e
1 retval:                 temp = tempfile.NamedTemporaryFile
char: (
1 retval:                 temp = tempfile.NamedTemporaryFile(
char: )
1 retval:                 temp = tempfile.NamedTemporaryFile()
char: 

1 retval:                 temp = tempfile.NamedTemporaryFile()
2 retval:                 temp = tempfile.NamedTemporaryFile()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: l
1 retval:                 l
char: o
1 retval:                 lo
char: r
1 retval:                 lor
char: e
1 retval:                 lore
char: .
1 retval:                 lore.
char: i
1 retval:                 lore.i
char: o
1 retval:                 lore.io
char: .
1 retval:                 lore.io.
char: b
1 retval:                 lore.io.b
char: u
1 retval:                 lore.io.bu
char: c
1 retval:                 lore.io.buc
char: k
1 retval:                 lore.io.buck
char: e
1 retval:                 lore.io.bucke
char: t
1 retval:                 lore.io.bucket
char: .
1 retval:                 lore.io.bucket.
char: d
1 retval:                 lore.io.bucket.d
char: o
1 retval:                 lore.io.bucket.do
char: w
1 retval:                 lore.io.bucket.dow
char: n
1 retval:                 lore.io.bucket.down
char: l
1 retval:                 lore.io.bucket.downl
char: o
1 retval:                 lore.io.bucket.downlo
char: a
1 retval:                 lore.io.bucket.downloa
char: d
1 retval:                 lore.io.bucket.download
char: _
1 retval:                 lore.io.bucket.download_
char: f
1 retval:                 lore.io.bucket.download_f
char: i
1 retval:                 lore.io.bucket.download_fi
char: l
1 retval:                 lore.io.bucket.download_fil
char: e
1 retval:                 lore.io.bucket.download_file
char: (
1 retval:                 lore.io.bucket.download_file(
char: e
1 retval:                 lore.io.bucket.download_file(e
char: n
1 retval:                 lore.io.bucket.download_file(en
char: t
1 retval:                 lore.io.bucket.download_file(ent
char: r
1 retval:                 lore.io.bucket.download_file(entr
char: y
1 retval:                 lore.io.bucket.download_file(entry
char: .
1 retval:                 lore.io.bucket.download_file(entry.
char: k
1 retval:                 lore.io.bucket.download_file(entry.k
char: e
1 retval:                 lore.io.bucket.download_file(entry.ke
char: y
1 retval:                 lore.io.bucket.download_file(entry.key
char: ,
1 retval:                 lore.io.bucket.download_file(entry.key,
char:  
1 retval:                 lore.io.bucket.download_file(entry.key, 
char: t
1 retval:                 lore.io.bucket.download_file(entry.key, t
char: e
1 retval:                 lore.io.bucket.download_file(entry.key, te
char: m
1 retval:                 lore.io.bucket.download_file(entry.key, tem
char: p
1 retval:                 lore.io.bucket.download_file(entry.key, temp
char: .
1 retval:                 lore.io.bucket.download_file(entry.key, temp.
char: n
1 retval:                 lore.io.bucket.download_file(entry.key, temp.n
char: a
1 retval:                 lore.io.bucket.download_file(entry.key, temp.na
char: m
1 retval:                 lore.io.bucket.download_file(entry.key, temp.nam
char: e
1 retval:                 lore.io.bucket.download_file(entry.key, temp.name
char: )
1 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
char: 

1 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
2 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: w
1 retval:                 w
char: i
1 retval:                 wi
char: t
1 retval:                 wit
char: h
1 retval:                 with
char:  
1 retval:                 with 
char: g
1 retval:                 with g
char: z
1 retval:                 with gz
char: i
1 retval:                 with gzi
char: p
1 retval:                 with gzip
char: .
1 retval:                 with gzip.
char: o
1 retval:                 with gzip.o
char: p
1 retval:                 with gzip.op
char: e
1 retval:                 with gzip.ope
char: n
1 retval:                 with gzip.open
char: (
1 retval:                 with gzip.open(
char: t
1 retval:                 with gzip.open(t
char: e
1 retval:                 with gzip.open(te
char: m
1 retval:                 with gzip.open(tem
char: p
1 retval:                 with gzip.open(temp
char: .
1 retval:                 with gzip.open(temp.
char: n
1 retval:                 with gzip.open(temp.n
char: a
1 retval:                 with gzip.open(temp.na
char: m
1 retval:                 with gzip.open(temp.nam
char: e
1 retval:                 with gzip.open(temp.name
char: ,
1 retval:                 with gzip.open(temp.name,
char:  
1 retval:                 with gzip.open(temp.name, 
char: '
1 retval:                 with gzip.open(temp.name, '
char: r
1 retval:                 with gzip.open(temp.name, 'r
char: t
1 retval:                 with gzip.open(temp.name, 'rt
char: '
1 retval:                 with gzip.open(temp.name, 'rt'
char: )
1 retval:                 with gzip.open(temp.name, 'rt')
char:  
1 retval:                 with gzip.open(temp.name, 'rt') 
char: a
1 retval:                 with gzip.open(temp.name, 'rt') a
char: s
1 retval:                 with gzip.open(temp.name, 'rt') as
char:  
1 retval:                 with gzip.open(temp.name, 'rt') as 
char: g
1 retval:                 with gzip.open(temp.name, 'rt') as g
char: z
1 retval:                 with gzip.open(temp.name, 'rt') as gz
char: :
1 retval:                 with gzip.open(temp.name, 'rt') as gz:
char: 

1 retval:                 with gzip.open(temp.name, 'rt') as gz:
2 retval:                 with gzip.open(temp.name, 'rt') as gz:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: r
1 retval:                     r
char: e
1 retval:                     re
char: s
1 retval:                     res
char: u
1 retval:                     resu
char: l
1 retval:                     resul
char: t
1 retval:                     result
char:  
1 retval:                     result 
char: +
1 retval:                     result +
char: =
1 retval:                     result +=
char:  
1 retval:                     result += 
char: l
1 retval:                     result += l
char: i
1 retval:                     result += li
char: s
1 retval:                     result += lis
char: t
1 retval:                     result += list
char: (
1 retval:                     result += list(
char: c
1 retval:                     result += list(c
char: s
1 retval:                     result += list(cs
char: v
1 retval:                     result += list(csv
char: .
1 retval:                     result += list(csv.
char: r
1 retval:                     result += list(csv.r
char: e
1 retval:                     result += list(csv.re
char: a
1 retval:                     result += list(csv.rea
char: d
1 retval:                     result += list(csv.read
char: e
1 retval:                     result += list(csv.reade
char: r
1 retval:                     result += list(csv.reader
char: (
1 retval:                     result += list(csv.reader(
char: g
1 retval:                     result += list(csv.reader(g
char: z
1 retval:                     result += list(csv.reader(gz
char: ,
1 retval:                     result += list(csv.reader(gz,
char:  
1 retval:                     result += list(csv.reader(gz, 
char: d
1 retval:                     result += list(csv.reader(gz, d
char: e
1 retval:                     result += list(csv.reader(gz, de
char: l
1 retval:                     result += list(csv.reader(gz, del
char: i
1 retval:                     result += list(csv.reader(gz, deli
char: m
1 retval:                     result += list(csv.reader(gz, delim
char: i
1 retval:                     result += list(csv.reader(gz, delimi
char: t
1 retval:                     result += list(csv.reader(gz, delimit
char: e
1 retval:                     result += list(csv.reader(gz, delimite
char: r
1 retval:                     result += list(csv.reader(gz, delimiter
char: =
1 retval:                     result += list(csv.reader(gz, delimiter=
char: '
1 retval:                     result += list(csv.reader(gz, delimiter='
char: |
1 retval:                     result += list(csv.reader(gz, delimiter='|
char: '
1 retval:                     result += list(csv.reader(gz, delimiter='|'
char: ,
1 retval:                     result += list(csv.reader(gz, delimiter='|',
char:  
1 retval:                     result += list(csv.reader(gz, delimiter='|', 
char: q
1 retval:                     result += list(csv.reader(gz, delimiter='|', q
char: u
1 retval:                     result += list(csv.reader(gz, delimiter='|', qu
char: o
1 retval:                     result += list(csv.reader(gz, delimiter='|', quo
char: t
1 retval:                     result += list(csv.reader(gz, delimiter='|', quot
char: e
1 retval:                     result += list(csv.reader(gz, delimiter='|', quote
char: c
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotec
char: h
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotech
char: a
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotecha
char: r
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar
char: =
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar=
char: '
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='
char: "
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"
char: '
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"'
char: )
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"')
char: )
1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"'))
char: 

1 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"'))
2 retval:                     result += list(csv.reader(gz, delimiter='|', quotechar='"'))
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: t
1 retval:             ret
char: u
1 retval:             retu
char: r
1 retval:             retur
char: n
1 retval:             return
char:  
1 retval:             return 
char: r
1 retval:             return r
char: e
1 retval:             return re
char: s
1 retval:             return res
char: u
1 retval:             return resu
char: l
1 retval:             return resul
char: t
1 retval:             return result
char: 

1 retval:             return result
2 retval:             return result
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: 

1 retval:     
2 retval:     
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: q
1 retval:     @q
char: u
1 retval:     @qu
char: e
1 retval:     @que
char: r
1 retval:     @quer
char: y
1 retval:     @query
char: _
1 retval:     @query_
char: c
1 retval:     @query_c
char: a
1 retval:     @query_ca
char: c
1 retval:     @query_cac
char: h
1 retval:     @query_cach
char: e
1 retval:     @query_cache
char: d
1 retval:     @query_cached
char: 

1 retval:     @query_cached
2 retval:     @query_cached
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: l
1 retval:     def l
char: o
1 retval:     def lo
char: a
1 retval:     def loa
char: d
1 retval:     def load
char: _
1 retval:     def load_
char: d
1 retval:     def load_d
char: a
1 retval:     def load_da
char: t
1 retval:     def load_dat
char: a
1 retval:     def load_data
char: f
1 retval:     def load_dataf
char: r
1 retval:     def load_datafr
char: a
1 retval:     def load_datafra
char: m
1 retval:     def load_datafram
char: e
1 retval:     def load_dataframe
char: (
1 retval:     def load_dataframe(
char: s
1 retval:     def load_dataframe(s
char: e
1 retval:     def load_dataframe(se
char: l
1 retval:     def load_dataframe(sel
char: f
1 retval:     def load_dataframe(self
char: ,
1 retval:     def load_dataframe(self,
char:  
1 retval:     def load_dataframe(self, 
char: k
1 retval:     def load_dataframe(self, k
char: e
1 retval:     def load_dataframe(self, ke
char: y
1 retval:     def load_dataframe(self, key
char: ,
1 retval:     def load_dataframe(self, key,
char:  
1 retval:     def load_dataframe(self, key, 
char: c
1 retval:     def load_dataframe(self, key, c
char: o
1 retval:     def load_dataframe(self, key, co
char: l
1 retval:     def load_dataframe(self, key, col
char: u
1 retval:     def load_dataframe(self, key, colu
char: m
1 retval:     def load_dataframe(self, key, colum
char: n
1 retval:     def load_dataframe(self, key, column
char: s
1 retval:     def load_dataframe(self, key, columns
char: )
1 retval:     def load_dataframe(self, key, columns)
char: :
1 retval:     def load_dataframe(self, key, columns):
char: 

1 retval:     def load_dataframe(self, key, columns):
2 retval:     def load_dataframe(self, key, columns):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: w
1 retval:         w
char: i
1 retval:         wi
char: t
1 retval:         wit
char: h
1 retval:         with
char:  
1 retval:         with 
char: t
1 retval:         with t
char: i
1 retval:         with ti
char: m
1 retval:         with tim
char: e
1 retval:         with time
char: r
1 retval:         with timer
char: (
1 retval:         with timer(
char: '
1 retval:         with timer('
char: l
1 retval:         with timer('l
char: o
1 retval:         with timer('lo
char: a
1 retval:         with timer('loa
char: d
1 retval:         with timer('load
char: _
1 retval:         with timer('load_
char: d
1 retval:         with timer('load_d
char: a
1 retval:         with timer('load_da
char: t
1 retval:         with timer('load_dat
char: a
1 retval:         with timer('load_data
char: f
1 retval:         with timer('load_dataf
char: r
1 retval:         with timer('load_datafr
char: a
1 retval:         with timer('load_datafra
char: m
1 retval:         with timer('load_datafram
char: e
1 retval:         with timer('load_dataframe
char: :
1 retval:         with timer('load_dataframe:
char: '
1 retval:         with timer('load_dataframe:'
char: )
1 retval:         with timer('load_dataframe:')
char: :
1 retval:         with timer('load_dataframe:'):
char: 

1 retval:         with timer('load_dataframe:'):
2 retval:         with timer('load_dataframe:'):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: r
1 retval:             fr
char: a
1 retval:             fra
char: m
1 retval:             fram
char: e
1 retval:             frame
char: s
1 retval:             frames
char:  
1 retval:             frames 
char: =
1 retval:             frames =
char:  
1 retval:             frames = 
char: [
1 retval:             frames = [
char: ]
1 retval:             frames = []
char: 

1 retval:             frames = []
2 retval:             frames = []
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: o
1 retval:             fo
char: r
1 retval:             for
char:  
1 retval:             for 
char: e
1 retval:             for e
char: n
1 retval:             for en
char: t
1 retval:             for ent
char: r
1 retval:             for entr
char: y
1 retval:             for entry
char:  
1 retval:             for entry 
char: i
1 retval:             for entry i
char: n
1 retval:             for entry in
char:  
1 retval:             for entry in 
char: l
1 retval:             for entry in l
char: o
1 retval:             for entry in lo
char: r
1 retval:             for entry in lor
char: e
1 retval:             for entry in lore
char: .
1 retval:             for entry in lore.
char: i
1 retval:             for entry in lore.i
char: o
1 retval:             for entry in lore.io
char: .
1 retval:             for entry in lore.io.
char: b
1 retval:             for entry in lore.io.b
char: u
1 retval:             for entry in lore.io.bu
char: c
1 retval:             for entry in lore.io.buc
char: k
1 retval:             for entry in lore.io.buck
char: e
1 retval:             for entry in lore.io.bucke
char: t
1 retval:             for entry in lore.io.bucket
char: .
1 retval:             for entry in lore.io.bucket.
char: o
1 retval:             for entry in lore.io.bucket.o
char: b
1 retval:             for entry in lore.io.bucket.ob
char: j
1 retval:             for entry in lore.io.bucket.obj
char: e
1 retval:             for entry in lore.io.bucket.obje
char: c
1 retval:             for entry in lore.io.bucket.objec
char: t
1 retval:             for entry in lore.io.bucket.object
char: s
1 retval:             for entry in lore.io.bucket.objects
char: .
1 retval:             for entry in lore.io.bucket.objects.
char: f
1 retval:             for entry in lore.io.bucket.objects.f
char: i
1 retval:             for entry in lore.io.bucket.objects.fi
char: l
1 retval:             for entry in lore.io.bucket.objects.fil
char: t
1 retval:             for entry in lore.io.bucket.objects.filt
char: e
1 retval:             for entry in lore.io.bucket.objects.filte
char: r
1 retval:             for entry in lore.io.bucket.objects.filter
char: (
1 retval:             for entry in lore.io.bucket.objects.filter(
char: 

1 retval:             for entry in lore.io.bucket.objects.filter(
2 retval:             for entry in lore.io.bucket.objects.filter(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: P
1 retval:                 P
char: r
1 retval:                 Pr
char: e
1 retval:                 Pre
char: f
1 retval:                 Pref
char: i
1 retval:                 Prefi
char: x
1 retval:                 Prefix
char: =
1 retval:                 Prefix=
char: o
1 retval:                 Prefix=o
char: s
1 retval:                 Prefix=os
char: .
1 retval:                 Prefix=os.
char: p
1 retval:                 Prefix=os.p
char: a
1 retval:                 Prefix=os.pa
char: t
1 retval:                 Prefix=os.pat
char: h
1 retval:                 Prefix=os.path
char: .
1 retval:                 Prefix=os.path.
char: j
1 retval:                 Prefix=os.path.j
char: o
1 retval:                 Prefix=os.path.jo
char: i
1 retval:                 Prefix=os.path.joi
char: n
1 retval:                 Prefix=os.path.join
char: (
1 retval:                 Prefix=os.path.join(
char: s
1 retval:                 Prefix=os.path.join(s
char: e
1 retval:                 Prefix=os.path.join(se
char: l
1 retval:                 Prefix=os.path.join(sel
char: f
1 retval:                 Prefix=os.path.join(self
char: .
1 retval:                 Prefix=os.path.join(self.
char: U
1 retval:                 Prefix=os.path.join(self.U
char: N
1 retval:                 Prefix=os.path.join(self.UN
char: L
1 retval:                 Prefix=os.path.join(self.UNL
char: O
1 retval:                 Prefix=os.path.join(self.UNLO
char: A
1 retval:                 Prefix=os.path.join(self.UNLOA
char: D
1 retval:                 Prefix=os.path.join(self.UNLOAD
char: _
1 retval:                 Prefix=os.path.join(self.UNLOAD_
char: P
1 retval:                 Prefix=os.path.join(self.UNLOAD_P
char: R
1 retval:                 Prefix=os.path.join(self.UNLOAD_PR
char: E
1 retval:                 Prefix=os.path.join(self.UNLOAD_PRE
char: F
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREF
char: I
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFI
char: X
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX
char: ,
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX,
char:  
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, 
char: k
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, k
char: e
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, ke
char: y
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key
char: )
1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
char: 

1 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
2 retval:                 Prefix=os.path.join(self.UNLOAD_PREFIX, key)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: )
1 retval:             )
char: :
1 retval:             ):
char: 

1 retval:             ):
2 retval:             ):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: t
1 retval:                 t
char: e
1 retval:                 te
char: m
1 retval:                 tem
char: p
1 retval:                 temp
char:  
1 retval:                 temp 
char: =
1 retval:                 temp =
char:  
1 retval:                 temp = 
char: t
1 retval:                 temp = t
char: e
1 retval:                 temp = te
char: m
1 retval:                 temp = tem
char: p
1 retval:                 temp = temp
char: f
1 retval:                 temp = tempf
char: i
1 retval:                 temp = tempfi
char: l
1 retval:                 temp = tempfil
char: e
1 retval:                 temp = tempfile
char: .
1 retval:                 temp = tempfile.
char: N
1 retval:                 temp = tempfile.N
char: a
1 retval:                 temp = tempfile.Na
char: m
1 retval:                 temp = tempfile.Nam
char: e
1 retval:                 temp = tempfile.Name
char: d
1 retval:                 temp = tempfile.Named
char: T
1 retval:                 temp = tempfile.NamedT
char: e
1 retval:                 temp = tempfile.NamedTe
char: m
1 retval:                 temp = tempfile.NamedTem
char: p
1 retval:                 temp = tempfile.NamedTemp
char: o
1 retval:                 temp = tempfile.NamedTempo
char: r
1 retval:                 temp = tempfile.NamedTempor
char: a
1 retval:                 temp = tempfile.NamedTempora
char: r
1 retval:                 temp = tempfile.NamedTemporar
char: y
1 retval:                 temp = tempfile.NamedTemporary
char: F
1 retval:                 temp = tempfile.NamedTemporaryF
char: i
1 retval:                 temp = tempfile.NamedTemporaryFi
char: l
1 retval:                 temp = tempfile.NamedTemporaryFil
char: e
1 retval:                 temp = tempfile.NamedTemporaryFile
char: (
1 retval:                 temp = tempfile.NamedTemporaryFile(
char: )
1 retval:                 temp = tempfile.NamedTemporaryFile()
char: 

1 retval:                 temp = tempfile.NamedTemporaryFile()
2 retval:                 temp = tempfile.NamedTemporaryFile()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: l
1 retval:                 l
char: o
1 retval:                 lo
char: r
1 retval:                 lor
char: e
1 retval:                 lore
char: .
1 retval:                 lore.
char: i
1 retval:                 lore.i
char: o
1 retval:                 lore.io
char: .
1 retval:                 lore.io.
char: b
1 retval:                 lore.io.b
char: u
1 retval:                 lore.io.bu
char: c
1 retval:                 lore.io.buc
char: k
1 retval:                 lore.io.buck
char: e
1 retval:                 lore.io.bucke
char: t
1 retval:                 lore.io.bucket
char: .
1 retval:                 lore.io.bucket.
char: d
1 retval:                 lore.io.bucket.d
char: o
1 retval:                 lore.io.bucket.do
char: w
1 retval:                 lore.io.bucket.dow
char: n
1 retval:                 lore.io.bucket.down
char: l
1 retval:                 lore.io.bucket.downl
char: o
1 retval:                 lore.io.bucket.downlo
char: a
1 retval:                 lore.io.bucket.downloa
char: d
1 retval:                 lore.io.bucket.download
char: _
1 retval:                 lore.io.bucket.download_
char: f
1 retval:                 lore.io.bucket.download_f
char: i
1 retval:                 lore.io.bucket.download_fi
char: l
1 retval:                 lore.io.bucket.download_fil
char: e
1 retval:                 lore.io.bucket.download_file
char: (
1 retval:                 lore.io.bucket.download_file(
char: e
1 retval:                 lore.io.bucket.download_file(e
char: n
1 retval:                 lore.io.bucket.download_file(en
char: t
1 retval:                 lore.io.bucket.download_file(ent
char: r
1 retval:                 lore.io.bucket.download_file(entr
char: y
1 retval:                 lore.io.bucket.download_file(entry
char: .
1 retval:                 lore.io.bucket.download_file(entry.
char: k
1 retval:                 lore.io.bucket.download_file(entry.k
char: e
1 retval:                 lore.io.bucket.download_file(entry.ke
char: y
1 retval:                 lore.io.bucket.download_file(entry.key
char: ,
1 retval:                 lore.io.bucket.download_file(entry.key,
char:  
1 retval:                 lore.io.bucket.download_file(entry.key, 
char: t
1 retval:                 lore.io.bucket.download_file(entry.key, t
char: e
1 retval:                 lore.io.bucket.download_file(entry.key, te
char: m
1 retval:                 lore.io.bucket.download_file(entry.key, tem
char: p
1 retval:                 lore.io.bucket.download_file(entry.key, temp
char: .
1 retval:                 lore.io.bucket.download_file(entry.key, temp.
char: n
1 retval:                 lore.io.bucket.download_file(entry.key, temp.n
char: a
1 retval:                 lore.io.bucket.download_file(entry.key, temp.na
char: m
1 retval:                 lore.io.bucket.download_file(entry.key, temp.nam
char: e
1 retval:                 lore.io.bucket.download_file(entry.key, temp.name
char: )
1 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
char: 

1 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
2 retval:                 lore.io.bucket.download_file(entry.key, temp.name)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: d
1 retval:                 d
char: a
1 retval:                 da
char: t
1 retval:                 dat
char: a
1 retval:                 data
char: f
1 retval:                 dataf
char: r
1 retval:                 datafr
char: a
1 retval:                 datafra
char: m
1 retval:                 datafram
char: e
1 retval:                 dataframe
char:  
1 retval:                 dataframe 
char: =
1 retval:                 dataframe =
char:  
1 retval:                 dataframe = 
char: p
1 retval:                 dataframe = p
char: a
1 retval:                 dataframe = pa
char: n
1 retval:                 dataframe = pan
char: d
1 retval:                 dataframe = pand
char: a
1 retval:                 dataframe = panda
char: s
1 retval:                 dataframe = pandas
char: .
1 retval:                 dataframe = pandas.
char: r
1 retval:                 dataframe = pandas.r
char: e
1 retval:                 dataframe = pandas.re
char: a
1 retval:                 dataframe = pandas.rea
char: d
1 retval:                 dataframe = pandas.read
char: _
1 retval:                 dataframe = pandas.read_
char: c
1 retval:                 dataframe = pandas.read_c
char: s
1 retval:                 dataframe = pandas.read_cs
char: v
1 retval:                 dataframe = pandas.read_csv
char: (
1 retval:                 dataframe = pandas.read_csv(
char: 

1 retval:                 dataframe = pandas.read_csv(
2 retval:                 dataframe = pandas.read_csv(
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: t
1 retval:                     t
char: e
1 retval:                     te
char: m
1 retval:                     tem
char: p
1 retval:                     temp
char: .
1 retval:                     temp.
char: n
1 retval:                     temp.n
char: a
1 retval:                     temp.na
char: m
1 retval:                     temp.nam
char: e
1 retval:                     temp.name
char: ,
1 retval:                     temp.name,
char: 

1 retval:                     temp.name,
2 retval:                     temp.name,
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: d
1 retval:                     d
char: e
1 retval:                     de
char: l
1 retval:                     del
char: i
1 retval:                     deli
char: m
1 retval:                     delim
char: i
1 retval:                     delimi
char: t
1 retval:                     delimit
char: e
1 retval:                     delimite
char: r
1 retval:                     delimiter
char: =
1 retval:                     delimiter=
char: '
1 retval:                     delimiter='
char: |
1 retval:                     delimiter='|
char: '
1 retval:                     delimiter='|'
char: ,
1 retval:                     delimiter='|',
char: 

1 retval:                     delimiter='|',
2 retval:                     delimiter='|',
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: q
1 retval:                     q
char: u
1 retval:                     qu
char: o
1 retval:                     quo
char: t
1 retval:                     quot
char: e
1 retval:                     quote
char: c
1 retval:                     quotec
char: h
1 retval:                     quotech
char: a
1 retval:                     quotecha
char: r
1 retval:                     quotechar
char: =
1 retval:                     quotechar=
char: '
1 retval:                     quotechar='
char: "
1 retval:                     quotechar='"
char: '
1 retval:                     quotechar='"'
char: ,
1 retval:                     quotechar='"',
char: 

1 retval:                     quotechar='"',
2 retval:                     quotechar='"',
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: c
1 retval:                     c
char: o
1 retval:                     co
char: m
1 retval:                     com
char: p
1 retval:                     comp
char: r
1 retval:                     compr
char: e
1 retval:                     compre
char: s
1 retval:                     compres
char: s
1 retval:                     compress
char: i
1 retval:                     compressi
char: o
1 retval:                     compressio
char: n
1 retval:                     compression
char: =
1 retval:                     compression=
char: '
1 retval:                     compression='
char: g
1 retval:                     compression='g
char: z
1 retval:                     compression='gz
char: i
1 retval:                     compression='gzi
char: p
1 retval:                     compression='gzip
char: '
1 retval:                     compression='gzip'
char: ,
1 retval:                     compression='gzip',
char: 

1 retval:                     compression='gzip',
2 retval:                     compression='gzip',
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char:  
1 retval:                  
char:  
1 retval:                   
char:  
1 retval:                    
char:  
1 retval:                     
char: e
1 retval:                     e
char: r
1 retval:                     er
char: r
1 retval:                     err
char: o
1 retval:                     erro
char: r
1 retval:                     error
char: _
1 retval:                     error_
char: b
1 retval:                     error_b
char: a
1 retval:                     error_ba
char: d
1 retval:                     error_bad
char: _
1 retval:                     error_bad_
char: l
1 retval:                     error_bad_l
char: i
1 retval:                     error_bad_li
char: n
1 retval:                     error_bad_lin
char: e
1 retval:                     error_bad_line
char: s
1 retval:                     error_bad_lines
char: =
1 retval:                     error_bad_lines=
char: F
1 retval:                     error_bad_lines=F
char: a
1 retval:                     error_bad_lines=Fa
char: l
1 retval:                     error_bad_lines=Fal
char: s
1 retval:                     error_bad_lines=Fals
char: e
1 retval:                     error_bad_lines=False
char: 

1 retval:                     error_bad_lines=False
2 retval:                     error_bad_lines=False
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: )
1 retval:                 )
char: 

1 retval:                 )
2 retval:                 )
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: d
1 retval:                 d
char: a
1 retval:                 da
char: t
1 retval:                 dat
char: a
1 retval:                 data
char: f
1 retval:                 dataf
char: r
1 retval:                 datafr
char: a
1 retval:                 datafra
char: m
1 retval:                 datafram
char: e
1 retval:                 dataframe
char: .
1 retval:                 dataframe.
char: c
1 retval:                 dataframe.c
char: o
1 retval:                 dataframe.co
char: l
1 retval:                 dataframe.col
char: u
1 retval:                 dataframe.colu
char: m
1 retval:                 dataframe.colum
char: n
1 retval:                 dataframe.column
char: s
1 retval:                 dataframe.columns
char:  
1 retval:                 dataframe.columns 
char: =
1 retval:                 dataframe.columns =
char:  
1 retval:                 dataframe.columns = 
char: c
1 retval:                 dataframe.columns = c
char: o
1 retval:                 dataframe.columns = co
char: l
1 retval:                 dataframe.columns = col
char: u
1 retval:                 dataframe.columns = colu
char: m
1 retval:                 dataframe.columns = colum
char: n
1 retval:                 dataframe.columns = column
char: s
1 retval:                 dataframe.columns = columns
char: 

1 retval:                 dataframe.columns = columns
2 retval:                 dataframe.columns = columns
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: f
1 retval:                 f
char: r
1 retval:                 fr
char: a
1 retval:                 fra
char: m
1 retval:                 fram
char: e
1 retval:                 frame
char: s
1 retval:                 frames
char: .
1 retval:                 frames.
char: a
1 retval:                 frames.a
char: p
1 retval:                 frames.ap
char: p
1 retval:                 frames.app
char: e
1 retval:                 frames.appe
char: n
1 retval:                 frames.appen
char: d
1 retval:                 frames.append
char: (
1 retval:                 frames.append(
char: d
1 retval:                 frames.append(d
char: a
1 retval:                 frames.append(da
char: t
1 retval:                 frames.append(dat
char: a
1 retval:                 frames.append(data
char: f
1 retval:                 frames.append(dataf
char: r
1 retval:                 frames.append(datafr
char: a
1 retval:                 frames.append(datafra
char: m
1 retval:                 frames.append(datafram
char: e
1 retval:                 frames.append(dataframe
char: )
1 retval:                 frames.append(dataframe)
char: 

1 retval:                 frames.append(dataframe)
2 retval:                 frames.append(dataframe)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: s
1 retval:             res
char: u
1 retval:             resu
char: l
1 retval:             resul
char: t
1 retval:             result
char:  
1 retval:             result 
char: =
1 retval:             result =
char:  
1 retval:             result = 
char: p
1 retval:             result = p
char: a
1 retval:             result = pa
char: n
1 retval:             result = pan
char: d
1 retval:             result = pand
char: a
1 retval:             result = panda
char: s
1 retval:             result = pandas
char: .
1 retval:             result = pandas.
char: c
1 retval:             result = pandas.c
char: o
1 retval:             result = pandas.co
char: n
1 retval:             result = pandas.con
char: c
1 retval:             result = pandas.conc
char: a
1 retval:             result = pandas.conca
char: t
1 retval:             result = pandas.concat
char: (
1 retval:             result = pandas.concat(
char: f
1 retval:             result = pandas.concat(f
char: r
1 retval:             result = pandas.concat(fr
char: a
1 retval:             result = pandas.concat(fra
char: m
1 retval:             result = pandas.concat(fram
char: e
1 retval:             result = pandas.concat(frame
char: s
1 retval:             result = pandas.concat(frames
char: )
1 retval:             result = pandas.concat(frames)
char: 

1 retval:             result = pandas.concat(frames)
2 retval:             result = pandas.concat(frames)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: s
1 retval:             res
char: u
1 retval:             resu
char: l
1 retval:             resul
char: t
1 retval:             result
char: .
1 retval:             result.
char: c
1 retval:             result.c
char: o
1 retval:             result.co
char: l
1 retval:             result.col
char: u
1 retval:             result.colu
char: m
1 retval:             result.colum
char: n
1 retval:             result.column
char: s
1 retval:             result.columns
char:  
1 retval:             result.columns 
char: =
1 retval:             result.columns =
char:  
1 retval:             result.columns = 
char: c
1 retval:             result.columns = c
char: o
1 retval:             result.columns = co
char: l
1 retval:             result.columns = col
char: u
1 retval:             result.columns = colu
char: m
1 retval:             result.columns = colum
char: n
1 retval:             result.columns = column
char: s
1 retval:             result.columns = columns
char: 

1 retval:             result.columns = columns
2 retval:             result.columns = columns
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: b
1 retval:             b
char: u
1 retval:             bu
char: f
1 retval:             buf
char: f
1 retval:             buff
char: e
1 retval:             buffe
char: r
1 retval:             buffer
char:  
1 retval:             buffer 
char: =
1 retval:             buffer =
char:  
1 retval:             buffer = 
char: S
1 retval:             buffer = S
char: t
1 retval:             buffer = St
char: r
1 retval:             buffer = Str
char: i
1 retval:             buffer = Stri
char: n
1 retval:             buffer = Strin
char: g
1 retval:             buffer = String
char: I
1 retval:             buffer = StringI
char: O
1 retval:             buffer = StringIO
char: (
1 retval:             buffer = StringIO(
char: )
1 retval:             buffer = StringIO()
char: 

1 retval:             buffer = StringIO()
2 retval:             buffer = StringIO()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: s
1 retval:             res
char: u
1 retval:             resu
char: l
1 retval:             resul
char: t
1 retval:             result
char: .
1 retval:             result.
char: i
1 retval:             result.i
char: n
1 retval:             result.in
char: f
1 retval:             result.inf
char: o
1 retval:             result.info
char: (
1 retval:             result.info(
char: b
1 retval:             result.info(b
char: u
1 retval:             result.info(bu
char: f
1 retval:             result.info(buf
char: =
1 retval:             result.info(buf=
char: b
1 retval:             result.info(buf=b
char: u
1 retval:             result.info(buf=bu
char: f
1 retval:             result.info(buf=buf
char: f
1 retval:             result.info(buf=buff
char: e
1 retval:             result.info(buf=buffe
char: r
1 retval:             result.info(buf=buffer
char: ,
1 retval:             result.info(buf=buffer,
char:  
1 retval:             result.info(buf=buffer, 
char: m
1 retval:             result.info(buf=buffer, m
char: e
1 retval:             result.info(buf=buffer, me
char: m
1 retval:             result.info(buf=buffer, mem
char: o
1 retval:             result.info(buf=buffer, memo
char: r
1 retval:             result.info(buf=buffer, memor
char: y
1 retval:             result.info(buf=buffer, memory
char: _
1 retval:             result.info(buf=buffer, memory_
char: u
1 retval:             result.info(buf=buffer, memory_u
char: s
1 retval:             result.info(buf=buffer, memory_us
char: a
1 retval:             result.info(buf=buffer, memory_usa
char: g
1 retval:             result.info(buf=buffer, memory_usag
char: e
1 retval:             result.info(buf=buffer, memory_usage
char: =
1 retval:             result.info(buf=buffer, memory_usage=
char: '
1 retval:             result.info(buf=buffer, memory_usage='
char: d
1 retval:             result.info(buf=buffer, memory_usage='d
char: e
1 retval:             result.info(buf=buffer, memory_usage='de
char: e
1 retval:             result.info(buf=buffer, memory_usage='dee
char: p
1 retval:             result.info(buf=buffer, memory_usage='deep
char: '
1 retval:             result.info(buf=buffer, memory_usage='deep'
char: )
1 retval:             result.info(buf=buffer, memory_usage='deep')
char: 

1 retval:             result.info(buf=buffer, memory_usage='deep')
2 retval:             result.info(buf=buffer, memory_usage='deep')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: g
1 retval:             log
char: g
1 retval:             logg
char: e
1 retval:             logge
char: r
1 retval:             logger
char: .
1 retval:             logger.
char: i
1 retval:             logger.i
char: n
1 retval:             logger.in
char: f
1 retval:             logger.inf
char: o
1 retval:             logger.info
char: (
1 retval:             logger.info(
char: b
1 retval:             logger.info(b
char: u
1 retval:             logger.info(bu
char: f
1 retval:             logger.info(buf
char: f
1 retval:             logger.info(buff
char: e
1 retval:             logger.info(buffe
char: r
1 retval:             logger.info(buffer
char: .
1 retval:             logger.info(buffer.
char: g
1 retval:             logger.info(buffer.g
char: e
1 retval:             logger.info(buffer.ge
char: t
1 retval:             logger.info(buffer.get
char: v
1 retval:             logger.info(buffer.getv
char: a
1 retval:             logger.info(buffer.getva
char: l
1 retval:             logger.info(buffer.getval
char: u
1 retval:             logger.info(buffer.getvalu
char: e
1 retval:             logger.info(buffer.getvalue
char: (
1 retval:             logger.info(buffer.getvalue(
char: )
1 retval:             logger.info(buffer.getvalue()
char: )
1 retval:             logger.info(buffer.getvalue())
char: 

1 retval:             logger.info(buffer.getvalue())
2 retval:             logger.info(buffer.getvalue())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: g
1 retval:             log
char: g
1 retval:             logg
char: e
1 retval:             logge
char: r
1 retval:             logger
char: .
1 retval:             logger.
char: i
1 retval:             logger.i
char: n
1 retval:             logger.in
char: f
1 retval:             logger.inf
char: o
1 retval:             logger.info
char: (
1 retval:             logger.info(
char: r
1 retval:             logger.info(r
char: e
1 retval:             logger.info(re
char: s
1 retval:             logger.info(res
char: u
1 retval:             logger.info(resu
char: l
1 retval:             logger.info(resul
char: t
1 retval:             logger.info(result
char: .
1 retval:             logger.info(result.
char: h
1 retval:             logger.info(result.h
char: e
1 retval:             logger.info(result.he
char: a
1 retval:             logger.info(result.hea
char: d
1 retval:             logger.info(result.head
char: (
1 retval:             logger.info(result.head(
char: )
1 retval:             logger.info(result.head()
char: )
1 retval:             logger.info(result.head())
char: 

1 retval:             logger.info(result.head())
2 retval:             logger.info(result.head())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: t
1 retval:             ret
char: u
1 retval:             retu
char: r
1 retval:             retur
char: n
1 retval:             return
char:  
1 retval:             return 
char: r
1 retval:             return r
char: e
1 retval:             return re
char: s
1 retval:             return res
char: u
1 retval:             return resu
char: l
1 retval:             return resul
char: t
1 retval:             return result
char: 

1 retval:             return result
2 retval:             return result
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: d
1 retval:     def d
char: a
1 retval:     def da
char: t
1 retval:     def dat
char: a
1 retval:     def data
char: f
1 retval:     def dataf
char: r
1 retval:     def datafr
char: a
1 retval:     def datafra
char: m
1 retval:     def datafram
char: e
1 retval:     def dataframe
char: (
1 retval:     def dataframe(
char: s
1 retval:     def dataframe(s
char: e
1 retval:     def dataframe(se
char: l
1 retval:     def dataframe(sel
char: f
1 retval:     def dataframe(self
char: ,
1 retval:     def dataframe(self,
char:  
1 retval:     def dataframe(self, 
char: s
1 retval:     def dataframe(self, s
char: q
1 retval:     def dataframe(self, sq
char: l
1 retval:     def dataframe(self, sql
char: =
1 retval:     def dataframe(self, sql=
char: N
1 retval:     def dataframe(self, sql=N
char: o
1 retval:     def dataframe(self, sql=No
char: n
1 retval:     def dataframe(self, sql=Non
char: e
1 retval:     def dataframe(self, sql=None
char: ,
1 retval:     def dataframe(self, sql=None,
char:  
1 retval:     def dataframe(self, sql=None, 
char: f
1 retval:     def dataframe(self, sql=None, f
char: i
1 retval:     def dataframe(self, sql=None, fi
char: l
1 retval:     def dataframe(self, sql=None, fil
char: e
1 retval:     def dataframe(self, sql=None, file
char: n
1 retval:     def dataframe(self, sql=None, filen
char: a
1 retval:     def dataframe(self, sql=None, filena
char: m
1 retval:     def dataframe(self, sql=None, filenam
char: e
1 retval:     def dataframe(self, sql=None, filename
char: =
1 retval:     def dataframe(self, sql=None, filename=
char: N
1 retval:     def dataframe(self, sql=None, filename=N
char: o
1 retval:     def dataframe(self, sql=None, filename=No
char: n
1 retval:     def dataframe(self, sql=None, filename=Non
char: e
1 retval:     def dataframe(self, sql=None, filename=None
char: ,
1 retval:     def dataframe(self, sql=None, filename=None,
char:  
1 retval:     def dataframe(self, sql=None, filename=None, 
char: *
1 retval:     def dataframe(self, sql=None, filename=None, *
char: *
1 retval:     def dataframe(self, sql=None, filename=None, **
char: k
1 retval:     def dataframe(self, sql=None, filename=None, **k
char: w
1 retval:     def dataframe(self, sql=None, filename=None, **kw
char: a
1 retval:     def dataframe(self, sql=None, filename=None, **kwa
char: r
1 retval:     def dataframe(self, sql=None, filename=None, **kwar
char: g
1 retval:     def dataframe(self, sql=None, filename=None, **kwarg
char: s
1 retval:     def dataframe(self, sql=None, filename=None, **kwargs
char: )
1 retval:     def dataframe(self, sql=None, filename=None, **kwargs)
char: :
1 retval:     def dataframe(self, sql=None, filename=None, **kwargs):
char: 

1 retval:     def dataframe(self, sql=None, filename=None, **kwargs):
2 retval:     def dataframe(self, sql=None, filename=None, **kwargs):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: c
1 retval:         c
char: a
1 retval:         ca
char: c
1 retval:         cac
char: h
1 retval:         cach
char: e
1 retval:         cache
char:  
1 retval:         cache 
char: =
1 retval:         cache =
char:  
1 retval:         cache = 
char: k
1 retval:         cache = k
char: w
1 retval:         cache = kw
char: a
1 retval:         cache = kwa
char: r
1 retval:         cache = kwar
char: g
1 retval:         cache = kwarg
char: s
1 retval:         cache = kwargs
char: .
1 retval:         cache = kwargs.
char: p
1 retval:         cache = kwargs.p
char: o
1 retval:         cache = kwargs.po
char: p
1 retval:         cache = kwargs.pop
char: (
1 retval:         cache = kwargs.pop(
char: '
1 retval:         cache = kwargs.pop('
char: c
1 retval:         cache = kwargs.pop('c
char: a
1 retval:         cache = kwargs.pop('ca
char: c
1 retval:         cache = kwargs.pop('cac
char: h
1 retval:         cache = kwargs.pop('cach
char: e
1 retval:         cache = kwargs.pop('cache
char: '
1 retval:         cache = kwargs.pop('cache'
char: ,
1 retval:         cache = kwargs.pop('cache',
char:  
1 retval:         cache = kwargs.pop('cache', 
char: F
1 retval:         cache = kwargs.pop('cache', F
char: a
1 retval:         cache = kwargs.pop('cache', Fa
char: l
1 retval:         cache = kwargs.pop('cache', Fal
char: s
1 retval:         cache = kwargs.pop('cache', Fals
char: e
1 retval:         cache = kwargs.pop('cache', False
char: )
1 retval:         cache = kwargs.pop('cache', False)
char: 

1 retval:         cache = kwargs.pop('cache', False)
2 retval:         cache = kwargs.pop('cache', False)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: =
1 retval:         sql =
char:  
1 retval:         sql = 
char: s
1 retval:         sql = s
char: e
1 retval:         sql = se
char: l
1 retval:         sql = sel
char: f
1 retval:         sql = self
char: .
1 retval:         sql = self.
char: _
1 retval:         sql = self._
char: _
1 retval:         sql = self.__
char: p
1 retval:         sql = self.__p
char: r
1 retval:         sql = self.__pr
char: e
1 retval:         sql = self.__pre
char: p
1 retval:         sql = self.__prep
char: a
1 retval:         sql = self.__prepa
char: r
1 retval:         sql = self.__prepar
char: e
1 retval:         sql = self.__prepare
char: (
1 retval:         sql = self.__prepare(
char: s
1 retval:         sql = self.__prepare(s
char: q
1 retval:         sql = self.__prepare(sq
char: l
1 retval:         sql = self.__prepare(sql
char: ,
1 retval:         sql = self.__prepare(sql,
char:  
1 retval:         sql = self.__prepare(sql, 
char: f
1 retval:         sql = self.__prepare(sql, f
char: i
1 retval:         sql = self.__prepare(sql, fi
char: l
1 retval:         sql = self.__prepare(sql, fil
char: e
1 retval:         sql = self.__prepare(sql, file
char: n
1 retval:         sql = self.__prepare(sql, filen
char: a
1 retval:         sql = self.__prepare(sql, filena
char: m
1 retval:         sql = self.__prepare(sql, filenam
char: e
1 retval:         sql = self.__prepare(sql, filename
char: )
1 retval:         sql = self.__prepare(sql, filename)
char: 

1 retval:         sql = self.__prepare(sql, filename)
2 retval:         sql = self.__prepare(sql, filename)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: d
1 retval:         d
char: a
1 retval:         da
char: t
1 retval:         dat
char: a
1 retval:         data
char: f
1 retval:         dataf
char: r
1 retval:         datafr
char: a
1 retval:         datafra
char: m
1 retval:         datafram
char: e
1 retval:         dataframe
char:  
1 retval:         dataframe 
char: =
1 retval:         dataframe =
char:  
1 retval:         dataframe = 
char: s
1 retval:         dataframe = s
char: e
1 retval:         dataframe = se
char: l
1 retval:         dataframe = sel
char: f
1 retval:         dataframe = self
char: .
1 retval:         dataframe = self.
char: _
1 retval:         dataframe = self._
char: d
1 retval:         dataframe = self._d
char: a
1 retval:         dataframe = self._da
char: t
1 retval:         dataframe = self._dat
char: a
1 retval:         dataframe = self._data
char: f
1 retval:         dataframe = self._dataf
char: r
1 retval:         dataframe = self._datafr
char: a
1 retval:         dataframe = self._datafra
char: m
1 retval:         dataframe = self._datafram
char: e
1 retval:         dataframe = self._dataframe
char: (
1 retval:         dataframe = self._dataframe(
char: s
1 retval:         dataframe = self._dataframe(s
char: q
1 retval:         dataframe = self._dataframe(sq
char: l
1 retval:         dataframe = self._dataframe(sql
char: ,
1 retval:         dataframe = self._dataframe(sql,
char:  
1 retval:         dataframe = self._dataframe(sql, 
char: k
1 retval:         dataframe = self._dataframe(sql, k
char: w
1 retval:         dataframe = self._dataframe(sql, kw
char: a
1 retval:         dataframe = self._dataframe(sql, kwa
char: r
1 retval:         dataframe = self._dataframe(sql, kwar
char: g
1 retval:         dataframe = self._dataframe(sql, kwarg
char: s
1 retval:         dataframe = self._dataframe(sql, kwargs
char: ,
1 retval:         dataframe = self._dataframe(sql, kwargs,
char:  
1 retval:         dataframe = self._dataframe(sql, kwargs, 
char: c
1 retval:         dataframe = self._dataframe(sql, kwargs, c
char: a
1 retval:         dataframe = self._dataframe(sql, kwargs, ca
char: c
1 retval:         dataframe = self._dataframe(sql, kwargs, cac
char: h
1 retval:         dataframe = self._dataframe(sql, kwargs, cach
char: e
1 retval:         dataframe = self._dataframe(sql, kwargs, cache
char: =
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=
char: c
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=c
char: a
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=ca
char: c
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=cac
char: h
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=cach
char: e
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=cache
char: )
1 retval:         dataframe = self._dataframe(sql, kwargs, cache=cache)
char: 

1 retval:         dataframe = self._dataframe(sql, kwargs, cache=cache)
2 retval:         dataframe = self._dataframe(sql, kwargs, cache=cache)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: b
1 retval:         b
char: u
1 retval:         bu
char: f
1 retval:         buf
char: f
1 retval:         buff
char: e
1 retval:         buffe
char: r
1 retval:         buffer
char:  
1 retval:         buffer 
char: =
1 retval:         buffer =
char:  
1 retval:         buffer = 
char: S
1 retval:         buffer = S
char: t
1 retval:         buffer = St
char: r
1 retval:         buffer = Str
char: i
1 retval:         buffer = Stri
char: n
1 retval:         buffer = Strin
char: g
1 retval:         buffer = String
char: I
1 retval:         buffer = StringI
char: O
1 retval:         buffer = StringIO
char: (
1 retval:         buffer = StringIO(
char: )
1 retval:         buffer = StringIO()
char: 

1 retval:         buffer = StringIO()
2 retval:         buffer = StringIO()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: d
1 retval:         d
char: a
1 retval:         da
char: t
1 retval:         dat
char: a
1 retval:         data
char: f
1 retval:         dataf
char: r
1 retval:         datafr
char: a
1 retval:         datafra
char: m
1 retval:         datafram
char: e
1 retval:         dataframe
char: .
1 retval:         dataframe.
char: i
1 retval:         dataframe.i
char: n
1 retval:         dataframe.in
char: f
1 retval:         dataframe.inf
char: o
1 retval:         dataframe.info
char: (
1 retval:         dataframe.info(
char: b
1 retval:         dataframe.info(b
char: u
1 retval:         dataframe.info(bu
char: f
1 retval:         dataframe.info(buf
char: =
1 retval:         dataframe.info(buf=
char: b
1 retval:         dataframe.info(buf=b
char: u
1 retval:         dataframe.info(buf=bu
char: f
1 retval:         dataframe.info(buf=buf
char: f
1 retval:         dataframe.info(buf=buff
char: e
1 retval:         dataframe.info(buf=buffe
char: r
1 retval:         dataframe.info(buf=buffer
char: ,
1 retval:         dataframe.info(buf=buffer,
char:  
1 retval:         dataframe.info(buf=buffer, 
char: m
1 retval:         dataframe.info(buf=buffer, m
char: e
1 retval:         dataframe.info(buf=buffer, me
char: m
1 retval:         dataframe.info(buf=buffer, mem
char: o
1 retval:         dataframe.info(buf=buffer, memo
char: r
1 retval:         dataframe.info(buf=buffer, memor
char: y
1 retval:         dataframe.info(buf=buffer, memory
char: _
1 retval:         dataframe.info(buf=buffer, memory_
char: u
1 retval:         dataframe.info(buf=buffer, memory_u
char: s
1 retval:         dataframe.info(buf=buffer, memory_us
char: a
1 retval:         dataframe.info(buf=buffer, memory_usa
char: g
1 retval:         dataframe.info(buf=buffer, memory_usag
char: e
1 retval:         dataframe.info(buf=buffer, memory_usage
char: =
1 retval:         dataframe.info(buf=buffer, memory_usage=
char: '
1 retval:         dataframe.info(buf=buffer, memory_usage='
char: d
1 retval:         dataframe.info(buf=buffer, memory_usage='d
char: e
1 retval:         dataframe.info(buf=buffer, memory_usage='de
char: e
1 retval:         dataframe.info(buf=buffer, memory_usage='dee
char: p
1 retval:         dataframe.info(buf=buffer, memory_usage='deep
char: '
1 retval:         dataframe.info(buf=buffer, memory_usage='deep'
char: )
1 retval:         dataframe.info(buf=buffer, memory_usage='deep')
char: 

1 retval:         dataframe.info(buf=buffer, memory_usage='deep')
2 retval:         dataframe.info(buf=buffer, memory_usage='deep')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: l
1 retval:         l
char: o
1 retval:         lo
char: g
1 retval:         log
char: g
1 retval:         logg
char: e
1 retval:         logge
char: r
1 retval:         logger
char: .
1 retval:         logger.
char: i
1 retval:         logger.i
char: n
1 retval:         logger.in
char: f
1 retval:         logger.inf
char: o
1 retval:         logger.info
char: (
1 retval:         logger.info(
char: b
1 retval:         logger.info(b
char: u
1 retval:         logger.info(bu
char: f
1 retval:         logger.info(buf
char: f
1 retval:         logger.info(buff
char: e
1 retval:         logger.info(buffe
char: r
1 retval:         logger.info(buffer
char: .
1 retval:         logger.info(buffer.
char: g
1 retval:         logger.info(buffer.g
char: e
1 retval:         logger.info(buffer.ge
char: t
1 retval:         logger.info(buffer.get
char: v
1 retval:         logger.info(buffer.getv
char: a
1 retval:         logger.info(buffer.getva
char: l
1 retval:         logger.info(buffer.getval
char: u
1 retval:         logger.info(buffer.getvalu
char: e
1 retval:         logger.info(buffer.getvalue
char: (
1 retval:         logger.info(buffer.getvalue(
char: )
1 retval:         logger.info(buffer.getvalue()
char: )
1 retval:         logger.info(buffer.getvalue())
char: 

1 retval:         logger.info(buffer.getvalue())
2 retval:         logger.info(buffer.getvalue())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: l
1 retval:         l
char: o
1 retval:         lo
char: g
1 retval:         log
char: g
1 retval:         logg
char: e
1 retval:         logge
char: r
1 retval:         logger
char: .
1 retval:         logger.
char: i
1 retval:         logger.i
char: n
1 retval:         logger.in
char: f
1 retval:         logger.inf
char: o
1 retval:         logger.info
char: (
1 retval:         logger.info(
char: d
1 retval:         logger.info(d
char: a
1 retval:         logger.info(da
char: t
1 retval:         logger.info(dat
char: a
1 retval:         logger.info(data
char: f
1 retval:         logger.info(dataf
char: r
1 retval:         logger.info(datafr
char: a
1 retval:         logger.info(datafra
char: m
1 retval:         logger.info(datafram
char: e
1 retval:         logger.info(dataframe
char: .
1 retval:         logger.info(dataframe.
char: h
1 retval:         logger.info(dataframe.h
char: e
1 retval:         logger.info(dataframe.he
char: a
1 retval:         logger.info(dataframe.hea
char: d
1 retval:         logger.info(dataframe.head
char: (
1 retval:         logger.info(dataframe.head(
char: )
1 retval:         logger.info(dataframe.head()
char: )
1 retval:         logger.info(dataframe.head())
char: 

1 retval:         logger.info(dataframe.head())
2 retval:         logger.info(dataframe.head())
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: d
1 retval:         return d
char: a
1 retval:         return da
char: t
1 retval:         return dat
char: a
1 retval:         return data
char: f
1 retval:         return dataf
char: r
1 retval:         return datafr
char: a
1 retval:         return datafra
char: m
1 retval:         return datafram
char: e
1 retval:         return dataframe
char: 

1 retval:         return dataframe
2 retval:         return dataframe
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: @
1 retval:     @
char: q
1 retval:     @q
char: u
1 retval:     @qu
char: e
1 retval:     @que
char: r
1 retval:     @quer
char: y
1 retval:     @query
char: _
1 retval:     @query_
char: c
1 retval:     @query_c
char: a
1 retval:     @query_ca
char: c
1 retval:     @query_cac
char: h
1 retval:     @query_cach
char: e
1 retval:     @query_cache
char: d
1 retval:     @query_cached
char: 

1 retval:     @query_cached
2 retval:     @query_cached
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: d
1 retval:     def _d
char: a
1 retval:     def _da
char: t
1 retval:     def _dat
char: a
1 retval:     def _data
char: f
1 retval:     def _dataf
char: r
1 retval:     def _datafr
char: a
1 retval:     def _datafra
char: m
1 retval:     def _datafram
char: e
1 retval:     def _dataframe
char: (
1 retval:     def _dataframe(
char: s
1 retval:     def _dataframe(s
char: e
1 retval:     def _dataframe(se
char: l
1 retval:     def _dataframe(sel
char: f
1 retval:     def _dataframe(self
char: ,
1 retval:     def _dataframe(self,
char:  
1 retval:     def _dataframe(self, 
char: s
1 retval:     def _dataframe(self, s
char: q
1 retval:     def _dataframe(self, sq
char: l
1 retval:     def _dataframe(self, sql
char: ,
1 retval:     def _dataframe(self, sql,
char:  
1 retval:     def _dataframe(self, sql, 
char: b
1 retval:     def _dataframe(self, sql, b
char: i
1 retval:     def _dataframe(self, sql, bi
char: n
1 retval:     def _dataframe(self, sql, bin
char: d
1 retval:     def _dataframe(self, sql, bind
char: i
1 retval:     def _dataframe(self, sql, bindi
char: n
1 retval:     def _dataframe(self, sql, bindin
char: g
1 retval:     def _dataframe(self, sql, binding
char: s
1 retval:     def _dataframe(self, sql, bindings
char: )
1 retval:     def _dataframe(self, sql, bindings)
char: :
1 retval:     def _dataframe(self, sql, bindings):
char: 

1 retval:     def _dataframe(self, sql, bindings):
2 retval:     def _dataframe(self, sql, bindings):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: w
1 retval:         w
char: i
1 retval:         wi
char: t
1 retval:         wit
char: h
1 retval:         with
char:  
1 retval:         with 
char: t
1 retval:         with t
char: i
1 retval:         with ti
char: m
1 retval:         with tim
char: e
1 retval:         with time
char: r
1 retval:         with timer
char: (
1 retval:         with timer(
char: "
1 retval:         with timer("
char: d
1 retval:         with timer("d
char: a
1 retval:         with timer("da
char: t
1 retval:         with timer("dat
char: a
1 retval:         with timer("data
char: f
1 retval:         with timer("dataf
char: r
1 retval:         with timer("datafr
char: a
1 retval:         with timer("datafra
char: m
1 retval:         with timer("datafram
char: e
1 retval:         with timer("dataframe
char: :
1 retval:         with timer("dataframe:
char: "
1 retval:         with timer("dataframe:"
char: )
1 retval:         with timer("dataframe:")
char: :
1 retval:         with timer("dataframe:"):
char: 

1 retval:         with timer("dataframe:"):
2 retval:         with timer("dataframe:"):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: i
1 retval:             i
char: f
1 retval:             if
char:  
1 retval:             if 
char: s
1 retval:             if s
char: e
1 retval:             if se
char: l
1 retval:             if sel
char: f
1 retval:             if self
char: .
1 retval:             if self.
char: _
1 retval:             if self._
char: c
1 retval:             if self._c
char: o
1 retval:             if self._co
char: n
1 retval:             if self._con
char: n
1 retval:             if self._conn
char: e
1 retval:             if self._conne
char: c
1 retval:             if self._connec
char: t
1 retval:             if self._connect
char: i
1 retval:             if self._connecti
char: o
1 retval:             if self._connectio
char: n
1 retval:             if self._connection
char:  
1 retval:             if self._connection 
char: i
1 retval:             if self._connection i
char: s
1 retval:             if self._connection is
char:  
1 retval:             if self._connection is 
char: N
1 retval:             if self._connection is N
char: o
1 retval:             if self._connection is No
char: n
1 retval:             if self._connection is Non
char: e
1 retval:             if self._connection is None
char: :
1 retval:             if self._connection is None:
char: 

1 retval:             if self._connection is None:
2 retval:             if self._connection is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: s
1 retval:                 s
char: e
1 retval:                 se
char: l
1 retval:                 sel
char: f
1 retval:                 self
char: .
1 retval:                 self.
char: _
1 retval:                 self._
char: c
1 retval:                 self._c
char: o
1 retval:                 self._co
char: n
1 retval:                 self._con
char: n
1 retval:                 self._conn
char: e
1 retval:                 self._conne
char: c
1 retval:                 self._connec
char: t
1 retval:                 self._connect
char: i
1 retval:                 self._connecti
char: o
1 retval:                 self._connectio
char: n
1 retval:                 self._connection
char:  
1 retval:                 self._connection 
char: =
1 retval:                 self._connection =
char:  
1 retval:                 self._connection = 
char: s
1 retval:                 self._connection = s
char: e
1 retval:                 self._connection = se
char: l
1 retval:                 self._connection = sel
char: f
1 retval:                 self._connection = self
char: .
1 retval:                 self._connection = self.
char: _
1 retval:                 self._connection = self._
char: e
1 retval:                 self._connection = self._e
char: n
1 retval:                 self._connection = self._en
char: g
1 retval:                 self._connection = self._eng
char: i
1 retval:                 self._connection = self._engi
char: n
1 retval:                 self._connection = self._engin
char: e
1 retval:                 self._connection = self._engine
char: .
1 retval:                 self._connection = self._engine.
char: c
1 retval:                 self._connection = self._engine.c
char: o
1 retval:                 self._connection = self._engine.co
char: n
1 retval:                 self._connection = self._engine.con
char: n
1 retval:                 self._connection = self._engine.conn
char: e
1 retval:                 self._connection = self._engine.conne
char: c
1 retval:                 self._connection = self._engine.connec
char: t
1 retval:                 self._connection = self._engine.connect
char: (
1 retval:                 self._connection = self._engine.connect(
char: )
1 retval:                 self._connection = self._engine.connect()
char: 

1 retval:                 self._connection = self._engine.connect()
2 retval:                 self._connection = self._engine.connect()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: d
1 retval:             d
char: a
1 retval:             da
char: t
1 retval:             dat
char: a
1 retval:             data
char: f
1 retval:             dataf
char: r
1 retval:             datafr
char: a
1 retval:             datafra
char: m
1 retval:             datafram
char: e
1 retval:             dataframe
char:  
1 retval:             dataframe 
char: =
1 retval:             dataframe =
char:  
1 retval:             dataframe = 
char: p
1 retval:             dataframe = p
char: a
1 retval:             dataframe = pa
char: n
1 retval:             dataframe = pan
char: d
1 retval:             dataframe = pand
char: a
1 retval:             dataframe = panda
char: s
1 retval:             dataframe = pandas
char: .
1 retval:             dataframe = pandas.
char: r
1 retval:             dataframe = pandas.r
char: e
1 retval:             dataframe = pandas.re
char: a
1 retval:             dataframe = pandas.rea
char: d
1 retval:             dataframe = pandas.read
char: _
1 retval:             dataframe = pandas.read_
char: s
1 retval:             dataframe = pandas.read_s
char: q
1 retval:             dataframe = pandas.read_sq
char: l
1 retval:             dataframe = pandas.read_sql
char: (
1 retval:             dataframe = pandas.read_sql(
char: s
1 retval:             dataframe = pandas.read_sql(s
char: q
1 retval:             dataframe = pandas.read_sql(sq
char: l
1 retval:             dataframe = pandas.read_sql(sql
char: =
1 retval:             dataframe = pandas.read_sql(sql=
char: s
1 retval:             dataframe = pandas.read_sql(sql=s
char: q
1 retval:             dataframe = pandas.read_sql(sql=sq
char: l
1 retval:             dataframe = pandas.read_sql(sql=sql
char: ,
1 retval:             dataframe = pandas.read_sql(sql=sql,
char:  
1 retval:             dataframe = pandas.read_sql(sql=sql, 
char: c
1 retval:             dataframe = pandas.read_sql(sql=sql, c
char: o
1 retval:             dataframe = pandas.read_sql(sql=sql, co
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con
char: =
1 retval:             dataframe = pandas.read_sql(sql=sql, con=
char: s
1 retval:             dataframe = pandas.read_sql(sql=sql, con=s
char: e
1 retval:             dataframe = pandas.read_sql(sql=sql, con=se
char: l
1 retval:             dataframe = pandas.read_sql(sql=sql, con=sel
char: f
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self
char: .
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self.
char: _
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._
char: c
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._c
char: o
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._co
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._con
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._conn
char: e
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._conne
char: c
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connec
char: t
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connect
char: i
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connecti
char: o
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connectio
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection
char: ,
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection,
char:  
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, 
char: p
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, p
char: a
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, pa
char: r
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, par
char: a
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, para
char: m
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, param
char: s
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params
char: =
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=
char: b
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=b
char: i
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bi
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bin
char: d
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bind
char: i
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindi
char: n
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindin
char: g
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=binding
char: s
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings
char: )
1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings)
char: 

1 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings)
2 retval:             dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: r
1 retval:             r
char: e
1 retval:             re
char: t
1 retval:             ret
char: u
1 retval:             retu
char: r
1 retval:             retur
char: n
1 retval:             return
char:  
1 retval:             return 
char: d
1 retval:             return d
char: a
1 retval:             return da
char: t
1 retval:             return dat
char: a
1 retval:             return data
char: f
1 retval:             return dataf
char: r
1 retval:             return datafr
char: a
1 retval:             return datafra
char: m
1 retval:             return datafram
char: e
1 retval:             return dataframe
char: 

1 retval:             return dataframe
2 retval:             return dataframe
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: q
1 retval:     def q
char: u
1 retval:     def qu
char: o
1 retval:     def quo
char: t
1 retval:     def quot
char: e
1 retval:     def quote
char: _
1 retval:     def quote_
char: i
1 retval:     def quote_i
char: d
1 retval:     def quote_id
char: e
1 retval:     def quote_ide
char: n
1 retval:     def quote_iden
char: t
1 retval:     def quote_ident
char: i
1 retval:     def quote_identi
char: f
1 retval:     def quote_identif
char: i
1 retval:     def quote_identifi
char: e
1 retval:     def quote_identifie
char: r
1 retval:     def quote_identifier
char: (
1 retval:     def quote_identifier(
char: s
1 retval:     def quote_identifier(s
char: e
1 retval:     def quote_identifier(se
char: l
1 retval:     def quote_identifier(sel
char: f
1 retval:     def quote_identifier(self
char: ,
1 retval:     def quote_identifier(self,
char:  
1 retval:     def quote_identifier(self, 
char: i
1 retval:     def quote_identifier(self, i
char: d
1 retval:     def quote_identifier(self, id
char: e
1 retval:     def quote_identifier(self, ide
char: n
1 retval:     def quote_identifier(self, iden
char: t
1 retval:     def quote_identifier(self, ident
char: i
1 retval:     def quote_identifier(self, identi
char: f
1 retval:     def quote_identifier(self, identif
char: i
1 retval:     def quote_identifier(self, identifi
char: e
1 retval:     def quote_identifier(self, identifie
char: r
1 retval:     def quote_identifier(self, identifier
char: )
1 retval:     def quote_identifier(self, identifier)
char: :
1 retval:     def quote_identifier(self, identifier):
char: 

1 retval:     def quote_identifier(self, identifier):
2 retval:     def quote_identifier(self, identifier):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: e
1 retval:         return self._e
char: n
1 retval:         return self._en
char: g
1 retval:         return self._eng
char: i
1 retval:         return self._engi
char: n
1 retval:         return self._engin
char: e
1 retval:         return self._engine
char: .
1 retval:         return self._engine.
char: d
1 retval:         return self._engine.d
char: i
1 retval:         return self._engine.di
char: a
1 retval:         return self._engine.dia
char: l
1 retval:         return self._engine.dial
char: e
1 retval:         return self._engine.diale
char: c
1 retval:         return self._engine.dialec
char: t
1 retval:         return self._engine.dialect
char: .
1 retval:         return self._engine.dialect.
char: i
1 retval:         return self._engine.dialect.i
char: d
1 retval:         return self._engine.dialect.id
char: e
1 retval:         return self._engine.dialect.ide
char: n
1 retval:         return self._engine.dialect.iden
char: t
1 retval:         return self._engine.dialect.ident
char: i
1 retval:         return self._engine.dialect.identi
char: f
1 retval:         return self._engine.dialect.identif
char: i
1 retval:         return self._engine.dialect.identifi
char: e
1 retval:         return self._engine.dialect.identifie
char: r
1 retval:         return self._engine.dialect.identifier
char: _
1 retval:         return self._engine.dialect.identifier_
char: p
1 retval:         return self._engine.dialect.identifier_p
char: r
1 retval:         return self._engine.dialect.identifier_pr
char: e
1 retval:         return self._engine.dialect.identifier_pre
char: p
1 retval:         return self._engine.dialect.identifier_prep
char: a
1 retval:         return self._engine.dialect.identifier_prepa
char: r
1 retval:         return self._engine.dialect.identifier_prepar
char: e
1 retval:         return self._engine.dialect.identifier_prepare
char: r
1 retval:         return self._engine.dialect.identifier_preparer
char: .
1 retval:         return self._engine.dialect.identifier_preparer.
char: q
1 retval:         return self._engine.dialect.identifier_preparer.q
char: u
1 retval:         return self._engine.dialect.identifier_preparer.qu
char: o
1 retval:         return self._engine.dialect.identifier_preparer.quo
char: t
1 retval:         return self._engine.dialect.identifier_preparer.quot
char: e
1 retval:         return self._engine.dialect.identifier_preparer.quote
char: (
1 retval:         return self._engine.dialect.identifier_preparer.quote(
char: i
1 retval:         return self._engine.dialect.identifier_preparer.quote(i
char: d
1 retval:         return self._engine.dialect.identifier_preparer.quote(id
char: e
1 retval:         return self._engine.dialect.identifier_preparer.quote(ide
char: n
1 retval:         return self._engine.dialect.identifier_preparer.quote(iden
char: t
1 retval:         return self._engine.dialect.identifier_preparer.quote(ident
char: i
1 retval:         return self._engine.dialect.identifier_preparer.quote(identi
char: f
1 retval:         return self._engine.dialect.identifier_preparer.quote(identif
char: i
1 retval:         return self._engine.dialect.identifier_preparer.quote(identifi
char: e
1 retval:         return self._engine.dialect.identifier_preparer.quote(identifie
char: r
1 retval:         return self._engine.dialect.identifier_preparer.quote(identifier
char: )
1 retval:         return self._engine.dialect.identifier_preparer.quote(identifier)
char: 

1 retval:         return self._engine.dialect.identifier_preparer.quote(identifier)
2 retval:         return self._engine.dialect.identifier_preparer.quote(identifier)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: 

1 retval:         
2 retval:         
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: _
1 retval:     def __
char: p
1 retval:     def __p
char: r
1 retval:     def __pr
char: e
1 retval:     def __pre
char: p
1 retval:     def __prep
char: a
1 retval:     def __prepa
char: r
1 retval:     def __prepar
char: e
1 retval:     def __prepare
char: (
1 retval:     def __prepare(
char: s
1 retval:     def __prepare(s
char: e
1 retval:     def __prepare(se
char: l
1 retval:     def __prepare(sel
char: f
1 retval:     def __prepare(self
char: ,
1 retval:     def __prepare(self,
char:  
1 retval:     def __prepare(self, 
char: s
1 retval:     def __prepare(self, s
char: q
1 retval:     def __prepare(self, sq
char: l
1 retval:     def __prepare(self, sql
char: ,
1 retval:     def __prepare(self, sql,
char:  
1 retval:     def __prepare(self, sql, 
char: f
1 retval:     def __prepare(self, sql, f
char: i
1 retval:     def __prepare(self, sql, fi
char: l
1 retval:     def __prepare(self, sql, fil
char: e
1 retval:     def __prepare(self, sql, file
char: n
1 retval:     def __prepare(self, sql, filen
char: a
1 retval:     def __prepare(self, sql, filena
char: m
1 retval:     def __prepare(self, sql, filenam
char: e
1 retval:     def __prepare(self, sql, filename
char: )
1 retval:     def __prepare(self, sql, filename)
char: :
1 retval:     def __prepare(self, sql, filename):
char: 

1 retval:     def __prepare(self, sql, filename):
2 retval:     def __prepare(self, sql, filename):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: s
1 retval:         if s
char: q
1 retval:         if sq
char: l
1 retval:         if sql
char:  
1 retval:         if sql 
char: i
1 retval:         if sql i
char: s
1 retval:         if sql is
char:  
1 retval:         if sql is 
char: N
1 retval:         if sql is N
char: o
1 retval:         if sql is No
char: n
1 retval:         if sql is Non
char: e
1 retval:         if sql is None
char:  
1 retval:         if sql is None 
char: a
1 retval:         if sql is None a
char: n
1 retval:         if sql is None an
char: d
1 retval:         if sql is None and
char:  
1 retval:         if sql is None and 
char: f
1 retval:         if sql is None and f
char: i
1 retval:         if sql is None and fi
char: l
1 retval:         if sql is None and fil
char: e
1 retval:         if sql is None and file
char: n
1 retval:         if sql is None and filen
char: a
1 retval:         if sql is None and filena
char: m
1 retval:         if sql is None and filenam
char: e
1 retval:         if sql is None and filename
char:  
1 retval:         if sql is None and filename 
char: i
1 retval:         if sql is None and filename i
char: s
1 retval:         if sql is None and filename is
char:  
1 retval:         if sql is None and filename is 
char: n
1 retval:         if sql is None and filename is n
char: o
1 retval:         if sql is None and filename is no
char: t
1 retval:         if sql is None and filename is not
char:  
1 retval:         if sql is None and filename is not 
char: N
1 retval:         if sql is None and filename is not N
char: o
1 retval:         if sql is None and filename is not No
char: n
1 retval:         if sql is None and filename is not Non
char: e
1 retval:         if sql is None and filename is not None
char: :
1 retval:         if sql is None and filename is not None:
char: 

1 retval:         if sql is None and filename is not None:
2 retval:         if sql is None and filename is not None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: f
1 retval:             f
char: i
1 retval:             fi
char: l
1 retval:             fil
char: e
1 retval:             file
char: n
1 retval:             filen
char: a
1 retval:             filena
char: m
1 retval:             filenam
char: e
1 retval:             filename
char:  
1 retval:             filename 
char: =
1 retval:             filename =
char:  
1 retval:             filename = 
char: C
1 retval:             filename = C
char: o
1 retval:             filename = Co
char: n
1 retval:             filename = Con
char: n
1 retval:             filename = Conn
char: e
1 retval:             filename = Conne
char: c
1 retval:             filename = Connec
char: t
1 retval:             filename = Connect
char: i
1 retval:             filename = Connecti
char: o
1 retval:             filename = Connectio
char: n
1 retval:             filename = Connection
char: .
1 retval:             filename = Connection.
char: p
1 retval:             filename = Connection.p
char: a
1 retval:             filename = Connection.pa
char: t
1 retval:             filename = Connection.pat
char: h
1 retval:             filename = Connection.path
char: (
1 retval:             filename = Connection.path(
char: f
1 retval:             filename = Connection.path(f
char: i
1 retval:             filename = Connection.path(fi
char: l
1 retval:             filename = Connection.path(fil
char: e
1 retval:             filename = Connection.path(file
char: n
1 retval:             filename = Connection.path(filen
char: a
1 retval:             filename = Connection.path(filena
char: m
1 retval:             filename = Connection.path(filenam
char: e
1 retval:             filename = Connection.path(filename
char: ,
1 retval:             filename = Connection.path(filename,
char:  
1 retval:             filename = Connection.path(filename, 
char: '
1 retval:             filename = Connection.path(filename, '
char: .
1 retval:             filename = Connection.path(filename, '.
char: s
1 retval:             filename = Connection.path(filename, '.s
char: q
1 retval:             filename = Connection.path(filename, '.sq
char: l
1 retval:             filename = Connection.path(filename, '.sql
char: '
1 retval:             filename = Connection.path(filename, '.sql'
char: )
1 retval:             filename = Connection.path(filename, '.sql')
char: 

1 retval:             filename = Connection.path(filename, '.sql')
2 retval:             filename = Connection.path(filename, '.sql')
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: l
1 retval:             l
char: o
1 retval:             lo
char: g
1 retval:             log
char: g
1 retval:             logg
char: e
1 retval:             logge
char: r
1 retval:             logger
char: .
1 retval:             logger.
char: d
1 retval:             logger.d
char: e
1 retval:             logger.de
char: b
1 retval:             logger.deb
char: u
1 retval:             logger.debu
char: g
1 retval:             logger.debug
char: (
1 retval:             logger.debug(
char: "
1 retval:             logger.debug("
char: R
1 retval:             logger.debug("R
char: E
1 retval:             logger.debug("RE
char: A
1 retval:             logger.debug("REA
char: D
1 retval:             logger.debug("READ
char:  
1 retval:             logger.debug("READ 
char: S
1 retval:             logger.debug("READ S
char: Q
1 retval:             logger.debug("READ SQ
char: L
1 retval:             logger.debug("READ SQL
char:  
1 retval:             logger.debug("READ SQL 
char: F
1 retval:             logger.debug("READ SQL F
char: I
1 retval:             logger.debug("READ SQL FI
char: L
1 retval:             logger.debug("READ SQL FIL
char: E
1 retval:             logger.debug("READ SQL FILE
char: :
1 retval:             logger.debug("READ SQL FILE:
char:  
1 retval:             logger.debug("READ SQL FILE: 
char: "
1 retval:             logger.debug("READ SQL FILE: "
char:  
1 retval:             logger.debug("READ SQL FILE: " 
char: +
1 retval:             logger.debug("READ SQL FILE: " +
char:  
1 retval:             logger.debug("READ SQL FILE: " + 
char: f
1 retval:             logger.debug("READ SQL FILE: " + f
char: i
1 retval:             logger.debug("READ SQL FILE: " + fi
char: l
1 retval:             logger.debug("READ SQL FILE: " + fil
char: e
1 retval:             logger.debug("READ SQL FILE: " + file
char: n
1 retval:             logger.debug("READ SQL FILE: " + filen
char: a
1 retval:             logger.debug("READ SQL FILE: " + filena
char: m
1 retval:             logger.debug("READ SQL FILE: " + filenam
char: e
1 retval:             logger.debug("READ SQL FILE: " + filename
char: )
1 retval:             logger.debug("READ SQL FILE: " + filename)
char: 

1 retval:             logger.debug("READ SQL FILE: " + filename)
2 retval:             logger.debug("READ SQL FILE: " + filename)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: w
1 retval:             w
char: i
1 retval:             wi
char: t
1 retval:             wit
char: h
1 retval:             with
char:  
1 retval:             with 
char: o
1 retval:             with o
char: p
1 retval:             with op
char: e
1 retval:             with ope
char: n
1 retval:             with open
char: (
1 retval:             with open(
char: f
1 retval:             with open(f
char: i
1 retval:             with open(fi
char: l
1 retval:             with open(fil
char: e
1 retval:             with open(file
char: n
1 retval:             with open(filen
char: a
1 retval:             with open(filena
char: m
1 retval:             with open(filenam
char: e
1 retval:             with open(filename
char: )
1 retval:             with open(filename)
char:  
1 retval:             with open(filename) 
char: a
1 retval:             with open(filename) a
char: s
1 retval:             with open(filename) as
char:  
1 retval:             with open(filename) as 
char: f
1 retval:             with open(filename) as f
char: i
1 retval:             with open(filename) as fi
char: l
1 retval:             with open(filename) as fil
char: e
1 retval:             with open(filename) as file
char: :
1 retval:             with open(filename) as file:
char: 

1 retval:             with open(filename) as file:
2 retval:             with open(filename) as file:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char:  
1 retval:              
char:  
1 retval:               
char:  
1 retval:                
char:  
1 retval:                 
char: s
1 retval:                 s
char: q
1 retval:                 sq
char: l
1 retval:                 sql
char:  
1 retval:                 sql 
char: =
1 retval:                 sql =
char:  
1 retval:                 sql = 
char: f
1 retval:                 sql = f
char: i
1 retval:                 sql = fi
char: l
1 retval:                 sql = fil
char: e
1 retval:                 sql = file
char: .
1 retval:                 sql = file.
char: r
1 retval:                 sql = file.r
char: e
1 retval:                 sql = file.re
char: a
1 retval:                 sql = file.rea
char: d
1 retval:                 sql = file.read
char: (
1 retval:                 sql = file.read(
char: )
1 retval:                 sql = file.read()
char: 

1 retval:                 sql = file.read()
2 retval:                 sql = file.read()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: #
1 retval:         #
char:  
1 retval:         # 
char: s
1 retval:         # s
char: u
1 retval:         # su
char: p
1 retval:         # sup
char: p
1 retval:         # supp
char: o
1 retval:         # suppo
char: r
1 retval:         # suppor
char: t
1 retval:         # support
char:  
1 retval:         # support 
char: m
1 retval:         # support m
char: u
1 retval:         # support mu
char: s
1 retval:         # support mus
char: t
1 retval:         # support must
char: a
1 retval:         # support musta
char: c
1 retval:         # support mustac
char: h
1 retval:         # support mustach
char: e
1 retval:         # support mustache
char:  
1 retval:         # support mustache 
char: s
1 retval:         # support mustache s
char: t
1 retval:         # support mustache st
char: y
1 retval:         # support mustache sty
char: l
1 retval:         # support mustache styl
char: e
1 retval:         # support mustache style
char:  
1 retval:         # support mustache style 
char: b
1 retval:         # support mustache style b
char: i
1 retval:         # support mustache style bi
char: n
1 retval:         # support mustache style bin
char: d
1 retval:         # support mustache style bind
char: i
1 retval:         # support mustache style bindi
char: n
1 retval:         # support mustache style bindin
char: g
1 retval:         # support mustache style binding
char: s
1 retval:         # support mustache style bindings
char: 

1 retval:         # support mustache style bindings
2 retval:         # support mustache style bindings
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: q
1 retval:         sq
char: l
1 retval:         sql
char:  
1 retval:         sql 
char: =
1 retval:         sql =
char:  
1 retval:         sql = 
char: r
1 retval:         sql = r
char: e
1 retval:         sql = re
char: .
1 retval:         sql = re.
char: s
1 retval:         sql = re.s
char: u
1 retval:         sql = re.su
char: b
1 retval:         sql = re.sub
char: (
1 retval:         sql = re.sub(
char: r
1 retval:         sql = re.sub(r
char: '
1 retval:         sql = re.sub(r'
char: \
1 retval:         sql = re.sub(r'\
char: {
1 retval:         sql = re.sub(r'\{
char: (
1 retval:         sql = re.sub(r'\{(
char: \
1 retval:         sql = re.sub(r'\{(\
char: w
1 retval:         sql = re.sub(r'\{(\w
char: +
1 retval:         sql = re.sub(r'\{(\w+
char: ?
1 retval:         sql = re.sub(r'\{(\w+?
char: )
1 retval:         sql = re.sub(r'\{(\w+?)
char: \
1 retval:         sql = re.sub(r'\{(\w+?)\
char: }
1 retval:         sql = re.sub(r'\{(\w+?)\}
char: '
1 retval:         sql = re.sub(r'\{(\w+?)\}'
char: ,
1 retval:         sql = re.sub(r'\{(\w+?)\}',
char:  
1 retval:         sql = re.sub(r'\{(\w+?)\}', 
char: r
1 retval:         sql = re.sub(r'\{(\w+?)\}', r
char: '
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'
char: %
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%
char: (
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(
char: \
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\
char: 1
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1
char: )
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)
char: s
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s
char: '
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s'
char: ,
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s',
char:  
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', 
char: s
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', s
char: q
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sq
char: l
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sql
char: )
1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sql)
char: 

1 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sql)
2 retval:         sql = re.sub(r'\{(\w+?)\}', r'%(\1)s', sql)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: q
1 retval:         return sq
char: l
1 retval:         return sql
char: 

1 retval:         return sql
2 retval:         return sql
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: d
1 retval:     d
char: e
1 retval:     de
char: f
1 retval:     def
char:  
1 retval:     def 
char: _
1 retval:     def _
char: _
1 retval:     def __
char: e
1 retval:     def __e
char: x
1 retval:     def __ex
char: e
1 retval:     def __exe
char: c
1 retval:     def __exec
char: u
1 retval:     def __execu
char: t
1 retval:     def __execut
char: e
1 retval:     def __execute
char: (
1 retval:     def __execute(
char: s
1 retval:     def __execute(s
char: e
1 retval:     def __execute(se
char: l
1 retval:     def __execute(sel
char: f
1 retval:     def __execute(self
char: ,
1 retval:     def __execute(self,
char:  
1 retval:     def __execute(self, 
char: s
1 retval:     def __execute(self, s
char: q
1 retval:     def __execute(self, sq
char: l
1 retval:     def __execute(self, sql
char: ,
1 retval:     def __execute(self, sql,
char:  
1 retval:     def __execute(self, sql, 
char: b
1 retval:     def __execute(self, sql, b
char: i
1 retval:     def __execute(self, sql, bi
char: n
1 retval:     def __execute(self, sql, bin
char: d
1 retval:     def __execute(self, sql, bind
char: i
1 retval:     def __execute(self, sql, bindi
char: n
1 retval:     def __execute(self, sql, bindin
char: g
1 retval:     def __execute(self, sql, binding
char: s
1 retval:     def __execute(self, sql, bindings
char: )
1 retval:     def __execute(self, sql, bindings)
char: :
1 retval:     def __execute(self, sql, bindings):
char: 

1 retval:     def __execute(self, sql, bindings):
2 retval:     def __execute(self, sql, bindings):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: i
1 retval:         i
char: f
1 retval:         if
char:  
1 retval:         if 
char: s
1 retval:         if s
char: e
1 retval:         if se
char: l
1 retval:         if sel
char: f
1 retval:         if self
char: .
1 retval:         if self.
char: _
1 retval:         if self._
char: c
1 retval:         if self._c
char: o
1 retval:         if self._co
char: n
1 retval:         if self._con
char: n
1 retval:         if self._conn
char: e
1 retval:         if self._conne
char: c
1 retval:         if self._connec
char: t
1 retval:         if self._connect
char: i
1 retval:         if self._connecti
char: o
1 retval:         if self._connectio
char: n
1 retval:         if self._connection
char:  
1 retval:         if self._connection 
char: i
1 retval:         if self._connection i
char: s
1 retval:         if self._connection is
char:  
1 retval:         if self._connection is 
char: N
1 retval:         if self._connection is N
char: o
1 retval:         if self._connection is No
char: n
1 retval:         if self._connection is Non
char: e
1 retval:         if self._connection is None
char: :
1 retval:         if self._connection is None:
char: 

1 retval:         if self._connection is None:
2 retval:         if self._connection is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char:  
1 retval:          
char:  
1 retval:           
char:  
1 retval:            
char:  
1 retval:             
char: s
1 retval:             s
char: e
1 retval:             se
char: l
1 retval:             sel
char: f
1 retval:             self
char: .
1 retval:             self.
char: _
1 retval:             self._
char: c
1 retval:             self._c
char: o
1 retval:             self._co
char: n
1 retval:             self._con
char: n
1 retval:             self._conn
char: e
1 retval:             self._conne
char: c
1 retval:             self._connec
char: t
1 retval:             self._connect
char: i
1 retval:             self._connecti
char: o
1 retval:             self._connectio
char: n
1 retval:             self._connection
char:  
1 retval:             self._connection 
char: =
1 retval:             self._connection =
char:  
1 retval:             self._connection = 
char: s
1 retval:             self._connection = s
char: e
1 retval:             self._connection = se
char: l
1 retval:             self._connection = sel
char: f
1 retval:             self._connection = self
char: .
1 retval:             self._connection = self.
char: _
1 retval:             self._connection = self._
char: e
1 retval:             self._connection = self._e
char: n
1 retval:             self._connection = self._en
char: g
1 retval:             self._connection = self._eng
char: i
1 retval:             self._connection = self._engi
char: n
1 retval:             self._connection = self._engin
char: e
1 retval:             self._connection = self._engine
char: .
1 retval:             self._connection = self._engine.
char: c
1 retval:             self._connection = self._engine.c
char: o
1 retval:             self._connection = self._engine.co
char: n
1 retval:             self._connection = self._engine.con
char: n
1 retval:             self._connection = self._engine.conn
char: e
1 retval:             self._connection = self._engine.conne
char: c
1 retval:             self._connection = self._engine.connec
char: t
1 retval:             self._connection = self._engine.connect
char: (
1 retval:             self._connection = self._engine.connect(
char: )
1 retval:             self._connection = self._engine.connect()
char: 

1 retval:             self._connection = self._engine.connect()
2 retval:             self._connection = self._engine.connect()
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: r
1 retval:         r
char: e
1 retval:         re
char: t
1 retval:         ret
char: u
1 retval:         retu
char: r
1 retval:         retur
char: n
1 retval:         return
char:  
1 retval:         return 
char: s
1 retval:         return s
char: e
1 retval:         return se
char: l
1 retval:         return sel
char: f
1 retval:         return self
char: .
1 retval:         return self.
char: _
1 retval:         return self._
char: c
1 retval:         return self._c
char: o
1 retval:         return self._co
char: n
1 retval:         return self._con
char: n
1 retval:         return self._conn
char: e
1 retval:         return self._conne
char: c
1 retval:         return self._connec
char: t
1 retval:         return self._connect
char: i
1 retval:         return self._connecti
char: o
1 retval:         return self._connectio
char: n
1 retval:         return self._connection
char: .
1 retval:         return self._connection.
char: e
1 retval:         return self._connection.e
char: x
1 retval:         return self._connection.ex
char: e
1 retval:         return self._connection.exe
char: c
1 retval:         return self._connection.exec
char: u
1 retval:         return self._connection.execu
char: t
1 retval:         return self._connection.execut
char: e
1 retval:         return self._connection.execute
char: (
1 retval:         return self._connection.execute(
char: s
1 retval:         return self._connection.execute(s
char: q
1 retval:         return self._connection.execute(sq
char: l
1 retval:         return self._connection.execute(sql
char: ,
1 retval:         return self._connection.execute(sql,
char:  
1 retval:         return self._connection.execute(sql, 
char: b
1 retval:         return self._connection.execute(sql, b
char: i
1 retval:         return self._connection.execute(sql, bi
char: n
1 retval:         return self._connection.execute(sql, bin
char: d
1 retval:         return self._connection.execute(sql, bind
char: i
1 retval:         return self._connection.execute(sql, bindi
char: n
1 retval:         return self._connection.execute(sql, bindin
char: g
1 retval:         return self._connection.execute(sql, binding
char: s
1 retval:         return self._connection.execute(sql, bindings
char: )
1 retval:         return self._connection.execute(sql, bindings)
char: 

1 retval:         return self._connection.execute(sql, bindings)
2 retval:         return self._connection.execute(sql, bindings)
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: @
1 retval: @
char: e
1 retval: @e
char: v
1 retval: @ev
char: e
1 retval: @eve
char: n
1 retval: @even
char: t
1 retval: @event
char: .
1 retval: @event.
char: l
1 retval: @event.l
char: i
1 retval: @event.li
char: s
1 retval: @event.lis
char: t
1 retval: @event.list
char: e
1 retval: @event.liste
char: n
1 retval: @event.listen
char: s
1 retval: @event.listens
char: _
1 retval: @event.listens_
char: f
1 retval: @event.listens_f
char: o
1 retval: @event.listens_fo
char: r
1 retval: @event.listens_for
char: (
1 retval: @event.listens_for(
char: E
1 retval: @event.listens_for(E
char: n
1 retval: @event.listens_for(En
char: g
1 retval: @event.listens_for(Eng
char: i
1 retval: @event.listens_for(Engi
char: n
1 retval: @event.listens_for(Engin
char: e
1 retval: @event.listens_for(Engine
char: ,
1 retval: @event.listens_for(Engine,
char:  
1 retval: @event.listens_for(Engine, 
char: "
1 retval: @event.listens_for(Engine, "
char: b
1 retval: @event.listens_for(Engine, "b
char: e
1 retval: @event.listens_for(Engine, "be
char: f
1 retval: @event.listens_for(Engine, "bef
char: o
1 retval: @event.listens_for(Engine, "befo
char: r
1 retval: @event.listens_for(Engine, "befor
char: e
1 retval: @event.listens_for(Engine, "before
char: _
1 retval: @event.listens_for(Engine, "before_
char: c
1 retval: @event.listens_for(Engine, "before_c
char: u
1 retval: @event.listens_for(Engine, "before_cu
char: r
1 retval: @event.listens_for(Engine, "before_cur
char: s
1 retval: @event.listens_for(Engine, "before_curs
char: o
1 retval: @event.listens_for(Engine, "before_curso
char: r
1 retval: @event.listens_for(Engine, "before_cursor
char: _
1 retval: @event.listens_for(Engine, "before_cursor_
char: e
1 retval: @event.listens_for(Engine, "before_cursor_e
char: x
1 retval: @event.listens_for(Engine, "before_cursor_ex
char: e
1 retval: @event.listens_for(Engine, "before_cursor_exe
char: c
1 retval: @event.listens_for(Engine, "before_cursor_exec
char: u
1 retval: @event.listens_for(Engine, "before_cursor_execu
char: t
1 retval: @event.listens_for(Engine, "before_cursor_execut
char: e
1 retval: @event.listens_for(Engine, "before_cursor_execute
char: "
1 retval: @event.listens_for(Engine, "before_cursor_execute"
char: ,
1 retval: @event.listens_for(Engine, "before_cursor_execute",
char:  
1 retval: @event.listens_for(Engine, "before_cursor_execute", 
char: r
1 retval: @event.listens_for(Engine, "before_cursor_execute", r
char: e
1 retval: @event.listens_for(Engine, "before_cursor_execute", re
char: t
1 retval: @event.listens_for(Engine, "before_cursor_execute", ret
char: v
1 retval: @event.listens_for(Engine, "before_cursor_execute", retv
char: a
1 retval: @event.listens_for(Engine, "before_cursor_execute", retva
char: l
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval
char: =
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=
char: T
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=T
char: r
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=Tr
char: u
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=Tru
char: e
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=True
char: )
1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=True)
char: 

1 retval: @event.listens_for(Engine, "before_cursor_execute", retval=True)
2 retval: @event.listens_for(Engine, "before_cursor_execute", retval=True)
char: d
1 retval: d
char: e
1 retval: de
char: f
1 retval: def
char:  
1 retval: def 
char: c
1 retval: def c
char: o
1 retval: def co
char: m
1 retval: def com
char: m
1 retval: def comm
char: e
1 retval: def comme
char: n
1 retval: def commen
char: t
1 retval: def comment
char: _
1 retval: def comment_
char: s
1 retval: def comment_s
char: q
1 retval: def comment_sq
char: l
1 retval: def comment_sql
char: _
1 retval: def comment_sql_
char: c
1 retval: def comment_sql_c
char: a
1 retval: def comment_sql_ca
char: l
1 retval: def comment_sql_cal
char: l
1 retval: def comment_sql_call
char: s
1 retval: def comment_sql_calls
char: (
1 retval: def comment_sql_calls(
char: c
1 retval: def comment_sql_calls(c
char: o
1 retval: def comment_sql_calls(co
char: n
1 retval: def comment_sql_calls(con
char: n
1 retval: def comment_sql_calls(conn
char: ,
1 retval: def comment_sql_calls(conn,
char:  
1 retval: def comment_sql_calls(conn, 
char: c
1 retval: def comment_sql_calls(conn, c
char: u
1 retval: def comment_sql_calls(conn, cu
char: r
1 retval: def comment_sql_calls(conn, cur
char: s
1 retval: def comment_sql_calls(conn, curs
char: o
1 retval: def comment_sql_calls(conn, curso
char: r
1 retval: def comment_sql_calls(conn, cursor
char: ,
1 retval: def comment_sql_calls(conn, cursor,
char:  
1 retval: def comment_sql_calls(conn, cursor, 
char: s
1 retval: def comment_sql_calls(conn, cursor, s
char: t
1 retval: def comment_sql_calls(conn, cursor, st
char: a
1 retval: def comment_sql_calls(conn, cursor, sta
char: t
1 retval: def comment_sql_calls(conn, cursor, stat
char: e
1 retval: def comment_sql_calls(conn, cursor, state
char: m
1 retval: def comment_sql_calls(conn, cursor, statem
char: e
1 retval: def comment_sql_calls(conn, cursor, stateme
char: n
1 retval: def comment_sql_calls(conn, cursor, statemen
char: t
1 retval: def comment_sql_calls(conn, cursor, statement
char: ,
1 retval: def comment_sql_calls(conn, cursor, statement,
char:  
1 retval: def comment_sql_calls(conn, cursor, statement, 
char: p
1 retval: def comment_sql_calls(conn, cursor, statement, p
char: a
1 retval: def comment_sql_calls(conn, cursor, statement, pa
char: r
1 retval: def comment_sql_calls(conn, cursor, statement, par
char: a
1 retval: def comment_sql_calls(conn, cursor, statement, para
char: m
1 retval: def comment_sql_calls(conn, cursor, statement, param
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, parame
char: t
1 retval: def comment_sql_calls(conn, cursor, statement, paramet
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, paramete
char: r
1 retval: def comment_sql_calls(conn, cursor, statement, parameter
char: s
1 retval: def comment_sql_calls(conn, cursor, statement, parameters
char: ,
1 retval: def comment_sql_calls(conn, cursor, statement, parameters,
char:  
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, 
char: c
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, c
char: o
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, co
char: n
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, con
char: t
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, cont
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, conte
char: x
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, contex
char: t
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context
char: ,
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context,
char:  
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, 
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, e
char: x
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, ex
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, exe
char: c
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, exec
char: u
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, execu
char: t
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, execut
char: e
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, execute
char: m
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executem
char: a
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executema
char: n
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executeman
char: y
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executemany
char: )
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executemany)
char: :
1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executemany):
char: 

1 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executemany):
2 retval: def comment_sql_calls(conn, cursor, statement, parameters, context, executemany):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: c
1 retval:     c
char: o
1 retval:     co
char: n
1 retval:     con
char: n
1 retval:     conn
char: .
1 retval:     conn.
char: i
1 retval:     conn.i
char: n
1 retval:     conn.in
char: f
1 retval:     conn.inf
char: o
1 retval:     conn.info
char: .
1 retval:     conn.info.
char: s
1 retval:     conn.info.s
char: e
1 retval:     conn.info.se
char: t
1 retval:     conn.info.set
char: d
1 retval:     conn.info.setd
char: e
1 retval:     conn.info.setde
char: f
1 retval:     conn.info.setdef
char: a
1 retval:     conn.info.setdefa
char: u
1 retval:     conn.info.setdefau
char: l
1 retval:     conn.info.setdefaul
char: t
1 retval:     conn.info.setdefault
char: (
1 retval:     conn.info.setdefault(
char: '
1 retval:     conn.info.setdefault('
char: q
1 retval:     conn.info.setdefault('q
char: u
1 retval:     conn.info.setdefault('qu
char: e
1 retval:     conn.info.setdefault('que
char: r
1 retval:     conn.info.setdefault('quer
char: y
1 retval:     conn.info.setdefault('query
char: _
1 retval:     conn.info.setdefault('query_
char: s
1 retval:     conn.info.setdefault('query_s
char: t
1 retval:     conn.info.setdefault('query_st
char: a
1 retval:     conn.info.setdefault('query_sta
char: r
1 retval:     conn.info.setdefault('query_star
char: t
1 retval:     conn.info.setdefault('query_start
char: _
1 retval:     conn.info.setdefault('query_start_
char: t
1 retval:     conn.info.setdefault('query_start_t
char: i
1 retval:     conn.info.setdefault('query_start_ti
char: m
1 retval:     conn.info.setdefault('query_start_tim
char: e
1 retval:     conn.info.setdefault('query_start_time
char: '
1 retval:     conn.info.setdefault('query_start_time'
char: ,
1 retval:     conn.info.setdefault('query_start_time',
char:  
1 retval:     conn.info.setdefault('query_start_time', 
char: [
1 retval:     conn.info.setdefault('query_start_time', [
char: ]
1 retval:     conn.info.setdefault('query_start_time', []
char: )
1 retval:     conn.info.setdefault('query_start_time', [])
char: .
1 retval:     conn.info.setdefault('query_start_time', []).
char: a
1 retval:     conn.info.setdefault('query_start_time', []).a
char: p
1 retval:     conn.info.setdefault('query_start_time', []).ap
char: p
1 retval:     conn.info.setdefault('query_start_time', []).app
char: e
1 retval:     conn.info.setdefault('query_start_time', []).appe
char: n
1 retval:     conn.info.setdefault('query_start_time', []).appen
char: d
1 retval:     conn.info.setdefault('query_start_time', []).append
char: (
1 retval:     conn.info.setdefault('query_start_time', []).append(
char: d
1 retval:     conn.info.setdefault('query_start_time', []).append(d
char: a
1 retval:     conn.info.setdefault('query_start_time', []).append(da
char: t
1 retval:     conn.info.setdefault('query_start_time', []).append(dat
char: e
1 retval:     conn.info.setdefault('query_start_time', []).append(date
char: t
1 retval:     conn.info.setdefault('query_start_time', []).append(datet
char: i
1 retval:     conn.info.setdefault('query_start_time', []).append(dateti
char: m
1 retval:     conn.info.setdefault('query_start_time', []).append(datetim
char: e
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime
char: .
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.
char: n
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.n
char: o
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.no
char: w
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now
char: (
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now(
char: )
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now()
char: )
1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now())
char: 

1 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now())
2 retval:     conn.info.setdefault('query_start_time', []).append(datetime.now())
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: s
1 retval:     s
char: t
1 retval:     st
char: a
1 retval:     sta
char: c
1 retval:     stac
char: k
1 retval:     stack
char:  
1 retval:     stack 
char: =
1 retval:     stack =
char:  
1 retval:     stack = 
char: i
1 retval:     stack = i
char: n
1 retval:     stack = in
char: s
1 retval:     stack = ins
char: p
1 retval:     stack = insp
char: e
1 retval:     stack = inspe
char: c
1 retval:     stack = inspec
char: t
1 retval:     stack = inspect
char: .
1 retval:     stack = inspect.
char: s
1 retval:     stack = inspect.s
char: t
1 retval:     stack = inspect.st
char: a
1 retval:     stack = inspect.sta
char: c
1 retval:     stack = inspect.stac
char: k
1 retval:     stack = inspect.stack
char: (
1 retval:     stack = inspect.stack(
char: )
1 retval:     stack = inspect.stack()
char: [
1 retval:     stack = inspect.stack()[
char: 1
1 retval:     stack = inspect.stack()[1
char: :
1 retval:     stack = inspect.stack()[1:
char: -
1 retval:     stack = inspect.stack()[1:-
char: 1
1 retval:     stack = inspect.stack()[1:-1
char: ]
1 retval:     stack = inspect.stack()[1:-1]
char: 

1 retval:     stack = inspect.stack()[1:-1]
2 retval:     stack = inspect.stack()[1:-1]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: i
1 retval:     i
char: f
1 retval:     if
char:  
1 retval:     if 
char: s
1 retval:     if s
char: y
1 retval:     if sy
char: s
1 retval:     if sys
char: .
1 retval:     if sys.
char: v
1 retval:     if sys.v
char: e
1 retval:     if sys.ve
char: r
1 retval:     if sys.ver
char: s
1 retval:     if sys.vers
char: i
1 retval:     if sys.versi
char: o
1 retval:     if sys.versio
char: n
1 retval:     if sys.version
char: _
1 retval:     if sys.version_
char: i
1 retval:     if sys.version_i
char: n
1 retval:     if sys.version_in
char: f
1 retval:     if sys.version_inf
char: o
1 retval:     if sys.version_info
char: .
1 retval:     if sys.version_info.
char: m
1 retval:     if sys.version_info.m
char: a
1 retval:     if sys.version_info.ma
char: j
1 retval:     if sys.version_info.maj
char: o
1 retval:     if sys.version_info.majo
char: r
1 retval:     if sys.version_info.major
char:  
1 retval:     if sys.version_info.major 
char: =
1 retval:     if sys.version_info.major =
char: =
1 retval:     if sys.version_info.major ==
char:  
1 retval:     if sys.version_info.major == 
char: 3
1 retval:     if sys.version_info.major == 3
char: :
1 retval:     if sys.version_info.major == 3:
char: 

1 retval:     if sys.version_info.major == 3:
2 retval:     if sys.version_info.major == 3:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: t
1 retval:         st
char: a
1 retval:         sta
char: c
1 retval:         stac
char: k
1 retval:         stack
char:  
1 retval:         stack 
char: =
1 retval:         stack =
char:  
1 retval:         stack = 
char: [
1 retval:         stack = [
char: (
1 retval:         stack = [(
char: x
1 retval:         stack = [(x
char: .
1 retval:         stack = [(x.
char: f
1 retval:         stack = [(x.f
char: i
1 retval:         stack = [(x.fi
char: l
1 retval:         stack = [(x.fil
char: e
1 retval:         stack = [(x.file
char: n
1 retval:         stack = [(x.filen
char: a
1 retval:         stack = [(x.filena
char: m
1 retval:         stack = [(x.filenam
char: e
1 retval:         stack = [(x.filename
char: ,
1 retval:         stack = [(x.filename,
char:  
1 retval:         stack = [(x.filename, 
char: x
1 retval:         stack = [(x.filename, x
char: .
1 retval:         stack = [(x.filename, x.
char: l
1 retval:         stack = [(x.filename, x.l
char: i
1 retval:         stack = [(x.filename, x.li
char: n
1 retval:         stack = [(x.filename, x.lin
char: e
1 retval:         stack = [(x.filename, x.line
char: n
1 retval:         stack = [(x.filename, x.linen
char: o
1 retval:         stack = [(x.filename, x.lineno
char: ,
1 retval:         stack = [(x.filename, x.lineno,
char:  
1 retval:         stack = [(x.filename, x.lineno, 
char: x
1 retval:         stack = [(x.filename, x.lineno, x
char: .
1 retval:         stack = [(x.filename, x.lineno, x.
char: f
1 retval:         stack = [(x.filename, x.lineno, x.f
char: u
1 retval:         stack = [(x.filename, x.lineno, x.fu
char: n
1 retval:         stack = [(x.filename, x.lineno, x.fun
char: c
1 retval:         stack = [(x.filename, x.lineno, x.func
char: t
1 retval:         stack = [(x.filename, x.lineno, x.funct
char: i
1 retval:         stack = [(x.filename, x.lineno, x.functi
char: o
1 retval:         stack = [(x.filename, x.lineno, x.functio
char: n
1 retval:         stack = [(x.filename, x.lineno, x.function
char: )
1 retval:         stack = [(x.filename, x.lineno, x.function)
char:  
1 retval:         stack = [(x.filename, x.lineno, x.function) 
char: f
1 retval:         stack = [(x.filename, x.lineno, x.function) f
char: o
1 retval:         stack = [(x.filename, x.lineno, x.function) fo
char: r
1 retval:         stack = [(x.filename, x.lineno, x.function) for
char:  
1 retval:         stack = [(x.filename, x.lineno, x.function) for 
char: x
1 retval:         stack = [(x.filename, x.lineno, x.function) for x
char:  
1 retval:         stack = [(x.filename, x.lineno, x.function) for x 
char: i
1 retval:         stack = [(x.filename, x.lineno, x.function) for x i
char: n
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in
char:  
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in 
char: s
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in s
char: t
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in st
char: a
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in sta
char: c
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in stac
char: k
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in stack
char: ]
1 retval:         stack = [(x.filename, x.lineno, x.function) for x in stack]
char: 

1 retval:         stack = [(x.filename, x.lineno, x.function) for x in stack]
2 retval:         stack = [(x.filename, x.lineno, x.function) for x in stack]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: e
1 retval:     e
char: l
1 retval:     el
char: s
1 retval:     els
char: e
1 retval:     else
char: :
1 retval:     else:
char: 

1 retval:     else:
2 retval:     else:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: s
1 retval:         s
char: t
1 retval:         st
char: a
1 retval:         sta
char: c
1 retval:         stac
char: k
1 retval:         stack
char:  
1 retval:         stack 
char: =
1 retval:         stack =
char:  
1 retval:         stack = 
char: [
1 retval:         stack = [
char: (
1 retval:         stack = [(
char: x
1 retval:         stack = [(x
char: [
1 retval:         stack = [(x[
char: 1
1 retval:         stack = [(x[1
char: ]
1 retval:         stack = [(x[1]
char: ,
1 retval:         stack = [(x[1],
char:  
1 retval:         stack = [(x[1], 
char: x
1 retval:         stack = [(x[1], x
char: [
1 retval:         stack = [(x[1], x[
char: 2
1 retval:         stack = [(x[1], x[2
char: ]
1 retval:         stack = [(x[1], x[2]
char: ,
1 retval:         stack = [(x[1], x[2],
char:  
1 retval:         stack = [(x[1], x[2], 
char: x
1 retval:         stack = [(x[1], x[2], x
char: [
1 retval:         stack = [(x[1], x[2], x[
char: 3
1 retval:         stack = [(x[1], x[2], x[3
char: ]
1 retval:         stack = [(x[1], x[2], x[3]
char: )
1 retval:         stack = [(x[1], x[2], x[3])
char:  
1 retval:         stack = [(x[1], x[2], x[3]) 
char: f
1 retval:         stack = [(x[1], x[2], x[3]) f
char: o
1 retval:         stack = [(x[1], x[2], x[3]) fo
char: r
1 retval:         stack = [(x[1], x[2], x[3]) for
char:  
1 retval:         stack = [(x[1], x[2], x[3]) for 
char: x
1 retval:         stack = [(x[1], x[2], x[3]) for x
char:  
1 retval:         stack = [(x[1], x[2], x[3]) for x 
char: i
1 retval:         stack = [(x[1], x[2], x[3]) for x i
char: n
1 retval:         stack = [(x[1], x[2], x[3]) for x in
char:  
1 retval:         stack = [(x[1], x[2], x[3]) for x in 
char: s
1 retval:         stack = [(x[1], x[2], x[3]) for x in s
char: t
1 retval:         stack = [(x[1], x[2], x[3]) for x in st
char: a
1 retval:         stack = [(x[1], x[2], x[3]) for x in sta
char: c
1 retval:         stack = [(x[1], x[2], x[3]) for x in stac
char: k
1 retval:         stack = [(x[1], x[2], x[3]) for x in stack
char: ]
1 retval:         stack = [(x[1], x[2], x[3]) for x in stack]
char: 

1 retval:         stack = [(x[1], x[2], x[3]) for x in stack]
2 retval:         stack = [(x[1], x[2], x[3]) for x in stack]
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: p
1 retval:     p
char: a
1 retval:     pa
char: t
1 retval:     pat
char: h
1 retval:     path
char: s
1 retval:     paths
char:  
1 retval:     paths 
char: =
1 retval:     paths =
char:  
1 retval:     paths = 
char: [
1 retval:     paths = [
char: x
1 retval:     paths = [x
char: [
1 retval:     paths = [x[
char: 0
1 retval:     paths = [x[0
char: ]
1 retval:     paths = [x[0]
char:  
1 retval:     paths = [x[0] 
char: f
1 retval:     paths = [x[0] f
char: o
1 retval:     paths = [x[0] fo
char: r
1 retval:     paths = [x[0] for
char:  
1 retval:     paths = [x[0] for 
char: x
1 retval:     paths = [x[0] for x
char:  
1 retval:     paths = [x[0] for x 
char: i
1 retval:     paths = [x[0] for x i
char: n
1 retval:     paths = [x[0] for x in
char:  
1 retval:     paths = [x[0] for x in 
char: s
1 retval:     paths = [x[0] for x in s
char: t
1 retval:     paths = [x[0] for x in st
char: a
1 retval:     paths = [x[0] for x in sta
char: c
1 retval:     paths = [x[0] for x in stac
char: k
1 retval:     paths = [x[0] for x in stack
char: ]
1 retval:     paths = [x[0] for x in stack]
char: 

1 retval:     paths = [x[0] for x in stack]
2 retval:     paths = [x[0] for x in stack]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: o
1 retval:     o
char: r
1 retval:     or
char: i
1 retval:     ori
char: g
1 retval:     orig
char: i
1 retval:     origi
char: n
1 retval:     origin
char:  
1 retval:     origin 
char: =
1 retval:     origin =
char:  
1 retval:     origin = 
char: n
1 retval:     origin = n
char: e
1 retval:     origin = ne
char: x
1 retval:     origin = nex
char: t
1 retval:     origin = next
char: (
1 retval:     origin = next(
char: (
1 retval:     origin = next((
char: x
1 retval:     origin = next((x
char:  
1 retval:     origin = next((x 
char: f
1 retval:     origin = next((x f
char: o
1 retval:     origin = next((x fo
char: r
1 retval:     origin = next((x for
char:  
1 retval:     origin = next((x for 
char: x
1 retval:     origin = next((x for x
char:  
1 retval:     origin = next((x for x 
char: i
1 retval:     origin = next((x for x i
char: n
1 retval:     origin = next((x for x in
char:  
1 retval:     origin = next((x for x in 
char: p
1 retval:     origin = next((x for x in p
char: a
1 retval:     origin = next((x for x in pa
char: t
1 retval:     origin = next((x for x in pat
char: h
1 retval:     origin = next((x for x in path
char: s
1 retval:     origin = next((x for x in paths
char:  
1 retval:     origin = next((x for x in paths 
char: i
1 retval:     origin = next((x for x in paths i
char: f
1 retval:     origin = next((x for x in paths if
char:  
1 retval:     origin = next((x for x in paths if 
char: l
1 retval:     origin = next((x for x in paths if l
char: o
1 retval:     origin = next((x for x in paths if lo
char: r
1 retval:     origin = next((x for x in paths if lor
char: e
1 retval:     origin = next((x for x in paths if lore
char: .
1 retval:     origin = next((x for x in paths if lore.
char: e
1 retval:     origin = next((x for x in paths if lore.e
char: n
1 retval:     origin = next((x for x in paths if lore.en
char: v
1 retval:     origin = next((x for x in paths if lore.env
char: .
1 retval:     origin = next((x for x in paths if lore.env.
char: p
1 retval:     origin = next((x for x in paths if lore.env.p
char: r
1 retval:     origin = next((x for x in paths if lore.env.pr
char: o
1 retval:     origin = next((x for x in paths if lore.env.pro
char: j
1 retval:     origin = next((x for x in paths if lore.env.proj
char: e
1 retval:     origin = next((x for x in paths if lore.env.proje
char: c
1 retval:     origin = next((x for x in paths if lore.env.projec
char: t
1 retval:     origin = next((x for x in paths if lore.env.project
char:  
1 retval:     origin = next((x for x in paths if lore.env.project 
char: i
1 retval:     origin = next((x for x in paths if lore.env.project i
char: n
1 retval:     origin = next((x for x in paths if lore.env.project in
char:  
1 retval:     origin = next((x for x in paths if lore.env.project in 
char: x
1 retval:     origin = next((x for x in paths if lore.env.project in x
char: )
1 retval:     origin = next((x for x in paths if lore.env.project in x)
char: ,
1 retval:     origin = next((x for x in paths if lore.env.project in x),
char:  
1 retval:     origin = next((x for x in paths if lore.env.project in x), 
char: N
1 retval:     origin = next((x for x in paths if lore.env.project in x), N
char: o
1 retval:     origin = next((x for x in paths if lore.env.project in x), No
char: n
1 retval:     origin = next((x for x in paths if lore.env.project in x), Non
char: e
1 retval:     origin = next((x for x in paths if lore.env.project in x), None
char: )
1 retval:     origin = next((x for x in paths if lore.env.project in x), None)
char: 

1 retval:     origin = next((x for x in paths if lore.env.project in x), None)
2 retval:     origin = next((x for x in paths if lore.env.project in x), None)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: i
1 retval:     i
char: f
1 retval:     if
char:  
1 retval:     if 
char: o
1 retval:     if o
char: r
1 retval:     if or
char: i
1 retval:     if ori
char: g
1 retval:     if orig
char: i
1 retval:     if origi
char: n
1 retval:     if origin
char:  
1 retval:     if origin 
char: i
1 retval:     if origin i
char: s
1 retval:     if origin is
char:  
1 retval:     if origin is 
char: N
1 retval:     if origin is N
char: o
1 retval:     if origin is No
char: n
1 retval:     if origin is Non
char: e
1 retval:     if origin is None
char: :
1 retval:     if origin is None:
char: 

1 retval:     if origin is None:
2 retval:     if origin is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: o
1 retval:         o
char: r
1 retval:         or
char: i
1 retval:         ori
char: g
1 retval:         orig
char: i
1 retval:         origi
char: n
1 retval:         origin
char:  
1 retval:         origin 
char: =
1 retval:         origin =
char:  
1 retval:         origin = 
char: n
1 retval:         origin = n
char: e
1 retval:         origin = ne
char: x
1 retval:         origin = nex
char: t
1 retval:         origin = next
char: (
1 retval:         origin = next(
char: (
1 retval:         origin = next((
char: x
1 retval:         origin = next((x
char:  
1 retval:         origin = next((x 
char: f
1 retval:         origin = next((x f
char: o
1 retval:         origin = next((x fo
char: r
1 retval:         origin = next((x for
char:  
1 retval:         origin = next((x for 
char: x
1 retval:         origin = next((x for x
char:  
1 retval:         origin = next((x for x 
char: i
1 retval:         origin = next((x for x i
char: n
1 retval:         origin = next((x for x in
char:  
1 retval:         origin = next((x for x in 
char: p
1 retval:         origin = next((x for x in p
char: a
1 retval:         origin = next((x for x in pa
char: t
1 retval:         origin = next((x for x in pat
char: h
1 retval:         origin = next((x for x in path
char: s
1 retval:         origin = next((x for x in paths
char:  
1 retval:         origin = next((x for x in paths 
char: i
1 retval:         origin = next((x for x in paths i
char: f
1 retval:         origin = next((x for x in paths if
char:  
1 retval:         origin = next((x for x in paths if 
char: '
1 retval:         origin = next((x for x in paths if '
char: s
1 retval:         origin = next((x for x in paths if 's
char: q
1 retval:         origin = next((x for x in paths if 'sq
char: l
1 retval:         origin = next((x for x in paths if 'sql
char: a
1 retval:         origin = next((x for x in paths if 'sqla
char: l
1 retval:         origin = next((x for x in paths if 'sqlal
char: c
1 retval:         origin = next((x for x in paths if 'sqlalc
char: h
1 retval:         origin = next((x for x in paths if 'sqlalch
char: e
1 retval:         origin = next((x for x in paths if 'sqlalche
char: m
1 retval:         origin = next((x for x in paths if 'sqlalchem
char: y
1 retval:         origin = next((x for x in paths if 'sqlalchemy
char: '
1 retval:         origin = next((x for x in paths if 'sqlalchemy'
char:  
1 retval:         origin = next((x for x in paths if 'sqlalchemy' 
char: n
1 retval:         origin = next((x for x in paths if 'sqlalchemy' n
char: o
1 retval:         origin = next((x for x in paths if 'sqlalchemy' no
char: t
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not
char:  
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not 
char: i
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not i
char: n
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in
char:  
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in 
char: x
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x
char: )
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x)
char: ,
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x),
char:  
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), 
char: N
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), N
char: o
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), No
char: n
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), Non
char: e
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), None
char: )
1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), None)
char: 

1 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), None)
2 retval:         origin = next((x for x in paths if 'sqlalchemy' not in x), None)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: i
1 retval:     i
char: f
1 retval:     if
char:  
1 retval:     if 
char: o
1 retval:     if o
char: r
1 retval:     if or
char: i
1 retval:     if ori
char: g
1 retval:     if orig
char: i
1 retval:     if origi
char: n
1 retval:     if origin
char:  
1 retval:     if origin 
char: i
1 retval:     if origin i
char: s
1 retval:     if origin is
char:  
1 retval:     if origin is 
char: N
1 retval:     if origin is N
char: o
1 retval:     if origin is No
char: n
1 retval:     if origin is Non
char: e
1 retval:     if origin is None
char: :
1 retval:     if origin is None:
char: 

1 retval:     if origin is None:
2 retval:     if origin is None:
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char:  
1 retval:      
char:  
1 retval:       
char:  
1 retval:        
char:  
1 retval:         
char: o
1 retval:         o
char: r
1 retval:         or
char: i
1 retval:         ori
char: g
1 retval:         orig
char: i
1 retval:         origi
char: n
1 retval:         origin
char:  
1 retval:         origin 
char: =
1 retval:         origin =
char:  
1 retval:         origin = 
char: p
1 retval:         origin = p
char: a
1 retval:         origin = pa
char: t
1 retval:         origin = pat
char: h
1 retval:         origin = path
char: s
1 retval:         origin = paths
char: [
1 retval:         origin = paths[
char: 0
1 retval:         origin = paths[0
char: ]
1 retval:         origin = paths[0]
char: 

1 retval:         origin = paths[0]
2 retval:         origin = paths[0]
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: c
1 retval:     c
char: a
1 retval:     ca
char: l
1 retval:     cal
char: l
1 retval:     call
char: e
1 retval:     calle
char: r
1 retval:     caller
char:  
1 retval:     caller 
char: =
1 retval:     caller =
char:  
1 retval:     caller = 
char: n
1 retval:     caller = n
char: e
1 retval:     caller = ne
char: x
1 retval:     caller = nex
char: t
1 retval:     caller = next
char: (
1 retval:     caller = next(
char: x
1 retval:     caller = next(x
char:  
1 retval:     caller = next(x 
char: f
1 retval:     caller = next(x f
char: o
1 retval:     caller = next(x fo
char: r
1 retval:     caller = next(x for
char:  
1 retval:     caller = next(x for 
char: x
1 retval:     caller = next(x for x
char:  
1 retval:     caller = next(x for x 
char: i
1 retval:     caller = next(x for x i
char: n
1 retval:     caller = next(x for x in
char:  
1 retval:     caller = next(x for x in 
char: s
1 retval:     caller = next(x for x in s
char: t
1 retval:     caller = next(x for x in st
char: a
1 retval:     caller = next(x for x in sta
char: c
1 retval:     caller = next(x for x in stac
char: k
1 retval:     caller = next(x for x in stack
char:  
1 retval:     caller = next(x for x in stack 
char: i
1 retval:     caller = next(x for x in stack i
char: f
1 retval:     caller = next(x for x in stack if
char:  
1 retval:     caller = next(x for x in stack if 
char: x
1 retval:     caller = next(x for x in stack if x
char: [
1 retval:     caller = next(x for x in stack if x[
char: 0
1 retval:     caller = next(x for x in stack if x[0
char: ]
1 retval:     caller = next(x for x in stack if x[0]
char:  
1 retval:     caller = next(x for x in stack if x[0] 
char: =
1 retval:     caller = next(x for x in stack if x[0] =
char: =
1 retval:     caller = next(x for x in stack if x[0] ==
char:  
1 retval:     caller = next(x for x in stack if x[0] == 
char: o
1 retval:     caller = next(x for x in stack if x[0] == o
char: r
1 retval:     caller = next(x for x in stack if x[0] == or
char: i
1 retval:     caller = next(x for x in stack if x[0] == ori
char: g
1 retval:     caller = next(x for x in stack if x[0] == orig
char: i
1 retval:     caller = next(x for x in stack if x[0] == origi
char: n
1 retval:     caller = next(x for x in stack if x[0] == origin
char: )
1 retval:     caller = next(x for x in stack if x[0] == origin)
char: 

1 retval:     caller = next(x for x in stack if x[0] == origin)
2 retval:     caller = next(x for x in stack if x[0] == origin)
char: 

1 retval: 
2 retval: 
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: s
1 retval:     s
char: t
1 retval:     st
char: a
1 retval:     sta
char: t
1 retval:     stat
char: e
1 retval:     state
char: m
1 retval:     statem
char: e
1 retval:     stateme
char: n
1 retval:     statemen
char: t
1 retval:     statement
char:  
1 retval:     statement 
char: =
1 retval:     statement =
char:  
1 retval:     statement = 
char: "
1 retval:     statement = "
char: /
1 retval:     statement = "/
char: *
1 retval:     statement = "/*
char:  
1 retval:     statement = "/* 
char: %
1 retval:     statement = "/* %
char: s
1 retval:     statement = "/* %s
char:  
1 retval:     statement = "/* %s 
char: |
1 retval:     statement = "/* %s |
char:  
1 retval:     statement = "/* %s | 
char: %
1 retval:     statement = "/* %s | %
char: s
1 retval:     statement = "/* %s | %s
char: :
1 retval:     statement = "/* %s | %s:
char: %
1 retval:     statement = "/* %s | %s:%
char: d
1 retval:     statement = "/* %s | %s:%d
char:  
1 retval:     statement = "/* %s | %s:%d 
char: i
1 retval:     statement = "/* %s | %s:%d i
char: n
1 retval:     statement = "/* %s | %s:%d in
char:  
1 retval:     statement = "/* %s | %s:%d in 
char: %
1 retval:     statement = "/* %s | %s:%d in %
char: s
1 retval:     statement = "/* %s | %s:%d in %s
char:  
1 retval:     statement = "/* %s | %s:%d in %s 
char: *
1 retval:     statement = "/* %s | %s:%d in %s *
char: /
1 retval:     statement = "/* %s | %s:%d in %s */
char: \
1 retval:     statement = "/* %s | %s:%d in %s */\
char: n
1 retval:     statement = "/* %s | %s:%d in %s */\n
char: "
1 retval:     statement = "/* %s | %s:%d in %s */\n"
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" 
char: %
1 retval:     statement = "/* %s | %s:%d in %s */\n" %
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % 
char: (
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (l
char: o
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lo
char: r
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lor
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore
char: .
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.e
char: n
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.en
char: v
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env
char: .
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.
char: p
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.p
char: r
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.pr
char: o
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.pro
char: j
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.proj
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.proje
char: c
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.projec
char: t
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project
char: ,
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project,
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, 
char: c
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, c
char: a
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, ca
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, cal
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, call
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, calle
char: r
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller
char: [
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[
char: 0
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0
char: ]
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0]
char: ,
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0],
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], 
char: c
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], c
char: a
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], ca
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], cal
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], call
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], calle
char: r
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller
char: [
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[
char: 1
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1
char: ]
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1]
char: ,
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1],
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], 
char: c
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], c
char: a
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], ca
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], cal
char: l
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], call
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], calle
char: r
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller
char: [
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[
char: 2
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2
char: ]
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]
char: )
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2])
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) 
char: +
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) +
char:  
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + 
char: s
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + s
char: t
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + st
char: a
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + sta
char: t
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + stat
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + state
char: m
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statem
char: e
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + stateme
char: n
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statemen
char: t
1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statement
char: 

1 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statement
2 retval:     statement = "/* %s | %s:%d in %s */\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statement
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: l
1 retval:     l
char: o
1 retval:     lo
char: g
1 retval:     log
char: g
1 retval:     logg
char: e
1 retval:     logge
char: r
1 retval:     logger
char: .
1 retval:     logger.
char: d
1 retval:     logger.d
char: e
1 retval:     logger.de
char: b
1 retval:     logger.deb
char: u
1 retval:     logger.debu
char: g
1 retval:     logger.debug
char: (
1 retval:     logger.debug(
char: s
1 retval:     logger.debug(s
char: t
1 retval:     logger.debug(st
char: a
1 retval:     logger.debug(sta
char: t
1 retval:     logger.debug(stat
char: e
1 retval:     logger.debug(state
char: m
1 retval:     logger.debug(statem
char: e
1 retval:     logger.debug(stateme
char: n
1 retval:     logger.debug(statemen
char: t
1 retval:     logger.debug(statement
char: )
1 retval:     logger.debug(statement)
char: 

1 retval:     logger.debug(statement)
2 retval:     logger.debug(statement)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: r
1 retval:     r
char: e
1 retval:     re
char: t
1 retval:     ret
char: u
1 retval:     retu
char: r
1 retval:     retur
char: n
1 retval:     return
char:  
1 retval:     return 
char: s
1 retval:     return s
char: t
1 retval:     return st
char: a
1 retval:     return sta
char: t
1 retval:     return stat
char: e
1 retval:     return state
char: m
1 retval:     return statem
char: e
1 retval:     return stateme
char: n
1 retval:     return statemen
char: t
1 retval:     return statement
char: ,
1 retval:     return statement,
char:  
1 retval:     return statement, 
char: p
1 retval:     return statement, p
char: a
1 retval:     return statement, pa
char: r
1 retval:     return statement, par
char: a
1 retval:     return statement, para
char: m
1 retval:     return statement, param
char: e
1 retval:     return statement, parame
char: t
1 retval:     return statement, paramet
char: e
1 retval:     return statement, paramete
char: r
1 retval:     return statement, parameter
char: s
1 retval:     return statement, parameters
char: 

1 retval:     return statement, parameters
2 retval:     return statement, parameters
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: @
1 retval: @
char: e
1 retval: @e
char: v
1 retval: @ev
char: e
1 retval: @eve
char: n
1 retval: @even
char: t
1 retval: @event
char: .
1 retval: @event.
char: l
1 retval: @event.l
char: i
1 retval: @event.li
char: s
1 retval: @event.lis
char: t
1 retval: @event.list
char: e
1 retval: @event.liste
char: n
1 retval: @event.listen
char: s
1 retval: @event.listens
char: _
1 retval: @event.listens_
char: f
1 retval: @event.listens_f
char: o
1 retval: @event.listens_fo
char: r
1 retval: @event.listens_for
char: (
1 retval: @event.listens_for(
char: E
1 retval: @event.listens_for(E
char: n
1 retval: @event.listens_for(En
char: g
1 retval: @event.listens_for(Eng
char: i
1 retval: @event.listens_for(Engi
char: n
1 retval: @event.listens_for(Engin
char: e
1 retval: @event.listens_for(Engine
char: ,
1 retval: @event.listens_for(Engine,
char:  
1 retval: @event.listens_for(Engine, 
char: "
1 retval: @event.listens_for(Engine, "
char: a
1 retval: @event.listens_for(Engine, "a
char: f
1 retval: @event.listens_for(Engine, "af
char: t
1 retval: @event.listens_for(Engine, "aft
char: e
1 retval: @event.listens_for(Engine, "afte
char: r
1 retval: @event.listens_for(Engine, "after
char: _
1 retval: @event.listens_for(Engine, "after_
char: c
1 retval: @event.listens_for(Engine, "after_c
char: u
1 retval: @event.listens_for(Engine, "after_cu
char: r
1 retval: @event.listens_for(Engine, "after_cur
char: s
1 retval: @event.listens_for(Engine, "after_curs
char: o
1 retval: @event.listens_for(Engine, "after_curso
char: r
1 retval: @event.listens_for(Engine, "after_cursor
char: _
1 retval: @event.listens_for(Engine, "after_cursor_
char: e
1 retval: @event.listens_for(Engine, "after_cursor_e
char: x
1 retval: @event.listens_for(Engine, "after_cursor_ex
char: e
1 retval: @event.listens_for(Engine, "after_cursor_exe
char: c
1 retval: @event.listens_for(Engine, "after_cursor_exec
char: u
1 retval: @event.listens_for(Engine, "after_cursor_execu
char: t
1 retval: @event.listens_for(Engine, "after_cursor_execut
char: e
1 retval: @event.listens_for(Engine, "after_cursor_execute
char: "
1 retval: @event.listens_for(Engine, "after_cursor_execute"
char: )
1 retval: @event.listens_for(Engine, "after_cursor_execute")
char: 

1 retval: @event.listens_for(Engine, "after_cursor_execute")
2 retval: @event.listens_for(Engine, "after_cursor_execute")
char: d
1 retval: d
char: e
1 retval: de
char: f
1 retval: def
char:  
1 retval: def 
char: t
1 retval: def t
char: i
1 retval: def ti
char: m
1 retval: def tim
char: e
1 retval: def time
char: _
1 retval: def time_
char: s
1 retval: def time_s
char: q
1 retval: def time_sq
char: l
1 retval: def time_sql
char: _
1 retval: def time_sql_
char: c
1 retval: def time_sql_c
char: a
1 retval: def time_sql_ca
char: l
1 retval: def time_sql_cal
char: l
1 retval: def time_sql_call
char: s
1 retval: def time_sql_calls
char: (
1 retval: def time_sql_calls(
char: c
1 retval: def time_sql_calls(c
char: o
1 retval: def time_sql_calls(co
char: n
1 retval: def time_sql_calls(con
char: n
1 retval: def time_sql_calls(conn
char: ,
1 retval: def time_sql_calls(conn,
char:  
1 retval: def time_sql_calls(conn, 
char: c
1 retval: def time_sql_calls(conn, c
char: u
1 retval: def time_sql_calls(conn, cu
char: r
1 retval: def time_sql_calls(conn, cur
char: s
1 retval: def time_sql_calls(conn, curs
char: o
1 retval: def time_sql_calls(conn, curso
char: r
1 retval: def time_sql_calls(conn, cursor
char: ,
1 retval: def time_sql_calls(conn, cursor,
char:  
1 retval: def time_sql_calls(conn, cursor, 
char: s
1 retval: def time_sql_calls(conn, cursor, s
char: t
1 retval: def time_sql_calls(conn, cursor, st
char: a
1 retval: def time_sql_calls(conn, cursor, sta
char: t
1 retval: def time_sql_calls(conn, cursor, stat
char: e
1 retval: def time_sql_calls(conn, cursor, state
char: m
1 retval: def time_sql_calls(conn, cursor, statem
char: e
1 retval: def time_sql_calls(conn, cursor, stateme
char: n
1 retval: def time_sql_calls(conn, cursor, statemen
char: t
1 retval: def time_sql_calls(conn, cursor, statement
char: ,
1 retval: def time_sql_calls(conn, cursor, statement,
char:  
1 retval: def time_sql_calls(conn, cursor, statement, 
char: p
1 retval: def time_sql_calls(conn, cursor, statement, p
char: a
1 retval: def time_sql_calls(conn, cursor, statement, pa
char: r
1 retval: def time_sql_calls(conn, cursor, statement, par
char: a
1 retval: def time_sql_calls(conn, cursor, statement, para
char: m
1 retval: def time_sql_calls(conn, cursor, statement, param
char: e
1 retval: def time_sql_calls(conn, cursor, statement, parame
char: t
1 retval: def time_sql_calls(conn, cursor, statement, paramet
char: e
1 retval: def time_sql_calls(conn, cursor, statement, paramete
char: r
1 retval: def time_sql_calls(conn, cursor, statement, parameter
char: s
1 retval: def time_sql_calls(conn, cursor, statement, parameters
char: ,
1 retval: def time_sql_calls(conn, cursor, statement, parameters,
char:  
1 retval: def time_sql_calls(conn, cursor, statement, parameters, 
char: c
1 retval: def time_sql_calls(conn, cursor, statement, parameters, c
char: o
1 retval: def time_sql_calls(conn, cursor, statement, parameters, co
char: n
1 retval: def time_sql_calls(conn, cursor, statement, parameters, con
char: t
1 retval: def time_sql_calls(conn, cursor, statement, parameters, cont
char: e
1 retval: def time_sql_calls(conn, cursor, statement, parameters, conte
char: x
1 retval: def time_sql_calls(conn, cursor, statement, parameters, contex
char: t
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context
char: ,
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context,
char:  
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, 
char: e
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, e
char: x
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, ex
char: e
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, exe
char: c
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, exec
char: u
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, execu
char: t
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, execut
char: e
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, execute
char: m
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executem
char: a
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executema
char: n
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executeman
char: y
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executemany
char: )
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executemany)
char: :
1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executemany):
char: 

1 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executemany):
2 retval: def time_sql_calls(conn, cursor, statement, parameters, context, executemany):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: t
1 retval:     t
char: o
1 retval:     to
char: t
1 retval:     tot
char: a
1 retval:     tota
char: l
1 retval:     total
char:  
1 retval:     total 
char: =
1 retval:     total =
char:  
1 retval:     total = 
char: d
1 retval:     total = d
char: a
1 retval:     total = da
char: t
1 retval:     total = dat
char: e
1 retval:     total = date
char: t
1 retval:     total = datet
char: i
1 retval:     total = dateti
char: m
1 retval:     total = datetim
char: e
1 retval:     total = datetime
char: .
1 retval:     total = datetime.
char: n
1 retval:     total = datetime.n
char: o
1 retval:     total = datetime.no
char: w
1 retval:     total = datetime.now
char: (
1 retval:     total = datetime.now(
char: )
1 retval:     total = datetime.now()
char:  
1 retval:     total = datetime.now() 
char: -
1 retval:     total = datetime.now() -
char:  
1 retval:     total = datetime.now() - 
char: c
1 retval:     total = datetime.now() - c
char: o
1 retval:     total = datetime.now() - co
char: n
1 retval:     total = datetime.now() - con
char: n
1 retval:     total = datetime.now() - conn
char: .
1 retval:     total = datetime.now() - conn.
char: i
1 retval:     total = datetime.now() - conn.i
char: n
1 retval:     total = datetime.now() - conn.in
char: f
1 retval:     total = datetime.now() - conn.inf
char: o
1 retval:     total = datetime.now() - conn.info
char: [
1 retval:     total = datetime.now() - conn.info[
char: '
1 retval:     total = datetime.now() - conn.info['
char: q
1 retval:     total = datetime.now() - conn.info['q
char: u
1 retval:     total = datetime.now() - conn.info['qu
char: e
1 retval:     total = datetime.now() - conn.info['que
char: r
1 retval:     total = datetime.now() - conn.info['quer
char: y
1 retval:     total = datetime.now() - conn.info['query
char: _
1 retval:     total = datetime.now() - conn.info['query_
char: s
1 retval:     total = datetime.now() - conn.info['query_s
char: t
1 retval:     total = datetime.now() - conn.info['query_st
char: a
1 retval:     total = datetime.now() - conn.info['query_sta
char: r
1 retval:     total = datetime.now() - conn.info['query_star
char: t
1 retval:     total = datetime.now() - conn.info['query_start
char: _
1 retval:     total = datetime.now() - conn.info['query_start_
char: t
1 retval:     total = datetime.now() - conn.info['query_start_t
char: i
1 retval:     total = datetime.now() - conn.info['query_start_ti
char: m
1 retval:     total = datetime.now() - conn.info['query_start_tim
char: e
1 retval:     total = datetime.now() - conn.info['query_start_time
char: '
1 retval:     total = datetime.now() - conn.info['query_start_time'
char: ]
1 retval:     total = datetime.now() - conn.info['query_start_time']
char: .
1 retval:     total = datetime.now() - conn.info['query_start_time'].
char: p
1 retval:     total = datetime.now() - conn.info['query_start_time'].p
char: o
1 retval:     total = datetime.now() - conn.info['query_start_time'].po
char: p
1 retval:     total = datetime.now() - conn.info['query_start_time'].pop
char: (
1 retval:     total = datetime.now() - conn.info['query_start_time'].pop(
char: -
1 retval:     total = datetime.now() - conn.info['query_start_time'].pop(-
char: 1
1 retval:     total = datetime.now() - conn.info['query_start_time'].pop(-1
char: )
1 retval:     total = datetime.now() - conn.info['query_start_time'].pop(-1)
char: 

1 retval:     total = datetime.now() - conn.info['query_start_time'].pop(-1)
2 retval:     total = datetime.now() - conn.info['query_start_time'].pop(-1)
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: l
1 retval:     l
char: o
1 retval:     lo
char: g
1 retval:     log
char: g
1 retval:     logg
char: e
1 retval:     logge
char: r
1 retval:     logger
char: .
1 retval:     logger.
char: i
1 retval:     logger.i
char: n
1 retval:     logger.in
char: f
1 retval:     logger.inf
char: o
1 retval:     logger.info
char: (
1 retval:     logger.info(
char: "
1 retval:     logger.info("
char: S
1 retval:     logger.info("S
char: Q
1 retval:     logger.info("SQ
char: L
1 retval:     logger.info("SQL
char: :
1 retval:     logger.info("SQL:
char:  
1 retval:     logger.info("SQL: 
char: %
1 retval:     logger.info("SQL: %
char: s
1 retval:     logger.info("SQL: %s
char: "
1 retval:     logger.info("SQL: %s"
char:  
1 retval:     logger.info("SQL: %s" 
char: %
1 retval:     logger.info("SQL: %s" %
char:  
1 retval:     logger.info("SQL: %s" % 
char: t
1 retval:     logger.info("SQL: %s" % t
char: o
1 retval:     logger.info("SQL: %s" % to
char: t
1 retval:     logger.info("SQL: %s" % tot
char: a
1 retval:     logger.info("SQL: %s" % tota
char: l
1 retval:     logger.info("SQL: %s" % total
char: )
1 retval:     logger.info("SQL: %s" % total)
char: 

1 retval:     logger.info("SQL: %s" % total)
2 retval:     logger.info("SQL: %s" % total)
char: 

1 retval: 
2 retval: 
char: 

1 retval: 
2 retval: 
char: _
1 retval: _
char: a
1 retval: _a
char: f
1 retval: _af
char: t
1 retval: _aft
char: e
1 retval: _afte
char: r
1 retval: _after
char: _
1 retval: _after_
char: r
1 retval: _after_r
char: e
1 retval: _after_re
char: p
1 retval: _after_rep
char: l
1 retval: _after_repl
char: a
1 retval: _after_repla
char: c
1 retval: _after_replac
char: e
1 retval: _after_replace
char: _
1 retval: _after_replace_
char: c
1 retval: _after_replace_c
char: a
1 retval: _after_replace_ca
char: l
1 retval: _after_replace_cal
char: l
1 retval: _after_replace_call
char: b
1 retval: _after_replace_callb
char: a
1 retval: _after_replace_callba
char: c
1 retval: _after_replace_callbac
char: k
1 retval: _after_replace_callback
char: s
1 retval: _after_replace_callbacks
char:  
1 retval: _after_replace_callbacks 
char: =
1 retval: _after_replace_callbacks =
char:  
1 retval: _after_replace_callbacks = 
char: [
1 retval: _after_replace_callbacks = [
char: ]
1 retval: _after_replace_callbacks = []
char: 

1 retval: _after_replace_callbacks = []
2 retval: _after_replace_callbacks = []
char: d
1 retval: d
char: e
1 retval: de
char: f
1 retval: def
char:  
1 retval: def 
char: a
1 retval: def a
char: f
1 retval: def af
char: t
1 retval: def aft
char: e
1 retval: def afte
char: r
1 retval: def after
char: _
1 retval: def after_
char: r
1 retval: def after_r
char: e
1 retval: def after_re
char: p
1 retval: def after_rep
char: l
1 retval: def after_repl
char: a
1 retval: def after_repla
char: c
1 retval: def after_replac
char: e
1 retval: def after_replace
char: (
1 retval: def after_replace(
char: f
1 retval: def after_replace(f
char: u
1 retval: def after_replace(fu
char: n
1 retval: def after_replace(fun
char: c
1 retval: def after_replace(func
char: )
1 retval: def after_replace(func)
char: :
1 retval: def after_replace(func):
char: 

1 retval: def after_replace(func):
2 retval: def after_replace(func):
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: g
1 retval:     g
char: l
1 retval:     gl
char: o
1 retval:     glo
char: b
1 retval:     glob
char: a
1 retval:     globa
char: l
1 retval:     global
char:  
1 retval:     global 
char: _
1 retval:     global _
char: a
1 retval:     global _a
char: f
1 retval:     global _af
char: t
1 retval:     global _aft
char: e
1 retval:     global _afte
char: r
1 retval:     global _after
char: _
1 retval:     global _after_
char: r
1 retval:     global _after_r
char: e
1 retval:     global _after_re
char: p
1 retval:     global _after_rep
char: l
1 retval:     global _after_repl
char: a
1 retval:     global _after_repla
char: c
1 retval:     global _after_replac
char: e
1 retval:     global _after_replace
char: _
1 retval:     global _after_replace_
char: c
1 retval:     global _after_replace_c
char: a
1 retval:     global _after_replace_ca
char: l
1 retval:     global _after_replace_cal
char: l
1 retval:     global _after_replace_call
char: b
1 retval:     global _after_replace_callb
char: a
1 retval:     global _after_replace_callba
char: c
1 retval:     global _after_replace_callbac
char: k
1 retval:     global _after_replace_callback
char: s
1 retval:     global _after_replace_callbacks
char: 

1 retval:     global _after_replace_callbacks
2 retval:     global _after_replace_callbacks
char:  
1 retval:  
char:  
1 retval:   
char:  
1 retval:    
char:  
1 retval:     
char: _
1 retval:     _
char: a
1 retval:     _a
char: f
1 retval:     _af
char: t
1 retval:     _aft
char: e
1 retval:     _afte
char: r
1 retval:     _after
char: _
1 retval:     _after_
char: r
1 retval:     _after_r
char: e
1 retval:     _after_re
char: p
1 retval:     _after_rep
char: l
1 retval:     _after_repl
char: a
1 retval:     _after_repla
char: c
1 retval:     _after_replac
char: e
1 retval:     _after_replace
char: _
1 retval:     _after_replace_
char: c
1 retval:     _after_replace_c
char: a
1 retval:     _after_replace_ca
char: l
1 retval:     _after_replace_cal
char: l
1 retval:     _after_replace_call
char: b
1 retval:     _after_replace_callb
char: a
1 retval:     _after_replace_callba
char: c
1 retval:     _after_replace_callbac
char: k
1 retval:     _after_replace_callback
char: s
1 retval:     _after_replace_callbacks
char: .
1 retval:     _after_replace_callbacks.
char: a
1 retval:     _after_replace_callbacks.a
char: p
1 retval:     _after_replace_callbacks.ap
char: p
1 retval:     _after_replace_callbacks.app
char: e
1 retval:     _after_replace_callbacks.appe
char: n
1 retval:     _after_replace_callbacks.appen
char: d
1 retval:     _after_replace_callbacks.append
char: (
1 retval:     _after_replace_callbacks.append(
char: f
1 retval:     _after_replace_callbacks.append(f
char: u
1 retval:     _after_replace_callbacks.append(fu
char: n
1 retval:     _after_replace_callbacks.append(fun
char: c
1 retval:     _after_replace_callbacks.append(func
char: )
1 retval:     _after_replace_callbacks.append(func)
char: 

1 retval:     _after_replace_callbacks.append(func)
2 retval:     _after_replace_callbacks.append(func)['import hashlib', 'import inspect', 'import logging', 'import os', 'import re', 'import sys', 'import tempfile', 'import csv', 'import gzip', 'from datetime import datetime', 'from time import time', 'from io import StringIO', 'from sqlalchemy import event', 'from sqlalchemy.engine import Engine', 'from sqlalchemy.schema import DropTable', 'from sqlalchemy.ext.compiler import compiles', '', 'import pandas', 'import sqlalchemy', '', 'import lore', 'from lore.util import timer', 'from lore.stores import query_cached', '', '', 'logger = logging.getLogger(__name__)', '', '', "@compiles(DropTable, 'postgresql')", 'def _compile_drop_table(element, compiler, **kwargs):', "    return compiler.visit_drop_table(element) + ' CASCADE'", '', '', 'class Connection(object):', "    UNLOAD_PREFIX = os.path.join(lore.env.name, 'unloads')", "    IAM_ROLE = os.environ.get('IAM_ROLE', None)", '    ', '    def __init__(self, url, **kwargs):', "        for int_value in ['pool_size', 'pool_recycle', 'max_overflow']:", '            if int_value in kwargs:', '                kwargs[int_value] = int(kwargs[int_value])', "        if 'poolclass' in kwargs:", "            kwargs['poolclass'] = getattr(sqlalchemy.pool, kwargs['poolclass'])", "        if '__name__' in kwargs:", "            del kwargs['__name__']", '        self._engine = sqlalchemy.create_engine(url, **kwargs)', '        self._connection = None', '        self._metadata = None', '        self._transactions = []', '    ', '    def __enter__(self):', '        if self._connection is None:', '            self._connection = self._engine.connect()', '        self._transactions.append(self._connection.begin())', '        return self', '    ', '    def __exit__(self, type, value, traceback):', '        transaction = self._transactions.pop()', '        if type is None:', '            transaction.commit()', '        else:', '            transaction.rollback()', '', '    @staticmethod', "    def path(filename, extension='.sql'):", '        return os.path.join(', "            lore.env.root, lore.env.project, 'extracts',", '            filename + extension)', '', '    def execute(self, sql=None, filename=None, **kwargs):', '        self.__execute(self.__prepare(sql, filename), kwargs)', '', '    def insert(self, table, dataframe, batch_size=None):', '        if batch_size is None:', '            batch_size = len(dataframe)', '', '        if self._connection is None:', '            self._connection = self._engine.connect()', '', '        dataframe.to_sql(', '            table,', '            self._connection,', "            if_exists='append',", '            index=False,', '            chunksize=batch_size', '        )', '', '    def replace(self, table, dataframe, batch_size=None):', '        import migrate.changeset', '        global _after_replace_callbacks', '        ', "        with timer('REPLACE ' + table):", "            suffix = datetime.now().strftime('_%Y%m%d%H%M%S').encode('utf-8')", '            self.metadata', "            temp = 'tmp_'.encode('utf-8')", '            source = sqlalchemy.Table(table, self.metadata, autoload=True, autoload_with=self._engine)', "            destination_name = 'tmp_' + hashlib.sha256(temp + table.encode('utf-8') + suffix).hexdigest()[0:56]", '            destination = sqlalchemy.Table(destination_name, self.metadata, autoload=False)', '            for column in source.columns:', '                destination.append_column(column.copy())', '            destination.create()', '', '            original_names = {}', '            for index in source.indexes:', '                # make sure the name is < 63 chars with the suffix', "                name = hashlib.sha256(temp + index.name.encode('utf-8') + suffix).hexdigest()[0:60]", '                original_names[name] = index.name', '                columns = []', '                for column in index.columns:', '                    columns.append(next(x for x in destination.columns if x.name == column.name))', '                new = sqlalchemy.Index(name, *columns)', '                new.unique = index.unique', '                new.table = destination', '                new.create(bind=self._connection)', '            self.insert(destination.name, dataframe, batch_size=batch_size)', '            self.execute("BEGIN; SET LOCAL statement_timeout = \'1min\'; ANALYZE %s; COMMIT;" % table)', '', '            with self as transaction:', "                backup = sqlalchemy.Table(table + '_b', self.metadata)", '                backup.drop(bind=self._connection, checkfirst=True)', "                source.rename(name=source.name + '_b', connection=self._connection)", '                destination.rename(name=table, connection=self._connection)', '                for index in source.indexes:', "                    index.rename(index.name[0:-2] + '_b', connection=self._connection)", '                for index in destination.indexes:', '                    index.rename(original_names[index.name], connection=self._connection)', '        ', '        for func in _after_replace_callbacks:', '            func(destination, source)', '        ', '    @property', '    def metadata(self):', '        if not self._metadata:', '            self._metadata = sqlalchemy.MetaData(bind=self._engine)', '', '        return self._metadata', '', '    def select(self, sql=None, filename=None, **kwargs):', "        cache = kwargs.pop('cache', False)", '        sql = self.__prepare(sql, filename)', '        return self._select(sql, kwargs, cache=cache)', '', '    @query_cached', '    def _select(self, sql, bindings):', '        return self.__execute(sql, bindings).fetchall()', '', '    def unload(self, sql=None, filename=None, **kwargs):', "        cache = kwargs.pop('cache', False)", '        sql = self.__prepare(sql, filename)', '        return self._unload(sql, kwargs, cache=cache)', '    ', '    @query_cached', '    def _unload(self, sql, bindings):', "        key = hashlib.sha1(str(sql).encode('utf-8')).hexdigest()", '', "        match = re.match(r'.*?select\\s(.*)from.*', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)", '        if match:', '            columns = []', '            nested = 0', "            potential = match[1].split(',')", '            for column in potential:', "                nested += column.count('(')", "                nested -= column.count(')')", '                if nested == 0:', "                    columns.append(column.split()[-1].split('.')[-1].strip())", '                elif column == potential[-1]:', "                    column = re.split('from', column, flags=re.IGNORECASE)[0].strip()", "                    columns.append(column.split()[-1].split('.')[-1].strip())", '        else:', '            columns = []', '        logger.warning("Redshift unload requires poorly parsing column names from sql, found: {}".format(columns))', '', '        sql = "UNLOAD (\'" + sql.replace(\'\\\\\', \'\\\\\\\\\').replace("\'", "\\\\\'") + "\') "', '        sql += "TO \'s3://" + os.path.join(', '            lore.io.bucket.name,', '            self.UNLOAD_PREFIX,', '            key,', "            ''", '        ) + "\' "', '        if Connection.IAM_ROLE:', '            sql += "IAM_ROLE \'" + Connection.IAM_ROLE + "\' "', '        sql += "DELIMITER \'|\' ADDQUOTES GZIP ALLOWOVERWRITE"', "        if re.match(r'(.*?)(limit\\s+\\d+)(.*)', sql, re.IGNORECASE | re.UNICODE | re.DOTALL):", "            logger.warning('LIMIT clause is not supported by unload, returning full set.')", "            sql = re.sub(r'(.*?)(limit\\s+\\d+)(.*)', r'\\1\\3', sql, flags=re.IGNORECASE | re.UNICODE | re.DOTALL)", '        self.__execute(sql, bindings)', '        return key, columns', '', '    @query_cached', '    def load(self, key, columns):', '        result = [columns]', "        with timer('load:'):", '            for entry in lore.io.bucket.objects.filter(', '                Prefix=os.path.join(self.UNLOAD_PREFIX, key)', '            ):', '                temp = tempfile.NamedTemporaryFile()', '                lore.io.bucket.download_file(entry.key, temp.name)', "                with gzip.open(temp.name, 'rt') as gz:", '                    result += list(csv.reader(gz, delimiter=\'|\', quotechar=\'"\'))', '        ', '            return result', '    ', '    @query_cached', '    def load_dataframe(self, key, columns):', "        with timer('load_dataframe:'):", '            frames = []', '            for entry in lore.io.bucket.objects.filter(', '                Prefix=os.path.join(self.UNLOAD_PREFIX, key)', '            ):', '                temp = tempfile.NamedTemporaryFile()', '                lore.io.bucket.download_file(entry.key, temp.name)', '                dataframe = pandas.read_csv(', '                    temp.name,', "                    delimiter='|',", '                    quotechar=\'"\',', "                    compression='gzip',", '                    error_bad_lines=False', '                )', '                dataframe.columns = columns', '                frames.append(dataframe)', '', '            result = pandas.concat(frames)', '            result.columns = columns', '            buffer = StringIO()', "            result.info(buf=buffer, memory_usage='deep')", '            logger.info(buffer.getvalue())', '            logger.info(result.head())', '            return result', '        ', '    def dataframe(self, sql=None, filename=None, **kwargs):', "        cache = kwargs.pop('cache', False)", '        sql = self.__prepare(sql, filename)', '        dataframe = self._dataframe(sql, kwargs, cache=cache)', '        buffer = StringIO()', "        dataframe.info(buf=buffer, memory_usage='deep')", '        logger.info(buffer.getvalue())', '        logger.info(dataframe.head())', '        return dataframe', '        ', '    @query_cached', '    def _dataframe(self, sql, bindings):', '        with timer("dataframe:"):', '            if self._connection is None:', '                self._connection = self._engine.connect()', '            dataframe = pandas.read_sql(sql=sql, con=self._connection, params=bindings)', '            return dataframe', '', '    def quote_identifier(self, identifier):', '        return self._engine.dialect.identifier_preparer.quote(identifier)', '        ', '', '    def __prepare(self, sql, filename):', '        if sql is None and filename is not None:', "            filename = Connection.path(filename, '.sql')", '            logger.debug("READ SQL FILE: " + filename)', '            with open(filename) as file:', '                sql = file.read()', '        # support mustache style bindings', "        sql = re.sub(r'\\{(\\w+?)\\}', r'%(\\1)s', sql)", '        return sql', '', '    def __execute(self, sql, bindings):', '        if self._connection is None:', '            self._connection = self._engine.connect()', '        return self._connection.execute(sql, bindings)', '', '', '@event.listens_for(Engine, "before_cursor_execute", retval=True)', 'def comment_sql_calls(conn, cursor, statement, parameters, context, executemany):', "    conn.info.setdefault('query_start_time', []).append(datetime.now())", '', '    stack = inspect.stack()[1:-1]', '    if sys.version_info.major == 3:', '        stack = [(x.filename, x.lineno, x.function) for x in stack]', '    else:', '        stack = [(x[1], x[2], x[3]) for x in stack]', '', '    paths = [x[0] for x in stack]', '    origin = next((x for x in paths if lore.env.project in x), None)', '    if origin is None:', "        origin = next((x for x in paths if 'sqlalchemy' not in x), None)", '    if origin is None:', '        origin = paths[0]', '    caller = next(x for x in stack if x[0] == origin)', '', '    statement = "/* %s | %s:%d in %s */\\n" % (lore.env.project, caller[0], caller[1], caller[2]) + statement', '    logger.debug(statement)', '    return statement, parameters', '', '', '@event.listens_for(Engine, "after_cursor_execute")', 'def time_sql_calls(conn, cursor, statement, parameters, context, executemany):', "    total = datetime.now() - conn.info['query_start_time'].pop(-1)", '    logger.info("SQL: %s" % total)', '', '', '_after_replace_callbacks = []', 'def after_replace(func):', '    global _after_replace_callbacks', '    _after_replace_callbacks.append(func)']