allblocks:  [['\n import itertools from django.core.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django', 0], [' itertools from django.core.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils', 0], [' from django.core.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional', 0], ['.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property', 0], [' ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils', 0], ['.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import', 0], [' models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy', 0], [', connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as', 0], [' connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _', 0], [' from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model', 0], ['.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models', 0], [' import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import', 0], [' Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel', 0], [' F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel', 0], [' Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel', 0], [' When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from', 0], [' django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion', 0], [' django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin', 0], [' import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import', 0], [' translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin', 0], [' django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice', 0], ['.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings', 0], [' import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import', 0], [' cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN', 0], [' from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from', 0], ['.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models', 0], ['.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import', 0], [' import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type', 0], [' ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type', 0], [' from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year', 0], [' ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year', 0], ['.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models', 0], [' OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type', 0], [' reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import', 0], [' import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION', 0], [' VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from', 0], [' VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base', 0], ['.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year', 0], ['.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import', 0], [' LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear', 0], [' from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base', 0], [' base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models', 0], ['.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models', 0], [' import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import', 0], [' education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories', 0], [' education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories,', 0], [' education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type,', 0], [' base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters', 0], ['.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from', 0], ['.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models', 0], [' import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type', 0], [' GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import', 0], [' GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes', 0], [' base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base', 0], ['.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year', 0], [' EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear', 0], [' from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear,', 0], ['.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose', 0], [' import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose', 0], [' import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from', 0], [' education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base', 0], [' link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year', 0], [', quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear', 0], [' from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear', 0], [' base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from', 0], ['.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common', 0], ['.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models', 0], [' LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin', 0], [' base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin', 0], ['.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin', 0], ['.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class', 0], [' import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin', 0], [', volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin', 0], [' volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin', 0], [' volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin):', 0], [' volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=', 0], [" from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent", 0], [" from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent'", 0], [" base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent',", 0], [".models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch", 0], [".learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch',", 0], [" import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',)", 0], [" from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order", 0], [".models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[", 0], [" OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym", 0], ["(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym", 0], [" OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym", 0], ["('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym", 0], ["'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ]", 0], ["'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory", 0], [" readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', ", 0], ["',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation", 0], ["'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation", 0], ["'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year", 0], ["'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP", 0], ['\', \'parent__acronym\', \'parent__partial_acronym\' ] list_filter=(\'is_mandatory\', \'access_condition\', \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE', 0], ['\'parent__partial_acronym\' ] list_filter=(\'is_mandatory\', \'access_condition\', \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent', 0], [' ] list_filter=(\'is_mandatory\', \'access_condition\', \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id', 0], ['\'is_mandatory\', \'access_condition\', \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id,', 0], ['\'access_condition\', \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS', 0], [' \'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level', 0], ['\'quadrimester_derogation\', \'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level', 0], ['\'parent__academic_year\') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear', 0], [') SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids', 1], [' SQL_RECURSIVE_QUERY_EDUCATION_GROUP="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids})', 1], ['="""\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child', 1], ['"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id', 1], [' WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child', 1], [' group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id', 1], [' group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child', 1], [' AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id', 1], [', child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id', 1], [' child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level', 1], [' child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM', 1], [' parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear', 1], [' level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS', 1], [' FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child', 1], [' WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent', 1], [' parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent', 1], ['{list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent', 1], ['{list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on', 1], [' UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id', 0], [' SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id', 0], [' child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id', 0], [' child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ', 0], ['.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT ', 0], ['.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM', 0], [', child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent', 0], [' child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ;', 0], [' child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """', 0], ['.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class', 0], [' parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager', 0], [' +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager', 0], [' base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager', 0], [' INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset', 0], [' INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self', 0], [' group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super(', 0], [' parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter', 0], [' on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q', 0], [' parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull', 0], ['.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull', 0], ['.parent_id ) SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q', 0], [') SELECT * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull', 0], [' * FROM group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull', 0], [' group_element_year_parent ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False)', 0], [' ; """ class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ', 0], ['" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class', 0], ['(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel', 0], [': def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models', 0], [' get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models', 0], [' return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100', 0], [' super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100,', 0], ['().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True', 0], [').filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True', 0], ['.filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True,', 0], ['(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True)', 0], ['(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models', 0], [') | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField', 0], [' Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField', 0], ['(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now', 0], ['(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True)', 0], [' ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey', 0], [' GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear', 0], [' GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear,', 0], ['(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True,', 0], [': external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete', 0], [' external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete', 0], ['.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT', 0], ['(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch', 0], ['=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models', 0], ['=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey', 0], ['=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey(', 0], [' null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear', 0], [' db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear', 0], [' changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name', 0], [' changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name=', 0], [".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch'", 0], [".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank", 0], ["(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True", 0], ["=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete", 0], [") parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models", 0], [" parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models", 0], [".ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE,", 0], [" EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf", 0], [", null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey", 0], [" on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear", 0], ["=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name", 0], [" ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf", 0], [" child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf',", 0], ["=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True", 0], ["=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True,", 0], [" EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models", 0], [" related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE", 0], [" related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE,", 0], ["'child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits", 0], [" blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models", 0], [" null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField", 0], [" on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True", 0], [" on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True,", 0], [".CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name", 0], [" child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_", 0], [" child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(", 0], ['=models.ForeignKey( LearningUnitYear, related_name=\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative', 0], ['( LearningUnitYear, related_name=\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits', 0], [' LearningUnitYear, related_name=\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits', 0], [', related_name=\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField', 0], ['=\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank', 0], ['\'child_leaf\', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank', 0], [', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null', 0], [', null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name', 0], [', on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min', 0], [' on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min', 0], [') relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits', 0], [' relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits', 0], ['=models.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField', 0], ['.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank', 0], ['.IntegerField( blank=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True,', 0], ['=True, null=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True,', 0], ['=True, verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name', 0], [' verbose_name=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max.', 0], ['=_("relative credits"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits")', 0], [') min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models', 0], [' min_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField', 0], ['=models.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField', 0], ['.IntegerField( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False', 0], ['( blank=True, null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name', 0], [', null=True, verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(', 0], [', verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"', 0], [' verbose_name=_("Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), )', 0], ['"Min. credits"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models', 0], [' max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length', 0], [' max_credits=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7,', 0], ['=models.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank', 0], ['.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null', 0], ['.IntegerField( blank=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True,', 0], ['=True, null=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name', 0], ['=True, verbose_name=_("Max. credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block', 0], [' credits"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models', 0], ['"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField', 0], [', ) is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField', 0], [' is_mandatory=models.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField', 0], ['.BooleanField( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name', 0], ['( default=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_', 0], ['=False, verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access', 0], [' verbose_name=_("Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\')', 0], ['"Mandatory"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models', 0], ['=models.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length', 0], ['.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length', 0], ['.CharField( max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500,', 0], [' max_length=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True', 0], ['=7, blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null', 0], [' blank=True, null=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True', 0], ['=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_', 0], ['=True, verbose_name=_("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(', 0], ['("Block") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english', 0], ['") ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english', 0], [' ) access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english', 0], [' access_condition=models.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models', 0], ['.BooleanField( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500', 0], ['( default=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank', 0], ['=False, verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null', 0], [' verbose_name=_(\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True,', 0], ['\'Access condition\') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(', 0], [' comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ', 0], ['=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment', 0], ['.TextField( max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment', 0], [' max_length=500, blank=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField', 0], ['=True, null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500,', 0], [', null=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank', 0], ['=True, verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True,', 0], [' verbose_name=_("comment"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True)', 0], [', ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation', 0], [') comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation', 0], [' max_length=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10,', 0], ['=500, blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters', 0], [' blank=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters', 0], ['=True, null=True, verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters', 0], [' verbose_name=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS', 0], ['=_("english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank', 0], ['"english comment"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True,', 0], ['"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True,', 0], [', ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name', 0], [') own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name', 0], [' own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_(', 0], ["(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation'", 0], ["(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ", 0], ["=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type", 0], ["=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models", 0], [", null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models", 0], [") quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField(", 0], [" quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices", 0], ["( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(", 0], [" max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices()", 0], ["=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True", 0], [".DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name", 0], [".DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_", 0], [".DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type'", 0], ["=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to", 0], [" null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to", 0], [" null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to=", 0], ["('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager", 0], [" derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager", 0], ["') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__", 0], [" link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__", 0], ["=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return ", 0], ['.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "', 0], [' max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format', 0], [' choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent', 0], ['=LinkTypes.choices(), blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child', 0], ['=LinkTypes.choices(), blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child)', 0], [', blank=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose', 0], ['=True, null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose', 0], [', null=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self', 0], ['=True, verbose_name=_(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self', 0], ['(\'Link type\') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return', 0], [') ) order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{', 0], [') order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})', 0], [' order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format(', 0], [' order_with_respect_to=\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child', 0], ['\'parent\' objects=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title,', 0], ['=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits', 0], ['=GroupElementYearManager() def __str__(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or', 0], ['(self): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits', 0], ['): return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0', 0], [' return "{} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _', 0], ['} -{}".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits', 0], [' self.child) @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear', 0], [' @property def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear', 0], [' def verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects', 0], [' verbose(self): if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter', 0], [': if self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year', 0], [' self.child_branch: return "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year', 0], [' "{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year', 0], ['{}({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year', 0], ['({}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year', 0], ['}{})".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self', 0], [' self.child.title, self.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf', 0], ['.relative_credits or self.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case', 0], ['.child_branch.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual', 0], ['.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None', 0], ['.credits or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None,', 0], [' or 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0', 0], [' 0, _("credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default', 0], ['"credits") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default', 0], ['") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual', 0], [" else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual", 0], ["=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual", 0], ["=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual')", 0], ["=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual')))", 0], ["=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type'", 0], ["( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return", 0], [' learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}', 0], [' learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{', 0], [' learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{})".format', 0], ['.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self', 0], ['=Case(When(hourly_volume_total_annual=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english', 0], ['=None, then=0), default=F(\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english', 0], ['\'hourly_volume_total_annual\'))).values(\'type\', \'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language', 0], ['\'type\', \'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title', 0], ['\'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title', 0], ['\'total\') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title,', 0], [') return "{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose', 0], ['{}{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose', 0], ['{}[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose', 0], ['[{}]({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose', 0], ['({}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose', 0], ['{}{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components', 0], ['{})".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components', 0], [".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components", 0], [".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components)", 0], [", self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self", 0], [".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf", 0], [".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0,", 0], [".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(", 0], [' self.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"', 0], ['.child.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"),', 0], ['.complete_title_english and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def', 0], [' and translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment', 0], [' translation.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self):', 0], ['.get_language()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self', 0], ['()==\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english', 0], ['=\'en\' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english', 0], ['.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language', 0], ['), self.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english', 0], ['.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english', 0], ['.relative_credits or self.child_leaf.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self', 0], ['.credits or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta:', 0], [' or 0, _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering', 0], [', _("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=(\'order', 0], ['("credits"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=(\'order', 0], ["), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save", 0], [") @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save", 0], [" def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert", 0], [" verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert", 0], ["): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update", 0], [" if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update", 0], [" self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False", 0], [".comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using", 0], [" translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None", 0], [")==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean()", 0], ["=LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return", 0], [": return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save", 0], [" return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save", 0], [".comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert,", 0], [" return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update,", 0], [" self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using,", 0], [" class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields", 0], [" Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def", 0], [" ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean", 0], ["('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if", 0], ["'order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self", 0], [' save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch', 0], ['(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and', 0], ['=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf', 0], [', force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise', 0], ['=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError', 0], [' using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It', 0], [', update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden', 0], ['=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear', 0], [': self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear', 0], [' return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with', 0], [' super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child', 0], ['.save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch', 0], ['(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and', 0], [', force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf', 0], [' force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.', 0], [' force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self', 0], [' update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch', 0], [' def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent', 0], [' clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise', 0], ['): if self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError', 0], [' self.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError', 0], ['.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_', 0], ['.child_branch and self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It', 0], [' self.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden', 0], ['.child_leaf: raise ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach', 0], [' ValidationError(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.', 0], ['(_("It is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if', 0], [' is forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent', 0], [' forbidden to save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent', 0], [' save a GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch', 0], [' GroupElementYear with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch', 0], [' with a child branch and a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent', 0], [' a child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch', 0], [' child leaf.")) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise', 0], [')) if self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError', 0], [' self.child_branch==self.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError', 0], ['.parent: raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to', 0], [' raise ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an', 0], [' ValidationError(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to', 0], ['(_("It is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its', 0], [' is forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included', 0], [' forbidden to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included', 0], [' to attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements', 0], [' attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")', 0], [' attach an element to itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if', 0], [' itself.")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf', 0], [')) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self', 0], [' self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type', 0], [' and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes', 0], ['.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE', 0], [' self.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise', 0], ['.parent.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError', 0], ['.ascendants_of_branch: raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError', 0], [' raise ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _', 0], [' ValidationError(_("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not', 0], ['("It is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to', 0], [' is forbidden to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create', 0], [' to attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference', 0], [' attach an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference', 0], [' an element to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a', 0], [' to one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit', 0], [' one of its included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit', 0], [' included elements.")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property', 0], [') if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child', 0], [' self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self):', 0], ['.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self', 0], ['.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch', 0], ['=LinkTypes.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self', 0], ['.REFERENCE.name: raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf', 0], [' raise ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable', 0], [' ValidationError( {\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self', 0], ['\'link_type\': _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return', 0], [' _("You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False', 0], ['"You are not allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return', 0], [' allowed to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def', 0], [' to create a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(*', 0], [' a reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs)', 0], [' reference with a learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset', 0], [' learning unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear', 0], [' unit")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects', 0], [' @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if', 0], [" @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year", 0], [" child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs", 0], ["(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs:", 0], ["): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year", 0], [" return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year", 0], [".child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs", 0], [" self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year']", 0], [" is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter", 0], ["(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", 0], [": if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", 0], [" return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year", 0], [" return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q", 0], ["(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year", 0], ["*kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year", 0], [" queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year", 0], [".objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", 0], [" 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", 0], ["'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", 0], [" kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year", 0], [" kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year))", 0], ["=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs", 0], ["['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs:", 0], [" queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter", 0], [".filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf", 0], ["(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf", 0], ["(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return", 0], [" Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations", 0], ["=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects", 0], [") | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances", 0], [" Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances", 0], ["(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances", 0], ["(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False)", 0], ["=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id=", 0], ["'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects", 0], ["'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects:", 0], [" kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters", 0], [" queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters", 0], ["=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters()", 0], ["(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id", 0], [']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations', 0], [' def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters', 0], [' find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if', 0], ['(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id', 0], [' parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id', 0], [' root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances', 0], ['{} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id', 0], [' if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id', 0], [': filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return', 0], [') root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def', 0], [' root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(', 0], [' root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters():', 0], ['=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names', 0], [' filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type', 0], [' if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search', 0], [': root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories', 0], ['=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ ', 0], ['=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name', 0], ['(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION', 0], ['(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list', 0], [") return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", 0], [" return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", 0], [" _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories", 0], [" root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories", 0], ["=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return", 0], [".search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name", 0], ["=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names", 0], ["=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, ", 0], ["\\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category", 0], ["=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category", 0], ["=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category'", 0], [".values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories", 0], ["', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances", 0], [" root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances", 0], [".TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids", 0], ["{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools", 0], ["': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id", 0], [" root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id", 0], [", 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values", 0], ["'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values())", 0], ["'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values())))", 0], ["'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id", 0], ["'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj", 0], [': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for', 0], [' root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for', 0], [' root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in', 0], ['(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return', 0], ['): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted', 0], ['(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id', 0], ['.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for', 0], ['.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id', 0], ['(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents', 0], ['(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key', 0], ['()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym', 0], [')) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym', 0], [' map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for', 0], ['={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents', 0], ['{obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in', 0], [' in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id', 0], [' education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items(', 0], ['(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance', 0], ['=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance', 0], [' return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects', 0], [' obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj', 0], ['[map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects', 0], ['[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj', 0], [' parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__', 0], [' parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if', 0], ['=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear', 0], [': obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear,', 0], [' obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear', 0], [' obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]', 0], [', parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise', 0], [' root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(', 0], [' root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must', 0], ['.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be', 0], [' } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear', 0], [' _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear', 0], ['(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear', 0], [' first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances', 0], ['=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any', 0], ['=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj', 0], [' obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj', 0], [' obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in', 0], ['.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj', 0], [' if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__', 0], [' obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !', 0], [' not in[LearningUnitYear, EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class', 0], [', EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(', 0], [' EducationGroupYear]: raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects', 0], [': raise AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the', 0], [' AttributeError("Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class', 0], ['"Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance(', 0], ['"Objects must be either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({}', 0], [' either LearningUnitYear or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class', 0], [' or EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations', 0], [' EducationGroupYear intances.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations', 0], ['.") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters)', 0], ['") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters):', 0], [' for obj in objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance', 0], [' objects if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance', 0], [' if obj.__class__ !=obj_class): raise AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects', 0], [' AttributeError("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year', 0], ['("All objects must be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects', 0], [' be the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id', 0], [' the same class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id', 0], [' class instance({})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id', 0], ['})".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id', 0], [')) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id', 0], [' def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year', 0], [' _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters', 0], ['(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters', 0], ['(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if', 0], ['): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects', 0], [' _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects', 0], [' _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0', 0], [' _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear)', 0], ['(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return', 0], [' academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id:', 0], ['=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements', 0], [' parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id', 0], ['=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj', 0], ['=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects}', 0], ['=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id', 0], ['(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements', 0], [' filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id', 0], [') if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters', 0], [' isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id', 0], ['[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id', 0], [' LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj', 0], [': return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects}', 0], ['{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year', 0], [' _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year', 0], ['(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects):', 0], [' filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if', 0], [' child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set', 0], [' child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj,', 0], [".id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id", 0], [" in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id", 0], ["} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj", 0], [" return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)", 0], ["{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) ", 0], [": _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise", 0], ['(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The', 0], [' filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm', 0], [' child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only', 0], [' for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure', 0], [' in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1', 0], ['} def _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year', 0], [' _extract_common_academic_year(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to', 0], ['(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory', 0], ['(objects): if len(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data', 0], ['(set(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance', 0], ['(getattr(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance', 0], ['(obj, \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.', 0], [', \'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.")', 0], ['\'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return', 0], ['\'academic_year_id\') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects', 0], [') for obj in objects)) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year', 0], [')) > 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id', 0], ['> 1: raise AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id', 0], [' AttributeError("The algorithm should load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id', 0], [' load only graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year', 0], [' graph/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters', 0], ['/structure for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None)', 0], [' for 1 academic_year " "to avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters', 0], [' avoid too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters', 0], [' too large \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys', 0], [' \'in-memory\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters', 0], ['\' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else', 0], [' data and performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else', 0], [' performance issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements', 0], [' issues.") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list', 0], [' return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year', 0], [' objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year', 0], ['].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year', 0], [' _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull', 0], [' _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False)', 0], ['(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False', 0], [' filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q', 0], ['=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull', 0], [': columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull', 0], [' columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) ', 0], ['=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related', 0], [".keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type", 0], ["[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type", 0], ["=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type'", 0], ["=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type')", 0], ["(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent',", 0], ["=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch", 0], [".filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf", 0], ["(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', ", 0], ["(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters))", 0], ["(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={", 0], ["(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year", 0], [" .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key", 0], ["'education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch", 0], [" .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf", 0], ["'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year", 0], ["'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year[", 0], ["'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf", 0], [", *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result", 0], ["*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result", 0], ["*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault", 0], ["*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]", 0], ["} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year", 0], [" group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year", 0], [" in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result", 0], ["=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch", 0], ["(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None,", 0], ["(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf", 0], ["'child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf,", 0], ["], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch", 0], [" child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch]", 0], [" child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not", 0], ["=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args)", 0], ["=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all", 0], ["['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args", 0], ["'child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise", 0], [']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError', 0], [".setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only", 0], [",[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the", 0], [").append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the", 0], ["(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must", 0], [") return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both", 0], [" result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them)", 0], [" def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).')", 0], ["(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part", 0], ["(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part=", 0], [" child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf'", 0], ["=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf", 0], [" args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf", 0], ["[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else", 0], [", child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part", 0], [" if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch", 0], [" not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part", 0], [") or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch", 0], [" raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return ", 0], [" AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part", 0], ["'Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part", 0], [" of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format", 0], [" the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(*", 0], [" param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals", 0], [" param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals(", 0], [" must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def", 0], [" both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements", 0], [").') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id", 0], ["') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id", 0], [" if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id", 0], [" branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters", 0], ["'child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id", 0], ["=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id", 0], [" branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots", 0], ["' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key", 0], ["=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key", 0], [" return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf", 0], ["{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id", 0], ["{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch", 0], ["'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch", 0], ['**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id', 0], ['*locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id', 0], [' _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents', 0], [' child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key', 0], ['=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key)', 0], ['=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or', 0], [', child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[]', 0], ['=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year', 0], ['): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in', 0], ['=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents', 0], ['] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents', 0], ['=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id', 0], ['(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year[', 0], [" child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters", 0], [") group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year", 0], [" group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters", 0], [" group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters):", 0], ["=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id", 0], [") or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements", 0], [" for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements", 0], [" group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id", 0], [" group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id,", 0], ["=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id", 0], ["=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)", 0], ["['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return", 0], ["'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set", 0], [' filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots', 0], [' filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)', 0], [' and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def', 0], [' _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters', 0], ['(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year,', 0], [' filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters)', 0], ['): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return', 0], ['(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year', 0], [') else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name', 0], [': roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in', 0], ['(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for', 0], ['(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name,', 0], ['(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list', 0], [', filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items', 0], [', child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree', 0], [') return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree', 0], [' return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree', 0], [')) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear', 0], [' _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear,', 0], [' _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) ', 0], ['(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict:', 0], ['(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if', 0], [': return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear', 0], [' any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear', 0], ['(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear', 0], ['] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError', 0], [' values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The', 0], [' values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be', 0], [' filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{', 0], [' filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}"', 0], [' def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear', 0], [' fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear))', 0], ['(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql', 0], [' EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id', 0], [', queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids', 0], [' -> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids', 0], ['> dict: if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem', 0], [': if queryset.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id', 0], ['.model !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem', 0], [' !=GroupElementYear: raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements', 0], [': raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements} queryset=queryset', 0], [' raise AttributeError("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements} queryset=queryset', 0], ['("The querySet arg has to be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids', 0], [' be built from model{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id', 0], ['{}".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem[\'id\'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id', 0], [".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id", 0], [")) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in", 0], ["=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset", 0], ["[root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year", 0], ["]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year", 0], [" distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year", 0], [" distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id", 0], ["{elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id", 0], ['] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id', 0], ['} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id', 0], [' queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,', 0], ['=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append', 0], ['(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year', 0], ['=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return', 0], [') group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id', 0], [' group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id', 0], [' group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql', 0], ['{} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids', 0], [' queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor', 0], [' queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor(', 0], [' parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor', 0], [' parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor:', 0], [' group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP', 1], [' group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format', 1], ["(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=',", 1], ["(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join", 1], ["[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str", 1], ["(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for", 1], [" return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids", 1], [" group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)", 1], [" group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids))", 1], [" group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute", 1], [" _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { ", 1], ["(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0", 1], [": with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id", 1], [" connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id'", 1], [".cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1],", 1], ["() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id", 1], [" as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id", 1], [": query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id'", 1], ["=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id", 1], ["=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], ", 1], [".format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], }", 1], ["','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor", 1], ["(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ", 1], [" in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year", 1], [") return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch", 1], ["{ 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None", 0], [", 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None", 0], ["'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if", 0], [" row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch:", 0], [": row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear", 0], [", 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects", 0], ["'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects", 0], [" 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent", 0], ["': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent", 0], [': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent', 0], ['], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch', 0], [' } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch', 0], [' row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch', 0], [' cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch', 0], ['] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf', 0], [' get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return', 0], [' get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear', 0], ['(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create', 0], [' child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create', 0], [' child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent', 0], [', child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent', 0], ['=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf', 0], ['): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf', 0], [' child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf', 0], [' child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return', 0], [' GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError', 0], [" GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child", 0], [".objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch", 0], [".get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child", 0], [".get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf", 0], ["(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must", 0], ["=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must be set", 0], ["=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must be set')", 0], ['\nfrom server import db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models', 0], [' server import db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis', 0], [' import db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task', 0], [' db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import', 0], [' flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task', 0], [' current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server', 0], [' from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis', 0], [' enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project', 0], [' Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import', 0], [' server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from', 0], ['.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server', 0], ['.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models', 0], ['.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis', 0], [' MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import', 0], [' MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from', 0], [' from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models', 0], [' server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models', 0], ['.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis', 0], ['.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils', 0], ['.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import', 0], [' import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound', 0], [' server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType', 0], ['.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum', 0], ['.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum)', 0], ['.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): ', 0], ['.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): "', 0], ['.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """', 0], [' import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the', 0], [' Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various', 0], [' server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds', 0], [' server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of', 0], ['.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages', 0], ['.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a', 0], ['.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might', 0], [' import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive', 0], [' import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive ', 0], [' import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION', 0], [' from server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION', 0], [' server.models.postgis.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION', 0], ['.utils import NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION', 0], [' NotFound class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5', 0], [' class MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message', 0], [' MessageType(Enum): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db', 0], ['): """ Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes', 0], ['"" Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes', 0], [' Describes the various kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an', 0], [' kinds of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message', 0], [' of messages a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user', 0], [' a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send ', 0], [' a user might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send "', 0], [' might receive """ SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__', 0], ['" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages', 0], ['=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=', 0], [' MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db', 0], [' VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint', 0], [' VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id', 0], [' VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', ', 0], [' INVALIDATION_NOTIFICATION=5 class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\',', 0], [' class Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id', 0], [' Message(db.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\'])', 0], ['.Model): """ Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column', 0], ['""" Describes an individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer', 0], [' individual Message a user can send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer, primary_key', 0], [' send """ __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db', 0], ['""" __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String', 0], [' __tablename__="messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db', 0], ['"messages" __table_args__=( db.ForeignKeyConstraint([\'task_id\', \'project_id\'],[\'tasks.id\', \'tasks.project_id\']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column', 0], ["=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id", 0], ["(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger", 0], ["['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger,", 0], [", 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey", 0], ["'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey(", 0], ["'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id", 0], [",['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'", 0], ["'tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'))", 0], [" 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id", 0], [".project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column", 0], ["]), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger", 0], [") id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger", 0], ["=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db", 0], ["(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey", 0], [", primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id", 0], [" primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index", 0], [") message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id", 0], ["=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id", 0], [") subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer", 0], [" subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db", 0], [".Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey(", 0], [" from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'", 0], [" from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index", 0], ["=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True)", 0], [".BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db", 0], [" db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer", 0], [".ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index", 0], ["'users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True)", 0], [") to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type", 0], [".Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column", 0], [".BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer", 0], [", db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True", 0], ["('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column", 0], ["'users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column", 0], ["), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime", 0], [" index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime,", 0], [" project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp", 0], [".Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read", 0], [".Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db", 0], [".Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db", 0], [".ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean", 0], ["'projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False", 0], ["'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user", 0], [', index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user', 0], ['=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship', 0], ['=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User', 0], ['(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys', 0], [', index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id', 0], ['=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id', 0], [') message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user', 0], ['=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship', 0], ['(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User', 0], [' index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys', 0], [' index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=', 0], [' date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id', 0], ['.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref', 0], ['(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref=', 0], [".DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages'", 0], [" default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project", 0], ["=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project", 0], ["(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys", 0], [".Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys", 0], ["=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id", 0], [") from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref", 0], [".relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages", 0], [".relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db", 0], [" foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task,", 0], ["[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=", 0], [') to_user=db.relationship(User, foreign_keys=[to_user_id], backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_', 0], ['=db.relationship(User, foreign_keys=[to_user_id], backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id', 0], ['.relationship(User, foreign_keys=[to_user_id], backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign', 0], [' foreign_keys=[to_user_id], backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id)', 0], ['[to_user_id], backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id', 0], [' backref=\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message', 0], ['\'messages\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)', 0], ['\') project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)",', 0], [' project=db.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref', 0], ['.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages', 0], ['.relationship(Project, foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\')', 0], [' foreign_keys=[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto', 0], ['[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls', 0], ['[project_id], backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls,', 0], [' backref=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int', 0], ['=\'messages\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto', 0], ['\') task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO', 0], [' task=db.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO', 0], ['.relationship(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """', 0], ['(Task, primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message', 0], [' primaryjoin="and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO ', 0], ['"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO ""', 0], ['==foreign(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls', 0], ['(Message.task_id), Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message', 0], [' Task.project_id==Message.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject', 0], ['.project_id)", backref=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message', 0], ['=\'messages\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id', 0], ['\') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id', 0], [' @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id', 0], [', dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message', 0], [' dto: MessageDTO): """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message', 0], [': """ Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id', 0], ['""" Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id', 0], [' Creates new message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id', 0], [' message from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message', 0], [' from DTO """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id', 0], [' """ message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id', 0], ['"" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id', 0], ['" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id', 0], ['=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type', 0], [') message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type', 0], [' message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type', 0], ['.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is', 0], ['=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None', 0], ['=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None:', 0], ['.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type', 0], ['=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType', 0], ['.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType', 0], ['.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type', 0], ['.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message', 0], ['.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def', 0], [' message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self)', 0], ['.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) ', 0], ['=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO', 0], ['=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: ', 0], ['=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: ""', 0], ['.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message', 0], ['=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to', 0], ['.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO', 0], ['.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """', 0], [' message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO', 0], [' dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self', 0], [' message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto', 0], ['.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date', 0], ['.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self', 0], ['=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read', 0], [' message def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self', 0], [' def as_dto(self) -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject', 0], [' -> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self', 0], ['> MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self', 0], [' MessageDTO: """ Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self', 0], ['" Casts message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto', 0], [' message object to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id', 0], [' to DTO """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if', 0], [' """ dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self', 0], ['" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type', 0], ['=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is', 0], ['.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None', 0], ['=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type', 0], ['.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType', 0], ['.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type', 0], ['.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type)', 0], ['=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self', 0], ['.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id', 0], ['=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto', 0], ['.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username', 0], ['=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self', 0], ['.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username', 0], ['=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto', 0], [' dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message', 0], ['.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self)', 0], ['=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): ""', 0], ['=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """', 0], [' self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into', 0], [' not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction', 0], [' not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction ', 0], [' None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO', 0], [' dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT', 0], ['.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE', 0], ['=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES', 0], [' if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS', 0], ['.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app', 0], [' dto.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger', 0], ['.from_username=self.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug', 0], ['.from_user.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message', 0], ['.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session', 0], ['.username return dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\')', 0], [' dto def add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add', 0], [' add_message(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self', 0], ['(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self', 0], ['(self): """ Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self)', 0], ['""" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): ""', 0], ['"" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """', 0], [' Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save', 0], [' message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save "', 0], [' message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """', 0], [' current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session', 0], ['-DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session', 0], [' COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit', 0], [' MESSAGES ARE PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod', 0], [' PART OF LARGER TRANSACTIONS""" current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors', 0], [' current_app.logger.debug(\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int):', 0], ['\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors', 0], ['\'Adding message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a', 0], [' message to session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project ', 0], [' session\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=', 1], ['\') db.session.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'', 1], ['.add(self) def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by', 1], [') def save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors', 1], [' save(self): """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors', 1], [': """ Save """ db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from', 1], ['"" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where', 1], ['.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0', 1], ['.session.commit() @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by', 1], [' @staticmethod def get_all_contributors(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT', 1], ['(project_id: int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks', 1], [' int): """ Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id', 1], ['""" Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id', 1], ['" Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0', 1], [' Get all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0', 1], [' all contributors to a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and', 1], [' a project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not', 1], [' project """ query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null\'', 1], ['""" query=\'\'\'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format', 1], [" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format", 1], ["'''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id", 1], ["'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id", 1], [" as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors", 1], [" contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db", 1], [" contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine", 1], [" from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute", 1], ["={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors", 1], ["} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def", 1], [" is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read", 1], [" not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self", 1], [' UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """', 1], [' UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark', 1], [' validated_by from tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message', 1], [' from tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as', 1], [' tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read', 1], [' tasks where tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read "', 1], [' tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self', 1], [' tasks.project_id={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read', 1], ['={0} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session', 1], ['} and validated_by is not null\'\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session', 1], ['\'\'.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count', 1], [' contributors=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count', 1], ['=db.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int', 1], ['.engine.execute(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int):', 1], ['(query) return contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of', 1], [' contributors def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages', 0], [' def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user ', 0], [' def mark_as_read(self): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user ""', 0], ['): """ Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query', 0], ['""" Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query', 0], ['" Mark the message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter', 0], [' message in scope as Read """ self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message', 0], ['""" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message', 0], ['.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read', 0], [' db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False', 0], [' db.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False)', 0], ['.session.commit() @staticmethod def get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count(', 0], [' get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id', 0], [' get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int', 0], [' get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) ', 0], [' get_unread_message_count(user_id: int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) ->', 0], [': int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO', 0], [' int): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO', 0], ['): """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: "', 0], [' """ Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """', 0], ['"" Get count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets', 0], [' count of unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all', 0], [' unread messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages', 0], [' messages for user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user "', 0], [' user """ return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages', 0], ['""" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages', 0], [' return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages', 0], ['.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id', 0], [' Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if', 0], [').count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages', 0], ['.count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)=', 0], ['() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0:', 0], [' get_all_messages(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto', 0], ['(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO', 0], ['(user_id: int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO()', 0], [' int) -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for', 0], [') -> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message', 0], ['-> MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message', 0], [' MessagesDTO: """ Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in', 0], ['"" Gets all messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages', 0], [' messages to the user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto', 0], [' user """ user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages', 0], ['=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto', 0], ['=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()', 0], ['(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto', 0], ['==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod', 0], ['() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages', 0], [' if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages', 0], [')==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids', 0], [' raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids', 0], [' raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids:', 0], [' NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list', 0], ['() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id', 0], [') messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id:', 0], [' messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): ""', 0], ['=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes', 0], ['=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the', 0], [' message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified', 0], [' in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages', 0], [' user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the', 0], [' user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user ""', 0], [' messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message', 0], [') return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message', 0], [' messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id', 0], [' @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids', 0], [' @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).', 0], [' def delete_multiple_messages(message_ids: list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete', 0], [' list, user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit', 0], [', user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit(', 0], [' user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit()', 0], [' user_id: int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def', 0], [' int): """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete', 0], [' """ Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self', 0], ['"" Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self)', 0], [' Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): ', 0], [' Deletes the specified messages to the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): ""', 0], [' the user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from', 0], [' user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the', 0], [' user """ Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB', 0], ['"" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """', 0], ['" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """ db', 0], ['.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """ db.session.delete', 0], ['(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """ db.session.delete(self', 0], ['(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """ db.session.delete(self) db', 0], ['=user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): """ Deletes the current model from the DB """ db.session.delete(self) db.session.commit()', 0], ['\nimport geojson import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO', 1], ['\nimport geojson import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO,', 1], [' import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination', 1], [' import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, ', 1], [' import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery', 1], [' dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO', 1], ['.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO', 1], [' import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser', 1], [' from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser', 1], [' import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server', 1], [' from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models', 0], [' import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License', 0], [', UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table', 0], [' UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server', 0], [' MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis', 0], [', Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import', 0], [' Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import', 0], [' \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo', 0], ['\\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from', 0], [' UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from', 0], [', UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models', 0], [', ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses', 0], [' ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel', 0], [', ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel,', 0], [' from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus', 0], [' from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus,', 0], ['.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole', 0], ['.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from', 0], ['.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models', 0], [' import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis', 0], [' License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils', 0], [' users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import', 0], [' users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound', 0], [' users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp', 0], [' server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User', 0], ['.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model', 0], ['.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): "', 0], ['.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """', 0], ['.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes', 0], [' import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history', 0], [' ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history', 0], [' from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with', 0], [' server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task', 0], ['.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task ', 0], ['.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task ""', 0], ['.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__', 0], [' MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db', 0], [', UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key', 0], [' from server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True', 0], [' server.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index', 0], ['.models.postgis.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True', 0], ['.utils import NotFound, timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message', 0], [' timestamp class User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean,', 0], [' User(db.Model): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True', 0], ['): """ Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False', 0], ['""" Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False', 0], ['" Describes the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False)', 0], [' the history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db', 0], [' history associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column', 0], [' associated with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String,', 0], [' with a task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique', 0], [' task """ __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True)', 0], ['"" __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role', 0], [' __tablename__="users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column', 0], ['"users" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer', 0], ['" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default', 0], ['.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default', 0], ['.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0,', 0], ['.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False', 0], [' primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level', 0], [' index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column', 0], [') validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer', 0], [' validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer', 0], [' validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1,', 0], ['(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False', 0], [', default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped', 0], ['=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db', 0], ['=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer', 0], [') username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default', 0], [' username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1,', 0], ['(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False', 0], [', unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped', 0], ['=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db', 0], ['.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer', 0], ['(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer', 0], [', default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0', 0], ['=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable', 0], [' nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False', 0], [' mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated', 0], ['.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db', 0], ['(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer', 0], [', default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default', 0], ['=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable', 0], [' nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False', 0], [' projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated', 0], ['.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db', 0], ['.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer', 0], [' default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default', 0], ['=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable', 0], [' nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False', 0], [' tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped', 0], ['.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db', 0], ['.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY', 0], [' default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer', 0], ['=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address', 0], ['=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address', 0], [' tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column', 0], ['(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified', 0], ['.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified', 0], [' default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column', 0], [' nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean', 0], ['=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default', 0], [' tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False)', 0], ['.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db', 0], ['.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean,', 0], ['=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False', 0], [' nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False)', 0], [') projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column', 0], [' projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String', 0], ['(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id', 0], ['.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db', 0], ['.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column', 0], [' email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String', 0], ['=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db', 0], ['(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db', 0], ['.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String', 0], [' is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered', 0], ['.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column', 0], ['.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime', 0], [' default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default', 0], [' is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp', 0], ['.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date', 0], ['.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db', 0], [' default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db', 0], [') twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime,', 0], ['.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp', 0], ['.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses', 0], [' facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db', 0], ['.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(', 0], ['.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License', 0], [') linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary', 0], ['.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table', 0], ['.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table)', 0], [' date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create', 0], [' date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self)', 0], ['=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): "', 0], ['(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates', 0], ['.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves', 0], ['=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model', 0], [' last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to', 0], [' last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB ""', 0], [' last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db', 0], [' default=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit(', 0], ['=timestamp) accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save', 0], [' accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self)', 0], [' accepted_licenses=db.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db', 0], ['.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit', 0], ['.relationship("License", secondary=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def', 0], ['=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int', 0], ['=users_licenses_table) def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int):', 0], [') def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user', 0], [' def create(self): """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user', 0], [': """ Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified', 0], ['"" Creates and saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified', 0], [' saves the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if', 0], [' the current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not', 0], [' current model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found ""', 0], [' model to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return', 0], [' to the DB """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User', 0], [' """ db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query', 0], ['" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get', 0], ['.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self', 0], [') def save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username', 0], [' save(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username:', 0], ['(self): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str)', 0], ['): db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """', 0], [' db.session.commit() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return', 0], ['() def get_by_id(self, user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for', 0], [' user_id: int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username', 0], [' int): """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None', 0], [': """ Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not', 0], [' Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found', 0], [' Return the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found ', 0], [' the user for the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """', 0], [' the specified id, or None if not found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User', 0], [' found """ return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username)', 0], ['"" return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none', 0], [' return User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none(', 0], [' User.query.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def', 0], ['.get(user_id) def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username', 0], [' def get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self', 0], [' get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str', 0], [' get_by_username(self, username: str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str):', 0], [': str): """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username', 0], [': """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username', 0], [' """ Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username ', 0], ['""" Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username "', 0], ['"" Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username ""', 0], [' Return the user for the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self', 0], [' the specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username', 0], [' specified username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db', 0], [' username, or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit', 0], [', or None if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def', 0], [' if not found """ return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update', 0], [' User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO', 0], ['.query.filter_by(username=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): "', 0], ['=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details', 0], ['=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details "', 0], ['=username).one_or_none() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """', 0], ['() def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address', 0], [' def update_username(self, username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address', 0], [', username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower', 0], [' username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower', 0], [' username: str): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower()', 0], ['): """ Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto', 0], ['""" Update the username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto', 0], [' username """ self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else', 0], [' self.username=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self', 0], ['=username db.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto', 0], ['.session.commit() def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id', 0], [' def update(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if', 0], ['(self, user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id', 0], [' user_dto: UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id', 0], [': UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else', 0], [' UserDTO): """ Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None', 0], ['" Update the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id', 0], [' the user details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id', 0], [' details """ self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto', 0], ['" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id', 0], [' self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id', 0], ['.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower', 0], ['.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower()', 0], ['.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None', 0], ['() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id', 0], [' user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id', 0], [' else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id', 0], [' self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower', 0], [' self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower(', 0], ['.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if', 0], ['.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None', 0], ['() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message', 0], [' user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message', 0], [' None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message', 0], ['.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message', 0], ['.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db', 0], ['=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session', 0], [') if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status', 0], [' user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status', 0], ['.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self', 0], [' self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified:', 0], ['.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool', 0], ['.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool)', 0], ['.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): ""', 0], ['=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates', 0], ['.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag', 0], ['() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully', 0], [' if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully', 0], ['.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified', 0], [' else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""', 0], ['=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified', 0], ['.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit()', 0], [' db.session.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def', 0], ['.commit() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert', 0], ['() def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self', 0], [' def set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self,', 0], [' set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert', 0], [' set_email_verified_status(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool', 0], ['(self, is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables', 0], [', is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables', 0], [' is_verified: bool): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables', 0], ['): """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode', 0], [': """ Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on', 0], [' Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the', 0], [' Updates email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user', 0], [' email verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""', 0], [' verfied flag on successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self', 0], [' successfully verified emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert', 0], [' emails""" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit(', 0], ['.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod', 0], ['=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query', 0], [' db.session.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery', 0], ['.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery', 0], ['.commit() def set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) ->', 0], [' set_is_expert(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: ""', 0], ['(self, is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search', 0], [', is_expert: bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and', 0], [': bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all', 0], [' bool): """ Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all', 0], ['"" Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users ', 0], [' Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users ""', 0], [' Enables or disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """', 0], [' disables expert mode on the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session', 0], [' the user""" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User', 0], ['=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level,', 0], ['.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role', 0], ['.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query', 0], [' get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base', 0], [' UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level', 0], [' UserSearchQuery) -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level=', 0], [' -> UserSearchDTO: """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel', 0], [': """ Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level', 0], ['""" Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level', 0], [' Search and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level', 0], [' and filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper', 0], [' filter all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()]', 0], [' all users """ base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value)', 0], ['""" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username', 0], ['" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username', 0], ['=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username:', 0], ['.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter', 0], ['.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User', 0], ['.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username', 0], [', User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query', 0], [' User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query', 0], ['.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username', 0], [" User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'", 0], [".role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if", 0], [" if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query", 0], [".mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role", 0], [": base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter", 0], ["=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User", 0], [".filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role", 0], ["(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole", 0], [".mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole", 0], [".mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role", 0], ["=MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value", 0], [".value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username", 0], [" if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username", 0], [" query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate", 0], [" base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page", 0], ["=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20", 0], [".filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True", 0], [".username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO", 0], [".ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO", 0], ["(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for", 0], [" +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items", 0], ["'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items:", 0], [') if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user', 0], ['.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser', 0], [' base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser(', 0], ['=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser()', 0], ['(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user', 0], ['=UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id', 0], ['].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level', 0], ['=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result', 0], ['.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level', 0], ['.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level)', 0], [').paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user', 0], ['.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username', 0], [', 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result', 0], [' dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username', 0], ['() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role', 0], [' result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole', 0], [' in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result', 0], [' results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result', 0], [' results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role)', 0], ['.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name', 0], [' listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users', 0], ['=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append', 0], [') listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user', 0], [' listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user', 0], [' listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto', 0], ['=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination', 0], [' listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination', 0], [' listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results)', 0], ['.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return', 0], ['(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def', 0], ['.name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated', 0], [' listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated', 0], [' listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated()', 0], ['.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get', 0], ['.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all', 0], ['=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users', 0], ['.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB"', 0], [' listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return', 0], ['=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query', 0], ['.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all', 0], ['.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users', 0], [' dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter', 0], ['.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter:', 0], ['(results) return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page', 0], [' return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int', 0], [' return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) ', 0], [' return dto @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) ->', 0], [' @staticmethod def get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: "', 0], [' get_all_users_not_pagainated(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users', 0], ['(): """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters', 0], [': """ Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters', 0], ['" Get all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters', 0], [' all users in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for', 0], [' in DB""" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete', 0], ['"" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete', 0], [' return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users', 0], ['.all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped', 0], [' filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project', 0], [' filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if', 0], ['(user_filter: str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will', 0], [': str, project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be', 0], [', project_id: int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned', 0], [' int, page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of', 0], [' page: int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those', 0], [' int) -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have', 0], [' -> UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not', 0], [' UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not', 0], [' UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not.', 0], [' UserFilterDTO: """ Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """', 0], ['""" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db', 0], [' Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session', 0], [' matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username', 0], [' characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User', 0], [' auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped', 0], [' auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any', 0], [' Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id', 0], [' who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label', 0], [' participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant', 0], [' validated) in the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User', 0], [' the project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike', 0], [' project, if given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter', 0], [' given, will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower', 0], [', will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() ', 0], [' will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +', 0], [' will be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\'', 0], [' be returned ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) ', 0], [' ahead of those who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by', 0], [' who have not. """ results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant', 0], ['""" results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast', 0], ['" results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast()', 0], [' results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(),', 0], [' results=db.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User', 0], ['.session.query(User.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username', 0], ['.username, User.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page,', 0], ['.projects_mapped.any(project_id).label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total=', 0], [').label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound', 0], ['.label("participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound(', 0], ['"participant")) \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO', 0], [') \\ .filter(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO()', 0], ['(User.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in', 0], ['.username.ilike(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results', 0], ['(user_filter.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto', 0], ['.lower() +\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames', 0], ['\'%\')) \\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result', 0], ['\\ .order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username', 0], ['.order_by(desc("participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username', 0], ['"participant").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is', 0], ['").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not', 0], ['), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant', 0], [' User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant', 0], ['(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser', 0], ['(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser()', 0], [' True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant', 0], [' if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant', 0], ['==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username', 0], [': raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username', 0], [' raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username', 0], ['() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant', 0], ['() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id', 0], [' result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant', 0], [' in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant', 0], [': dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant', 0], ['.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool', 0], ['(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant)', 0], ['.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto', 0], [') if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append', 0], [' project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append', 0], [' is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant', 0], [' is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant)', 0], [' not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto', 0], [': participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination', 0], [' participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination', 0], ['=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results)', 0], ['() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto', 0], ['.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def', 0], ['.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects', 0], [' participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects', 0], ['=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id', 0], ['=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id:', 0], ['=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int)', 0], [' participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): "', 0], ['.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects', 0], ['(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects', 0], ['.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if', 0], [') dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t', 0], ['.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist', 0], ['.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """', 0], ['.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where', 1], ['=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0', 1], ['(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped', 1], [' return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped', 1], [' return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> ', 1], [' dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{', 1], [' def upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id', 1], [' upsert_mapped_projects(user_id: int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id)', 1], [' int, project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine', 1], [' project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute', 1], [' project_id: int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql', 1], [': int): """ Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if', 1], [' Adds projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount', 1], [' projects to mapped_projects if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0', 1], [' if it doesn\'t exist """ sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users', 1], [' sql="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped', 1], ['="select * from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append', 1], ['* from users where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append', 1], [' where id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped', 1], [' id={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}', 1], ['={0} and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0})', 1], [' and projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}) where', 1], [' projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1', 1], [' projects_mapped @> \'{{{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}\'', 1], ['{1}}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}\'\'\'.format(project_id', 1], ['}}\'".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql=\'\'\'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}\'\'\'.format(project_id', 1], [".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id)", 1], ["(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db", 1], [" project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute", 1], [" result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql", 1], [" result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql)", 1], [" result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects", 1], [".rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id:", 1], ["'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale", 1], [" users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str", 1], [" users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -", 1], ["=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO:", 1], ['=array_append(projects_mapped,{0}) where id={1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: "', 1], ['(projects_mapped,{0}) where id={1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects', 1], ['{0}) where id={1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has', 1], [') where id={1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has', 1], [' id={1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped', 1], ['{1}\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on ', 1], ['\'\'\'.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """', 1], ['(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT', 1], [') db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status,', 1], ['(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c', 0], [' @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped', 0], [' def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated', 0], [' get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson', 0], [' preferred_locale: str) -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects', 0], [') -> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce', 0], ['> UserMappedProjectsDTO: """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v', 0], [': """ Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id', 0], ['" Get all projects a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id)', 0], [' a user has mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce', 0], [' mapped on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated', 0], [' on """ sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0)', 0], ['" sql=\'\'\'SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated', 0], ["'''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated,", 0], ["''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce", 0], ['.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped', 0], ['.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped,', 0], [' p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped', 0], [' c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t', 0], [' c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id', 0], ['.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count', 0], [' st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by', 0], [' projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks', 0], [' p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE', 1], ['(SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id', 1], [', m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped', 1], [') project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped', 1], [', coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users', 1], [' coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id', 1], ['.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0', 1], ['.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t', 1], [' validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by', 1], [', coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0', 1], ['(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY', 1], [', 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id', 1], [') mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id', 1], [' mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id', 1], ['(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by', 1], ['(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by)', 1], [' t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v', 1], ['.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER', 1], [') validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id', 1], [' validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count', 1], [' WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped', 1], [' IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE', 1], ['(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id', 1], [' users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped', 1], [' id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped', 1], [' id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped)', 1], ['}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM', 1], [' t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users', 1], ['.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id=', 1], ['={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND', 1], [' GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t', 1], ['.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by', 1], ['.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0}', 1], [' t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY', 1], [') v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id,', 1], [' v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t', 1], [' FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by', 1], [' JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m', 1], [' JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON', 1], ['(SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v', 1], ['.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id', 1], ['.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE', 1], [') mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c', 1], [' WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY', 1], ['.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC', 1], ["(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id", 1], ["(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results", 1], [" FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute", 1], [" users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if", 1], ["}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount", 1], [" AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount=", 1], [".mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0:", 1], ["={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound", 1], [" GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound", 1], [" t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto", 1], [" ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO", 1], [".project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO", 1], [".project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for", 1], [".project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in", 1], [") c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results:", 1], [" WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project", 1], [".project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", 1], [" ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", 1], ["'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project", 1], ["'.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id", 1], [') results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0]', 1], [' results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project', 1], ['(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus', 1], [' results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus', 0], [' results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1', 0], ['.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name', 0], ['=0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project', 0], [') mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped', 0], [' mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped', 0], [' mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3', 0], [') for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row', 0], [' for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row', 0], [' row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4', 0], [' in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project', 0], ['=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads', 0], ['() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5', 0], [') mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]', 0], [' mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5])', 0], ['[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale', 0], [' mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale', 0], ['.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row', 0], ['(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale', 0], ['(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale,', 0], ['[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row', 0], [').name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2', 0], ['.name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]', 0], ['=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info', 0], ['] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name', 0], [' mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto', 0], ['.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto', 0], ['.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project', 0], ['.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto', 0], ['=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role', 0], ['.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self,', 0], ['.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole)', 0], ['.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): ', 0], ['(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): "', 0], ['(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """', 0], [', preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets', 0], [' preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the', 0], [' row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on', 0], ['[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the', 0], [' mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user', 0], [' mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user ""', 0], ['=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value', 0], [' mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit()', 0], ['.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self', 0], ['.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self,', 0], [') return mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel', 0], [' mapped_projects_dto def set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the', 0], [' set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on', 0], [' set_user_role(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user', 0], ['(self, role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """', 0], [', role: UserRole): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self', 0], ['): """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level', 0], [' """ Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level', 0], ['"" Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level', 0], [' Sets the supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value', 0], [' supplied role on the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session', 0], [' the user """ self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def', 0], ['.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms', 0], ['.value db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self', 0], [' db.session.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id', 0], ['.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int', 0], ['.commit() def set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int)', 0], [' set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate', 0], [' set_mapping_level(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user', 0], ['(self, level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope', 0], [', level: MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with', 0], [': MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the', 0], [' MappingLevel): """ Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied', 0], ['"" Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license ', 0], ['" Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license "', 0], [' Sets the supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license ""', 0], [' supplied level on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license', 0], [' on the user """ self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id', 0], ['.value db.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses', 0], ['.session.commit() def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append', 0], [') def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license)', 0], [' def accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db', 0], [' accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit', 0], [' accept_license_terms(self, license_id: int): """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit()', 0], [' """ Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence', 0], ['"" Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self', 0], [' Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self', 0], [' Associate the user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self,', 0], [' user in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id:', 0], [' in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int)', 0], [' in scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int):', 0], [' scope with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): "', 0], [' with the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to', 0], [' the supplied license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see', 0], [' license """ image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has', 0], ['""" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted', 0], ['" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted', 0], [' image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms', 0], ['.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified', 0], ['.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id', 0], [') db.session.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if', 0], ['.commit() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license', 0], ['() def has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self', 0], [' has_user_accepted_licence(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses', 0], ['(self, license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True', 0], [' license_id: int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return', 0], [': int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def', 0], [' int): """ Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def', 0], [' Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self', 0], [' Test to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self)', 0], [' to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self):', 0], [' to see if the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): "', 0], [' the user has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete', 0], [' has accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user', 0], [' accepted the terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in', 0], [' terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB', 0], [' terms of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB ""', 0], [' of the specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db', 0], [' specified license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session', 0], [' license""" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete', 0], ['.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto', 0], ['(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self,', 0], [' image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username', 0], [' image_license in self.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str', 0], ['.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: "', 0], ['.accepted_licenses: return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create', 0], [': return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object', 0], [' return True return False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object', 0], [' False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope', 0], [' False def delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope ', 0], [' delete(self): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto', 0], ['): """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO', 0], [' """ Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO', 0], ['"" Delete the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO()', 0], [' the user in scope from DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto', 0], [' DB """ db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username', 0], ['(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto', 0], ['.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role', 0], ['.commit() def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self', 0], [' def as_dto(self, logged_in_username: str) -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role)', 0], [') -> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel', 0], ['-> UserDTO: """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel', 0], [' """ Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level', 0], [' Create DTO object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level', 0], [' object from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name', 0], [' from user in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto', 0], [' in scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert', 0], [' scope """ user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self', 0], ['" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert', 0], [' user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or', 0], [' user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto', 0], ['.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered', 0], ['.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered', 0], [' user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str', 0], ['=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered', 0], ['.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try', 0], [' user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto', 0], ['.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped', 0], ['(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len', 0], ['.name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped', 0], ['.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped', 0], ['.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped)', 0], ['=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto', 0], ['.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped', 0], [').name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped', 0], ['.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self', 0], ['=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped', 0], ['.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto', 0], [' user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated', 0], ['=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated', 0], ['.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto', 0], [' try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated', 0], [' user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self', 0], ['.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated', 0], ['.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id', 0], ['.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self', 0], [' except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id', 0], [' user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto', 0], ['.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id', 0], ['=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id', 0], ['.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto', 0], ['.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id', 0], ['.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self', 0], ['.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto', 0], ['.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message', 0], ['.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self', 0], ['.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto', 0], ['.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent', 0], ['.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0', 0], ['.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping', 0], ['=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0', 0], ['.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto', 0], ['.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0', 0], ['=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql', 0], ['=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="', 0], ['.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM', 0], ['.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP', 0], ['=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text,', 0], ['.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24', 0], ['.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\'', 0], ['.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history', 0], ['.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action', 0], [' user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION', 0], ['.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id=', 1], ['=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0}', 1], ['.time_spent_mapping=0 user_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute', 1], ['=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql', 1], ['="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for', 1], [' SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time', 1], [', \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time', 1], [':TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0', 1], [') FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if', 1], [' action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time:', 1], ['\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds', 1], [' and user_id={0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time', 1], ['{0};""".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time', 1], ['".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds', 1], ['(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds', 1], [') total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto', 1], [' total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto', 1], [' row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds', 0], [' total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto', 0], [': total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent', 0], [' total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent ', 0], [' if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating', 0], [' total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating', 0], [' total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=', 0], [' total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=""', 0], [' total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM', 0], [' total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, ', 0], ['=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24', 0], ['=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS', 0], ['.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history', 0], [' user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE', 0], ['.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action', 0], ['=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id', 0], ['=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0}', 0], ['.total_time_spent +=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id', 0], ['=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time', 1], ['=user_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db', 1], ['.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine', 1], ['.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql', 1], [' sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row', 1], [' SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time', 1], [', \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time', 1], [')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time', 1], [':TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time', 1], [' WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds', 1], ['\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time', 1], ['\' and user_id={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds', 1], ['={0};""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds', 1], [';""".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto', 1], ['".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto', 1], ['.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping', 1], [' total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping', 1], [') for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent', 1], [' total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent', 0], [' total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent ', 0], [' total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto', 0], ['=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self', 0], ['] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username', 0], [' if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username', 0], [' total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username=', 0], [': total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username', 0], ['=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self', 0], ['.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address', 0], [' user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified', 0], ['.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified', 0], ['=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified=self.is_email_verified return', 0], [' user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified=self.is_email_verified return user_dto', 0], ['\nfrom cachetools import TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO', 0], [' cachetools import TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO,', 0], [' TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO', 0], [' TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO,', 0], [' sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO', 0], [' sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO,', 0], [', text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO,', 0], [' server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO', 0], [' import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO )', 0], [' from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server', 0], ['.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis', 0], ['.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import', 0], [' ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from', 0], [', UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis', 0], [' Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus', 0], [', TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from', 0], [' TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from', 0], [', ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models', 0], [' ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models', 0], [' ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task', 0], [' HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import', 0], [', OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User', 0], [' OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User', 0], [' OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task', 0], [' OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server', 0], [' CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models', 0], [' CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis', 0], [' from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import', 0], [' server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import', 0], ['.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp', 0], ['.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from', 0], [' import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server', 0], [' from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service', 0], ['.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import', 0], [' import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from', 0], [' TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server', 0], [' from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services', 0], [' server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users', 0], ['.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service', 0], ['.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service', 0], [' TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService', 0], [', Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache', 0], [' Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache', 0], [' server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache', 0], ['.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize', 0], ['.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4', 0], ['.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30', 0], ['.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class', 0], [' import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService', 0], [' timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService', 0], [', NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod', 0], [' from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod', 0], [' from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def', 0], ['.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change', 0], [' import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change', 0], [' ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int,', 0], ['.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int', 0], ['.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state', 0], ['.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus', 0], [' UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state', 0], [' homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus', 0], [' homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=', 0], [" homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'):", 0], ['=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): ""', 0], ['(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats', 0], [' ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when', 0], [') class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task', 0], [' StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had', 0], [' @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change', 0], [' @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change ""', 0], [' update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus', 0], [' user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION', 0], [': int, last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus', 0], [', last_state: TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus', 0], [' TaskStatus, new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING', 0], [', new_state: TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return', 0], [' TaskStatus, action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project', 0], [', action=\'change\'): """ Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService', 0], ['""" Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id', 0], ['" Update stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id', 0], [' stats when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id)', 0], [' when a task has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user', 0], [' has had a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService', 0], [' a state change """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id', 0], [' """ if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id', 0], ['"" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id', 0], [' in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService', 0], ['[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats', 0], [', TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats', 0], [' TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project', 0], [' TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project,', 0], ['.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state', 0], [', TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state', 0], [' TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state', 0], [' TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action', 0], [']: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects', 0], [' return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects', 0], [' project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects', 0], ['.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id', 0], ['(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated', 0], ['=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp', 0], ['=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return', 0], ['.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user', 0], [') StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod', 0], [' StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod', 0], ['(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project', 0], [' user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project', 0], [' user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project,', 0], [' last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user', 0], [' new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state', 0], [' new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state:', 0], [' UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus', 0], [' UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus,', 0], ['.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus', 0], ['.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action', 0], ["(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'", 0], [" project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if", 0], [" project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state=", 0], [".last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED", 0], ["() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped", 0], [" project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped", 0], [", user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif", 0], [" @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state", 0], [" _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED", 0], [" Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated", 0], [", user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1", 0], [": User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif", 0], [", last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state", 0], [": TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus", 0], [" TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus", 0], [" TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project", 0], [" action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery", 0], ["'change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +", 0], ["'change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if", 0], [' if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action', 0], [' new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=', 0], ["=TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if", 0], [".MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state", 0], [" project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus", 0], [".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED", 0], ["+=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped", 0], [" elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped", 0], ["==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif", 0], ["=TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state=", 0], [".tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED", 0], [" elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated ", 0], [" new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif", 0], ["=TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state", 0], [".BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus", 0], [" project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED", 0], ["=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated", 0], [" if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated ", 0], [" action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if", 0], ["='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state", 0], [': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state=', 0], [' if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus', 0], ['.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project', 0], [' user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped', 0], ['.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -', 0], ['.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif', 0], [' elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state', 0], [' new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state=', 0], ['.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED:', 0], [' user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated', 0], ['.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -', 0], [' +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif', 0], [' elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state', 0], [' new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state', 0], ['.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY:', 0], [' user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project', 0], ['.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -', 0], [' +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if', 0], [' if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action', 0], [' last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action', 0], ["=TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if", 0], [".MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state", 0], [" project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus", 0], [".tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED", 0], ["-=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped", 0], [" elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped", 0], ["==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif", 0], [".VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state=", 0], [".tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED", 0], [" last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated ", 0], [" last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif", 0], ["=TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state", 0], [".BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus", 0], [" project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED", 0], ["=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated", 0], [" action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated ", 0], ["=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", 0], ["'undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", 0], [' if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod', 0], [' last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def', 0], [' user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id', 0], ['.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int', 0], [' -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int', 0], ['-=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int)', 0], ['=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -', 0], [' elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) ->', 0], ['=TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: ""', 0], ['.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all', 0], [': user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity', 0], ['.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on', 0], [' -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project ', 0], ['=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project ""', 0], ['=TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query(', 0], [' -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory', 0], [' @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory', 0], [' def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action,', 0], [': int, page: int) -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory', 0], [' -> ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User', 0], [' ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User', 0], [' ProjectActivityDTO: """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ', 0], [' """ Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User', 0], [' Gets all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter', 0], [' all the activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter', 0], [' activity on a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory', 0], [' a project """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id', 0], [' """ results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id', 0], ['"" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id', 0], [' results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id,', 0], ['.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory', 0], ['.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action ', 0], ['( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !=', 0], [" TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' )", 0], [", TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by", 0], [".task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory", 0], [" TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date", 0], [".action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc", 0], [".action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() )", 0], [" TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page", 0], [".action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10", 0], [" TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results", 0], [" User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound", 0], [".username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound()", 0], [").join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto", 0], ["(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto", 0], [".project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for", 0], [".project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in", 0], [" TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history", 0], ["'COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO", 0], ["'COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO()", 0], [' TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id', 0], [' TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id', 0], ['() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item', 0], [' ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id', 0], [', 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action', 0], [', True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action', 0], [') if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item', 0], [' results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action', 0], ['==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text', 0], [': raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text', 0], [') activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text', 0], [' activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text', 0], ['=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history', 0], [') for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date', 0], [' item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date', 0], [' results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history', 0], [': history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by', 0], [' history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item', 0], ['() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto', 0], [' history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto', 0], ['.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity', 0], ['.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history', 0], ['.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history)', 0], ['.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto', 0], ['.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination', 0], [' history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination', 0], ['.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results', 0], ['.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return', 0], [' history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto', 0], ['=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod', 0], ['.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def', 0], [' history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions', 0], ['=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id', 0], ['.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int', 0], ['.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int)', 0], ['.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -', 0], ['=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO', 0], ['=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO:', 0], ['=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: "', 0], ['.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get', 0], [' activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user', 0], ['.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on', 0], [' activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query', 0], ['=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by,', 0], [' return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username,', 0], [' activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped', 0], [' @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v', 0], ['(project_id: int) -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select', 0], [' -> ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u', 0], [' ProjectContributionsDTO: """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username', 0], [' """ Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by', 0], [' Get all user contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped', 0], [' contributions on a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks', 0], [' a project""" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where', 0], ['" contrib_query=\'\'\'select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by', 0], [" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id", 0], ["'''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id", 1], ['.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0', 1], ['.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t', 1], ['.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by', 1], [' m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not', 1], [' v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group', 1], [' v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by', 1], ['.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u', 1], ['.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username)', 1], [' from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER', 1], ['.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select', 1], ['.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by,', 1], ['(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username', 1], ['.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t', 1], [' from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by', 1], [' users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from', 1], [' where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t,', 1], ['=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where', 1], ['.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t', 1], [' t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by', 1], ['.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id', 1], ['} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and', 1], ['.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id=', 0], [' not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and', 0], [' group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by', 0], [' t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is', 0], [', u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group', 0], [') m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by', 0], [' OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by', 0], [' (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username', 0], ['(select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v', 0], [', u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v', 0], [' count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by ', 1], [".validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format", 1], [" validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id", 1], [" from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db", 1], [" users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute", 1], [".validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query)", 1], [" and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount", 1], [".project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0", 1], ["{0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound", 1], [" not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO", 1], [" group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO", 1], [" t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO(", 1], [".validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row", 1], [", u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results", 1], [".username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results", 1], [" ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id", 1], [" m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row", 1], [".validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3]", 1], [" '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib", 1], ['(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution', 1], ['(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution(', 1], ['.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username', 1], ['.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row', 1], ['(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if', 1], ['(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1]', 1], [') if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else', 1], ['.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib', 0], [' NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row', 0], [' NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2]', 0], [' contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2', 0], [' contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else', 0], ['=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib', 0], [' for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5', 0], [' results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5]', 0], [' results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else', 0], ['[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions', 0], [' or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions', 0], ['[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions', 0], ['=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib)', 0], ['=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod', 0], [' if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached', 0], [' row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached', 0], ['] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache', 0], [' user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache)', 0], [' if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats', 0], [' row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() ', 0], [' row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() ->', 0], ['] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO', 0], [' 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO', 0], [' user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: ', 0], [' user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: ""', 0], ['.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get', 0], ['=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall', 0], ['=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM', 0], [' row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to', 0], ['.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress', 0], ['(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made ""', 0], [' contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO', 0], [' @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto', 0], ['(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project', 0], ['(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query', 0], ['(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto', 0], [' get_homepage_stats() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online', 0], ['() -> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query', 0], ['-> HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter', 0], [' HomePageStatsDTO: """ Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter', 0], [' Get overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is', 0], [' overall TM stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not', 0], [' stats to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct', 0], [' to give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task', 0], [' give community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task', 0], [' community a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by', 0], [' a feel for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count', 0], [' for progress that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto', 0], [' that\'s being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers', 0], [' being made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User', 0], [' made """ dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query', 0], ['"" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count', 0], ['" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count(', 0], ['=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto', 0], ['() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators', 0], ['.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter', 0], ['.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status', 0], ['() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus', 0], ['=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value', 0], ['=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ', 0], ['.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct', 0], ['( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task', 0], [' not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count', 0], [' not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count(', 0], [' ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped', 0], ['.distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped', 0], ['.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task', 0], [').count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter', 0], ['() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task', 0], [' dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task', 0], ['.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status', 0], ['.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus', 0], [') dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED', 0], ['.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value', 0], ['.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value', 0], ['.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value)', 0], ['.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) )', 0], [' Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count', 0], ['.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count()', 0], ['==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated', 0], ['=TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated', 0], [' ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter(', 0], [').distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task', 0], ['.distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task', 0], ['.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status=', 0], [').count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus', 0], ['() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED', 0], ['.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count', 0], ['.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session', 0], ['.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query', 0], [' (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project', 0], ['(TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag', 0], ['.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func', 0], [', TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count', 0], ['.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project', 0], [') ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag', 0], [' ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag', 0], [').count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) )', 0], ['.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project', 0], ['.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag', 0], ['.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all', 0], ['( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count', 0], ['.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count', 0], ['=TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql', 0], ['=TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=', 0], ['.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select', 0], ['.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce', 0], [' org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area', 0], [' org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)', 0], [' org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)),', 0], ['.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as', 0], [' Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public', 0], ['.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where', 0], [' func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=', 0], ['(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status', 0], ['.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result', 0], [' ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db', 0], ['.organisation_tag).all() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text', 0], ['() untagged_count=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status', 0], ['=0 tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus', 0], [' tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus', 0], [' tasks_mapped_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value', 0], ['="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto', 0], ['(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area', 0], [')), 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result', 0], [' 0) as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result', 0], [' as sum from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone', 0], [' from public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone(', 0], [' public.tasks where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\']', 0], [' where task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql', 0], [' task_status=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql', 0], ['=:task_status" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select', 0], [' tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area', 0], [' tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry', 0], [' tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry))', 0], ['.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from', 0], ['(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where', 0], [' task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status', 0], ['=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status', 0], ['.value) dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result', 0], [' dto.total_mapped_area=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result', 0], ['=tasks_mapped_result.fetchone()[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text', 0], ['[\'sum\'] tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status', 0], [' tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status', 0], [' tasks_validated_sql="select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus', 0], ['"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED', 0], ['"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value', 0], ['(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area', 0], [')), 0) as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result', 0], [') as sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result', 0], [' sum from public.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result', 0], ['.tasks where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone', 0], [' where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()[\'sum', 0], [' where task_status=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()[\'sum\']', 0], ['=:task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()[\'sum\'] campaign_count', 0], [':task_status" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()[\'sum\'] campaign_count', 0], [" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project", 0], [".engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag", 0], [".engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag,", 0], ["(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag)", 0], [" task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by", 0], [".VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag", 0], [".VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag)", 0], [".VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all(", 0], [".value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count", 0], [".total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count", 0], ["=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns", 0], ["=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0", 0], ["=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup", 0], ['] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats', 0], [' campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats', 0], ['.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO', 0], ['.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup)', 0], ['.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag:', 0], ['.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns', 0], ['.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append', 0], ['\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats', 0], [' .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats)', 0], ['.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns ', 0], ['.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +', 0], ['.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else:', 0], [' no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count', 0], [' no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +', 0], [' for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created', 0], [' tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if', 0], [' in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count', 0], [': campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj', 0], ['(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO((', 0], [" campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged'", 0], [" dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)", 0], [".campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count))", 0], ["(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append", 0], [" unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj", 0], [" unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto", 0], [": no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns", 0], ["=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count", 0], [" no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project", 0], [": no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag", 0], [" no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag,", 0], [" no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func", 0], ["'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag", 0], ["'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag)", 0], ["'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\", 0], [' no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by', 0], [' no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project', 0], [') dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag', 0], ['.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag', 0], ['.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all(', 0], ['.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all()', 0], ['(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count', 0], [') dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs', 0], ['=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count:', 0], [' org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats', 0], ['.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO', 0], ['.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup)', 0], ['.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag:', 0], ['.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations', 0], ['.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats', 0], ['))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs', 0], ['\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs', 0], ['.group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +', 0], ['.group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else', 0], ['.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count', 0], [').all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created', 0], [') no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created', 0], [' unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count', 0], [' unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count:', 0], [' for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj', 0], [' org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO', 0], ["=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged", 0], ["(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count))", 0], [".tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations", 0], [": dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append", 0], [".organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj", 0], ["(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj) dto.total_organizations", 0], [" unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj) dto.total_organizations", 0], [" else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj) dto.total_organizations=unique_orgs return", 0], [" no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj) dto.total_organizations=unique_orgs return dto", 0], ['\nfrom cachetools import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO', 0], [' cachetools import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO', 0], [' cachetools import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO,', 0], [' import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO', 0], [' TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO', 0], [' cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO,', 0], [' flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery', 0], [' current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO', 0], [' current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO,', 0], [' current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\', 0], [' import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from', 0], [' reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server', 0], [' import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models', 0], ['.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto', 0], [' datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO', 0], [' server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server', 0], [' db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis', 0], ['.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message', 0], [' import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server', 0], [' UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models', 0], [' UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task', 0], [' UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import', 0], [', UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory', 0], [' UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server', 0], [' UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models', 0], [' UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis', 0], [' \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user', 0], ['\\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user', 0], [' UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import', 0], [' server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole', 0], [' server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole,', 0], ['.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel', 0], ['.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server', 0], [' import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models', 0], [' from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils', 0], [' server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import', 0], ['.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound', 0], ['.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server', 0], [' import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services', 0], [' server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service', 0], ['.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService', 0], [' import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError', 0], [' TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError', 0], [' from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server', 0], [' server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services', 0], ['.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging', 0], ['.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging', 0], [' User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import', 0], [', UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService', 0], [' UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService', 0], [' MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from', 0], [' MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server', 0], [' server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services', 0], ['.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service', 0], [' NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import', 0], [' from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template', 0], [' server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache', 0], ['.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache', 0], ['.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache', 0], [' import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize', 0], [' OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl', 0], [' OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600', 0], [', OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache', 0], [' OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache', 0], [' from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache', 0], ['.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize', 0], ['.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024', 0], ['.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl', 0], ['.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600', 0], ['.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class', 0], [' SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception', 0], [' from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): "', 0], [' from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """', 0], [' server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom', 0], ['.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception', 0], ['.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers', 0], [' get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred', 0], [' get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in', 0], [' user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the', 0], ['=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def', 0], [', ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message', 0], [' ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message', 0], [') user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if', 0], [' user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app', 0], ['(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app', 0], ['(maxsize=1024, ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger', 0], [', ttl=600) class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error', 0], [') class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message)', 0], [' class UserServiceError(Exception): """ Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class', 0], ['""" Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def', 0], ['" Custom Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id', 0], [' Exception to notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id', 0], [' notify callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id', 0], [' callers an error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User', 0], [' error occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user', 0], [' occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User', 0], [' occurred when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User()', 0], [' when in the User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id', 0], [' User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id', 0], [' User Service """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if', 0], [' """ def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None', 0], [' def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None', 0], [' def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None:', 0], ['(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound', 0], [' current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod', 0], [' current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def', 0], ['.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username', 0], [' class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username:', 0], [' class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str)', 0], [' UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User', 0], [' @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User', 0], [' get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username', 0], [' get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username', 0], [' int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is', 0], ['-> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None', 0], [' User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None:', 0], [' user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise', 0], ['().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound(', 0], [' user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod', 0], [' None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username', 0], [' raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username', 0], [' return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id', 0], [' return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int', 0], [' @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username:', 0], [' def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -', 0], [' get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User:', 0], ['(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService', 0], [' -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id', 0], [': user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id', 0], [' user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if', 0], ['=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user', 0], ['.get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username', 0], ['(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username', 0], [' if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user', 0], ['() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return', 0], [' user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user', 0], [' @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod', 0], [' def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def', 0], [' update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user', 0], [': int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username', 0], [' int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username,', 0], [' str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count)', 0], [') -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): "', 0], [' -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): ""', 0], ['-> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """', 0], [' user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates', 0], ['=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in', 0], ['.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param', 0], ['.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id:', 0], [') if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user', 0], [' user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id', 0], ['=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username', 0], ['.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param', 0], ['(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count', 0], [' user @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count', 0], [' @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count "', 0], [' @staticmethod def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user', 0], [' def register_user(osm_id, username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User(', 0], [', username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user', 0], [' username, changeset_count): """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user', 0], [': """ Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level', 0], ['" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level', 0], [' user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level', 0], [':param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app', 0], [' osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config', 0], [':param username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'', 0], [' username: OSM Username :param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level', 0], [':param changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app', 0], [' changeset_count: OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[', 0], [' OSM changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED', 0], [' changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED', 0], [' changeset count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED\']', 0], [' count """ new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED\'] if', 0], ['""" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED\'] if changeset_count', 0], ['" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level=current_app.config[\'MAPPER_LEVEL_ADVANCED\'] if changeset_count', 0], [" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count >", 0], [" new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level:", 0], ["=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user", 0], [" new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level", 0], ["=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel", 0], ["['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level ", 0], ["'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count <", 0], [" advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level", 0], ["=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user", 0], [".config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level", 0], ["['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel", 0], ["'MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel", 0], [' if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value', 0], [' > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level', 0], [' new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel', 0], ['=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user', 0], ['.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create', 0], ['.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create(', 0], ['.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return', 0], [' elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user', 0], [' intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user', 0], ['< changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username', 0], [' < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username', 0], [' advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username', 0], [': new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username', 0], [' new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username', 0], ['.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str', 0], ['.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str,', 0], ['.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int)', 0], ['.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -', 0], ['.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO', 0], ['.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: "', 0], [' else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets', 0], [' new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user', 0], ['.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied', 0], ['=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied username "', 0], [') return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username', 0], [' get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user', 0], ['(requested_username: str, logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id', 0], [' logged_in_user_id: int) -> UserDTO: """Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id)', 0], [' int) -> UserDTO: """Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService', 0], ['""Gets user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level', 0], [' user DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level', 0], [' DTO for supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level', 0], [' supplied username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user', 0], [' username """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id)', 0], [' """ requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return', 0], ['"" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user', 0], [' requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user', 0], ['.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user', 0], ['.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username', 0], ['(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod', 0], ['=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user', 0], ['.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user', 0], ['.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int', 0], ['.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) ', 0], ['.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) ->', 0], ['(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: ', 0], ['(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user', 0], [' UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO', 0], ['.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO for supplied', 0], ['.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id', 0], ['(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return', 0], ['.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto', 0], [' get_user_dto_by_id(requested_user: int) -> UserDTO: """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username', 0], ['(requested_user: int) -> UserDTO: """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod', 0], [': """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username', 0], [' """Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username:', 0], ['""Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str', 0], ['"Gets user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str', 0], [' user DTO for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user', 0], [' for supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService', 0], [' supplied user id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService', 0], [' id """ requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username', 0], ['""" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username', 0], [' requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username', 0], ['=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto', 0], ['.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO', 0], ['(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions', 0], [' requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter', 0], ['.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory', 0], ['(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id', 0], ['(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id=', 0], ['.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory', 0], [' @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory', 0], [' def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !=', 0], [" get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !=''", 0], [" get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ", 0], [" get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all", 0], ["(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped", 0], [" str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory", 0], [" user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query", 0], [".get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory", 0], [".get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id=", 0], [" stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", 0], [" actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED'", 0], ["=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count()", 0], [".filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated", 0], ["( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory", 0], [" TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory", 0], ["==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter", 0], ["=user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter(", 0], [" TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory", 0], [".action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id,", 0], ["!='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", 0], [".all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", 0], ["=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED", 0], [".query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count", 0], [".filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count()", 0], ["( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped", 0], [" TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped", 0], ["=user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query", 0], [".id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query", 0], [" TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter(", 0], ["='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id=", 0], ["'MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user", 0], [".count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", 0], ["=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE", 0], [".filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct", 0], ["( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory", 0], [" TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory", 0], [".user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id", 0], ["=user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count", 0], [".id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count()", 0], [" TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto", 0], ["'VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped", 0], [" ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto", 0], [" projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated", 0], [" TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped", 0], [".user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped", 0], ["=user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped", 0], [" TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto", 0], ["'STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent", 0], ["' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto", 0], [').distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto', 0], ['.distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping', 0], ['(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping', 0], ['.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto', 0], [').count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating', 0], ['() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating', 0], [' stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating', 0], ['.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating', 0], ['.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql', 0], ['=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT', 0], ['=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM', 0], ['.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text', 0], ['.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, ', 0], ['=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS', 0], ['.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history', 0], ['=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action', 0], [' stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION', 0], ['.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id=', 1], [' stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0}', 1], ['.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db', 1], ['.time_spent_validating=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute', 1], ['=0 sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql', 1], ['="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for', 1], [' SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time', 1], [', \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time', 1], [') FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0', 1], [' FROM task_history WHERE action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0]', 1], [' action=\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time', 1], ['\'LOCKED_FOR_VALIDATION\' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto', 1], [' and user_id={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating', 1], ['={0};""".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time', 1], ['"".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time', 1], ['(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds', 1], [' total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds', 1], [' total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds()', 1], ['(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto', 1], [' time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating', 0], [' total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating', 0], [' total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql', 0], [' total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="', 0], [' total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP', 0], ['[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text', 0], [' total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24', 0], [' total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI', 0], [' total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\'', 0], ['.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history', 0], ['.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=', 0], ['=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING', 0], ['.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0', 0], ['.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};"', 0], ['.total_time_spent +=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id', 0], ['=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time', 1], ['=stats_dto.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db', 1], ['.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine', 1], ['.time_spent_validating sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql', 1], [' sql="""SELECT SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time', 1], [' SUM(TO_TIMESTAMP(action_text, \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time', 1], [', \'HH24:MI:SS\')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time', 1], [')::TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time', 1], [':TIME) FROM task_history WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time', 1], [' WHERE action=\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto', 1], ['\'LOCKED_FOR_MAPPING\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping', 1], ['\' and user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time', 1], [' user_id={0};""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time', 1], ['""".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds', 1], ['.format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds', 1], ['.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto', 1], [') total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent', 1], ['.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping', 1], [' for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping', 0], [' in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return', 0], [' total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto', 0], [': total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod', 0], ['] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details', 0], [' if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id', 0], [': stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto', 0], [' stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto:', 0], [' stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO', 0], ['.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) ', 0], ['.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -', 0], ['.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: ', 0], ['.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: ""', 0], ['=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user', 0], ['.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied', 0], ['() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user,', 0], ['.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their', 0], [' stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be', 0], [' @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent "', 0], [' def update_user_details(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService', 0], ['(user_id: int, user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id', 0], [', user_dto: UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent', 0], [' UserDTO) -> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent', 0], ['-> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False', 0], ['> dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False', 0], [' dict: """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if', 0], [' """ Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto', 0], [' Update user with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto', 0], [' with info supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address', 0], [' supplied by user, if they add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user', 0], [' add or change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto', 0], [' change their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address', 0], [' their email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address', 0], [' email address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower', 0], [' address a verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService', 0], [' verification mail will be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService', 0], [' be sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email', 0], [' sent """ user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto', 0], ['"" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto', 0], [' user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address', 0], ['.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower()', 0], ['.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user', 0], ['(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username', 0], [' user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified', 0], ['.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False', 0], ['.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False)', 0], [' user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent', 0], ['.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent', 0], ['.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto', 0], ['.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return', 0], ['): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent', 0], [' SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent', 0], ['.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent', 0], ['(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent', 0], ['.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached', 0], ['), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache', 0], ['.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache', 0], ['.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache)', 0], ['.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users', 0], ['(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery', 0], ['(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery)', 0], ['=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO', 0], [' verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO', 0], [' verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO:', 0], ['=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated', 0], [' user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list', 0], ['.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users', 0], [' dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users', 0], [' @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache)', 0], ['(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users', 0], ['(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username', 0], [' def get_all_users(query: UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str', 0], [' UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page:', 0], [' UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) ', 0], [' UserSearchQuery) -> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) ->', 0], ['> UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO', 0], [' UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO', 0], [' UserSearchDTO: """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: ', 0], [' """ Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated', 0], ['"" Gets paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated', 0], [' paginated list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list', 0], [' list of users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users', 0], [' users """ return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered', 0], ['"" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username', 0], [' User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username,', 0], [') @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return', 0], [' def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id', 0], [' filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page', 0], ['(username: str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod', 0], [' str, project_id: int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager', 0], [' int, page: int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager', 0], [': int) -> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id', 0], ['-> UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int', 0], [' UserFilterDTO: """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: ', 0], [' """ Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """', 0], ['""" Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is', 0], [' Gets paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the', 0], [' paginated list of users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a', 0], [' users, filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager', 0], [', filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager ""', 0], [' filtered by username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """', 0], [' username, for autocomplete """ return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService', 0], ['"" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id)', 0], ['.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)', 0], [' project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN', 0], [') @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER', 0], [' @staticmethod def is_user_a_project_manager(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER', 0], ['(user_id: int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod', 0], [' int) -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod', 0], [') -> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def', 0], ['-> bool: """ Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level', 0], ['"" Is the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level', 0], [' the user a project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level', 0], [' project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int', 0], [' project manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int):', 0], [' manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): ""', 0], [' manager """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets', 0], [' user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping', 0], ['=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is', 0], ['.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at', 0], ['.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""', 0], ['(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService', 0], [' if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id', 0], ['.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id', 0], ['.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level', 0], [': return True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod', 0], [' True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod', 0], [' True return False @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def', 0], [' @staticmethod def get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id', 0], [' get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool', 0], [' get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: ', 0], [' get_mapping_level(user_id: int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: ""', 0], [': int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if', 0], [' int): """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if', 0], [' """ Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is', 0], ['" Gets mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a', 0], [' mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator', 0], [' mapping level user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator "', 0], [' user is at""" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator """ user', 0], ['=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id', 0], [' MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in', 0], ['.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR', 0], [' @staticmethod def is_user_validator(user_id: int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN', 0], ['(user_id: int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return', 0], [' int) -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return', 0], [') -> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return', 0], ['-> bool: """ Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False', 0], ['""" Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod', 0], [' Determines if user is a validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod', 0], [' validator """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked', 0], [' """ user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id', 0], ['"" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int', 0], [' user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int', 0], [' user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -', 0], ['=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) ->', 0], ['=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """', 0], ['.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a', 0], ['(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user', 0], [') if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked', 0], [' UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked ', 0], [' UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked ""', 0], ['.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked """ user=UserService', 0], [' UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id)', 0], [']: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY', 0], [' True return False @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return', 0], [' @staticmethod def is_user_blocked(user_id: int) -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return', 0], [' int) -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects', 0], [' -> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id', 0], ['> bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id', 0], [' bool: """ Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id', 0], ['" Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int', 0], [' Determines if a user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int,', 0], [' user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int)', 0], [' user is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): ', 0], [' is blocked """ user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """', 0], ['""" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project', 0], ['"" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project', 0], [' user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to', 0], ['.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects', 0], ['.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if', 0], ['(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist', 0], [' if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise', 0], ['(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return', 0], [': return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects', 0], [' True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id,', 0], [' False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id)', 0], [' @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod', 0], [' upsert_mapped_projects(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects', 0], ['(user_id: int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name', 0], [' int, project_id: int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str', 0], [': int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale', 0], [' int): """ Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale', 0], ['" Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str):', 0], [' Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): ', 0], [' Add project to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): ""', 0], [' to mapped projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all', 0], [' projects if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a', 0], [' if it doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has', 0], [' doesn\'t exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped', 0], [' exist, otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated', 0], [' otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on', 0], [' otherwise return """ User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """', 0], ['(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name)', 0], [') @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects', 0], [' get_mapped_projects(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects', 0], ['(user_name: str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale', 0], [' str, preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod', 0], [' preferred_locale: str): """ Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod', 0], ['"" Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user', 0], [' Gets all projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id', 0], [' projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id', 0], [' projects a user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id:', 0], [' user has mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username', 0], [' mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str', 0], [' mapped or validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str,', 0], [' validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str)', 0], [' validated on """ user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): ""', 0], ['""" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add', 0], ['"" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role', 0], ['=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to', 0], ['.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param', 0], ['.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID', 0], [') return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting', 0], [' User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to', 0], [' preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username', 0], [') @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the', 0], [' @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should', 0], [' add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added', 0], [' add_role_to_user(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to ', 0], ['(admin_user_id: int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The', 0], [' int, username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested', 0], [' username: str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role', 0], [' str, role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises', 0], [' role: str): """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError', 0], [' """ Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError', 0], ['""" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError ', 0], ['" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError ""', 0], [' role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try', 0], [' to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role', 0], [':param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role', 0], [' admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role', 0], [' of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()', 0], [' admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except', 0], [' add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise', 0], [' the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError', 0], [':param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError', 0], [' username: Username of user the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f', 0], [' the role should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted', 0], [' should be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are', 0], [' be added to :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN', 0], [' :param role: The requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER', 0], [' requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR', 0], [' requested role :raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR\')', 0], [':raises UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR\') admin=UserService', 0], [' UserServiceError """ try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR\') admin=UserService.get_user_by_id', 0], ['"" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f\'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR\') admin=UserService.get_user_by_id(admin_user_id', 0], [": requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id", 0], ["=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole", 0], ["[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin", 0], [".upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role)", 0], ["] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if", 0], [" KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role=", 0], ["(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and", 0], ["'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role", 0], ["{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role", 0], ["{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role=", 0], [" values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN", 0], [" values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN:", 0], [" are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise", 0], [", PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError", 0], [" VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must", 0], ["') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin", 0], [" admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin", 0], ["=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign", 0], [".get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role'", 0], [".get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if", 0], [") admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole", 0], [" admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole", 0], ["(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and", 0], [") if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role", 0], ["==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER", 0], [".PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER:", 0], [" and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError", 0], [" requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError", 0], [".ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an", 0], [" raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to", 0], [" UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign", 0], ["'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager", 0], [" must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role')", 0], [" an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user", 0], [" assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService", 0], [" Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username", 0], [" if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username", 0], [" admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username", 0], [".PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role", 0], [" requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role", 0], ["==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod", 0], ["=UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod", 0], [".PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level", 0], [" UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username:", 0], [" UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str,", 0], ["(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level", 0], ["'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str", 0], [" must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ", 0], [" must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ->", 0], [" an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User", 0], [' Admin to assign Project Manager role\') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: "', 0], [' to assign Project Manager role\') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets', 0], [' assign Project Manager role\') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the', 0], [' Manager role\') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping', 0], [' role\') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level ', 0], [' user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises', 0], ['.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try:', 0], ['(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()', 0], [' @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError', 0], [' @staticmethod def set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise', 0], [' set_user_mapping_level(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError', 0], ['(username: str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role', 0], [': str, level: str) -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level}', 0], [' -> User: """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are', 0], [': """ Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER', 0], ['""" Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER', 0], ['"" Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER', 0], ['" Sets the users mapping level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER,', 0], [' level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED\'', 0], [' level :raises: UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED\')', 0], [': UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED\') user=UserService', 0], [' UserServiceError """ try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED\') user=UserService', 0], ['" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f\'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED\') user=UserService.get_user_by_username', 0], [" requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username", 0], ["=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level", 0], ["[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level", 0], ["] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level", 0], [" KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return", 0], [" raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod", 0], [" role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert", 0], ["{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id", 0], ["} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id", 0], [" accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id:", 0], [" values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert", 0], [" are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert:", 0], [" BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool", 0], [" BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) ->", 0], [" INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User:", 0], [' INTERMEDIATE, ADVANCED\') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """', 0], [', ADVANCED\') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled', 0], [') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables', 0], ['=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert', 0], ['.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the', 0], [' user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError ', 0], [' user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id)', 0], [' def set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert', 0], [' set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert', 0], [' set_user_is_expert(user_id: int, is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return', 0], [', is_expert: bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod', 0], [' bool) -> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms', 0], ['> User: """ Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms', 0], [' Enabled or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id', 0], [' or disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int', 0], [' disables expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id', 0], [' expert mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id', 0], [' mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int)', 0], [' mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): ', 0], [' mode for the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): ""', 0], [' the user :raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves', 0], [':raises: UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact', 0], [' UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has', 0], [' UserServiceError """ user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted', 0], ['"" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license', 0], ['=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license terms ', 0], ['=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license terms """', 0], [' return user @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms', 0], [' @staticmethod def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id', 0], [' def accept_license_terms(user_id: int, license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod', 0], ['(user_id: int, license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license', 0], [' int, license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license', 0], [', license_id: int): """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id', 0], [': """ Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id', 0], ['"" Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id', 0], ['" Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id:', 0], [' Saves the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int', 0], [' the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): ', 0], [' the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): "', 0], [' the fact user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """', 0], [' user has accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if', 0], [' accepted license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has', 0], [' license terms """ user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted', 0], ['""" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license', 0], [' user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license', 0], ['=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license ""', 0], ['(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence', 0], [' def has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id', 0], [' has_user_accepted_license(user_id: int, license_id: int): """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod', 0], ['(user_id: int, license_id: int): """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user', 0], [' int, license_id: int): """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user', 0], [': """ Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str', 0], ['""" Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str', 0], ['"" Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str)', 0], ['" Checks if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) ', 0], [' if user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO', 0], [' user has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: ', 0], [' has accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: "', 0], [' accepted specified license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets', 0], [' license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for', 0], [' license """ user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the', 0], ['"" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from', 0], ['.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username', 0], ['.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises', 0], ['(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound ', 0], ['(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """', 0], [' @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService', 0], [' get_osm_details_for_user(username: str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username', 0], [' str) -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService', 0], [' -> UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService', 0], [' UserOSMDTO: """ Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user', 0], ['"" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user', 0], [' OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user', 0], [' details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user', 0], [' the user from OSM API :param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return', 0], [':param username: username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod', 0], [': username in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level', 0], [' in scope :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level', 0], [' :raises UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level', 0], [' UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id', 0], [' UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int', 0], [' UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int):', 0], [' UserServiceError, NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): "', 0], [' NotFound """ user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users', 0], ['""" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping', 0], ['" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping', 0], ['=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level', 0], ['.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update', 0], ['.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have', 0], ['.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id', 0], ['(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id', 0], ['.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level', 0], [' return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level', 0], [' @staticmethod def check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel', 0], [' check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level', 0], [' check_and_update_mapper_level(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level=', 0], ['(user_id: int): """ Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel', 0], ['"" Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return', 0], [' Check users mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return', 0], [' mapping level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level', 0], [' level and update if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level', 0], [' if they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config', 0], [' they have crossed threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config[', 0], [' threshold """ user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE', 0], ['"" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config[\'MAPPER_LEVEL_INTERMEDIATE\'] advanced_level', 0], ["=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level", 0], [".get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app", 0], [") user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", 0], ["=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", 0], ["=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'", 0], ["=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try", 0], [".mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details", 0], ["=MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user", 0], [".ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id", 0], [".ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id)", 0], [" intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details", 0], [".config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level", 0], ["'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and", 0], ["'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level", 0], ["'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level !", 0], ["'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel", 0], ["=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value", 0], ["=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value):", 0], ["'MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel", 0], [' try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED', 0], [' osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED', 0], ['(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id,', 0], [') if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username', 0], ['(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username', 0], [".changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED'", 0], [".changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif", 0], ["> advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level", 0], [" advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level", 0], [" advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level <", 0], [" user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details", 0], [".mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details", 0], ["!= MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count", 0], [" MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count ", 0], [".ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level", 0], [": user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level", 0], ["=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel", 0], [".ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE", 0], [" UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user", 0], [".notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level", 0], [" user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE", 0], [", 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService", 0], ["'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService", 0], ['(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id', 0], [' < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user', 0], [' osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user', 0], [".changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE", 0], [".changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE')", 0], ["< advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except", 0], [" advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except", 0], [" user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError", 0], [" user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError:", 0], [".mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app", 0], ["!=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger", 0], ["=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error(", 0], [".INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error", 0], [" user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update", 0], [".mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level')", 0], ["=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return", 0], [".INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save(", 0], [".INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return", 0], [".value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user", 0], [".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade", 0], [".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id:", 0], [", user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username", 0], [" user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username", 0], [".username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str", 0], [" 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str", 0], ["'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str)", 0], [" OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template", 0], [": current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en", 0], [".error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt", 0], [".error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt'", 0], ["'Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if", 0], [" to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not", 0], [" update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None:", 0], ["') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template", 0], [" user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template", 0], [" return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('", 0], [" user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME", 0], [" def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]',", 0], [" notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username", 0], [", username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template", 0], [": str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('", 0], [" str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL", 0], [" level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]", 0], [" level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]',", 0], [" str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level", 0], ["=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message", 0], [".txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id", 0], [" username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id", 0], [" username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id", 0], [" not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message", 0], ["=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject", 0], ["[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade", 0], ["', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message", 0], [" username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message", 0], ["=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template", 0], ["('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", 0], ["[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", 0], ["', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", 0], [", level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", 0], [") level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save()", 0], [" level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod", 0], [" level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def", 0], [" level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level(", 0], [" level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() ", 0], [" level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() ->", 0], [" level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int:", 0], [' level_upgrade_message.to_user_id=user_id level_upgrade_message.subject=\'Mapper Level Upgrade \' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: "', 0], ['=user_id level_upgrade_message.subject=\'Mapper Level Upgrade \' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function', 0], [' level_upgrade_message.subject=\'Mapper Level Upgrade \' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru', 0], ['\'Mapper Level Upgrade \' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and', 0], [' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User', 0], ['=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated', 0], [' level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated()', 0], [' level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1', 0], [' @staticmethod def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users', 0], [' def refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users', 0], [' refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user', 0], [' refresh_mapper_level() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users', 0], ['() -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService', 0], [' -> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService', 0], ['> int: """ Helper function to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService', 0], [' to run thru all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level', 0], [' all users in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user', 0], [' in the DB and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated', 0], [' and update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated', 0], [' update their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50', 0], [' their mapper level """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print', 0], [' """ users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f\'{users_updated', 0], ['" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f\'{users_updated', 0], [" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated}", 0], ["=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated} users", 0], ["() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated} users updated of{total_users}') users_updated", 0], [" users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated} users updated of{total_users}') users_updated +=1", 0], ["=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated} users updated of{total_users}') users_updated +=1 return users_updated", 0], ['\nimport sqlobject try: import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta', 0], [' sqlobject try: import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta', 0], [' try: import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder', 0], [" import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name", 0], [" vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name'", 0], [" vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol", 0], [" from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID", 0], [" vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID", 0], [".sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True", 0], [".base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages", 0], [" import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject", 0], [" import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin", 0], [" vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package", 0], [".base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package')", 0], [" from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision", 0], [" import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase", 0], [" State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject", 0], [" License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject", 0], [" License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject)", 0], ["(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject):", 0], ["): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey", 0], [" class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey", 0], [" class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey(", 0], [": _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package'", 0], ["='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True)", 0], ["' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title", 0], [" name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject", 0], ["=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject", 0], ["(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None)", 0], ["=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url", 0], [" packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject", 0], [".MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default", 0], ["') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url", 0], [") class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url", 0], [" PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol", 0], ["(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default", 0], [".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None", 0], [".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license", 0], ["): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey", 0], [".ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License", 0], [".ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License'", 0], ["('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default", 0], ["'Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None", 0], [", cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes", 0], [" cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes", 0], ["=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject", 0], [" title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", 0], ["=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", 0], [".UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None)", 0], ["(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class", 0], [") url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision", 0], ["=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase", 0], ["=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject):", 0], [") download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base", 0], ["=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey", 0], [".UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag", 0], [".UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag'", 0], ["(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade", 0], ["(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True", 0], [") license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class", 0], ["=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", 0], [".ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", 0], ["('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject", 0], ["=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject", 0], ["=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject):", 0], [" notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base", 0], [".UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey", 0], ["=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag'", 0], [") class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade", 0], [" TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True", 0], [" TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class", 0], ["(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package", 0], [".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase", 0], ["=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject):", 0], [".ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class", 0], ["('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class", 0], [" cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision", 0], [" PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes", 0], ["(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names", 0], [": base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", 0], ["=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", 0], ["=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class)", 0], [".ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject", 0], [', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID', 0], [' cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID', 0], ['=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True', 0], [') class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m', 0], [' class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m', 0], [' class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[', 0], [" Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags'", 0], [" Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', ", 0], ["(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan", 0], [".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models", 0], [".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package'", 0], [".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag'", 0], [" sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')", 0], [" versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname", 0], [" versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname):", 0], [" versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try:", 0], [".get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get", 0], [" name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self", 0], ["(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create", 0], ["=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname", 0], [" m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname", 0], ["[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self", 0], [", 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create", 0], [".models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag", 0], [".package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag)", 0], ["', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag", 0], [" 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag", 0], [", 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase", 0], ["')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject", 0], [' add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject', 0], ['(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class', 0], [' tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class', 0], [' try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision', 0], ['=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name', 0], ['.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject', 0], ['(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID', 0], [' except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True', 0], ['=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes', 0], ['.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase', 0], ['.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names', 0], ['.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 0], ['.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 0], ['(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=', 0], ['=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[', 0], [") class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages", 0], [" class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages", 0], [" Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', ", 0], ["(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan", 0], [".VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models", 0], [".VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package'", 0], ["): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package'", 0], [" sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')", 0], [".UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self", 0], [".UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self,", 0], ["(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query", 0], [" versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query", 1], ['.get_attribute_names(sqlobj_version_class) m2m=[(\'packages\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name', 1], ['(sqlobj_version_class) m2m=[(\'packages\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%', 1], ['(sqlobj_version_class) m2m=[(\'packages\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\'', 1], ['(sqlobj_version_class) m2m=[(\'packages\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')"', 1], [' m2m=[(\'packages\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str', 1], ['\', \'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return', 1], ['\'ckan.models.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return', 1], ['.package\', \'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select', 1], ['\'Package\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query', 1], ['\', \'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class', 1], ['\'PackageTag\')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag', 1], [')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase', 1], [' search_by_name(self, text_query): text_query_str=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject)', 1], ['=str(text_query) sql_query="UPPER(tag.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision', 1], ['.name) LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names', 1], [' LIKE UPPER(\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names', 1], ['\'%%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], ['%%s%%\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], ['\')" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], ['" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], ['% text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], [' text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class', 1], [' return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package', 0], [' self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject', 0], ['.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject', 0], ['(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey', 0], [") class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package", 0], [" class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package", 0], [" PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade", 0], [".VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey(", 0], [": sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag", 0], [" sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag", 0], [" sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True", 0], [" versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex", 0], ["=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package", 0], [".get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package', 'tag", 0], [".get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package', 'tag',", 0], ["(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package', 'tag', unique=True)", 0]]
