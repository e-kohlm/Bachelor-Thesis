[{"snippet_id": 1630, "code": " -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel", "label": 0}, {"snippet_id": 1571, "code": "() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message", "label": 0}, {"snippet_id": 1832, "code": "* from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append", "label": 1}, {"snippet_id": 3750, "code": " level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() ->", "label": 0}, {"snippet_id": 1601, "code": "): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode", "label": 0}, {"snippet_id": 3165, "code": " total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"", "label": 0}, {"snippet_id": 3196, "code": " in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return", "label": 0}, {"snippet_id": 1138, "code": " message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto", "label": 0}, {"snippet_id": 935, "code": ".objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch", "label": 0}, {"snippet_id": 2603, "code": "=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall", "label": 0}, {"snippet_id": 2777, "code": "'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag", "label": 0}, {"snippet_id": 2327, "code": " user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project,", "label": 0}, {"snippet_id": 836, "code": "(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict:", "label": 0}, {"snippet_id": 917, "code": ": row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent", "label": 0}, {"snippet_id": 289, "code": ") quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField(", "label": 0}, {"snippet_id": 2943, "code": ": user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 3024, "code": ".mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied", "label": 0}, {"snippet_id": 3341, "code": "-> bool: \"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False", "label": 0}, {"snippet_id": 1065, "code": ".DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages'", "label": 0}, {"snippet_id": 2408, "code": "=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated", "label": 0}, {"snippet_id": 1854, "code": "{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has", "label": 1}, {"snippet_id": 1102, "code": "='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id", "label": 0}, {"snippet_id": 2170, "code": " row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds", "label": 0}, {"snippet_id": 1783, "code": ": raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username", "label": 0}, {"snippet_id": 2574, "code": "(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if", "label": 1}, {"snippet_id": 171, "code": "=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey(", "label": 0}, {"snippet_id": 1839, "code": "{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id", "label": 1}, {"snippet_id": 1483, "code": " default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit(", "label": 0}, {"snippet_id": 1433, "code": ".Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY", "label": 0}, {"snippet_id": 1945, "code": ".project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", "label": 1}, {"snippet_id": 2264, "code": ".models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize", "label": 0}, {"snippet_id": 1007, "code": "\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column", "label": 0}, {"snippet_id": 3014, "code": ": new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username", "label": 0}, {"snippet_id": 1025, "code": "=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id", "label": 0}, {"snippet_id": 675, "code": " filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm", "label": 0}, {"snippet_id": 2480, "code": " history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item", "label": 0}, {"snippet_id": 90, "code": " readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', ", "label": 0}, {"snippet_id": 2328, "code": " last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user", "label": 0}, {"snippet_id": 2638, "code": "( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task", "label": 0}, {"snippet_id": 920, "code": " row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch", "label": 0}, {"snippet_id": 758, "code": "(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part", "label": 0}, {"snippet_id": 3338, "code": "(user_id: int) -> bool: \"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return", "label": 0}, {"snippet_id": 2337, "code": " project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state=", "label": 0}, {"snippet_id": 608, "code": " _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear", "label": 0}, {"snippet_id": 3674, "code": ".mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details", "label": 0}, {"snippet_id": 791, "code": "*locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id", "label": 0}, {"snippet_id": 3681, "code": " UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user", "label": 0}, {"snippet_id": 3617, "code": " :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level", "label": 0}, {"snippet_id": 725, "code": "(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year", "label": 0}, {"snippet_id": 3712, "code": " OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template", "label": 0}, {"snippet_id": 3561, "code": " UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has", "label": 0}, {"snippet_id": 2282, "code": " homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'):", "label": 0}, {"snippet_id": 1670, "code": " base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser(", "label": 0}, {"snippet_id": 2897, "code": ") user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if", "label": 0}, {"snippet_id": 2447, "code": ".task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory", "label": 0}, {"snippet_id": 2176, "code": " total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=", "label": 0}, {"snippet_id": 409, "code": "('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if", "label": 0}, {"snippet_id": 1078, "code": ".relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign", "label": 0}, {"snippet_id": 647, "code": " _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear)", "label": 0}, {"snippet_id": 1994, "code": " mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit()", "label": 0}, {"snippet_id": 3926, "code": ".package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select", "label": 1}, {"snippet_id": 659, "code": "[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id", "label": 0}, {"snippet_id": 1471, "code": ") linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary", "label": 0}, {"snippet_id": 1084, "code": " project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref", "label": 0}, {"snippet_id": 2884, "code": ".smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class", "label": 0}, {"snippet_id": 2938, "code": " @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username:", "label": 0}, {"snippet_id": 330, "code": ": if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year", "label": 0}, {"snippet_id": 1674, "code": "].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level", "label": 0}, {"snippet_id": 2044, "code": " image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted the terms", "label": 0}, {"snippet_id": 1249, "code": "): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query", "label": 0}, {"snippet_id": 3726, "code": ": str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('", "label": 0}, {"snippet_id": 2517, "code": "\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by", "label": 0}, {"snippet_id": 2951, "code": " @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod", "label": 0}, {"snippet_id": 3806, "code": " name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject", "label": 0}, {"snippet_id": 3034, "code": " supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user", "label": 0}, {"snippet_id": 187, "code": " ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf", "label": 0}, {"snippet_id": 13, "code": " F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel", "label": 0}, {"snippet_id": 1032, "code": ".BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db", "label": 0}, {"snippet_id": 1045, "code": ".Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read", "label": 0}, {"snippet_id": 3649, "code": "=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try", "label": 0}, {"snippet_id": 3543, "code": ".get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables expert mode for the", "label": 0}, {"snippet_id": 2350, "code": " TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project", "label": 0}, {"snippet_id": 1553, "code": " user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id", "label": 0}, {"snippet_id": 2335, "code": "(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'", "label": 0}, {"snippet_id": 1605, "code": " email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"", "label": 0}, {"snippet_id": 1600, "code": " is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables", "label": 0}, {"snippet_id": 1987, "code": ", preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets", "label": 0}, {"snippet_id": 1705, "code": " listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return", "label": 0}, {"snippet_id": 63, "code": " from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear", "label": 0}, {"snippet_id": 3889, "code": " 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag", "label": 0}, {"snippet_id": 657, "code": ") if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters", "label": 0}, {"snippet_id": 2628, "code": "\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count", "label": 0}, {"snippet_id": 1033, "code": " db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer", "label": 0}, {"snippet_id": 2292, "code": ": int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus", "label": 0}, {"snippet_id": 1941, "code": ".project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for", "label": 1}, {"snippet_id": 2643, "code": ".locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task", "label": 0}, {"snippet_id": 2379, "code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif", "label": 0}, {"snippet_id": 3223, "code": " with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address", "label": 0}, {"snippet_id": 3032, "code": " user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level", "label": 0}, {"snippet_id": 3397, "code": "(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name)", "label": 0}, {"snippet_id": 1578, "code": " user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status", "label": 0}, {"snippet_id": 593, "code": " return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects", "label": 0}, {"snippet_id": 3286, "code": ": int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id", "label": 0}, {"snippet_id": 569, "code": ", 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values", "label": 0}, {"snippet_id": 728, "code": " .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf", "label": 0}, {"snippet_id": 431, "code": " self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError", "label": 0}, {"snippet_id": 163, "code": " GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear,", "label": 0}, {"snippet_id": 1866, "code": ") -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce", "label": 0}, {"snippet_id": 3731, "code": "=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message", "label": 0}, {"snippet_id": 3759, "code": " level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1", "label": 0}, {"snippet_id": 1696, "code": ".mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return", "label": 0}, {"snippet_id": 1806, "code": "=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id:", "label": 0}, {"snippet_id": 3633, "code": " check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level", "label": 0}, {"snippet_id": 3389, "code": " Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"", "label": 0}, {"snippet_id": 2396, "code": " project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus", "label": 0}, {"snippet_id": 2382, "code": ".VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED:", "label": 0}, {"snippet_id": 2776, "code": " no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func", "label": 0}, {"snippet_id": 3534, "code": " values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert", "label": 0}, {"snippet_id": 3773, "code": " \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated", "label": 0}, {"snippet_id": 3295, "code": " filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\"", "label": 0}, {"snippet_id": 1126, "code": ".from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def", "label": 0}, {"snippet_id": 1141, "code": "=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read", "label": 0}, {"snippet_id": 2565, "code": ".username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results", "label": 1}, {"snippet_id": 1915, "code": ".project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by", "label": 1}, {"snippet_id": 852, "code": "> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem", "label": 0}, {"snippet_id": 3668, "code": ".changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED'", "label": 0}, {"snippet_id": 3303, "code": " int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod", "label": 0}, {"snippet_id": 1769, "code": "(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto", "label": 0}, {"snippet_id": 1425, "code": " projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated", "label": 0}, {"snippet_id": 3254, "code": "(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery", "label": 0}, {"snippet_id": 3916, "code": ".UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self,", "label": 0}, {"snippet_id": 19, "code": " translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin", "label": 0}, {"snippet_id": 3209, "code": ".total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: \"\"\" Update user with info supplied", "label": 0}, {"snippet_id": 3059, "code": "\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str", "label": 0}, {"snippet_id": 3702, "code": ".INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save(", "label": 0}, {"snippet_id": 2861, "code": ".postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging", "label": 0}, {"snippet_id": 1001, "code": ".Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column", "label": 0}, {"snippet_id": 594, "code": " obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj", "label": 0}, {"snippet_id": 518, "code": " Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations", "label": 0}, {"snippet_id": 493, "code": " child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs", "label": 0}, {"snippet_id": 3070, "code": ".as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory", "label": 0}, {"snippet_id": 2073, "code": ": return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object", "label": 0}, {"snippet_id": 2183, "code": " user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE", "label": 0}, {"snippet_id": 1418, "code": " nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False", "label": 0}, {"snippet_id": 2881, "code": ".services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024", "label": 0}, {"snippet_id": 2096, "code": " user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or", "label": 0}, {"snippet_id": 1662, "code": ".filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True", "label": 0}, {"snippet_id": 2767, "code": ".campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count))", "label": 0}, {"snippet_id": 627, "code": " EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations", "label": 0}, {"snippet_id": 342, "code": " 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default", "label": 0}, {"snippet_id": 2174, "code": " if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating", "label": 0}, {"snippet_id": 3088, "code": "( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory", "label": 0}, {"snippet_id": 723, "code": "(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters))", "label": 0}, {"snippet_id": 2945, "code": "=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user", "label": 0}, {"snippet_id": 2747, "code": " campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats", "label": 0}, {"snippet_id": 1757, "code": "\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User.username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast()", "label": 0}, {"snippet_id": 985, "code": "\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes", "label": 0}, {"snippet_id": 2718, "code": "=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text", "label": 0}, {"snippet_id": 1667, "code": "'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items:", "label": 0}, {"snippet_id": 2041, "code": " license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has", "label": 0}, {"snippet_id": 2596, "code": " row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() ", "label": 0}, {"snippet_id": 2729, "code": " where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum", "label": 0}, {"snippet_id": 2251, "code": " import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server", "label": 0}, {"snippet_id": 3357, "code": " UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id)", "label": 0}, {"snippet_id": 3428, "code": " role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError", "label": 0}, {"snippet_id": 874, "code": "=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return", "label": 0}, {"snippet_id": 1709, "code": " dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter", "label": 0}, {"snippet_id": 2127, "code": ".tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto", "label": 0}, {"snippet_id": 3194, "code": ".execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping", "label": 1}, {"snippet_id": 2892, "code": " get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in", "label": 0}, {"snippet_id": 563, "code": "', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances", "label": 0}, {"snippet_id": 2759, "code": " no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +", "label": 0}, {"snippet_id": 1873, "code": "\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated", "label": 0}, {"snippet_id": 1967, "code": "[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale", "label": 0}, {"snippet_id": 3513, "code": ": str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level}", "label": 0}, {"snippet_id": 989, "code": " a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send ", "label": 0}, {"snippet_id": 3333, "code": " user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator \"\"\" user", "label": 0}, {"snippet_id": 333, "code": "{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year", "label": 0}, {"snippet_id": 810, "code": " group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id", "label": 0}, {"snippet_id": 45, "code": " education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories,", "label": 0}, {"snippet_id": 446, "code": " self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError", "label": 0}, {"snippet_id": 404, "code": " return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update,", "label": 0}, {"snippet_id": 1903, "code": " validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count", "label": 1}, {"snippet_id": 655, "code": "(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements", "label": 0}, {"snippet_id": 2050, "code": " has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses", "label": 0}, {"snippet_id": 2978, "code": ":param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app", "label": 0}, {"snippet_id": 2948, "code": " if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user", "label": 0}, {"snippet_id": 3040, "code": ".get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username", "label": 0}, {"snippet_id": 2234, "code": " Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus", "label": 0}, {"snippet_id": 3390, "code": " to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all", "label": 0}, {"snippet_id": 839, "code": " any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "label": 0}, {"snippet_id": 1262, "code": ": int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO", "label": 0}, {"snippet_id": 1902, "code": ") validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id", "label": 1}, {"snippet_id": 2136, "code": ".twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping", "label": 0}, {"snippet_id": 428, "code": " def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent", "label": 0}, {"snippet_id": 1766, "code": ") \\ .filter(User.username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO()", "label": 0}, {"snippet_id": 369, "code": ".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components)", "label": 0}, {"snippet_id": 68, "code": " base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin", "label": 0}, {"snippet_id": 119, "code": "{list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent", "label": 1}, {"snippet_id": 350, "code": "( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return", "label": 0}, {"snippet_id": 2325, "code": "(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project", "label": 0}, {"snippet_id": 127, "code": ", child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent", "label": 0}, {"snippet_id": 222, "code": " min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField", "label": 0}, {"snippet_id": 759, "code": "(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part=", "label": 0}, {"snippet_id": 484, "code": "\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return", "label": 0}, {"snippet_id": 1198, "code": "'Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors", "label": 0}, {"snippet_id": 990, "code": " a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"", "label": 0}, {"snippet_id": 2982, "code": ":param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app", "label": 0}, {"snippet_id": 2476, "code": ") for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date", "label": 0}, {"snippet_id": 2333, "code": ".upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus", "label": 0}, {"snippet_id": 3737, "code": "[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade", "label": 0}, {"snippet_id": 132, "code": " +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager", "label": 0}, {"snippet_id": 1134, "code": ".project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO", "label": 0}, {"snippet_id": 3661, "code": "=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value):", "label": 0}, {"snippet_id": 307, "code": " choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent", "label": 0}, {"snippet_id": 2857, "code": " TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError", "label": 0}, {"snippet_id": 3570, "code": " int, license_id: int): \"\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license", "label": 0}, {"snippet_id": 606, "code": ".items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be", "label": 0}, {"snippet_id": 1989, "code": " row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on", "label": 0}, {"snippet_id": 2636, "code": "=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ", "label": 0}, {"snippet_id": 3227, "code": " their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address", "label": 0}, {"snippet_id": 1153, "code": ".message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None", "label": 0}, {"snippet_id": 2022, "code": " Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"", "label": 0}, {"snippet_id": 2426, "code": "=TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query(", "label": 0}, {"snippet_id": 2305, "code": "\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 1561, "code": ".email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower", "label": 0}, {"snippet_id": 2084, "code": ".session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role", "label": 0}, {"snippet_id": 1859, "code": "(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT", "label": 1}, {"snippet_id": 447, "code": ".parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to", "label": 0}, {"snippet_id": 3866, "code": ") class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m", "label": 0}, {"snippet_id": 2124, "code": " user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto", "label": 0}, {"snippet_id": 3268, "code": " UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) ", "label": 0}, {"snippet_id": 2004, "code": " \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "label": 0}, {"snippet_id": 30, "code": " ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year", "label": 0}, {"snippet_id": 2026, "code": ".session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append", "label": 0}, {"snippet_id": 586, "code": " map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for", "label": 0}, {"snippet_id": 1029, "code": " from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'", "label": 0}, {"snippet_id": 922, "code": "] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf", "label": 0}, {"snippet_id": 473, "code": " included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property", "label": 0}, {"snippet_id": 3216, "code": ", user_dto: UserDTO) -> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent", "label": 0}, {"snippet_id": 1288, "code": "=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto", "label": 0}, {"snippet_id": 1050, "code": "'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user", "label": 0}, {"snippet_id": 3955, "code": ".get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package', 'tag',", "label": 0}, {"snippet_id": 2453, "code": " TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results", "label": 0}, {"snippet_id": 1818, "code": " return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped", "label": 1}, {"snippet_id": 1330, "code": "=user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB \"\"\" db.session.delete(self) db.session.commit()", "label": 0}, {"snippet_id": 3696, "code": "!=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger", "label": 0}, {"snippet_id": 582, "code": "(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents", "label": 0}, {"snippet_id": 3930, "code": ")] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase", "label": 1}, {"snippet_id": 902, "code": "=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], ", "label": 1}, {"snippet_id": 3651, "code": "=MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user", "label": 0}, {"snippet_id": 497, "code": ".child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs", "label": 0}, {"snippet_id": 1250, "code": "\"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query", "label": 0}, {"snippet_id": 2119, "code": " user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self", "label": 0}, {"snippet_id": 1526, "code": " \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username ", "label": 0}, {"snippet_id": 3826, "code": " title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", "label": 0}, {"snippet_id": 3252, "code": ".username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache)", "label": 0}, {"snippet_id": 140, "code": ".child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull", "label": 0}, {"snippet_id": 3899, "code": " except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True", "label": 0}, {"snippet_id": 196, "code": " null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField", "label": 0}, {"snippet_id": 2256, "code": " from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services", "label": 0}, {"snippet_id": 166, "code": " external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete", "label": 0}, {"snippet_id": 2680, "code": "=TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql", "label": 0}, {"snippet_id": 1213, "code": "\"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id", "label": 1}, {"snippet_id": 3582, "code": "\"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license", "label": 0}, {"snippet_id": 1621, "code": " Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\"", "label": 0}, {"snippet_id": 97, "code": " ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id", "label": 0}, {"snippet_id": 1657, "code": ".value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username", "label": 0}, {"snippet_id": 3905, "code": "(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=", "label": 0}, {"snippet_id": 686, "code": ", 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\")", "label": 0}, {"snippet_id": 1413, "code": "=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db", "label": 0}, {"snippet_id": 1671, "code": "=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser()", "label": 0}, {"snippet_id": 3892, "code": " add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject", "label": 0}, {"snippet_id": 1315, "code": " user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit()", "label": 0}, {"snippet_id": 2045, "code": ".get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified", "label": 0}, {"snippet_id": 2411, "code": "'undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", "label": 0}, {"snippet_id": 1095, "code": "(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message", "label": 0}, {"snippet_id": 2492, "code": "=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod", "label": 0}, {"snippet_id": 1557, "code": " the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id", "label": 0}, {"snippet_id": 1067, "code": "=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project", "label": 0}, {"snippet_id": 2152, "code": ".time_spent_mapping=0 user_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id", "label": 1}, {"snippet_id": 645, "code": " _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects", "label": 0}, {"snippet_id": 3703, "code": ".INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return", "label": 0}, {"snippet_id": 1294, "code": ")==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids", "label": 0}, {"snippet_id": 3084, "code": " stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "label": 0}, {"snippet_id": 612, "code": "=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj", "label": 0}, {"snippet_id": 183, "code": " EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf", "label": 0}, {"snippet_id": 3810, "code": " packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject", "label": 0}, {"snippet_id": 3000, "code": "['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 3606, "code": " get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username", "label": 0}, {"snippet_id": 1332, "code": "\nimport geojson import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO,", "label": 1}, {"snippet_id": 973, "code": ".postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a", "label": 0}, {"snippet_id": 1056, "code": "=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id", "label": 0}, {"snippet_id": 3, "code": ".exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property", "label": 0}, {"snippet_id": 2547, "code": " OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by", "label": 0}, {"snippet_id": 1834, "code": " id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}", "label": 1}, {"snippet_id": 3387, "code": "\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str):", "label": 0}, {"snippet_id": 1292, "code": "() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages", "label": 0}, {"snippet_id": 3171, "code": ".time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history", "label": 0}, {"snippet_id": 3076, "code": " get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !=''", "label": 0}, {"snippet_id": 429, "code": " clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise", "label": 0}, {"snippet_id": 683, "code": "(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance", "label": 0}, {"snippet_id": 642, "code": "(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters", "label": 0}, {"snippet_id": 1647, "code": ".role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if", "label": 0}, {"snippet_id": 467, "code": " is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create", "label": 0}, {"snippet_id": 1743, "code": " Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id", "label": 0}, {"snippet_id": 1538, "code": "=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"", "label": 0}, {"snippet_id": 3331, "code": " mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator", "label": 0}, {"snippet_id": 2543, "code": " group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by", "label": 0}, {"snippet_id": 3679, "code": "=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel", "label": 0}, {"snippet_id": 753, "code": ").append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the", "label": 0}, {"snippet_id": 3583, "code": " user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license", "label": 0}, {"snippet_id": 3400, "code": "(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale", "label": 0}, {"snippet_id": 191, "code": " EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models", "label": 0}, {"snippet_id": 437, "code": "(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if", "label": 0}, {"snippet_id": 552, "code": " return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", "label": 0}, {"snippet_id": 1729, "code": ", project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned", "label": 0}, {"snippet_id": 2311, "code": ".LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state", "label": 0}, {"snippet_id": 1634, "code": " and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper", "label": 0}, {"snippet_id": 1197, "code": " current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int):", "label": 0}, {"snippet_id": 2363, "code": "=TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state=", "label": 0}, {"snippet_id": 3079, "code": "(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped", "label": 0}, {"snippet_id": 3763, "code": " refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users", "label": 0}, {"snippet_id": 818, "code": " and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def", "label": 0}, {"snippet_id": 3253, "code": ".set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users", "label": 0}, {"snippet_id": 865, "code": "]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year", "label": 0}, {"snippet_id": 441, "code": " GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch", "label": 0}, {"snippet_id": 2505, "code": " activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query", "label": 0}, {"snippet_id": 2908, "code": " callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User", "label": 0}, {"snippet_id": 959, "code": ".postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils", "label": 0}, {"snippet_id": 1104, "code": " @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id", "label": 0}, {"snippet_id": 229, "code": "\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models", "label": 0}, {"snippet_id": 2727, "code": " sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "label": 0}, {"snippet_id": 264, "code": "=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment", "label": 0}, {"snippet_id": 2681, "code": "=TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=", "label": 0}, {"snippet_id": 964, "code": ".models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum)", "label": 0}, {"snippet_id": 3468, "code": "=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign", "label": 0}, {"snippet_id": 596, "code": "[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj", "label": 0}, {"snippet_id": 410, "code": "'order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self", "label": 0}, {"snippet_id": 3342, "code": "\"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod", "label": 0}, {"snippet_id": 3612, "code": " details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user", "label": 0}, {"snippet_id": 545, "code": " if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search", "label": 0}, {"snippet_id": 2427, "code": " -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory", "label": 0}, {"snippet_id": 1540, "code": "() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address", "label": 0}, {"snippet_id": 2991, "code": " new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level:", "label": 0}, {"snippet_id": 2804, "code": " for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj", "label": 0}, {"snippet_id": 1921, "code": " JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m", "label": 1}, {"snippet_id": 1038, "code": ".BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer", "label": 0}, {"snippet_id": 1544, "code": " username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower()", "label": 0}, {"snippet_id": 424, "code": ", force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf", "label": 0}, {"snippet_id": 368, "code": ".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components", "label": 0}, {"snippet_id": 3701, "code": "=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return", "label": 0}, {"snippet_id": 500, "code": "(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", "label": 0}, {"snippet_id": 3952, "code": " versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex", "label": 0}, {"snippet_id": 906, "code": " in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year", "label": 1}, {"snippet_id": 221, "code": ") min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models", "label": 0}, {"snippet_id": 1887, "code": ") project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped", "label": 1}, {"snippet_id": 382, "code": ".complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language", "label": 0}, {"snippet_id": 3562, "code": " UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted", "label": 0}, {"snippet_id": 155, "code": "(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True)", "label": 0}, {"snippet_id": 3437, "code": " admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except", "label": 0}, {"snippet_id": 3281, "code": " def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id", "label": 0}, {"snippet_id": 291, "code": "( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(", "label": 0}, {"snippet_id": 3305, "code": "-> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level", "label": 0}, {"snippet_id": 823, "code": "(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year", "label": 0}, {"snippet_id": 2219, "code": " user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified=self.is_email_verified return user_dto", "label": 0}, {"snippet_id": 520, "code": ") | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances", "label": 0}, {"snippet_id": 2851, "code": ".models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound", "label": 0}, {"snippet_id": 539, "code": ": filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return", "label": 0}, {"snippet_id": 2063, "code": " terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"", "label": 0}, {"snippet_id": 2230, "code": ".models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis", "label": 0}, {"snippet_id": 3767, "code": " to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level", "label": 0}, {"snippet_id": 1898, "code": "(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by", "label": 1}, {"snippet_id": 3590, "code": ": \"\"\" Checks if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str", "label": 0}, {"snippet_id": 2717, "code": " dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result", "label": 0}, {"snippet_id": 141, "code": ".parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q", "label": 0}, {"snippet_id": 881, "code": " parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor", "label": 0}, {"snippet_id": 775, "code": " must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def", "label": 0}, {"snippet_id": 941, "code": "\nfrom server import db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models", "label": 0}, {"snippet_id": 2782, "code": ") dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag", "label": 0}, {"snippet_id": 1738, "code": " Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session", "label": 0}, {"snippet_id": 261, "code": " verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True,", "label": 0}, {"snippet_id": 1376, "code": ".statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__", "label": 0}, {"snippet_id": 1932, "code": " users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if", "label": 1}, {"snippet_id": 1786, "code": "() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id", "label": 0}, {"snippet_id": 2405, "code": "=TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state", "label": 0}, {"snippet_id": 2105, "code": "(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len", "label": 0}, {"snippet_id": 999, "code": " class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id", "label": 0}, {"snippet_id": 1193, "code": "-DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session", "label": 0}, {"snippet_id": 1111, "code": " from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id", "label": 0}, {"snippet_id": 2524, "code": " v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group", "label": 1}, {"snippet_id": 3765, "code": " -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService", "label": 0}, {"snippet_id": 2013, "code": ".commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int)", "label": 0}, {"snippet_id": 39, "code": " LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear", "label": 0}, {"snippet_id": 1870, "code": " a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce", "label": 0}, {"snippet_id": 1423, "code": "=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable", "label": 0}, {"snippet_id": 3798, "code": " License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject)", "label": 0}, {"snippet_id": 3238, "code": " user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified", "label": 0}, {"snippet_id": 536, "code": " root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances", "label": 0}, {"snippet_id": 414, "code": ", force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise", "label": 0}, {"snippet_id": 3944, "code": "(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey", "label": 0}, {"snippet_id": 3460, "code": "{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role=", "label": 0}, {"snippet_id": 2580, "code": " contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2", "label": 0}, {"snippet_id": 1106, "code": " dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message", "label": 0}, {"snippet_id": 1103, "code": "') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id", "label": 0}, {"snippet_id": 2704, "code": " from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone(", "label": 0}, {"snippet_id": 2216, "code": " user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified", "label": 0}, {"snippet_id": 3466, "code": "') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin", "label": 0}, {"snippet_id": 1264, "code": "): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"", "label": 0}, {"snippet_id": 3138, "code": ".projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history", "label": 0}, {"snippet_id": 2927, "code": " get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username", "label": 0}, {"snippet_id": 3265, "code": "(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username", "label": 0}, {"snippet_id": 3487, "code": " if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 3204, "code": ".time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) ", "label": 0}, {"snippet_id": 1416, "code": ", default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0", "label": 0}, {"snippet_id": 1070, "code": "=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id", "label": 0}, {"snippet_id": 186, "code": "=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name", "label": 0}, {"snippet_id": 2423, "code": ".tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on", "label": 0}, {"snippet_id": 3740, "code": "=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template", "label": 0}, {"snippet_id": 1833, "code": " where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped", "label": 1}, {"snippet_id": 426, "code": " force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self", "label": 0}, {"snippet_id": 2237, "code": ", ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models", "label": 0}, {"snippet_id": 3217, "code": " UserDTO) -> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent", "label": 0}, {"snippet_id": 158, "code": " Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField", "label": 0}, {"snippet_id": 1012, "code": "'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey(", "label": 0}, {"snippet_id": 3017, "code": ".mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str,", "label": 0}, {"snippet_id": 1972, "code": "[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row", "label": 0}, {"snippet_id": 1717, "code": "(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters", "label": 0}, {"snippet_id": 2659, "code": ").distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task", "label": 0}, {"snippet_id": 2157, "code": "=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for", "label": 1}, {"snippet_id": 2378, "code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -", "label": 0}, {"snippet_id": 3546, "code": " def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert", "label": 0}, {"snippet_id": 2388, "code": ".INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY:", "label": 0}, {"snippet_id": 1644, "code": " User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query", "label": 0}, {"snippet_id": 3523, "code": "\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 802, "code": "(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year[", "label": 0}, {"snippet_id": 3730, "code": " str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level", "label": 0}, {"snippet_id": 3741, "code": "('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", "label": 0}, {"snippet_id": 1207, "code": "\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where", "label": 1}, {"snippet_id": 1730, "code": " int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of", "label": 0}, {"snippet_id": 2145, "code": ".facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24", "label": 0}, {"snippet_id": 3136, "code": ".tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, ", "label": 0}, {"snippet_id": 2140, "code": "=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql", "label": 0}, {"snippet_id": 3858, "code": "(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names", "label": 0}, {"snippet_id": 3837, "code": "(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade", "label": 0}, {"snippet_id": 2672, "code": ") ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag", "label": 0}, {"snippet_id": 845, "code": " filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\"", "label": 0}, {"snippet_id": 3296, "code": " username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService", "label": 0}, {"snippet_id": 475, "code": " self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self):", "label": 0}, {"snippet_id": 3656, "code": "'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and", "label": 0}, {"snippet_id": 3262, "code": " dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users", "label": 0}, {"snippet_id": 2244, "code": " OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server", "label": 0}, {"snippet_id": 3085, "code": " actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED'", "label": 0}, {"snippet_id": 3121, "code": " TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto", "label": 0}, {"snippet_id": 346, "code": "=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual", "label": 0}, {"snippet_id": 901, "code": "=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id", "label": 1}, {"snippet_id": 3514, "code": " -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are", "label": 0}, {"snippet_id": 488, "code": " reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset", "label": 0}, {"snippet_id": 3203, "code": " stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO", "label": 0}, {"snippet_id": 3234, "code": " user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address", "label": 0}, {"snippet_id": 2925, "code": " @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User", "label": 0}, {"snippet_id": 692, "code": " AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id", "label": 0}, {"snippet_id": 2977, "code": " user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level", "label": 0}, {"snippet_id": 1577, "code": ") if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status", "label": 0}, {"snippet_id": 2242, "code": " OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User", "label": 0}, {"snippet_id": 1509, "code": " user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username", "label": 0}, {"snippet_id": 2339, "code": "() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped", "label": 0}, {"snippet_id": 1822, "code": " upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id)", "label": 1}, {"snippet_id": 3917, "code": "(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query", "label": 0}, {"snippet_id": 813, "code": "=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)", "label": 0}, {"snippet_id": 1291, "code": "==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod", "label": 0}, {"snippet_id": 3506, "code": " user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises", "label": 0}, {"snippet_id": 3365, "code": "\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int", "label": 0}, {"snippet_id": 2601, "code": " user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"", "label": 0}, {"snippet_id": 829, "code": ", filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items", "label": 0}, {"snippet_id": 3863, "code": ", cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID", "label": 0}, {"snippet_id": 1789, "code": ": dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant", "label": 0}, {"snippet_id": 61, "code": " link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year", "label": 0}, {"snippet_id": 3127, "code": ".project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto", "label": 0}, {"snippet_id": 1077, "code": "=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id", "label": 0}, {"snippet_id": 3318, "code": ".role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 1428, "code": " default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default", "label": 0}, {"snippet_id": 639, "code": ")) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id", "label": 0}, {"snippet_id": 530, "code": "(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id", "label": 0}, {"snippet_id": 3450, "code": "\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id", "label": 0}, {"snippet_id": 3790, "code": " import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject", "label": 0}, {"snippet_id": 2577, "code": ".rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib", "label": 0}, {"snippet_id": 334, "code": "({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year", "label": 0}, {"snippet_id": 876, "code": " group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id", "label": 0}, {"snippet_id": 724, "code": "(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={", "label": 0}, {"snippet_id": 2762, "code": " in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count", "label": 0}, {"snippet_id": 1028, "code": ".Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey(", "label": 0}, {"snippet_id": 2165, "code": "{0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time", "label": 1}, {"snippet_id": 1583, "code": ".linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"", "label": 0}, {"snippet_id": 2122, "code": ".projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self", "label": 0}, {"snippet_id": 2385, "code": " +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif", "label": 0}, {"snippet_id": 347, "code": "=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual')", "label": 0}, {"snippet_id": 2954, "code": ": int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username", "label": 0}, {"snippet_id": 3482, "code": "'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager", "label": 0}, {"snippet_id": 201, "code": " child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(", "label": 0}, {"snippet_id": 3301, "code": " @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER", "label": 0}, {"snippet_id": 1996, "code": ".append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self,", "label": 0}, {"snippet_id": 1539, "code": "=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\"", "label": 0}, {"snippet_id": 176, "code": ".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch'", "label": 0}, {"snippet_id": 1794, "code": " project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append", "label": 0}, {"snippet_id": 3188, "code": "' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time", "label": 1}, {"snippet_id": 343, "code": "\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default", "label": 0}, {"snippet_id": 423, "code": "(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and", "label": 0}, {"snippet_id": 3307, "code": " the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level", "label": 0}, {"snippet_id": 2803, "code": " unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count:", "label": 0}, {"snippet_id": 3937, "code": "')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 3451, "code": ": requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id", "label": 0}, {"snippet_id": 779, "code": " if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id", "label": 0}, {"snippet_id": 3010, "code": " intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user", "label": 0}, {"snippet_id": 2569, "code": " '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib", "label": 1}, {"snippet_id": 2131, "code": ".tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message", "label": 0}, {"snippet_id": 709, "code": "(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False", "label": 0}, {"snippet_id": 1982, "code": ".get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self,", "label": 0}, {"snippet_id": 303, "code": " link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__", "label": 0}, {"snippet_id": 3626, "code": ".get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update", "label": 0}, {"snippet_id": 1771, "code": "'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result", "label": 0}, {"snippet_id": 3625, "code": "=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level", "label": 0}, {"snippet_id": 3859, "code": ": base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 0}, {"snippet_id": 2255, "code": " TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server", "label": 0}, {"snippet_id": 3924, "code": "', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return", "label": 1}, {"snippet_id": 548, "code": "=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name", "label": 0}, {"snippet_id": 3448, "code": ":raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService", "label": 0}, {"snippet_id": 3639, "code": " level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level", "label": 0}, {"snippet_id": 3841, "code": ".ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", "label": 0}, {"snippet_id": 1568, "code": " self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower(", "label": 0}, {"snippet_id": 164, "code": "(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True,", "label": 0}, {"snippet_id": 3402, "code": " preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod", "label": 0}, {"snippet_id": 321, "code": "=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or", "label": 0}, {"snippet_id": 564, "code": " root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances", "label": 0}, {"snippet_id": 2917, "code": " def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None:", "label": 0}, {"snippet_id": 3388, "code": " Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): ", "label": 0}, {"snippet_id": 2057, "code": " to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self):", "label": 0}, {"snippet_id": 2699, "code": "=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto", "label": 0}, {"snippet_id": 2494, "code": " history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions", "label": 0}, {"snippet_id": 3191, "code": ".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds", "label": 1}, {"snippet_id": 335, "code": "}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self", "label": 0}, {"snippet_id": 2392, "code": " if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action", "label": 0}, {"snippet_id": 468, "code": " to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference", "label": 0}, {"snippet_id": 2622, "code": " community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by", "label": 0}, {"snippet_id": 585, "code": ")) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym", "label": 0}, {"snippet_id": 2878, "code": " OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache", "label": 0}, {"snippet_id": 3313, "code": "=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is", "label": 0}, {"snippet_id": 501, "code": ": if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", "label": 0}, {"snippet_id": 1277, "code": "() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0:", "label": 0}, {"snippet_id": 1368, "code": ".postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\"", "label": 0}, {"snippet_id": 939, "code": "=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must be set", "label": 0}, {"snippet_id": 202, "code": "=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative", "label": 0}, {"snippet_id": 117, "code": " WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent", "label": 1}, {"snippet_id": 2435, "code": " Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter", "label": 0}, {"snippet_id": 3640, "code": " if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config", "label": 0}, {"snippet_id": 3369, "code": " is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\"", "label": 0}, {"snippet_id": 3894, "code": " tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class", "label": 0}, {"snippet_id": 1183, "code": " dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add", "label": 0}, {"snippet_id": 3054, "code": " get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username", "label": 0}, {"snippet_id": 390, "code": "), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save", "label": 0}, {"snippet_id": 1442, "code": "=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default", "label": 0}, {"snippet_id": 2403, "code": " last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated ", "label": 0}, {"snippet_id": 1348, "code": " \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo", "label": 0}, {"snippet_id": 1131, "code": "=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"", "label": 0}, {"snippet_id": 66, "code": ".link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models", "label": 0}, {"snippet_id": 64, "code": " base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from", "label": 0}, {"snippet_id": 2250, "code": ".project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from", "label": 0}, {"snippet_id": 3337, "code": " @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN", "label": 0}, {"snippet_id": 194, "code": "'child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits", "label": 0}, {"snippet_id": 3481, "code": " UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign", "label": 0}, {"snippet_id": 1740, "code": " characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User", "label": 0}, {"snippet_id": 159, "code": "(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now", "label": 0}, {"snippet_id": 387, "code": " or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering", "label": 0}, {"snippet_id": 388, "code": ", _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order", "label": 0}, {"snippet_id": 927, "code": " child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent", "label": 0}, {"snippet_id": 3095, "code": ".all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "label": 0}, {"snippet_id": 624, "code": "\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({}", "label": 0}, {"snippet_id": 2837, "code": ", UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory", "label": 0}, {"snippet_id": 2623, "code": " a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count", "label": 0}, {"snippet_id": 3326, "code": " get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"", "label": 0}, {"snippet_id": 129, "code": " child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\"", "label": 0}, {"snippet_id": 3638, "code": " mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level", "label": 0}, {"snippet_id": 1333, "code": " import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination", "label": 1}, {"snippet_id": 3431, "code": "\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"", "label": 0}, {"snippet_id": 2611, "code": "(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query", "label": 0}, {"snippet_id": 124, "code": " child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ", "label": 0}, {"snippet_id": 1335, "code": " import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery", "label": 1}, {"snippet_id": 1411, "code": "(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False", "label": 0}, {"snippet_id": 2060, "code": " has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user", "label": 0}, {"snippet_id": 1018, "code": "]), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger", "label": 0}, {"snippet_id": 1940, "code": ".project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO", "label": 1}, {"snippet_id": 1599, "code": ", is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables", "label": 0}, {"snippet_id": 1187, "code": "\"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"", "label": 0}, {"snippet_id": 2495, "code": "=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id", "label": 0}]