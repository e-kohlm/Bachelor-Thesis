[{"code": ".project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message", "labels": 0}, {"code": ") where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has", "labels": 1}, {"code": " user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address", "labels": 0}, {"code": " if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO", "labels": 0}, {"code": ": sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag", "labels": 0}, {"code": " org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats", "labels": 0}, {"code": ") as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "labels": 0}, {"code": " contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id", "labels": 0}, {"code": " add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to ", "labels": 0}, {"code": "\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role", "labels": 0}, {"code": "=TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state", "labels": 0}, {"code": ".name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]", "labels": 0}, {"code": " that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers", "labels": 0}, {"code": ".total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter", "labels": 0}, {"code": " if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating", "labels": 0}, {"code": "=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects}", "labels": 0}, {"code": " sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO,", "labels": 0}, {"code": ".time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action=", "labels": 0}, {"code": "(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id", "labels": 0}, {"code": "}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount", "labels": 1}, {"code": "(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id", "labels": 0}, {"code": "(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list", "labels": 0}, {"code": ".subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is", "labels": 0}, {"code": "(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class", "labels": 0}, {"code": ".parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to", "labels": 0}, {"code": " parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models", "labels": 0}, {"code": "'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id", "labels": 0}, {"code": " values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN", "labels": 0}, {"code": " VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', ", "labels": 0}, {"code": ".task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count()", "labels": 0}, {"code": ": return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "labels": 0}, {"code": " username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user", "labels": 0}, {"code": "') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id", "labels": 0}, {"code": "\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"", "labels": 0}, {"code": ", related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField", "labels": 0}, {"code": "(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"", "labels": 0}, {"code": "'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag)", "labels": 0}, {"code": " db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import", "labels": 0}, {"code": ".credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None,", "labels": 0}, {"code": "(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks", "labels": 1}, {"code": "(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto", "labels": 1}, {"code": ".config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level", "labels": 0}, {"code": ".Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db", "labels": 0}, {"code": ".messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600", "labels": 0}, {"code": " TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project", "labels": 0}, {"code": " no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count", "labels": 0}, {"code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED", "labels": 0}, {"code": " from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by", "labels": 1}, {"code": " in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result", "labels": 0}, {"code": ".linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool", "labels": 0}, {"code": " user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE", "labels": 0}, {"code": " dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT", "labels": 0}, {"code": "() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "labels": 0}, {"code": " MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod", "labels": 0}, {"code": "=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto", "labels": 0}, {"code": " total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"", "labels": 0}, {"code": "==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls", "labels": 0}, {"code": " self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError", "labels": 0}, {"code": "=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function", "labels": 0}, {"code": " \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError", "labels": 0}, {"code": "=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable", "labels": 0}, {"code": "\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages", "labels": 0}, {"code": "): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year", "labels": 0}, {"code": "=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\"", "labels": 0}, {"code": " MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from", "labels": 0}, {"code": " dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result", "labels": 0}, {"code": " def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete", "labels": 0}, {"code": ".organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj", "labels": 0}, {"code": " individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key", "labels": 0}, {"code": " campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats", "labels": 0}, {"code": "} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session", "labels": 1}, {"code": ".child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self", "labels": 0}, {"code": " user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username", "labels": 0}, {"code": "() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id", "labels": 0}, {"code": ".tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, ", "labels": 0}, {"code": ".tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on", "labels": 0}, {"code": ", 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id", "labels": 1}, {"code": " from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER", "labels": 1}, {"code": " raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable", "labels": 0}, {"code": "(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB \"\"\" db.session.delete(self", "labels": 0}, {"code": "().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound(", "labels": 0}, {"code": " message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified", "labels": 0}, {"code": ".tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self", "labels": 0}, {"code": " count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if", "labels": 0}, {"code": ".participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if", "labels": 0}, {"code": " if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id", "labels": 0}, {"code": " learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear", "labels": 0}, {"code": "(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance", "labels": 0}, {"code": "): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0", "labels": 0}, {"code": " sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True", "labels": 0}, {"code": ": \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from", "labels": 1}, {"code": "[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls", "labels": 0}, {"code": "=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None", "labels": 0}, {"code": " history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto", "labels": 0}, {"code": " unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count:", "labels": 0}, {"code": ".mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t", "labels": 1}, {"code": "=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto", "labels": 0}, {"code": " user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id", "labels": 0}, {"code": "=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count:", "labels": 0}, {"code": ".dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models", "labels": 0}, {"code": " in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int)", "labels": 0}, {"code": ".Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db", "labels": 0}, {"code": " itertools from django.core.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils", "labels": 0}, {"code": "=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear", "labels": 0}, {"code": " current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO", "labels": 0}, {"code": "\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count", "labels": 0}, {"code": ".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id)", "labels": 1}, {"code": " < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user", "labels": 0}, {"code": " \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is", "labels": 0}, {"code": ") if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user", "labels": 0}, {"code": " 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level", "labels": 0}, {"code": "\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id", "labels": 0}, {"code": ".lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None", "labels": 0}, {"code": " level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]", "labels": 0}, {"code": " TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state", "labels": 0}, {"code": " self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year']", "labels": 0}, {"code": " import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION", "labels": 0}, {"code": "=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None:", "labels": 0}, {"code": " AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year", "labels": 0}, {"code": " NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import", "labels": 0}, {"code": " and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def", "labels": 0}, {"code": " users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp", "labels": 0}, {"code": " the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from", "labels": 0}, {"code": " update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50", "labels": 0}, {"code": " from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear", "labels": 0}, {"code": ".filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct", "labels": 0}, {"code": " user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified", "labels": 0}, {"code": ".get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param", "labels": 0}, {"code": ".filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated", "labels": 0}, {"code": ".time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db", "labels": 1}, {"code": " user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped", "labels": 0}, {"code": " obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj", "labels": 0}, {"code": " new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state", "labels": 0}, {"code": " except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id", "labels": 0}, {"code": " email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"", "labels": 0}, {"code": " Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def", "labels": 0}, {"code": " parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor:", "labels": 0}, {"code": "=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto", "labels": 0}, {"code": ":TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time", "labels": 1}, {"code": ") @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects", "labels": 0}, {"code": ".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank", "labels": 0}, {"code": ".link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch", "labels": 0}, {"code": ": User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif", "labels": 0}, {"code": " and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount", "labels": 1}, {"code": " server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO", "labels": 0}, {"code": ") class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message)", "labels": 0}, {"code": ".LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state", "labels": 0}, {"code": " get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str):", "labels": 0}, {"code": ") project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped", "labels": 1}, {"code": " validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer", "labels": 0}, {"code": " from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model", "labels": 0}, {"code": "=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20", "labels": 0}, {"code": "=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\")", "labels": 0}, {"code": "=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject", "labels": 0}, {"code": "{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role", "labels": 0}, {"code": "\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value", "labels": 0}, {"code": " not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count(", "labels": 0}, {"code": "\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated", "labels": 0}, {"code": " _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False)", "labels": 0}, {"code": "(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects", "labels": 1}, {"code": "=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables expert", "labels": 0}, {"code": " SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent", "labels": 0}, {"code": " License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject)", "labels": 0}, {"code": "(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery)", "labels": 0}, {"code": "(user_id: int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name", "labels": 0}, {"code": ".commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert", "labels": 0}, {"code": "={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents", "labels": 0}, {"code": " messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"", "labels": 0}, {"code": " subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db", "labels": 0}, {"code": " users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if", "labels": 1}, {"code": "=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read", "labels": 0}, {"code": "\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id", "labels": 1}, {"code": " mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level", "labels": 0}, {"code": " class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields", "labels": 0}, {"code": " Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto", "labels": 0}, {"code": " username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService", "labels": 0}, {"code": "() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id", "labels": 1}, {"code": " username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id", "labels": 0}, {"code": ".get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at", "labels": 0}, {"code": " default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default", "labels": 0}, {"code": ".models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True", "labels": 0}, {"code": " -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory", "labels": 0}, {"code": ".read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id", "labels": 0}, {"code": " stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "labels": 0}, {"code": " refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users", "labels": 0}, {"code": "(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True)", "labels": 0}, {"code": ".projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id", "labels": 0}, {"code": ".parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError", "labels": 0}, {"code": ".ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db", "labels": 0}, {"code": " WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project", "labels": 1}, {"code": " license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return", "labels": 0}, {"code": " def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users", "labels": 0}, {"code": "() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped", "labels": 0}, {"code": ".models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole", "labels": 0}, {"code": "\"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer", "labels": 0}, {"code": "(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping", "labels": 0}, {"code": " license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for", "labels": 0}, {"code": " +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif", "labels": 0}, {"code": ": total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent", "labels": 0}, {"code": " requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username", "labels": 0}, {"code": " if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", "labels": 0}, {"code": " max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField", "labels": 0}, {"code": ") dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs", "labels": 0}, {"code": ") user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables", "labels": 0}, {"code": " avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters", "labels": 0}, {"code": "\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto", "labels": 0}, {"code": "=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username", "labels": 0}, {"code": " advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except", "labels": 0}, {"code": ": \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id", "labels": 0}, {"code": ".id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id", "labels": 0}, {"code": "): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError", "labels": 0}, {"code": " row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch", "labels": 0}, {"code": "\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\"", "labels": 0}, {"code": " address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService", "labels": 0}, {"code": ".history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity", "labels": 0}, {"code": "(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username", "labels": 1}, {"code": " get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username", "labels": 0}, {"code": "=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates", "labels": 0}, {"code": "=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf", "labels": 0}, {"code": ".status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row", "labels": 0}, {"code": "=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child", "labels": 1}, {"code": " an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User", "labels": 0}, {"code": " raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset", "labels": 0}, {"code": " be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id", "labels": 0}, {"code": "> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id", "labels": 0}, {"code": "> advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level", "labels": 0}, {"code": "'Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a", "labels": 0}, {"code": "\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER,", "labels": 0}, {"code": " one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit", "labels": 0}, {"code": " base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from", "labels": 0}, {"code": ".get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try:", "labels": 0}, {"code": " return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree", "labels": 0}, {"code": "=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level", "labels": 0}, {"code": " requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR", "labels": 0}, {"code": "=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod", "labels": 0}, {"code": ", null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models", "labels": 0}, {"code": " return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users", "labels": 0}, {"code": ".count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "labels": 0}, {"code": ")), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "labels": 0}, {"code": "( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_", "labels": 0}, {"code": ", EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(", "labels": 0}, {"code": " v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t", "labels": 1}, {"code": ", child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id", "labels": 1}, {"code": " send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db", "labels": 0}, {"code": "'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects:", "labels": 0}, {"code": ".status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped,", "labels": 0}, {"code": " add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject", "labels": 0}, {"code": " return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", "labels": 0}, {"code": "('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym", "labels": 0}, {"code": " force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self", "labels": 0}, {"code": " True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id,", "labels": 0}, {"code": ".MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state", "labels": 0}, {"code": " user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if", "labels": 0}, {"code": " characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User", "labels": 0}, {"code": "(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution(", "labels": 1}, {"code": ".Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0,", "labels": 0}, {"code": " Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is", "labels": 0}, {"code": " bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all", "labels": 0}, {"code": " from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\"", "labels": 0}, {"code": " p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped", "labels": 0}, {"code": "'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year", "labels": 0}, {"code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -", "labels": 0}, {"code": "'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS", "labels": 0}, {"code": "(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user", "labels": 0}, {"code": "(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create", "labels": 0}, {"code": ": no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns", "labels": 0}, {"code": ", update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden", "labels": 0}, {"code": " OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by", "labels": 0}, {"code": " import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive", "labels": 0}, {"code": " on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0)", "labels": 0}, {"code": "'Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors", "labels": 0}, {"code": " new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level", "labels": 0}, {"code": " import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change", "labels": 0}, {"code": ", queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids", "labels": 0}, {"code": " server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server", "labels": 0}, {"code": " UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis", "labels": 0}, {"code": " relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits", "labels": 0}, {"code": " def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -", "labels": 0}, {"code": "=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level", "labels": 0}, {"code": " last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to", "labels": 0}, {"code": ": if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", "labels": 0}, {"code": " a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where", "labels": 0}, {"code": ".lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag", "labels": 0}, {"code": ": root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories", "labels": 0}, {"code": ".mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR", "labels": 0}, {"code": "(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf", "labels": 0}, {"code": " def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject", "labels": 0}, {"code": " or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering", "labels": 0}, {"code": " user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise", "labels": 0}, {"code": " accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit()", "labels": 0}, {"code": ".total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id=", "labels": 1}, {"code": "=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads", "labels": 0}, {"code": ".postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\"", "labels": 0}, {"code": " to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self):", "labels": 0}, {"code": ".username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto", "labels": 0}, {"code": " level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED')", "labels": 0}, {"code": ".filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf", "labels": 0}, {"code": ", TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state", "labels": 0}, {"code": "=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination", "labels": 0}, {"code": " accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db", "labels": 0}, {"code": " UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task", "labels": 0}, {"code": ".email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent", "labels": 0}, {"code": " MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in", "labels": 0}, {"code": "'hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language", "labels": 0}, {"code": ") listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user", "labels": 0}, {"code": " Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various", "labels": 0}, {"code": " default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project", "labels": 0}, {"code": "{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools", "labels": 0}, {"code": "=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -", "labels": 0}, {"code": ") validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer", "labels": 0}, {"code": ") return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", "labels": 0}, {"code": " users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str", "labels": 1}, {"code": " if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated ", "labels": 0}, {"code": " NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row", "labels": 0}, {"code": "=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs", "labels": 0}, {"code": " TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto", "labels": 0}, {"code": ".credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None", "labels": 0}, {"code": " date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create", "labels": 0}, {"code": " on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q", "labels": 0}, {"code": " else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets", "labels": 0}, {"code": " WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent", "labels": 1}, {"code": " is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant", "labels": 0}, {"code": "), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant", "labels": 0}, {"code": " ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter(", "labels": 0}, {"code": " super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child", "labels": 0}, {"code": "-> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level", "labels": 0}, {"code": " logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id)", "labels": 0}, {"code": ".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch'", "labels": 0}, {"code": " } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear", "labels": 0}, {"code": ": \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username", "labels": 0}, {"code": " server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from", "labels": 0}, {"code": " Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"", "labels": 0}, {"code": " verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True,", "labels": 0}, {"code": " activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query", "labels": 0}, {"code": "=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name", "labels": 0}, {"code": "] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details", "labels": 0}, {"code": "=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", "labels": 0}, {"code": " get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !=''", "labels": 0}, {"code": ": raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username", "labels": 0}, {"code": " vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name'", "labels": 0}, {"code": " versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query", "labels": 1}, {"code": " get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred", "labels": 0}, {"code": "='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english", "labels": 0}, {"code": " if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached", "labels": 0}, {"code": ".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(", "labels": 0}, {"code": "=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category'", "labels": 0}, {"code": ".get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user", "labels": 0}, {"code": "=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True", "labels": 0}, {"code": ".ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", "labels": 0}, {"code": " total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS'", "labels": 0}, {"code": " -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"", "labels": 0}, {"code": ": root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for", "labels": 0}, {"code": " filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\"", "labels": 0}, {"code": " project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects", "labels": 0}, {"code": ") if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item", "labels": 0}, {"code": ".validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id=", "labels": 1}, {"code": ".value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username", "labels": 0}, {"code": ") -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"", "labels": 0}, {"code": ".models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag", "labels": 0}, {"code": ".tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message", "labels": 0}, {"code": " import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models", "labels": 0}, {"code": "(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count))", "labels": 0}, {"code": "} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def", "labels": 1}, {"code": "\"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages", "labels": 0}, {"code": " parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager", "labels": 0}, {"code": " def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user ", "labels": 0}, {"code": ": username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level", "labels": 0}, {"code": " @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"", "labels": 0}, {"code": " server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models", "labels": 0}, {"code": "\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count", "labels": 0}, {"code": "\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return", "labels": 0}, {"code": ".action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() )", "labels": 0}, {"code": "=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null", "labels": 0}, {"code": " project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User.username.ilike(user_filter", "labels": 0}, {"code": ", u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group", "labels": 0}, {"code": " cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN", "labels": 0}, {"code": " default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default", "labels": 0}, {"code": " the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves", "labels": 0}, {"code": " refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user", "labels": 0}, {"code": " def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated", "labels": 0}, {"code": " 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str", "labels": 0}, {"code": " UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: ", "labels": 0}, {"code": "(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id", "labels": 1}, {"code": ".get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if", "labels": 0}, {"code": " PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade", "labels": 0}, {"code": " server import db from flask import current_app from enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis", "labels": 0}, {"code": " self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False", "labels": 0}, {"code": ".parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q", "labels": 0}, {"code": ".ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean", "labels": 0}, {"code": ", last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state", "labels": 0}, {"code": ": if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state=", "labels": 0}, {"code": "(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return", "labels": 0}, {"code": " any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "labels": 0}, {"code": ".set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users", "labels": 0}, {"code": ".postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"", "labels": 0}, {"code": "(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%", "labels": 1}, {"code": "=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified", "labels": 0}, {"code": "=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models", "labels": 0}, {"code": "(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent", "labels": 0}, {"code": " from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod", "labels": 0}, {"code": ") if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else", "labels": 1}, {"code": ".project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id", "labels": 1}, {"code": " \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User", "labels": 0}, {"code": "'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag", "labels": 0}, {"code": " if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user", "labels": 0}, {"code": "[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type", "labels": 0}, {"code": " MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db", "labels": 0}, {"code": ".UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag", "labels": 0}, {"code": ".Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(", "labels": 0}, {"code": " learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format", "labels": 0}, {"code": ".facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self", "labels": 0}, {"code": " has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod", "labels": 0}, {"code": " facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db", "labels": 0}, {"code": " level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED'", "labels": 0}, {"code": " user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license", "labels": 0}, {"code": " image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted the terms", "labels": 0}, {"code": " import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name", "labels": 0}, {"code": ".tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text", "labels": 0}, {"code": " server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service", "labels": 0}, {"code": ".BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500", "labels": 0}, {"code": ".Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean,", "labels": 0}, {"code": " Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', ", "labels": 0}, {"code": " GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError", "labels": 0}, {"code": ".mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id=", "labels": 0}, {"code": "\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "labels": 0}, {"code": " from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION", "labels": 0}, {"code": " server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users", "labels": 0}, {"code": "(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters", "labels": 0}, {"code": " Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value", "labels": 0}, {"code": "=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save", "labels": 0}, {"code": "\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time", "labels": 1}, {"code": ")) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in", "labels": 0}, {"code": ") message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type", "labels": 0}, {"code": " listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return", "labels": 0}, {"code": "=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id=", "labels": 0}, {"code": "\\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from", "labels": 0}, {"code": ".licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models", "labels": 0}, {"code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ->", "labels": 0}, {"code": "\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer", "labels": 0}, {"code": "=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()", "labels": 0}, {"code": " import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models", "labels": 0}, {"code": "(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User", "labels": 0}, {"code": ") return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both", "labels": 0}, {"code": ".Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer", "labels": 0}, {"code": " elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state", "labels": 0}, {"code": " __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column", "labels": 0}, {"code": ") message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user", "labels": 0}, {"code": ".append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self", "labels": 0}, {"code": "=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value", "labels": 0}, {"code": " is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included", "labels": 0}, {"code": " verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert", "labels": 0}, {"code": ".ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id", "labels": 0}, {"code": " (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project", "labels": 0}, {"code": " child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set", "labels": 0}, {"code": ".models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis", "labels": 0}, {"code": ", child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[]", "labels": 0}, {"code": " @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id", "labels": 0}, {"code": "-> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None", "labels": 0}, {"code": "=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag'", "labels": 0}, {"code": " for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto", "labels": 0}, {"code": " child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent", "labels": 0}, {"code": ", cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID", "labels": 0}, {"code": ".sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True", "labels": 0}, {"code": " import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services", "labels": 0}, {"code": " _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { ", "labels": 1}, {"code": " their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print", "labels": 0}, {"code": " object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name", "labels": 0}, {"code": "=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english", "labels": 0}, {"code": " sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "labels": 0}, {"code": " UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) ->", "labels": 0}, {"code": "{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) ", "labels": 0}, {"code": " verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition')", "labels": 0}, {"code": " cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision", "labels": 0}, {"code": " root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must", "labels": 0}, {"code": ") mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id", "labels": 1}, {"code": "=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True", "labels": 0}, {"code": "=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child", "labels": 0}, {"code": " GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes", "labels": 0}, {"code": " TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history", "labels": 0}, {"code": " import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService", "labels": 0}, {"code": " map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for", "labels": 0}, {"code": ".education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year", "labels": 0}, {"code": " p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE", "labels": 1}, {"code": "() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status", "labels": 0}, {"code": ".id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query", "labels": 0}, {"code": "[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", "labels": 0}, {"code": " session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query=", "labels": 1}, {"code": " nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False", "labels": 0}, {"code": " total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds", "labels": 1}, {"code": " intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details", "labels": 0}, {"code": " get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username", "labels": 0}, {"code": " Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated", "labels": 0}, {"code": " contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db", "labels": 1}, {"code": " user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified", "labels": 0}, {"code": ": columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull", "labels": 0}, {"code": "\"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False", "labels": 0}, {"code": "=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment", "labels": 0}, {"code": "=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "labels": 0}, {"code": " disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "labels": 0}, {"code": " users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager", "labels": 0}, {"code": "(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%'", "labels": 1}, {"code": "{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role=", "labels": 0}, {"code": " if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users", "labels": 1}, {"code": " academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id:", "labels": 0}, {"code": ".tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto", "labels": 0}, {"code": "=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id", "labels": 0}, {"code": " specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db", "labels": 0}, {"code": " reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset", "labels": 0}, {"code": "=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models", "labels": 0}, {"code": " delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto", "labels": 0}, {"code": "\"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id", "labels": 0}, {"code": "\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username", "labels": 0}, {"code": " action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if", "labels": 0}, {"code": " will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User.username.ilike(user_filter.lower() +'%'", "labels": 0}, {"code": " UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted", "labels": 0}, {"code": ".action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int)", "labels": 0}, {"code": " messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message", "labels": 0}, {"code": "(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and", "labels": 0}, {"code": "={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND", "labels": 1}, {"code": "=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by,", "labels": 0}, {"code": "\"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id", "labels": 0}, {"code": " user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app", "labels": 0}, {"code": " from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db", "labels": 1}, {"code": ") username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default", "labels": 0}, {"code": ", ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation", "labels": 0}, {"code": " result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them)", "labels": 0}, {"code": " the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete", "labels": 0}, {"code": ".all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped", "labels": 0}, {"code": " set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate", "labels": 0}, {"code": " sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine.execute(sql) for time", "labels": 1}, {"code": ".username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level)", "labels": 0}, {"code": " AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id", "labels": 0}, {"code": " TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project,", "labels": 0}, {"code": "=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address", "labels": 0}, {"code": ".relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db", "labels": 0}, {"code": ") if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append", "labels": 0}, {"code": " \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO", "labels": 0}, {"code": "() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query", "labels": 0}, {"code": ":param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app", "labels": 0}, {"code": " UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO", "labels": 0}, {"code": " expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "labels": 0}, {"code": "(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The", "labels": 0}, {"code": ".DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves", "labels": 0}, {"code": "\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str", "labels": 0}, {"code": "{1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on ", "labels": 1}, {"code": " \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\"", "labels": 0}, {"code": ") return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch", "labels": 1}, {"code": ".objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", "labels": 0}, {"code": ".rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib", "labels": 0}, {"code": "(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService", "labels": 0}, {"code": " participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination", "labels": 0}, {"code": " server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType", "labels": 0}, {"code": "\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default", "labels": 0}, {"code": "=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id", "labels": 1}, {"code": " choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent", "labels": 0}, {"code": ".PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level", "labels": 0}, {"code": ": query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id'", "labels": 1}, {"code": " TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project", "labels": 0}, {"code": "=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value", "labels": 0}, {"code": "'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", "labels": 0}, {"code": ") no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created", "labels": 0}, {"code": "): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent", "labels": 0}, {"code": "() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages", "labels": 0}, {"code": " import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin", "labels": 0}, {"code": ").count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "labels": 0}, {"code": " except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True", "labels": 0}, {"code": " self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError", "labels": 0}, {"code": ".child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach", "labels": 0}, {"code": " int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine", "labels": 1}, {"code": "\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from", "labels": 0}, {"code": " GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t", "labels": 1}, {"code": " osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user", "labels": 0}, {"code": " the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User", "labels": 0}, {"code": " supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user", "labels": 0}, {"code": " admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username", "labels": 0}, {"code": ".project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id", "labels": 1}, {"code": "(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects", "labels": 0}, {"code": " if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant", "labels": 0}, {"code": ") @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the", "labels": 0}, {"code": " tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read", "labels": 1}, {"code": ".services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change", "labels": 0}, {"code": "*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault", "labels": 0}, {"code": " self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id", "labels": 0}, {"code": ".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade", "labels": 0}, {"code": "=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return", "labels": 0}, {"code": " dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self", "labels": 0}, {"code": ": int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory", "labels": 0}, {"code": " dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message", "labels": 0}, {"code": ", ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models", "labels": 0}, {"code": " LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin", "labels": 0}, {"code": " ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int,", "labels": 0}, {"code": ".filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role", "labels": 0}, {"code": ":TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time", "labels": 1}, {"code": "(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ", "labels": 0}]