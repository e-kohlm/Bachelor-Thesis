[{"snippet_id": 2384, "code": ".tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -", "label": 0}, {"snippet_id": 2097, "code": " user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto", "label": 0}, {"snippet_id": 3680, "code": ".ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE", "label": 0}, {"snippet_id": 994, "code": " MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db", "label": 0}, {"snippet_id": 3740, "code": "=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template", "label": 0}, {"snippet_id": 776, "code": " both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements", "label": 0}, {"snippet_id": 159, "code": "(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now", "label": 0}, {"snippet_id": 1002, "code": "\"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer", "label": 0}, {"snippet_id": 1852, "code": "=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"", "label": 1}, {"snippet_id": 2981, "code": " username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level", "label": 0}, {"snippet_id": 732, "code": ", *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result", "label": 0}, {"snippet_id": 1426, "code": ".Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db", "label": 0}, {"snippet_id": 3232, "code": " sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto", "label": 0}, {"snippet_id": 2364, "code": ".tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED", "label": 0}, {"snippet_id": 2488, "code": " history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination", "label": 0}, {"snippet_id": 3814, "code": " PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol", "label": 0}, {"snippet_id": 2426, "code": "=TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query(", "label": 0}, {"snippet_id": 989, "code": " a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send ", "label": 0}, {"snippet_id": 3442, "code": " the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted", "label": 0}, {"snippet_id": 1416, "code": ", default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0", "label": 0}, {"snippet_id": 3775, "code": " users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated}", "label": 0}, {"snippet_id": 3389, "code": " Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"", "label": 0}, {"snippet_id": 963, "code": ".models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum", "label": 0}, {"snippet_id": 3874, "code": ".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag'", "label": 0}, {"snippet_id": 2939, "code": " def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -", "label": 0}, {"snippet_id": 2682, "code": ".VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select", "label": 0}, {"snippet_id": 3803, "code": ": _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package'", "label": 0}, {"snippet_id": 1781, "code": " if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant", "label": 0}, {"snippet_id": 1143, "code": " def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject", "label": 0}, {"snippet_id": 2469, "code": ") if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item", "label": 0}, {"snippet_id": 113, "code": " child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM", "label": 1}, {"snippet_id": 2743, "code": "=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns", "label": 0}, {"snippet_id": 3684, "code": ", 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService", "label": 0}, {"snippet_id": 830, "code": ", child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree", "label": 0}, {"snippet_id": 3052, "code": "(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return", "label": 0}, {"snippet_id": 617, "code": " obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !", "label": 0}, {"snippet_id": 3657, "code": "'MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level", "label": 0}, {"snippet_id": 3793, "code": ".base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package')", "label": 0}, {"snippet_id": 2146, "code": ".facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS'", "label": 0}, {"snippet_id": 423, "code": "(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and", "label": 0}, {"snippet_id": 3817, "code": ".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license", "label": 0}, {"snippet_id": 2757, "code": ".campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else:", "label": 0}, {"snippet_id": 1443, "code": " tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False)", "label": 0}, {"snippet_id": 2393, "code": " last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action", "label": 0}, {"snippet_id": 3863, "code": ", cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID", "label": 0}, {"snippet_id": 59, "code": " import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from", "label": 0}, {"snippet_id": 1100, "code": " Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject", "label": 0}, {"snippet_id": 3735, "code": " not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message", "label": 0}, {"snippet_id": 2463, "code": " TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id", "label": 0}, {"snippet_id": 3750, "code": " level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() ->", "label": 0}, {"snippet_id": 1768, "code": ".username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results", "label": 0}, {"snippet_id": 3648, "code": "=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'", "label": 0}, {"snippet_id": 985, "code": "\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes", "label": 0}, {"snippet_id": 3470, "code": ".get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if", "label": 0}, {"snippet_id": 3626, "code": ".get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update", "label": 0}, {"snippet_id": 3556, "code": " mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int)", "label": 0}, {"snippet_id": 3234, "code": " user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address", "label": 0}, {"snippet_id": 637, "code": " class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id", "label": 0}, {"snippet_id": 1668, "code": ") if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user", "label": 0}, {"snippet_id": 2076, "code": " False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope ", "label": 0}, {"snippet_id": 2318, "code": ".get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id", "label": 0}, {"snippet_id": 2874, "code": " import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize", "label": 0}, {"snippet_id": 1065, "code": ".DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages'", "label": 0}, {"snippet_id": 3725, "code": ", username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template", "label": 0}, {"snippet_id": 1939, "code": " ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO", "label": 1}, {"snippet_id": 418, "code": "=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear", "label": 0}, {"snippet_id": 1000, "code": " Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id'])", "label": 0}, {"snippet_id": 1188, "code": "\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\"", "label": 0}, {"snippet_id": 3129, "code": "() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 748, "code": "['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args", "label": 0}, {"snippet_id": 2255, "code": " TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server", "label": 0}, {"snippet_id": 3417, "code": ") return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting", "label": 0}, {"snippet_id": 1130, "code": "=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: ", "label": 0}, {"snippet_id": 3945, "code": ") class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package", "label": 0}, {"snippet_id": 1617, "code": ": bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all", "label": 0}, {"snippet_id": 2140, "code": "=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql", "label": 0}, {"snippet_id": 3395, "code": " otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on", "label": 0}, {"snippet_id": 3859, "code": ": base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 0}, {"snippet_id": 3491, "code": "==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod", "label": 0}, {"snippet_id": 3936, "code": "%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 2797, "code": ".group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +", "label": 0}, {"snippet_id": 2881, "code": ".services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024", "label": 0}, {"snippet_id": 247, "code": ".CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length", "label": 0}, {"snippet_id": 2992, "code": "=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user", "label": 0}, {"snippet_id": 978, "code": " from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION", "label": 0}, {"snippet_id": 2973, "code": ", username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user", "label": 0}, {"snippet_id": 3071, "code": "(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id", "label": 0}, {"snippet_id": 3409, "code": " mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str,", "label": 0}, {"snippet_id": 1829, "code": " if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users", "label": 1}, {"snippet_id": 2824, "code": " current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\", "label": 0}, {"snippet_id": 2760, "code": " for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created", "label": 0}, {"snippet_id": 2803, "code": " unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count:", "label": 0}, {"snippet_id": 3787, "code": " vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID", "label": 0}, {"snippet_id": 3303, "code": " int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod", "label": 0}, {"snippet_id": 1999, "code": " set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on", "label": 0}, {"snippet_id": 356, "code": "=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english", "label": 0}, {"snippet_id": 1501, "code": "\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get", "label": 0}, {"snippet_id": 1696, "code": ".mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return", "label": 0}, {"snippet_id": 2943, "code": ": user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 3116, "code": " ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto", "label": 0}, {"snippet_id": 2753, "code": "\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats", "label": 0}, {"snippet_id": 2220, "code": "\nfrom cachetools import TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO", "label": 0}, {"snippet_id": 1929, "code": "(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id", "label": 1}, {"snippet_id": 3700, "code": ".mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level')", "label": 0}, {"snippet_id": 3703, "code": ".INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return", "label": 0}, {"snippet_id": 2749, "code": ".query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup)", "label": 0}, {"snippet_id": 995, "code": " VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint", "label": 0}, {"snippet_id": 216, "code": ".IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True,", "label": 0}, {"snippet_id": 3475, "code": "==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER", "label": 0}, {"snippet_id": 2205, "code": ") for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent", "label": 1}, {"snippet_id": 3698, "code": ".INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error", "label": 0}, {"snippet_id": 1323, "code": " user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the", "label": 0}, {"snippet_id": 2305, "code": "\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 546, "code": ": root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories", "label": 0}, {"snippet_id": 104, "code": " SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids})", "label": 1}, {"snippet_id": 737, "code": " group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year", "label": 0}, {"snippet_id": 603, "code": ", parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise", "label": 0}, {"snippet_id": 1772, "code": "\\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username", "label": 0}, {"snippet_id": 1835, "code": "={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0})", "label": 1}, {"snippet_id": 2839, "code": " UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models", "label": 0}, {"snippet_id": 670, "code": "} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj", "label": 0}, {"snippet_id": 3741, "code": "('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", "label": 0}, {"snippet_id": 2878, "code": " OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache", "label": 0}, {"snippet_id": 1805, "code": "=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id", "label": 0}, {"snippet_id": 1319, "code": "\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self)", "label": 0}, {"snippet_id": 2802, "code": " unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count", "label": 0}, {"snippet_id": 1728, "code": ": str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be", "label": 0}, {"snippet_id": 3699, "code": " user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update", "label": 0}, {"snippet_id": 351, "code": " learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}", "label": 0}, {"snippet_id": 2244, "code": " OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server", "label": 0}, {"snippet_id": 3349, "code": "=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) ->", "label": 0}, {"snippet_id": 2892, "code": " get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in", "label": 0}, {"snippet_id": 3343, "code": " Determines if user is a validator \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod", "label": 0}, {"snippet_id": 834, "code": " _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear,", "label": 0}, {"snippet_id": 3495, "code": " UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str,", "label": 0}, {"snippet_id": 680, "code": " _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to", "label": 0}, {"snippet_id": 2039, "code": " with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to", "label": 0}, {"snippet_id": 1746, "code": " validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User", "label": 0}, {"snippet_id": 2509, "code": " @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v", "label": 0}, {"snippet_id": 2297, "code": ", action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService", "label": 0}, {"snippet_id": 3302, "code": "(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod", "label": 0}, {"snippet_id": 836, "code": "(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict:", "label": 0}, {"snippet_id": 2919, "code": " current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod", "label": 0}, {"snippet_id": 3553, "code": " or disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int", "label": 0}, {"snippet_id": 390, "code": "), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save", "label": 0}, {"snippet_id": 406, "code": " class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields", "label": 0}, {"snippet_id": 230, "code": " max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length", "label": 0}, {"snippet_id": 282, "code": ") own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name", "label": 0}, {"snippet_id": 479, "code": ".REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf", "label": 0}, {"snippet_id": 97, "code": " ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id", "label": 0}, {"snippet_id": 1251, "code": "\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter", "label": 0}, {"snippet_id": 3372, "code": " user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Add project to", "label": 0}, {"snippet_id": 2078, "code": "): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO", "label": 0}, {"snippet_id": 1980, "code": ".loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto", "label": 0}, {"snippet_id": 2101, "code": "=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered", "label": 0}, {"snippet_id": 2084, "code": ".session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role", "label": 0}, {"snippet_id": 499, "code": " is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter", "label": 0}, {"snippet_id": 3687, "code": " < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user", "label": 0}, {"snippet_id": 400, "code": "=LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return", "label": 0}, {"snippet_id": 1226, "code": " from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute", "label": 1}, {"snippet_id": 2906, "code": " Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id", "label": 0}, {"snippet_id": 1276, "code": ".count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)=", "label": 0}, {"snippet_id": 2893, "code": " user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the", "label": 0}, {"snippet_id": 2217, "code": ".time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified", "label": 0}, {"snippet_id": 350, "code": "( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return", "label": 0}, {"snippet_id": 533, "code": " find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if", "label": 0}, {"snippet_id": 1063, "code": ".Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref", "label": 0}, {"snippet_id": 3464, "code": ", PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError", "label": 0}, {"snippet_id": 3197, "code": " total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto", "label": 0}, {"snippet_id": 3540, "code": ", ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled", "label": 0}, {"snippet_id": 2993, "code": " new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level", "label": 0}, {"snippet_id": 1775, "code": "\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not", "label": 0}, {"snippet_id": 1048, "code": ".ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean", "label": 0}, {"snippet_id": 2913, "code": " User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id", "label": 0}, {"snippet_id": 2265, "code": ".models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4", "label": 0}, {"snippet_id": 856, "code": ": raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset", "label": 0}, {"snippet_id": 1127, "code": " message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self)", "label": 0}, {"snippet_id": 1897, "code": " mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id", "label": 1}, {"snippet_id": 2706, "code": " where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql", "label": 0}, {"snippet_id": 3056, "code": ": \"\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username", "label": 0}, {"snippet_id": 3435, "code": " admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role", "label": 0}, {"snippet_id": 486, "code": " to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(*", "label": 0}, {"snippet_id": 1533, "code": ", or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def", "label": 0}, {"snippet_id": 1034, "code": ".ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index", "label": 0}, {"snippet_id": 99, "code": "'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS", "label": 0}, {"snippet_id": 2150, "code": ".total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id=", "label": 1}, {"snippet_id": 2643, "code": ".locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task", "label": 0}, {"snippet_id": 1032, "code": ".BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db", "label": 0}, {"snippet_id": 821, "code": " filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters)", "label": 0}, {"snippet_id": 2383, "code": " user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated", "label": 0}, {"snippet_id": 2251, "code": " import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server", "label": 0}, {"snippet_id": 2333, "code": ".upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus", "label": 0}, {"snippet_id": 262, "code": "'Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(", "label": 0}, {"snippet_id": 3085, "code": " actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED'", "label": 0}, {"snippet_id": 3048, "code": "(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user", "label": 0}, {"snippet_id": 3374, "code": ".get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Add project to mapped projects if", "label": 0}, {"snippet_id": 1995, "code": ".append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self", "label": 0}, {"snippet_id": 1430, "code": " nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False", "label": 0}, {"snippet_id": 2700, "code": "(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area", "label": 0}, {"snippet_id": 3765, "code": " -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService", "label": 0}, {"snippet_id": 3028, "code": "(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id", "label": 0}, {"snippet_id": 264, "code": "=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment", "label": 0}, {"snippet_id": 1598, "code": "(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables", "label": 0}, {"snippet_id": 3869, "code": " Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags'", "label": 0}, {"snippet_id": 2331, "code": " UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus", "label": 0}, {"snippet_id": 1011, "code": ", 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey", "label": 0}, {"snippet_id": 372, "code": ".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0,", "label": 0}, {"snippet_id": 3866, "code": ") class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m", "label": 0}, {"snippet_id": 1887, "code": ") project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped", "label": 1}, {"snippet_id": 3448, "code": ":raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService", "label": 0}, {"snippet_id": 2567, "code": " m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row", "label": 1}, {"snippet_id": 369, "code": ".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components)", "label": 0}, {"snippet_id": 3931, "code": " search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject)", "label": 1}, {"snippet_id": 3441, "code": " username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f", "label": 0}, {"snippet_id": 2834, "code": " UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models", "label": 0}, {"snippet_id": 2022, "code": " Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"", "label": 0}, {"snippet_id": 2670, "code": ", TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count", "label": 0}, {"snippet_id": 2278, "code": ".user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus", "label": 0}, {"snippet_id": 2323, "code": ") StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod", "label": 0}, {"snippet_id": 105, "code": "=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child", "label": 1}, {"snippet_id": 3035, "code": " username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id)", "label": 0}, {"snippet_id": 1528, "code": "\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"", "label": 0}, {"snippet_id": 3002, "code": " if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value", "label": 0}, {"snippet_id": 581, "code": ".from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id", "label": 0}, {"snippet_id": 565, "code": ".TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids", "label": 0}, {"snippet_id": 2363, "code": "=TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state=", "label": 0}, {"snippet_id": 1401, "code": " index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column", "label": 0}, {"snippet_id": 2193, "code": " SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time", "label": 1}, {"snippet_id": 2428, "code": " @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory", "label": 0}, {"snippet_id": 3519, "code": " level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED'", "label": 0}, {"snippet_id": 2445, "code": " TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' )", "label": 0}, {"snippet_id": 2035, "code": " user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id:", "label": 0}, {"snippet_id": 1532, "code": " username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit", "label": 0}, {"snippet_id": 755, "code": ") return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both", "label": 0}, {"snippet_id": 2306, "code": " in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService", "label": 0}, {"snippet_id": 1701, "code": ".username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get", "label": 0}, {"snippet_id": 2327, "code": " user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project,", "label": 0}, {"snippet_id": 2280, "code": " homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus", "label": 0}, {"snippet_id": 3015, "code": " new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username", "label": 0}, {"snippet_id": 2294, "code": " TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING", "label": 0}, {"snippet_id": 2600, "code": " user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: ", "label": 0}, {"snippet_id": 3739, "code": " username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message", "label": 0}, {"snippet_id": 1105, "code": ", dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message", "label": 0}, {"snippet_id": 824, "code": ") else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name", "label": 0}, {"snippet_id": 1557, "code": " the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id", "label": 0}, {"snippet_id": 3032, "code": " user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level", "label": 0}, {"snippet_id": 3000, "code": "['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 1847, "code": ".rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id:", "label": 1}, {"snippet_id": 2775, "code": " no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag,", "label": 0}, {"snippet_id": 2122, "code": ".projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self", "label": 0}, {"snippet_id": 2576, "code": ") if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else", "label": 1}, {"snippet_id": 80, "code": ".learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch',", "label": 0}, {"snippet_id": 962, "code": " server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType", "label": 0}, {"snippet_id": 3841, "code": ".ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", "label": 0}, {"snippet_id": 554, "code": " root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories", "label": 0}, {"snippet_id": 3159, "code": " total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds", "label": 1}, {"snippet_id": 3828, "code": ".UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None)", "label": 0}, {"snippet_id": 2810, "code": ".organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj", "label": 0}, {"snippet_id": 1937, "code": " GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound", "label": 1}, {"snippet_id": 7, "code": ", connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as", "label": 0}, {"snippet_id": 3713, "code": ": current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en", "label": 0}, {"snippet_id": 855, "code": " !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements", "label": 0}, {"snippet_id": 992, "code": "\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages", "label": 0}, {"snippet_id": 1977, "code": " mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto", "label": 0}, {"snippet_id": 15, "code": " When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from", "label": 0}, {"snippet_id": 2879, "code": " from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache", "label": 0}, {"snippet_id": 3517, "code": "\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER", "label": 0}, {"snippet_id": 1812, "code": ") dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't", "label": 0}, {"snippet_id": 1731, "code": " page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those", "label": 0}, {"snippet_id": 3502, "code": " to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets", "label": 0}, {"snippet_id": 2780, "code": " no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by", "label": 0}, {"snippet_id": 1599, "code": ", is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables", "label": 0}, {"snippet_id": 405, "code": " self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using,", "label": 0}, {"snippet_id": 3277, "code": " users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered", "label": 0}, {"snippet_id": 473, "code": " included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property", "label": 0}, {"snippet_id": 3666, "code": ") if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username", "label": 0}, {"snippet_id": 1283, "code": "-> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message", "label": 0}, {"snippet_id": 1738, "code": " Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session", "label": 0}, {"snippet_id": 2640, "code": " not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count(", "label": 0}, {"snippet_id": 2619, "code": " stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct", "label": 0}, {"snippet_id": 1661, "code": "=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20", "label": 0}, {"snippet_id": 1169, "code": " self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into", "label": 0}, {"snippet_id": 1459, "code": ".Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime", "label": 0}, {"snippet_id": 3845, "code": " notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base", "label": 0}, {"snippet_id": 2668, "code": "(TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag", "label": 0}, {"snippet_id": 883, "code": " group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP", "label": 1}, {"snippet_id": 2013, "code": ".commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int)", "label": 0}, {"snippet_id": 3323, "code": " @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id", "label": 0}, {"snippet_id": 690, "code": ")) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id", "label": 0}, {"snippet_id": 1909, "code": " id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped)", "label": 1}, {"snippet_id": 645, "code": " _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects", "label": 0}, {"snippet_id": 181, "code": " parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models", "label": 0}, {"snippet_id": 326, "code": " self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear", "label": 0}, {"snippet_id": 2440, "code": "\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id", "label": 0}, {"snippet_id": 3020, "code": ".INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO", "label": 0}, {"snippet_id": 1644, "code": " User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query", "label": 0}, {"snippet_id": 2889, "code": ".services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception", "label": 0}, {"snippet_id": 2808, "code": ".tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations", "label": 0}, {"snippet_id": 1740, "code": " characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User", "label": 0}, {"snippet_id": 926, "code": " child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create", "label": 0}, {"snippet_id": 3778, "code": " users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated} users updated of{total_users}') users_updated +=1", "label": 0}, {"snippet_id": 681, "code": "(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory", "label": 0}, {"snippet_id": 2726, "code": ") as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "label": 0}, {"snippet_id": 1647, "code": ".role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if", "label": 0}, {"snippet_id": 574, "code": ": root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for", "label": 0}, {"snippet_id": 1837, "code": " projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1", "label": 1}, {"snippet_id": 2136, "code": ".twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping", "label": 0}, {"snippet_id": 2528, "code": " from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER", "label": 1}, {"snippet_id": 3937, "code": "')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 2199, "code": "' and user_id={0};\"\"\".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds", "label": 1}, {"snippet_id": 1678, "code": ").paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user", "label": 0}, {"snippet_id": 1183, "code": " dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add", "label": 0}, {"snippet_id": 1571, "code": "() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message", "label": 0}, {"snippet_id": 694, "code": " graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters", "label": 0}, {"snippet_id": 695, "code": "/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None)", "label": 0}, {"snippet_id": 3560, "code": ":raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact", "label": 0}, {"snippet_id": 2449, "code": ".action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc", "label": 0}, {"snippet_id": 3789, "code": ".base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages", "label": 0}, {"snippet_id": 553, "code": " _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories", "label": 0}, {"snippet_id": 1132, "code": ".project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message", "label": 0}, {"snippet_id": 3496, "code": "(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level", "label": 0}, {"snippet_id": 3575, "code": " Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int", "label": 0}, {"snippet_id": 1839, "code": "{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id", "label": 1}, {"snippet_id": 281, "code": ", ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name", "label": 0}, {"snippet_id": 935, "code": ".objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch", "label": 0}, {"snippet_id": 1277, "code": "() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0:", "label": 0}, {"snippet_id": 2256, "code": " from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services", "label": 0}, {"snippet_id": 1513, "code": " Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found ", "label": 0}, {"snippet_id": 904, "code": "','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor", "label": 1}, {"snippet_id": 3861, "code": "=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class)", "label": 0}, {"snippet_id": 1804, "code": " participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects", "label": 0}, {"snippet_id": 368, "code": ".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components", "label": 0}, {"snippet_id": 3158, "code": "(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds", "label": 1}, {"snippet_id": 2088, "code": "-> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 2754, "code": " .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats)", "label": 0}, {"snippet_id": 1296, "code": " raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids:", "label": 0}, {"snippet_id": 2496, "code": ".action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int", "label": 0}, {"snippet_id": 3722, "code": " user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME", "label": 0}, {"snippet_id": 2833, "code": " import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server", "label": 0}, {"snippet_id": 2458, "code": ".project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for", "label": 0}, {"snippet_id": 848, "code": "(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql", "label": 0}, {"snippet_id": 391, "code": ") @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save", "label": 0}, {"snippet_id": 3576, "code": " the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): ", "label": 0}, {"snippet_id": 2262, "code": " Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache", "label": 0}, {"snippet_id": 3383, "code": "(user_id: int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name", "label": 0}, {"snippet_id": 2174, "code": " if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating", "label": 0}, {"snippet_id": 1043, "code": " index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime,", "label": 0}, {"snippet_id": 1238, "code": " tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read", "label": 1}, {"snippet_id": 1655, "code": ".mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role", "label": 0}, {"snippet_id": 2980, "code": ":param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'", "label": 0}, {"snippet_id": 3875, "code": " sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')", "label": 0}, {"snippet_id": 3512, "code": "(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role", "label": 0}, {"snippet_id": 3004, "code": " new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 3095, "code": ".all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "label": 0}, {"snippet_id": 1729, "code": ", project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned", "label": 0}, {"snippet_id": 2968, "code": "(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count", "label": 0}, {"snippet_id": 3843, "code": "=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject", "label": 0}, {"snippet_id": 2443, "code": ".query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action ", "label": 0}, {"snippet_id": 3093, "code": ".action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id,", "label": 0}, {"snippet_id": 2856, "code": " import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError", "label": 0}, {"snippet_id": 3130, "code": " stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 3263, "code": " @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache)", "label": 0}, {"snippet_id": 1257, "code": ".session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count(", "label": 0}, {"snippet_id": 285, "code": "(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ", "label": 0}, {"snippet_id": 3690, "code": ".changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE')", "label": 0}, {"snippet_id": 538, "code": " if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id", "label": 0}, {"snippet_id": 3245, "code": "): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent", "label": 0}, {"snippet_id": 841, "code": "] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError", "label": 0}, {"snippet_id": 3554, "code": " disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "label": 0}, {"snippet_id": 203, "code": "( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits", "label": 0}, {"snippet_id": 2341, "code": ", user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif", "label": 0}, {"snippet_id": 3758, "code": " level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated()", "label": 0}, {"snippet_id": 2374, "code": ": if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state=", "label": 0}, {"snippet_id": 1080, "code": "[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id", "label": 0}, {"snippet_id": 182, "code": ".ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE,", "label": 0}, {"snippet_id": 1954, "code": ".rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name", "label": 0}, {"snippet_id": 1974, "code": ".name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]", "label": 0}, {"snippet_id": 1195, "code": " MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod", "label": 0}, {"snippet_id": 3883, "code": " m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname", "label": 0}, {"snippet_id": 736, "code": "} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year", "label": 0}, {"snippet_id": 979, "code": " server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION", "label": 0}, {"snippet_id": 446, "code": " self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError", "label": 0}, {"snippet_id": 1387, "code": "\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False)", "label": 0}, {"snippet_id": 2985, "code": " changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", "label": 0}, {"snippet_id": 530, "code": "(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id", "label": 0}, {"snippet_id": 629, "code": "\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters):", "label": 0}, {"snippet_id": 981, "code": " NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5", "label": 0}, {"snippet_id": 785, "code": "=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key", "label": 0}, {"snippet_id": 2123, "code": " except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id", "label": 0}, {"snippet_id": 861, "code": ".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id", "label": 0}, {"snippet_id": 3199, "code": "] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details", "label": 0}, {"snippet_id": 77, "code": " from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent'", "label": 0}, {"snippet_id": 3887, "code": ".package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag)", "label": 0}, {"snippet_id": 1045, "code": ".Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read", "label": 0}, {"snippet_id": 243, "code": "=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access", "label": 0}, {"snippet_id": 3209, "code": ".total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: \"\"\" Update user with info supplied", "label": 0}, {"snippet_id": 971, "code": " server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of", "label": 0}, {"snippet_id": 2417, "code": "-=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int)", "label": 0}, {"snippet_id": 1069, "code": ".Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys", "label": 0}, {"snippet_id": 2702, "code": " 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result", "label": 0}, {"snippet_id": 1163, "code": ".project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username", "label": 0}, {"snippet_id": 1892, "code": " validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by", "label": 1}, {"snippet_id": 1168, "code": "=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\"", "label": 0}, {"snippet_id": 2554, "code": " from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db", "label": 1}, {"snippet_id": 2575, "code": "(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1]", "label": 1}, {"snippet_id": 2455, "code": ".username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound()", "label": 0}, {"snippet_id": 2926, "code": " get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username", "label": 0}, {"snippet_id": 57, "code": ".models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose", "label": 0}, {"snippet_id": 1831, "code": "=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append", "label": 1}, {"snippet_id": 1324, "code": " user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB", "label": 0}, {"snippet_id": 852, "code": "> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem", "label": 0}, {"snippet_id": 1724, "code": ".all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped", "label": 0}, {"snippet_id": 3092, "code": " TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory", "label": 0}, {"snippet_id": 2072, "code": ".accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create", "label": 0}, {"snippet_id": 233, "code": ".IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null", "label": 0}, {"snippet_id": 1570, "code": ".lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None", "label": 0}, {"snippet_id": 1377, "code": " MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db", "label": 0}, {"snippet_id": 764, "code": ", child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part", "label": 0}, {"snippet_id": 2701, "code": ")), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result", "label": 0}, {"snippet_id": 1055, "code": ", index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id", "label": 0}, {"snippet_id": 3327, "code": ": int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if", "label": 0}, {"snippet_id": 3584, "code": "=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has accepted specified license \"\"", "label": 0}, {"snippet_id": 130, "code": ".parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class", "label": 0}, {"snippet_id": 184, "code": ", null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey", "label": 0}, {"snippet_id": 1592, "code": " db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def", "label": 0}, {"snippet_id": 76, "code": " from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent", "label": 0}, {"snippet_id": 3161, "code": "(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto", "label": 1}, {"snippet_id": 1870, "code": " a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce", "label": 0}, {"snippet_id": 541, "code": " root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(", "label": 0}, {"snippet_id": 1910, "code": "}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM", "label": 1}, {"snippet_id": 2658, "code": " ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter(", "label": 0}, {"snippet_id": 2692, "code": ".organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result", "label": 0}, {"snippet_id": 3384, "code": " int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str", "label": 0}, {"snippet_id": 1646, "code": " User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'", "label": 0}, {"snippet_id": 3301, "code": " @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER", "label": 0}, {"snippet_id": 1206, "code": ": \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from", "label": 1}, {"snippet_id": 1365, "code": " server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User", "label": 0}, {"snippet_id": 3299, "code": " project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN", "label": 0}, {"snippet_id": 1440, "code": " default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column", "label": 0}, {"snippet_id": 3287, "code": "-> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int", "label": 0}, {"snippet_id": 2762, "code": " in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count", "label": 0}, {"snippet_id": 3943, "code": ".select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject", "label": 0}, {"snippet_id": 1639, "code": "=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username:", "label": 0}, {"snippet_id": 1189, "code": " Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save", "label": 0}, {"snippet_id": 3573, "code": "\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id", "label": 0}, {"snippet_id": 827, "code": "(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name,", "label": 0}, {"snippet_id": 1202, "code": "') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query=''", "label": 1}, {"snippet_id": 412, "code": "(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and", "label": 0}, {"snippet_id": 3659, "code": "'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel", "label": 0}, {"snippet_id": 2207, "code": " total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent ", "label": 0}, {"snippet_id": 1246, "code": " contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages", "label": 0}, {"snippet_id": 3557, "code": " mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): ", "label": 0}, {"snippet_id": 3511, "code": " set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError", "label": 0}, {"snippet_id": 3941, "code": " return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package", "label": 0}, {"snippet_id": 218, "code": "=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name", "label": 0}, {"snippet_id": 1502, "code": ".commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self", "label": 0}, {"snippet_id": 1339, "code": " from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser", "label": 1}, {"snippet_id": 1927, "code": " WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY", "label": 1}, {"snippet_id": 2180, "code": "=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24", "label": 0}, {"snippet_id": 2486, "code": ".task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto", "label": 0}, {"snippet_id": 3566, "code": " return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms", "label": 0}, {"snippet_id": 2238, "code": " ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models", "label": 0}, {"snippet_id": 2447, "code": ".task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory", "label": 0}, {"snippet_id": 1493, "code": ": \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified", "label": 0}, {"snippet_id": 1618, "code": " bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all", "label": 0}, {"snippet_id": 3431, "code": "\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"", "label": 0}, {"snippet_id": 24, "code": " from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from", "label": 0}, {"snippet_id": 1293, "code": " if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages", "label": 0}, {"snippet_id": 2448, "code": " TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date", "label": 0}, {"snippet_id": 1545, "code": "): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto", "label": 0}, {"snippet_id": 280, "code": "\"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True,", "label": 0}, {"snippet_id": 3668, "code": ".changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED'", "label": 0}, {"snippet_id": 823, "code": "(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year", "label": 0}, {"snippet_id": 2563, "code": ".validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row", "label": 1}, {"snippet_id": 341, "code": " or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0", "label": 0}, {"snippet_id": 2895, "code": ", ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message", "label": 0}, {"snippet_id": 656, "code": " filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id", "label": 0}, {"snippet_id": 714, "code": "=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related", "label": 0}, {"snippet_id": 1249, "code": "): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query", "label": 0}, {"snippet_id": 1517, "code": "\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none", "label": 0}, {"snippet_id": 1649, "code": ".mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role", "label": 0}, {"snippet_id": 618, "code": " not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class", "label": 0}, {"snippet_id": 1634, "code": " and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper", "label": 0}, {"snippet_id": 564, "code": " root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances", "label": 0}, {"snippet_id": 3317, "code": " if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id", "label": 0}, {"snippet_id": 2816, "code": " cachetools import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO", "label": 0}, {"snippet_id": 375, "code": ".child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"),", "label": 0}, {"snippet_id": 684, "code": "(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance", "label": 0}, {"snippet_id": 2649, "code": ") dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED", "label": 0}, {"snippet_id": 1964, "code": "() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5", "label": 0}, {"snippet_id": 2639, "code": " not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count", "label": 0}, {"snippet_id": 1451, "code": ".ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db", "label": 0}, {"snippet_id": 324, "code": " return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _", "label": 0}, {"snippet_id": 2852, "code": ".message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server", "label": 0}, {"snippet_id": 2988, "code": "\"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count", "label": 0}, {"snippet_id": 2464, "code": " TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id", "label": 0}, {"snippet_id": 1352, "code": ", ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses", "label": 0}, {"snippet_id": 1736, "code": " UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\"", "label": 0}, {"snippet_id": 3457, "code": "(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and", "label": 0}, {"snippet_id": 3674, "code": ".mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details", "label": 0}, {"snippet_id": 851, "code": " -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids", "label": 0}, {"snippet_id": 596, "code": "[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj", "label": 0}, {"snippet_id": 1690, "code": ") listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user", "label": 0}, {"snippet_id": 2162, "code": " action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time:", "label": 1}, {"snippet_id": 673, "code": ": _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise", "label": 0}, {"snippet_id": 1821, "code": " def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id", "label": 1}, {"snippet_id": 6, "code": " models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy", "label": 0}, {"snippet_id": 1657, "code": ".value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username", "label": 0}, {"snippet_id": 536, "code": " root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances", "label": 0}, {"snippet_id": 1320, "code": " Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): ", "label": 0}, {"snippet_id": 206, "code": "='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank", "label": 0}, {"snippet_id": 21, "code": ".functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings", "label": 0}, {"snippet_id": 1041, "code": "'users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column", "label": 0}, {"snippet_id": 3889, "code": " 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag", "label": 0}, {"snippet_id": 2733, "code": " tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project", "label": 0}, {"snippet_id": 1669, "code": ".role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser", "label": 0}, {"snippet_id": 3660, "code": "=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value", "label": 0}, {"snippet_id": 2243, "code": " OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task", "label": 0}, {"snippet_id": 3486, "code": " Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 3029, "code": " logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id)", "label": 0}, {"snippet_id": 2058, "code": " to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"", "label": 0}, {"snippet_id": 1813, "code": ".users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist", "label": 0}, {"snippet_id": 1075, "code": "[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=", "label": 0}, {"snippet_id": 425, "code": " force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.", "label": 0}, {"snippet_id": 558, "code": "=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, ", "label": 0}, {"snippet_id": 33, "code": " reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import", "label": 0}, {"snippet_id": 3692, "code": " advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except", "label": 0}, {"snippet_id": 1174, "code": ".message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE", "label": 0}, {"snippet_id": 466, "code": "(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to", "label": 0}, {"snippet_id": 3365, "code": "\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int", "label": 0}, {"snippet_id": 1231, "code": " UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\"", "label": 1}, {"snippet_id": 3024, "code": ".mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied", "label": 0}, {"snippet_id": 3597, "code": " accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets", "label": 0}, {"snippet_id": 585, "code": ")) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym", "label": 0}, {"snippet_id": 3677, "code": ".ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level", "label": 0}, {"snippet_id": 3710, "code": " 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str", "label": 0}, {"snippet_id": 3561, "code": " UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has", "label": 0}, {"snippet_id": 1140, "code": ".message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self", "label": 0}, {"snippet_id": 896, "code": " connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id'", "label": 1}, {"snippet_id": 2773, "code": " no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project", "label": 0}, {"snippet_id": 3362, "code": " -> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id", "label": 0}, {"snippet_id": 2642, "code": ".distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped", "label": 0}, {"snippet_id": 2547, "code": " OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by", "label": 0}, {"snippet_id": 1166, "code": ".task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self)", "label": 0}, {"snippet_id": 3503, "code": " assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the", "label": 0}, {"snippet_id": 835, "code": " _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) ", "label": 0}, {"snippet_id": 3399, "code": " get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects", "label": 0}, {"snippet_id": 2685, "code": " org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)", "label": 0}, {"snippet_id": 1695, "code": " listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results)", "label": 0}, {"snippet_id": 2572, "code": ".engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username", "label": 1}, {"snippet_id": 2904, "code": "\"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def", "label": 0}, {"snippet_id": 49, "code": ".education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models", "label": 0}, {"snippet_id": 1956, "code": ") mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped", "label": 0}, {"snippet_id": 1785, "code": "() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant", "label": 0}, {"snippet_id": 3, "code": ".exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property", "label": 0}, {"snippet_id": 2777, "code": "'Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag", "label": 0}, {"snippet_id": 1554, "code": ": UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else", "label": 0}, {"snippet_id": 1141, "code": "=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read", "label": 0}, {"snippet_id": 1290, "code": "(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto", "label": 0}, {"snippet_id": 2359, "code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED", "label": 0}, {"snippet_id": 600, "code": ": obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear,", "label": 0}, {"snippet_id": 3919, "code": ".get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name", "label": 1}, {"snippet_id": 2379, "code": ".tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif", "label": 0}, {"snippet_id": 2002, "code": ", role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self", "label": 0}, {"snippet_id": 1859, "code": "(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT", "label": 1}, {"snippet_id": 2489, "code": ".action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results", "label": 0}, {"snippet_id": 1421, "code": "(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer", "label": 0}, {"snippet_id": 64, "code": " base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from", "label": 0}, {"snippet_id": 2300, "code": " stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id)", "label": 0}, {"snippet_id": 1287, "code": " user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages", "label": 0}, {"snippet_id": 1173, "code": " dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT", "label": 0}, {"snippet_id": 3102, "code": ".id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query", "label": 0}, {"snippet_id": 1020, "code": "=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db", "label": 0}, {"snippet_id": 232, "code": "=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank", "label": 0}, {"snippet_id": 619, "code": ", EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(", "label": 0}, {"snippet_id": 2436, "code": " all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter", "label": 0}, {"snippet_id": 1906, "code": "(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id", "label": 1}, {"snippet_id": 2434, "code": " \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User", "label": 0}, {"snippet_id": 2047, "code": ") db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if", "label": 0}, {"snippet_id": 1743, "code": " Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id", "label": 0}, {"snippet_id": 660, "code": " LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj", "label": 0}, {"snippet_id": 3616, "code": " in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level", "label": 0}, {"snippet_id": 768, "code": " raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return ", "label": 0}, {"snippet_id": 3147, "code": "=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql", "label": 1}, {"snippet_id": 293, "code": "=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True", "label": 0}, {"snippet_id": 1484, "code": "=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save", "label": 0}, {"snippet_id": 1799, "code": " participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination", "label": 0}, {"snippet_id": 157, "code": ") | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField", "label": 0}, {"snippet_id": 3603, "code": "(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound ", "label": 0}, {"snippet_id": 2092, "code": " from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto", "label": 0}, {"snippet_id": 1037, "code": ".Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column", "label": 0}, {"snippet_id": 100, "code": " 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level", "label": 0}, {"snippet_id": 1467, "code": ".String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses", "label": 0}, {"snippet_id": 376, "code": ".complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def", "label": 0}]