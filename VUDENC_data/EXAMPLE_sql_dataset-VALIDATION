[{"snippet_id": 3170, "code": " total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS'", "label": 0}, {"snippet_id": 1836, "code": " and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where", "label": 1}, {"snippet_id": 2287, "code": " StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had", "label": 0}, {"snippet_id": 1189, "code": " Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save", "label": 0}, {"snippet_id": 3759, "code": " level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1", "label": 0}, {"snippet_id": 599, "code": "=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear", "label": 0}, {"snippet_id": 3049, "code": " UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO", "label": 0}, {"snippet_id": 3203, "code": " stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO", "label": 0}, {"snippet_id": 1764, "code": ".label(\"participant\")) \\ .filter(User.username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound(", "label": 0}, {"snippet_id": 2185, "code": "=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id", "label": 0}, {"snippet_id": 3423, "code": " add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to ", "label": 0}, {"snippet_id": 1081, "code": " backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message", "label": 0}, {"snippet_id": 1962, "code": " in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project", "label": 0}, {"snippet_id": 2597, "code": " row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() ->", "label": 0}, {"snippet_id": 2158, "code": " SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time", "label": 1}, {"snippet_id": 501, "code": ": if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year", "label": 0}, {"snippet_id": 825, "code": ": roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in", "label": 0}, {"snippet_id": 2107, "code": ".mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped", "label": 0}, {"snippet_id": 378, "code": " translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self):", "label": 0}, {"snippet_id": 3061, "code": " for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService", "label": 0}, {"snippet_id": 3472, "code": " admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole", "label": 0}, {"snippet_id": 3881, "code": "(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create", "label": 0}, {"snippet_id": 3034, "code": " supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user", "label": 0}, {"snippet_id": 2713, "code": "(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where", "label": 0}, {"snippet_id": 2690, "code": " func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=", "label": 0}, {"snippet_id": 2426, "code": "=TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query(", "label": 0}, {"snippet_id": 373, "code": ".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(", "label": 0}, {"snippet_id": 1209, "code": ".session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by", "label": 1}, {"snippet_id": 1086, "code": ".relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages')", "label": 0}, {"snippet_id": 3486, "code": " Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 3016, "code": ".mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str", "label": 0}, {"snippet_id": 1392, "code": " task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True)", "label": 0}, {"snippet_id": 3069, "code": " requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter", "label": 0}, {"snippet_id": 519, "code": "=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects", "label": 0}, {"snippet_id": 1547, "code": " username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else", "label": 0}, {"snippet_id": 3647, "code": "=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", "label": 0}, {"snippet_id": 3328, "code": " int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if", "label": 0}, {"snippet_id": 1187, "code": "\"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"", "label": 0}, {"snippet_id": 1808, "code": " participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"", "label": 0}, {"snippet_id": 77, "code": " from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent'", "label": 0}, {"snippet_id": 244, "code": " verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition')", "label": 0}, {"snippet_id": 3499, "code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ->", "label": 0}, {"snippet_id": 1174, "code": ".message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE", "label": 0}, {"snippet_id": 2330, "code": " new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state:", "label": 0}, {"snippet_id": 1811, "code": ".participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if", "label": 0}, {"snippet_id": 438, "code": " is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent", "label": 0}, {"snippet_id": 1238, "code": " tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read", "label": 1}, {"snippet_id": 3679, "code": "=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel", "label": 0}, {"snippet_id": 258, "code": ".BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500", "label": 0}, {"snippet_id": 2132, "code": ".tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self", "label": 0}, {"snippet_id": 2907, "code": " notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id", "label": 0}, {"snippet_id": 1311, "code": " @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).", "label": 0}, {"snippet_id": 2372, "code": " action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if", "label": 0}, {"snippet_id": 2614, "code": "() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query", "label": 0}, {"snippet_id": 2949, "code": "() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return", "label": 0}, {"snippet_id": 559, "code": "\\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category", "label": 0}, {"snippet_id": 1250, "code": "\"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query", "label": 0}, {"snippet_id": 2563, "code": ".validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row", "label": 1}, {"snippet_id": 1950, "code": " results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project", "label": 1}, {"snippet_id": 2396, "code": " project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus", "label": 0}, {"snippet_id": 590, "code": " education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items(", "label": 0}, {"snippet_id": 1423, "code": "=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable", "label": 0}, {"snippet_id": 1510, "code": " int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None", "label": 0}, {"snippet_id": 2326, "code": " user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project", "label": 0}, {"snippet_id": 2411, "code": "'undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", "label": 0}, {"snippet_id": 2894, "code": "=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def", "label": 0}, {"snippet_id": 1654, "code": ".mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole", "label": 0}, {"snippet_id": 1274, "code": " Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if", "label": 0}, {"snippet_id": 2589, "code": "=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib)", "label": 0}, {"snippet_id": 274, "code": "=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters", "label": 0}, {"snippet_id": 353, "code": " learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format", "label": 0}, {"snippet_id": 2508, "code": " activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped", "label": 0}, {"snippet_id": 2643, "code": ".locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task", "label": 0}, {"snippet_id": 3306, "code": "\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level", "label": 0}, {"snippet_id": 142, "code": ") SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull", "label": 0}, {"snippet_id": 1230, "code": " not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self", "label": 1}, {"snippet_id": 3562, "code": " UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted", "label": 0}, {"snippet_id": 1003, "code": " individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key", "label": 0}, {"snippet_id": 2878, "code": " OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache", "label": 0}, {"snippet_id": 2844, "code": " server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole", "label": 0}, {"snippet_id": 3596, "code": " has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"", "label": 0}, {"snippet_id": 1406, "code": ", default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped", "label": 0}, {"snippet_id": 3638, "code": " mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level", "label": 0}, {"snippet_id": 3088, "code": "( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory", "label": 0}, {"snippet_id": 2693, "code": " ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db", "label": 0}, {"snippet_id": 19, "code": " translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin", "label": 0}, {"snippet_id": 2756, "code": ".campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +", "label": 0}, {"snippet_id": 3488, "code": " admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username", "label": 0}, {"snippet_id": 3179, "code": ".time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine", "label": 1}, {"snippet_id": 3448, "code": ":raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService", "label": 0}, {"snippet_id": 2209, "code": "=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self", "label": 0}, {"snippet_id": 2558, "code": ".project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0", "label": 1}, {"snippet_id": 3083, "code": ".get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id=", "label": 0}, {"snippet_id": 187, "code": " ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf", "label": 0}, {"snippet_id": 1188, "code": "\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\"", "label": 0}, {"snippet_id": 3053, "code": ".username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto", "label": 0}, {"snippet_id": 1939, "code": " ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO", "label": 1}, {"snippet_id": 2985, "code": " changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", "label": 0}, {"snippet_id": 2205, "code": ") for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent", "label": 1}, {"snippet_id": 3064, "code": "\"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 1149, "code": " to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if", "label": 0}, {"snippet_id": 1961, "code": " row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4", "label": 0}, {"snippet_id": 700, "code": "' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else", "label": 0}, {"snippet_id": 3234, "code": " user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address", "label": 0}, {"snippet_id": 340, "code": ".credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None,", "label": 0}, {"snippet_id": 3644, "code": "=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level", "label": 0}, {"snippet_id": 366, "code": "{}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components", "label": 0}, {"snippet_id": 2525, "code": " v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by", "label": 1}, {"snippet_id": 1943, "code": ") c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results:", "label": 1}, {"snippet_id": 773, "code": " param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals", "label": 0}, {"snippet_id": 3235, "code": ".get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower()", "label": 0}, {"snippet_id": 3882, "code": "=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname", "label": 0}, {"snippet_id": 2286, "code": ") class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task", "label": 0}, {"snippet_id": 60, "code": " education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base", "label": 0}, {"snippet_id": 3793, "code": ".base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package')", "label": 0}, {"snippet_id": 1883, "code": " projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks", "label": 0}, {"snippet_id": 2157, "code": "=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for", "label": 1}, {"snippet_id": 634, "code": "(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects", "label": 0}, {"snippet_id": 3857, "code": " PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes", "label": 0}, {"snippet_id": 3309, "code": " project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int):", "label": 0}, {"snippet_id": 1672, "code": "(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user", "label": 0}, {"snippet_id": 2387, "code": " new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state", "label": 0}, {"snippet_id": 2210, "code": "] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username", "label": 0}, {"snippet_id": 2925, "code": " @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User", "label": 0}, {"snippet_id": 2265, "code": ".models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4", "label": 0}, {"snippet_id": 405, "code": " self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using,", "label": 0}, {"snippet_id": 2073, "code": ": return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object", "label": 0}, {"snippet_id": 175, "code": " changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name=", "label": 0}, {"snippet_id": 504, "code": "(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year", "label": 0}, {"snippet_id": 248, "code": ".CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500,", "label": 0}, {"snippet_id": 3207, "code": ".time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: \"\"", "label": 0}, {"snippet_id": 3721, "code": " return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('", "label": 0}, {"snippet_id": 2212, "code": " total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username=", "label": 0}, {"snippet_id": 2189, "code": "=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db", "label": 1}, {"snippet_id": 3002, "code": " if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value", "label": 0}, {"snippet_id": 1739, "code": " matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username", "label": 0}, {"snippet_id": 2646, "code": " dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task", "label": 0}, {"snippet_id": 2837, "code": ", UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory", "label": 0}, {"snippet_id": 1850, "code": " users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -", "label": 1}, {"snippet_id": 28, "code": " ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type", "label": 0}, {"snippet_id": 1615, "code": "(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search", "label": 0}, {"snippet_id": 47, "code": " base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters", "label": 0}, {"snippet_id": 1317, "code": " int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete", "label": 0}, {"snippet_id": 2902, "code": ") class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message)", "label": 0}, {"snippet_id": 3574, "code": "\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id:", "label": 0}, {"snippet_id": 685, "code": "(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.", "label": 0}, {"snippet_id": 3956, "code": "(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package', 'tag', unique=True)", "label": 0}, {"snippet_id": 513, "code": "['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs:", "label": 0}, {"snippet_id": 3752, "code": " level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"", "label": 0}, {"snippet_id": 488, "code": " reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset", "label": 0}, {"snippet_id": 2738, "code": ".VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag", "label": 0}, {"snippet_id": 2017, "code": ", level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with", "label": 0}, {"snippet_id": 3951, "code": " sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True", "label": 0}, {"snippet_id": 1299, "code": ") messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id:", "label": 0}, {"snippet_id": 2798, "code": ".group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else", "label": 0}, {"snippet_id": 3934, "code": " LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names", "label": 1}, {"snippet_id": 3220, "code": " dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if", "label": 0}, {"snippet_id": 2308, "code": ", TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats", "label": 0}, {"snippet_id": 639, "code": ")) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id", "label": 0}, {"snippet_id": 1226, "code": " from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute", "label": 1}, {"snippet_id": 1437, "code": " tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column", "label": 0}, {"snippet_id": 3509, "code": " @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError", "label": 0}, {"snippet_id": 428, "code": " def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent", "label": 0}, {"snippet_id": 2964, "code": ") if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user", "label": 0}, {"snippet_id": 713, "code": " columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) ", "label": 0}, {"snippet_id": 2468, "code": ", True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action", "label": 0}, {"snippet_id": 86, "code": " OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym", "label": 0}, {"snippet_id": 2491, "code": " history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto", "label": 0}, {"snippet_id": 1236, "code": " tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"", "label": 1}, {"snippet_id": 3705, "code": ".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade", "label": 0}, {"snippet_id": 1676, "code": ".order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level", "label": 0}, {"snippet_id": 3125, "code": ".distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping", "label": 0}, {"snippet_id": 3233, "code": "\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto", "label": 0}, {"snippet_id": 3501, "code": " Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"", "label": 0}, {"snippet_id": 1770, "code": ".lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames", "label": 0}, {"snippet_id": 546, "code": ": root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories", "label": 0}, {"snippet_id": 2341, "code": ", user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif", "label": 0}, {"snippet_id": 2664, "code": ".query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count", "label": 0}, {"snippet_id": 1541, "code": " def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address", "label": 0}, {"snippet_id": 2862, "code": " User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import", "label": 0}, {"snippet_id": 2730, "code": " where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum']", "label": 0}, {"snippet_id": 2309, "code": " TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project", "label": 0}, {"snippet_id": 2944, "code": " user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if", "label": 0}, {"snippet_id": 914, "code": "'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects", "label": 0}, {"snippet_id": 1693, "code": "=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination", "label": 0}, {"snippet_id": 1799, "code": " participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination", "label": 0}, {"snippet_id": 2113, "code": "=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped", "label": 0}, {"snippet_id": 1721, "code": " in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete", "label": 0}, {"snippet_id": 1989, "code": " row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on", "label": 0}, {"snippet_id": 3424, "code": "(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The", "label": 0}, {"snippet_id": 2974, "code": " username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user", "label": 0}, {"snippet_id": 3270, "code": "> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO", "label": 0}, {"snippet_id": 493, "code": " child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs", "label": 0}, {"snippet_id": 839, "code": " any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "label": 0}, {"snippet_id": 3602, "code": ".has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises", "label": 0}, {"snippet_id": 3897, "code": ".model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject", "label": 0}, {"snippet_id": 195, "code": " blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models", "label": 0}, {"snippet_id": 744, "code": " child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch]", "label": 0}, {"snippet_id": 193, "code": " related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE,", "label": 0}, {"snippet_id": 145, "code": " ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ", "label": 0}, {"snippet_id": 2651, "code": ".filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value", "label": 0}, {"snippet_id": 777, "code": ").') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id", "label": 0}, {"snippet_id": 698, "code": " too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys", "label": 0}, {"snippet_id": 3236, "code": ".get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user", "label": 0}, {"snippet_id": 3497, "code": "'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str", "label": 0}, {"snippet_id": 988, "code": " of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user", "label": 0}, {"snippet_id": 1903, "code": " validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count", "label": 1}, {"snippet_id": 3952, "code": " versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex", "label": 0}, {"snippet_id": 1575, "code": ".facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db", "label": 0}, {"snippet_id": 3815, "code": "(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default", "label": 0}, {"snippet_id": 2219, "code": " user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified=self.is_email_verified return user_dto", "label": 0}, {"snippet_id": 3681, "code": " UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user", "label": 0}, {"snippet_id": 1156, "code": ".message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type", "label": 0}, {"snippet_id": 954, "code": " MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import", "label": 0}, {"snippet_id": 3704, "code": ".value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user", "label": 0}, {"snippet_id": 3405, "code": " projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id", "label": 0}, {"snippet_id": 416, "code": " using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It", "label": 0}, {"snippet_id": 2608, "code": " contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO", "label": 0}, {"snippet_id": 2930, "code": " User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None:", "label": 0}, {"snippet_id": 940, "code": "=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must be set')", "label": 0}, {"snippet_id": 2177, "code": " total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"", "label": 0}, {"snippet_id": 255, "code": "\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english", "label": 0}, {"snippet_id": 290, "code": " quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices", "label": 0}, {"snippet_id": 3925, "code": "'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return", "label": 1}, {"snippet_id": 1792, "code": ".username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto", "label": 0}, {"snippet_id": 3396, "code": " otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\"", "label": 0}, {"snippet_id": 602, "code": " obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]", "label": 0}, {"snippet_id": 1214, "code": "\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0", "label": 1}, {"snippet_id": 2600, "code": " user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: ", "label": 0}, {"snippet_id": 3565, "code": "=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted license terms \"\"\"", "label": 0}, {"snippet_id": 1194, "code": " COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit", "label": 0}, {"snippet_id": 2755, "code": ".campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns ", "label": 0}, {"snippet_id": 3271, "code": " UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO", "label": 0}, {"snippet_id": 112, "code": " child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level", "label": 1}, {"snippet_id": 400, "code": "=LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return", "label": 0}, {"snippet_id": 372, "code": ".complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0,", "label": 0}, {"snippet_id": 2523, "code": " m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not", "label": 1}, {"snippet_id": 1529, "code": " Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self", "label": 0}, {"snippet_id": 3612, "code": " details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user", "label": 0}, {"snippet_id": 1490, "code": "=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int):", "label": 0}, {"snippet_id": 3663, "code": " try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED", "label": 0}, {"snippet_id": 1833, "code": " where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped", "label": 1}, {"snippet_id": 1542, "code": ", username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower", "label": 0}, {"snippet_id": 2672, "code": ") ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag", "label": 0}, {"snippet_id": 987, "code": " kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message", "label": 0}, {"snippet_id": 2940, "code": " get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User:", "label": 0}, {"snippet_id": 2781, "code": " no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project", "label": 0}, {"snippet_id": 1100, "code": " Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject", "label": 0}, {"snippet_id": 1292, "code": "() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages", "label": 0}, {"snippet_id": 938, "code": "(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf params must", "label": 0}, {"snippet_id": 892, "code": " group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute", "label": 1}, {"snippet_id": 417, "code": ", update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden", "label": 0}, {"snippet_id": 2522, "code": ".username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by", "label": 1}, {"snippet_id": 2428, "code": " @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory", "label": 0}, {"snippet_id": 2587, "code": " or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions", "label": 0}, {"snippet_id": 1212, "code": " int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id", "label": 1}, {"snippet_id": 1405, "code": "(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False", "label": 0}, {"snippet_id": 2169, "code": " total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto", "label": 1}, {"snippet_id": 3798, "code": " License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject)", "label": 0}, {"snippet_id": 1131, "code": "=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"", "label": 0}, {"snippet_id": 1121, "code": ".message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type", "label": 0}, {"snippet_id": 3684, "code": ", 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService", "label": 0}, {"snippet_id": 1974, "code": ".name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]", "label": 0}, {"snippet_id": 2094, "code": " scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self", "label": 0}, {"snippet_id": 982, "code": " class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message", "label": 0}, {"snippet_id": 1725, "code": " filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project", "label": 0}, {"snippet_id": 1085, "code": ".relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages", "label": 0}, {"snippet_id": 1556, "code": "\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id", "label": 0}, {"snippet_id": 352, "code": " learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{", "label": 0}, {"snippet_id": 1344, "code": " UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server", "label": 0}, {"snippet_id": 3715, "code": ".error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt'", "label": 0}, {"snippet_id": 1592, "code": " db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def", "label": 0}, {"snippet_id": 3297, "code": "\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id)", "label": 0}, {"snippet_id": 3254, "code": "(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery", "label": 0}, {"snippet_id": 1200, "code": " message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project ", "label": 0}, {"snippet_id": 1321, "code": " Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"", "label": 0}, {"snippet_id": 402, "code": " return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save", "label": 0}, {"snippet_id": 3821, "code": "('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default", "label": 0}, {"snippet_id": 2559, "code": "{0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound", "label": 1}, {"snippet_id": 3929, "code": "'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag", "label": 1}, {"snippet_id": 3113, "code": ".id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count()", "label": 0}, {"snippet_id": 1872, "code": " on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0)", "label": 0}, {"snippet_id": 74, "code": " volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin):", "label": 0}, {"snippet_id": 843, "code": " values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be", "label": 0}, {"snippet_id": 591, "code": "(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance", "label": 0}, {"snippet_id": 1427, "code": ".Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer", "label": 0}, {"snippet_id": 1142, "code": " message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self", "label": 0}, {"snippet_id": 1073, "code": ".relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db", "label": 0}, {"snippet_id": 1987, "code": ", preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets", "label": 0}, {"snippet_id": 884, "code": " group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format", "label": 1}, {"snippet_id": 403, "code": ".comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert,", "label": 0}, {"snippet_id": 1065, "code": ".DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages'", "label": 0}, {"snippet_id": 3493, "code": ".PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level", "label": 0}, {"snippet_id": 3384, "code": " int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str", "label": 0}, {"snippet_id": 3674, "code": ".mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details", "label": 0}, {"snippet_id": 1450, "code": "(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id", "label": 0}, {"snippet_id": 2620, "code": " to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task", "label": 0}, {"snippet_id": 1148, "code": " message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id", "label": 0}, {"snippet_id": 88, "code": "'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym' ]", "label": 0}, {"snippet_id": 245, "code": "\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models", "label": 0}, {"snippet_id": 3120, "code": "=user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped", "label": 0}, {"snippet_id": 1618, "code": " bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all", "label": 0}, {"snippet_id": 2998, "code": "=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user", "label": 0}, {"snippet_id": 1331, "code": "\nimport geojson import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO", "label": 1}, {"snippet_id": 3912, "code": ".VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package'", "label": 0}, {"snippet_id": 325, "code": "} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits", "label": 0}, {"snippet_id": 1977, "code": " mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto", "label": 0}, {"snippet_id": 931, "code": " child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf", "label": 0}, {"snippet_id": 3567, "code": " @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id", "label": 0}, {"snippet_id": 589, "code": " in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id", "label": 0}, {"snippet_id": 1768, "code": ".username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results", "label": 0}, {"snippet_id": 2653, "code": ".filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) )", "label": 0}, {"snippet_id": 1341, "code": " from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models", "label": 0}, {"snippet_id": 1452, "code": ".Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column", "label": 0}, {"snippet_id": 3654, "code": " intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id) if(osm_details", "label": 0}, {"snippet_id": 1777, "code": " User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant", "label": 0}, {"snippet_id": 1445, "code": ".Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean,", "label": 0}, {"snippet_id": 2931, "code": " user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise", "label": 0}, {"snippet_id": 836, "code": "(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict:", "label": 0}, {"snippet_id": 2703, "code": " as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone", "label": 0}, {"snippet_id": 292, "code": " max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices()", "label": 0}, {"snippet_id": 1690, "code": ") listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user", "label": 0}, {"snippet_id": 3573, "code": "\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id", "label": 0}, {"snippet_id": 3506, "code": " user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises", "label": 0}, {"snippet_id": 1404, "code": " validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1,", "label": 0}, {"snippet_id": 3825, "code": "=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject", "label": 0}, {"snippet_id": 3868, "code": " class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[", "label": 0}, {"snippet_id": 3826, "code": " title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", "label": 0}, {"snippet_id": 3316, "code": "(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService", "label": 0}, {"snippet_id": 489, "code": " learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear", "label": 0}, {"snippet_id": 3222, "code": " Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto", "label": 0}, {"snippet_id": 1921, "code": " JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m", "label": 1}, {"snippet_id": 2792, "code": ".organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag:", "label": 0}, {"snippet_id": 3728, "code": " level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]", "label": 0}, {"snippet_id": 603, "code": ", parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise", "label": 0}, {"snippet_id": 2332, "code": " UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus,", "label": 0}, {"snippet_id": 949, "code": " Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import", "label": 0}, {"snippet_id": 3533, "code": " accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id:", "label": 0}, {"snippet_id": 1679, "code": ".page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username", "label": 0}, {"snippet_id": 162, "code": " GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear", "label": 0}, {"snippet_id": 838, "code": ": return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "label": 0}, {"snippet_id": 2444, "code": "( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !=", "label": 0}, {"snippet_id": 2866, "code": " MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server", "label": 0}, {"snippet_id": 2732, "code": ":task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count", "label": 0}, {"snippet_id": 2747, "code": " campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats", "label": 0}, {"snippet_id": 2285, "code": " ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when", "label": 0}, {"snippet_id": 1852, "code": "=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"", "label": 1}, {"snippet_id": 2688, "code": " Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public", "label": 0}, {"snippet_id": 3277, "code": " users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered", "label": 0}, {"snippet_id": 3135, "code": ".tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text", "label": 0}, {"snippet_id": 762, "code": " args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf", "label": 0}, {"snippet_id": 1724, "code": ".all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped", "label": 0}, {"snippet_id": 621, "code": ": raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the", "label": 0}, {"snippet_id": 3320, "code": ": return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod", "label": 0}, {"snippet_id": 250, "code": "=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null", "label": 0}, {"snippet_id": 530, "code": "(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id", "label": 0}, {"snippet_id": 3269, "code": " UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) ->", "label": 0}, {"snippet_id": 3144, "code": ".time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time", "label": 1}, {"snippet_id": 2831, "code": " db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis", "label": 0}, {"snippet_id": 538, "code": " if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id", "label": 0}, {"snippet_id": 1167, "code": "=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"", "label": 0}, {"snippet_id": 56, "code": " from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear,", "label": 0}, {"snippet_id": 354, "code": ".child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual'))).values('type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self", "label": 0}, {"snippet_id": 680, "code": " _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to", "label": 0}, {"snippet_id": 3023, "code": " new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user", "label": 0}, {"snippet_id": 2108, "code": ".mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped)", "label": 0}, {"snippet_id": 178, "code": "(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True", "label": 0}, {"snippet_id": 1868, "code": ": \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id", "label": 0}, {"snippet_id": 1678, "code": ").paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user", "label": 0}, {"snippet_id": 2896, "code": " ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message", "label": 0}, {"snippet_id": 1505, "code": "(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str)", "label": 0}, {"snippet_id": 1227, "code": "={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors", "label": 1}, {"snippet_id": 1924, "code": ".project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id", "label": 1}, {"snippet_id": 1413, "code": "=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db", "label": 0}, {"snippet_id": 780, "code": " branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters", "label": 0}, {"snippet_id": 2325, "code": "(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project", "label": 0}, {"snippet_id": 3682, "code": ".notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level", "label": 0}, {"snippet_id": 1259, "code": " get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int", "label": 0}, {"snippet_id": 3498, "code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ", "label": 0}, {"snippet_id": 956, "code": " from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models", "label": 0}, {"snippet_id": 714, "code": "=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related", "label": 0}, {"snippet_id": 2037, "code": " in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int):", "label": 0}, {"snippet_id": 2864, "code": " UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService", "label": 0}, {"snippet_id": 2950, "code": " user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user", "label": 0}, {"snippet_id": 113, "code": " child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM", "label": 1}, {"snippet_id": 3060, "code": " user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user", "label": 0}, {"snippet_id": 3022, "code": " else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets", "label": 0}, {"snippet_id": 2928, "code": " int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is", "label": 0}, {"snippet_id": 419, "code": ": self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear", "label": 0}, {"snippet_id": 3511, "code": " set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError", "label": 0}, {"snippet_id": 2394, "code": "=TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if", "label": 0}, {"snippet_id": 2512, "code": " ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username", "label": 0}, {"snippet_id": 130, "code": ".parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class", "label": 0}, {"snippet_id": 1692, "code": " listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto", "label": 0}, {"snippet_id": 3478, "code": " requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError", "label": 0}, {"snippet_id": 883, "code": " group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP", "label": 1}, {"snippet_id": 1735, "code": " UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not.", "label": 0}, {"snippet_id": 249, "code": " max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True", "label": 0}, {"snippet_id": 2005, "code": "\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "label": 0}, {"snippet_id": 901, "code": "=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id", "label": 1}, {"snippet_id": 125, "code": ".child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT ", "label": 0}, {"snippet_id": 1960, "code": " for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row", "label": 0}, {"snippet_id": 516, "code": "(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf", "label": 0}, {"snippet_id": 197, "code": " on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True", "label": 0}, {"snippet_id": 875, "code": ") group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id", "label": 0}, {"snippet_id": 948, "code": " enum import Enum from server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project", "label": 0}, {"snippet_id": 2124, "code": " user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto", "label": 0}, {"snippet_id": 2191, "code": ".time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db.engine.execute(sql", "label": 1}, {"snippet_id": 1931, "code": " FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute", "label": 1}, {"snippet_id": 2671, "code": ".VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project", "label": 0}, {"snippet_id": 111, "code": ", child_branch_id, child_leaf_id, parent_id, 0 AS level FROM base_groupelementyear WHERE parent_id IN({list_root_ids}) UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id", "label": 1}, {"snippet_id": 1892, "code": " validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by", "label": 1}, {"snippet_id": 3492, "code": "=UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod", "label": 0}, {"snippet_id": 1362, "code": " users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import", "label": 0}, {"snippet_id": 557, "code": "=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names", "label": 0}, {"snippet_id": 3831, "code": "=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase", "label": 0}, {"snippet_id": 2294, "code": " TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING", "label": 0}, {"snippet_id": 626, "code": " or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations", "label": 0}, {"snippet_id": 1910, "code": "}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM", "label": 1}, {"snippet_id": 440, "code": " save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch", "label": 0}, {"snippet_id": 3461, "code": " values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN", "label": 0}, {"snippet_id": 1309, "code": " messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id", "label": 0}, {"snippet_id": 3841, "code": ".ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", "label": 0}, {"snippet_id": 1376, "code": ".statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__", "label": 0}, {"snippet_id": 335, "code": "}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self", "label": 0}, {"snippet_id": 2328, "code": " last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user", "label": 0}, {"snippet_id": 2900, "code": "(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger", "label": 0}, {"snippet_id": 2059, "code": " the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete", "label": 0}, {"snippet_id": 220, "code": "=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\")", "label": 0}, {"snippet_id": 2492, "code": "=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod", "label": 0}, {"snippet_id": 3489, "code": ".PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role", "label": 0}, {"snippet_id": 1632, "code": "\"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level", "label": 0}, {"snippet_id": 3756, "code": " level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User", "label": 0}, {"snippet_id": 3151, "code": ") FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0", "label": 1}, {"snippet_id": 2055, "code": " Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self", "label": 0}, {"snippet_id": 1320, "code": " Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): ", "label": 0}, {"snippet_id": 3524, "code": " requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username", "label": 0}, {"snippet_id": 1504, "code": " save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username:", "label": 0}, {"snippet_id": 445, "code": ")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError", "label": 0}, {"snippet_id": 3580, "code": " accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\" Checks if user has", "label": 0}, {"snippet_id": 1172, "code": " None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO", "label": 0}, {"snippet_id": 377, "code": " and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment", "label": 0}, {"snippet_id": 2176, "code": " total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=", "label": 0}, {"snippet_id": 1284, "code": " MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message in", "label": 0}, {"snippet_id": 2367, "code": "=TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state", "label": 0}, {"snippet_id": 1355, "code": " from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus", "label": 0}, {"snippet_id": 568, "code": " root_type_names, 'parent__education_group_type__category': root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id", "label": 0}, {"snippet_id": 857, "code": " raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset", "label": 0}, {"snippet_id": 625, "code": " either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class", "label": 0}, {"snippet_id": 3624, "code": "\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping", "label": 0}, {"snippet_id": 3075, "code": " def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !=", "label": 0}, {"snippet_id": 932, "code": " child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return", "label": 0}, {"snippet_id": 706, "code": "].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year", "label": 0}, {"snippet_id": 3096, "code": "=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED", "label": 0}, {"snippet_id": 2619, "code": " stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct", "label": 0}, {"snippet_id": 3321, "code": " True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod", "label": 0}, {"snippet_id": 2165, "code": "{0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time", "label": 1}, {"snippet_id": 1298, "code": "() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id", "label": 0}, {"snippet_id": 935, "code": ".objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch", "label": 0}, {"snippet_id": 1336, "code": " dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO", "label": 1}, {"snippet_id": 2266, "code": ".postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30", "label": 0}, {"snippet_id": 2647, "code": ".total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status", "label": 0}, {"snippet_id": 533, "code": " find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if", "label": 0}, {"snippet_id": 1523, "code": " get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str):", "label": 0}, {"snippet_id": 2400, "code": "==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif", "label": 0}, {"snippet_id": 2549, "code": "(select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v", "label": 0}, {"snippet_id": 2207, "code": " total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent ", "label": 0}, {"snippet_id": 97, "code": " ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id", "label": 0}, {"snippet_id": 1628, "code": " UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level", "label": 0}, {"snippet_id": 2488, "code": " history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination", "label": 0}, {"snippet_id": 1597, "code": " set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool", "label": 0}, {"snippet_id": 2537, "code": ".id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t", "label": 1}, {"snippet_id": 3572, "code": ": \"\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id", "label": 0}, {"snippet_id": 971, "code": " server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of", "label": 0}, {"snippet_id": 2879, "code": " from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache", "label": 0}, {"snippet_id": 3305, "code": "-> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level", "label": 0}, {"snippet_id": 23, "code": " cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN", "label": 0}, {"snippet_id": 3173, "code": "=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING", "label": 0}, {"snippet_id": 2274, "code": " import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change", "label": 0}, {"snippet_id": 54, "code": ".education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year", "label": 0}, {"snippet_id": 374, "code": " self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"", "label": 0}, {"snippet_id": 1015, "code": "'tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'))", "label": 0}, {"snippet_id": 2578, "code": " NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row", "label": 0}, {"snippet_id": 1016, "code": " 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id", "label": 0}, {"snippet_id": 471, "code": " to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit", "label": 0}, {"snippet_id": 1941, "code": ".project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for", "label": 1}, {"snippet_id": 384, "code": ".relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english", "label": 0}, {"snippet_id": 2999, "code": ".config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level", "label": 0}, {"snippet_id": 2031, "code": " \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence", "label": 0}, {"snippet_id": 2452, "code": ".action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10", "label": 0}, {"snippet_id": 1945, "code": ".project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", "label": 1}, {"snippet_id": 3909, "code": " Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', ", "label": 0}, {"snippet_id": 966, "code": ".postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"", "label": 0}, {"snippet_id": 3201, "code": ": stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto", "label": 0}, {"snippet_id": 289, "code": ") quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField(", "label": 0}, {"snippet_id": 1671, "code": "=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser()", "label": 0}, {"snippet_id": 2857, "code": " TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError", "label": 0}, {"snippet_id": 1880, "code": " c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id", "label": 0}, {"snippet_id": 758, "code": "(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part", "label": 0}, {"snippet_id": 670, "code": "} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj", "label": 0}, {"snippet_id": 1879, "code": " c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t", "label": 0}, {"snippet_id": 1775, "code": "\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not", "label": 0}, {"snippet_id": 1018, "code": "]), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger", "label": 0}, {"snippet_id": 2663, "code": "() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED", "label": 0}, {"snippet_id": 2034, "code": " Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self,", "label": 0}, {"snippet_id": 3243, "code": ".email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto", "label": 0}, {"snippet_id": 1512, "code": " Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found", "label": 0}, {"snippet_id": 2880, "code": ".services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize", "label": 0}, {"snippet_id": 1900, "code": " t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v", "label": 1}, {"snippet_id": 3048, "code": "(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user", "label": 0}, {"snippet_id": 757, "code": " def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).')", "label": 0}, {"snippet_id": 810, "code": " group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id", "label": 0}, {"snippet_id": 3908, "code": " class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages", "label": 0}, {"snippet_id": 2774, "code": ": no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag", "label": 0}, {"snippet_id": 1237, "code": " tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self", "label": 1}, {"snippet_id": 1436, "code": "=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address", "label": 0}, {"snippet_id": 3141, "code": ".total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id=", "label": 1}, {"snippet_id": 1228, "code": "} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def", "label": 1}, {"snippet_id": 1825, "code": " project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql", "label": 1}, {"snippet_id": 1136, "code": " message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO", "label": 0}, {"snippet_id": 2708, "code": "=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select", "label": 0}, {"snippet_id": 75, "code": " volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=", "label": 0}, {"snippet_id": 1848, "code": "'update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale", "label": 1}, {"snippet_id": 237, "code": " credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models", "label": 0}, {"snippet_id": 1999, "code": " set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on", "label": 0}, {"snippet_id": 2807, "code": "(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count))", "label": 0}, {"snippet_id": 899, "code": " as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id", "label": 1}, {"snippet_id": 1283, "code": "-> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message", "label": 0}, {"snippet_id": 132, "code": " +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager", "label": 0}, {"snippet_id": 1862, "code": " @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped", "label": 0}, {"snippet_id": 2935, "code": " raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username", "label": 0}, {"snippet_id": 3522, "code": " UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService", "label": 0}, {"snippet_id": 1184, "code": " add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self", "label": 0}, {"snippet_id": 2238, "code": " ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models", "label": 0}, {"snippet_id": 434, "code": " self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden", "label": 0}, {"snippet_id": 1202, "code": "') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query=''", "label": 1}, {"snippet_id": 2088, "code": "-> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 1652, "code": ".filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role", "label": 0}, {"snippet_id": 2540, "code": "} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and", "label": 1}, {"snippet_id": 2407, "code": " project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED", "label": 0}, {"snippet_id": 3249, "code": ".lower(), user.username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached", "label": 0}, {"snippet_id": 904, "code": "','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor", "label": 1}, {"snippet_id": 2163, "code": "'LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(self.id) total_validation_time=db.engine.execute(sql) for row in total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds", "label": 1}, {"snippet_id": 3349, "code": "=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) ->", "label": 0}, {"snippet_id": 492, "code": " @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year", "label": 0}, {"snippet_id": 608, "code": " _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear", "label": 0}, {"snippet_id": 3193, "code": ") total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent", "label": 1}, {"snippet_id": 2112, "code": ".is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self", "label": 0}, {"snippet_id": 2040, "code": " the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see", "label": 0}, {"snippet_id": 1605, "code": " email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"", "label": 0}, {"snippet_id": 2183, "code": " user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE", "label": 0}, {"snippet_id": 1035, "code": "'users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True)", "label": 0}, {"snippet_id": 3923, "code": " m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str", "label": 1}, {"snippet_id": 1432, "code": ".Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db", "label": 0}, {"snippet_id": 2071, "code": ".accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"", "label": 0}, {"snippet_id": 2358, "code": " project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus", "label": 0}, {"snippet_id": 324, "code": " return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _", "label": 0}, {"snippet_id": 32, "code": " OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type", "label": 0}, {"snippet_id": 745, "code": " child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not", "label": 0}, {"snippet_id": 3024, "code": ".mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets user DTO for supplied", "label": 0}, {"snippet_id": 3440, "code": ":param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError", "label": 0}, {"snippet_id": 238, "code": "\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField", "label": 0}, {"snippet_id": 1706, "code": "=UserRole(result.role).name dto.users.append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query", "label": 0}, {"snippet_id": 2496, "code": ".action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int", "label": 0}, {"snippet_id": 1708, "code": ".append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users", "label": 0}, {"snippet_id": 1952, "code": " results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus", "label": 0}, {"snippet_id": 2833, "code": " import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server", "label": 0}, {"snippet_id": 152, "code": "().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True", "label": 0}, {"snippet_id": 2251, "code": " import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server", "label": 0}, {"snippet_id": 3786, "code": " from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID", "label": 0}, {"snippet_id": 287, "code": "=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models", "label": 0}, {"snippet_id": 1715, "code": " @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"", "label": 0}, {"snippet_id": 272, "code": ") comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation", "label": 0}, {"snippet_id": 1912, "code": ".validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id=", "label": 1}, {"snippet_id": 972, "code": ".models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages", "label": 0}, {"snippet_id": 1586, "code": "() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully", "label": 0}, {"snippet_id": 1838, "code": " projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'", "label": 1}, {"snippet_id": 1380, "code": " server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index", "label": 0}, {"snippet_id": 3790, "code": " import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject", "label": 0}, {"snippet_id": 2626, "code": " being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User", "label": 0}, {"snippet_id": 2310, "code": " TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats(project,", "label": 0}, {"snippet_id": 3017, "code": ".mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str,", "label": 0}, {"snippet_id": 313, "code": "=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self", "label": 0}, {"snippet_id": 263, "code": " comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ", "label": 0}, {"snippet_id": 574, "code": ": root_categories } def _convert_parent_ids_to_instances(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for", "label": 0}, {"snippet_id": 3616, "code": " in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level", "label": 0}, {"snippet_id": 1927, "code": " WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY", "label": 1}, {"snippet_id": 610, "code": " first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances", "label": 0}, {"snippet_id": 3706, "code": ".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id:", "label": 0}, {"snippet_id": 472, "code": " one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit", "label": 0}, {"snippet_id": 3459, "code": "{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role", "label": 0}, {"snippet_id": 1480, "code": " last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to", "label": 0}, {"snippet_id": 743, "code": "], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch", "label": 0}]