[{"snippet_id": 2366, "code": " new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif", "label": 0}, {"snippet_id": 173, "code": " db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear", "label": 0}, {"snippet_id": 3212, "code": " stats_dto @staticmethod def update_user_details(user_id: int, user_dto: UserDTO) -> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be", "label": 0}, {"snippet_id": 3819, "code": ".ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License", "label": 0}, {"snippet_id": 34, "code": " import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION", "label": 0}, {"snippet_id": 3187, "code": "'LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine.execute(sql) for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping", "label": 1}, {"snippet_id": 1527, "code": "\"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"", "label": 0}, {"snippet_id": 3493, "code": ".PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level", "label": 0}, {"snippet_id": 3767, "code": " to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level", "label": 0}, {"snippet_id": 3284, "code": " str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager", "label": 0}, {"snippet_id": 2121, "code": ".projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id", "label": 0}, {"snippet_id": 176, "code": ".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch'", "label": 0}, {"snippet_id": 325, "code": "} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits", "label": 0}, {"snippet_id": 3112, "code": "=user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count", "label": 0}, {"snippet_id": 3898, "code": "(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID", "label": 0}, {"snippet_id": 2696, "code": "=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus", "label": 0}, {"snippet_id": 745, "code": " child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not", "label": 0}, {"snippet_id": 509, "code": "'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", "label": 0}, {"snippet_id": 87, "code": "('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym', 'parent__partial_acronym", "label": 0}, {"snippet_id": 2625, "code": " that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers", "label": 0}, {"snippet_id": 3818, "code": "): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey", "label": 0}, {"snippet_id": 593, "code": " return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key=lambda obj: obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects", "label": 0}, {"snippet_id": 2523, "code": " m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not", "label": 1}, {"snippet_id": 261, "code": " verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True,", "label": 0}, {"snippet_id": 3618, "code": " UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id", "label": 0}, {"snippet_id": 2435, "code": " Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter", "label": 0}, {"snippet_id": 728, "code": " .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf", "label": 0}, {"snippet_id": 3081, "code": " user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query", "label": 0}, {"snippet_id": 3600, "code": "\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from", "label": 0}, {"snippet_id": 2279, "code": " UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state", "label": 0}, {"snippet_id": 156, "code": "(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models", "label": 0}, {"snippet_id": 399, "code": ")==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean()", "label": 0}, {"snippet_id": 3175, "code": ".total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"", "label": 0}, {"snippet_id": 1990, "code": "[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the", "label": 0}, {"snippet_id": 2866, "code": " MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server", "label": 0}, {"snippet_id": 1945, "code": ".project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", "label": 1}, {"snippet_id": 1118, "code": ".subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is", "label": 0}, {"snippet_id": 251, "code": " blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True", "label": 0}, {"snippet_id": 3501, "code": " Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"", "label": 0}, {"snippet_id": 1172, "code": " None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO", "label": 0}, {"snippet_id": 2296, "code": " TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project", "label": 0}, {"snippet_id": 1281, "code": " int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for", "label": 0}, {"snippet_id": 477, "code": ".link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch", "label": 0}, {"snippet_id": 2632, "code": ".total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter", "label": 0}, {"snippet_id": 1024, "code": ") message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id", "label": 0}, {"snippet_id": 2071, "code": ".accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"", "label": 0}, {"snippet_id": 3647, "code": "=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED", "label": 0}, {"snippet_id": 1915, "code": ".project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by", "label": 1}, {"snippet_id": 2764, "code": "(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO((", "label": 0}, {"snippet_id": 3811, "code": ".MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default", "label": 0}, {"snippet_id": 1770, "code": ".lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames", "label": 0}, {"snippet_id": 2500, "code": "=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO:", "label": 0}, {"snippet_id": 3162, "code": " time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 2042, "code": "\"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted", "label": 0}, {"snippet_id": 3870, "code": " Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', ", "label": 0}, {"snippet_id": 797, "code": "=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year", "label": 0}, {"snippet_id": 2568, "code": ".validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3]", "label": 1}, {"snippet_id": 1503, "code": ") def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username", "label": 0}, {"snippet_id": 297, "code": "=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to", "label": 0}, {"snippet_id": 1564, "code": "() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id", "label": 0}, {"snippet_id": 923, "code": " get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return", "label": 0}, {"snippet_id": 3022, "code": " else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str, logged_in_user_id: int) -> UserDTO: \"\"\"Gets", "label": 0}, {"snippet_id": 750, "code": "]) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError", "label": 0}, {"snippet_id": 1739, "code": " matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username", "label": 0}, {"snippet_id": 459, "code": " and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes", "label": 0}, {"snippet_id": 1099, "code": "(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message", "label": 0}, {"snippet_id": 2897, "code": ") user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if", "label": 0}, {"snippet_id": 11, "code": " import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import", "label": 0}, {"snippet_id": 908, "code": "{ 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None", "label": 0}, {"snippet_id": 3397, "code": "(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name)", "label": 0}, {"snippet_id": 2784, "code": ".campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all(", "label": 0}, {"snippet_id": 1176, "code": " if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS", "label": 0}, {"snippet_id": 1090, "code": " backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int", "label": 0}, {"snippet_id": 2457, "code": "(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto", "label": 0}, {"snippet_id": 1242, "code": " contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count", "label": 1}, {"snippet_id": 3120, "code": "=user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped", "label": 0}, {"snippet_id": 2110, "code": ".mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped", "label": 0}, {"snippet_id": 136, "code": " group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super(", "label": 0}, {"snippet_id": 3107, "code": "=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE", "label": 0}, {"snippet_id": 3678, "code": ": user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level", "label": 0}, {"snippet_id": 860, "code": "{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id", "label": 0}, {"snippet_id": 403, "code": ".comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert,", "label": 0}, {"snippet_id": 1435, "code": "=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address", "label": 0}, {"snippet_id": 3643, "code": "\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level", "label": 0}, {"snippet_id": 1820, "code": " dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{", "label": 1}, {"snippet_id": 1409, "code": ") username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default", "label": 0}, {"snippet_id": 2654, "code": " Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count", "label": 0}, {"snippet_id": 1492, "code": " def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user", "label": 0}, {"snippet_id": 3498, "code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ", "label": 0}, {"snippet_id": 1381, "code": ".models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True", "label": 0}, {"snippet_id": 2233, "code": ", UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis", "label": 0}, {"snippet_id": 3672, "code": " advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level <", "label": 0}, {"snippet_id": 471, "code": " to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit", "label": 0}, {"snippet_id": 609, "code": "(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear", "label": 0}, {"snippet_id": 3037, "code": "\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user", "label": 0}, {"snippet_id": 1708, "code": ".append(listed_user) dto.pagination=Pagination(results) return dto @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users", "label": 0}, {"snippet_id": 2590, "code": "=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod", "label": 0}, {"snippet_id": 16, "code": " django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion", "label": 0}, {"snippet_id": 2684, "code": " org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area", "label": 0}, {"snippet_id": 3849, "code": " TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True", "label": 0}, {"snippet_id": 1665, "code": "(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for", "label": 0}, {"snippet_id": 305, "code": ".CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"", "label": 0}, {"snippet_id": 1500, "code": " \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query", "label": 0}, {"snippet_id": 1979, "code": ".centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project", "label": 0}, {"snippet_id": 1423, "code": "=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable", "label": 0}, {"snippet_id": 1455, "code": "(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db", "label": 0}, {"snippet_id": 2772, "code": "=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count", "label": 0}, {"snippet_id": 1541, "code": " def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address", "label": 0}, {"snippet_id": 3872, "code": ".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models", "label": 0}, {"snippet_id": 717, "code": "=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type'", "label": 0}, {"snippet_id": 3318, "code": ".role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 3515, "code": ": \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER", "label": 0}, {"snippet_id": 455, "code": " attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if", "label": 0}, {"snippet_id": 1483, "code": " default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit(", "label": 0}, {"snippet_id": 132, "code": " +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager", "label": 0}, {"snippet_id": 1677, "code": ".username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level)", "label": 0}, {"snippet_id": 1190, "code": " message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"", "label": 0}, {"snippet_id": 3392, "code": " if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has", "label": 0}, {"snippet_id": 2796, "code": "\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs", "label": 0}, {"snippet_id": 924, "code": " get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear", "label": 0}, {"snippet_id": 3706, "code": ".notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id:", "label": 0}, {"snippet_id": 3363, "code": "> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id", "label": 0}, {"snippet_id": 3877, "code": " versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname):", "label": 0}, {"snippet_id": 1035, "code": "'users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True)", "label": 0}, {"snippet_id": 1315, "code": " user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit()", "label": 0}, {"snippet_id": 2925, "code": " @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User", "label": 0}, {"snippet_id": 1235, "code": " tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read", "label": 1}, {"snippet_id": 956, "code": " from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models", "label": 0}, {"snippet_id": 2609, "code": " @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto", "label": 0}, {"snippet_id": 2001, "code": "(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\"", "label": 0}, {"snippet_id": 2909, "code": " error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user", "label": 0}, {"snippet_id": 1051, "code": ", index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user", "label": 0}, {"snippet_id": 2676, "code": ".query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag", "label": 0}, {"snippet_id": 2693, "code": " ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db", "label": 0}, {"snippet_id": 2739, "code": ".VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag)", "label": 0}, {"snippet_id": 790, "code": "**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id", "label": 0}, {"snippet_id": 3449, "code": " UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id", "label": 0}, {"snippet_id": 752, "code": ",[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the", "label": 0}, {"snippet_id": 703, "code": " issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list", "label": 0}, {"snippet_id": 3627, "code": ".get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update if they have", "label": 0}, {"snippet_id": 1070, "code": "=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id", "label": 0}, {"snippet_id": 124, "code": " child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ", "label": 0}, {"snippet_id": 2484, "code": ".id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history", "label": 0}, {"snippet_id": 2593, "code": "] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache", "label": 0}, {"snippet_id": 2344, "code": " Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated", "label": 0}, {"snippet_id": 2369, "code": " project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED", "label": 0}, {"snippet_id": 1165, "code": " dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message", "label": 0}, {"snippet_id": 2613, "code": " get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online", "label": 0}, {"snippet_id": 1274, "code": " Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if", "label": 0}, {"snippet_id": 2099, "code": ".id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered", "label": 0}, {"snippet_id": 664, "code": "(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects):", "label": 0}, {"snippet_id": 2096, "code": " user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or", "label": 0}, {"snippet_id": 3429, "code": " \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError", "label": 0}, {"snippet_id": 3251, "code": ".username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache", "label": 0}, {"snippet_id": 1299, "code": ") messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id:", "label": 0}, {"snippet_id": 1521, "code": " def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self", "label": 0}, {"snippet_id": 539, "code": ": filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters) if parents_as_instances: root_ids_by_object_id=_convert_parent_ids_to_instances(root_ids_by_object_id) return", "label": 0}, {"snippet_id": 735, "code": "*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]", "label": 0}, {"snippet_id": 3724, "code": " notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username", "label": 0}, {"snippet_id": 3624, "code": "\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping", "label": 0}, {"snippet_id": 1871, "code": " mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated", "label": 0}, {"snippet_id": 3017, "code": ".mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username(requested_username: str,", "label": 0}, {"snippet_id": 2695, "code": "() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status", "label": 0}, {"snippet_id": 828, "code": "(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list", "label": 0}, {"snippet_id": 2098, "code": ".id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered", "label": 0}, {"snippet_id": 2132, "code": ".tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self", "label": 0}, {"snippet_id": 2104, "code": ".role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped", "label": 0}, {"snippet_id": 2792, "code": ".organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag:", "label": 0}, {"snippet_id": 404, "code": " return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update,", "label": 0}, {"snippet_id": 1427, "code": ".Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer, default=0, nullable=False) tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer", "label": 0}, {"snippet_id": 44, "code": " education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories", "label": 0}, {"snippet_id": 3034, "code": " supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user", "label": 0}, {"snippet_id": 3728, "code": " level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]", "label": 0}, {"snippet_id": 363, "code": "{}[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose", "label": 0}, {"snippet_id": 2086, "code": " def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role)", "label": 0}, {"snippet_id": 884, "code": " group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format", "label": 1}, {"snippet_id": 3469, "code": ".get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role'", "label": 0}, {"snippet_id": 289, "code": ") quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField(", "label": 0}, {"snippet_id": 913, "code": ", 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects", "label": 0}, {"snippet_id": 1312, "code": " def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete", "label": 0}, {"snippet_id": 2679, "code": ".task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count", "label": 0}, {"snippet_id": 2328, "code": " last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user", "label": 0}, {"snippet_id": 578, "code": "): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted", "label": 0}, {"snippet_id": 2902, "code": ") class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message)", "label": 0}, {"snippet_id": 3953, "code": "=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package", "label": 0}, {"snippet_id": 3106, "code": ".count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "label": 0}, {"snippet_id": 3925, "code": "'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return", "label": 1}, {"snippet_id": 1681, "code": " dto=UserSearchDTO() for result in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username", "label": 0}, {"snippet_id": 1220, "code": " query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format", "label": 1}, {"snippet_id": 2064, "code": " of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db", "label": 0}, {"snippet_id": 870, "code": "} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id", "label": 0}, {"snippet_id": 1351, "code": ", UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models", "label": 0}, {"snippet_id": 872, "code": "=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append", "label": 0}, {"snippet_id": 920, "code": " row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch", "label": 0}, {"snippet_id": 550, "code": "(root_ids_by_object_id) return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list", "label": 0}, {"snippet_id": 3908, "code": " class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages", "label": 0}, {"snippet_id": 1241, "code": "''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count", "label": 1}, {"snippet_id": 2289, "code": " @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"", "label": 0}, {"snippet_id": 854, "code": ".model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem", "label": 0}, {"snippet_id": 2661, "code": ".validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status=", "label": 0}, {"snippet_id": 1522, "code": " get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str", "label": 0}, {"snippet_id": 3578, "code": " the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"\"\"", "label": 0}, {"snippet_id": 2634, "code": "() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus", "label": 0}, {"snippet_id": 2065, "code": " specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session", "label": 0}, {"snippet_id": 906, "code": " in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year", "label": 1}, {"snippet_id": 1822, "code": " upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id)", "label": 1}, {"snippet_id": 1991, "code": " mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user", "label": 0}, {"snippet_id": 687, "code": "'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return", "label": 0}, {"snippet_id": 3590, "code": ": \"\"\" Checks if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str", "label": 0}, {"snippet_id": 2770, "code": " unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto", "label": 0}, {"snippet_id": 2800, "code": ").all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created", "label": 0}, {"snippet_id": 997, "code": " VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', ", "label": 0}, {"snippet_id": 177, "code": ".DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank", "label": 0}, {"snippet_id": 1760, "code": ".session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User.username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(), User.username", "label": 0}, {"snippet_id": 3423, "code": " add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to ", "label": 0}, {"snippet_id": 552, "code": " return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", "label": 0}, {"snippet_id": 2942, "code": " -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id", "label": 0}, {"snippet_id": 1794, "code": " project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append", "label": 0}, {"snippet_id": 2438, "code": " a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id", "label": 0}, {"snippet_id": 2857, "code": " TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError", "label": 0}, {"snippet_id": 1345, "code": " MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis", "label": 0}, {"snippet_id": 1726, "code": " filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if", "label": 0}, {"snippet_id": 318, "code": " order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child", "label": 0}, {"snippet_id": 2043, "code": "\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted", "label": 0}, {"snippet_id": 3099, "code": "( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped", "label": 0}, {"snippet_id": 3148, "code": "=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql) for", "label": 1}, {"snippet_id": 3463, "code": " are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise", "label": 0}, {"snippet_id": 3290, "code": "\"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is", "label": 0}, {"snippet_id": 3752, "code": " level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"", "label": 0}, {"snippet_id": 965, "code": ".models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): ", "label": 0}, {"snippet_id": 2276, "code": ".services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int", "label": 0}, {"snippet_id": 2581, "code": " contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else", "label": 0}, {"snippet_id": 460, "code": ".child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE", "label": 0}, {"snippet_id": 562, "code": ".values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category': root_categories", "label": 0}, {"snippet_id": 1536, "code": ".query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"", "label": 0}, {"snippet_id": 709, "code": "(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False", "label": 0}, {"snippet_id": 2340, "code": " project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped", "label": 0}, {"snippet_id": 3539, "code": " INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\"", "label": 0}, {"snippet_id": 3676, "code": " MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count ", "label": 0}, {"snippet_id": 3844, "code": "=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject):", "label": 0}, {"snippet_id": 858, "code": "(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids", "label": 0}, {"snippet_id": 265, "code": ".TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment", "label": 0}, {"snippet_id": 3314, "code": ".get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at", "label": 0}, {"snippet_id": 1894, "code": "(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY", "label": 1}, {"snippet_id": 2977, "code": " user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level", "label": 0}, {"snippet_id": 1623, "code": " the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User", "label": 0}, {"snippet_id": 3201, "code": ": stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod def update_user_details(user_id: int, user_dto", "label": 0}, {"snippet_id": 1466, "code": ".Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp", "label": 0}, {"snippet_id": 2768, "code": "(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append", "label": 0}, {"snippet_id": 525, "code": "'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects", "label": 0}, {"snippet_id": 1963, "code": "=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads", "label": 0}, {"snippet_id": 3572, "code": ": \"\"\" Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id", "label": 0}, {"snippet_id": 2051, "code": "(self, license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True", "label": 0}, {"snippet_id": 1891, "code": ".validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t", "label": 1}, {"snippet_id": 1463, "code": ".Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp) last_validation_date=db", "label": 0}, {"snippet_id": 2790, "code": ".session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO", "label": 0}, {"snippet_id": 3934, "code": " LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names", "label": 1}, {"snippet_id": 1784, "code": " raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username", "label": 0}, {"snippet_id": 2950, "code": " user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user", "label": 0}, {"snippet_id": 905, "code": "(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ", "label": 1}, {"snippet_id": 8, "code": " connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _", "label": 0}, {"snippet_id": 209, "code": ", null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name", "label": 0}, {"snippet_id": 1367, "code": ".postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"", "label": 0}, {"snippet_id": 795, "code": "=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or", "label": 0}, {"snippet_id": 1497, "code": " current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"", "label": 0}, {"snippet_id": 3439, "code": " the role :param username: Username of user the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError", "label": 0}, {"snippet_id": 630, "code": " for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance", "label": 0}, {"snippet_id": 3630, "code": ".id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level", "label": 0}, {"snippet_id": 1881, "code": ".validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count", "label": 0}, {"snippet_id": 259, "code": "( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank", "label": 0}, {"snippet_id": 302, "code": "') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__", "label": 0}, {"snippet_id": 2756, "code": ".campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +", "label": 0}, {"snippet_id": 2890, "code": ".template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers", "label": 0}, {"snippet_id": 1089, "code": "[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls,", "label": 0}, {"snippet_id": 955, "code": " MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from", "label": 0}, {"snippet_id": 79, "code": ".models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch", "label": 0}, {"snippet_id": 2273, "code": ".services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change", "label": 0}, {"snippet_id": 1782, "code": "==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username", "label": 0}, {"snippet_id": 1207, "code": "\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where", "label": 1}, {"snippet_id": 3885, "code": ", 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self.tags.create", "label": 0}, {"snippet_id": 315, "code": ") ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{", "label": 0}, {"snippet_id": 3151, "code": ") FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0", "label": 1}, {"snippet_id": 3534, "code": " values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert", "label": 0}, {"snippet_id": 1970, "code": "(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale", "label": 0}, {"snippet_id": 2923, "code": " class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str)", "label": 0}, {"snippet_id": 934, "code": " GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child", "label": 0}, {"snippet_id": 2209, "code": "=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self", "label": 0}, {"snippet_id": 1515, "code": " the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User", "label": 0}, {"snippet_id": 152, "code": "().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True", "label": 0}, {"snippet_id": 2003, "code": "): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "label": 0}, {"snippet_id": 2533, "code": " from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by", "label": 1}, {"snippet_id": 2487, "code": ".task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination", "label": 0}, {"snippet_id": 3471, "code": ") admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole", "label": 0}, {"snippet_id": 2370, "code": "=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated", "label": 0}, {"snippet_id": 3608, "code": " -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService", "label": 0}, {"snippet_id": 3121, "code": " TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto", "label": 0}, {"snippet_id": 1602, "code": ": \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on", "label": 0}, {"snippet_id": 286, "code": "=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_('Quadrimester derogation') ) link_type", "label": 0}, {"snippet_id": 742, "code": "'child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf,", "label": 0}, {"snippet_id": 451, "code": " is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included", "label": 0}, {"snippet_id": 2807, "code": "(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count))", "label": 0}, {"snippet_id": 388, "code": ", _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order", "label": 0}, {"snippet_id": 3359, "code": " True return False @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return", "label": 0}, {"snippet_id": 762, "code": " args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf", "label": 0}, {"snippet_id": 1225, "code": " contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine", "label": 1}, {"snippet_id": 62, "code": ", quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear, volume_total_verbose from base.models.learning_unit_year import LearningUnitYear", "label": 0}, {"snippet_id": 2149, "code": " user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION", "label": 0}, {"snippet_id": 2334, "code": ".upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod def _update_tasks_stats(project: Project, user: User, last_state: TaskStatus, new_state: TaskStatus, action", "label": 0}, {"snippet_id": 3038, "code": " requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService.check_and_update_mapper_level(requested_user.id) return requested_user", "label": 0}, {"snippet_id": 1234, "code": " from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as", "label": 1}, {"snippet_id": 2307, "code": "[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id) StatsService._update_tasks_stats", "label": 0}, {"snippet_id": 3049, "code": " UserService.check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO", "label": 0}, {"snippet_id": 3376, "code": " if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise", "label": 0}, {"snippet_id": 3564, "code": "=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact user has accepted license terms ", "label": 0}, {"snippet_id": 2189, "code": "=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db", "label": 1}, {"snippet_id": 3701, "code": "=MappingLevel.INTERMEDIATE.value UserService.notify_level_upgrade(user_id, user.username, 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return", "label": 0}, {"snippet_id": 2669, "code": ".value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func", "label": 0}, {"snippet_id": 1845, "code": " result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql)", "label": 1}, {"snippet_id": 2218, "code": "=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username==logged_in_username: user_dto.email_address=self.email_address user_dto.is_email_verified=self.is_email_verified return", "label": 0}, {"snippet_id": 3631, "code": " return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level", "label": 0}, {"snippet_id": 1684, "code": " in results.items: listed_user=ListedUser() listed_user.id=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result", "label": 0}, {"snippet_id": 877, "code": " group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql", "label": 0}, {"snippet_id": 3933, "code": ".name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names", "label": 1}, {"snippet_id": 3855, "code": "('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class", "label": 0}, {"snippet_id": 2872, "code": ".users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache", "label": 0}, {"snippet_id": 2068, "code": "(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self,", "label": 0}, {"snippet_id": 1840, "code": "}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id", "label": 1}, {"snippet_id": 1720, "code": " all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for", "label": 0}, {"snippet_id": 364, "code": "[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose", "label": 0}, {"snippet_id": 2645, "code": "() dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task", "label": 0}, {"snippet_id": 1864, "code": " get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson", "label": 0}, {"snippet_id": 1606, "code": " verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"\" self", "label": 0}, {"snippet_id": 1632, "code": "\"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level", "label": 0}, {"snippet_id": 153, "code": ").filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True", "label": 0}, {"snippet_id": 3196, "code": " in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return", "label": 0}, {"snippet_id": 2249, "code": ".models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp", "label": 0}, {"snippet_id": 283, "code": " own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name=_(", "label": 0}, {"snippet_id": 495, "code": "): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year", "label": 0}, {"snippet_id": 162, "code": " GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear", "label": 0}, {"snippet_id": 1865, "code": " preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects", "label": 0}, {"snippet_id": 244, "code": " verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition')", "label": 0}, {"snippet_id": 3410, "code": " validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str)", "label": 0}, {"snippet_id": 2832, "code": ".user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message", "label": 0}, {"snippet_id": 3225, "code": " add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto", "label": 0}, {"snippet_id": 2930, "code": " User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None:", "label": 0}, {"snippet_id": 1260, "code": " get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) ", "label": 0}, {"snippet_id": 1263, "code": " int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO", "label": 0}, {"snippet_id": 2138, "code": ".twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0 user_dto.time_spent_mapping=0 user_dto", "label": 0}, {"snippet_id": 1001, "code": ".Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column", "label": 0}, {"snippet_id": 1670, "code": " base=base.filter(User.role==UserRole[query.role.upper()].value) results=base.order_by(User.username).paginate(query.page, 20, True) dto=UserSearchDTO() for result in results.items: listed_user=ListedUser(", "label": 0}, {"snippet_id": 1825, "code": " project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql", "label": 1}, {"snippet_id": 2752, "code": ".campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append", "label": 0}, {"snippet_id": 3458, "code": "'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role", "label": 0}, {"snippet_id": 523, "code": "(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False)", "label": 0}, {"snippet_id": 278, "code": "=_(\"english comment\"), ) own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank", "label": 0}, {"snippet_id": 787, "code": "{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id", "label": 0}, {"snippet_id": 193, "code": " related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE,", "label": 0}, {"snippet_id": 3219, "code": "> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False", "label": 0}, {"snippet_id": 3286, "code": ": int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id", "label": 0}, {"snippet_id": 763, "code": "[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else", "label": 0}, {"snippet_id": 3059, "code": "\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str", "label": 0}, {"snippet_id": 1175, "code": "=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES", "label": 0}, {"snippet_id": 3577, "code": " the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int): \"", "label": 0}, {"snippet_id": 1376, "code": ".statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__", "label": 0}, {"snippet_id": 50, "code": " import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type", "label": 0}, {"snippet_id": 3884, "code": "[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname) self", "label": 0}, {"snippet_id": 2671, "code": ".VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project", "label": 0}, {"snippet_id": 3833, "code": ") download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base", "label": 0}, {"snippet_id": 75, "code": " volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=", "label": 0}, {"snippet_id": 2236, "code": " TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from", "label": 0}, {"snippet_id": 864, "code": "[root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year", "label": 0}, {"snippet_id": 3451, "code": ": requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id", "label": 0}, {"snippet_id": 1819, "code": " return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> ", "label": 1}, {"snippet_id": 348, "code": "=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual')))", "label": 0}, {"snippet_id": 1029, "code": " from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'", "label": 0}, {"snippet_id": 1967, "code": "[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale", "label": 0}, {"snippet_id": 2079, "code": " \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO", "label": 0}, {"snippet_id": 2471, "code": "==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text", "label": 0}, {"snippet_id": 2403, "code": " last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated ", "label": 0}, {"snippet_id": 1902, "code": ") validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id", "label": 1}, {"snippet_id": 13, "code": " F, Case, When from django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel", "label": 0}, {"snippet_id": 3078, "code": " get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all", "label": 0}, {"snippet_id": 2389, "code": " user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project", "label": 0}, {"snippet_id": 1258, "code": " get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id", "label": 0}, {"snippet_id": 321, "code": "=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or", "label": 0}, {"snippet_id": 2543, "code": " group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by", "label": 0}, {"snippet_id": 3455, "code": "] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if", "label": 0}, {"snippet_id": 3675, "code": "!= MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count", "label": 0}, {"snippet_id": 2247, "code": " from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import", "label": 0}, {"snippet_id": 1330, "code": "=user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB \"\"\" db.session.delete(self) db.session.commit()", "label": 0}, {"snippet_id": 3792, "code": " vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package", "label": 0}, {"snippet_id": 682, "code": "(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory' data", "label": 0}, {"snippet_id": 1036, "code": ") to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type", "label": 0}, {"snippet_id": 1407, "code": "=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db", "label": 0}, {"snippet_id": 3599, "code": " license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the", "label": 0}, {"snippet_id": 3929, "code": "'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag", "label": 1}, {"snippet_id": 2801, "code": ") no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created", "label": 0}, {"snippet_id": 2594, "code": " user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib) return contrib_dto @staticmethod @cached(homepage_stats_cache)", "label": 0}, {"snippet_id": 3413, "code": "\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role", "label": 0}, {"snippet_id": 815, "code": "'] if filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set", "label": 0}, {"snippet_id": 1489, "code": "=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int", "label": 0}, {"snippet_id": 2719, "code": "['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status", "label": 0}, {"snippet_id": 3609, "code": " UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user", "label": 0}, {"snippet_id": 3128, "code": ").count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 1101, "code": ".project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message", "label": 0}, {"snippet_id": 2350, "code": " TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project", "label": 0}, {"snippet_id": 665, "code": " filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if", "label": 0}, {"snippet_id": 503, "code": " return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q", "label": 0}, {"snippet_id": 1758, "code": " results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant\")) \\ .filter(User.username.ilike(user_filter.lower() +'%')) \\ .order_by(desc(\"participant\").nullslast(),", "label": 0}, {"snippet_id": 2952, "code": " def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def", "label": 0}, {"snippet_id": 1950, "code": " results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project", "label": 1}, {"snippet_id": 393, "code": " verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert", "label": 0}, {"snippet_id": 3061, "code": " for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService", "label": 0}, {"snippet_id": 146, "code": "\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class", "label": 0}, {"snippet_id": 1405, "code": "(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False", "label": 0}, {"snippet_id": 1310, "code": " @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids", "label": 0}, {"snippet_id": 263, "code": " comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ", "label": 0}, {"snippet_id": 983, "code": " MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db", "label": 0}, {"snippet_id": 149, "code": " get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models", "label": 0}, {"snippet_id": 2014, "code": " set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate", "label": 0}, {"snippet_id": 2725, "code": ")), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result", "label": 0}, {"snippet_id": 1936, "code": "={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound", "label": 1}, {"snippet_id": 3125, "code": ".distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping", "label": 0}, {"snippet_id": 529, "code": "=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters()", "label": 0}, {"snippet_id": 3006, "code": ".ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create", "label": 0}, {"snippet_id": 1014, "code": ",['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'", "label": 0}, {"snippet_id": 82, "code": " from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order", "label": 0}, {"snippet_id": 583, "code": "(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return{ obj_id: sorted([map_instance_by_id[parent_id] for parent_id in parents], key", "label": 0}, {"snippet_id": 3816, "code": ".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None", "label": 0}, {"snippet_id": 1591, "code": ".validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit()", "label": 0}, {"snippet_id": 484, "code": "\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return", "label": 0}, {"snippet_id": 1128, "code": ".to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) ", "label": 0}, {"snippet_id": 3804, "code": "='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True)", "label": 0}, {"snippet_id": 185, "code": " on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear", "label": 0}, {"snippet_id": 2813, "code": " else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO(('Untagged', no_org_count)) dto.organizations.append(no_org_proj) dto.total_organizations=unique_orgs return", "label": 0}, {"snippet_id": 3138, "code": ".projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history", "label": 0}, {"snippet_id": 705, "code": " objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year", "label": 0}, {"snippet_id": 788, "code": "{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch", "label": 0}, {"snippet_id": 3605, "code": " @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService", "label": 0}, {"snippet_id": 1062, "code": " date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id", "label": 0}, {"snippet_id": 492, "code": " @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year", "label": 0}, {"snippet_id": 1396, "code": "\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default", "label": 0}, {"snippet_id": 2184, "code": ".time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action", "label": 0}, {"snippet_id": 2465, "code": "() ).paginate(page, 10, True) if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item", "label": 0}, {"snippet_id": 3842, "code": "('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject", "label": 0}, {"snippet_id": 3548, "code": " set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return", "label": 0}, {"snippet_id": 1098, "code": "==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls", "label": 0}, {"snippet_id": 2429, "code": " def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action,", "label": 0}, {"snippet_id": 1530, "code": " the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username", "label": 0}, {"snippet_id": 470, "code": " an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a", "label": 0}, {"snippet_id": 654, "code": "=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id", "label": 0}, {"snippet_id": 605, "code": " root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must", "label": 0}, {"snippet_id": 3865, "code": "=True) class Package(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True", "label": 0}, {"snippet_id": 497, "code": ".child_branch or self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs", "label": 0}, {"snippet_id": 3951, "code": " sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True", "label": 0}, {"snippet_id": 2555, "code": " users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute", "label": 1}, {"snippet_id": 2868, "code": ".postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service", "label": 0}, {"snippet_id": 2588, "code": "[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions", "label": 0}, {"snippet_id": 3264, "code": "(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users", "label": 0}, {"snippet_id": 738, "code": " in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result", "label": 0}, {"snippet_id": 2795, "code": "))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs", "label": 0}, {"snippet_id": 3388, "code": " Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale: str): ", "label": 0}, {"snippet_id": 2083, "code": "(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto", "label": 0}, {"snippet_id": 899, "code": " as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id", "label": 1}, {"snippet_id": 3744, "code": ", level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", "label": 0}, {"snippet_id": 419, "code": ": self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear", "label": 0}, {"snippet_id": 138, "code": " on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q", "label": 0}, {"snippet_id": 698, "code": " too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys", "label": 0}, {"snippet_id": 3791, "code": " import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin", "label": 0}, {"snippet_id": 1833, "code": " where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped", "label": 1}, {"snippet_id": 2093, "code": " in scope \"\"\" user_dto=UserDTO() user_dto.id=self.id user_dto.username=self.username user_dto.role=UserRole(self.role).name user_dto.mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert", "label": 0}, {"snippet_id": 2052, "code": " license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return", "label": 0}, {"snippet_id": 1693, "code": "=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination", "label": 0}, {"snippet_id": 3079, "code": "(username: str): user=UserService.get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped", "label": 0}, {"snippet_id": 1640, "code": ".query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter", "label": 0}, {"snippet_id": 3555, "code": " expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "label": 0}, {"snippet_id": 3723, "code": " def notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]',", "label": 0}, {"snippet_id": 513, "code": "['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs:", "label": 0}, {"snippet_id": 498, "code": " self.child_leaf def is_deletable(self): if self.child: return False return True def search(**kwargs): queryset=GroupElementYear.objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year']", "label": 0}, {"snippet_id": 3164, "code": " total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql", "label": 0}, {"snippet_id": 2392, "code": " if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action", "label": 0}, {"snippet_id": 2206, "code": " total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent", "label": 0}, {"snippet_id": 332, "code": " \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year", "label": 0}, {"snippet_id": 806, "code": " group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year['parent'] if filters and _match_any_filters(group_elem_year, filters):", "label": 0}, {"snippet_id": 802, "code": "(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents: parent_id=group_elem_year[", "label": 0}, {"snippet_id": 3293, "code": " users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager", "label": 0}, {"snippet_id": 3733, "code": " username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id", "label": 0}, {"snippet_id": 1971, "code": "(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale,", "label": 0}, {"snippet_id": 2826, "code": " reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO, UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server", "label": 0}, {"snippet_id": 3297, "code": "\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id)", "label": 0}, {"snippet_id": 2974, "code": " username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user=User() new_user.id=osm_id new_user", "label": 0}, {"snippet_id": 2880, "code": ".services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize", "label": 0}, {"snippet_id": 1294, "code": ")==0: raise NotFound() messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids", "label": 0}, {"snippet_id": 1028, "code": ".Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db.ForeignKey(", "label": 0}, {"snippet_id": 384, "code": ".relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english", "label": 0}, {"snippet_id": 2203, "code": ".id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping", "label": 1}, {"snippet_id": 220, "code": "=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\")", "label": 0}, {"snippet_id": 3110, "code": " TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory", "label": 0}, {"snippet_id": 1119, "code": "=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None", "label": 0}, {"snippet_id": 2843, "code": " UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import", "label": 0}, {"snippet_id": 1842, "code": "(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db", "label": 1}, {"snippet_id": 3328, "code": " int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if", "label": 0}, {"snippet_id": 2665, "code": ".task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value) ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session", "label": 0}, {"snippet_id": 358, "code": "'type', 'total') return \"{}{}[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title", "label": 0}, {"snippet_id": 1539, "code": "=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\"", "label": 0}, {"snippet_id": 1222, "code": "'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id", "label": 1}, {"snippet_id": 739, "code": "=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch", "label": 0}, {"snippet_id": 2769, "code": " unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj", "label": 0}, {"snippet_id": 614, "code": " obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in", "label": 0}, {"snippet_id": 3852, "code": ".ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package(vdmbase", "label": 0}, {"snippet_id": 1398, "code": ".Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0,", "label": 0}, {"snippet_id": 374, "code": " self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"", "label": 0}, {"snippet_id": 306, "code": " max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format", "label": 0}, {"snippet_id": 2185, "code": "=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id", "label": 0}, {"snippet_id": 2514, "code": " Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped", "label": 0}, {"snippet_id": 3526, "code": "[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level", "label": 0}, {"snippet_id": 3065, "code": " requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username", "label": 0}, {"snippet_id": 798, "code": "): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in", "label": 0}, {"snippet_id": 1978, "code": ".tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto", "label": 0}, {"snippet_id": 429, "code": " clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise", "label": 0}, {"snippet_id": 1390, "code": " associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String,", "label": 0}, {"snippet_id": 83, "code": ".models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[", "label": 0}, {"snippet_id": 2548, "code": " (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username", "label": 0}, {"snippet_id": 2750, "code": ".campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag:", "label": 0}, {"snippet_id": 746, "code": "=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args)", "label": 0}, {"snippet_id": 1304, "code": " in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages", "label": 0}, {"snippet_id": 1869, "code": "\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id)", "label": 0}, {"snippet_id": 2748, "code": ".session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO", "label": 0}, {"snippet_id": 3474, "code": ") if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role", "label": 0}, {"snippet_id": 2188, "code": "=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time", "label": 1}, {"snippet_id": 667, "code": " child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj,", "label": 0}, {"snippet_id": 1259, "code": " get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int", "label": 0}, {"snippet_id": 327, "code": " @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear", "label": 0}, {"snippet_id": 1525, "code": ": \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username", "label": 0}, {"snippet_id": 2029, "code": " accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit", "label": 0}, {"snippet_id": 2397, "code": ".tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED", "label": 0}, {"snippet_id": 2037, "code": " in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int):", "label": 0}, {"snippet_id": 1265, "code": " \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\"", "label": 0}, {"snippet_id": 1972, "code": "[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row", "label": 0}, {"snippet_id": 1306, "code": " user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"", "label": 0}, {"snippet_id": 3915, "code": ".UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self", "label": 0}, {"snippet_id": 3840, "code": "=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision", "label": 0}, {"snippet_id": 2241, "code": ", OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User", "label": 0}, {"snippet_id": 889, "code": " return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids", "label": 1}, {"snippet_id": 367, "code": "{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components", "label": 0}, {"snippet_id": 606, "code": ".items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be", "label": 0}, {"snippet_id": 2508, "code": " activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped", "label": 0}, {"snippet_id": 3058, "code": "\"\"Gets user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str", "label": 0}, {"snippet_id": 3732, "code": ".txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id", "label": 0}, {"snippet_id": 55, "code": " EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base.models.learning_component_year import LearningComponentYear", "label": 0}, {"snippet_id": 1901, "code": ".project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER", "label": 1}, {"snippet_id": 3198, "code": ": total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod", "label": 0}, {"snippet_id": 2129, "code": ".tasks_mapped user_dto.tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self", "label": 0}, {"snippet_id": 2860, "code": ".models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging", "label": 0}, {"snippet_id": 1558, "code": " details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto", "label": 0}, {"snippet_id": 478, "code": "=LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self", "label": 0}, {"snippet_id": 3156, "code": "={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time", "label": 1}, {"snippet_id": 1791, "code": "(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant)", "label": 0}, {"snippet_id": 725, "code": "(child_branch__isnull=False)) .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year", "label": 0}, {"snippet_id": 3450, "code": "\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id", "label": 0}, {"snippet_id": 2491, "code": " history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto", "label": 0}, {"snippet_id": 1933, "code": "}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount", "label": 1}, {"snippet_id": 2786, "code": "(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count=db.session.query(Project.organisation_tag, func.count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count", "label": 0}, {"snippet_id": 2020, "code": "\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license ", "label": 0}, {"snippet_id": 1810, "code": "(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects", "label": 0}, {"snippet_id": 903, "code": ".format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id': row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], }", "label": 1}, {"snippet_id": 3909, "code": " Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', ", "label": 0}, {"snippet_id": 3629, "code": "(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id: int): \"\"\" Check users mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 2028, "code": " def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db", "label": 0}, {"snippet_id": 1072, "code": ".relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages", "label": 0}, {"snippet_id": 1216, "code": " all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and", "label": 1}, {"snippet_id": 3904, "code": ".create(tag=tag) class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 0}, {"snippet_id": 228, "code": " verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), )", "label": 0}, {"snippet_id": 1180, "code": ".from_user.username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message", "label": 0}, {"snippet_id": 559, "code": "\\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category", "label": 0}, {"snippet_id": 1851, "code": "=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO:", "label": 1}, {"snippet_id": 37, "code": ".settings.base import LANGUAGE_CODE_EN from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year", "label": 0}, {"snippet_id": 1126, "code": ".from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def", "label": 0}, {"snippet_id": 2517, "code": "\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by", "label": 0}, {"snippet_id": 3108, "code": ".filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct", "label": 0}, {"snippet_id": 1727, "code": "(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will", "label": 0}, {"snippet_id": 3066, "code": "=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService.get_user_by_username(username) stats_dto", "label": 0}, {"snippet_id": 1322, "code": " the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from", "label": 0}, {"snippet_id": 2005, "code": "\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "label": 0}, {"snippet_id": 757, "code": " def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).')", "label": 0}, {"snippet_id": 2304, "code": " \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService.get_user_by_id(user_id", "label": 0}, {"snippet_id": 1415, "code": "(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default=1, nullable=False) tasks_mapped=db.Column(db.Integer", "label": 0}, {"snippet_id": 3938, "code": "\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 307, "code": " choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent", "label": 0}, {"snippet_id": 1403, "code": " validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer", "label": 0}, {"snippet_id": 1129, "code": "=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO", "label": 0}, {"snippet_id": 3882, "code": "=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try: tag=self.revision.model.tags.get(tagname) except: tag=self.transaction.model.tags.create(name=tagname", "label": 0}, {"snippet_id": 3218, "code": "-> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False", "label": 0}]