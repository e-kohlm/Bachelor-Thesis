[{"snippet_id": 408, "code": " ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save(force_insert, force_update, using, update_fields) def clean", "label": 0}, {"snippet_id": 3278, "code": "\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username", "label": 0}, {"snippet_id": 2901, "code": ", ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error", "label": 0}, {"snippet_id": 2347, "code": ", last_state: TaskStatus, new_state: TaskStatus, action='change'): if new_state==TaskStatus.MAPPED: project.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state", "label": 0}, {"snippet_id": 3643, "code": "\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level", "label": 0}, {"snippet_id": 2177, "code": " total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"", "label": 0}, {"snippet_id": 3560, "code": ":raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves the fact", "label": 0}, {"snippet_id": 1829, "code": " if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users", "label": 1}, {"snippet_id": 3164, "code": " total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql", "label": 0}, {"snippet_id": 244, "code": " verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition')", "label": 0}, {"snippet_id": 1639, "code": "=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username:", "label": 0}, {"snippet_id": 1085, "code": ".relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages", "label": 0}, {"snippet_id": 998, "code": " INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id',", "label": 0}, {"snippet_id": 1445, "code": ".Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db.Boolean,", "label": 0}, {"snippet_id": 3399, "code": " get_mapped_projects(user_name: str, preferred_locale: str): \"\"\" Gets all projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects", "label": 0}, {"snippet_id": 3050, "code": ".check_and_update_mapper_level(requested_user.id) return requested_user.as_dto(logged_in_user.username) @staticmethod def get_user_dto_by_id(requested_user: int) -> UserDTO: \"\"\"Gets user DTO for supplied", "label": 0}, {"snippet_id": 1715, "code": " @staticmethod def get_all_users_not_pagainated(): \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"", "label": 0}, {"snippet_id": 2772, "code": "=campaign_stats.projects_created if no_campaign_count: no_campaign_proj=CampaignStatsDTO(('Untagged', no_campaign_count)) dto.campaigns.append(no_campaign_proj) dto.total_campaigns=unique_campaigns org_proj_count", "label": 0}, {"snippet_id": 640, "code": " def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year", "label": 0}, {"snippet_id": 1334, "code": " import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO, Pagination, ", "label": 1}, {"snippet_id": 95, "code": "', 'parent__acronym', 'parent__partial_acronym' ] list_filter=('is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE", "label": 0}, {"snippet_id": 2953, "code": " update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user", "label": 0}, {"snippet_id": 3180, "code": ".time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(user.id) total_mapping_time=db.engine.execute(sql", "label": 1}, {"snippet_id": 1817, "code": "(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped", "label": 1}, {"snippet_id": 1810, "code": "(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Adds projects to mapped_projects", "label": 0}, {"snippet_id": 1196, "code": " PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors", "label": 0}, {"snippet_id": 3146, "code": ".time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute", "label": 1}, {"snippet_id": 848, "code": "(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql", "label": 0}, {"snippet_id": 1525, "code": ": \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username", "label": 0}, {"snippet_id": 614, "code": " obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in", "label": 0}, {"snippet_id": 337, "code": ".relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case", "label": 0}, {"snippet_id": 257, "code": " access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models", "label": 0}, {"snippet_id": 861, "code": ".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id", "label": 0}, {"snippet_id": 3653, "code": ".ADVANCED: return intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] try: osm_details=OSMService.get_osm_details_for_user(user_id)", "label": 0}, {"snippet_id": 1329, "code": "(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB \"\"\" db.session.delete(self) db", "label": 0}, {"snippet_id": 1976, "code": "] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]) project_info=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name", "label": 0}, {"snippet_id": 2257, "code": " server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import timestamp, NotFound from server.services.project_service import ProjectService from server.services.users", "label": 0}, {"snippet_id": 3256, "code": "=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO", "label": 0}, {"snippet_id": 3386, "code": " int): \"\"\" Add project to mapped projects if it doesn't exist, otherwise return \"\"\" User.upsert_mapped_projects(user_id, project_id) @staticmethod def get_mapped_projects(user_name: str, preferred_locale", "label": 0}, {"snippet_id": 3094, "code": "!='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory", "label": 0}, {"snippet_id": 3490, "code": " requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role", "label": 0}, {"snippet_id": 3218, "code": "-> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False", "label": 0}, {"snippet_id": 3538, "code": " INTERMEDIATE, ADVANCED') user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User:", "label": 0}, {"snippet_id": 1797, "code": " not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto", "label": 0}, {"snippet_id": 3940, "code": " text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 2293, "code": ", last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus", "label": 0}, {"snippet_id": 3504, "code": " Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping", "label": 0}, {"snippet_id": 609, "code": "(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear", "label": 0}, {"snippet_id": 1784, "code": " raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username", "label": 0}, {"snippet_id": 3610, "code": "\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user", "label": 0}, {"snippet_id": 3416, "code": ".get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID", "label": 0}, {"snippet_id": 2578, "code": " NotFound() contrib_dto=ProjectContributionsDTO() for row in results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row", "label": 0}, {"snippet_id": 3602, "code": ".has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises", "label": 0}, {"snippet_id": 3920, "code": "(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%", "label": 1}, {"snippet_id": 1550, "code": ".session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id", "label": 0}, {"snippet_id": 1304, "code": " in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages", "label": 0}, {"snippet_id": 3251, "code": ".username) user.set_email_verified_status(is_verified=False) verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache", "label": 0}, {"snippet_id": 2651, "code": ".filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value", "label": 0}, {"snippet_id": 3554, "code": " disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "label": 0}, {"snippet_id": 1114, "code": "\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id", "label": 0}, {"snippet_id": 173, "code": " db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear", "label": 0}, {"snippet_id": 3082, "code": ".get_user_by_username(username) stats_dto=UserStatsDTO() actions=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory", "label": 0}, {"snippet_id": 1003, "code": " individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', 'project_id'],['tasks.id', 'tasks.project_id']), ) id=db.Column(db.Integer, primary_key", "label": 0}, {"snippet_id": 2610, "code": "(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project", "label": 0}, {"snippet_id": 1991, "code": " mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user", "label": 0}, {"snippet_id": 2420, "code": "=TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod def get_latest_activity(project_id: int, page: int) -> ProjectActivityDTO: \"\"", "label": 0}, {"snippet_id": 630, "code": " for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance", "label": 0}, {"snippet_id": 147, "code": "(models.Manager): def get_queryset(self): return super().get_queryset().filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel", "label": 0}, {"snippet_id": 3349, "code": "=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) ->", "label": 0}, {"snippet_id": 780, "code": " branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements(group_elements_by_child_id, filters", "label": 0}, {"snippet_id": 2589, "code": "=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else 0 contrib_dto.user_contributions.append(user_contrib)", "label": 0}, {"snippet_id": 3774, "code": "\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated % 50==0: print(f'{users_updated", "label": 0}, {"snippet_id": 3519, "code": " level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED'", "label": 0}, {"snippet_id": 880, "code": " queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql(root_ids): with connection.cursor(", "label": 0}, {"snippet_id": 3878, "code": " versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag', 'PackageTag')] def add_tag_by_name(self, tagname): try:", "label": 0}, {"snippet_id": 1780, "code": " True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant", "label": 0}, {"snippet_id": 2406, "code": ".BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus", "label": 0}, {"snippet_id": 2673, "code": " ) ).count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag", "label": 0}, {"snippet_id": 951, "code": ".models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server", "label": 0}, {"snippet_id": 2706, "code": " where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql", "label": 0}, {"snippet_id": 3849, "code": " TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True", "label": 0}, {"snippet_id": 1937, "code": " GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound", "label": 1}, {"snippet_id": 1101, "code": ".project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message", "label": 0}, {"snippet_id": 2750, "code": ".campaign_tag, func.count(Project.campaign_tag))\\ .group_by(Project.campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag:", "label": 0}, {"snippet_id": 1151, "code": "\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type", "label": 0}, {"snippet_id": 1777, "code": " User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant", "label": 0}, {"snippet_id": 421, "code": " super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear with a child", "label": 0}, {"snippet_id": 365, "code": "({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose", "label": 0}, {"snippet_id": 641, "code": " _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters", "label": 0}, {"snippet_id": 1619, "code": "\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users ", "label": 0}, {"snippet_id": 2076, "code": " False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope ", "label": 0}, {"snippet_id": 2221, "code": " cachetools import TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO,", "label": 0}, {"snippet_id": 197, "code": " on_delete=models.CASCADE, ) child_leaf=models.ForeignKey( LearningUnitYear, related_name='child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True", "label": 0}, {"snippet_id": 648, "code": "(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects[0], LearningUnitYear): return", "label": 0}, {"snippet_id": 2950, "code": " user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user", "label": 0}, {"snippet_id": 674, "code": "(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The", "label": 0}, {"snippet_id": 1253, "code": "\"\"\" self.read=True db.session.commit() @staticmethod def get_unread_message_count(user_id: int): \"\"\" Get count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message", "label": 0}, {"snippet_id": 1090, "code": " backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int", "label": 0}, {"snippet_id": 1622, "code": " disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session", "label": 0}, {"snippet_id": 3011, "code": "< changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user @staticmethod def get_user_dto_by_username", "label": 0}, {"snippet_id": 2361, "code": " elif new_state==TaskStatus.VALIDATED: project.tasks_validated +=1 elif new_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery +=1 if action=='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped", "label": 0}, {"snippet_id": 2510, "code": "(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select", "label": 0}, {"snippet_id": 955, "code": " MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis.utils import timestamp from", "label": 0}, {"snippet_id": 364, "code": "[{}]({}{})\".format( self.child_leaf.acronym, self.child.complete_title_english if self.child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose", "label": 0}, {"snippet_id": 2988, "code": "\"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count", "label": 0}, {"snippet_id": 3484, "code": " an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user", "label": 0}, {"snippet_id": 2955, "code": " int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username,", "label": 0}, {"snippet_id": 16, "code": " django.utils import translation from django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion", "label": 0}, {"snippet_id": 1523, "code": " get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str):", "label": 0}, {"snippet_id": 3927, "code": "'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query", "label": 1}, {"snippet_id": 2690, "code": " func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=", "label": 0}, {"snippet_id": 820, "code": "(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year,", "label": 0}, {"snippet_id": 2062, "code": " terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB", "label": 0}, {"snippet_id": 1493, "code": ": \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified", "label": 0}, {"snippet_id": 472, "code": " one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit", "label": 0}, {"snippet_id": 1956, "code": ") mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped", "label": 0}, {"snippet_id": 449, "code": " ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to", "label": 0}, {"snippet_id": 3907, "code": ") class Tag(vdmbase.VersionedDomainObject): sqlobj_version_class=TagRevision name=sqlobject.UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages", "label": 0}, {"snippet_id": 2849, "code": " from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils", "label": 0}, {"snippet_id": 2003, "code": "): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level", "label": 0}, {"snippet_id": 2930, "code": " User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None:", "label": 0}, {"snippet_id": 699, "code": " 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters", "label": 0}, {"snippet_id": 269, "code": "=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField(max_length=500, blank=True,", "label": 0}, {"snippet_id": 3515, "code": ": \"\"\" Sets the users mapping level :raises: UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER", "label": 0}, {"snippet_id": 3495, "code": " UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str,", "label": 0}, {"snippet_id": 1569, "code": ".twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if", "label": 0}, {"snippet_id": 1946, "code": " ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject", "label": 1}, {"snippet_id": 263, "code": " comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ", "label": 0}, {"snippet_id": 1209, "code": ".session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by", "label": 1}, {"snippet_id": 3615, "code": ": username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level", "label": 0}, {"snippet_id": 1886, "code": ", m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped, 0) mapped FROM(SELECT t.project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped", "label": 1}, {"snippet_id": 1156, "code": ".message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if self.message_type is not None: dto.message_type=MessageType(self.message_type", "label": 0}, {"snippet_id": 2608, "code": " contrib_dto @staticmethod @cached(homepage_stats_cache) def get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO", "label": 0}, {"snippet_id": 326, "code": " self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear", "label": 0}, {"snippet_id": 1201, "code": " session') db.session.add(self) def save(self): \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query=", "label": 1}, {"snippet_id": 153, "code": ").filter( Q(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True", "label": 0}, {"snippet_id": 240, "code": " is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField", "label": 0}, {"snippet_id": 3931, "code": " search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject)", "label": 1}, {"snippet_id": 2883, "code": ".messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600", "label": 0}, {"snippet_id": 3548, "code": " set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return", "label": 0}, {"snippet_id": 3304, "code": ") -> bool: \"\"\" Is the user a project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def", "label": 0}, {"snippet_id": 3236, "code": ".get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService.send_verification_email(user_dto.email_address.lower(), user", "label": 0}, {"snippet_id": 1220, "code": " query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format", "label": 1}, {"snippet_id": 458, "code": " self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type", "label": 0}, {"snippet_id": 3769, "code": " in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated", "label": 0}, {"snippet_id": 2182, "code": ".total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto.total_time_spent +=user_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history", "label": 0}, {"snippet_id": 3230, "code": " verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto.email_address and user.email_address !=user_dto.email_address.lower(): SMTPService", "label": 0}, {"snippet_id": 3677, "code": ".ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level", "label": 0}, {"snippet_id": 3449, "code": " UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id", "label": 0}, {"snippet_id": 2971, "code": " @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id :param username: OSM Username :param changeset_count: OSM changeset count \"\"\" new_user", "label": 0}, {"snippet_id": 1614, "code": " set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"", "label": 0}, {"snippet_id": 2247, "code": " from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task from server.models.postgis.utils import", "label": 0}, {"snippet_id": 2874, "code": " import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize", "label": 0}, {"snippet_id": 2032, "code": "\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self", "label": 0}, {"snippet_id": 934, "code": " GroupElementYear.objects.get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child", "label": 0}, {"snippet_id": 1792, "code": ".username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto", "label": 0}, {"snippet_id": 3111, "code": ".user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory.project_id", "label": 0}, {"snippet_id": 3270, "code": "> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO", "label": 0}, {"snippet_id": 3499, "code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ->", "label": 0}, {"snippet_id": 3155, "code": " and user_id={0};\"\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating", "label": 1}, {"snippet_id": 2868, "code": ".postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service", "label": 0}, {"snippet_id": 936, "code": ".get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child", "label": 0}, {"snippet_id": 950, "code": " server.models.dtos.message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from", "label": 0}, {"snippet_id": 577, "code": "(root_ids_by_object_id): flat_root_ids=list(set(itertools.chain.from_iterable(root_ids_by_object_id.values()))) map_instance_by_id={obj.id: obj for obj in education_group_year.search(id=flat_root_ids)} return", "label": 0}, {"snippet_id": 1357, "code": ".models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole", "label": 0}, {"snippet_id": 1481, "code": " last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"", "label": 0}, {"snippet_id": 3087, "code": ".filter( TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated", "label": 0}, {"snippet_id": 1741, "code": " auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped", "label": 0}, {"snippet_id": 2719, "code": "['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status", "label": 0}, {"snippet_id": 997, "code": " VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages\" __table_args__=( db.ForeignKeyConstraint(['task_id', ", "label": 0}, {"snippet_id": 1222, "code": "'SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id", "label": 1}, {"snippet_id": 247, "code": ".CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length", "label": 0}, {"snippet_id": 3308, "code": " project manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int", "label": 0}, {"snippet_id": 450, "code": "(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its", "label": 0}, {"snippet_id": 1042, "code": "), index=True) project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime", "label": 0}, {"snippet_id": 3559, "code": " the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id: int): \"\"\" Saves", "label": 0}, {"snippet_id": 2761, "code": " tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns +=1 else: no_campaign_count +=campaign_stats.projects_created if", "label": 0}, {"snippet_id": 2075, "code": " False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"\"\" Create DTO object from user in scope", "label": 0}, {"snippet_id": 1791, "code": "(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant)", "label": 0}, {"snippet_id": 1086, "code": ".relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages')", "label": 0}, {"snippet_id": 1901, "code": ".project_id, count(t.validated_by) validated FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER", "label": 1}, {"snippet_id": 464, "code": " raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _", "label": 0}, {"snippet_id": 3443, "code": " should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted values are", "label": 0}, {"snippet_id": 1927, "code": " WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY", "label": 1}, {"snippet_id": 2564, "code": ", u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO() for row in results", "label": 1}, {"snippet_id": 1476, "code": "=db.Column(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"", "label": 0}, {"snippet_id": 561, "code": "=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category'", "label": 0}, {"snippet_id": 2209, "code": "=row[0] if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self", "label": 0}, {"snippet_id": 2434, "code": " \"\"\" Gets all the activity on a project \"\"\" results=db.session.query( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User", "label": 0}, {"snippet_id": 1477, "code": "(db.DateTime, default=timestamp) last_validation_date=db.Column(db.DateTime, default=timestamp) accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates", "label": 0}, {"snippet_id": 1145, "code": "> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self", "label": 0}, {"snippet_id": 399, "code": ")==LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean()", "label": 0}, {"snippet_id": 2724, "code": "(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area", "label": 0}, {"snippet_id": 1727, "code": "(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will", "label": 0}, {"snippet_id": 482, "code": "'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch or self.child_leaf def is_deletable(self): if self.child: return", "label": 0}, {"snippet_id": 3351, "code": ".get_user_by_id(user_id) if UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a", "label": 0}, {"snippet_id": 912, "code": ": row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear", "label": 0}, {"snippet_id": 3744, "code": ", level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject='Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message", "label": 0}, {"snippet_id": 1238, "code": " tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read \"\"\" self.read", "label": 1}, {"snippet_id": 266, "code": " max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"english comment\"), ) own_comment=models.CharField", "label": 0}, {"snippet_id": 2223, "code": " TTLCache, cached from sqlalchemy import func, text from server import db from server.models.dtos.stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO,", "label": 0}, {"snippet_id": 207, "code": "'child_leaf', blank=True, null=True, on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank", "label": 0}, {"snippet_id": 3618, "code": " UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user(user.id) return osm_dto @staticmethod def check_and_update_mapper_level(user_id", "label": 0}, {"snippet_id": 3839, "code": ") license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class", "label": 0}, {"snippet_id": 1491, "code": ") def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user", "label": 0}, {"snippet_id": 3762, "code": " refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user", "label": 0}, {"snippet_id": 835, "code": " _match_any_filters(element_year, filters): return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) ", "label": 0}, {"snippet_id": 1914, "code": " GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t", "label": 1}, {"snippet_id": 625, "code": " either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class", "label": 0}, {"snippet_id": 1437, "code": " tasks_validated=db.Column(db.Integer, default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column", "label": 0}, {"snippet_id": 1461, "code": " is_expert=db.Column(db.Boolean, default=False) twitter_id=db.Column(db.String) facebook_id=db.Column(db.String) linkedin_id=db.Column(db.String) date_registered=db.Column(db.DateTime, default=timestamp", "label": 0}, {"snippet_id": 400, "code": "=LANGUAGE_CODE_EN: return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return", "label": 0}, {"snippet_id": 255, "code": "\") ) access_condition=models.BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english", "label": 0}, {"snippet_id": 551, "code": ") return root_ids_by_object_id def _get_root_filters(): root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name", "label": 0}, {"snippet_id": 2552, "code": ".validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format", "label": 1}, {"snippet_id": 3922, "code": "(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self, text_query): text_query_str=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\"", "label": 1}, {"snippet_id": 98, "code": "'is_mandatory', 'access_condition', 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id,", "label": 0}, {"snippet_id": 2012, "code": ".commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int", "label": 0}, {"snippet_id": 157, "code": ") | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField", "label": 0}, {"snippet_id": 1559, "code": "\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None self.facebook_id=user_dto.facebook_id", "label": 0}, {"snippet_id": 515, "code": ".filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs: queryset=queryset.filter(child_leaf", "label": 0}, {"snippet_id": 2011, "code": " db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id", "label": 0}, {"snippet_id": 3276, "code": " list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users", "label": 0}, {"snippet_id": 1998, "code": " mapped_projects_dto def set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the", "label": 0}, {"snippet_id": 2965, "code": " user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param osm_id: Unique OSM user id", "label": 0}, {"snippet_id": 1581, "code": ".linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db.session.commit() def set_email_verified_status(self, is_verified: bool", "label": 0}, {"snippet_id": 532, "code": " def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects: filters=_get_root_filters() root_ids_by_object_id=_find_related_formations(objects, filters", "label": 0}, {"snippet_id": 440, "code": " save a GroupElementYear with a child branch and a child leaf.\")) if self.child_branch==self.parent: raise ValidationError(_(\"It is forbidden to attach an element to itself.\")) if self.parent and self.child_branch", "label": 0}, {"snippet_id": 1841, "code": ".format(user_id, project_id) result=db.engine.execute(sql) if result.rowcount > 0: return sql='''update users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id)", "label": 1}, {"snippet_id": 2051, "code": "(self, license_id: int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True", "label": 0}, {"snippet_id": 1732, "code": " int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have", "label": 0}, {"snippet_id": 2585, "code": " results: user_id=row[0] or row[3] user_contrib=UserContribution() user_contrib.username=row[1] if row[1] else row[4] user_contrib.mapped=row[2] if row[2] else 0 user_contrib.validated=row[5] if row[5] else", "label": 0}, {"snippet_id": 977, "code": " import timestamp from server.models.postgis.utils import NotFound class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION", "label": 0}, {"snippet_id": 1308, "code": ") return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id: int): \"\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message", "label": 0}, {"snippet_id": 1181, "code": ".username return dto def add_message(self): \"\"\" Add message into current transaction -DO NOT COMMIT HERE AS MESSAGES ARE PART OF LARGER TRANSACTIONS\"\"\" current_app.logger.debug('Adding message to session", "label": 0}, {"snippet_id": 895, "code": ": with connection.cursor() as cursor: query=SQL_RECURSIVE_QUERY_EDUCATION_GROUP.format(list_root_ids=','.join(str(root_id) for root_id in root_ids)) cursor.execute(query) return[ { 'id': row[0], 'child_branch_id", "label": 1}, {"snippet_id": 1504, "code": " save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query.get(user_id) def get_by_username(self, username:", "label": 0}, {"snippet_id": 1981, "code": "=ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role", "label": 0}, {"snippet_id": 742, "code": "'child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf,", "label": 0}, {"snippet_id": 3360, "code": " @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return", "label": 0}, {"snippet_id": 20, "code": " django.utils.functional import cached_property from django.utils.translation import ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice", "label": 0}, {"snippet_id": 681, "code": "(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to avoid too large 'in-memory", "label": 0}, {"snippet_id": 3006, "code": ".ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create", "label": 0}, {"snippet_id": 1542, "code": ", username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower", "label": 0}, {"snippet_id": 2270, "code": ", NotFound from server.services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod", "label": 0}, {"snippet_id": 3222, "code": " Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False if user_dto", "label": 0}, {"snippet_id": 1555, "code": " UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self.twitter_id=user_dto.twitter_id.lower() if user_dto.twitter_id else None", "label": 0}, {"snippet_id": 3030, "code": " int) -> UserDTO: \"\"\"Gets user DTO for supplied username \"\"\" requested_user=UserService.get_user_by_username(requested_username) logged_in_user=UserService.get_user_by_id(logged_in_user_id) UserService", "label": 0}, {"snippet_id": 513, "code": "['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year=academic_year)) if 'child_leaf' in kwargs:", "label": 0}, {"snippet_id": 282, "code": ") own_comment=models.CharField(max_length=500, blank=True, null=True) quadrimester_derogation=models.CharField( max_length=10, choices=quadrimesters.DEROGATION_QUADRIMESTERS, blank=True, null=True, verbose_name", "label": 0}, {"snippet_id": 2006, "code": " Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value", "label": 0}, {"snippet_id": 2071, "code": ".accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str) -> UserDTO: \"", "label": 0}, {"snippet_id": 2818, "code": " import TTLCache, cached from flask import current_app from functools import reduce import dateutil.parser import datetime from server import db from server.models.dtos.user_dto import UserDTO, UserOSMDTO", "label": 0}, {"snippet_id": 258, "code": ".BooleanField( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500", "label": 0}, {"snippet_id": 1693, "code": "=result.id listed_user.mapping_level=MappingLevel(result.mapping_level).name listed_user.username=result.username listed_user.role=UserRole(result.role).name dto.users.append(listed_user) dto.pagination", "label": 0}, {"snippet_id": 456, "code": " itself.\")) if self.parent and self.child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf", "label": 0}, {"snippet_id": 100, "code": " 'quadrimester_derogation', 'parent__academic_year') SQL_RECURSIVE_QUERY_EDUCATION_GROUP=\"\"\"\\ WITH RECURSIVE group_element_year_parent AS( SELECT id, child_branch_id, child_leaf_id, parent_id, 0 AS level", "label": 0}, {"snippet_id": 3685, "code": "'ADVANCED') elif(intermediate_level < osm_details.changeset_count < advanced_level and user.mapping_level !=MappingLevel.INTERMEDIATE.value): user.mapping_level=MappingLevel.INTERMEDIATE.value UserService", "label": 0}, {"snippet_id": 1532, "code": " username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str): \"\"\" Update the username \"\"\" self.username=username db.session.commit", "label": 0}, {"snippet_id": 1787, "code": " result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant", "label": 0}, {"snippet_id": 301, "code": " derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to='parent' objects=GroupElementYearManager", "label": 0}, {"snippet_id": 1774, "code": "\"participant\").nullslast(), User.username).paginate(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is", "label": 0}, {"snippet_id": 1779, "code": "(page, 20, True) if results.total==0: raise NotFound() dto=UserFilterDTO() for result in results.items: dto.usernames.append(result.username) if project_id is not None: participant=ProjectParticipantUser()", "label": 0}, {"snippet_id": 3604, "code": "(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\"", "label": 0}, {"snippet_id": 3541, "code": ") user=UserService.get_user_by_username(username) user.set_mapping_level(requested_level) return user @staticmethod def set_user_is_expert(user_id: int, is_expert: bool) -> User: \"\"\" Enabled or disables", "label": 0}, {"snippet_id": 726, "code": " .select_related('education_group_year__education_group_type') .values('parent', 'child_branch', 'child_leaf', *columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key", "label": 0}, {"snippet_id": 226, "code": ", null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(", "label": 0}, {"snippet_id": 607, "code": " } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear", "label": 0}, {"snippet_id": 2802, "code": " unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count", "label": 0}, {"snippet_id": 1607, "code": " successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert", "label": 0}, {"snippet_id": 3725, "code": ", username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username) text_template=text_template", "label": 0}, {"snippet_id": 1409, "code": ") username=db.Column(db.String, unique=True) role=db.Column(db.Integer, default=0, nullable=False) mapping_level=db.Column(db.Integer, default=1, nullable=False) projects_mapped=db.Column(db.Integer, default", "label": 0}, {"snippet_id": 2840, "code": " UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import TaskHistory from server.models.postgis", "label": 0}, {"snippet_id": 3874, "code": ".VersionedDomainObject): sqlobj_version_class=PackageRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) name=sqlobject.UnicodeCol(alternateID=True) m2m=[('tags', 'ckan.models.package', 'Tag'", "label": 0}, {"snippet_id": 2683, "code": ".value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count=0 tasks_mapped_sql=\"select coalesce", "label": 0}, {"snippet_id": 3575, "code": " Saves the fact user has accepted license terms \"\"\" user=UserService.get_user_by_id(user_id) user.accept_license_terms(license_id) @staticmethod def has_user_accepted_license(user_id: int, license_id: int", "label": 0}, {"snippet_id": 384, "code": ".relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment(self): if self.comment_english and translation.get_language()==LANGUAGE_CODE_EN: return self.comment_english", "label": 0}, {"snippet_id": 1299, "code": ") messages_dto=MessagesDTO() for message in user_messages: messages_dto.user_messages.append(message.as_dto()) return messages_dto @staticmethod def delete_multiple_messages(message_ids: list, user_id:", "label": 0}, {"snippet_id": 2130, "code": ".tasks_validated=self.tasks_validated user_dto.tasks_invalidated=self.tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto", "label": 0}, {"snippet_id": 3936, "code": "%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class", "label": 1}, {"snippet_id": 121, "code": " UNION ALL SELECT child.id, child.child_branch_id, child.child_leaf_id, child.parent_id, parent.level +1 FROM base_groupelementyear AS child INNER JOIN group_element_year_parent AS parent on parent.child_branch_id", "label": 0}, {"snippet_id": 1235, "code": " tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors def mark_as_read(self): \"\"\" Mark the message in scope as Read", "label": 1}, {"snippet_id": 2958, "code": " -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"", "label": 0}, {"snippet_id": 28, "code": " ugettext_lazy as _ from ordered_model.models import OrderedModel from reversion.admin import VersionAdmin from backoffice.settings.base import LANGUAGE_CODE_EN from base.models import education_group_type", "label": 0}, {"snippet_id": 2107, "code": ".mapping_level=MappingLevel(self.mapping_level).name user_dto.is_expert=self.is_expert or False user_dto.date_registered=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped", "label": 0}, {"snippet_id": 3198, "code": ": total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping return stats_dto @staticmethod", "label": 0}, {"snippet_id": 824, "code": ") else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters(element_year, filters): return any(element_year[col_name", "label": 0}, {"snippet_id": 1942, "code": ".project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in", "label": 1}, {"snippet_id": 3163, "code": " total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 2986, "code": " changeset count \"\"\" new_user=User() new_user.id=osm_id new_user.username=username intermediate_level=current_app.config['MAPPER_LEVEL_INTERMEDIATE'] advanced_level=current_app.config['MAPPER_LEVEL_ADVANCED']", "label": 0}, {"snippet_id": 2614, "code": "() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query", "label": 0}, {"snippet_id": 1744, "code": " who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label", "label": 0}, {"snippet_id": 838, "code": ": return any(element_year[col_name] in values_list for col_name, values_list in filters.items()) def fetch_all_group_elements_in_tree(root: EducationGroupYear, queryset) -> dict: if queryset.model !=GroupElementYear", "label": 0}, {"snippet_id": 2116, "code": "=str(self.date_registered) try: user_dto.projects_mapped=len(self.projects_mapped) except: user_dto.projects_mapped=0 user_dto.tasks_mapped=self.tasks_mapped user_dto.tasks_validated=self.tasks_validated", "label": 0}, {"snippet_id": 3322, "code": " True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def", "label": 0}, {"snippet_id": 2020, "code": "\"\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license ", "label": 0}, {"snippet_id": 234, "code": ".IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True,", "label": 0}, {"snippet_id": 600, "code": ": obj.acronym) for obj_id, parents in root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear,", "label": 0}, {"snippet_id": 984, "code": "): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes", "label": 0}, {"snippet_id": 3770, "code": " and update their mapper level \"\"\" users=User.get_all_users_not_pagainated() users_updated=1 total_users=len(users) for user in users: UserService.check_and_update_mapper_level(user.id) if users_updated", "label": 0}, {"snippet_id": 3328, "code": " int): \"\"\" Gets mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if", "label": 0}, {"snippet_id": 1655, "code": ".mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole[query.role", "label": 0}, {"snippet_id": 2836, "code": " UserFilterDTO, UserSearchQuery, UserSearchDTO, \\ UserStatsDTO from server.models.dtos.message_dto import MessageDTO from server.models.postgis.message import Message from server.models.postgis.task import", "label": 0}, {"snippet_id": 3004, "code": " new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel", "label": 0}, {"snippet_id": 2935, "code": " raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username", "label": 0}, {"snippet_id": 3257, "code": " verification_email_sent=True user.update(user_dto) return dict(verificationEmailSent=verification_email_sent) @staticmethod @cached(user_all_cache) def get_all_users(query: UserSearchQuery) -> UserSearchDTO", "label": 0}, {"snippet_id": 2469, "code": ") if results.total==0: raise NotFound() activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item", "label": 0}, {"snippet_id": 750, "code": "]) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise AttributeError", "label": 0}, {"snippet_id": 3104, "code": "='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id=", "label": 0}, {"snippet_id": 3946, "code": " class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package", "label": 0}, {"snippet_id": 1737, "code": "\"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db", "label": 0}, {"snippet_id": 377, "code": " and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"), ) @property def verbose_comment", "label": 0}, {"snippet_id": 1022, "code": ", primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id", "label": 0}, {"snippet_id": 3792, "code": " vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package", "label": 0}, {"snippet_id": 3462, "code": " values are ADMIN, PROJECT_MANAGER, VALIDATOR') admin=UserService.get_user_by_id(admin_user_id) admin_role=UserRole(admin.role) if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.ADMIN:", "label": 0}, {"snippet_id": 2518, "code": " contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id", "label": 0}, {"snippet_id": 75, "code": " volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=", "label": 0}, {"snippet_id": 1027, "code": " subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id'), index=True) project_id=db.Column(db.Integer, db", "label": 0}, {"snippet_id": 2373, "code": "='change': if new_state==TaskStatus.MAPPED: user.tasks_mapped +=1 elif new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state", "label": 0}, {"snippet_id": 460, "code": ".child_branch in self.parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE", "label": 0}, {"snippet_id": 1860, "code": ") db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has mapped on \"\"\" sql='''SELECT p.id, p.status,", "label": 1}, {"snippet_id": 2516, "code": " a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where", "label": 0}, {"snippet_id": 3175, "code": ".total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"", "label": 0}, {"snippet_id": 3522, "code": " UserServiceError \"\"\" try: requested_level=MappingLevel[level.upper()] except KeyError: raise UserServiceError(f'Unknown role{level} accepted values are BEGINNER, INTERMEDIATE, ADVANCED') user=UserService", "label": 0}, {"snippet_id": 1331, "code": "\nimport geojson import datetime import dateutil.parser from server import db from sqlalchemy import desc from server.models.dtos.user_dto import UserDTO, UserMappedProjectsDTO, MappedProject, UserFilterDTO", "label": 1}, {"snippet_id": 1227, "code": "={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not null'''.format(project_id) contributors=db.engine.execute(query) return contributors", "label": 1}, {"snippet_id": 1745, "code": " participated(mapped or validated) in the project, if given, will be returned ahead of those who have not. \"\"\" results=db.session.query(User.username, User.projects_mapped.any(project_id).label(\"participant", "label": 0}, {"snippet_id": 3953, "code": "=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[] package=sqlobject.ForeignKey('Package', cascade=True) tag=sqlobject.ForeignKey('Tag', cascade=True) package_tag_index=sqlobject.DatabaseIndex('package", "label": 0}, {"snippet_id": 3611, "code": " OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService.get_user_by_username(username) osm_dto=OSMService.get_osm_details_for_user", "label": 0}, {"snippet_id": 1930, "code": "(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results", "label": 1}, {"snippet_id": 819, "code": " _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)) def _match_any_filters", "label": 0}, {"snippet_id": 2549, "code": "(select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username) v", "label": 0}, {"snippet_id": 1370, "code": " import ProjectInfo from server.models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history", "label": 0}, {"snippet_id": 1283, "code": "-> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id==user_id).all() if len(user_messages)==0: raise NotFound() messages_dto=MessagesDTO() for message", "label": 0}, {"snippet_id": 2024, "code": " on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id", "label": 0}, {"snippet_id": 1064, "code": "(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys=[to_user_id], backref=", "label": 0}, {"snippet_id": 1327, "code": ".filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self): \"\"\" Deletes the current model from the DB \"\"\" db.session.delete", "label": 0}, {"snippet_id": 982, "code": " class MessageType(Enum): \"\"\" Describes the various kinds of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message", "label": 0}, {"snippet_id": 1728, "code": ": str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be", "label": 0}, {"snippet_id": 526, "code": "'child_leaf' in kwargs: queryset=queryset.filter(child_leaf=kwargs['child_leaf']) return queryset def find_learning_unit_formations(objects, parents_as_instances=False): root_ids_by_object_id={} if objects:", "label": 0}, {"snippet_id": 3142, "code": " stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT SUM(TO_TIMESTAMP(action_text, 'HH24:MI:SS')::TIME) FROM task_history WHERE action='LOCKED_FOR_VALIDATION' and user_id={0}", "label": 1}, {"snippet_id": 1393, "code": "\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role", "label": 0}, {"snippet_id": 1268, "code": " unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages", "label": 0}, {"snippet_id": 3283, "code": "(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod", "label": 0}, {"snippet_id": 776, "code": " both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch return '{branch_part}_{id_part}'.format(**locals()) def _find_elements", "label": 0}, {"snippet_id": 859, "code": " be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids={elem['id'] for elem in elements} queryset=queryset.filter(pk__in=distinct_group_elem_ids) group_elems_by_parent_id", "label": 0}, {"snippet_id": 696, "code": " for 1 academic_year \" \"to avoid too large 'in-memory' data and performance issues.\") return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters", "label": 0}, {"snippet_id": 3637, "code": " Check users mapping level and update if they have crossed threshold \"\"\" user=UserService.get_user_by_id(user_id) user_level=MappingLevel(user.mapping_level) if user_level==MappingLevel.ADVANCED: return", "label": 0}, {"snippet_id": 319, "code": "'parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})\".format( self.child.title,", "label": 0}, {"snippet_id": 2283, "code": "=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action='change'): \"\"", "label": 0}, {"snippet_id": 914, "code": "'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch: return GroupElementYear.objects", "label": 0}, {"snippet_id": 1928, "code": ".project_id IN(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC", "label": 1}, {"snippet_id": 3915, "code": ".UnicodeCol(alternateID=True) versioned_attributes=vdmbase.get_attribute_names(sqlobj_version_class) m2m=[('packages', 'ckan.models.package', 'Package', 'PackageTag')] @classmethod def search_by_name(self", "label": 0}, {"snippet_id": 1374, "code": ".models.postgis.statuses import MappingLevel, ProjectStatus, UserRole from server.models.postgis.utils import NotFound, timestamp class User(db.Model): \"\"\" Describes the history associated with a task ", "label": 0}, {"snippet_id": 2910, "code": " occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User", "label": 0}, {"snippet_id": 181, "code": " parent=models.ForeignKey( EducationGroupYear, null=True, on_delete=models.PROTECT, ) child_branch=models.ForeignKey( EducationGroupYear, related_name='child_branch', blank=True, null=True, on_delete=models", "label": 0}, {"snippet_id": 2624, "code": " for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is not None ).distinct(Task.locked_by).count() dto", "label": 0}, {"snippet_id": 2525, "code": " v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by", "label": 1}, {"snippet_id": 336, "code": " self.child.title, self.relative_credits or self.child_branch.credits or 0, _(\"credits\") ) else: components=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf", "label": 0}, {"snippet_id": 735, "code": "*columns_needed_for_filters)) result={} for group_element_year in group_elements: key=_build_child_key(child_branch=group_element_year['child_branch'], child_leaf=group_element_year['child_leaf']) result.setdefault(key,[]", "label": 0}, {"snippet_id": 1793, "code": ") if project_id is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append", "label": 0}, {"snippet_id": 2548, "code": " (select t.validated_by, u.username, count(t.validated_by) validated from tasks t, users u where t.validated_by=u.id and t.project_id={0} and t.validated_by is not null group by t.validated_by, u.username", "label": 0}, {"snippet_id": 3851, "code": "(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('PackageTag', cascade=True) class Package", "label": 0}, {"snippet_id": 3422, "code": " add_role_to_user(admin_user_id: int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added", "label": 0}, {"snippet_id": 1910, "code": "}) AND t.validated_by={0} GROUP BY t.project_id, t.validated_by) v FULL OUTER JOIN (SELECT t.project_id, count(t.mapped_by) mapped FROM tasks t WHERE t.project_id IN(SELECT unnest(projects_mapped) FROM", "label": 1}, {"snippet_id": 2674, "code": ").count() dto.tasks_validated=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) )", "label": 0}, {"snippet_id": 2444, "code": "( TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !=", "label": 0}, {"snippet_id": 83, "code": ".models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[", "label": 0}, {"snippet_id": 3311, "code": " manager \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets", "label": 0}, {"snippet_id": 1171, "code": " not None: dto.message_type=MessageType(self.message_type).name if self.from_user_id: dto.from_username=self.from_user.username return dto def add_message(self): \"\"\" Add message into current transaction ", "label": 0}, {"snippet_id": 1855, "code": ") where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects a user has", "label": 1}, {"snippet_id": 1273, "code": ".to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all messages to the user \"\"\" user_messages=Message.query.filter(Message.to_user_id", "label": 0}, {"snippet_id": 1718, "code": ": \"\"\" Get all users in DB\"\"\" return db.session.query(User.id).all() @staticmethod def filter_users(user_filter: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Finds users that matches first characters", "label": 0}, {"snippet_id": 911, "code": " row[1], 'child_leaf_id': row[2], 'parent_id': row[3], 'level': row[4], } for row in cursor.fetchall() ] def get_or_create_group_element_year(parent, child_branch=None, child_leaf=None): if child_branch:", "label": 0}, {"snippet_id": 2888, "code": " server.services.messaging.template_service import get_template user_filter_cache=TTLCache(maxsize=1024, ttl=600) user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom", "label": 0}, {"snippet_id": 2793, "code": ".count(Project.organisation_tag))\\ .group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations", "label": 0}, {"snippet_id": 2532, "code": ".mapped_by) mapped from tasks t, users u where t.mapped_by=u.id and t.project_id={0} and t.mapped_by is not null group by t.mapped_by, u.username) m FULL OUTER JOIN (select t.validated_by, u.username, count(t", "label": 1}, {"snippet_id": 644, "code": "): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year(objects) parents_by_id=_build_parent_list_by_education_group_year_id(academic_year, filters=filters) if isinstance(objects", "label": 0}, {"snippet_id": 2070, "code": " image_license in self.accepted_licenses: return True return False def delete(self): \"\"\" Delete the user in scope from DB \"\"\" db.session.delete(self) db.session.commit() def as_dto(self, logged_in_username: str", "label": 0}, {"snippet_id": 673, "code": ": _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects} def _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise", "label": 0}, {"snippet_id": 136, "code": " group_element_year_parent AS parent on parent.child_branch_id=child.parent_id ) SELECT * FROM group_element_year_parent ; \"\"\" class GroupElementYearManager(models.Manager): def get_queryset(self): return super(", "label": 0}, {"snippet_id": 2243, "code": " OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import Project from server.models.postgis.statuses import TaskStatus from server.models.postgis.task import TaskHistory, User, Task", "label": 0}, {"snippet_id": 2615, "code": "-> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter", "label": 0}, {"snippet_id": 1929, "code": "(SELECT unnest(projects_mapped) FROM users WHERE id={0}) AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id", "label": 1}, {"snippet_id": 3133, "code": "=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto.time_spent_mapping=0 stats_dto.time_spent_validating=0 sql=\"\"\"SELECT", "label": 0}, {"snippet_id": 3425, "code": " int, username: str, role: str): \"\"\" Add role to user :param admin_user_id: ID of admin attempting to add the role :param username: Username of user the role should be added to :param role: The requested", "label": 0}, {"snippet_id": 1206, "code": ": \"\"\" Save \"\"\" db.session.add(self) db.session.commit() @staticmethod def get_all_contributors(project_id: int): \"\"\" Get all contributors to a project \"\"\" query='''SELECT mapped_by as contributors from", "label": 1}, {"snippet_id": 1613, "code": ".commit() def set_is_expert(self, is_expert: bool): \"\"\" Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) ->", "label": 0}, {"snippet_id": 2870, "code": " from server.services.users.osm_service import OSMService, OSMServiceError from server.services.messaging.smtp_service import SMTPService from server.services.messaging.template_service import get_template", "label": 0}, {"snippet_id": 2617, "code": " Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online=Task.query.filter( Task.locked_by is", "label": 0}, {"snippet_id": 1496, "code": " the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not", "label": 0}, {"snippet_id": 3089, "code": " TaskHistory.user_id==user.id, TaskHistory.action_text !='' ).all() tasks_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory", "label": 0}, {"snippet_id": 2613, "code": " get_homepage_stats() -> HomePageStatsDTO: \"\"\" Get overall TM stats to give community a feel for progress that's being made \"\"\" dto=HomePageStatsDTO() dto.total_projects=Project.query.count() dto.mappers_online", "label": 0}, {"snippet_id": 1518, "code": " return User.query.get(user_id) def get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none(", "label": 0}, {"snippet_id": 1081, "code": " backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message", "label": 0}, {"snippet_id": 1596, "code": " set_email_verified_status(self, is_verified: bool): \"\"\" Updates email verfied flag on successfully verified emails\"\"\" self.is_email_verified=is_verified db.session.commit() def set_is_expert(self, is_expert", "label": 0}, {"snippet_id": 554, "code": " root_type_names=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories", "label": 0}, {"snippet_id": 767, "code": ") or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch' id_part=child_branch", "label": 0}, {"snippet_id": 3505, "code": " role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) -> User: \"\"\" Sets the users mapping level ", "label": 0}, {"snippet_id": 3110, "code": " TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action=='STATE_CHANGE' ).distinct(TaskHistory", "label": 0}, {"snippet_id": 1486, "code": " accepted_licenses=db.relationship(\"License\", secondary=users_licenses_table) def create(self): \"\"\" Creates and saves the current model to the DB \"\"\" db.session.add(self) db.session.commit() def save(self): db", "label": 0}, {"snippet_id": 1060, "code": " index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship(User, foreign_keys=[from_user_id]) to_user=db.relationship(User, foreign_keys", "label": 0}, {"snippet_id": 3591, "code": "\"\"\" Checks if user has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str", "label": 0}, {"snippet_id": 2944, "code": " user=User().get_by_username(username) if user is None: raise NotFound() return user @staticmethod def update_username(user_id: int, osm_username: str) -> User: user=UserService.get_user_by_id(user_id) if", "label": 0}, {"snippet_id": 2646, "code": " dto.total_mappers=User.query.count() dto.total_validators=Task.query.filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task", "label": 0}, {"snippet_id": 992, "code": "\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user can send \"\"\" __tablename__=\"messages", "label": 0}, {"snippet_id": 2302, "code": " has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService.get_project_by_id(project_id) user=UserService", "label": 0}, {"snippet_id": 873, "code": "(pk__in=distinct_group_elem_ids) group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year", "label": 0}, {"snippet_id": 2909, "code": " error occurred when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user", "label": 0}, {"snippet_id": 2712, "code": ".execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from", "label": 0}, {"snippet_id": 2454, "code": " User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10, True) if results.total==0: raise NotFound", "label": 0}, {"snippet_id": 2281, "code": " homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change(project_id: int, user_id: int, last_state: TaskStatus, new_state: TaskStatus, action=", "label": 0}, {"snippet_id": 2211, "code": " if total_mapping_time: total_mapping_seconds=total_mapping_time.total_seconds() user_dto.time_spent_mapping=total_mapping_seconds user_dto.total_time_spent +=user_dto.time_spent_mapping if self.username", "label": 0}, {"snippet_id": 2452, "code": ".action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' ).order_by( TaskHistory.action_date.desc() ).paginate(page, 10", "label": 0}, {"snippet_id": 2962, "code": ".get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in DB :param", "label": 0}, {"snippet_id": 1394, "code": " __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True, nullable=False) username=db.Column(db.String, unique=True) role=db.Column", "label": 0}, {"snippet_id": 817, "code": " filters and _match_any_filters(group_elem_year, filters): roots.append(parent_id) else: roots.extend(_find_elements(group_elements_by_child_id, filters, child_branch_id=parent_id)) return list(set(roots)", "label": 0}, {"snippet_id": 555, "code": "=education_group_type.search(category=education_group_categories.MINI_TRAINING) \\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return", "label": 0}, {"snippet_id": 656, "code": " filters=filters) if isinstance(objects[0], LearningUnitYear): return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id", "label": 0}, {"snippet_id": 2400, "code": "==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if action=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif", "label": 0}, {"snippet_id": 3009, "code": " elif intermediate_level < changeset_count < advanced_level: new_user.mapping_level=MappingLevel.INTERMEDIATE.value else: new_user.mapping_level=MappingLevel.BEGINNER.value new_user.create() return new_user", "label": 0}, {"snippet_id": 238, "code": "\"), ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField", "label": 0}, {"snippet_id": 2678, "code": "( Task.task_status==TaskStatus.VALIDATED.value ).count() org_proj_count=db.session.query( Project.organisation_tag, func.count(Project.organisation_tag) ).group_by(Project.organisation_tag).all() untagged_count", "label": 0}, {"snippet_id": 1548, "code": " self.username=username db.session.commit() def update(self, user_dto: UserDTO): \"\"\" Update the user details \"\"\" self.email_address=user_dto.email_address.lower() if user_dto.email_address else None self", "label": 0}, {"snippet_id": 749, "code": "'child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all(args): raise", "label": 0}, {"snippet_id": 3315, "code": ".get_user_by_id(user_id) if UserRole(user.role) in[UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def get_mapping_level(user_id: int): \"\"\" Gets mapping level user is at\"\"", "label": 0}, {"snippet_id": 850, "code": ", queryset) -> dict: if queryset.model !=GroupElementYear: raise AttributeError(\"The querySet arg has to be built from model{}\".format(GroupElementYear)) elements=_fetch_row_sql([root.id]) distinct_group_elem_ids", "label": 0}, {"snippet_id": 1623, "code": " the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User", "label": 0}, {"snippet_id": 2805, "code": " org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else: no_org_count +=org_stats.projects_created if no_org_count: no_org_proj=OrganizationStatsDTO", "label": 0}, {"snippet_id": 2559, "code": "{0} and t.validated_by is not null group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound", "label": 1}, {"snippet_id": 1500, "code": " \"\"\" db.session.add(self) db.session.commit() def save(self): db.session.commit() def get_by_id(self, user_id: int): \"\"\" Return the user for the specified id, or None if not found \"\"\" return User.query", "label": 0}, {"snippet_id": 2043, "code": "\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit() def has_user_accepted_licence(self, license_id: int): \"\"\" Test to see if the user has accepted", "label": 0}, {"snippet_id": 798, "code": "): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in", "label": 0}, {"snippet_id": 2231, "code": ".stats_dto import( ProjectContributionsDTO, UserContribution, Pagination, TaskHistoryDTO, ProjectActivityDTO, HomePageStatsDTO, OrganizationStatsDTO, CampaignStatsDTO ) from server.models.postgis.project import", "label": 0}, {"snippet_id": 2701, "code": ")), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result", "label": 0}, {"snippet_id": 156, "code": "(child_branch__isnull=False) | Q(child_leaf__learning_container_year__isnull=False) ) class GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models", "label": 0}, {"snippet_id": 3831, "code": "=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase", "label": 0}, {"snippet_id": 1802, "code": ".username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant) dto.pagination=Pagination(results) return dto @staticmethod def", "label": 0}, {"snippet_id": 953, "code": ".message_dto import MessageDTO, MessagesDTO from server.models.postgis.user import User from server.models.postgis.task import Task from server.models.postgis.project import Project from server.models.postgis", "label": 0}, {"snippet_id": 3100, "code": " TaskHistory.user_id==user.id, TaskHistory.action_text=='MAPPED' ).count() tasks_validated=TaskHistory.query.filter( TaskHistory.user_id==user.id, TaskHistory.action_text=='VALIDATED' ).count() projects_mapped", "label": 0}, {"snippet_id": 2732, "code": ":task_status\" tasks_validated_result=db.engine.execute(text(tasks_validated_sql), task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count", "label": 0}, {"snippet_id": 2410, "code": "=='undo': if last_state==TaskStatus.MAPPED: user.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: user.tasks_validated -=1 elif last_state==TaskStatus.INVALIDATED: user.tasks_invalidated -=1 @staticmethod", "label": 0}, {"snippet_id": 1735, "code": " UserFilterDTO: \"\"\" Finds users that matches first characters, for auto-complete. Users who have participated(mapped or validated) in the project, if given, will be returned ahead of those who have not.", "label": 0}, {"snippet_id": 2445, "code": " TaskHistory.id, TaskHistory.task_id, TaskHistory.action, TaskHistory.action_date, TaskHistory.action_text, User.username ).join(User).filter( TaskHistory.project_id==project_id, TaskHistory.action !='COMMENT' )", "label": 0}, {"snippet_id": 3596, "code": " has accepted specified license \"\"\" user=UserService.get_user_by_id(user_id) return user.has_user_accepted_licence(license_id) @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"", "label": 0}, {"snippet_id": 937, "code": ".get_or_create(parent=parent, child_branch=child_branch) elif child_leaf: return GroupElementYear.objects.get_or_create(parent=parent, child_leaf=child_leaf) return AttributeError('child branch OR child leaf", "label": 0}, {"snippet_id": 3667, "code": "(osm_details.changeset_count > advanced_level and user.mapping_level != MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username", "label": 0}, {"snippet_id": 3605, "code": " @staticmethod def get_osm_details_for_user(username: str) -> UserOSMDTO: \"\"\" Gets OSM details for the user from OSM API :param username: username in scope :raises UserServiceError, NotFound \"\"\" user=UserService", "label": 0}, {"snippet_id": 3157, "code": "\"\".format(user.id) total_validation_time=db.engine.execute(sql) for time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time", "label": 1}, {"snippet_id": 2913, "code": " User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id", "label": 0}, {"snippet_id": 2021, "code": "\" Sets the supplied level on the user \"\"\" self.mapping_level=level.value db.session.commit() def accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"", "label": 0}, {"snippet_id": 2859, "code": " server.models.postgis.user import User, UserRole, MappingLevel from server.models.postgis.utils import NotFound from server.services.users.osm_service import OSMService, OSMServiceError from server.services", "label": 0}, {"snippet_id": 680, "code": " _extract_common_academic_year(objects): if len(set(getattr(obj, 'academic_year_id') for obj in objects)) > 1: raise AttributeError(\"The algorithm should load only graph/structure for 1 academic_year \" \"to", "label": 0}, {"snippet_id": 1143, "code": " def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject", "label": 0}, {"snippet_id": 3827, "code": "=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url=sqlobject.UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol", "label": 0}, {"snippet_id": 1384, "code": " User(db.Model): \"\"\" Describes the history associated with a task \"\"\" __tablename__=\"users\" id=db.Column(db.BigInteger, primary_key=True, index=True) validation_message=db.Column(db.Boolean, default=True", "label": 0}, {"snippet_id": 85, "code": "(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym", "label": 0}, {"snippet_id": 2503, "code": " activity_dto.activity.append(history) activity_dto.pagination=Pagination(results) return activity_dto @staticmethod def get_user_contributions(project_id: int) -> ProjectContributionsDTO: \"\"\" Get all user", "label": 0}, {"snippet_id": 704, "code": " return objects[0].academic_year def _build_parent_list_by_education_group_year_id(academic_year, filters=None): columns_needed_for_filters=filters.keys() if filters else[] group_elements=list(search(academic_year", "label": 0}, {"snippet_id": 1796, "code": " is not None: participant=ProjectParticipantUser() participant.username=result.username participant.project_id=project_id participant.is_participant=bool(result.participant) dto.users.append(participant)", "label": 0}, {"snippet_id": 2135, "code": ".tasks_invalidated user_dto.twitter_id=self.twitter_id user_dto.linkedin_id=self.linkedin_id user_dto.facebook_id=self.facebook_id user_dto.validation_message=self.validation_message user_dto.total_time_spent=0", "label": 0}, {"snippet_id": 239, "code": ", ) is_mandatory=models.BooleanField( default=False, verbose_name=_(\"Mandatory\"), ) block=models.CharField( max_length=7, blank=True, null=True, verbose_name=_(\"Block\") ) access_condition=models.BooleanField", "label": 0}, {"snippet_id": 74, "code": " volume_total_verbose from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin):", "label": 0}, {"snippet_id": 3724, "code": " notify_level_upgrade(user_id: int, username: str, level: str): text_template=get_template('level_upgrade_message_en.txt') if username is not None: text_template=text_template.replace('[USERNAME]', username", "label": 0}, {"snippet_id": 1853, "code": "(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO: \"\"\" Get all projects", "label": 1}, {"snippet_id": 3406, "code": " projects a user has mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id:", "label": 0}, {"snippet_id": 2474, "code": " activity_dto=ProjectActivityDTO() for item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text", "label": 0}, {"snippet_id": 1965, "code": ") mapped_project.project_id=row[0] mapped_project.status=ProjectStatus(row[1]).name mapped_project.tasks_mapped=row[3] mapped_project.tasks_validated=row[4] mapped_project.centroid=geojson.loads(row[5]", "label": 0}, {"snippet_id": 1137, "code": " dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) -> MessageDTO: \"\"\" Casts message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self", "label": 0}, {"snippet_id": 1044, "code": " project_id=db.Column(db.Integer, db.ForeignKey('projects.id'), index=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp", "label": 0}, {"snippet_id": 1091, "code": "='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id==Message.project_id)\", backref='messages') @classmethod def from_dto(cls, to_user_id: int, dto", "label": 0}, {"snippet_id": 1021, "code": "(db.Integer, primary_key=True) message=db.Column(db.String) subject=db.Column(db.String) from_user_id=db.Column(db.BigInteger, db.ForeignKey('users.id')) to_user_id=db.Column(db.BigInteger, db.ForeignKey", "label": 0}, {"snippet_id": 507, "code": ".objects if 'academic_year' in kwargs: academic_year=kwargs['academic_year'] queryset=queryset.filter(Q(parent__academic_year=academic_year) | Q(child_branch__academic_year=academic_year) | Q(child_leaf__academic_year", "label": 0}, {"snippet_id": 1985, "code": "(row[0], preferred_locale, row[2]) mapped_project.name=project_info.name mapped_projects_dto.mapped_projects.append(mapped_project) return mapped_projects_dto def set_user_role(self, role: UserRole): \"", "label": 0}, {"snippet_id": 3219, "code": "> dict: \"\"\" Update user with info supplied by user, if they add or change their email address a verification mail will be sent \"\"\" user=UserService.get_user_by_id(user_id) verification_email_sent=False", "label": 0}, {"snippet_id": 1105, "code": ", dto: MessageDTO): \"\"\" Creates new message from DTO \"\"\" message=cls() message.subject=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message", "label": 0}, {"snippet_id": 1628, "code": " UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"\" base=db.session.query(User.id, User.username, User.mapping_level, User.role) if query.mapping_level: base=base.filter(User.mapping_level", "label": 0}, {"snippet_id": 3275, "code": " paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated list", "label": 0}, {"snippet_id": 1849, "code": " users set projects_mapped=array_append(projects_mapped,{0}) where id={1}'''.format(project_id, user_id) db.engine.execute(sql) @staticmethod def get_mapped_projects(user_id: int, preferred_locale: str", "label": 1}, {"snippet_id": 3476, "code": ".PROJECT_MANAGER and requested_role==UserRole.ADMIN: raise UserServiceError(f'You must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER:", "label": 0}, {"snippet_id": 2737, "code": " task_status=TaskStatus.VALIDATED.value) dto.total_validated_area=tasks_validated_result.fetchone()['sum'] campaign_count=db.session.query(Project.campaign_tag, func.count(Project.campaign_tag))\\ .group_by", "label": 0}, {"snippet_id": 3844, "code": "=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag', cascade=True) class PackageTagRevision(vdmbase.ObjectRevisionSQLObject):", "label": 0}, {"snippet_id": 211, "code": " on_delete=models.CASCADE, ) relative_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"relative credits\"), ) min_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Min", "label": 0}, {"snippet_id": 3288, "code": " UserFilterDTO: \"\"\" Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: ", "label": 0}, {"snippet_id": 1267, "code": " count of unread messages for user \"\"\" return Message.query.filter(Message.to_user_id==user_id, Message.read==False).count() @staticmethod def get_all_messages(user_id: int) -> MessagesDTO: \"\"\" Gets all", "label": 0}, {"snippet_id": 3552, "code": " Enabled or disables expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id", "label": 0}, {"snippet_id": 1823, "code": " int, project_id: int): \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\" sql=\"select * from users where id={0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id) result=db.engine", "label": 1}, {"snippet_id": 1934, "code": " AND t.mapped_by={0} GROUP BY t.project_id, t.mapped_by) m ON v.project_id=m.project_id) c WHERE p.id=c.project_id ORDER BY p.id DESC'''.format(user_id) results=db.engine.execute(sql) if results.rowcount=", "label": 1}, {"snippet_id": 3124, "code": ").distinct(TaskHistory.project_id).count() stats_dto.tasks_mapped=tasks_mapped stats_dto.tasks_validated=tasks_validated stats_dto.projects_mapped=projects_mapped stats_dto.total_time_spent=0 stats_dto", "label": 0}, {"snippet_id": 225, "code": "( blank=True, null=True, verbose_name=_(\"Min. credits\"), ) max_credits=models.IntegerField( blank=True, null=True, verbose_name=_(\"Max. credits\"), ) is_mandatory=models.BooleanField( default=False, verbose_name", "label": 0}, {"snippet_id": 622, "code": " AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class", "label": 0}, {"snippet_id": 631, "code": " objects if obj.__class__ !=obj_class): raise AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance", "label": 0}, {"snippet_id": 715, "code": ".keys() if filters else[] group_elements=list(search(academic_year=academic_year) .filter(parent__isnull=False) .filter(Q(child_leaf__isnull=False) | Q(child_branch__isnull=False)) .select_related('education_group_year__education_group_type", "label": 0}, {"snippet_id": 474, "code": ") if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child", "label": 0}, {"snippet_id": 604, "code": " root_ids_by_object_id.items() } def _raise_if_incorrect_instance(objects): first_obj=objects[0] obj_class=first_obj.__class__ if obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(", "label": 0}, {"snippet_id": 298, "code": " null=True, verbose_name=_('Quadrimester derogation') ) link_type=models.CharField( max_length=25, choices=LinkTypes.choices(), blank=True, null=True, verbose_name=_('Link type') ) order_with_respect_to", "label": 0}, {"snippet_id": 3812, "code": "') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True) title=sqlobject.UnicodeCol(default=None) url=sqlobject.UnicodeCol(default=None) download_url", "label": 0}, {"snippet_id": 2755, "code": ".campaign_tag).all() no_campaign_count=0 unique_campaigns=0 for tup in campaign_count: campaign_stats=CampaignStatsDTO(tup) if campaign_stats.tag: dto.campaigns.append(campaign_stats) unique_campaigns ", "label": 0}, {"snippet_id": 2998, "code": "=current_app.config['MAPPER_LEVEL_ADVANCED'] if changeset_count > advanced_level: new_user.mapping_level=MappingLevel.ADVANCED.value elif intermediate_level < changeset_count < advanced_level: new_user", "label": 0}, {"snippet_id": 2652, "code": ".filter( Task.task_status==TaskStatus.VALIDATED.value ).distinct(Task.validated_by).count() dto.tasks_mapped=Task.query.filter( Task.task_status.in_( (TaskStatus.MAPPED.value, TaskStatus.VALIDATED.value)", "label": 0}, {"snippet_id": 1148, "code": " message object to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id", "label": 0}, {"snippet_id": 1149, "code": " to DTO \"\"\" dto=MessageDTO() dto.message_id=self.id dto.message=self.message dto.sent_date=self.date dto.read=self.read dto.subject=self.subject dto.project_id=self.project_id dto.task_id=self.task_id if", "label": 0}, {"snippet_id": 633, "code": " AttributeError(\"All objects must be the same class instance({})\".format(obj_class)) def _find_related_formations(objects, filters): _raise_if_incorrect_instance(objects) academic_year=_extract_common_academic_year", "label": 0}, {"snippet_id": 3710, "code": " 'INTERMEDIATE') except OSMServiceError: current_app.logger.error('Error attempting to update mapper level') return user.save() return user def notify_level_upgrade(user_id: int, username: str, level: str", "label": 0}, {"snippet_id": 3804, "code": "='name' name=sqlobject.UnicodeCol(alternateID=True) packages=sqlobject.MultipleJoin('Package') class PackageRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Package', cascade=True)", "label": 0}, {"snippet_id": 2195, "code": ")::TIME) FROM task_history WHERE action='LOCKED_FOR_MAPPING' and user_id={0};\"\"\".format(self.id) total_mapping_time=db.engine.execute(sql) for row in total_mapping_time: total_mapping_time=row[0] if total_mapping_time", "label": 1}, {"snippet_id": 2961, "code": "=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count): \"\"\" Creates user in", "label": 0}, {"snippet_id": 2898, "code": " user_all_cache=TTLCache(maxsize=1024, ttl=600) class UserServiceError(Exception): \"\"\" Custom Exception to notify callers an error occurred when in the User Service \"\"\" def __init__(self, message): if current_app", "label": 0}, {"snippet_id": 3162, "code": " time in total_validation_time: total_validation_time=time[0] if total_validation_time: stats_dto.time_spent_validating=total_validation_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_validating", "label": 0}, {"snippet_id": 1575, "code": ".facebook_id=user_dto.facebook_id.lower() if user_dto.facebook_id else None self.linkedin_id=user_dto.linkedin_id.lower() if user_dto.linkedin_id else None self.validation_message=user_dto.validation_message db", "label": 0}, {"snippet_id": 797, "code": "=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year", "label": 0}, {"snippet_id": 1522, "code": " get_by_username(self, username: str): \"\"\" Return the user for the specified username, or None if not found \"\"\" return User.query.filter_by(username=username).one_or_none() def update_username(self, username: str", "label": 0}, {"snippet_id": 76, "code": " from base.models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent", "label": 0}, {"snippet_id": 3060, "code": " user DTO for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user", "label": 0}, {"snippet_id": 1080, "code": "[to_user_id], backref='messages') project=db.relationship(Project, foreign_keys=[project_id], backref='messages') task=db.relationship(Task, primaryjoin=\"and_(Task.id==foreign(Message.task_id), Task.project_id", "label": 0}, {"snippet_id": 3355, "code": " UserRole(user.role) in[UserRole.VALIDATOR, UserRole.ADMIN, UserRole.PROJECT_MANAGER]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a user is blocked \"\"", "label": 0}, {"snippet_id": 1128, "code": ".to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None: message.message_type=MessageType(dto.message_type) return message def as_dto(self) ", "label": 0}, {"snippet_id": 2477, "code": " item in results.items: history=TaskHistoryDTO() history.history_id=item.id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date", "label": 0}, {"snippet_id": 559, "code": "\\ .exclude(name=GROUP_TYPE_OPTION).values_list('name', flat=True) root_categories=[education_group_categories.TRAINING] return{ 'parent__education_group_type__name': root_type_names, 'parent__education_group_type__category", "label": 0}, {"snippet_id": 877, "code": " group_elems_by_parent_id={} for group_elem_year in queryset: parent_id=group_elem_year.parent_id group_elems_by_parent_id.setdefault(parent_id,[]).append(group_elem_year) return group_elems_by_parent_id def _fetch_row_sql", "label": 0}, {"snippet_id": 348, "code": "=LearningComponentYear.objects.filter( learningunitcomponent__learning_unit_year=self.child_leaf).annotate( total=Case(When(hourly_volume_total_annual=None, then=0), default=F('hourly_volume_total_annual')))", "label": 0}, {"snippet_id": 2000, "code": " set_user_role(self, role: UserRole): \"\"\" Sets the supplied role on the user \"\"\" self.role=role.value db.session.commit() def set_mapping_level(self, level: MappingLevel): \"\"\" Sets the supplied level on the user", "label": 0}, {"snippet_id": 3291, "code": " Gets paginated list of users, filtered by username, for autocomplete \"\"\" return User.filter_users(username, project_id, page) @staticmethod def is_user_a_project_manager(user_id: int) -> bool: \"\"\" Is the", "label": 0}, {"snippet_id": 1119, "code": "=dto.subject message.message=dto.message message.from_user_id=dto.from_user_id message.to_user_id=to_user_id message.project_id=dto.project_id message.task_id=dto.task_id if dto.message_type is not None", "label": 0}, {"snippet_id": 2273, "code": ".services.project_service import ProjectService from server.services.users.user_service import UserService homepage_stats_cache=TTLCache(maxsize=4, ttl=30) class StatsService: @staticmethod def update_stats_after_task_state_change", "label": 0}, {"snippet_id": 747, "code": "=group_element_year['child_leaf']) result.setdefault(key,[]).append(group_element_year) return result def _build_child_key(child_branch=None, child_leaf=None): args=[child_leaf, child_branch] if not any(args) or all", "label": 0}, {"snippet_id": 1620, "code": " Enables or disables expert mode on the user\"\"\" self.is_expert=is_expert db.session.commit() @staticmethod def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Search and filter all users \"\"", "label": 0}, {"snippet_id": 3483, "code": " must be an Admin to assign Admin role') if admin_role==UserRole.PROJECT_MANAGER and requested_role==UserRole.PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role')", "label": 0}, {"snippet_id": 617, "code": " obj_class not in[LearningUnitYear, EducationGroupYear]: raise AttributeError(\"Objects must be either LearningUnitYear or EducationGroupYear intances.\") if any(obj for obj in objects if obj.__class__ !", "label": 0}, {"snippet_id": 462, "code": ".parent.ascendants_of_branch: raise ValidationError(_(\"It is forbidden to attach an element to one of its included elements.\")) if self.child_leaf and self.link_type==LinkTypes.REFERENCE.name: raise ValidationError", "label": 0}, {"snippet_id": 40, "code": " from base.models import education_group_type, education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base", "label": 0}, {"snippet_id": 477, "code": ".link_type==LinkTypes.REFERENCE.name: raise ValidationError( {'link_type': _(\"You are not allowed to create a reference with a learning unit\")} ) @cached_property def child(self): return self.child_branch", "label": 0}, {"snippet_id": 2695, "code": "() untagged_count=0 tasks_mapped_sql=\"select coalesce(sum(ST_Area(geometry)), 0) as sum from public.tasks where task_status=:task_status\" tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status", "label": 0}, {"snippet_id": 1319, "code": "\"\" Deletes the specified messages to the user \"\"\" Message.query.filter(Message.to_user_id==user_id, Message.id.in_(message_ids)).\\ delete(synchronize_session=False) db.session.commit() def delete(self)", "label": 0}, {"snippet_id": 3195, "code": " for time in total_mapping_time: total_mapping_time=time[0] if total_mapping_time: stats_dto.time_spent_mapping=total_mapping_time.total_seconds() stats_dto.total_time_spent +=stats_dto.time_spent_mapping", "label": 0}, {"snippet_id": 3273, "code": " \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str, project_id: int, page: int) -> UserFilterDTO: \"\"\" Gets paginated", "label": 0}, {"snippet_id": 3675, "code": "!= MappingLevel.ADVANCED.value): user.mapping_level=MappingLevel.ADVANCED.value UserService.notify_level_upgrade(user_id, user.username, 'ADVANCED') elif(intermediate_level < osm_details.changeset_count", "label": 0}, {"snippet_id": 3408, "code": " mapped or validated on \"\"\" user=UserService.get_user_by_username(user_name) return User.get_mapped_projects(user.id, preferred_locale) @staticmethod def add_role_to_user(admin_user_id: int, username: str", "label": 0}, {"snippet_id": 1052, "code": "=True) task_id=db.Column(db.Integer, index=True) message_type=db.Column(db.Integer, index=True) date=db.Column(db.DateTime, default=timestamp) read=db.Column(db.Boolean, default=False) from_user=db.relationship", "label": 0}, {"snippet_id": 2053, "code": ": int): \"\"\" Test to see if the user has accepted the terms of the specified license\"\"\" image_license=License.get_by_id(license_id) if image_license in self.accepted_licenses: return True return False def", "label": 0}, {"snippet_id": 2171, "code": " total_validation_time: total_validation_time=row[0] if total_validation_time: total_validation_seconds=total_validation_time.total_seconds() user_dto.time_spent_validating=total_validation_seconds user_dto", "label": 0}, {"snippet_id": 988, "code": " of messages a user might receive \"\"\" SYSTEM=1 BROADCAST=2 MENTION_NOTIFICATION=3 VALIDATION_NOTIFICATION=4 INVALIDATION_NOTIFICATION=5 class Message(db.Model): \"\"\" Describes an individual Message a user", "label": 0}, {"snippet_id": 3332, "code": " mapping level user is at\"\"\" user=UserService.get_user_by_id(user_id) return MappingLevel(user.mapping_level) @staticmethod def is_user_validator(user_id: int) -> bool: \"\"\" Determines if user is a validator \"", "label": 0}, {"snippet_id": 2710, "code": " tasks_mapped_result=db.engine.execute(text(tasks_mapped_sql), task_status=TaskStatus.MAPPED.value) dto.total_mapped_area=tasks_mapped_result.fetchone()['sum'] tasks_validated_sql=\"select coalesce(sum(ST_Area(geometry", "label": 0}, {"snippet_id": 2561, "code": " group by t.validated_by, u.username) v ON m.mapped_by=v.validated_by '''.format(project_id) results=db.engine.execute(contrib_query) if results.rowcount==0: raise NotFound() contrib_dto=ProjectContributionsDTO", "label": 1}, {"snippet_id": 259, "code": "( default=False, verbose_name=_('Access condition') ) comment=models.TextField( max_length=500, blank=True, null=True, verbose_name=_(\"comment\"), ) comment_english=models.TextField( max_length=500, blank", "label": 0}, {"snippet_id": 2297, "code": ", action='change'): \"\"\" Update stats when a task has had a state change \"\"\" if new_state in[TaskStatus.READY, TaskStatus.LOCKED_FOR_VALIDATION, TaskStatus.LOCKED_FOR_MAPPING]: return project=ProjectService", "label": 0}, {"snippet_id": 792, "code": " _find_elements(group_elements_by_child_id, filters, child_leaf_id=None, child_branch_id=None): roots=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents", "label": 0}, {"snippet_id": 162, "code": " GroupElementYear(OrderedModel): external_id=models.CharField(max_length=100, blank=True, null=True, db_index=True) changed=models.DateTimeField(null=True, auto_now=True) parent=models.ForeignKey( EducationGroupYear", "label": 0}, {"snippet_id": 2956, "code": " str) -> User: user=UserService.get_user_by_id(user_id) if user.username !=osm_username: user.update_username(osm_username) return user @staticmethod def register_user(osm_id, username, changeset_count)", "label": 0}, {"snippet_id": 2515, "code": " contributions on a project\"\"\" contrib_query='''select m.mapped_by, m.username, m.mapped, v.validated_by, v.username, v.validated from(select t.mapped_by, u.username, count(t.mapped_by) mapped from tasks", "label": 0}, {"snippet_id": 53, "code": " base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type, quadrimesters from base.models.enums.link_type import LinkTypes from base", "label": 0}, {"snippet_id": 2484, "code": ".id history.task_id=item.task_id history.action=item.action history.action_text=item.action_text history.action_date=item.action_date history.action_by=item.username activity_dto.activity.append(history", "label": 0}, {"snippet_id": 1444, "code": ".Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column(db.Boolean, default=False) is_expert=db.Column(db", "label": 0}, {"snippet_id": 2030, "code": " accept_license_terms(self, license_id: int): \"\"\" Associate the user in scope with the supplied license \"\"\" image_license=License.get_by_id(license_id) self.accepted_licenses.append(image_license) db.session.commit()", "label": 0}, {"snippet_id": 1949, "code": ") results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id=row[0]", "label": 1}, {"snippet_id": 765, "code": " if not any(args) or all(args): raise AttributeError('Only one of the 2 param must bet set(not both of them).') if child_leaf: branch_part='child_leaf' id_part=child_leaf else: branch_part='child_branch", "label": 0}, {"snippet_id": 3755, "code": "'Mapper Level Upgrade ' level_upgrade_message.message=text_template level_upgrade_message.save() @staticmethod def refresh_mapper_level() -> int: \"\"\" Helper function to run thru all users in the DB and", "label": 0}, {"snippet_id": 2798, "code": ".group_by(Project.organisation_tag).all() no_org_count=0 unique_orgs=0 for tup in org_proj_count: org_stats=OrganizationStatsDTO(tup) if org_stats.tag: dto.organizations.append(org_stats) unique_orgs +=1 else", "label": 0}, {"snippet_id": 3442, "code": " the role should be added to :param role: The requested role :raises UserServiceError \"\"\" try: requested_role=UserRole[role.upper()] except KeyError: raise UserServiceError(f'Unknown role{role} accepted", "label": 0}, {"snippet_id": 1217, "code": " a project \"\"\" query='''SELECT mapped_by as contributors from tasks where project_id={0} and mapped_by is not null UNION SELECT validated_by from tasks where tasks.project_id={0} and validated_by is not", "label": 1}, {"snippet_id": 2324, "code": " StatsService._update_tasks_stats(project, user, last_state, new_state, action) UserService.upsert_mapped_projects(user_id, project_id) project.last_updated=timestamp() return project, user @staticmethod", "label": 0}, {"snippet_id": 1440, "code": " default=0, nullable=False) tasks_invalidated=db.Column(db.Integer, default=0, nullable=False) projects_mapped=db.Column(db.ARRAY(db.Integer)) email_address=db.Column(db.String) is_email_verified=db.Column", "label": 0}, {"snippet_id": 661, "code": ": return{obj.id: _find_elements(parents_by_id, filters, child_leaf_id=obj.id) for obj in objects} else: return{obj.id: _find_elements(parents_by_id, filters, child_branch_id=obj.id) for obj in objects}", "label": 0}, {"snippet_id": 1948, "code": "'.format(user_id) results=db.engine.execute(sql) if results.rowcount==0: raise NotFound() mapped_projects_dto=UserMappedProjectsDTO() for row in results: mapped_project=MappedProject() mapped_project.project_id", "label": 1}, {"snippet_id": 1653, "code": "(User.mapping_level==MappingLevel[query.mapping_level.upper()].value) if query.username: base=base.filter(User.username.ilike(query.username.lower() +'%')) if query.role: base=base.filter(User.role==UserRole", "label": 0}, {"snippet_id": 3498, "code": " must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level(username: str, level: str) ", "label": 0}, {"snippet_id": 3266, "code": " def get_all_users(query: UserSearchQuery) -> UserSearchDTO: \"\"\" Gets paginated list of users \"\"\" return User.get_all_users(query) @staticmethod @cached(user_filter_cache) def filter_users(username: str", "label": 0}, {"snippet_id": 3061, "code": " for supplied user id \"\"\" requested_user=UserService.get_user_by_id(requested_user) return requested_user.as_dto(requested_user.username) @staticmethod def get_detailed_stats(username: str): user=UserService", "label": 0}, {"snippet_id": 2926, "code": " get_user_by_id(user_id: int) -> User: user=User().get_by_id(user_id) if user is None: raise NotFound() return user @staticmethod def get_user_by_username(username: str) -> User: user=User().get_by_username", "label": 0}, {"snippet_id": 2381, "code": " new_state==TaskStatus.VALIDATED: user.tasks_validated +=1 elif new_state==TaskStatus.INVALIDATED: user.tasks_invalidated +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state=", "label": 0}, {"snippet_id": 46, "code": " education_group_year from base.models.education_group_type import GROUP_TYPE_OPTION from base.models.education_group_year import EducationGroupYear from base.models.enums import education_group_categories, link_type,", "label": 0}, {"snippet_id": 3782, "code": " try: import vdm.sqlobject.base as vdmbase from vdm.sqlobject.base import State except: import vdm.base as vdmbase from vdm.base import State class License(sqlobject.SQLObject): class sqlmeta: _defaultOrder", "label": 0}, {"snippet_id": 1345, "code": " MappedProject, UserFilterDTO, Pagination, \\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis", "label": 0}, {"snippet_id": 2912, "code": " when in the User Service \"\"\" def __init__(self, message): if current_app: current_app.logger.error(message) class UserService: @staticmethod def get_user_by_id(user_id: int) -> User: user=User().get_by_id", "label": 0}, {"snippet_id": 3555, "code": " expert mode for the user :raises: UserServiceError \"\"\" user=UserService.get_user_by_id(user_id) user.set_is_expert(is_expert) return user @staticmethod def accept_license_terms(user_id: int, license_id", "label": 0}, {"snippet_id": 401, "code": ": return self.comment_english return self.comment class Meta: ordering=('order',) def save(self, force_insert=False, force_update=False, using=None, update_fields=None): self.clean() return super().save", "label": 0}, {"snippet_id": 3372, "code": " user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY: return True return False @staticmethod def upsert_mapped_projects(user_id: int, project_id: int): \"\"\" Add project to", "label": 0}, {"snippet_id": 1877, "code": ".status, p.default_locale, c.mapped, c.validated, st_asgeojson(p.centroid) FROM projects p, (SELECT coalesce(v.project_id, m.project_id) project_id, coalesce(v.validated, 0) validated, coalesce(m.mapped,", "label": 0}, {"snippet_id": 79, "code": ".models.learning_unit_year import LearningUnitYear from osis_common.models.osis_model_admin import OsisModelAdmin class GroupElementYearAdmin(VersionAdmin, OsisModelAdmin): list_display=('parent', 'child_branch", "label": 0}, {"snippet_id": 3358, "code": "]: return True return False @staticmethod def is_user_blocked(user_id: int) -> bool: \"\"\" Determines if a user is blocked \"\"\" user=UserService.get_user_by_id(user_id) if UserRole(user.role)==UserRole.READ_ONLY", "label": 0}, {"snippet_id": 419, "code": ": self.clean() return super().save(force_insert, force_update, using, update_fields) def clean(self): if self.child_branch and self.child_leaf: raise ValidationError(_(\"It is forbidden to save a GroupElementYear", "label": 0}, {"snippet_id": 3493, "code": ".PROJECT_MANAGER: raise UserServiceError(f'You must be an Admin to assign Project Manager role') user=UserService.get_user_by_username(username) user.set_user_role(requested_role) @staticmethod def set_user_mapping_level", "label": 0}, {"snippet_id": 86, "code": " OsisModelAdmin): list_display=('parent', 'child_branch', 'child_leaf',) readonly_fields=('order',) search_fields=[ 'child_branch__acronym', 'child_branch__partial_acronym', 'child_leaf__acronym', 'parent__acronym", "label": 0}, {"snippet_id": 375, "code": ".child.complete_title_english and translation.get_language()=='en' else self.child.complete_title, volume_total_verbose(components), self.relative_credits or self.child_leaf.credits or 0, _(\"credits\"),", "label": 0}, {"snippet_id": 3736, "code": "=text_template.replace('[USERNAME]', username) text_template=text_template.replace('[LEVEL]', level) level_upgrade_message=Message() level_upgrade_message.to_user_id=user_id level_upgrade_message.subject", "label": 0}, {"snippet_id": 3932, "code": "=str(text_query) sql_query=\"UPPER(tag.name) LIKE UPPER('%%%s%%')\" % text_query_str return self.select(sql_query) class PackageTag(vdmbase.VersionedDomainObject): sqlobj_version_class=PackageTagRevision", "label": 1}, {"snippet_id": 2, "code": " from django.core.exceptions import ValidationError from django.db import models, connection from django.db.models import Q, F, Case, When from django.utils import translation from django.utils.functional", "label": 0}, {"snippet_id": 316, "code": ") order_with_respect_to='parent' objects=GroupElementYearManager() def __str__(self): return \"{} -{}\".format(self.parent, self.child) @property def verbose(self): if self.child_branch: return \"{}({}{})", "label": 0}, {"snippet_id": 799, "code": "=[] unique_child_key=_build_child_key(child_leaf=child_leaf_id, child_branch=child_branch_id) group_elem_year_parents=group_elements_by_child_id.get(unique_child_key) or[] for group_elem_year in group_elem_year_parents", "label": 0}, {"snippet_id": 1349, "code": "\\ UserSearchQuery, UserSearchDTO, ProjectParticipantUser, ListedUser from server.models.postgis.licenses import License, users_licenses_table from server.models.postgis.project_info import ProjectInfo from", "label": 0}, {"snippet_id": 2391, "code": " +=1 if last_state==TaskStatus.MAPPED: project.tasks_mapped -=1 elif last_state==TaskStatus.VALIDATED: project.tasks_validated -=1 elif last_state==TaskStatus.BADIMAGERY: project.tasks_bad_imagery -=1 if", "label": 0}, {"snippet_id": 3836, "code": ".UnicodeCol(default=None) license=sqlobject.ForeignKey('License', default=None) notes=sqlobject.UnicodeCol(default=None) class TagRevision(vdmbase.ObjectRevisionSQLObject): base=sqlobject.ForeignKey('Tag'", "label": 0}]