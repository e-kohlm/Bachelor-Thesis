[{"snippet_id": 46044, "code": " request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg']=('There are no", "label": 0}, {"snippet_id": 69554, "code": " sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os.path.join(prefix, 'bin', 'tljh-config') tljh_config_dest='/usr", "label": 0}, {"snippet_id": 28333, "code": " duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after", "label": 0}, {"snippet_id": 67120, "code": ").order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count", "label": 0}, {"snippet_id": 15033, "code": "=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source[1], source[2:] ts['source_model_name']=source_model_name ts[", "label": 0}, {"snippet_id": 38951, "code": " def extracted_docs(self): return self.datadocument_set.filter(extracted=True).count() def __str__(self): return self.name def get_absolute_url(self): return reverse('data_group_edit', kwargs={'pk': self", "label": 0}, {"snippet_id": 47186, "code": "): columnlist=['extracted_text_id','id','raw_cas','raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group", "label": 0}, {"snippet_id": 72330, "code": "(RESTController): def list(self): status_dict=Ganesha.get_daemons_status() if status_dict: return[ { 'daemon_id': daemon_id, 'cluster_id': cluster_id, 'status': status_dict[cluster_id][daemon_id]['status", "label": 0}, {"snippet_id": 4088, "code": ".\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id", "label": 0}, {"snippet_id": 61598, "code": "=validate_hsts_entire_domain(pshtt_results['HSTS Entire Domain']), hsts_preloaded=pshtt_results['HSTS Preloaded'], subdomain=validate_subdomain(securedrop.landing_page_url), no_cookies=validate_no_cookies", "label": 1}, {"snippet_id": 59062, "code": ":tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404(user, **kwargs): ''' Do a search for invite by passed parameters and user. NOTE: this function firstly try to get invite", "label": 0}, {"snippet_id": 18687, "code": "\tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"\" \tdef post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tcheck_details", "label": 1}, {"snippet_id": 25290, "code": " there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients", "label": 0}, {"snippet_id": 69650, "code": "(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()))) if conda_packages: logger.info('Installing{} conda packages collected from plugins:{}'.format( len(conda_packages)", "label": 0}, {"snippet_id": 12846, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else", "label": 0}, {"snippet_id": 79776, "code": "'] if organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 53655, "code": " string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except", "label": 1}, {"snippet_id": 59739, "code": "().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries", "label": 0}, {"snippet_id": 75135, "code": " title is correct in the information section below.') if _user_keywords_changed(thesis, request.POST.getlist('keywords',[])): messages.info(request, 'Your keywords contained invisible characters that we", "label": 0}, {"snippet_id": 26239, "code": ".redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password, config=self._config) assert", "label": 0}, {"snippet_id": 35815, "code": " request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def", "label": 0}, {"snippet_id": 48983, "code": "'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk)", "label": 0}, {"snippet_id": 66976, "code": " DetailView from.forms import SearchForm from lib.vt import VT from lib.threatminer import ThreatMiner from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation", "label": 0}, {"snippet_id": 30072, "code": " grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'id'", "label": 0}, {"snippet_id": 67154, "code": ")).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count']=count return context def getpcap(request, pk): response=HttpResponse(VT().getPcap(pk), content_type=\"application", "label": 0}, {"snippet_id": 39003, "code": "' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This", "label": 0}, {"snippet_id": 70009, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 3793, "code": ".locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def", "label": 0}, {"snippet_id": 41, "code": " django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files", "label": 0}, {"snippet_id": 11332, "code": "'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments:", "label": 0}, {"snippet_id": 54949, "code": ",chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\", \"+str(book_edition)+\", \"+str(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups", "label": 1}, {"snippet_id": 55888, "code": " \t\t\t\tr=r.common_parent(item) \t\treturn r \tdef filter(self,pattern): \t\treturn fnmatch.filter(self,pattern) if __name__==\"__main__\": \tprint \"current has \" \tfor item in current(): \t\tprint item.path \tprint ", "label": 0}, {"snippet_id": 83544, "code": ".forms import ArticleForm from wiki.models import Article, ChangeSet, dmp from wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re", "label": 0}, {"snippet_id": 34845, "code": ", 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response", "label": 0}, {"snippet_id": 24425, "code": " A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name", "label": 1}, {"snippet_id": 72427, "code": " maximum value of 5: \" \"input depth=%s\", depth) depth=5 root_dir='{}/'.format(root_dir) \\ if not root_dir.endswith('/') else root_dir try: cfs=CephFS() paths=cfs.get_dir_list(root_dir, depth) paths=[p[:", "label": 0}, {"snippet_id": 1031, "code": " os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime", "label": 0}, {"snippet_id": 70945, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 28640, "code": " \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The resources dictionary must not \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU\"]=(default_num_cpus", "label": 0}, {"snippet_id": 31654, "code": " in settings.LANGUAGES]: if request.user.is_authenticated(): request.user.locale=locale request.user.save() max_age=10 * 365 * 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME, locale, max_age", "label": 0}, {"snippet_id": 19325, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import redis import time import ray.ray_constants as", "label": 1}, {"snippet_id": 49977, "code": "'currentFile']=name if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] savepath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(savepath, exist_ok=True)", "label": 0}, {"snippet_id": 20531, "code": ") redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port", "label": 1}, {"snippet_id": 52845, "code": " Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING", "label": 0}, {"snippet_id": 73658, "code": "/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') def parse_position_return_dictionary", "label": 0}, {"snippet_id": 63272, "code": " appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code, 302) self", "label": 0}, {"snippet_id": 59564, "code": " if self.plugins_dir: for filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError", "label": 0}, {"snippet_id": 81113, "code": "'Unable to register: '+str(e)) referer=str(http.request.httprequest.headers.environ['HTTP_REFERER']) redirect=str('/'+referer.split('/')[-1]) return http.request.redirect(redirect) def _update_counter_subscription", "label": 1}, {"snippet_id": 30278, "code": "(url, 'GET')[1]) if result.get('error') is not None: response=make_response(json.dumps(result.get('error')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials", "label": 0}, {"snippet_id": 84182, "code": " group_slug is not None: initial.update({'content_type': group_ct.id, 'object_id': group.id}) if article is None: initial.update({'title': title, 'action': 'create'}) form=ArticleFormClass(initial=initial) else", "label": 0}, {"snippet_id": 45589, "code": " a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''", "label": 0}, {"snippet_id": 36866, "code": "=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month')", "label": 0}, {"snippet_id": 71628, "code": "=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !=old_sid) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def", "label": 0}, {"snippet_id": 43091, "code": ".client.get(f'/qa/chemicalpresence/') self.assertIn( f\"/qa/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content) response=self.client.get( f'/qa/chemicalpresencegroup/49", "label": 0}, {"snippet_id": 6441, "code": " False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the auth code for actual credentials, then redirect to the originally requested page. \"\"\" try:", "label": 0}, {"snippet_id": 65624, "code": " 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk.ResponseType.OK", "label": 0}, {"snippet_id": 13366, "code": " openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features", "label": 0}, {"snippet_id": 25833, "code": ": \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name", "label": 0}, {"snippet_id": 15764, "code": " commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']) def view_run_add(field", "label": 0}, {"snippet_id": 9061, "code": ".accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api", "label": 0}, {"snippet_id": 42927, "code": " pk=ExtractedText.objects.filter(extraction_script=scr).first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get", "label": 0}, {"snippet_id": 72720, "code": " user) return redirect('home') if request.GET.get('key') is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken", "label": 1}, {"snippet_id": 74355, "code": ".render_to_response(context) def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self.request.user: logger.warn", "label": 0}, {"snippet_id": 38346, "code": " from.document_type import DocumentType from.data_document import DataDocument from.ingredient import Ingredient from.product import Product from.source_category import SourceCategory from.product_document", "label": 0}, {"snippet_id": 13612, "code": "'ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not", "label": 0}, {"snippet_id": 56823, "code": ") else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail(request, *args, **kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs", "label": 0}, {"snippet_id": 56379, "code": ".response=client.get(reverse('experience-redirect', args=[share_id])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response['Location']=", "label": 0}, {"snippet_id": 35988, "code": "(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default='') description=models.TextField(null=False,", "label": 0}, {"snippet_id": 30411, "code": "'name'] login_session['picture']=data['picture'] login_session['email']=data['email'] output='' output +='<h1>Welcome, ' output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output", "label": 0}, {"snippet_id": 52227, "code": " team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods", "label": 0}, {"snippet_id": 83270, "code": " ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +'$') class ArticleForm", "label": 0}, {"snippet_id": 49469, "code": ".POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\")", "label": 0}, {"snippet_id": 74565, "code": "(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def", "label": 0}, {"snippet_id": 48950, "code": "=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none()", "label": 0}, {"snippet_id": 63120, "code": " test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time.time()) self.assertTrue(now -then", "label": 0}, {"snippet_id": 73388, "code": " LoginForm, CreatePositionForm, ImportApplicationsForm, ImportApplicationsText from.models import EmailAuthenticateToken, Position from screendoor.parseposter import parse_upload from screendoor.redactor", "label": 1}, {"snippet_id": 35907, "code": ".pk) return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_delete(request, pk): p=Product.objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required", "label": 0}, {"snippet_id": 67922, "code": ".db.models import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import", "label": 0}, {"snippet_id": 84321, "code": ", is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value", "label": 0}, {"snippet_id": 2638, "code": "=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request)", "label": 0}, {"snippet_id": 4005, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location", "label": 1}, {"snippet_id": 26376, "code": " then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises", "label": 0}, {"snippet_id": 5756, "code": " image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range", "label": 0}, {"snippet_id": 61684, "code": ", commit=False) -> ScanResult: \"\"\" Scan a single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument,", "label": 1}, {"snippet_id": 25322, "code": " message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler=self.xray_driver_removed_handler else: raise Exception(\"This code should be unreachable.", "label": 0}, {"snippet_id": 69876, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'", "label": 0}, {"snippet_id": 51449, "code": "=exitcode def fail(*args, **kwargs): ''' fail(message, exitcode=1) Abort the build with an error message. ''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the", "label": 0}, {"snippet_id": 38151, "code": " Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' ", "label": 0}, {"snippet_id": 38556, "code": " ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank=True,", "label": 0}, {"snippet_id": 21250, "code": ".start_redis() self.start_monitor() self.start_raylet_monitor() self.start_plasma_store() self.start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui", "label": 0}, {"snippet_id": 24189, "code": " thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__", "label": 1}, {"snippet_id": 30525, "code": "=login_session[ 'email'], picture=login_session['picture']) session.add(newUser) session.commit() user=session.query(User).filter_by(email=login_session['email']).one() return user.id def getUserInfo(user_id):", "label": 1}, {"snippet_id": 29630, "code": " @gallery.route('/gallery/<string:tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all() else: split=tags.split(' ') posts=[] for s in split: results=Post.query.filter(Post.tags.any(name", "label": 0}, {"snippet_id": 23254, "code": " or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\")", "label": 0}, {"snippet_id": 69209, "code": "-extension', '@jupyter-widgets/jupyterlab-manager' ] subprocess.check_output([ os.path.join(USER_ENV_PREFIX, 'bin/jupyter'), 'labextension', 'install' ] +extensions) def ensure_jupyterhub_package(prefix): ", "label": 0}, {"snippet_id": 64917, "code": " of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5, 6], last=8)==None''\") parser.add_argument('-v', '--verbose", "label": 0}, {"snippet_id": 17826, "code": "(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password was reset. Log in now.'), 'info') return flask", "label": 0}, {"snippet_id": 11001, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field", "label": 0}, {"snippet_id": 26735, "code": " def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in", "label": 0}, {"snippet_id": 41849, "code": ".objects.gt.save() response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form", "label": 0}, {"snippet_id": 13851, "code": " enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions", "label": 0}, {"snippet_id": 17665, "code": " flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('register.html', form=form", "label": 0}, {"snippet_id": 30316, "code": " given user ID.\"), 401) response.headers['Content-Type']='application/json' return response if result['issued_to'] !=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\")", "label": 0}, {"snippet_id": 47347, "code": "'data_source/datasource_detail.html'): datasource=get_object_or_404(DataSource, pk=pk,) docs=DataDocument.objects.filter(data_group__in=DataGroup.objects.filter(data_source=datasource)) datasource.registered", "label": 0}, {"snippet_id": 2295, "code": ".path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\"", "label": 1}, {"snippet_id": 48989, "code": " @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form", "label": 0}, {"snippet_id": 48768, "code": ".exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={", "label": 0}, {"snippet_id": 14907, "code": " return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results') def view_results(", "label": 0}, {"snippet_id": 18467, "code": "\tMongoDB database by calling hash_password() and do_insert() respectively. \tFinally, sets the secure cookie and logs in the user. \t\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\")", "label": 1}, {"snippet_id": 2789, "code": " nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'", "label": 1}, {"snippet_id": 68412, "code": ", UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q, Count from.models import tweet, Hunt from.forms import HuntForm import csv from io import StringIO, BytesIO", "label": 0}, {"snippet_id": 48334, "code": "{'data_sources': data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products", "label": 0}, {"snippet_id": 73361, "code": ".mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import", "label": 0}, {"snippet_id": 37262, "code": " required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}", "label": 0}, {"snippet_id": 69462, "code": " range(times): try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1)", "label": 0}, {"snippet_id": 54, "code": " serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 83831, "code": "=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title')", "label": 0}, {"snippet_id": 69012, "code": "----END PGP PUBLIC KEY BLOCK----- \"\"\".strip() apt.trust_gpg_key(key) apt.add_source('nodesource', 'https://deb.nodesource.com/node_10.x', 'main') apt.install_packages(['nodejs']) def remove_chp(): \"\"\" Ensure", "label": 0}, {"snippet_id": 41718, "code": " the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str", "label": 0}, {"snippet_id": 67115, "code": "]=count context['attributes']=Attribute.objects.filter(Q(value__icontains=filehash)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws", "label": 0}, {"snippet_id": 18925, "code": " for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\": if request.user.role", "label": 1}, {"snippet_id": 2039, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +", "label": 0}, {"snippet_id": 62419, "code": " the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"", "label": 0}, {"snippet_id": 30189, "code": ".ascii_uppercase +string.digits) for x in xrange(32)) login_session['state']=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']) def gconnect(): if request.args.get(", "label": 1}, {"snippet_id": 58890, "code": " course, instructor, email, invite_type, enroll_unit_code): user=Invite.search_user_by_email(email) try: old_invite=Invite.get_by_user_or_404( user=user, type=invite_type, course=course, instructor=instructor", "label": 0}, {"snippet_id": 35265, "code": ": products}) @login_required() def link_product_list(request, pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull", "label": 0}, {"snippet_id": 84395, "code": " group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs", "label": 0}, {"snippet_id": 8587, "code": " if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date'", "label": 0}, {"snippet_id": 77312, "code": "\\s*:\") result=p.sub(r'\\g<1>\"\\g<2>\":', result) return json.loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target", "label": 0}, {"snippet_id": 61410, "code": ":type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return", "label": 0}, {"snippet_id": 82051, "code": ".html',{'form': JustURLForm, 'message': message}) created=JustURL.objects.create(input_url=url, short_url=f'{request.get_host()}/{short_url}', category=category) created.save() if request.user.is_superuser", "label": 0}, {"snippet_id": 75801, "code": " import re from django.db import models from django.utils.translation import ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs", "label": 0}, {"snippet_id": 876, "code": " HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django", "label": 1}, {"snippet_id": 4121, "code": " test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password", "label": 0}, {"snippet_id": 81100, "code": " partner, subscription_update_counter) else: _logger.info('No seats available') except ValidationError as e: _logger.error('Unable to register: '+str(e)) referer=str(http.request.httprequest.headers.environ", "label": 0}, {"snippet_id": 78001, "code": "=package_id, security_classification=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency", "label": 0}, {"snippet_id": 38293, "code": "=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC", "label": 0}, {"snippet_id": 52397, "code": " database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None) phase_code=request.form", "label": 0}, {"snippet_id": 45383, "code": " we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response", "label": 0}, {"snippet_id": 6423, "code": "']: logger.error('Invalid google apps domain') return False if not id_token.get('email_verified', False) and \\ self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False", "label": 0}, {"snippet_id": 64102, "code": " state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id is None", "label": 0}, {"snippet_id": 30350, "code": ".get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current user is already connected", "label": 0}, {"snippet_id": 73992, "code": ": -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials should define", "label": 0}, {"snippet_id": 25382, "code": " memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self", "label": 0}, {"snippet_id": 24416, "code": " process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a", "label": 1}, {"snippet_id": 62473, "code": "(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time", "label": 0}, {"snippet_id": 5297, "code": "\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 64375, "code": " state.sync() location=get_location(http_info) session.clear() return redirect(location) current_app.logger.error('No SAMLResponse or SAMLRequest parameter found') abort(400) @authn_views.route('/token", "label": 0}, {"snippet_id": 64101, "code": "(user)) state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id", "label": 0}, {"snippet_id": 71115, "code": " import models from engineauth import utils from engineauth.config import load_config import re from webob import Response from webob import Request class EngineAuthResponse(Response): def _save_session", "label": 0}, {"snippet_id": 57223, "code": "']=transaction return render(request, 'transactions/transaction_detail.html', extra_context) @login_required def transaction_edit(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated", "label": 0}, {"snippet_id": 76949, "code": "(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs %s\", str(im_src.size), str(im_dest.size)) logger.debug(\"Mode %s vs %s\", str(im_src.mode),", "label": 0}, {"snippet_id": 25254, "code": "=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages", "label": 0}, {"snippet_id": 7184, "code": "'ita_ind', 'group_exam_ind' ] column_searchable_list={'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', 'ita_ind',", "label": 1}, {"snippet_id": 41957, "code": ".context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') self.objects.dg.group_type=GroupType.objects.create( title='Habits and practices') response=self.client.get(f'/datagroup/", "label": 0}, {"snippet_id": 65290, "code": "*kwargs) keepassgtk.config_manager.configure() self.assemble_window() def assemble_window(self): self.set_default_size(800, 500) self.create_headerbar() self.first_start_screen() self.connect(\"delete-event\",", "label": 0}, {"snippet_id": 57882, "code": " onboarding_setting: c_onboarding_settings().insert({'name': setting_name, 'data': ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT[setting_name] return onboarding_setting", "label": 0}, {"snippet_id": 72401, "code": "'/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if depth > 5: logger.warning", "label": 0}, {"snippet_id": 21657, "code": ", kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type", "label": 0}, {"snippet_id": 59752, "code": "( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name", "label": 0}, {"snippet_id": 75430, "code": " FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) if request.method=='POST': form=GradschoolChecklistForm(request.POST) if form.is_valid(): form.save_data(candidate) return HttpResponseRedirect", "label": 0}, {"snippet_id": 42198, "code": " should be present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green", "label": 0}, {"snippet_id": 34005, "code": "('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its", "label": 0}, {"snippet_id": 22575, "code": " dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute", "label": 0}, {"snippet_id": 58414, "code": " onboarding.CREATE_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" } }, onboarding.NEXT_STEPS:{ \"done\": False", "label": 0}, {"snippet_id": 52732, "code": ".conf import settings from realpal.apps.chat.models import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel from realpal", "label": 1}, {"snippet_id": 67571, "code": ".append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)", "label": 0}, {"snippet_id": 30292, "code": "')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn", "label": 0}, {"snippet_id": 776, "code": " files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user", "label": 0}, {"snippet_id": 35712, "code": " product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form", "label": 0}, {"snippet_id": 40942, "code": " setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_absent_extracted_text(self): for dd in DataDocument.objects.all(): ddid=dd.id resp=self.client.get('/datadocument/%s/", "label": 0}, {"snippet_id": 23681, "code": "=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler", "label": 1}, {"snippet_id": 3425, "code": " \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string", "label": 0}, {"snippet_id": 50975, "code": " get_optional_steps(self): return(step.name for step in self._steps if self.is_optional) def specify_optional_steps(self, *steps): ''' Specify which optional steps to include in the build. \"default\" includes", "label": 0}, {"snippet_id": 62203, "code": "-1\") def validate_cache_control_set(page): if 'Cache-Control' in page.headers: return True else: return False def validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate", "label": 0}, {"snippet_id": 2916, "code": "('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings(", "label": 0}, {"snippet_id": 20589, "code": " ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name, get_raylet_socket_name, new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file", "label": 0}, {"snippet_id": 17254, "code": " i.score=field try: i.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) i.save()", "label": 0}, {"snippet_id": 75321, "code": ", request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) return render(request, 'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods", "label": 0}, {"snippet_id": 57860, "code": " Argument: setting_name(str): name of setting e.g. `create_course` Return: dict object with the data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\" try: ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError", "label": 0}, {"snippet_id": 69830, "code": " HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse", "label": 1}, {"snippet_id": 40614, "code": "-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode(", "label": 0}, {"snippet_id": 58103, "code": ".STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding", "label": 1}, {"snippet_id": 26377, "code": " process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises", "label": 0}, {"snippet_id": 47298, "code": "=DataSource.objects.annotate(registered=registered).annotate(uploaded=uploaded, extracted=extracted) out=zip(ds_list, frm_list) if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST", "label": 0}, {"snippet_id": 55334, "code": ",gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat", "label": 0}, {"snippet_id": 30339, "code": " client ID does not match app's.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id')", "label": 0}, {"snippet_id": 1997, "code": "</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 16181, "code": " template with the round\"\"\" t=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) context={'tournament': t, 'round': r} return render(request, 'rounds/%s.html' %", "label": 0}, {"snippet_id": 46298, "code": "'ext_err']: [e[1].delete() for e in good_records] return render(request, template_name, context) if not context['ext_err']: for doc,text,record in good_records: doc.extracted=True doc.save() text.save(", "label": 0}, {"snippet_id": 71789, "code": "=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) auth_id='test:abc' user_info=", "label": 0}, {"snippet_id": 67456, "code": "=EventSearchForm(self.request.GET) context['search_form']=search_form context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self", "label": 0}, {"snippet_id": 73452, "code": "'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account", "label": 0}, {"snippet_id": 34267, "code": " self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_chem=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name\"]') wait=WebDriverWait", "label": 0}, {"snippet_id": 40257, "code": ".pk).count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects.filter(extractedtext__qa_checked=True, extractedtext__extraction_script=self.pk).count() def get_pct_checked(self", "label": 0}, {"snippet_id": 6525, "code": "\"You must log in with an account from the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']", "label": 0}, {"snippet_id": 28455, "code": " bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def", "label": 0}, {"snippet_id": 3053, "code": " 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE", "label": 0}, {"snippet_id": 47847, "code": "'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template", "label": 0}, {"snippet_id": 66514, "code": ").add_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile chosen\") self.logging_manager.log_debug(\"Keyfile path", "label": 0}, {"snippet_id": 80717, "code": "(self, checked): print('Starting BiFi scan...') self.matisse.birefringent_filter_scan() @handled_slot(bool) def start_thin_etalon_scan(self, checked): print('Starting thin etalon scan...') self.matisse", "label": 0}, {"snippet_id": 9722, "code": " configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\"", "label": 0}, {"snippet_id": 37126, "code": " self.fields['csv'].widget.attrs.update({'accept': '.csv'}) self.fields['download_script'].queryset=qs class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField", "label": 0}, {"snippet_id": 57009, "code": "=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by('-id') return self.queryset def get_available_concepts", "label": 0}, {"snippet_id": 30074, "code": ") user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'id': self.id, 'name': self.name,", "label": 0}, {"snippet_id": 75626, "code": " return[{'text': 'Previously Used', 'children': _select2_list(keywords)}] else: return[] def _build_fast_url(term, index): url='%s?query=%s&queryIndex=%s' %(settings.FAST_LOOKUP_BASE_URL, urllib.parse.quote", "label": 0}, {"snippet_id": 47729, "code": ")).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid", "label": 0}, {"snippet_id": 67210, "code": " apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name", "label": 0}, {"snippet_id": 4158, "code": ".test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client", "label": 0}, {"snippet_id": 21818, "code": " import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to connect to. If", "label": 0}, {"snippet_id": 15484, "code": ": entry.number_of_days.data, 'delta': entry.delta.data }) return result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form", "label": 0}, {"snippet_id": 15810, "code": ", methods=['POST']) def view_run_remove(field): run_form=get_run_form() run_form[field].pop_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands':", "label": 0}, {"snippet_id": 58362, "code": ">view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", ", "label": 0}, {"snippet_id": 44939, "code": " data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', ", "label": 0}, {"snippet_id": 72698, "code": " form=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request", "label": 1}, {"snippet_id": 34163, "code": " card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa", "label": 0}, {"snippet_id": 48162, "code": ".models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets", "label": 1}, {"snippet_id": 25491, "code": "\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\",", "label": 0}, {"snippet_id": 19424, "code": " self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore", "label": 1}, {"snippet_id": 41931, "code": "\"Bulk create button should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects.create(document=doc, product=p) response=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 25008, "code": " in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources", "label": 0}, {"snippet_id": 22865, "code": ".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...)", "label": 0}, {"snippet_id": 55954, "code": ", status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode()) return response def experience_redirect(request, experience_share_id): dynamic_link", "label": 0}, {"snippet_id": 57300, "code": ": transaction.delete() return redirect('index') if valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect", "label": 0}, {"snippet_id": 18184, "code": ",\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print \"[-]Domain is invalid\"\r \r if is_closed==False:\r file.close()\r print(\"\\n--Done --\")\r \r start(", "label": 1}, {"snippet_id": 57271, "code": " redirect('message', message=gettext('Transaction Closed')) available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts']=available_concepts if request.method=", "label": 0}, {"snippet_id": 48779, "code": ".filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value(", "label": 0}, {"snippet_id": 23040, "code": " by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def", "label": 0}, {"snippet_id": 42692, "code": " class TestQaPage(TestCase): fixtures=fixtures_standard def setUp(self): self.factory=RequestFactory() self.client.login(username='Karyn', password='specialP@55word') def test_qa_begin(self): \"\"\" Check", "label": 0}, {"snippet_id": 80603, "code": "} nm...\") self.matisse.set_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_approx_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set", "label": 0}, {"snippet_id": 49755, "code": " return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session: email=session['email'] elif 'social' in session: email=session[", "label": 0}, {"snippet_id": 3928, "code": " response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', })", "label": 0}, {"snippet_id": 13839, "code": "'data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that", "label": 0}, {"snippet_id": 31292, "code": "/localhost:4200') SOCIAL_AUTH_LOGIN_URL='/login' SOCIAL_AUTH_PIPELINE=( 'social.pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed'", "label": 1}, {"snippet_id": 37306, "code": "'estimated_records', 'state', 'priority', 'description'] class PriorityForm(forms.ModelForm): class Meta: model=DataSource fields=['priority'] def __init__(self, *args, **kwargs): super(PriorityForm, self", "label": 0}, {"snippet_id": 23017, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A", "label": 0}, {"snippet_id": 80508, "code": "') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in item, stack) dialog=QMessageBox(icon=QMessageBox.Critical) dialog.setWindowTitle('Error') dialog.setText(f\"{description ", "label": 0}, {"snippet_id": 81937, "code": "=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm", "label": 0}, {"snippet_id": 46354, "code": ")) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 for doc in docs_needing_products", "label": 0}, {"snippet_id": 36847, "code": " document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte", "label": 0}, {"snippet_id": 53343, "code": ".join( [project.id.replace('.', '-')] + step.filename.rsplit('.', 1)[0].split(os.sep) ) ) def exec_test(): step.test_locals=dict() step.test_locals.update(module.__dict__) exec(code, step.test_locals) try", "label": 0}, {"snippet_id": 7908, "code": " context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link", "label": 0}, {"snippet_id": 12607, "code": ".provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\"", "label": 0}, {"snippet_id": 9178, "code": " form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0", "label": 0}, {"snippet_id": 47281, "code": "'datagroup__datadocument') uploaded =Count('datagroup__datadocument', filter=Q(datagroup__datadocument__matched=True)) extracted =Count('datagroup__datadocument__extractedtext') ds_list =DataSource.objects", "label": 0}, {"snippet_id": 1553, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a><", "label": 0}, {"snippet_id": 31669, "code": " 365 * 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME, locale, max_age=max_age, expires=(datetime.utcnow() +timedelta(seconds=max_age)).strftime( '%a, %d-%b-%Y %H:%M:%S GMT'), domain=settings", "label": 0}, {"snippet_id": 50865, "code": " defaults_dict): result=dict(defaults_dict) for key, value in kwarg_dict.items(): if key in result: result[key]=value else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)", "label": 0}, {"snippet_id": 18093, "code": "'reset_link': reset_link, 'user': user } email_msg=email.EmailHolder( subject='{} password reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset-request", "label": 0}, {"snippet_id": 249, "code": "\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots", "label": 0}, {"snippet_id": 13966, "code": "'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party", "label": 0}, {"snippet_id": 37759, "code": " False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 4566, "code": "=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 52472, "code": ".title, \"pNotes\": project_object.notes, \"pPhase\": project_object.phase_code, \"pUpvotes\": project_object.upvotes, \"pUpdated\": project_object.updated } if project_object.user_id: results[\"pOwnerName\"]=project_object", "label": 0}, {"snippet_id": 15187, "code": ")) number_of_days=IntegerField('Number of days',[validators.required()]) new_value=FloatField('Delta',[validators.required()]) class ChangeInputAddDelta(FlaskForm): def __init__(self, csrf_enabled=False", "label": 0}, {"snippet_id": 60660, "code": ".messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html\".format(status)]", "label": 0}, {"snippet_id": 74936, "code": ").exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies']=other_candidacies return render(request, 'etd_app/candidate.html', context_data) @login_required def candidate_upload(request", "label": 0}, {"snippet_id": 37177, "code": " __init__(self, *args, **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget", "label": 0}, {"snippet_id": 19251, "code": " worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self", "label": 0}, {"snippet_id": 61674, "code": "(page), cache_control_private_set=validate_private(page), referrer_policy_set_to_no_referrer=validate_no_referrer_policy(page), ) def scan(securedrop: DirectoryEntry, commit=False) -> ScanResult: \"\"\" Scan", "label": 1}, {"snippet_id": 43370, "code": "( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('/", "label": 0}, {"snippet_id": 60330, "code": "{}, params={}:{}\".format( conn, repr(sql), params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio", "label": 0}, {"snippet_id": 67353, "code": "=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['tws'].count() if count > 0:", "label": 0}, {"snippet_id": 3262, "code": " in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session", "label": 0}, {"snippet_id": 56262, "code": "', description='d', share_id='AsdE43E4', pic='url') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_experience_redirect(", "label": 0}, {"snippet_id": 58868, "code": " null=True) added=models.DateTimeField('added datetime', auto_now_add=True) objects=InviteQuerySet.as_manager() @staticmethod def search_user_by_email(email): return User.objects.filter(email=email).first", "label": 0}, {"snippet_id": 42089, "code": ".client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on", "label": 0}, {"snippet_id": 27053, "code": " if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients", "label": 0}, {"snippet_id": 70464, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding", "label": 0}, {"snippet_id": 9890, "code": " dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form", "label": 0}, {"snippet_id": 9388, "code": " a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's", "label": 0}, {"snippet_id": 61304, "code": "\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def", "label": 0}, {"snippet_id": 7623, "code": " openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data", "label": 0}, {"snippet_id": 3114, "code": " view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request", "label": 0}, {"snippet_id": 80907, "code": "\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views", "label": 0}, {"snippet_id": 3176, "code": " import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"", "label": 0}, {"snippet_id": 82323, "code": ".urls import re_path from Shortener_App.views import( HomeView, SuccessUrlView, CustomShortURLCreateView, ShortManyURLSView, URLDetailView, URLUpdateView, URLDeleteView, CategoryCreateView, CategoryListView", "label": 0}, {"snippet_id": 58358, "code": ", onboarding.VIEW_INTRODUCTION:{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{ \"html\": \"<p>preview_courselet", "label": 0}, {"snippet_id": 61599, "code": "=validate_hsts_entire_domain(pshtt_results['HSTS Entire Domain']), hsts_preloaded=pshtt_results['HSTS Preloaded'], subdomain=validate_subdomain(securedrop.landing_page_url), no_cookies=validate_no_cookies(page)", "label": 1}, {"snippet_id": 21178, "code": "=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self):", "label": 0}, {"snippet_id": 38386, "code": " import ExtractedHHRec from.script import Script from.dsstox_lookup import DSSToxLookup from.qa_group import QAGroup from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from", "label": 0}, {"snippet_id": 31443, "code": " 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='gitmate.wsgi.application", "label": 0}, {"snippet_id": 13808, "code": " Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc", "label": 0}, {"snippet_id": 56816, "code": ".delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail(request, *args, ", "label": 0}, {"snippet_id": 68356, "code": "(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url", "label": 0}, {"snippet_id": 65205, "code": " compile code') output_json(args.points, deductions) return deductions +=grade(code_obj, name, args.points, test_case_objs, vlevel) output_json(args.points, deductions) if __name__=='__main__': try: main()", "label": 0}, {"snippet_id": 41865, "code": " be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all", "label": 0}, {"snippet_id": 5096, "code": "=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id", "label": 0}, {"snippet_id": 84723, "code": " def stop_observing_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, is_member", "label": 0}, {"snippet_id": 80323, "code": "(True) self.lock_fast_piezo_action=lock_menu.addAction('Lock Fast Piezo') self.lock_fast_piezo_action.setCheckable(True) tools_menu=menu_bar.addMenu('Tools') self.lock_actions=[self.lock_slow_piezo_action,", "label": 0}, {"snippet_id": 13697, "code": ".password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400", "label": 0}, {"snippet_id": 67723, "code": "'categories']=attr.values_list('category', flat=True).order_by('category').distinct() context['types']=attr.values_list('type', flat=True).order_by('type').distinct() context['count']=self.object_list.count", "label": 0}, {"snippet_id": 59074, "code": " Do a search for invite by passed parameters and user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check", "label": 0}, {"snippet_id": 44625, "code": ".rawchem_ptr ing=Ingredient.objects.create(lower_wf_analysis=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd", "label": 0}, {"snippet_id": 18406, "code": "\thashed_password=ph.hash(self.password) \t\treturn hashed_password \t\"\"\" post(): \tSets class variables, does rudimentary checks on username and email submitted using regex \tand renders signup.html with the error", "label": 1}, {"snippet_id": 54262, "code": "\" ** JSON response routes ** \"\"\" \"\"\"JSON response containing information for a particular politician \"\"\" @app.route('/json/politicians/<politician>') def json_politician(politician): politicians=Politician", "label": 0}, {"snippet_id": 17724, "code": ".PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup", "label": 0}, {"snippet_id": 78743, "code": " @tk.chained_action def update_datarequest(original_action, context, data_dict): \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If", "label": 0}, {"snippet_id": 44701, "code": " class ExtractedTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_extracted_doc_date_validation(self): text=ExtractedText(doc_date='Wednesday, January 21, 2014', data_document=self", "label": 0}, {"snippet_id": 32288, "code": ".char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to", "label": 0}, {"snippet_id": 71196, "code": ": session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class(self): try: return utils.import_class", "label": 0}, {"snippet_id": 82721, "code": " ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid)", "label": 0}, {"snippet_id": 62662, "code": ". :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the session token corresponding to the query :rtype: str \"\"\" with self.app.test_request_context", "label": 0}, {"snippet_id": 69058, "code": ".CalledProcessError: logger.info(\"Cannot stop configurable-http-proxy...\") if systemd.check_service_enabled('configurable-http-proxy.service'): try: systemd.disable_service('configurable-http-proxy.service') except", "label": 0}, {"snippet_id": 33411, "code": " ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n']) self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in", "label": 0}, {"snippet_id": 49748, "code": "(not 'social' in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session: email=session", "label": 0}, {"snippet_id": 38134, "code": "', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC'", "label": 0}, {"snippet_id": 80564, "code": "; ' + 'matisse=Matisse(); print(\\'Access the Matisse using \\\\\\'matisse.[method]\\\\\\'\\')\"') @handled_slot(bool) def restart(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog", "label": 1}, {"snippet_id": 76453, "code": ".ImageAt(column, row) if set_pixel_to_bgcolor: im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\", str(tilepixel_rect)", "label": 0}, {"snippet_id": 76574, "code": " SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,-30000000.0,30000000.0,30000000.0& WIDTH=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0", "label": 0}, {"snippet_id": 48870, "code": " p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get(", "label": 0}, {"snippet_id": 18556, "code": "\tself.render(\"signup.html\",error=does_it_exist) \t\t\treturn \t\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('", "label": 0}, {"snippet_id": 62844, "code": " desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client() as c: resp=c", "label": 1}, {"snippet_id": 45414, "code": ".writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs", "label": 1}, {"snippet_id": 31411, "code": "'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'gitmate.disable_csrf.DisableCSRF', ] ROOT_URLCONF='gitmate.urls' TEMPLATES=[ { 'BACKEND", "label": 0}, {"snippet_id": 62841, "code": " url of the desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client() as", "label": 0}, {"snippet_id": 17760, "code": " return flask.redirect(flask.url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload", "label": 0}, {"snippet_id": 31331, "code": " WEBHOOK_SECRET=os.environ.get('WEBHOOK_SECRET') SOCIAL_AUTH_GITHUB_KEY=os.environ.get('SOCIAL_AUTH_GITHUB_KEY') SOCIAL_AUTH_GITHUB_SECRET=os.environ.get('SOCIAL_AUTH_GITHUB_SECRET') SOCIAL_AUTH_GITHUB_SCOPE=", "label": 0}, {"snippet_id": 45014, "code": ">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertContains(response2, ", "label": 0}, {"snippet_id": 59578, "code": "=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name: self.config(option.name)", "label": 0}, {"snippet_id": 3729, "code": ", 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test", "label": 0}, {"snippet_id": 39451, "code": " ExtractedFunctionalUse(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True", "label": 0}, {"snippet_id": 59753, "code": "\"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name)", "label": 0}, {"snippet_id": 69812, "code": " production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 15100, "code": "=NoValidationSelectField('Model',[validators.required()], choices=[]) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input'", "label": 0}, {"snippet_id": 37038, "code": ",'PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc", "label": 1}, {"snippet_id": 6508, "code": "(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: return", "label": 0}, {"snippet_id": 12007, "code": " on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user", "label": 0}, {"snippet_id": 59725, "code": ".get(plugin_name) def app_css_hash(self): if not hasattr(self, \"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root), \"datasette/static/app.css\") ).read().encode( \"utf8\" ) ", "label": 0}, {"snippet_id": 84691, "code": " is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if not notification.is_observing(article, request.user):", "label": 0}, {"snippet_id": 62274, "code": " time import time from saml2.ident import code from flask import session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action", "label": 0}, {"snippet_id": 46444, "code": ".objects.get(pk=script_pk) csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames", "label": 0}, {"snippet_id": 70665, "code": " re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except", "label": 0}, {"snippet_id": 14201, "code": ".get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str", "label": 0}, {"snippet_id": 22382, "code": "(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self", "label": 0}, {"snippet_id": 20178, "code": " redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel", "label": 0}, {"snippet_id": 60759, "code": " self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check,", "label": 0}, {"snippet_id": 50963, "code": ".buildstep.name=name f.buildstep.set_optional(optional) f.buildstep.set_default(default) return f return decorator_func def get_optional_steps(self): return(step.name for step in self._steps if self.is_optional", "label": 0}, {"snippet_id": 37324, "code": " __init__(self, *args, **kwargs): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority'].widget.attrs.update({ 'onchange': 'form.submit();' }) class", "label": 0}, {"snippet_id": 14521, "code": " order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _", "label": 0}, {"snippet_id": 698, "code": " content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=", "label": 0}, {"snippet_id": 7019, "code": "=ChangeEmailForm() if form.validate_on_submit(): if current_user.verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email", "label": 0}, {"snippet_id": 56321, "code": "=ORMPerson.objects.create() ORMProfile.objects.create(person=orm_person, username='u') experience=ORMExperience.objects.create(title=title, description=description, share_id=share_id, author=orm_person)", "label": 0}, {"snippet_id": 11958, "code": " signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from", "label": 0}, {"snippet_id": 57119, "code": " transaction_code=kwargs.get('transaction_code', None) if transaction_code: transaction=get_transaction_from_kwargs(**kwargs) return concept_class(transaction=transaction), concept_form concept_code=kwargs", "label": 0}, {"snippet_id": 53805, "code": "'subtitle') self.summary=self.definition.get('summary') self.library_includes=[] self.stdout_interceptor=None self.stderr_interceptor=None self._last_update_time=0 @property def last_update_time(self) ->", "label": 0}, {"snippet_id": 61999, "code": " header=page.headers.get('Cache-Control', '') directives=[directive.lower().strip() for directive in header.split(',')] return expected_directive in directives def validate_no_redirects(page): if page.is_redirect", "label": 0}, {"snippet_id": 78501, "code": "['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type", "label": 1}, {"snippet_id": 24263, "code": "\"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run", "label": 0}, {"snippet_id": 65136, "code": ".points, 'failed to parse code') break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef", "label": 0}, {"snippet_id": 55635, "code": "(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t", "label": 0}, {"snippet_id": 73960, "code": ") if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications", "label": 0}, {"snippet_id": 55465, "code": "(self.path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) \tdef utime(self,times", "label": 0}, {"snippet_id": 18683, "code": " the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"\" \tdef post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.password", "label": 1}, {"snippet_id": 62930, "code": " accessing the acs :type check_fn: callable \"\"\" came_from='/camefrom/' with self.app.test_client() as c: resp=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr=auth_response(token,", "label": 1}, {"snippet_id": 7751, "code": "[0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id", "label": 1}, {"snippet_id": 68047, "code": "'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return", "label": 0}, {"snippet_id": 15779, "code": ", methods=['POST']) def view_run_add(field): run_form=get_run_form() run_form[field].append_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands':", "label": 0}, {"snippet_id": 74736, "code": ": shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type', '') if person_instance: person_form=PersonForm(instance=person_instance,", "label": 0}, {"snippet_id": 66484, "code": ".get_object(\"keyfile_unlock_select_button\") keyfile_path=keyfile_unlock_select_button.get_label() try: self.database_manager=DatabaseManager(self.database_filepath, password=None, keyfile=keyfile_path)", "label": 0}, {"snippet_id": 83649, "code": " reverse(urlname, args=args) else: app=group._meta.app_label urlconf='.'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return ''.join(['/', app, url]) class ArticleEditLock(object): \"\"\"A", "label": 0}, {"snippet_id": 48742, "code": "': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')", "label": 0}, {"snippet_id": 13090, "code": "=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options':", "label": 0}, {"snippet_id": 42276, "code": "('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertContains(response", "label": 0}, {"snippet_id": 33680, "code": " test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp,", "label": 0}, {"snippet_id": 23412, "code": "(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id", "label": 0}, {"snippet_id": 741, "code": "%(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n':", "label": 0}, {"snippet_id": 23473, "code": " of the GPUs. If it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str", "label": 0}, {"snippet_id": 80160, "code": ".setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True) self.log_queue=queue.Queue() self.log_stream=LoggingStream(self.log_queue) self", "label": 0}, {"snippet_id": 43205, "code": " from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import", "label": 1}, {"snippet_id": 33867, "code": ") body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input", "label": 0}, {"snippet_id": 73126, "code": "'pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1]", "label": 0}, {"snippet_id": 84442, "code": " @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw)", "label": 0}, {"snippet_id": 9087, "code": " from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile", "label": 0}, {"snippet_id": 39060, "code": " False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a \"falsy\" property. If the zip file cannot be", "label": 0}, {"snippet_id": 14418, "code": "\"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise", "label": 0}, {"snippet_id": 57617, "code": ": \"\"\" Send an email with specified content. Arguments: context_data(dict): data to be passed to templates. from_email(str): sender's email. to_email(list): list of addresses to send an email to. template_subject", "label": 0}, {"snippet_id": 32049, "code": " Args: ttype: The token meaning. lexeme: The token value(optional). position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self", "label": 0}, {"snippet_id": 62487, "code": "'_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState: '", "label": 0}, {"snippet_id": 79846, "code": " Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email", "label": 0}, {"snippet_id": 39267, "code": " raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) raw_min_comp=models.CharField(\"Raw minimum composition\", max_length=100, null=True, blank=True) raw_max_comp=models", "label": 0}, {"snippet_id": 4951, "code": ".assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale", "label": 0}, {"snippet_id": 64273, "code": " logout_redirect_url) next_page=request.args.get('next', next_page) next_page=request.form.get('RelayState', next_page) if 'SAMLResponse' in request.form: current_app.logger.debug('Receiving a logout response from the", "label": 0}, {"snippet_id": 75590, "code": "'Content-Disposition']='attachment; filename=\"%s\"' % candidate.thesis.original_file_name return response def _select2_list(search_results): select2_results=[] for r in search_results: select2_results.append", "label": 0}, {"snippet_id": 4837, "code": "/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout()", "label": 0}, {"snippet_id": 29548, "code": ")) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session.pop('token') user.oauth_secret=session.pop('secret') db.session.commit() login_user(user) next", "label": 0}, {"snippet_id": 1664, "code": " I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re", "label": 0}, {"snippet_id": 2041, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list':", "label": 0}, {"snippet_id": 74460, "code": " WizardPDFPartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial(WizardPDFPartial): content_disposition=\"inline\" EVAL_ACTION_TYPE=\"VIEW_PDF\" class", "label": 0}, {"snippet_id": 75514, "code": "=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid(): format_form.handle_post(request.POST, candidate) return HttpResponseRedirect(reverse('approve', kwargs={", "label": 0}, {"snippet_id": 28009, "code": " inspect import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string", "label": 0}, {"snippet_id": 74675, "code": " from.forms import PersonForm, CandidateForm if request.method=='POST': post_data=request.POST.copy() post_data['netid']=request.user.username person_form=PersonForm(post_data, instance=get_person_instance", "label": 0}, {"snippet_id": 36036, "code": " tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type", "label": 0}, {"snippet_id": 5383, "code": "'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params", "label": 0}, {"snippet_id": 39782, "code": " return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'", "label": 0}, {"snippet_id": 58912, "code": " enroll_unit_code=enroll_unit_code ) if old_invite: return old_invite except Http404: pass code=Invite( instructor=instructor, user=user, email=email, code=uuid4().hex, status='pending', type=invite_type", "label": 0}, {"snippet_id": 28157, "code": "(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background", "label": 0}, {"snippet_id": 49224, "code": " template ''' referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid", "label": 0}, {"snippet_id": 8801, "code": ".exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ ", "label": 0}, {"snippet_id": 50052, "code": "['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: data=f.read() parsed=parser", "label": 0}, {"snippet_id": 11796, "code": " \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model", "label": 0}, {"snippet_id": 83875, "code": "['new_article']=new_article if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext", "label": 0}, {"snippet_id": 31804, "code": "'elections:vote')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user", "label": 1}, {"snippet_id": 70162, "code": ".append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last", "label": 0}, {"snippet_id": 24037, "code": " callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr) def _wrapper(*args, **kwargs): with self.lock: return orig_attr(*args,", "label": 0}, {"snippet_id": 43351, "code": ").get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( ", "label": 0}, {"snippet_id": 44904, "code": ".save() _, HnPFormSet=create_detail_formset(self.objects.doc) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects", "label": 0}, {"snippet_id": 54119, "code": ") \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation(): return render_template", "label": 0}, {"snippet_id": 6763, "code": "('auth/register.html', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash", "label": 0}, {"snippet_id": 82165, "code": "' return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class", "label": 0}, {"snippet_id": 15420, "code": "({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry", "label": 0}, {"snippet_id": 61617, "code": "=validate_not_using_cdn(page), http_no_redirect=validate_no_redirects(no_redirects_page), expected_encoding=validate_encoding(page), no_analytics=validate_not_using_analytics(page), no_server_info=validate_server_software", "label": 1}, {"snippet_id": 74034, "code": " CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from django.urls import reverse", "label": 0}, {"snippet_id": 32746, "code": ": pid=os.fork() if pid==0: os.execv(self.full_command, self.args) else: self.pid=pid def wait(self): if self.pid: os.waitpid(self.pid, 0) @property def full_command(self): if os.path.exists(self.command", "label": 0}, {"snippet_id": 71241, "code": ")) if self.user is None: pass else: self.user=None return self def _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile", "label": 0}, {"snippet_id": 10792, "code": " return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a", "label": 0}, {"snippet_id": 71311, "code": " not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try: return self.session.data.pop('_redirect_uri').encode('utf-8') except KeyError", "label": 1}, {"snippet_id": 83400, "code": " title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data", "label": 1}, {"snippet_id": 72876, "code": "]) request.user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText", "label": 1}, {"snippet_id": 78083, "code": ": description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size\": size, \"name\": name, \"description\": description } resources.append(update_resource) security_classification=default_security_classification", "label": 1}, {"snippet_id": 70793, "code": " the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath", "label": 1}, {"snippet_id": 38126, "code": " extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag',", "label": 0}, {"snippet_id": 53373, "code": ".abort_thread() if environ.modes.has(environ.modes.TESTING): exec_test() else: exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except UserAbortError: out=None", "label": 0}, {"snippet_id": 36163, "code": " each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used to filter", "label": 0}, {"snippet_id": 2596, "code": " OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE", "label": 0}, {"snippet_id": 23853, "code": " else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns: The size of the shared memory file system in bytes. \"\"\" assert sys.platform==\"linux", "label": 0}, {"snippet_id": 81543, "code": " existence: ' +old_repeating_event.name +', date: ' +str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id existing_event=self.env['event.event'].search([('event_type_id', '=', old_event_cat", "label": 0}, {"snippet_id": 29727, "code": "=secure_filename(f.filename) f.save(join( current_app.static_folder, current_app.config['STATIC_BENWA_DIR'], fname )) fpath='/'.join(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath", "label": 1}, {"snippet_id": 53162, "code": ".get_object().house_cond, None) data={'budget': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().budget, None) data={'current_rent': 'TEXT'} self.client.post(update_url,", "label": 0}, {"snippet_id": 21906, "code": " quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None", "label": 0}, {"snippet_id": 16596, "code": " game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for", "label": 0}, {"snippet_id": 30492, "code": " del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')) else: flash(\"You were not", "label": 0}, {"snippet_id": 11938, "code": ".features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student", "label": 0}, {"snippet_id": 73810, "code": "-date_closed' elif request.POST.get(\"sort-position\"): return 'position_title' return sort_by def positions_list_data(request, sort_by): return{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, ", "label": 0}, {"snippet_id": 81522, "code": "(months=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event", "label": 0}, {"snippet_id": 80431, "code": "=queue.Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse", "label": 0}, {"snippet_id": 61222, "code": " crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and", "label": 0}, {"snippet_id": 71607, "code": " test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest", "label": 0}, {"snippet_id": 16136, "code": ".game_seeder import GameSeeder from tournament.models import Tournament, Round, Game from tournament.models import TournamentPlayer, RoundPlayer, GamePlayer def get_round_or_404(tournament, round_num):", "label": 0}, {"snippet_id": 2571, "code": ".contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic import View", "label": 0}, {"snippet_id": 75555, "code": "('You don\\'t have permission to view this candidate\\'s thesis.') if not candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.' % BDR_EMAIL", "label": 0}, {"snippet_id": 4236, "code": ".client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location", "label": 0}, {"snippet_id": 3453, "code": " test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password", "label": 0}, {"snippet_id": 3800, "code": " email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected", "label": 0}, {"snippet_id": 22533, "code": "\"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you", "label": 0}, {"snippet_id": 48698, "code": " for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned", "label": 0}, {"snippet_id": 41269, "code": " the correct parent ''' for et in ExtractedText.objects.all(): for ex_child in et.fetch_extracted_records(): child_model=ex_child.__class__ self.assertEqual(et.pk, child_model.objects.get(pk=ex_child.pk", "label": 1}, {"snippet_id": 16921, "code": "' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment", "label": 0}, {"snippet_id": 80552, "code": " print('Opening IDLE.') subprocess.Popen('python -m idlelib -t \"Matisse Controller -Python Shell\" -c \"from matisse import Matisse; ' + 'matisse=Matisse(); print(\\'Access the Matisse using \\\\\\'matisse.[method", "label": 1}, {"snippet_id": 1751, "code": " _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django", "label": 0}, {"snippet_id": 20705, "code": " include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else:", "label": 0}, {"snippet_id": 11934, "code": ".time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from", "label": 0}, {"snippet_id": 80152, "code": "(self.clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly", "label": 0}, {"snippet_id": 3268, "code": "' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation", "label": 0}, {"snippet_id": 43618, "code": " the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781,", "label": 0}, {"snippet_id": 12374, "code": "(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): ", "label": 0}, {"snippet_id": 75343, "code": "(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) candidate.thesis.submit()", "label": 0}, {"snippet_id": 10385, "code": " django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest,", "label": 0}, {"snippet_id": 46469, "code": " missing: context['clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records", "label": 0}, {"snippet_id": 11554, "code": " AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it", "label": 0}, {"snippet_id": 84580, "code": " group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) changes_qs=changes_qs.filter(article__content_type=get_ct(group), article__object_id=group.id) allow_read=has_read_perm(request.user", "label": 0}, {"snippet_id": 66873, "code": "'vt_domain']=vt.getDomainReport(domain) tm=ThreatMiner() context['tm_url']=tm.getURIFromDomain(domain) context['tm_sample']=tm.getSamplesFromDomain(domain) context['tm_report']=tm.getReportFromDomain(domain", "label": 0}, {"snippet_id": 79222, "code": ".validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id):", "label": 0}, {"snippet_id": 321, "code": "[ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[", "label": 0}, {"snippet_id": 1047, "code": "'HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream'", "label": 0}, {"snippet_id": 45284, "code": ",{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime)", "label": 0}, {"snippet_id": 57437, "code": " result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return self.get(request, *args, **kwargs) @login_required def transaction_pay(request,", "label": 0}, {"snippet_id": 62878, "code": ")[0] self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(idp_url)) def acs(self, url, eppn, check_fn): \"\"\" common code for the tests that need to access the assertion consumer", "label": 1}, {"snippet_id": 55656, "code": "(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self", "label": 0}, {"snippet_id": 8406, "code": "'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api", "label": 0}, {"snippet_id": 43136, "code": "(f'/qa/extractedtext/254781/', follow=True) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 30) elp_flagged=elps.filter", "label": 0}, {"snippet_id": 4212, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"", "label": 0}, {"snippet_id": 41046, "code": " card should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, '/link_product_form/167497/') data=", "label": 0}, {"snippet_id": 52296, "code": "=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id=request.form.get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q", "label": 0}, {"snippet_id": 52578, "code": " messages_list=request.form.getlist(\"email-message\") sender=session.get(\"displayname\") default_message=\"\"\"{sender} has invited you to join the team {team_name} on SamePage. Accept to help complete projects for", "label": 0}, {"snippet_id": 51153, "code": "=step.is_enabled_by_default if self._disable_all_options: enabled=False if step.name in self._enabled_options: enabled=True if step.name in self._disabled_options: enabled=False if enabled: print step.name", "label": 0}, {"snippet_id": 5229, "code": " test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response,", "label": 0}, {"snippet_id": 74842, "code": " kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type", "label": 0}, {"snippet_id": 66411, "code": "() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type", "label": 0}, {"snippet_id": 79633, "code": " data_dict): \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen.", "label": 0}, {"snippet_id": 13225, "code": ": state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login or state", "label": 0}, {"snippet_id": 30704, "code": "('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return", "label": 1}, {"snippet_id": 8185, "code": "'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u'</b>', enterprise_name", "label": 0}, {"snippet_id": 72651, "code": " send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent=send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, ", "label": 1}, {"snippet_id": 5534, "code": " are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self", "label": 0}, {"snippet_id": 39710, "code": "=self.data_document.data_group.group_type.code if group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index') else: return reverse('qa_extractionscript_index') def fetch_extracted_records", "label": 1}, {"snippet_id": 40896, "code": ".fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1, 'The page should show %s Products linked to PUCs'", "label": 0}, {"snippet_id": 66936, "code": "=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=domain)).order_by('-datetime') count=context['tws'].count() if count >", "label": 0}, {"snippet_id": 54920, "code": "\t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition,chapter,problem_number,prob_code)) \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book Edition, Student Name, Problem Number", "label": 1}, {"snippet_id": 82788, "code": " monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host", "label": 0}, {"snippet_id": 17945, "code": "!</strong> Incorrect password.'), 'danger') return flask.redirect('/profile') user.password_hash=form.new_password.data flask.flash(flask.Markup( '<strong>Password successfully changed!</strong>'), 'success", "label": 0}, {"snippet_id": 75308, "code": ") @login_required def candidate_preview_submission(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect", "label": 0}, {"snippet_id": 56961, "code": " super().get(self, request, *args, **kwargs) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context['is_filtered", "label": 0}, {"snippet_id": 78763, "code": " a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD", "label": 0}, {"snippet_id": 36350, "code": "/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 4069, "code": " params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly", "label": 0}, {"snippet_id": 27975, "code": "(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={", "label": 0}, {"snippet_id": 48875, "code": ".objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get(", "label": 0}, {"snippet_id": 45833, "code": " data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return", "label": 0}, {"snippet_id": 6971, "code": " user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token, form.password.data): flash('Your password has been updated", "label": 0}, {"snippet_id": 44928, "code": "'habits-0-product_surveyed':'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0',", "label": 0}, {"snippet_id": 59334, "code": " \"\"\".strip()), ConfigOption(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested", "label": 0}, {"snippet_id": 36727, "code": "=datadocument_count_by_month() stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']", "label": 0}, {"snippet_id": 56349, "code": " public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self, dynamic_link): settings.DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain", "label": 0}, {"snippet_id": 11602, "code": " Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer'", "label": 0}, {"snippet_id": 2691, "code": "=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active", "label": 0}, {"snippet_id": 13690, "code": " process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse", "label": 0}, {"snippet_id": 65582, "code": "/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self", "label": 0}, {"snippet_id": 8208, "code": "=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string'", "label": 0}, {"snippet_id": 60982, "code": " return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype", "label": 0}, {"snippet_id": 39891, "code": "(to=Script, on_delete=models.CASCADE, null=True, blank=True) rawchem_ptr=models.OneToOneField(related_name='ingredient', parent_link=True, on_delete=models.CASCADE, to='dashboard.RawChem') def __str__(self", "label": 0}, {"snippet_id": 1857, "code": "=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory", "label": 1}, {"snippet_id": 1792, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it,", "label": 0}, {"snippet_id": 35723, "code": "(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p", "label": 0}, {"snippet_id": 53691, "code": " contents=self.bytes_buffer.read() self.bytes_buffer.truncate(0) self.bytes_buffer.seek(0) if contents is None: return '' return contents.decode(self.source_encoding) def write_both(self, *args, **kwargs)", "label": 1}, {"snippet_id": 24620, "code": "(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also", "label": 1}, {"snippet_id": 54244, "code": ") def page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 \"\"\" ** JSON response routes", "label": 0}, {"snippet_id": 12178, "code": " 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ", "label": 0}, {"snippet_id": 33119, "code": "(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin.site.register(WeightFractionType) admin", "label": 0}, {"snippet_id": 13595, "code": "'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 2114, "code": "[0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise", "label": 0}, {"snippet_id": 45775, "code": "'Manual(dummy)') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() return redirect(referer", "label": 1}, {"snippet_id": 23105, "code": " all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type", "label": 0}, {"snippet_id": 38420, "code": " import CommonInfo from django.urls import reverse from django.utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo)", "label": 0}, {"snippet_id": 53700, "code": ": return '' return contents.decode(self.source_encoding) def write_both(self, *args, **kwargs): abort_thread() if self.active: self.last_write_time=time.time() super(RedirectBuffer, self).write(*args, ", "label": 1}, {"snippet_id": 70828, "code": "(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root", "label": 1}, {"snippet_id": 29636, "code": "'all': posts=Post.query.all() else: split=tags.split(' ') posts=[] for s in split: results=Post.query.filter(Post.tags.any(name=s)) posts.extend(results) tags=Tag.query.all() return render_template('gallery", "label": 0}, {"snippet_id": 71991, "code": " Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import CephX from..services.exception import serialize_dashboard_exception from..services", "label": 1}, {"snippet_id": 67836, "code": " date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs'", "label": 0}, {"snippet_id": 27045, "code": " worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of", "label": 0}, {"snippet_id": 75348, "code": "(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) candidate.thesis.submit() return HttpResponseRedirect(reverse('candidate_home", "label": 0}, {"snippet_id": 29283, "code": ") patch_request_class(app, FILE_SIZE_LIMIT) return app def register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name", "label": 0}, {"snippet_id": 12206, "code": "'POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note:", "label": 0}, {"snippet_id": 34948, "code": " line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"", "label": 0}, {"snippet_id": 50331, "code": ") def resetCurrent(): session.pop('currentFile', None) session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider", "label": 0}, {"snippet_id": 73857, "code": "=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id", "label": 1}, {"snippet_id": 84722, "code": " @login_required def stop_observing_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context=None", "label": 0}, {"snippet_id": 36045, "code": ", help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self", "label": 0}, {"snippet_id": 26025, "code": "(self): \"\"\"Start the plasma store.\"\"\" assert self._plasma_store_socket_name is None self._plasma_store_socket_name=( self._ray_params.plasma_store_socket_name or get_object_store_socket_name()) self.prepare_socket_file", "label": 0}, {"snippet_id": 66219, "code": ") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property(keyfile_unlock_stack_page, \"icon-name\", \"mail-attachment-symbolic\") stack.add_titled(composite_unlock_stack_page", "label": 0}, {"snippet_id": 21397, "code": " check_alive: raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process", "label": 0}, {"snippet_id": 70509, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}<", "label": 0}, {"snippet_id": 2036, "code": ".templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f", "label": 0}, {"snippet_id": 65355, "code": ".headerbar) def get_headerbar(self): return self.headerbar def custom_css(self): screen=Gdk.Screen.get_default() css_provider=Gtk.CssProvider() css_provider_resource=Gio.File.new_for_uri( \"resource:///run", "label": 0}, {"snippet_id": 76762, "code": " not tile: return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile", "label": 0}, {"snippet_id": 51590, "code": "'select_optional_steps':builder.select_optional_steps, 'modify_optional_steps':builder.modify_optional_steps, 'specify_optional_steps':builder.specify_optional_steps, 'userlock':userlock, 'fail':fail, 'scp'", "label": 0}, {"snippet_id": 75776, "code": " logger.error('fast response: %s -%s' %(r.status_code, r.text)) return error_response @login_required def autocomplete_keywords(request): term=request.GET['term'] results=_get_previously_used(Keyword, term)", "label": 0}, {"snippet_id": 53927, "code": ".body=[] self.data=SharedCache() self.files=SharedCache() self._last_update_time=time.time() return self def append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout() self.body.append", "label": 0}, {"snippet_id": 34487, "code": ") prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et", "label": 0}, {"snippet_id": 74774, "code": "': True}) @login_required def candidate_profile(request, candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate", "label": 0}, {"snippet_id": 37176, "code": " def __init__(self, *args, **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type", "label": 0}, {"snippet_id": 29484, "code": "% user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup", "label": 0}, {"snippet_id": 21258, "code": ".start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive", "label": 0}, {"snippet_id": 77502, "code": "\"Fetching layer information for target url '%s'\", target_url) layers_by_name=_LayersFromServerVars(target_url) for layer_name in layers_by_name.keys(): if layers_by_name[layer_name].db_type in(\"gedb\", \"glb", "label": 0}, {"snippet_id": 52811, "code": "=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text']=self.request.data.get('message') serializer=self.get_serializer(data=request", "label": 0}, {"snippet_id": 69483, "code": ": time.sleep(1) continue raise except URLError as e: if isinstance(e.reason, ConnectionRefusedError): time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format", "label": 0}, {"snippet_id": 23277, "code": " random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but", "label": 0}, {"snippet_id": 69788, "code": " JupyterHub...\") ensure_node() ensure_jupyterhub_package(HUB_ENV_PREFIX) ensure_jupyterlab_extensions() ensure_jupyterhub_service(HUB_ENV_PREFIX) ensure_jupyterhub_running() ensure_symlinks(HUB_ENV_PREFIX)", "label": 0}, {"snippet_id": 36588, "code": " self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects", "label": 0}, {"snippet_id": 82982, "code": "\"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates", "label": 0}, {"snippet_id": 69901, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it,", "label": 0}, {"snippet_id": 54686, "code": "\t\tself.book_editions[assignment.book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert(assignment.chapter==int(sys.argv[1])) \t\t\tnum_probs=len(assignment.problems) \t\t\tprint ", "label": 1}, {"snippet_id": 14052, "code": "\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 0}, {"snippet_id": 30486, "code": " del login_session['username'] del login_session['email'] del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect", "label": 0}, {"snippet_id": 46727, "code": "\"Filename can't be empty!\"]) continue if len(line['filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found", "label": 0}, {"snippet_id": 7692, "code": " User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration", "label": 0}, {"snippet_id": 71533, "code": "=req._load_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) def test_laod_session_session_id_no_user_id(self): s=models.Session.create() s_count=models.Session.query().count", "label": 0}, {"snippet_id": 42325, "code": ":[str(User.objects.get(username='Karyn').pk)], 'downloaded_at':['08/20/2017'], 'data_source':[dspk]} response=self.client.post(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code", "label": 0}, {"snippet_id": 48261, "code": " product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt=0)", "label": 0}, {"snippet_id": 22281, "code": " self.redirect_worker_output=redirect_worker_output self.redirect_output=redirect_output self.num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients self.redis_password=redis_password", "label": 0}, {"snippet_id": 2539, "code": "[0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise", "label": 0}, {"snippet_id": 21733, "code": " the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been", "label": 0}, {"snippet_id": 33221, "code": "(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj)", "label": 0}, {"snippet_id": 76333, "code": " \"\"\" proj=layer_properties.projection zoom_level=tilecalcs.CalcZoomLevel(user_log_rect.Extent(), proj.InternalLogOuterBounds().Extent(), geom.Pair(user_width, user_height)) tilepixel_rect, rect_of_tiles", "label": 0}, {"snippet_id": 66280, "code": " composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked) keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.connect", "label": 0}, {"snippet_id": 60455, "code": " app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView", "label": 0}, {"snippet_id": 38089, "code": " choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default", "label": 0}, {"snippet_id": 65643, "code": " response==Gtk.ResponseType.CANCEL: self.filechooser_creation_dialog.close() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog.get_filename()): builder=Gtk.Builder() builder", "label": 0}, {"snippet_id": 16242, "code": ".all(): current={'player': tp.player} rps=tp.roundplayers() for r in round_set: played=rps.filter(the_round=r).exists() current['round_%d' % r.number()]=played data.append(current) if round_num: formset", "label": 0}, {"snippet_id": 46337, "code": ".') context['extract_form']=include_extract_form(dg) if request.method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products", "label": 0}, {"snippet_id": 71889, "code": ") req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages('_mykey') self.assertEquals(msgs_key", "label": 0}, {"snippet_id": 78361, "code": "[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try", "label": 0}, {"snippet_id": 6206, "code": ") return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for(", "label": 0}, {"snippet_id": 23052, "code": ": lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background.", "label": 0}, {"snippet_id": 62031, "code": " return False def validate_hsts_max_age(max_age): if max_age and max_age >=16070400: return True else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return", "label": 0}, {"snippet_id": 45726, "code": " @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True", "label": 0}, {"snippet_id": 48904, "code": " referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META", "label": 0}, {"snippet_id": 29499, "code": "] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup')) @auth.route('/signup', methods=['GET', 'POST']) def signup(): form=RegistrationForm() if request.method=='POST' and", "label": 0}, {"snippet_id": 55268, "code": " os.path.splitunc(self.path) \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd(", "label": 0}, {"snippet_id": 10634, "code": " pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if", "label": 1}, {"snippet_id": 63266, "code": " Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp", "label": 0}, {"snippet_id": 46340, "code": " request.method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in", "label": 0}, {"snippet_id": 66053, "code": "\nfrom gi.repository import Gio, Gtk from keepassgtk.database_manager import DatabaseManager from keepassgtk.unlocked_database import UnlockedDatabase import keepassgtk.config_manager from keepassgtk.logging_manager", "label": 0}, {"snippet_id": 74867, "code": "=degree_type) return render(request, 'etd_app/register.html',{'person_form': person_form, 'candidate_form': candidate_form}) @login_required def candidate_home(request, candidate_id=None): try: if candidate_id", "label": 0}, {"snippet_id": 6885, "code": "=['GET', 'POST']) def password_reset_request(): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by", "label": 0}, {"snippet_id": 68844, "code": " tljh import( apt, conda, hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE", "label": 0}, {"snippet_id": 10983, "code": " context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer", "label": 0}, {"snippet_id": 28463, "code": " byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier)", "label": 0}, {"snippet_id": 7011, "code": "-email', methods=['GET', 'POST']) @login_required def change_email_request(): form=ChangeEmailForm() if form.validate_on_submit(): if current_user.verify_password(form.password.data): new_email=form.email", "label": 0}, {"snippet_id": 61077, "code": ".hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self", "label": 1}, {"snippet_id": 37688, "code": " 'occupation', 'facility'] class ExtractedHHDocEditForm(ExtractedHHDocForm): class Meta(ExtractedHHDocForm.Meta): fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm", "label": 0}, {"snippet_id": 69597, "code": " \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda.ensure_pip_packages(HUB_ENV_PREFIX, plugins) pm=pluggy.PluginManager('tljh') pm.add_hookspecs(hooks) pm.load_setuptools_entrypoints('tljh", "label": 0}, {"snippet_id": 70303, "code": " path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(", "label": 0}, {"snippet_id": 73912, "code": "'applicationsForm': ImportApplicationsForm, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position} @login_required(login_url='/login/', redirect_field_name=None) def position", "label": 1}, {"snippet_id": 4452, "code": " test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email)", "label": 0}, {"snippet_id": 57048, "code": "\" concepts_permitted_by_transaction=transaction.get_all_permissions() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept in settings.CONCEPTS: permission=concept", "label": 0}, {"snippet_id": 77587, "code": ".query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes", "label": 0}, {"snippet_id": 59705, "code": " falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash", "label": 0}, {"snippet_id": 65569, "code": " filechooser_opening_dialog.close() def start_database_opening_routine(self, tab_title, filepath): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar", "label": 0}, {"snippet_id": 65761, "code": ", headerbar), self.database_manager) def create_tab(self, title, headerbar): if self.container==NotImplemented: self.create_container() page_instance=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0", "label": 0}, {"snippet_id": 37280, "code": " !important'}) self.fields['clean_comp_data_file'].widget.attrs.update( {'accept': '.csv'}) self.collapsed=True class DataSourceForm(forms.ModelForm): required_css_class='required' class Meta: model=DataSource", "label": 0}, {"snippet_id": 74187, "code": " slug_url_kwarg=\"uuid\" @property def report(self): return self.get_object() class _ReportLimitedDetailPartial( _ReportDetailPartial, ratelimit.mixins.RatelimitMixin ): ratelimit_key=\"user\" ratelimit_rate", "label": 0}, {"snippet_id": 49378, "code": "=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request", "label": 0}, {"snippet_id": 78251, "code": " print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user", "label": 0}, {"snippet_id": 17039, "code": " GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial=data) if formset", "label": 0}, {"snippet_id": 34904, "code": " csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file", "label": 0}, {"snippet_id": 60301, "code": " max_returned_rows and truncate: rows=cursor.fetchmany(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3", "label": 0}, {"snippet_id": 24587, "code": ".log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)", "label": 1}, {"snippet_id": 7894, "code": " settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) return render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 65383, "code": " css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER) def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\") !=\"", "label": 0}, {"snippet_id": 59124, "code": ".filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email: my_invite=invite break user_email_name, user_domain=clean_email_name(user.email) invite_email, invite_domain", "label": 0}, {"snippet_id": 51569, "code": ".add_bool_option, 'python':builder.python, 'shell':builder.shell, 'rsync':builder.rsync, 'build_step':builder.build_step, 'build_condition':builder.build_condition, 'default_platform':default_platform,", "label": 0}, {"snippet_id": 63828, "code": " eduid_webapp.authn.schemas import LogoutPayload, LogoutResponseSchema authn_views=Blueprint('authn', __name__) @authn_views.route('/login') def login(): \"\"\" login view, redirects to SAML2 IdP \"\"\" return _authn", "label": 0}, {"snippet_id": 27148, "code": " plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir(str", "label": 0}, {"snippet_id": 71841, "code": ".add_message('TEST MESSAGE') msgs=req.get_messages() self.assertEquals(msgs,[{'level': None, 'message':'TEST MESSAGE'}]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error'", "label": 0}, {"snippet_id": 61376, "code": " function to end. :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue): \"\"\"Adds a subscriber to the list of", "label": 0}, {"snippet_id": 83744, "code": " Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private is not None) and is_private", "label": 0}, {"snippet_id": 69529, "code": " tljh-config is not actually accessible. We symlink to /usr/bin and not /usr/local/bin, since /usr/local/bin is not place, and works with sudo -E in sudo's search $PATH. We can work around this with sudo ", "label": 0}, {"snippet_id": 2158, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 29087, "code": "(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe", "label": 0}, {"snippet_id": 22244, "code": " include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options=None, _internal_config=None): self.object_id_seed=object_id_seed self.redis_address=redis_address self.num_cpus", "label": 0}, {"snippet_id": 83720, "code": " self.is_mine(request): user=request.user user.message_set.create( message=self.message_template % self.created_at) def is_mine(self, request): return self.user_ip==get_real_ip(request) def has_read_perm", "label": 0}, {"snippet_id": 11718, "code": " settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api", "label": 0}, {"snippet_id": 57409, "code": "'print_transaction', None) if print_transaction: transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=", "label": 0}, {"snippet_id": 28633, "code": " default_resources is not None: resources=default_resources.copy() else: resources={} if \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The resources dictionary must not \" \"contain the key 'CPU' or", "label": 0}, {"snippet_id": 60711, "code": " call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents", "label": 0}, {"snippet_id": 3718, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 51082, "code": "[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self, *args, **kwargs):", "label": 0}, {"snippet_id": 50343, "code": " @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider) return oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth", "label": 0}, {"snippet_id": 22381, "code": ": if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage", "label": 0}, {"snippet_id": 71275, "code": "='_messages'): if not self.session.data.get(key): self.session.data[key]=[] return self.session.data[key].append({ 'message': message, 'level': level}) add_message=_add_message def _get_messages(self, key", "label": 0}, {"snippet_id": 37249, "code": "'DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm", "label": 0}, {"snippet_id": 52664, "code": " render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]) def logout_user(): \"\"\" \"\"\" session.clear() return redirect(\"/\") @app.route(\"/logout\", methods=[", "label": 0}, {"snippet_id": 22368, "code": " when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs", "label": 0}, {"snippet_id": 35758, "code": ", instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr", "label": 0}, {"snippet_id": 13963, "code": " enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to,", "label": 0}, {"snippet_id": 21648, "code": "\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any", "label": 0}, {"snippet_id": 17575, "code": ".RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User(username=form.username.data.strip(), email=form.email.data.strip(), password=form.password.data) user", "label": 0}, {"snippet_id": 43445, "code": "=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button", "label": 0}, {"snippet_id": 76209, "code": ", path, language=None, version_slug=None): for ending in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re.sub(ending +'$', '.html', path) return self", "label": 0}, {"snippet_id": 2820, "code": " view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request", "label": 0}, {"snippet_id": 57634, "code": "(list): list of addresses to send an email to. template_subject(str): path to a subject template, e.g. 'ctms/email/subject.txt' template_text(str): path to a body template, e.g. 'ctms/email/text.txt' \"", "label": 0}, {"snippet_id": 17444, "code": " you believe that this is a mistake, contact ' 'a moderator on IRC.'.format(ban_reason)) flask.flash(flask.Markup(ban_str), 'danger') return flask.redirect(flask.url_for('account.login')) if user.status ", "label": 0}, {"snippet_id": 9118, "code": ".decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging", "label": 0}, {"snippet_id": 71517, "code": " AppEngineOpenIDStrategy) def test_load_session_no_session(self): req=EngineAuthRequest.blank('/auth/google') s_count=models.Session.query().count() self.assertTrue(s_count==0) sess=req._load_session()", "label": 1}, {"snippet_id": 56608, "code": " test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa() \\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp", "label": 0}, {"snippet_id": 61564, "code": ".RequestException: return ScanResult( securedrop=securedrop, live=pshtt_results['Live'], http_status_200_ok=False, ) return ScanResult( landing_page_url=securedrop.landing_page_url, live=pshtt_results[", "label": 1}, {"snippet_id": 3567, "code": ".locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self", "label": 0}, {"snippet_id": 30642, "code": "/') def showGrudgets(): grudgets=session.query(Grudget).all() if 'username' not in login_session: return render_template('publicgrudgets.html', grudgets=grudgets) else: return render_template('grudgets", "label": 0}, {"snippet_id": 72704, "code": "=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home')", "label": 1}, {"snippet_id": 65078, "code": "=None if not obj: raise ValueError('Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except", "label": 0}, {"snippet_id": 81934, "code": " **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object", "label": 0}, {"snippet_id": 59030, "code": ", 'message': 'Invitation successfully sent.', 'invite':{ 'status': self.status, } } except IntegrityError: return{ 'success': False, 'message': 'You already have sent invite to user with{} email'.format", "label": 0}, {"snippet_id": 15832, "code": " commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/history', methods=['POST']) def view_run_history(): history=json.loads(request.data) history=[ { 'id': item['id'],", "label": 0}, {"snippet_id": 42298, "code": " href=\"/datasource/', msg_prefix='Should be able to get back to DataSource from here.') def test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data", "label": 0}, {"snippet_id": 79911, "code": " tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') %", "label": 0}, {"snippet_id": 67364, "code": ".order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['exs'].count", "label": 0}, {"snippet_id": 25508, "code": ") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None,", "label": 0}, {"snippet_id": 30220, "code": " response.headers['Content-Type']='application/json' return response code=request.data try: oauth_flow=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri='postmessage' credentials", "label": 1}, {"snippet_id": 13754, "code": ".is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user", "label": 0}, {"snippet_id": 28448, "code": " allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else", "label": 0}, {"snippet_id": 64098, "code": "!r}'.format(user)) state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if", "label": 0}, {"snippet_id": 42526, "code": ".extext.pk response=self.client.post(f'/qa/extractedtext/{pk}/',{'approve':[47]}) self.assertEqual(response.url, '/qa/extractionscript/',(\"User should be redirected to \" \"QA homepage after last extext is", "label": 1}, {"snippet_id": 21694, "code": " allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items", "label": 0}, {"snippet_id": 14567, "code": ", 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value", "label": 0}, {"snippet_id": 62819, "code": " authn(self, url, force_authn=False): \"\"\" Common code for the tests that need to send an authentication request. This checks that the client is redirected to the idp. :param url: the url of the desired", "label": 1}, {"snippet_id": 2113, "code": "=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime:", "label": 0}, {"snippet_id": 10934, "code": "\"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy", "label": 0}, {"snippet_id": 63738, "code": ", data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request", "label": 0}, {"snippet_id": 14233, "code": "\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce", "label": 0}, {"snippet_id": 70789, "code": " view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip(", "label": 1}, {"snippet_id": 69944, "code": " path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/')", "label": 1}, {"snippet_id": 71074, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 8011, "code": ", request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 15688, "code": ", '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.delta.data=command.get('delta', '') @app.route('/run'", "label": 0}, {"snippet_id": 69771, "code": "', nargs='*', help='Plugin pip-specs to install' ) args=argparser.parse_args() pm=setup_plugins(args.plugin) ensure_config_yaml(pm) ensure_admins(args.admin) ensure_usergroups() ensure_user_environment", "label": 0}, {"snippet_id": 56392, "code": "['Location']==url return self class RedirectProfileTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_profile(username", "label": 0}, {"snippet_id": 79802, "code": ".enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users", "label": 1}, {"snippet_id": 81099, "code": "._update_counter_subscription(event, partner, subscription_update_counter) else: _logger.info('No seats available') except ValidationError as e: _logger.error('Unable to register: '+str(e)) referer=str(http.request", "label": 0}, {"snippet_id": 28348, "code": " random number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner", "label": 0}, {"snippet_id": 28291, "code": " is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr", "label": 0}, {"snippet_id": 48433, "code": " +str(Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type': doc.document_type, 'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType", "label": 0}, {"snippet_id": 78133, "code": "] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes' in pkg:", "label": 0}, {"snippet_id": 79218, "code": " import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE", "label": 0}, {"snippet_id": 7268, "code": ".models.theq import Office from.base import Base from flask_login import current_user from qsystem import db class OfficeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user", "label": 0}, {"snippet_id": 70773, "code": " the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like", "label": 0}, {"snippet_id": 82967, "code": ").__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed", "label": 0}, {"snippet_id": 67932, "code": " from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from", "label": 0}, {"snippet_id": 84041, "code": " render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def edit_article(request, title", "label": 0}, {"snippet_id": 44730, "code": ", data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document", "label": 0}, {"snippet_id": 74349, "code": ".get_context_data(form=self._get_access_form()) return self.render_to_response(context) def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner", "label": 0}, {"snippet_id": 3298, "code": ": return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, *", "label": 0}, {"snippet_id": 52564, "code": ") def invite_new_teammates(team_id): \"\"\" \"\"\" team_object=Team.query.filter_by(t_id=team_id).first() emails_lst=request.form.getlist(\"email\") messages_list=request.form.getlist(\"email-message\") sender=session", "label": 0}, {"snippet_id": 71164, "code": " session.user_id) self.set_cookie('_eauth', session.serialize()) return self def _save_user(self): pass class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self", "label": 0}, {"snippet_id": 2563, "code": " import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string from", "label": 0}, {"snippet_id": 62560, "code": " eduid_common.api.app import eduid_init_app import logging logger=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class AuthnAPITestBase(EduidAPITestCase): def update_config(self", "label": 0}, {"snippet_id": 73252, "code": " LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) password=forms", "label": 0}, {"snippet_id": 68905, "code": " G2fK8I9JL/yQhDc6OGY9mjPOxMb5PgUlT8ox3v8wt25erWj9z30QoEBwfSg4tzLc Jq6N/iepQemNfo6Is+TG+JzI6vhXjlsBm/Xmz0ZiFPPObAH/vGCY5I6886vXQ7ft qWHYHT8jz/R4tigMGC+tvZ/kcmYBsLCCI5uSEP6JJRQQhHrCvOX0UaytItfsQfLm EYRd2F72o1yGh3yvWWfDIBXRmaBuIGXGpajC0JyBGSOWb9UxMNZY", "label": 0}, {"snippet_id": 18635, "code": "\tph=PasswordHasher() \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username==None): \t\t\terror=\"User doesn't exist. Please sign up first!\" \t\telif(ph.verify", "label": 1}, {"snippet_id": 6804, "code": " @login_required def resend_confirmation(): token=current_user.generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token)", "label": 0}, {"snippet_id": 2803, "code": ") query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\"", "label": 1}, {"snippet_id": 15250, "code": "=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models',[validators.required()]) change_input_series_one_model=FieldList(FormField(ChangeOneModelForm), min_entries=0", "label": 0}, {"snippet_id": 78061, "code": " pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description", "label": 0}, {"snippet_id": 24410, "code": " The IP address of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files", "label": 1}, {"snippet_id": 53915, "code": " loaded state :return: The instance that was called for method chaining \"\"\" self.body=[] self.data=SharedCache() self.files=SharedCache() self._last_update_time=time.time() return self def append_body(self,", "label": 0}, {"snippet_id": 59837, "code": " update_with_inherited_metadata(self, metadata): metadata.update( { \"source\": metadata.get(\"source\") or self.metadata(\"source\"), \"source_url\": metadata.get(\"source_url\") or self.metadata(\"source_url\"),", "label": 0}, {"snippet_id": 8321, "code": " \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info", "label": 0}, {"snippet_id": 25716, "code": " servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={", "label": 0}, {"snippet_id": 48621, "code": ".filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list", "label": 0}, {"snippet_id": 37995, "code": " ChemicalFormSet) def two(): FunctionalUseFormSet=make_formset(parent, child) return(ExtractedTextForm, FunctionalUseFormSet) def three(): HnPFormSet=make_formset(parent, child) return(ExtractedTextForm,", "label": 0}, {"snippet_id": 68619, "code": "(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue(", "label": 0}, {"snippet_id": 13603, "code": "['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url':", "label": 0}, {"snippet_id": 45009, "code": "{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2=self.client.get(f'/datagroup/{self.objects.dg", "label": 0}, {"snippet_id": 17253, "code": ") i.score=field try: i.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) i.save(", "label": 0}, {"snippet_id": 30060, "code": "(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def", "label": 1}, {"snippet_id": 11297, "code": " context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are", "label": 0}, {"snippet_id": 36217, "code": "%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute", "label": 1}, {"snippet_id": 37272, "code": "*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['clean_comp_data_file'].widget.attrs.update( {'accept': '.csv'}) self.collapsed", "label": 0}, {"snippet_id": 68020, "code": "(self, request, pk): pk=self.kwargs['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset", "label": 0}, {"snippet_id": 55518, "code": "(self): \t\treturn FSPath(os.path.commonprefix(self._raw())) \tdef join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self", "label": 0}, {"snippet_id": 72360, "code": " Ganesha.get_ganesha_clusters(): result.extend( [{'daemon_id': daemon_id, 'cluster_id': cluster_id} for daemon_id in GaneshaConf.instance(cluster_id).list_daemons()]) return result @UiApiController('/nfs", "label": 0}, {"snippet_id": 47626, "code": ", SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may", "label": 0}, {"snippet_id": 27139, "code": " timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided", "label": 0}, {"snippet_id": 21181, "code": ".redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"\"\"Start the raylet monitor.", "label": 0}, {"snippet_id": 37613, "code": "*kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta", "label": 0}, {"snippet_id": 44917, "code": "':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits", "label": 0}, {"snippet_id": 60638, "code": "} message=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message", "label": 0}, {"snippet_id": 53283, "code": " my_thread=threading.current_thread() if isinstance(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param", "label": 0}, {"snippet_id": 4052, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 47815, "code": "/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', ", "label": 0}, {"snippet_id": 1105, "code": " lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{%", "label": 0}, {"snippet_id": 38841, "code": " group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return", "label": 0}, {"snippet_id": 42127, "code": "('utf8') self.assertIn('0 extracted', response, 'Data Group should contain a count of 0 total extracted documents') self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 43324, "code": " et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0", "label": 0}, {"snippet_id": 11557, "code": " the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish", "label": 0}, {"snippet_id": 39213, "code": ".db import models from.common_info import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type", "label": 1}, {"snippet_id": 68422, "code": " Count from.models import tweet, Hunt from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from", "label": 0}, {"snippet_id": 63174, "code": ") data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue", "label": 0}, {"snippet_id": 44578, "code": " Type', description='Test Product Description', last_edited_by=user, kind='FO') extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript", "label": 0}, {"snippet_id": 48231, "code": " class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm", "label": 1}, {"snippet_id": 50679, "code": "' if platform.system()=='Linux' and platform.architecture()[0]=='32bit': return 'Linux-x86' if platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory", "label": 0}, {"snippet_id": 8034, "code": ".tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the", "label": 0}, {"snippet_id": 12908, "code": "], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest", "label": 0}, {"snippet_id": 64828, "code": " cases. Results will be written over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The name of the function the student was supposed to implement\") parser.add_argument('-p', '", "label": 0}, {"snippet_id": 55519, "code": "\treturn FSPath(os.path.commonprefix(self._raw())) \tdef join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs())", "label": 0}, {"snippet_id": 33953, "code": "' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value') true_cas=self.browser", "label": 0}, {"snippet_id": 58603, "code": "=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step(onboarding.STEP_2, instructor.user_id) if Course.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding", "label": 0}, {"snippet_id": 36763, "code": "\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count", "label": 0}, {"snippet_id": 11194, "code": ": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 65993, "code": "() > 0: builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/quit_dialog.ui\") self.quit_dialog=builder.get_object(\"quit_dialog\") self.quit_dialog.set_destroy_with_parent(True) self", "label": 0}, {"snippet_id": 7579, "code": " from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 28822, "code": ": \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if", "label": 0}, {"snippet_id": 59913, "code": " load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists", "label": 0}, {"snippet_id": 6518, "code": "'hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: return self.oidc_error( \"You must log in with an account from the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN", "label": 0}, {"snippet_id": 32247, "code": " value.append(self.char) self.read() if self.char is None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start) elif", "label": 0}, {"snippet_id": 43519, "code": " unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..'", "label": 0}, {"snippet_id": 16372, "code": ", args=(tournament_id,)), 'formset': formset}) if created: i.save() else: RoundPlayer.objects.filter(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number()==round_num): if t", "label": 0}, {"snippet_id": 17669, "code": " flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('register.html', form=form) @bp.route('/password", "label": 0}, {"snippet_id": 5450, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username", "label": 0}, {"snippet_id": 55662, "code": ",name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp", "label": 0}, {"snippet_id": 6684, "code": "'main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.')", "label": 1}, {"snippet_id": 41561, "code": " fixtures_standard from dashboard.views.data_group import ExtractionScriptForm, DataGroupForm from django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test", "label": 1}, {"snippet_id": 30357, "code": "'gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current user is already connected.'), 200) response.headers['Content-Type']='application", "label": 0}, {"snippet_id": 70399, "code": "'\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath,", "label": 1}, {"snippet_id": 51721, "code": " genSSCI(): pass def genCSRF(): pass def genOR(): pass render={ DT: genDT, SI: genSI, CSRF: genCSRF, OR: genOR, SSCI: genSSCI, SCI: genSCI } class generator(object): def __init__(self,category): self.scope={", "label": 1}, {"snippet_id": 14279, "code": ".is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api", "label": 0}, {"snippet_id": 24290, "code": " worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self", "label": 0}, {"snippet_id": 40037, "code": " on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self", "label": 1}, {"snippet_id": 58003, "code": " from ddt import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils import", "label": 0}, {"snippet_id": 36846, "code": "!=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects", "label": 0}, {"snippet_id": 47795, "code": " or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition", "label": 0}, {"snippet_id": 21404, "code": "\"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some", "label": 0}, {"snippet_id": 27736, "code": "\"\"Push the logged profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks", "label": 1}, {"snippet_id": 77730, "code": " security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version'", "label": 0}, {"snippet_id": 51436, "code": ": def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message self.exitcode=exitcode def fail(*args, **kwargs): ''' fail(message, exitcode=1)", "label": 0}, {"snippet_id": 9975, "code": " user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' ", "label": 0}, {"snippet_id": 57329, "code": " render(request, 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_edit", "label": 0}, {"snippet_id": 4941, "code": "'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path", "label": 0}, {"snippet_id": 75796, "code": " redirects app.\"\"\" import logging import re from django.db import models from django.utils.translation import ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver", "label": 0}, {"snippet_id": 28990, "code": " stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants", "label": 0}, {"snippet_id": 35497, "code": "=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag", "label": 0}, {"snippet_id": 83763, "code": " True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles, False otherwise", "label": 0}, {"snippet_id": 57567, "code": "'preview_courselet' STEP_7='next_steps' STEP_8='invite_somebody' INTRODUCTION_COURSE_ID='introduction_course_id' VIEW_INTRODUCTION=STEP_1 INTRODUCTION_INTRO=STEP_2 CREATE_COURSE=STEP_3 CREATE_COURSELET", "label": 1}, {"snippet_id": 64052, "code": "(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest. \"\"\" eppn=session.get('user_eppn') if eppn is None: current_app", "label": 0}, {"snippet_id": 23482, "code": " None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment", "label": 0}, {"snippet_id": 42032, "code": ") new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products", "label": 0}, {"snippet_id": 27686, "code": " events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target", "label": 1}, {"snippet_id": 67087, "code": "(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp", "label": 0}, {"snippet_id": 76394, "code": ".image_format==\"image/jpeg\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s", "label": 0}, {"snippet_id": 53067, "code": " 'TestLastName', 'zipcode': '10118', 'phone_number': '+263771819478', 'email': 'test_email@gmail.com', }, } self.client.login(username='testuser', password='password') self.assertTemplateUsed('users/update", "label": 1}, {"snippet_id": 30621, "code": "() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session.query(Grudget).all() return jsonify(grudget=[g.serialize for g in grudgets]) @app.route('/') @app", "label": 0}, {"snippet_id": 84172, "code": ") elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip} if group_slug is not None: initial.update({'content_type': group_ct.id, 'object_id': group.id}) if article is None", "label": 0}, {"snippet_id": 74618, "code": " try: person_instance=Person.objects.get(orcid=request.POST['orcid']) except Person.DoesNotExist: pass return person_instance def get_shib_info_from_request(request): info={} info['last_name']=request.META", "label": 0}, {"snippet_id": 33222, "code": "(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return", "label": 0}, {"snippet_id": 56884, "code": "=concept) if form.is_valid(): form.save() return redirect('transaction_edit', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/concept_edit.html',", "label": 0}, {"snippet_id": 319, "code": " t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 33078, "code": " obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument) admin.site.register(Script", "label": 1}, {"snippet_id": 10727, "code": "': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed", "label": 0}, {"snippet_id": 4712, "code": "'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must", "label": 0}, {"snippet_id": 79826, "code": "'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): ", "label": 1}, {"snippet_id": 1773, "code": " django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to", "label": 0}, {"snippet_id": 5364, "code": "']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 82825, "code": " that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check", "label": 0}, {"snippet_id": 80127, "code": "*args, **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets", "label": 0}, {"snippet_id": 75303, "code": "'candidate_home', kwargs={'candidate_id': candidate.id})) @login_required def candidate_preview_submission(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request)", "label": 0}, {"snippet_id": 25789, "code": " self._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda", "label": 0}, {"snippet_id": 1280, "code": " static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import", "label": 0}, {"snippet_id": 30969, "code": ")) else: return render_template('newgrudge.html', grudget_id=grudget_id) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id", "label": 1}, {"snippet_id": 40970, "code": " a 200 status code') try: extracted_text=ExtractedText.objects.get(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains(resp, 'No Extracted Text exists for this Data Document') else", "label": 0}, {"snippet_id": 15753, "code": ".validate_on_submit(): return json.dumps({ 'commands': commands, 'html': render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html", "label": 0}, {"snippet_id": 59093, "code": " user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user :param kwargs: params to search by :return: invite if found", "label": 0}, {"snippet_id": 5198, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s", "label": 0}, {"snippet_id": 74602, "code": " get_person_instance(request): person_instance=None try: person_instance=Person.objects.get(netid=request.user.username) except Person.DoesNotExist: if 'orcid' in request.POST: try: person_instance=Person.objects", "label": 0}, {"snippet_id": 57281, "code": " transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button", "label": 0}, {"snippet_id": 48686, "code": "().split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm", "label": 0}, {"snippet_id": 83746, "code": " user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private is not None) and is_private(group): return False", "label": 0}, {"snippet_id": 34151, "code": "]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should", "label": 0}, {"snippet_id": 13479, "code": " try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider", "label": 0}, {"snippet_id": 73287, "code": "'password') user=authenticate(username=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is", "label": 0}, {"snippet_id": 57991, "code": " onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps(): data[step]={ 'done': onboarding_status.get(step, False) ", "label": 0}, {"snippet_id": 8012, "code": ")) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 38826, "code": ".uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default", "label": 0}, {"snippet_id": 29679, "code": ".route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items: return render_template('show.html', post=post, form=CommentForm()) flash('That Benwa", "label": 0}, {"snippet_id": 79372, "code": "=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict['title'", "label": 0}, {"snippet_id": 56285, "code": ".com/e/AsdE43E4&other=param' '&st=a&sd=d&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_a_deep_link_domain", "label": 0}, {"snippet_id": 2483, "code": "'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value", "label": 0}, {"snippet_id": 62822, "code": " force_authn=False): \"\"\" Common code for the tests that need to send an authentication request. This checks that the client is redirected to the idp. :param url: the url of the desired authentication mode.", "label": 1}, {"snippet_id": 63510, "code": "'eduPersonPrincipalName']=eppn response=self.app.dispatch_request() self.assertEqual(response.status, '200 OK') self.assertIn(self.app.config['SAML2_LOGOUT_REDIRECT_URL'], json.loads(response.data)['payload']", "label": 0}, {"snippet_id": 43648, "code": " '//*[@id=\"btn-toggle-edit\"]').click() raw_chem=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable", "label": 1}, {"snippet_id": 40001, "code": " chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField", "label": 0}, {"snippet_id": 2841, "code": "=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth.logout(request", "label": 0}, {"snippet_id": 40497, "code": "\nimport csv import time from lxml import html from django.urls import resolve from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import", "label": 0}, {"snippet_id": 62685, "code": "/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self, eppn, came_from): \"\"\" Add a", "label": 0}, {"snippet_id": 730, "code": "> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html',", "label": 0}, {"snippet_id": 34645, "code": " datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient", "label": 0}, {"snippet_id": 13739, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email'", "label": 0}, {"snippet_id": 8506, "code": "\"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 61854, "code": "\"lxml\") except requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") return page, soup def validate_subdomain", "label": 0}, {"snippet_id": 33231, "code": " obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin", "label": 0}, {"snippet_id": 13947, "code": " platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name", "label": 0}, {"snippet_id": 26380, "code": " raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following", "label": 0}, {"snippet_id": 22338, "code": " to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage(", "label": 0}, {"snippet_id": 68137, "code": ".org.name] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename", "label": 0}, {"snippet_id": 19559, "code": ": logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename", "label": 1}, {"snippet_id": 14748, "code": " json import redis import re import pprint pp=pprint.PrettyPrinter(indent=4) app=Flask(__name__) app.config['SECRET_KEY']='secret' app.jinja_env.filters['json_pretty']=lambda value: json.dumps(value, sort_keys", "label": 0}, {"snippet_id": 4394, "code": ".post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302)", "label": 0}, {"snippet_id": 16279, "code": ", initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer.objects.get_or_create(player=p, tournament=t) try: i", "label": 0}, {"snippet_id": 43372, "code": "\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"", "label": 0}, {"snippet_id": 21742, "code": " via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items", "label": 0}, {"snippet_id": 2788, "code": ": nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query", "label": 1}, {"snippet_id": 13157, "code": "'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url'", "label": 0}, {"snippet_id": 20129, "code": " sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis", "label": 0}, {"snippet_id": 13338, "code": " openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts", "label": 0}, {"snippet_id": 4557, "code": ".assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self", "label": 0}, {"snippet_id": 36157, "code": "'t use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def", "label": 0}, {"snippet_id": 43279, "code": "(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self):", "label": 1}, {"snippet_id": 3188, "code": " client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self", "label": 0}, {"snippet_id": 54028, "code": " read_stderr(self): \"\"\" Returns the current state of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string of the current state of", "label": 0}, {"snippet_id": 23493, "code": "\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]", "label": 0}, {"snippet_id": 22912, "code": "\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead", "label": 0}, {"snippet_id": 43871, "code": "('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name", "label": 0}, {"snippet_id": 64416, "code": ".form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA'), None) if verify_auth_token(eppn=eppn", "label": 0}, {"snippet_id": 58180, "code": ", onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 75.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 1, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5", "label": 1}, {"snippet_id": 39082, "code": " evaluates to boolean False ''' if self.get_zip_url()!='no_path_found': return(self.get_zip_url) else: return False def get_zip_url(self): uuid_path=f'{self.get_dg_folder()}/{str(self.fs_id)}.zip' zip_file_path", "label": 0}, {"snippet_id": 36966, "code": " called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\" or ", "label": 0}, {"snippet_id": 23252, "code": " is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr", "label": 0}, {"snippet_id": 253, "code": "%} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE", "label": 0}, {"snippet_id": 28232, "code": " error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj", "label": 0}, {"snippet_id": 75103, "code": " 'Your abstract contained invisible characters that we\\'ve removed. Please make sure your abstract is correct in the information section below.') if thesis.title !=form.cleaned_data['title']: messages.info", "label": 0}, {"snippet_id": 79130, "code": ".get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db", "label": 0}, {"snippet_id": 1150, "code": " file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t", "label": 0}, {"snippet_id": 15768, "code": ": commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']) def view_run_add(field): run_form=get_run_form() run_form[field].append_entry", "label": 0}, {"snippet_id": 47716, "code": "=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id', distinct=True)).\\ order_by().values('sid',", "label": 0}, {"snippet_id": 21219, "code": ".PROCESS_TYPE_RAYLET_MONITOR not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_RAYLET_MONITOR]=[ process_info ] def start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\"", "label": 0}, {"snippet_id": 29400, "code": " +str(current_user.is_authenticated) @auth.route('/logout') @login_required def logout(): logout_user() return redirect(url_for('auth.test')) @auth.route('/login/auth') def oauthorize(): if g.user.is_authenticated", "label": 1}, {"snippet_id": 69947, "code": " not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path", "label": 1}, {"snippet_id": 70685, "code": " in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 57506, "code": "=timezone.datetime.now() transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']: transaction.save() return redirect('transaction_detail", "label": 0}, {"snippet_id": 33876, "code": " body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word", "label": 0}, {"snippet_id": 11185, "code": " \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 0}, {"snippet_id": 41881, "code": "'bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') doc=DataDocument.objects.create(data_group=self.objects.dg) doc.matched=True self.objects.doc.matched=True doc.save() self.objects", "label": 0}, {"snippet_id": 52980, "code": "') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase): def setUp(self): super(TestUserUpdateView, self", "label": 0}, {"snippet_id": 35950, "code": ".common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo):", "label": 0}, {"snippet_id": 62761, "code": " logged in :type eppn: str :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str ", "label": 0}, {"snippet_id": 58838, "code": "', max_length=255) status=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES, default='tester'", "label": 0}, {"snippet_id": 12189, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) return render_to_response('student_account/login_and_register.html', context) @require_http_methods(['POST']", "label": 0}, {"snippet_id": 39823, "code": ".exceptions import ValidationError from.weight_fraction_type import WeightFractionType from.extracted_chemical import ExtractedChemical from.script import Script def validate_wf_analysis(value): if value < 0 or", "label": 1}, {"snippet_id": 12138, "code": " configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json", "label": 0}, {"snippet_id": 80365, "code": ") self.set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog) self.set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action", "label": 0}, {"snippet_id": 18129, "code": " --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n -Trying payload \"+payload+\" -\"\r for", "label": 0}, {"snippet_id": 46951, "code": "=datagroup.id) form.referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled=True groups=GroupType.objects.all() for group in groups: group.codes", "label": 0}, {"snippet_id": 84512, "code": ".pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request", "label": 1}, {"snippet_id": 59941, "code": "}).get(\"tables\") def inspect(self): \" Inspect the database and return a dictionary of table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is", "label": 0}, {"snippet_id": 18701, "code": ".get_argument(\"psword\").lower() \t\tcheck_details=self.check_database() \t\tif(check_details!=None): \t\t\tself.render('signin.html',error=check_details) \t\t\treturn \t\tself.set_secure_cookie(\"user\", self.username) ", "label": 0}, {"snippet_id": 55559, "code": "=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t", "label": 0}, {"snippet_id": 51485, "code": " version{1}.\".format(VERSION, required_version),32) def windows_program_exists(program): return subprocess.call([\"where\", \"/q\", program], shell=False)==0 def other_program_exists(program): return subprocess", "label": 1}, {"snippet_id": 6683, "code": "('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out", "label": 1}, {"snippet_id": 16212, "code": " each round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) PlayerRoundFormset=formset_factory(PlayerRoundForm, extra=2, formset=BasePlayerRoundFormset) if round_num: r=get_round_or_404", "label": 0}, {"snippet_id": 30323, "code": "='application/json' return response if result['issued_to'] !=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app's", "label": 0}, {"snippet_id": 34093, "code": "[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(", "label": 0}, {"snippet_id": 62149, "code": " validate_no_sniff(page): return validate_security_header( page, \"X-Content-Type-Options\", \"nosniff\", ) def validate_download_options(page): return validate_security_header( page, \"X-Download-Options\", \"noopen\", ", "label": 0}, {"snippet_id": 63743, "code": " ), 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing", "label": 0}, {"snippet_id": 60497, "code": ".json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route(", "label": 0}, {"snippet_id": 66915, "code": "-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=domain)).order_by('-timestamp') count=context[", "label": 0}, {"snippet_id": 41586, "code": " from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username", "label": 0}, {"snippet_id": 61056, "code": " hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status", "label": 0}, {"snippet_id": 3299, "code": " self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs)", "label": 0}, {"snippet_id": 24465, "code": ".node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def", "label": 1}, {"snippet_id": 47066, "code": "(data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg.get_name_as_slug() + \"_registered_records.csv\"), field_header_map={\"id\": \"DataDocument_id\"}, use_verbose_names=False) else: qs", "label": 0}, {"snippet_id": 80958, "code": " event_id, event_is_participating, **post): event_id=int(event_id) event_is_participating=event_is_participating event=http.request.env['event.event'].sudo().browse(event_id) subscription_update_counter", "label": 0}, {"snippet_id": 20250, "code": " appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client", "label": 0}, {"snippet_id": 46692, "code": ": table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType", "label": 0}, {"snippet_id": 82672, "code": " on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob", "label": 0}, {"snippet_id": 21316, "code": "): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the", "label": 0}, {"snippet_id": 20009, "code": "(ip, static_resources, dynamic_resources) else: logger.warning( \"Monitor: \" \"could not find ip for client{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver", "label": 0}, {"snippet_id": 9618, "code": ", settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer", "label": 0}, {"snippet_id": 59136, "code": ".email: my_invite=invite break user_email_name, user_domain=clean_email_name(user.email) invite_email, invite_domain=clean_email_name(invite.email) if invite_domain !=user_domain: continue res=re.search(", "label": 0}, {"snippet_id": 8039, "code": " return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a", "label": 0}, {"snippet_id": 31689, "code": ".status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword')", "label": 1}, {"snippet_id": 23932, "code": " message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause", "label": 0}, {"snippet_id": 44585, "code": " last_edited_by=user, kind='FO') extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition", "label": 0}, {"snippet_id": 78082, "code": "] if 'description' in resource: description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size\": size, \"name\": name, \"description\": description } resources.append(update_resource", "label": 1}, {"snippet_id": 67915, "code": " UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from", "label": 0}, {"snippet_id": 25996, "code": "\"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants", "label": 0}, {"snippet_id": 37956, "code": " if exclude: formset_fields=[in_field for in_field in formset_fields if not in_field in exclude] return forms.inlineformset_factory(parent_model=parent_model, model=model, fields=formset_fields, formset", "label": 0}, {"snippet_id": 68962, "code": " aH3gADFAvSVDv0v8t6dGc6XE9Dr7mGEFnQMHO4zhM1HaS2Nh0TiL2tFLttLbfG5o QlxCfXX9/nasj3K9qnlEg9G3+4T7lpdPmZRRe1O8cHCI5imVg6cLIiBLPO16e0fK yHIgYswLdrJFfaHNYM/SWJxHpX795zn+iCwyvZSlLfH9mlegOeVmj9cyhN/VOmS3 QRhlYXoA2z7WZTNoC6iAIlyIpMTcZr", "label": 0}, {"snippet_id": 26121, "code": "._raylet_socket_name) stdout_file, stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address, self", "label": 1}, {"snippet_id": 63818, "code": ", schedule_action from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp.authn.schemas import LogoutPayload, LogoutResponseSchema authn_views=Blueprint('authn', __name__) @authn_views", "label": 1}, {"snippet_id": 66894, "code": "(domain) context['bls']=blacklist.objects.filter(Q(domain=domain)|Q(url__contains=domain)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q", "label": 0}, {"snippet_id": 58586, "code": ".get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course", "label": 1}, {"snippet_id": 61058, "code": " host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self", "label": 0}, {"snippet_id": 28366, "code": " generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None)", "label": 0}, {"snippet_id": 49396, "code": "'data_document/' 'data_document_form.html')): datadocument=get_object_or_404(DataDocument, pk=pk) form=DataDocumentForm(request.POST or None, instance=datadocument) if form.is_valid(): if form.has_changed", "label": 0}, {"snippet_id": 44114, "code": " self.assertEqual(btn.get_attribute(\"href\"), detail_url, \"User should go back to detail view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self", "label": 0}, {"snippet_id": 80512, "code": " item: os.path.join('gui', 'handled_decorators.py') not in item, stack) dialog=QMessageBox(icon=QMessageBox.Critical) dialog.setWindowTitle('Error') dialog.setText(f\"{description +'_' * desired_width}\\n", "label": 0}, {"snippet_id": 38988, "code": "}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path.isdir(uuid_dir): return uuid_dir", "label": 0}, {"snippet_id": 84932, "code": " article.title}) context={'found_links': found_links, 'found_old_links': found_old_links, 'name': title} return render_to_response('wiki/backlinks.html', context, context_instance=RequestContext(request)", "label": 0}, {"snippet_id": 2403, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a><", "label": 0}, {"snippet_id": 31119, "code": " \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method=", "label": 0}, {"snippet_id": 35755, "code": "=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method", "label": 0}, {"snippet_id": 30687, "code": ": newGrudget=Grudget(name=request.form['name']) session.add(newGrudget) session.commit() return redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget/<int", "label": 0}, {"snippet_id": 76792, "code": " tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green, blue,", "label": 0}, {"snippet_id": 68379, "code": "=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse", "label": 0}, {"snippet_id": 23674, "code": "(_default_handler) logger.propagate=False def try_update_handler(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream)", "label": 1}, {"snippet_id": 527, "code": " basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath", "label": 1}, {"snippet_id": 26905, "code": " port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of", "label": 0}, {"snippet_id": 40881, "code": ".objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 35656, "code": "(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) |", "label": 1}, {"snippet_id": 26387, "code": ": If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is", "label": 0}, {"snippet_id": 68757, "code": "'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions we want are installed & enabled ", "label": 1}, {"snippet_id": 35144, "code": ") self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate", "label": 0}, {"snippet_id": 48390, "code": "=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page", "label": 0}, {"snippet_id": 61644, "code": "=validate_xss_protection(page), clickjacking_protection=validate_clickjacking_protection(page), good_cross_domain_policy=validate_cross_domain_policy(page), http_1_0_caching_disabled=validate_pragma(page), expires_set", "label": 1}, {"snippet_id": 73427, "code": "): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid(): user=create_account(request) send_user_email", "label": 0}, {"snippet_id": 68439, "code": " timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection class IndexView(PaginationMixin, ListView): template_name='twitter_hunter/index.html", "label": 0}, {"snippet_id": 31125, "code": " any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect", "label": 0}, {"snippet_id": 11422, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'", "label": 0}, {"snippet_id": 33330, "code": " admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec", "label": 0}, {"snippet_id": 31707, "code": "=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections", "label": 1}, {"snippet_id": 6711, "code": "'GET', 'POST']) def register(): form=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session", "label": 0}, {"snippet_id": 47996, "code": "=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if", "label": 0}, {"snippet_id": 55923, "code": " LOGIN_PATH='/people/me/login' EXPERIENCE_PATH='/e' PROFILE_PATH='/p' EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse", "label": 0}, {"snippet_id": 20691, "code": " interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path", "label": 0}, {"snippet_id": 43420, "code": "=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 11907, "code": " import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from", "label": 0}, {"snippet_id": 14220, "code": " original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def", "label": 0}, {"snippet_id": 76363, "code": ".Width() * _TILE_PIXEL_SIZE, rect_of_tiles.Height() * _TILE_PIXEL_SIZE) set_pixel_to_bgcolor=(layer_properties.image_format==\"image/png\" and layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties", "label": 0}, {"snippet_id": 47746, "code": "')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate", "label": 0}, {"snippet_id": 39645, "code": ".User', on_delete=models.SET_NULL, verbose_name=\"QA approved by\", null=True, blank=True,) qa_group=models.ForeignKey('QAGroup', verbose_name=\"QA group\", on_delete=models.SET_NULL, null=True, blank=True)", "label": 0}, {"snippet_id": 39591, "code": ", blank=True) doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models", "label": 0}, {"snippet_id": 77703, "code": " resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email", "label": 0}, {"snippet_id": 22622, "code": "\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes", "label": 0}, {"snippet_id": 83509, "code": ".core.urlresolvers import reverse from django.http import(Http404, HttpResponseRedirect, HttpResponseNotAllowed, HttpResponse, HttpResponseForbidden) from django.shortcuts import get_object_or_404, render_to_response", "label": 0}, {"snippet_id": 41063, "code": "], 'upc' :['stub_1860'], 'document_type':[1], 'return_url' :['/datadocument/167497/']} response=self.client.post('/link_product_form/167497/', data=data) self.assertRedirects(response,'/datadocument/167497", "label": 0}, {"snippet_id": 31358, "code": ".get('SOCIAL_AUTH_BITBUCKET_KEY') SOCIAL_AUTH_BITBUCKET_SECRET=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS=( 'social_core.backends.github.GithubOAuth2', 'social_core.backends", "label": 0}, {"snippet_id": 55203, "code": "): \t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path", "label": 0}, {"snippet_id": 5545, "code": "%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test", "label": 0}, {"snippet_id": 5185, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=", "label": 0}, {"snippet_id": 66815, "code": " get(self, request, **kwargs): if request.GET.get('keyword'): domain=request.GET.get('keyword') return HttpResponseRedirect(domain) context=self.get_context_data() return self.render_to_response(context", "label": 1}, {"snippet_id": 48994, "code": " template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail", "label": 0}, {"snippet_id": 83250, "code": ".run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers\") for subscriber in self.subscribed_queues: subscriber.put(ret)", "label": 0}, {"snippet_id": 274, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 48606, "code": " puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True", "label": 0}, {"snippet_id": 77688, "code": " if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size\": size, \"name\": name, \"description\"", "label": 1}, {"snippet_id": 78125, "code": " default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version", "label": 0}, {"snippet_id": 42987, "code": ") self.assertContains(response, '<b>Add New Habit and Practice</b>') def test_dd_link(self): response=self.client.get('/qa/extractedtext/5', follow=True) self.assertIn(b'/datadocument/5', response.content", "label": 0}, {"snippet_id": 73055, "code": " class Meta: model=Applicant fields=('pdf',) class CreatePositionForm(forms.ModelForm): text=CreatePositionFormText.upload_new_position description=CreatePositionFormText.please_select_either_filetype pdf_name", "label": 0}, {"snippet_id": 27664, "code": " None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes: worker:", "label": 0}, {"snippet_id": 72986, "code": "/login/', redirect_field_name=None) def position(request, position): return render(request, 'position.html',{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText", "label": 0}, {"snippet_id": 64788, "code": "(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions, points_per_case, 'failed test case %d' % i) except BaseException as e: if vlevel >=1: print(repr", "label": 1}, {"snippet_id": 10167, "code": " not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response", "label": 0}, {"snippet_id": 37760, "code": " dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 22709, "code": " won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note", "label": 1}, {"snippet_id": 23019, "code": " a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback", "label": 0}, {"snippet_id": 69732, "code": ".tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main(): from.log import init_logging init_logging() argparser=argparse.ArgumentParser() argparser.add_argument( '--admin", "label": 0}, {"snippet_id": 80289, "code": ".addAction('Lock All') self.lock_all_action.setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action", "label": 0}, {"snippet_id": 50731, "code": " Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a build step", "label": 0}, {"snippet_id": 20198, "code": ". \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id", "label": 0}, {"snippet_id": 16735, "code": "=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games_and_powers(omitting_players=sitters, players_doubling_up=two_gamers) @permission_required('tournament.add_game') def seed_games(request,", "label": 0}, {"snippet_id": 13133, "code": "'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, ", "label": 0}, {"snippet_id": 82743, "code": "(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored", "label": 0}, {"snippet_id": 21423, "code": "\"Valgrind detected some errors in process of \" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message", "label": 0}, {"snippet_id": 27023, "code": " the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and", "label": 0}, {"snippet_id": 13525, "code": ") elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages", "label": 0}, {"snippet_id": 11124, "code": " request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that", "label": 0}, {"snippet_id": 23001, "code": " return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function. This method takes a traceback from an exception", "label": 0}, {"snippet_id": 30296, "code": "'application/json' return response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response", "label": 0}, {"snippet_id": 36772, "code": ".extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date", "label": 0}, {"snippet_id": 8623, "code": "(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if", "label": 0}, {"snippet_id": 60600, "code": " path=request.path.rstrip(\"/\") if request.query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title", "label": 0}, {"snippet_id": 82408, "code": "'), re_path(r'^category/add/$', CategoryCreateView.as_view(), name='category-create-view'), re_path(r'^categories/$', CategoryListView.as_view(), name='category-list-view'), re_path(r'^detail/category/", "label": 0}, {"snippet_id": 36695, "code": "'datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count() stats['datadocument_with_extracted_text_percent", "label": 0}, {"snippet_id": 27360, "code": "=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if", "label": 0}, {"snippet_id": 28240, "code": ".TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an object is a Cython function or method\"\"\" def", "label": 0}, {"snippet_id": 32963, "code": " import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam',", "label": 1}, {"snippet_id": 65488, "code": ".container.set_show_border(False) self.container.connect(\"switch-page\", self.on_tab_switch) self.add(self.container) self.show_all() def destroy_container(self): self.container.destroy() def open_filechooser", "label": 0}, {"snippet_id": 82712, "code": " True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh ", "label": 0}, {"snippet_id": 12328, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine", "label": 0}, {"snippet_id": 63364, "code": ".path.join(HERE, 'saml2_settings.py') config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE': saml_config, 'NO_AUTHN_URLS':['^/test$'], }) return config def load_app(self, config)", "label": 0}, {"snippet_id": 12394, "code": " \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers", "label": 0}, {"snippet_id": 66181, "code": ".unlock_database_stack_box=self.builder.get_object(\"unlock_database_stack_box\") unlock_database_stack_switcher=self.builder.get_object(\"unlock_database_stack_switcher\") unlock_database_stack_switcher.set_stack(stack)", "label": 0}, {"snippet_id": 14761, "code": "='secret' app.jinja_env.filters['json_pretty']=lambda value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash", "label": 0}, {"snippet_id": 39960, "code": ".models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem", "label": 1}, {"snippet_id": 20842, "code": " not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path", "label": 0}, {"snippet_id": 60799, "code": "\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 67945, "code": " timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPConnection class IndexView(PaginationMixin, ListView): model=Hunt template_name='threat_hunter", "label": 0}, {"snippet_id": 8898, "code": "'duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id", "label": 0}, {"snippet_id": 31596, "code": "<scenario_id>[0-9]+)/$', project, name='project'), url(r'^project/compare/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name", "label": 0}, {"snippet_id": 35313, "code": " template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate(Max('id'", "label": 0}, {"snippet_id": 63085, "code": "(session['eduPersonPrincipalName'], eppn) self.acs('/login', eppn, _check) def test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session", "label": 0}, {"snippet_id": 67864, "code": ".get_context_data(**kwargs) count=self.object_list.count() context['count']=count return context def get_queryset(self): query=Org.objects.order_by('id') return query class TagListView(ListView): model", "label": 0}, {"snippet_id": 58933, "code": " type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else '' class", "label": 0}, {"snippet_id": 61272, "code": ".hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__", "label": 0}, {"snippet_id": 56326, "code": ".objects.create(person=orm_person, username='u') experience=ORMExperience.objects.create(title=title, description=description, share_id=share_id, author=orm_person) experience.picture=pic experience.save", "label": 0}, {"snippet_id": 69354, "code": "..') with conda.download_miniconda_installer(miniconda_version, miniconda_installer_md5) as installer_path: conda.install_miniconda(installer_path, USER_ENV_PREFIX) apt.install_packages([ 'gcc' ]) conda", "label": 0}, {"snippet_id": 71350, "code": "=self.user class AuthMiddleware(object): def __init__(self, app, config=None): self.app=app self._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/]+)/*(\\S*)' % (self._config['base_uri']", "label": 0}, {"snippet_id": 77962, "code": "=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in", "label": 0}, {"snippet_id": 56963, "code": " *args, **kwargs) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context['is_filtered']=self.is_filtered return", "label": 0}, {"snippet_id": 66521, "code": ".set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile chosen\") self.logging_manager.log_debug(\"Keyfile path: \" +keyfile_path) def on_composite_unlock_select_button_clicked(self, widget):", "label": 0}, {"snippet_id": 83840, "code": ", group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params", "label": 0}, {"snippet_id": 37947, "code": "(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude): formset_fields=model.detail_fields() if exclude: formset_fields=[in_field for in_field in formset_fields if not in_field", "label": 0}, {"snippet_id": 68840, "code": " import urlopen, URLError import pluggy from tljh import( apt, conda, hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX", "label": 0}, {"snippet_id": 60851, "code": " except NoSuchProcess: pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype:", "label": 0}, {"snippet_id": 13389, "code": " destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view", "label": 0}, {"snippet_id": 69589, "code": " but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest) def setup_plugins(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda", "label": 0}, {"snippet_id": 49437, "code": "=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX')", "label": 0}, {"snippet_id": 63540, "code": " came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context('/logout', method='POST', headers={'Cookie': cookie}, data={'csrf': csrft}): session['_csrft_", "label": 0}, {"snippet_id": 76655, "code": "%d\", abs_tile_row, rel_tile_row) if rel_tile_row < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col", "label": 0}, {"snippet_id": 64868, "code": " '--code', help=\"The student's code submission. Make sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test", "label": 0}, {"snippet_id": 72700, "code": "() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return", "label": 1}, {"snippet_id": 33482, "code": "(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(1, ethylparaben_stats['pucs_n']) def test_dtxsid_dds_n(self): dtxs", "label": 0}, {"snippet_id": 76493, "code": "(within_tiled_image.AsTuple())) im_true=im_whole_tiles.crop(within_tiled_image.AsTuple()) logger.debug(\"Stretching to requested: %s\", str( (user_width, user_height))) im_user=im_true.resize((user_width", "label": 0}, {"snippet_id": 74333, "code": ".update({\"instance\": self.get_object()}) return self.access_form_class(**form_kwargs) def _render_access_form(self): self.object=self.report self.template_name=self.access_template_name context=self.get_context_data", "label": 0}, {"snippet_id": 1115, "code": " charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head", "label": 0}, {"snippet_id": 71912, "code": "'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) msgs_key=req.get_messages() self.assertEquals(msgs_key, None) def test_set_redirect_uri(self): req=EngineAuthRequest.blank('/auth/google", "label": 1}, {"snippet_id": 17604, "code": " db.session.add(user) db.session.commit() if models.RangeBan.is_rangebanned(user.registration_ip): flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator", "label": 0}, {"snippet_id": 25145, "code": ".redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append", "label": 0}, {"snippet_id": 23194, "code": " error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj):", "label": 0}, {"snippet_id": 51116, "code": " args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext() options, args=self._optionParser.parse_args(argv) self", "label": 0}, {"snippet_id": 73244, "code": " self.add_error('email', message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText", "label": 0}, {"snippet_id": 1225, "code": " since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about.", "label": 0}, {"snippet_id": 43810, "code": ") ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count", "label": 0}, {"snippet_id": 34923, "code": "\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids", "label": 0}, {"snippet_id": 13514, "code": ") and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request", "label": 0}, {"snippet_id": 49862, "code": "%s'%filename) return redirect('/?filename=%s'%filename) flash(\"Invalid file\") return redirect('/openFile') @app.route('/save') def save(): if(not 'email' in session) and(not 'social' in session): return", "label": 0}, {"snippet_id": 38713, "code": ".dispatch import receiver from model_utils import FieldTracker from django.core.exceptions import ValidationError from.group_type import GroupType from.extracted_text import ExtractedText from.extracted_cpcat", "label": 0}, {"snippet_id": 25213, "code": "} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been", "label": 0}, {"snippet_id": 16805, "code": "'tournament': t, 'round': r, 'formset': formset}) g.save() for gp_id, field in f.cleaned_data.items(): if gp_id in['the_set', 'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try", "label": 0}, {"snippet_id": 17430, "code": " ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a mistake, contact ' 'a moderator on", "label": 0}, {"snippet_id": 74113, "code": "): EVAL_ACTION_TYPE=\"DASHBOARD\" class ReportBasePartial(EvalDataMixin, wizard_builder_partials.WizardFormPartial): model=models.Report storage_helper=view_helpers.EncryptedReportStorageHelper EVAL_ACTION_TYPE", "label": 0}, {"snippet_id": 23133, "code": " an error message to the driver to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g.", "label": 0}, {"snippet_id": 3269, "code": " not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation", "label": 0}, {"snippet_id": 73226, "code": " email_domain)) self.add_error('email', message) elif get_user_model().objects.filter(username=email.lower()).exists(): message=forms.ValidationError( format(ErrorMessages.user_already_exists % email))", "label": 0}, {"snippet_id": 9731, "code": "\"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not", "label": 0}, {"snippet_id": 21132, "code": ".include_java, java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info", "label": 0}, {"snippet_id": 77507, "code": ", target_url) layers_by_name=_LayersFromServerVars(target_url) for layer_name in layers_by_name.keys(): if layers_by_name[layer_name].db_type in(\"gedb\", \"glb\"): if layers_by_name[layer_name].label !=\"Imagery", "label": 0}, {"snippet_id": 6370, "code": "'] !=self.flow.client_id: logger.error('We are not the audience') return False if 'azp' in id_token and id_token['azp'] !=self.flow.client_id: logger.error('Authorized Party is not us') return False if", "label": 0}, {"snippet_id": 49671, "code": "); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if", "label": 0}, {"snippet_id": 7507, "code": " import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 16604, "code": " two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters", "label": 0}, {"snippet_id": 31749, "code": ")) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions", "label": 1}, {"snippet_id": 10145, "code": "/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the", "label": 0}, {"snippet_id": 41924, "code": " bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects", "label": 0}, {"snippet_id": 66432, "code": ") keyfile_chooser_dialog.add_filter(filter_text) response=keyfile_chooser_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +keyfile_chooser_dialog.get_filename", "label": 0}, {"snippet_id": 38009, "code": "(ExtractedTextForm, HnPFormSet) def four(): ListPresenceFormSet=make_formset(parent, child) ParentForm=ExtractedCPCatForm if extracted else ExtractedCPCatEditForm return(ParentForm, ListPresenceFormSet) def five()", "label": 0}, {"snippet_id": 72368, "code": " 'cluster_id': cluster_id} for daemon_id in GaneshaConf.instance(cluster_id).list_daemons()]) return result @UiApiController('/nfs-ganesha') class NFSGaneshaUi(BaseController): @Endpoint('GET', '/cephx", "label": 0}, {"snippet_id": 35866, "code": " docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def", "label": 0}, {"snippet_id": 31778, "code": "'defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse", "label": 0}, {"snippet_id": 70500, "code": "%} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE", "label": 0}, {"snippet_id": 13775, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided", "label": 0}, {"snippet_id": 5612, "code": "'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next", "label": 0}, {"snippet_id": 22264, "code": " self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self.node_manager_port=node_manager_port self.node_ip_address", "label": 0}, {"snippet_id": 9516, "code": " Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc", "label": 0}, {"snippet_id": 54978, "code": "/python-2.7.2-docs-html/library/os.path.html \tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would", "label": 0}, {"snippet_id": 61811, "code": ".DoesNotExist: results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result): prior_result.result_last_seen=timezone.now() prior_result.save() else: results_to_be_written", "label": 0}, {"snippet_id": 39731, "code": "() def pull_out_cp(self): if hasattr(self, 'extractedcpcat'): return self.extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return", "label": 1}, {"snippet_id": 47557, "code": ", 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC", "label": 0}, {"snippet_id": 84317, "code": " allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is", "label": 0}, {"snippet_id": 13342, "code": " import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from", "label": 0}, {"snippet_id": 24476, "code": ".log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames", "label": 1}, {"snippet_id": 38350, "code": " DataDocument from.ingredient import Ingredient from.product import Product from.source_category import SourceCategory from.product_document import ProductDocument from.extracted_text import ExtractedText", "label": 0}, {"snippet_id": 52406, "code": ".get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None) phase_code=request.form.get(\"project-phase\") board_id=request.form.get(\"board-id\") new_project=q.make_project(title,", "label": 0}, {"snippet_id": 27735, "code": ": \"\"\"Push the logged profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running", "label": 1}, {"snippet_id": 57038, "code": " employee: The employee executing the transaction(current user) :param transaction: The open transaction :return: A list of dictionaries. \"\"\" concepts_permitted_by_transaction=transaction.get_all_permissions", "label": 0}, {"snippet_id": 81227, "code": ".getLogger(__name__) class FitEvent(models.Model): _name='event.event' _inherit=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published", "label": 0}, {"snippet_id": 53302, "code": " :return: \"\"\" module_name=step.definition.name.rsplit('.', 1)[0] module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code(source_code", "label": 1}, {"snippet_id": 1730, "code": ", ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def", "label": 1}, {"snippet_id": 20785, "code": " address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self):", "label": 0}, {"snippet_id": 40357, "code": "% of them. \"\"\" from.qa_group import QAGroup from.extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es)", "label": 0}, {"snippet_id": 27346, "code": ".include_log_monitor=include_log_monitor self.autoscaling_config=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage()", "label": 0}, {"snippet_id": 61594, "code": "=validate_hsts_max_age(pshtt_results['HSTS Max Age']), hsts_entire_domain=validate_hsts_entire_domain(pshtt_results['HSTS Entire Domain']), hsts_preloaded=pshtt_results['HSTS Preloaded'], subdomain=validate_subdomain", "label": 1}, {"snippet_id": 992, "code": ") head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath", "label": 1}, {"snippet_id": 37237, "code": "'required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition", "label": 0}, {"snippet_id": 38369, "code": " ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_habits_and_practices import ExtractedHabitsAndPractices from.extracted_list_presence import ExtractedListPresence from", "label": 1}, {"snippet_id": 69275, "code": "-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user", "label": 1}, {"snippet_id": 10546, "code": " xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__", "label": 0}, {"snippet_id": 12847, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api", "label": 0}, {"snippet_id": 48918, "code": ").url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p,", "label": 0}, {"snippet_id": 60114, "code": "=conn.execute(testsql) if hasversion: sqlite_extensions[extension]=result.fetchone()[0] else: sqlite_extensions[extension]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\", \"FTS4\", \"FTS3", "label": 0}, {"snippet_id": 20814, "code": " raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make", "label": 0}, {"snippet_id": 22854, "code": " ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns", "label": 0}, {"snippet_id": 6375, "code": "'We are not the audience') return False if 'azp' in id_token and id_token['azp'] !=self.flow.client_id: logger.error('Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']", "label": 0}, {"snippet_id": 11742, "code": " user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth'][", "label": 0}, {"snippet_id": 28059, "code": " an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback.format_exc", "label": 0}, {"snippet_id": 20297, "code": " message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id", "label": 0}, {"snippet_id": 84130, "code": ".get(**article_args) except ArticleClass.DoesNotExist: article=None if request.method=='POST': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request", "label": 1}, {"snippet_id": 32545, "code": " result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def", "label": 0}, {"snippet_id": 51115, "code": "._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext() options, args=self._optionParser.parse_args", "label": 0}, {"snippet_id": 47833, "code": "(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template", "label": 0}, {"snippet_id": 6194, "code": " if g.oidc_id_token is None: return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the", "label": 0}, {"snippet_id": 25128, "code": "(): task_id_bin=ray._raylet.compute_task_id(object_id).binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id", "label": 0}, {"snippet_id": 72077, "code": ", 'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons", "label": 0}, {"snippet_id": 69720, "code": "): with open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={} hook=plugin_manager.hook hook.tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def", "label": 0}, {"snippet_id": 25075, "code": "-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix", "label": 0}, {"snippet_id": 3499, "code": "'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301", "label": 0}, {"snippet_id": 79224, "code": " validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if", "label": 0}, {"snippet_id": 61138, "code": " def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent", "label": 0}, {"snippet_id": 65183, "code": "<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points, 'failed to compile code') output_json(args", "label": 0}, {"snippet_id": 3235, "code": ".time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce", "label": 0}, {"snippet_id": 57672, "code": ".render(context) send_mail( rendered_subj, rendered_text, from_email, to_email, fail_silently=True ) def suspending_receiver(signal, **decorator_kwargs): \"\"\" Custom decorator to disable signals. Reference", "label": 0}, {"snippet_id": 68849, "code": " systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath(os.path.dirname(__file__))", "label": 0}, {"snippet_id": 57322, "code": " transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form", "label": 0}, {"snippet_id": 84466, "code": ".POST['revision']) article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group", "label": 0}, {"snippet_id": 71371, "code": "['PATH_INFO'].startswith('/_ah/'): return self.app(environ, start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None", "label": 1}, {"snippet_id": 58568, "code": "(BaseCommand): help='Onboarding preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except", "label": 1}, {"snippet_id": 53261, "code": " cauldron import templating from cauldron.cli import threads from cauldron.runner import redirection from cauldron.session import projects class UserAbortError(Exception): pass def set_executing(on: bool): \"\"", "label": 0}, {"snippet_id": 52924, "code": ".views import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(?P<room_id>[0-9]+)/', ChatRoomView.as_view(),", "label": 1}, {"snippet_id": 62726, "code": " query, and send both to the assertion consumer service, so that the user is logged in(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with any", "label": 0}, {"snippet_id": 54747, "code": " \t\tself.code_list=[] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data", "label": 0}, {"snippet_id": 68166, "code": "): hunt=get_object_or_404(Hunt, id=pk) if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter:index') def hunt_switch_enable(request, pk): hunt", "label": 0}, {"snippet_id": 48724, "code": " with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required", "label": 0}, {"snippet_id": 23910, "code": " object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker", "label": 0}, {"snippet_id": 63669, "code": "=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing", "label": 0}, {"snippet_id": 9185, "code": " in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 33268, "code": " def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument", "label": 0}, {"snippet_id": 22990, "code": ".sha1() id_hash.update(uuid.uuid4().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve", "label": 0}, {"snippet_id": 82965, "code": "(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of", "label": 0}, {"snippet_id": 54041, "code": " intermediate display values while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents \"\"\" try: return self.stderr_interceptor.read_all() except Exception:", "label": 1}, {"snippet_id": 28532, "code": "\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]", "label": 0}, {"snippet_id": 6513, "code": ".is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: return self.oidc_error( \"You must log in with an account from the{0} domain.\" .format", "label": 0}, {"snippet_id": 45840, "code": ": form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit", "label": 0}, {"snippet_id": 42389, "code": "/datagroup/%s/' % dg_co.id) self.assertIn(b'Download Raw', resp.content) dg_ids=DataDocument.objects.filter( id__in=ExtractedChemical.objects.all().values('extracted_text_id') ).order_by().values_list(", "label": 0}, {"snippet_id": 55054, "code": ".startswith(other.path)): \t\t\tr=self.path[len(other.path):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath", "label": 0}, {"snippet_id": 38023, "code": "(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO': one, ", "label": 0}, {"snippet_id": 9730, "code": " \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not", "label": 0}, {"snippet_id": 55434, "code": ",other.path) \t\telse: \t\t\treturn os.rename(self.path,other) \tdef renames(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) ", "label": 0}, {"snippet_id": 23232, "code": " check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method. ", "label": 0}, {"snippet_id": 69257, "code": " prevents accidental mixing of python and conda packages! \"\"\" conda.ensure_pip_packages(prefix,[ 'jupyterhub==0.9.4', 'jupyterhub-dummyauthenticator==0.3.1', 'jupyterhub-systemdspawner==0.11', 'jupyterhub", "label": 1}, {"snippet_id": 30000, "code": "=False) picture=Column(String(250)) class Grudget(Base): __tablename__='Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id'))", "label": 1}, {"snippet_id": 43777, "code": " browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]')", "label": 0}, {"snippet_id": 65615, "code": "(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 29887, "code": "/comment/delete/<int:comment_id>', methods=['GET', 'POST']) @login_required def delete_comment(post_id, comment_id): comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment", "label": 0}, {"snippet_id": 83478, "code": ", None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article", "label": 0}, {"snippet_id": 7030, "code": " new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash", "label": 0}, {"snippet_id": 66116, "code": ".database_filepath=filepath self.unlock_database() def unlock_database(self): self.builder=Gtk.Builder() self.builder.add_from_resource(\"/run/terminal/KeepassGtk/unlock_database.ui\") self.set_headerbar() self", "label": 0}, {"snippet_id": 20381, "code": "() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self", "label": 0}, {"snippet_id": 54919, "code": "(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition,chapter,problem_number,prob_code)) \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book", "label": 1}, {"snippet_id": 78117, "code": " extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra", "label": 0}, {"snippet_id": 45550, "code": "'detail_formset': child_formset} ) colors=[' color=(hex for hex in colors) for form in child_formset.forms: form.color=next(color) else: context['edit_text_form']=ParentForm() return render(request, template_name", "label": 1}, {"snippet_id": 31564, "code": "'projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)", "label": 0}, {"snippet_id": 70332, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 55374, "code": "\tdef mkdir(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path", "label": 0}, {"snippet_id": 43459, "code": "-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self", "label": 0}, {"snippet_id": 35945, "code": " django.utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices", "label": 0}, {"snippet_id": 20477, "code": "=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging", "label": 0}, {"snippet_id": 74755, "code": "=degree_type) else: person_form=PersonForm(initial=shib_info, degree_type=degree_type) candidate_form=CandidateForm(degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form'", "label": 0}, {"snippet_id": 23831, "code": " sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min", "label": 0}, {"snippet_id": 36906, "code": " return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc('created_at', 'month", "label": 0}, {"snippet_id": 66743, "code": ".http import HttpResponse, HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip", "label": 1}, {"snippet_id": 81186, "code": "', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bz_tickets'), ('subscription_partner', '=',", "label": 0}, {"snippet_id": 19715, "code": " import argparse import logging import os import time import traceback import redis import ray from ray.autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import", "label": 0}, {"snippet_id": 69697, "code": "(plugin_manager): \"\"\" Ensure we have a config.yaml present \"\"\" for path in[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config.d')]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files", "label": 0}, {"snippet_id": 81970, "code": " class URLUpdateView(LoginRequiredMixin, UpdateView): queryset=JustURL.objects.all() form_class=JustULRUpdateForm template_name='url-update-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView)", "label": 0}, {"snippet_id": 41834, "code": "') self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.gt.code='UN' self.objects.gt.save() response=self.client.get", "label": 0}, {"snippet_id": 15654, "code": "=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command", "label": 0}, {"snippet_id": 41928, "code": " response.content.decode(), \"Bulk create button should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects.create(document=doc, product=p) response", "label": 0}, {"snippet_id": 29820, "code": " instance=Tag.query.filter_by(name=tagname).first() if instance: return instance, False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance", "label": 0}, {"snippet_id": 75200, "code": ": return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': person_form", "label": 0}, {"snippet_id": 4718, "code": "'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on'", "label": 0}, {"snippet_id": 74536, "code": ": next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error('login() -got anonymous user: %s' % request.META) return HttpResponseServerError('Internet Server", "label": 1}, {"snippet_id": 53226, "code": " import direct_to_template from oi.projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request", "label": 1}, {"snippet_id": 30583, "code": " grudget=session.query(Grudget).filter_by(id=grudget_id).one() grudges=session.query(Grudge).filter_by(grudget_id=grudget.id).all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route('/grudget/", "label": 1}, {"snippet_id": 56418, "code": "={}&other=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/p/a_b.c&other=param' '&st=%40a_b.c&sd=my+info&si=%2Fmedia", "label": 0}, {"snippet_id": 69138, "code": " traefik_unit_template=f.read() proxy_secret_path=os.path.join(STATE_DIR, 'traefik-api.secret') if not os.path.exists(proxy_secret_path): with open(proxy_secret_path, 'w') as f: f.write(secrets.token_hex", "label": 0}, {"snippet_id": 20737, "code": "=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self._node_ip_address=ray_params.node_ip_address self._redis_address=ray_params.redis_address", "label": 0}, {"snippet_id": 8165, "code": " enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template", "label": 0}, {"snippet_id": 25214, "code": " \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args", "label": 0}, {"snippet_id": 12220, "code": " the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around", "label": 0}, {"snippet_id": 8914, "code": " state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), ", "label": 0}, {"snippet_id": 638, "code": " or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content", "label": 0}, {"snippet_id": 30063, "code": "=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self)", "label": 0}, {"snippet_id": 48542, "code": ".document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect('link_product_list'", "label": 0}, {"snippet_id": 11881, "code": ".login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import", "label": 0}, {"snippet_id": 58988, "code": "'invite': self, 'current_site': Site.objects.get_current(request) }) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render(context) text_template=loader.get_template", "label": 0}, {"snippet_id": 22939, "code": " None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time", "label": 0}, {"snippet_id": 17838, "code": ".flash(flask.Markup('Your password was reset. Log in now.'), 'info') return flask.redirect(flask.url_for('account.login')) return flask.render_template('password_reset.html', form=form) @bp.route('/profile", "label": 0}, {"snippet_id": 41923, "code": " bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument", "label": 0}, {"snippet_id": 52848, "code": "=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ 'id':", "label": 0}, {"snippet_id": 69437, "code": "(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range", "label": 0}, {"snippet_id": 42638, "code": "): response=self.c.get('/find/?q=terro') self.assertNotContains(response, '<table') self.assertContains(response, '<div class=\"results-wrapper\">') def test_product_facet_returns(self): response=self.c.get", "label": 0}, {"snippet_id": 70885, "code": ".st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath,", "label": 0}, {"snippet_id": 3560, "code": " test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/'", "label": 0}, {"snippet_id": 19154, "code": " name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker", "label": 1}, {"snippet_id": 78196, "code": ".add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action", "label": 0}, {"snippet_id": 63183, "code": " with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_SUCCESS_REDIRECT_URL", "label": 0}, {"snippet_id": 24819, "code": " detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"", "label": 0}, {"snippet_id": 60216, "code": ": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name in a thread\"\"\" page_size", "label": 0}, {"snippet_id": 41823, "code": ".pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should", "label": 0}, {"snippet_id": 30170, "code": " Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''.join(random.choice(string.ascii_uppercase +string.digits) for x in xrange", "label": 0}, {"snippet_id": 75974, "code": "=RedirectManager() class Meta: verbose_name=_('redirect') verbose_name_plural=_('redirects') ordering=('-update_dt',) def __str__(self): redirect_text='{type}:{from_to_url}' if self.redirect_type in['prefix', 'page',", "label": 0}, {"snippet_id": 76213, "code": " in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re.sub(ending +'$', '.html', path) return self.get_full_path( filename=to, language=language, version_slug", "label": 0}, {"snippet_id": 6440, "code": " return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the auth code for actual credentials, then redirect to the originally requested page. \"\"\"", "label": 0}, {"snippet_id": 39873, "code": "[validate_wf_analysis]) upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script, on_delete=models.CASCADE", "label": 0}, {"snippet_id": 12067, "code": " except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view", "label": 1}, {"snippet_id": 13169, "code": "'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders ", "label": 0}, {"snippet_id": 18476, "code": " and logs in the user. \t\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower(", "label": 1}, {"snippet_id": 14367, "code": " unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods", "label": 0}, {"snippet_id": 3781, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self", "label": 0}, {"snippet_id": 78990, "code": " of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the", "label": 0}, {"snippet_id": 58643, "code": ").exists(): update_onboarding_step(onboarding.STEP_5, instructor.user_id) if Invite.objects.filter(instructor=instructor).exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists", "label": 1}, {"snippet_id": 27744, "code": " default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In", "label": 1}, {"snippet_id": 29221, "code": " app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True) app.config.from_object('secrets') db.init_app(app) migrate=Migrate(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader", "label": 0}, {"snippet_id": 60035, "code": "'): raise click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading the SpatiaLite module.\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite", "label": 0}, {"snippet_id": 62126, "code": " False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection", "label": 0}, {"snippet_id": 71063, "code": " header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we", "label": 0}, {"snippet_id": 34433, "code": ") ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count", "label": 0}, {"snippet_id": 13777, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\"))", "label": 0}, {"snippet_id": 59286, "code": "(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table or custom query \"\"\".strip())", "label": 0}, {"snippet_id": 77037, "code": "&%s=%d\" _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__", "label": 0}, {"snippet_id": 55257, "code": "(self.path) \tdef splitext(self): \t\treturn os.path.splitext(self.path) \tdef splitunc(self): \t\treturn os.path.splitunc(self.path) \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode) \tdef chdir", "label": 0}, {"snippet_id": 26316, "code": "=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will", "label": 0}, {"snippet_id": 39523, "code": ".BooleanField(default=False) @classmethod def detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' def get_datadocument_url(self", "label": 0}, {"snippet_id": 17068, "code": " the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue try: g.full_clean() except ValidationError as e: f.add_error(None, e) g.delete() return render(request, 'rounds/create_games.html", "label": 0}, {"snippet_id": 463, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False", "label": 0}, {"snippet_id": 12245, "code": " reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client", "label": 0}, {"snippet_id": 50692, "code": "'Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path) logfile", "label": 0}, {"snippet_id": 71025, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list':", "label": 0}, {"snippet_id": 33340, "code": ".urls import resolve from django.test import TestCase, override_settings from django.test.client import Client from django.contrib.auth import authenticate from django.contrib.auth.models import User from", "label": 0}, {"snippet_id": 23538, "code": ". default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The", "label": 0}, {"snippet_id": 40394, "code": "(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es, qa_checked=False ).values_list('pk', flat=True)) if len(doc_text_ids) < 100 and len(doc_text_ids) > 0: texts=ExtractedText", "label": 0}, {"snippet_id": 83262, "code": " ContentType from django.utils.translation import ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern", "label": 0}, {"snippet_id": 43657, "code": "-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id='id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field", "label": 1}, {"snippet_id": 20461, "code": " required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument", "label": 0}, {"snippet_id": 10432, "code": " CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core", "label": 0}, {"snippet_id": 72725, "code": ".get('key') is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user", "label": 1}, {"snippet_id": 16453, "code": "=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id", "label": 0}, {"snippet_id": 51012, "code": " steps=flatten_string_list(steps) steps=flatten_comma_list(steps) self._enable_all_options=ALL_STEPS in steps self._disable_all_options=DEFAULT_STEPS not in steps self._disabled_options=set(s[1:] for s", "label": 0}, {"snippet_id": 32919, "code": "/output based characters < > >> in the command. < will be redirecting input, > will be output and >> is output append \"\"\" if(\"<\" in cmd): SetUpInputRedirect(cmd) if(\">\" in cmd): SetUpOutputRedirect(cmd) if(\"", "label": 1}, {"snippet_id": 37915, "code": ": integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included exclude: list which fields to leave out of the form . ''' group_type=document.data_group", "label": 0}, {"snippet_id": 50730, "code": "\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a", "label": 0}, {"snippet_id": 49694, "code": "'email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath", "label": 0}, {"snippet_id": 84498, "code": "(article_qs, **article_args) old_title=article.changeset_set.filter( revision=revision+1).get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist:", "label": 1}, {"snippet_id": 32400, "code": " base def command(self): if self.accept(TokenType.WORD): command=self.last.lexeme args=[] while self.accept(TokenType.WORD): args.append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections", "label": 0}, {"snippet_id": 21130, "code": "._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET", "label": 0}, {"snippet_id": 20194, "code": ": The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData", "label": 0}, {"snippet_id": 41196, "code": ".objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number':['47']} response=self.client.post('/extractedtext/edit/354784/', data", "label": 0}, {"snippet_id": 76005, "code": ".get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self.to_url if self.redirect_type=='prefix': to_url", "label": 0}, {"snippet_id": 22320, "code": "=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs", "label": 0}, {"snippet_id": 73927, "code": "=None) def position(request, position): return render(request, 'position.html', position_detail_data(request, position)) def upload_applications(request): position=Position.objects.get( id=request.POST", "label": 1}, {"snippet_id": 64663, "code": "'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'StopAsyncIteration', 'StopIteration', 'str', 'sum', 'super', 'SyntaxError', 'SyntaxWarning', ", "label": 0}, {"snippet_id": 27368, "code": "\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else", "label": 0}, {"snippet_id": 32291, "code": " Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy creation of a", "label": 0}, {"snippet_id": 9051, "code": " as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core", "label": 0}, {"snippet_id": 13230, "code": "\" Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django", "label": 0}, {"snippet_id": 74354, "code": " self.render_to_response(context) def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self.request", "label": 0}, {"snippet_id": 78669, "code": " string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session", "label": 0}, {"snippet_id": 81577, "code": ") new_repeating_event=old_repeating_event.copy(default={'website_published': True}) new_repeating_event.date_end=new_end_date new_repeating_event.date_begin=new_start_date old_repeating_event.fit_repetition_enabled", "label": 0}, {"snippet_id": 65715, "code": ":///run/terminal/KeepassGtk/database.kdbx\") new_database=Gio.File.new_for_path( self.filechooser_creation_dialog.get_filename()) stock_database.copy(new_database, Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 28699, "code": "(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger.propagate=False def", "label": 1}, {"snippet_id": 81698, "code": " event id: %s, name: %s', event.event_type_id.name, event.name) can_subscribe=True return can_subscribe def can_unsubscribe(self, event): event_start=datetime.strptime(event.date_begin_located, '%Y-%m-", "label": 0}, {"snippet_id": 7951, "code": " Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403", "label": 0}, {"snippet_id": 34009, "code": ".browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem", "label": 0}, {"snippet_id": 81913, "code": ") clicktracker.save() object.save() return link_redirect(request, pk) return redirect('home-view') class URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm", "label": 1}, {"snippet_id": 68512, "code": "' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by", "label": 0}, {"snippet_id": 37406, "code": " model=Product fields=['title', 'manufacturer', 'brand_name', 'upc', 'size', 'color'] def __init__(self, *args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'", "label": 0}, {"snippet_id": 28639, "code": " else: resources={} if \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The resources dictionary must not \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU", "label": 0}, {"snippet_id": 59839, "code": " metadata): metadata.update( { \"source\": metadata.get(\"source\") or self.metadata(\"source\"), \"source_url\": metadata.get(\"source_url\") or self.metadata(\"source_url\"), \"license\": metadata.get(\"license\") or", "label": 0}, {"snippet_id": 53014, "code": ".assertEqual( self.view.get_success_url(), '/users/~update/ ) def test_get_object(self): self.assertEqual( self.view.get_object(), self.user ) def test_updating_user_info(self): update_url=reverse('users", "label": 0}, {"snippet_id": 55017, "code": ".path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized", "label": 0}, {"snippet_id": 77183, "code": " tiles.\"\"\" base_url=_TILE_BASE_URL %(self.target_url, self.request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return", "label": 0}, {"snippet_id": 60310, "code": " truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args==('interrupted',): raise InterruptedError(e)", "label": 0}, {"snippet_id": 27373, "code": ": kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update", "label": 0}, {"snippet_id": 2792, "code": "]=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT", "label": 1}, {"snippet_id": 43146, "code": " extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 30) elp_flagged=elps.filter(qa_flag=True).first() self.assertIn(elp_flagged.raw_cas.encode(), response.content) elp_not_flagged=elps", "label": 0}, {"snippet_id": 43469, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..'", "label": 0}, {"snippet_id": 32896, "code": " __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type, value, traceback)", "label": 0}, {"snippet_id": 33249, "code": " HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj)", "label": 0}, {"snippet_id": 16599, "code": "(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not", "label": 0}, {"snippet_id": 37429, "code": " self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required' class Meta: model=Product fields=['title', 'manufacturer', 'brand_name', 'size', ", "label": 0}, {"snippet_id": 282, "code": " endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 28302, "code": "(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users", "label": 0}, {"snippet_id": 77485, "code": " command to be executed. target_path: Target published point. Returns: The layers from the server definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information", "label": 0}, {"snippet_id": 79797, "code": "(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization", "label": 1}, {"snippet_id": 64191, "code": "'Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods=['POST'])", "label": 0}, {"snippet_id": 76518, "code": " _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles for a given image. Args: rect_of_tiles: is ul -lr(lr is exclusive!) addresses of tiles at a given zoom_level. zoom_level: self", "label": 0}, {"snippet_id": 75822, "code": " import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log=logging.getLogger(__name__) HTTP_STATUS_CHOICES=( (301, _('301 -Permanent Redirect')), (302", "label": 0}, {"snippet_id": 66133, "code": ") self.assemble_stack() self.connect_events() def set_headerbar(self): headerbar=self.builder.get_object(\"headerbar\") headerbar.set_subtitle(self.database_filepath) self.window.set_titlebar(headerbar) self", "label": 0}, {"snippet_id": 57826, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_THREAD: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.INVITE_SOMEBODY: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.PREVIEW_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 1}, {"snippet_id": 51048, "code": "\"+-\") def modify_optional_steps(self, *steps): ''' Add or remove optional steps in the build. \"+foo\" include step foo. \"-foo\" exclude step foo. ''' for name in steps: if name.startswith(\"+\"): name=name", "label": 0}, {"snippet_id": 54298, "code": ".name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians", "label": 0}, {"snippet_id": 40019, "code": " null=True, blank=True) rid=models.CharField(max_length=50, null=True, blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True, blank=True", "label": 1}, {"snippet_id": 73404, "code": " parse_upload from screendoor.redactor import parse_applications @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html',", "label": 0}, {"snippet_id": 58791, "code": " def testers(self): return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q", "label": 0}, {"snippet_id": 19319, "code": "(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR, traceback_str", "label": 0}, {"snippet_id": 66262, "code": "\"password_unlock_button\") password_unlock_button.connect(\"clicked\", self.on_password_unlock_button_clicked) keyfile_unlock_button=self.builder.get_object(\"keyfile_unlock_button\") keyfile_unlock_button.connect(\"clicked", "label": 0}, {"snippet_id": 47658, "code": " \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc", "label": 0}, {"snippet_id": 74280, "code": " request): next_url=None if \"next\" in request.GET: if re.search(r\"^/[\\W/-]*\", request.GET[\"next\"]): next_url=request.GET[\"next\"] return next_url def dispatch(self, request, *args, **kwargs): logger.debug", "label": 1}, {"snippet_id": 57879, "code": "=True).find_one({'name': setting_name}) if not onboarding_setting: c_onboarding_settings().insert({'name': setting_name, 'data': ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT", "label": 0}, {"snippet_id": 48385, "code": " dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is", "label": 0}, {"snippet_id": 73237, "code": ": message=forms.ValidationError( format(ErrorMessages.user_already_exists % email)) self.add_error('email', message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login", "label": 0}, {"snippet_id": 42051, "code": "'bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product self.assertEqual(product.title, 'unknown', 'Title should be unknown in", "label": 0}, {"snippet_id": 9594, "code": "\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request", "label": 0}, {"snippet_id": 40326, "code": " true when the percent checked is above the threshold \"\"\" return self.get_pct_checked_numeric() >=self.QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA Group for", "label": 0}, {"snippet_id": 48070, "code": ", } return render(request, template_name, context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc.html'): hnp=get_object_or_404(ExtractedHabitsAndPractices", "label": 0}, {"snippet_id": 55626, "code": "\t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef __init__(self,path): \t\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r ", "label": 0}, {"snippet_id": 53750, "code": " cauldron.render import texts as render_texts from cauldron.session.buffering import RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management class for", "label": 0}, {"snippet_id": 47271, "code": " ds_list, frm_list=[],[] for ds in datasources: frm_list.append(PriorityForm(request.POST or None, instance=ds)) registered=Count('datagroup__datadocument') uploaded =Count('datagroup__datadocument', filter", "label": 0}, {"snippet_id": 40988, "code": ": self.assertContains(resp, '<h4>Extracted Text') def test_script_links(self): doc=DataDocument.objects.first() response=self.client.get(f'/datadocument/179486/') self.assertIn('Download Script',response", "label": 0}, {"snippet_id": 77845, "code": ": org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('-------------------", "label": 0}, {"snippet_id": 38714, "code": " import receiver from model_utils import FieldTracker from django.core.exceptions import ValidationError from.group_type import GroupType from.extracted_text import ExtractedText from.extracted_cpcat import", "label": 0}, {"snippet_id": 5143, "code": ".user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password", "label": 0}, {"snippet_id": 83551, "code": " wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION except AttributeError:", "label": 0}, {"snippet_id": 56215, "code": " \\ .when_call_login_email_redirect() \\ .then_response_should_be_a_redirect_to_app_deeplink_with_params() class ScenarioMaker: def when_call_login_email_redirect(self): client=Client() self.response=client", "label": 0}, {"snippet_id": 80151, "code": ".aboutToQuit.connect(self.clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self", "label": 0}, {"snippet_id": 5954, "code": " app.route('/oidc_callback')(self.oidc_callback) app.before_request(self.before_request) app.after_request(self.after_request) self.flow=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'], scope", "label": 0}, {"snippet_id": 63334, "code": "(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__) @test_views.route('/test') def test(): return 'OK' @test_views.route('/test3') def test3(", "label": 0}, {"snippet_id": 15728, "code": " set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/submit', methods=['POST']) def view_run_submit()", "label": 0}, {"snippet_id": 30955, "code": " user_id=login_session['user_id']) session.add(newGrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('newgrudge.html', grudget_id=grudget_id)", "label": 1}, {"snippet_id": 78660, "code": " ID of the organization you want to asign the data request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset", "label": 0}, {"snippet_id": 51266, "code": "._check_call([\"rsync\"] +args, **kwargs) def _dependency_collection(self): return read_dependencies_from_filename(os.path.join('projectdata', 'dependencies.txt'), logfile=sys.stdout) def fetch_dependencies(self, ", "label": 0}, {"snippet_id": 83679, "code": " message_template=None): self.title=title self.user_ip=get_real_ip(request) self.created_at=datetime.now() if message_template is None: message_template=('Possible edit conflict:' ' another user started editing this", "label": 0}, {"snippet_id": 44356, "code": "-weight_fraction_type\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_cas\"]') with self.assertRaises(NoSuchElementException): self.browser", "label": 0}, {"snippet_id": 40370, "code": "(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1: return QAGroup.objects.filter(extraction_script=es).first", "label": 0}, {"snippet_id": 41505, "code": " extractedtext__isnull=False ): doc=DataDocument.objects.filter( document_type__group_type__code=code, extractedtext__isnull=False ).first() response=self.client.get( reverse('data_document',kwargs={'pk': doc.pk}) ", "label": 0}, {"snippet_id": 42896, "code": " new_group=QAGroup.objects.get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa", "label": 0}, {"snippet_id": 58937, "code": " enroll_unit_code=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', ", "label": 0}, {"snippet_id": 43388, "code": ".find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ", "label": 0}, {"snippet_id": 16650, "code": " iterations=10) for tp in tourney_players: seeder.add_player(tp) for n in range(1, round_number): rnd=tournament.round_numbered(n) for g in rnd.game_set.all(): game=set() for gp in g.gameplayer_set.all", "label": 0}, {"snippet_id": 79281, "code": " def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest", "label": 0}, {"snippet_id": 5510, "code": "%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 48858, "code": ".objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value(", "label": 0}, {"snippet_id": 34621, "code": " stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical", "label": 0}, {"snippet_id": 31600, "code": "), url(r'^project/compare/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page", "label": 0}, {"snippet_id": 34145, "code": " parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(", "label": 0}, {"snippet_id": 14444, "code": " finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to", "label": 0}, {"snippet_id": 68417, "code": " PaginationMixin from django.db.models import Q, Count from.models import tweet, Hunt from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import", "label": 0}, {"snippet_id": 52324, "code": "\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(\"/current-board\", methods=[\"POST\"]) def update_most_recently_clicked_board(): \"\"\" \"\"\" board_id=request.form", "label": 1}, {"snippet_id": 32540, "code": " return None def expect(self, ttype): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in", "label": 0}, {"snippet_id": 81868, "code": " 'success-url-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm(request.POST or None) if form.is_valid", "label": 0}, {"snippet_id": 20755, "code": " self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def", "label": 0}, {"snippet_id": 35690, "code": "].value()) product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr", "label": 0}, {"snippet_id": 73097, "code": " model=Position fields=('pdf', 'url_ref') widgets={'url_ref': forms.TextInput(attrs={'disabled': 'disabled'})} def clean(self): pdf=self.cleaned_data.get('pdf') url=self.cleaned_data.get('url_ref') if not", "label": 0}, {"snippet_id": 68934, "code": " IgQJHNGNX1T3z1XgZhI+Vi8SLFFSh8x9FeUZC6YJu0VXXj5iz+eZmk/nYjUt4Mtc pVsVYIB7oIDIbImODm8ggsgrIzqxOzQVP1zsCGek5U6QFc9GYrQ+Wv3/fG8hfkDn xXLww0OGaEQxfodm8cLFZ5b8JaG3+Yxfe7JkNclwvRimvlAjqIiW5OK0vvfHco+Y gANhQrlMnTx/", "label": 0}, {"snippet_id": 19954, "code": " gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data,", "label": 0}, {"snippet_id": 15641, "code": ", command in enumerate(get_command('change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form", "label": 0}, {"snippet_id": 54908, "code": ",prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition,chapter", "label": 1}, {"snippet_id": 62983, "code": ".assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param session_id: the token for the session :type", "label": 0}, {"snippet_id": 25641, "code": " new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging.getLogger(__name__) class Node(object): \"\"\"An encapsulation of the Ray processes on", "label": 0}, {"snippet_id": 17641, "code": ", 'warning') else: if app.config['USE_EMAIL_VERIFICATION']: send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user", "label": 0}, {"snippet_id": 17144, "code": "'round': r, 'formset': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', {'tournament", "label": 0}, {"snippet_id": 40237, "code": " default=1) def __str__(self): return str(self.title) def get_absolute_url(self): return reverse('extraction_script_edit', kwargs={'pk': self.pk}) def get_datadocument_count(self): return DataDocument.objects", "label": 0}, {"snippet_id": 31206, "code": " DEBUG and not literal_eval(os.environ.get('FORCE_CELERY', 'False')): CELERY_ALWAYS_EAGER=True CELERY_EAGER_PROPAGATES_EXCEPTIONS=True HOOK_DOMAIN=os.environ.get('HOOK_DOMAIN', 'localhost:8000') ALLOWED_HOSTS", "label": 0}, {"snippet_id": 68515, "code": " def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('-datetime'", "label": 0}, {"snippet_id": 33469, "code": "=PUC.objects.get(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get(pk=pid), puc=puc, puc_assigned_usr=User.objects.get(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids", "label": 0}, {"snippet_id": 56709, "code": " reverse from django.utils.translation import gettext, gettext_lazy from clickgestion.transactions.filters import ConceptFilter, TransactionFilter from clickgestion.core.utilities import invalid_permission_redirect", "label": 0}, {"snippet_id": 2975, "code": " not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation", "label": 0}, {"snippet_id": 72826, "code": " create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition", "label": 1}, {"snippet_id": 26221, "code": " ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"\"\"Start the raylet monitor.\"\"\" stdout_file", "label": 0}, {"snippet_id": 41192, "code": " types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number':['47']} response=self.client", "label": 0}, {"snippet_id": 16414, "code": " return HttpResponseRedirect(reverse('create_games', args=(tournament_id, r.number()))) return render(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse", "label": 0}, {"snippet_id": 63074, "code": "=True) def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba' self.assertEquals(session['eduPersonPrincipalName'], eppn) self.acs('/login', eppn, _check) def", "label": 0}, {"snippet_id": 77434, "code": " layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): ", "label": 0}, {"snippet_id": 2724, "code": "): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID", "label": 0}, {"snippet_id": 65259, "code": " database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented", "label": 0}, {"snippet_id": 61466, "code": " and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job", "label": 0}, {"snippet_id": 15323, "code": "'inputs'].iteritems()] def get_inputs_choices(): models=load_json('models.json') inputs_by_models=[get_inputs_choices_by_model(model['model_system_name']) for model in models] return[item for inputs in", "label": 0}, {"snippet_id": 36691, "code": ", 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count() stats[", "label": 0}, {"snippet_id": 31758, "code": " def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username", "label": 1}, {"snippet_id": 26879, "code": " not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port", "label": 0}, {"snippet_id": 83580, "code": " notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug=None, group_slug_field=None, group_qs=None): group=None if group_slug", "label": 0}, {"snippet_id": 41751, "code": "{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse'", "label": 0}, {"snippet_id": 38017, "code": " extracted else ExtractedCPCatEditForm return(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return", "label": 0}, {"snippet_id": 56284, "code": "/pachatary.com/e/AsdE43E4&other=param' '&st=a&sd=d&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_a_deep_link_domain", "label": 0}, {"snippet_id": 42831, "code": " response.content) pk=9 response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True) self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets", "label": 1}, {"snippet_id": 82867, "code": " NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" ", "label": 0}, {"snippet_id": 5560, "code": " status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password'", "label": 0}, {"snippet_id": 27014, "code": " the same job in order to generate the object IDs in a consistent manner. However, the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without", "label": 0}, {"snippet_id": 49501, "code": " redirect, url_for, render_template, request, session, flash from flask.ext.sqlalchemy import SQLAlchemy from oauth import OAuthSignIn from subprocess import check_output, STDOUT, CalledProcessError from", "label": 0}, {"snippet_id": 60205, "code": "[\"name\"], \"static\": p[\"static_path\"] is not None, \"templates\": p[\"templates_path\"] is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate", "label": 0}, {"snippet_id": 22703, "code": " control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear", "label": 1}, {"snippet_id": 26167, "code": "=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self", "label": 0}, {"snippet_id": 9962, "code": " Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration", "label": 0}, {"snippet_id": 80586, "code": " checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Wavelength', label='Wavelength(nm): ', value=self.matisse.target_wavelength) if success: print(f\"Setting wavelength to", "label": 0}, {"snippet_id": 61089, "code": " %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent", "label": 1}, {"snippet_id": 2892, "code": ": \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url", "label": 0}, {"snippet_id": 38619, "code": " note=models.TextField(blank=True, null=True) class Meta: ordering=['-id'] def __str__(self): return str(self.title) @property def detail_page_editable(self): return self.data_group.group_type.code in[", "label": 0}, {"snippet_id": 44232, "code": "}/datagroup/{dg.pk}/' self.browser.get(dg_detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute", "label": 0}, {"snippet_id": 38467, "code": " the document belongs. The type of the data group determines which document types the document might be among, and determines much of the available relationships and behavior associated with the document", "label": 0}, {"snippet_id": 19326, "code": " import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import redis import time import ray.ray_constants as ray_constants", "label": 1}, {"snippet_id": 76641, "code": " base_url=layer_properties.GetMapBaseUrl() for abs_tile_row in range(rect_of_tiles.y0, rect_of_tiles.y1): rel_tile_row=abs_tile_row -rect_of_tiles.y0 logger.debug(\"Row -abs: %d; rel:%d\", abs_tile_row, rel_tile_row", "label": 0}, {"snippet_id": 46065, "code": " matching records in the ' 'selected directory.') return render(request, template_name, context) zf=zipfile.ZipFile(dg.zip_file, 'a', zipfile.ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc", "label": 0}, {"snippet_id": 26722, "code": "=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type, check_alive=check_alive, allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of", "label": 0}, {"snippet_id": 79715, "code": " accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError", "label": 0}, {"snippet_id": 14997, "code": ", _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:', name): attrs", "label": 0}, {"snippet_id": 46021, "code": ".get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form' : include_extract_form(dg), 'clean_comp_data_form' : include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '',", "label": 0}, {"snippet_id": 6900, "code": "() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password', 'auth/email/reset_password", "label": 0}, {"snippet_id": 25797, "code": "=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): ", "label": 0}, {"snippet_id": 928, "code": ")$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the", "label": 0}, {"snippet_id": 35387, "code": " if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size'].value() product", "label": 0}, {"snippet_id": 41652, "code": " page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 45075, "code": ".month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count", "label": 0}, {"snippet_id": 62367, "code": "('Redirecting to the RelayState: ' +relay_state) response=redirect(location=relay_state) session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user, relay_state)) return", "label": 0}, {"snippet_id": 73184, "code": " password_confirm_text=CreateAccountFormText.confirm_password email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in", "label": 0}, {"snippet_id": 53923, "code": " method chaining \"\"\" self.body=[] self.data=SharedCache() self.files=SharedCache() self._last_update_time=time.time() return self def append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout", "label": 0}, {"snippet_id": 83808, "code": ".html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': articles, group=get_articles_by_group( article_qs, group_slug, group_slug_field", "label": 0}, {"snippet_id": 31061, "code": "'takeaway'] session.add(editgrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id", "label": 0}, {"snippet_id": 63771, "code": " Forbidden from flask import request, session, redirect, abort, make_response from flask import current_app, Blueprint from eduid_common.api.decorators import MarshalWith from eduid_common.authn.utils import", "label": 0}, {"snippet_id": 41696, "code": " in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not", "label": 0}, {"snippet_id": 83416, "code": "] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None", "label": 0}, {"snippet_id": 80218, "code": ".addMenu('Console') self.clear_log_area_action=console_menu.addAction('Clear Log') self.open_idle_action=console_menu.addAction('Open Python Shell...') self.restart_action=console_menu.addAction('Restart'", "label": 0}, {"snippet_id": 3413, "code": "'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url", "label": 0}, {"snippet_id": 26414, "code": ". \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process", "label": 0}, {"snippet_id": 5184, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\"", "label": 0}, {"snippet_id": 53643, "code": "-> str: \"\"\" Reads the current state of the buffer and returns a string those contents :return: A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue", "label": 1}, {"snippet_id": 32860, "code": "=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps", "label": 0}, {"snippet_id": 26433, "code": " process=process_info.process if process.poll() is not None: if check_alive: raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else", "label": 0}, {"snippet_id": 46168, "code": ".get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name,", "label": 0}, {"snippet_id": 21545, "code": " dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception", "label": 0}, {"snippet_id": 82425, "code": "'), re_path(r'^detail/category/(?P<pk>(\\d)+)/$', CategoryDetailView.as_view(), name='category-detail-view'), re_path(r'^update/category/(?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update", "label": 0}, {"snippet_id": 40088, "code": " datadocument id from it NOTE: this will be obsolete once we move the data_document foreign key into RawChem in ticket 654 ''' id=self.id try: return apps.get_model('dashboard.ExtractedChemical').objects", "label": 0}, {"snippet_id": 67133, "code": "']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter", "label": 0}, {"snippet_id": 53303, "code": "\"\"\" module_name=step.definition.name.rsplit('.', 1)[0] module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code(source_code", "label": 1}, {"snippet_id": 13902, "code": ") if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer", "label": 0}, {"snippet_id": 82515, "code": " int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called", "label": 0}, {"snippet_id": 81437, "code": "%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta(days=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date", "label": 1}, {"snippet_id": 38844, "code": " on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return str(self.group_type.code) @property", "label": 0}, {"snippet_id": 46362, "code": ") stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 for doc in docs_needing_products: try: ext=ExtractedText.objects.get(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext", "label": 0}, {"snippet_id": 3821, "code": "\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self", "label": 0}, {"snippet_id": 54401, "code": " pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp \"\"\"News articles from various news sources Format:", "label": 0}, {"snippet_id": 43215, "code": " import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object)", "label": 1}, {"snippet_id": 1963, "code": "\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title>", "label": 0}, {"snippet_id": 10743, "code": "'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True,", "label": 0}, {"snippet_id": 32144, "code": " the case that the input is malformed and a token cannot be correctly generated from it. ''' while self.char and self.char.isspace(): self.read() if self.char==None: return Token(TokenType.EOF, None, self", "label": 0}, {"snippet_id": 57265, "code": " extra_context['transaction']=transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) available_concepts=get_available_concepts(request.user, transaction) extra_context", "label": 0}, {"snippet_id": 45160, "code": " .values('upload_date') \\ .annotate(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate", "label": 0}, {"snippet_id": 57757, "code": "=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()] return round( len(filter(lambda x: x, steps", "label": 0}, {"snippet_id": 58630, "code": "=instructor.user).exists(): update_onboarding_step(onboarding.STEP_4, instructor.user_id) if Lesson.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_5, instructor.user_id", "label": 1}, {"snippet_id": 757, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f", "label": 0}, {"snippet_id": 73865, "code": ", Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications", "label": 1}, {"snippet_id": 58581, "code": ".objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter", "label": 1}, {"snippet_id": 75683, "code": "(text, item[index][0]) if item['idroot'] not in fast_ids: results.append({'id': '%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results", "label": 0}, {"snippet_id": 10722, "code": ".SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']", "label": 0}, {"snippet_id": 61961, "code": ".js', 'chartbeat_mab.js', 'beacon.js', 'krxd.net') page_str=str(page.content) for script in analytics_scripts: if script in page_str: return False return True def validate_security_header(page, header,", "label": 0}, {"snippet_id": 79484, "code": " the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and", "label": 0}, {"snippet_id": 61709, "code": " result to the database. In that case, the passed DirectoryEntry *must* already be in the database. \"\"\" securedrop_domain=url_to_domain(securedrop.landing_page_url) pshtt_results=inspect_domains([securedrop_domain", "label": 1}, {"snippet_id": 75575, "code": ".' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis.current_file_name) response=FileResponse(open(file_path, 'rb'), content_type='application/pdf') response['Content-Disposition", "label": 0}, {"snippet_id": 39462, "code": ", blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True", "label": 0}, {"snippet_id": 72168, "code": "=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('edit',{", "label": 0}, {"snippet_id": 31861, "code": " reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open", "label": 1}, {"snippet_id": 54223, "code": "'politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other errors \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404", "label": 1}, {"snippet_id": 67455, "code": " search_form=EventSearchForm(self.request.GET) context['search_form']=search_form context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset", "label": 0}, {"snippet_id": 76040, "code": " from_url=from_url, to_url=to_url, ) return '' def get_full_path(self, filename, language=None, version_slug=None): \"\"\" Return a full path for a given filename. This will include version and language information", "label": 1}, {"snippet_id": 78823, "code": " request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\"", "label": 0}, {"snippet_id": 20035, "code": " Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(", "label": 0}, {"snippet_id": 84600, "code": " is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() template_params={'changes': changes_qs", "label": 0}, {"snippet_id": 73214, "code": "[1].lower() if email_domain !=\"canada.ca\": message=forms.ValidationError( format(ErrorMessages.invalid_email_domain % email_domain)) self.add_error('email', message) elif get_user_model().objects.filter", "label": 0}, {"snippet_id": 68866, "code": " import yaml HERE=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs from nodesource is installed \"\"\" key=b\"\"\" -----BEGIN PGP PUBLIC KEY BLOCK---", "label": 0}, {"snippet_id": 50352, "code": ".get_provider(provider) return oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is", "label": 0}, {"snippet_id": 14186, "code": " values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory(", "label": 0}, {"snippet_id": 16273, "code": " else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer", "label": 0}, {"snippet_id": 73609, "code": "(request) form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get('key", "label": 1}, {"snippet_id": 13806, "code": " it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context", "label": 0}, {"snippet_id": 84644, "code": " observe_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, is_member=None,", "label": 0}, {"snippet_id": 20621, "code": " responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis", "label": 0}, {"snippet_id": 65428, "code": ".config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No", "label": 1}, {"snippet_id": 32580, "code": "''' Wait for the execution of the node to finish. ''' pass class DoubleNode(Node): ''' A node that executes two nodes sequentially. Args: first: The first node to execute. second: The second node to execute", "label": 0}, {"snippet_id": 71203, "code": ".Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class(self): try: return utils.import_class(self._config['user_model']) except Exception", "label": 0}, {"snippet_id": 43779, "code": " ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait", "label": 0}, {"snippet_id": 48583, "code": ") pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm", "label": 0}, {"snippet_id": 81624, "code": " counter=0 for subscription in self.fit_subscriptions: counter +=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name).lower(", "label": 0}, {"snippet_id": 52306, "code": "-desc\", None) team_id=request.form.get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\")", "label": 1}, {"snippet_id": 33310, "code": "(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin", "label": 0}, {"snippet_id": 69984, "code": ": return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}", "label": 1}, {"snippet_id": 7622, "code": " is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils", "label": 0}, {"snippet_id": 73990, "code": " view. docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials", "label": 0}, {"snippet_id": 76677, "code": "\"[%d] %d, %d is black\", world_extent_in_tiles, abs_tile_col, abs_tile_row) tiles_array.AddImage(rel_tile_col, rel_tile_row, None) else: world_wrapped_tile_col=abs_tile_col % world_extent_in_tiles tile_args", "label": 0}, {"snippet_id": 50033, "code": "\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session): if 'email", "label": 0}, {"snippet_id": 64723, "code": "{'points': points, 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points // len(test_case_objs)", "label": 0}, {"snippet_id": 2435, "code": " </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]", "label": 0}, {"snippet_id": 84748, "code": "(article, request.user) return redirect(article) def article_preview(request): \"\"\"This is a AJAX function that previews the body of the article as it is currently displayed. This function is actually pretty", "label": 0}, {"snippet_id": 78646, "code": ":type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional)", "label": 0}, {"snippet_id": 59671, "code": " not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item: return item[key] return None else: m={} for item in search_list: m.update(item) return m def plugin_config", "label": 0}, {"snippet_id": 18148, "code": "\" -\"\r for domain in domains:\r if domain !=\"\":\r \r url=\"https://\" +domain +payload\r url=url.strip()\r \r try:\r r=requests.head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \" +url\r \r if", "label": 1}, {"snippet_id": 63945, "code": " return redirect(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if", "label": 0}, {"snippet_id": 15293, "code": "'model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model(name): models=load_json('models.json') model=next(item for item in models if item['model_system_name']==name) return[(", "label": 0}, {"snippet_id": 67535, "code": "[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today", "label": 0}, {"snippet_id": 17897, "code": ".new_password.data if new_email: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!</strong> Incorrect password.'), 'danger') return flask.redirect", "label": 0}, {"snippet_id": 82026, "code": "['input_url'] short_url=form.cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return", "label": 0}, {"snippet_id": 75997, "code": "(), from_to_url=self.get_from_to_url_display(), ) return ugettext( 'Redirect:{}'.format( self.get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page", "label": 0}, {"snippet_id": 70855, "code": "): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %", "label": 1}, {"snippet_id": 5829, "code": " have one app server, and don't mind making everyone log in again after a restart. \"\"\" pass class OpenIDConnect(object): \"\"\" @see: https://developers.google.com/api-client-library/python/start/get_started", "label": 0}, {"snippet_id": 960, "code": " use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath=''", "label": 1}, {"snippet_id": 7969, "code": "' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if", "label": 0}, {"snippet_id": 5194, "code": " test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self", "label": 0}, {"snippet_id": 13339, "code": ".core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api", "label": 0}, {"snippet_id": 23775, "code": " try: return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit", "label": 0}, {"snippet_id": 29238, "code": " @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor(): return dict", "label": 0}, {"snippet_id": 23590, "code": " not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy() else: resources={} if \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The", "label": 0}, {"snippet_id": 62621, "code": "}) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config) def add_outstanding_query", "label": 0}, {"snippet_id": 34241, "code": " the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781,", "label": 1}, {"snippet_id": 33897, "code": ").click() class TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver", "label": 0}, {"snippet_id": 6092, "code": " authenticated, else returns a redirect object so they can go try to authenticate. :return: A redirect, or None if the user is authenticated. \"\"\" if request.endpoint in frozenset(['oidc_callback', 'oidc_error'])", "label": 0}, {"snippet_id": 56500, "code": " username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302", "label": 0}, {"snippet_id": 70514, "code": " http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans ", "label": 0}, {"snippet_id": 78634, "code": " email notification to users of assigned organisation with admin access :param title: The title of the data request :type title: string :param description: A brief description for your data request :type", "label": 0}, {"snippet_id": 25272, "code": " max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left.", "label": 0}, {"snippet_id": 65392, "code": "\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\") !=\"\" and exists(keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\")): self.logging_manager.log_debug( \"Found last", "label": 0}, {"snippet_id": 42260, "code": ".create(title='Functional use') self.objects.dg.group_type=fu self.objects.dg.save() response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertNotIn('<th>Product</th>', response, 'Data", "label": 0}, {"snippet_id": 3464, "code": "=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test", "label": 0}, {"snippet_id": 54690, "code": ".book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert(assignment.chapter==int(sys.argv[1])) \t\t\tnum_probs=len(assignment.problems) \t\t\tprint \"num_probs was \"+str(num_probs)", "label": 1}, {"snippet_id": 55426, "code": " isinstance(other,FSPath): \t\t\treturn os.rename(self.path,other.path) \t\telse: \t\t\treturn os.rename(self.path,other) \tdef renames(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.renames(self.path", "label": 0}, {"snippet_id": 15336, "code": "['model_system_name']) for model in models] return[item for inputs in inputs_by_models for item in inputs] def get_commands(form): result=[] for field in form: if field.name=='start_day': result.append", "label": 0}, {"snippet_id": 31201, "code": "'*szo DEBUG=literal_eval(os.environ.get('DJANGO_DEBUG', 'False')) if DEBUG and not literal_eval(os.environ.get('FORCE_CELERY', 'False')): CELERY_ALWAYS_EAGER=True CELERY_EAGER_PROPAGATES_EXCEPTIONS=True", "label": 0}, {"snippet_id": 84917, "code": ".content) if match: found_links.append({'title': article.title}) for old_title in old_titles: if old_title in article.content: found_old_links.append({'old_title': old_title, 'title': article.title}) context", "label": 0}, {"snippet_id": 9334, "code": ".get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response", "label": 0}, {"snippet_id": 67626, "code": "] event_obj=Event.objects.get(pk=pk) objects_obj=Object.objects.filter(event=pk) context=super().get_context_data(**kwargs) context['event']=event_obj context['objects']=objects_obj context['categories", "label": 0}, {"snippet_id": 30846, "code": ".html', grudget=grudgetToDelete) @app.route('/grudget/<int:grudget_id>/') @app.route('/grudget/<int:grudget_id>/grudge/') def showGrudge(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id", "label": 0}, {"snippet_id": 51651, "code": "(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint", "label": 0}, {"snippet_id": 63891, "code": "(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len", "label": 1}, {"snippet_id": 6136, "code": " return self.redirect_to_auth_server(request.url) try: credentials.refresh(self.http) id_token=credentials.id_token self.credentials_store[id_token['sub']]=credentials self.set_cookie_id_token(id_token", "label": 0}, {"snippet_id": 83863, "code": "='NewArticle', content_type=get_ct(group), object_id=group.id) else: new_article=ArticleClass(title='NewArticle') template_params['new_article']=new_article if extra_context is not None: template_params", "label": 0}, {"snippet_id": 51032, "code": "=set(s[1:] for s in steps if s.startswith(\"+\")) self._enabled_options=self._enabled_options.union( s for s in steps if s[0] not in \"+-\") def modify_optional_steps(self, *steps): ''' Add or remove optional", "label": 0}, {"snippet_id": 72038, "code": "(serialize_dashboard_exception, include_http_status=True))(func) return composed_decorator @ApiController('/nfs-ganesha/export', Scope.NFS_GANESHA) class NFSGaneshaExports(RESTController): RESOURCE_ID=\"cluster_id/export_id", "label": 0}, {"snippet_id": 63722, "code": "://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn='hubba-bubba' came_from='/afterlogin/", "label": 0}, {"snippet_id": 58380, "code": " } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro", "label": 1}, {"snippet_id": 79992, "code": " rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns", "label": 0}, {"snippet_id": 43699, "code": ".assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute", "label": 0}, {"snippet_id": 81215, "code": " datetime import datetime from dateutil.relativedelta import relativedelta from odoo import fields, models, api _logger=logging.getLogger(__name__) class FitEvent(models.Model): _name='event.event' _inherit", "label": 0}, {"snippet_id": 51092, "code": " select_optional_steps(self, *args, **kwargs): ''' Deprecated. Use specify_optional_steps or modify_optional_steps instead. ''' kwargs=process_kwargs( \"select_optional_steps\", kwargs, {\"disable_others\"", "label": 0}, {"snippet_id": 59887, "code": ": str(x, \"utf-8\", \"replace\") for name, num_args, func in self.sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self", "label": 0}, {"snippet_id": 82781, "code": ".pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process", "label": 0}, {"snippet_id": 70402, "code": " if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath)", "label": 1}, {"snippet_id": 64062, "code": " LogoutRequest. \"\"\" eppn=session.get('user_eppn') if eppn is None: current_app.logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL'", "label": 0}, {"snippet_id": 77372, "code": " server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn't support database\" ", "label": 0}, {"snippet_id": 18133, "code": "(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n -Trying payload \"+payload+\" -\"\r for domain in domains:\r if domain !=\"\":\r \r url", "label": 0}, {"snippet_id": 46176, "code": " following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] ext_parent, ext_child=get_extracted_models(dg.type) for i, row in", "label": 0}, {"snippet_id": 78352, "code": ".getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id'", "label": 0}, {"snippet_id": 44295, "code": " puc=self.objects.puc tag=self.objects.pt PUCToTag.objects.create(content_object=puc, tag=tag) ProductToPUC.objects.create(product=p, puc=puc) url=self.live_server_url +f'/product/{p.pk}/' self.browser", "label": 0}, {"snippet_id": 24871, "code": " ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler", "label": 0}, {"snippet_id": 56775, "code": ": return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept.concept_type)) extra_context['message", "label": 0}, {"snippet_id": 75081, "code": "=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form.is_valid(): thesis=form.save() if thesis.abstract !=form.cleaned_data['abstract'", "label": 0}, {"snippet_id": 21223, "code": ".PROCESS_TYPE_RAYLET_MONITOR]=[ process_info ] def start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being", "label": 0}, {"snippet_id": 22550, "code": " Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This", "label": 0}, {"snippet_id": 76198, "code": " cut_path=re.sub('^%s' % match, self.to_url, full_path) return cut_path def redirect_sphinx_html(self, path, language=None, version_slug=None): for ending in['/', '/index.html']: if path.endswith(ending", "label": 0}, {"snippet_id": 62971, "code": " oq_cache=OutstandingQueriesCache(session) oq_cache.set(token, came_from) resp=self.app.dispatch_request() self.assertEquals(resp.status_code, 302) self.assertEquals(resp.location, came_from) check_fn() def", "label": 0}, {"snippet_id": 84812, "code": "(request.POST['article'])) content=request.POST['body'] diffs=dmp.diff_main(current_article.content, content) dmp.diff_cleanupSemantic(diffs) return HttpResponse(dmp.diff_prettyHtml(diffs), content_type=", "label": 0}, {"snippet_id": 49793, "code": "(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload', methods=['POST']) def upload(): if(not 'email' in session) and(not 'social' in session): return \"\", 401 if", "label": 0}, {"snippet_id": 29561, "code": ".oauth_secret=session.pop('secret') db.session.commit() login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) flash('There was", "label": 1}, {"snippet_id": 19538, "code": ".redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno", "label": 1}, {"snippet_id": 5669, "code": " path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 1544, "code": "\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{%", "label": 0}, {"snippet_id": 27307, "code": " self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self.node_manager_port=node_manager_port self.node_ip_address=node_ip_address self.num_workers=num_workers self.local_mode", "label": 0}, {"snippet_id": 70908, "code": "[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 79704, "code": " to asign the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers", "label": 0}, {"snippet_id": 36713, "code": ".objects.filter(extracted=True).count()/DataDocument.objects.count()*100 stats['datadocument_count_by_date']=datadocument_count_by_date() stats['datadocument_count_by_month']=datadocument_count_by_month", "label": 0}, {"snippet_id": 11409, "code": "{'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders", "label": 0}, {"snippet_id": 56289, "code": " '&st=a&sd=d&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app') \\ .given_a_dynamic_link", "label": 0}, {"snippet_id": 68916, "code": "+iQI4BBMBAgAiBQJTmyS2 AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAWVaCraFdigHTmD/9OKhUy jJ+h8gMRg6ri5EQxOExccSRU0i7UHktecSs0DVC4lZG9AOzBe+Q36cym5Z1di6JQ kHl69q3zBdV3KTW+H1pdmnZlebYGz8paG9iQ/wS9gpnSeEyx0Enyi167Bzm0O4A1", "label": 0}, {"snippet_id": 46118, "code": " context['msg']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type) if", "label": 0}, {"snippet_id": 61380, "code": "\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue): \"\"\"Adds a subscriber to the list of queues to send notifications to", "label": 0}, {"snippet_id": 82940, "code": " message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"", "label": 0}, {"snippet_id": 31232, "code": ").split() CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True GITMATE_PLUGINS=[ 'code_analysis', 'welcome_commenter', 'auto_label_pending_or_wip', 'pr_size_labeller', 'issue_labeller', 'bug_spotter", "label": 0}, {"snippet_id": 47593, "code": "(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n", "label": 0}, {"snippet_id": 79389, "code": "=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in", "label": 1}, {"snippet_id": 35457, "code": " render(request, template_name,{'document': doc, 'form': form}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete", "label": 0}, {"snippet_id": 3672, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']", "label": 1}, {"snippet_id": 480, "code": "(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r", "label": 0}, {"snippet_id": 77487, "code": " target_path: Target published point. Returns: The layers from the server definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information for target url '%s'\"", "label": 0}, {"snippet_id": 31373, "code": ".backends.gitlab.GitLabOAuth2', 'social_core.backends.bitbucket.BitbucketOAuth', 'django.contrib.auth.backends.ModelBackend' ) MIDDLEWARE_CLASSES=[ 'corsheaders.middleware.CorsMiddleware', 'django.middleware", "label": 0}, {"snippet_id": 29734, "code": "['STATIC_BENWA_DIR'], fname )) fpath='/'.join(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image", "label": 1}, {"snippet_id": 69302, "code": ".ensure_group('jupyterhub-users') logger.info(\"Granting passwordless sudo to JupyterHub admins...\") with open('/etc/sudoers.d/jupyterhub-admins', 'w') as f: f.write('%jupyterhub-admins ALL=(ALL) NOPASSWD:", "label": 0}, {"snippet_id": 68571, "code": " class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_edit_form.html' def get_success_url(self): self.object.restart() return '/twitter_hunter' def hunt_del", "label": 0}, {"snippet_id": 16519, "code": "=2 rp.save() return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request, 'rounds/get_seven.html', context) def _sitters_and_two_gamers", "label": 0}, {"snippet_id": 12223, "code": " to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password", "label": 0}, {"snippet_id": 27897, "code": "' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so", "label": 0}, {"snippet_id": 28099, "code": ") def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type", "label": 0}, {"snippet_id": 24705, "code": ".add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging", "label": 0}, {"snippet_id": 7498, "code": "\" Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages", "label": 0}, {"snippet_id": 17303, "code": " binascii import time from datetime import datetime from ipaddress import ip_address import flask from nyaa import email, forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from", "label": 0}, {"snippet_id": 3575, "code": ", }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get", "label": 0}, {"snippet_id": 8417, "code": ", request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session", "label": 0}, {"snippet_id": 14248, "code": " detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"", "label": 0}, {"snippet_id": 12161, "code": "'password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to", "label": 0}, {"snippet_id": 66596, "code": ".composite_keyfile_path=file_path elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection cancelled\") filechooser_opening_dialog.close() def on_composite_unlock_button_clicked(self,", "label": 0}, {"snippet_id": 76254, "code": " for the final image.\"\"\" import logging import os import StringIO import tempfile import urllib import geom import images import PIL.Image as Image import tilecalcs logger=logging.getLogger(\"wms_maps\")", "label": 1}, {"snippet_id": 49655, "code": ".route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or", "label": 0}, {"snippet_id": 22869, "code": ".extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call", "label": 0}, {"snippet_id": 32985, "code": ",) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request):", "label": 0}, {"snippet_id": 79787, "code": " datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj", "label": 0}, {"snippet_id": 77216, "code": " x, self.tile_arg_names[\"y\"], y, self.tile_arg_names[\"z\"], z ) return tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server", "label": 0}, {"snippet_id": 50452, "code": "\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback): self.release(", "label": 0}, {"snippet_id": 51426, "code": " ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message", "label": 0}, {"snippet_id": 2205, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory", "label": 0}, {"snippet_id": 15941, "code": " LoginForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args,", "label": 0}, {"snippet_id": 50069, "code": " as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass except FileNotFoundError: editor_content=\"\" elif ", "label": 0}, {"snippet_id": 21689, "code": " self._kill_process_type( process_type, check_alive=check_alive, allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"", "label": 0}, {"snippet_id": 60449, "code": " \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name", "label": 0}, {"snippet_id": 38631, "code": " return str(self.title) @property def detail_page_editable(self): return self.data_group.group_type.code in['CP', 'HH', 'CO',] @property def is_extracted(self): return hasattr(self,'extractedtext') def", "label": 0}, {"snippet_id": 27179, "code": "(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool)", "label": 0}, {"snippet_id": 76778, "code": " rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1", "label": 0}, {"snippet_id": 33185, "code": ": list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self).get_changeform_initial_data(request) get_data['last_edited_by", "label": 0}, {"snippet_id": 63038, "code": " from the parent class, so we can extend data initialized. \"\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self):", "label": 0}, {"snippet_id": 39748, "code": " return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1", "label": 1}, {"snippet_id": 64623, "code": " 'IOError', 'IsADirectoryError', 'isinstance', 'issubclass', 'iter', 'KeyboardInterrupt', 'KeyError', 'len', 'list', 'locals', 'LookupError', 'map', 'max', 'MemoryError', 'memoryview', 'min', '__name__", "label": 0}, {"snippet_id": 62688, "code": ".dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self, eppn, came_from): \"\"\" Add a SAML2 authentication query to", "label": 0}, {"snippet_id": 26339, "code": " raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully", "label": 0}, {"snippet_id": 54830, "code": " +=1 \t\t\t\tprint \"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing() \t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self", "label": 1}, {"snippet_id": 19783, "code": ". Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address", "label": 1}, {"snippet_id": 56196, "code": ".response.status_code==302 assert self.response['Location']=='{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/email-confirmation') return self class RedirectLoginEmailTestCase(TestCase", "label": 0}, {"snippet_id": 5261, "code": "\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': ", "label": 0}, {"snippet_id": 22163, "code": " backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY", "label": 0}, {"snippet_id": 39045, "code": " '''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False", "label": 0}, {"snippet_id": 7627, "code": ".user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils", "label": 0}, {"snippet_id": 73297, "code": ".ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message)", "label": 0}, {"snippet_id": 71627, "code": "=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !=old_sid) s_count2=models.Session.query().count() self.assertTrue(s_count2", "label": 0}, {"snippet_id": 27753, "code": " task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread", "label": 1}, {"snippet_id": 52487, "code": " project_object.updated } if project_object.user_id: results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=['POST'])", "label": 0}, {"snippet_id": 81751, "code": ", JustULRUpdateForm, \\ CategoryUpdateModelForm, CounterCountingForm from.models import JustURL, Category, ClickTracking from.utils import create_short_url, token_generator, generate_csv, get_client_ip,", "label": 0}, {"snippet_id": 2162, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes", "label": 0}, {"snippet_id": 21102, "code": ", self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params", "label": 0}, {"snippet_id": 11431, "code": " api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\")", "label": 0}, {"snippet_id": 48710, "code": " form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name", "label": 0}, {"snippet_id": 84400, "code": "(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article.changeset_set.all", "label": 0}, {"snippet_id": 42763, "code": "{pk}/') et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertIn(f'/qa/extractedtext/{et.pk}/'.encode(), response.content) group_count=QAGroup.objects.filter(extraction_script_id=pk)", "label": 0}, {"snippet_id": 68429, "code": " import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection", "label": 0}, {"snippet_id": 23172, "code": " the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message", "label": 0}, {"snippet_id": 14242, "code": " def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict,", "label": 0}, {"snippet_id": 26632, "code": ", check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 8902, "code": " auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 53466, "code": ") def get_stack_frames(): \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code", "label": 0}, {"snippet_id": 5402, "code": " licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image", "label": 0}, {"snippet_id": 49850, "code": " session['currentFile']=filename if 'diagram' in request.referrer: return redirect('/diagram?filename=%s'%filename) return redirect('/?filename=%s'%filename) flash(\"Invalid file\") return redirect('/openFile", "label": 0}, {"snippet_id": 30388, "code": ".googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json() login_session['username']=data['name']", "label": 0}, {"snippet_id": 9054, "code": " openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import(", "label": 0}, {"snippet_id": 75360, "code": "(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_home(request): return HttpResponseRedirect", "label": 0}, {"snippet_id": 37098, "code": "': DatePickerInput()} labels={'csv': _('Register Records CSV File'), 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None)", "label": 0}, {"snippet_id": 10687, "code": " context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint':", "label": 0}, {"snippet_id": 69107, "code": " Ensure JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp() systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units', 'jupyterhub.service", "label": 0}, {"snippet_id": 61602, "code": ", hsts_preloaded=pshtt_results['HSTS Preloaded'], subdomain=validate_subdomain(securedrop.landing_page_url), no_cookies=validate_no_cookies(page), safe_onion_address=validate_onion_address_not_in_href(soup", "label": 1}, {"snippet_id": 52271, "code": "=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\"", "label": 0}, {"snippet_id": 10936, "code": " processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context", "label": 0}, {"snippet_id": 78895, "code": " unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization", "label": 0}, {"snippet_id": 81294, "code": ", '=', email),('partner_id', '=', self.env.user.partner_id.id),('event_id', '=', event.id), ('state', '=', 'open')] count=self.env['event.registration'].search_count(domain) if count > 0: event.fit_is_participating", "label": 0}, {"snippet_id": 82472, "code": " os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob", "label": 0}, {"snippet_id": 27297, "code": "=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports", "label": 0}, {"snippet_id": 9630, "code": " 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 70039, "code": ".st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n ", "label": 0}, {"snippet_id": 16928, "code": " new_game.name, 'the_set': new_game.the_set} for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment==Tournament.PREFERENCES: new_game.assign_powers_from_prefs(", "label": 0}, {"snippet_id": 16365, "code": ", 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() else: RoundPlayer.objects.filter(player=p, the_round=r).delete() r=t.current_round(", "label": 0}, {"snippet_id": 79360, "code": "'organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id) data_dict['followers']=db.DataRequestFollower", "label": 0}, {"snippet_id": 16245, "code": "} rps=tp.roundplayers() for r in round_set: played=rps.filter(the_round=r).exists() current['round_%d' % r.number()]=played data.append(current) if round_num: formset=PlayerRoundFormset(request.POST or", "label": 0}, {"snippet_id": 65, "code": " Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 82039, "code": ".objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message}) created=JustURL.objects", "label": 0}, {"snippet_id": 39200, "code": " ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\" Deletes datagroup directory from filesystem", "label": 0}, {"snippet_id": 49009, "code": "=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_delete(request, pk): p=Product", "label": 0}, {"snippet_id": 4711, "code": " User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response", "label": 0}, {"snippet_id": 65753, "code": "/create_database.ui\") headerbar=builder.get_object(\"headerbar\") CreateDatabase( self, self.create_tab(tab_title, headerbar), self.database_manager) def create_tab(self, title, headerbar): if self.container=", "label": 0}, {"snippet_id": 24146, "code": " thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the worker object in this process. mode", "label": 1}, {"snippet_id": 29796, "code": ") db.session.commit() return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag", "label": 0}, {"snippet_id": 1994, "code": "/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index", "label": 0}, {"snippet_id": 22561, "code": " to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are", "label": 0}, {"snippet_id": 26715, "code": " self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type", "label": 0}, {"snippet_id": 25730, "code": " interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path", "label": 0}, {"snippet_id": 59100, "code": ".email and user.email !! excluding dots from email-name. !! :param user: request.user :param kwargs: params to search by :return: invite if found :raise: Http404 if not found ''' if not user: raise Http404", "label": 0}, {"snippet_id": 28363, "code": " later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random", "label": 0}, {"snippet_id": 45230, "code": "-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats", "label": 0}, {"snippet_id": 80180, "code": "(self.log_queue) self.log_thread=LoggingThread(self.log_queue, parent=self) self.log_thread.message_received.connect(self.log) self.log_thread.start() def setup_window(self): self.window=window=QMainWindow", "label": 0}, {"snippet_id": 22139, "code": " include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file.", "label": 0}, {"snippet_id": 59567, "code": " filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self,", "label": 0}, {"snippet_id": 71864, "code": ".add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs", "label": 0}, {"snippet_id": 17706, "code": " app.config['ALLOW_PASSWORD_RESET']: return flask.abort(404) if flask.g.user: return flask.redirect(redirect_url()) if payload is None: form=forms.PasswordResetRequestForm(flask.request.form) if flask.request", "label": 0}, {"snippet_id": 46126, "code": ".method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type) if extract_form.is_valid(): csv_file=request.FILES.get('extract_file", "label": 0}, {"snippet_id": 67366, "code": "'-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['exs'].count() if count", "label": 0}, {"snippet_id": 6816, "code": ", 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods", "label": 0}, {"snippet_id": 44963, "code": "(data, prefix='habits') self.assertTrue(hp_formset.is_valid()) def test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn", "label": 0}, {"snippet_id": 11125, "code": ": The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching", "label": 0}, {"snippet_id": 22994, "code": "().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception", "label": 0}, {"snippet_id": 50051, "code": " email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: data=f.read()", "label": 0}, {"snippet_id": 24537, "code": "=( self.log_file_handles[log_filename].tell()) next_line=self.log_file_handles[log_filename].readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position", "label": 1}, {"snippet_id": 43626, "code": " records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser", "label": 0}, {"snippet_id": 41914, "code": ".assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should be present.\")", "label": 0}, {"snippet_id": 69634, "code": "()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format( len(apt_packages), ' '.join(apt_packages) )) apt.install_packages(apt_packages) conda_packages=list(set(itertools", "label": 0}, {"snippet_id": 46443, "code": "]) script=Script.objects.get(pk=script_pk) csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set", "label": 0}, {"snippet_id": 58062, "code": ": \"Test Course\", \"lesson_title\": \"Test Lesson\", \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM, to_email=[\"test@example", "label": 1}, {"snippet_id": 26187, "code": "\"Start a worker process.\"\"\" raise NotImplementedError def start_monitor(self): \"\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray", "label": 0}, {"snippet_id": 60653, "code": "=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates", "label": 0}, {"snippet_id": 68516, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('-datetime') return query", "label": 0}, {"snippet_id": 54793, "code": ".count_by_groups \t\t \tdef process_hwml(self): \t\tself.prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint", "label": 1}, {"snippet_id": 84933, "code": " article.title}) context={'found_links': found_links, 'found_old_links': found_old_links, 'name': title} return render_to_response('wiki/backlinks.html', context, context_instance=RequestContext(request))", "label": 0}, {"snippet_id": 47986, "code": " create_detail_formset @login_required() def habitsandpractices(request, pk, template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)'", "label": 0}, {"snippet_id": 67127, "code": "'attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count() if count > 0: context[", "label": 0}, {"snippet_id": 5025, "code": "'login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register", "label": 1}, {"snippet_id": 21567, "code": ". \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception", "label": 0}, {"snippet_id": 26658, "code": " \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive", "label": 0}, {"snippet_id": 84468, "code": "']) article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id", "label": 0}, {"snippet_id": 24456, "code": "): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self", "label": 1}, {"snippet_id": 77314, "code": " result=p.sub(r'\\g<1>\"\\g<2>\":', result) return json.loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database.", "label": 0}, {"snippet_id": 33183, "code": "(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self).get_changeform_initial_data(request", "label": 0}, {"snippet_id": 27332, "code": "=plasma_directory self.worker_path=worker_path self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name", "label": 0}, {"snippet_id": 35123, "code": " class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm", "label": 0}, {"snippet_id": 27396, "code": "% arg) self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs", "label": 0}, {"snippet_id": 61035, "code": " job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict", "label": 0}, {"snippet_id": 59553, "code": "=self.config(\"max_returned_rows\") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir(self.plugins_dir)", "label": 0}, {"snippet_id": 44877, "code": ".assertEqual(found.func, views.habitsandpractices) def test_link_habitandpractice_to_puc(self): found=resolve(f'/link_habitandpractice_to_puc/{self.objects.ehp.pk}/') self.assertEqual(found.func, views", "label": 0}, {"snippet_id": 83958, "code": " is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() is_observing=False redirected_from=None try: article=article_qs.get(**article_args) if notification is not None:", "label": 0}, {"snippet_id": 5682, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location", "label": 1}, {"snippet_id": 46979, "code": "'datagroup': datagroup, 'form': form, 'header': header, 'groups': groups}) @login_required() def data_group_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): datagroup=get_object_or_404", "label": 0}, {"snippet_id": 9079, "code": ".core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student", "label": 0}, {"snippet_id": 14258, "code": " authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current", "label": 0}, {"snippet_id": 7592, "code": " from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx", "label": 0}, {"snippet_id": 11583, "code": " even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported", "label": 0}, {"snippet_id": 15391, "code": ": for entry in field.entries: result.append({ 'command': field.name, 'model_system_name': entry.model_system_name.data, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry", "label": 0}, {"snippet_id": 28282, "code": " method. Args: obj: The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method", "label": 0}, {"snippet_id": 15712, "code": ".route('/run/form/init', methods=['POST']) def view_run_init(): run_form=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands':", "label": 0}, {"snippet_id": 40579, "code": " to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 75394, "code": " candidates=Candidate.get_candidates_by_status(status, sort_param=request.GET['sort_by']) else: candidates=Candidate.get_candidates_by_status(status) return render(request, 'etd_app/staff_view_candidates", "label": 0}, {"snippet_id": 27663, "code": " None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes: worker", "label": 0}, {"snippet_id": 57006, "code": ") if k !='page']) > 0: self.is_filtered=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by('-id') return self", "label": 0}, {"snippet_id": 26743, "code": ". \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process", "label": 0}, {"snippet_id": 45974, "code": "=get_object_or_404(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects.filter(document__in=docs", "label": 0}, {"snippet_id": 47114, "code": "'EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...' ExtractedTextForm, HPFormSet=create_detail_formset(doc", "label": 0}, {"snippet_id": 44800, "code": "(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\" try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r", "label": 0}, {"snippet_id": 82111, "code": "(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w.']+\", urls) data_list=[] for url in urls_list", "label": 0}, {"snippet_id": 54941, "code": " Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\"", "label": 1}, {"snippet_id": 50677, "code": " return 'Windows-x86' if platform.system()=='Linux' and platform.architecture()[0]=='32bit': return 'Linux-x86' if platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64'", "label": 0}, {"snippet_id": 39576, "code": " data_document=models.OneToOneField('DataDocument',on_delete=models.CASCADE, primary_key=True) prod_name=models.CharField(max_length=500, null=True, blank=True) doc_date=models.CharField(max_length=25, null", "label": 0}, {"snippet_id": 67956, "code": " HTTPConnection class IndexView(PaginationMixin, ListView): model=Hunt template_name='threat_hunter/index.html' context_object_name='hunts' paginate_by=30 def get_context_data(self, **kwargs): context=super", "label": 0}, {"snippet_id": 68502, "code": " context) class TweetsView(PaginationMixin, ListView): template_name='twitter_hunter/tweets.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data", "label": 0}, {"snippet_id": 64197, "code": "}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods=['POST']) def logout_service(): \"\"\"SAML Logout Response endpoint", "label": 0}, {"snippet_id": 65268, "code": " quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True) opened_databases=[] databases_to_save=[]", "label": 0}, {"snippet_id": 38337, "code": " from.data_source import DataSource from.group_type import GroupType from.data_group import DataGroup from.document_type import DocumentType from.data_document import DataDocument from.ingredient import", "label": 0}, {"snippet_id": 4160, "code": ".test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response", "label": 0}, {"snippet_id": 76187, "code": ".from_url: match=self.from_url.split('$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s' % match, self.to_url, full_path) return cut_path def redirect_sphinx_html(self, path, language=None,", "label": 0}, {"snippet_id": 66281, "code": " composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked) keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.connect(\"clicked\"", "label": 0}, {"snippet_id": 59733, "code": ".sha1( open( os.path.join(str(app_root), \"datasette/static/app.css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata", "label": 0}, {"snippet_id": 76932, "code": " im_dest: Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste", "label": 0}, {"snippet_id": 32319, "code": "() yield token if token.ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into an Abstract Syntax Tree for later execution. Args: tokens: The stream of tokens. ''' def __init__(self", "label": 0}, {"snippet_id": 56797, "code": "'next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transaction_detail', kwargs={'transaction_code': concept.transaction.code}) concept.delete() next_page=request.POST", "label": 0}, {"snippet_id": 22225, "code": " plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None,", "label": 0}, {"snippet_id": 9545, "code": "=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those", "label": 0}, {"snippet_id": 31479, "code": ".environ.get('DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.'", "label": 0}, {"snippet_id": 8429, "code": "/user_api/v1/account/password_reset/', request.session) } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request", "label": 0}, {"snippet_id": 18280, "code": " driver(so everything is synchronous) to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions, returns None or the error message to", "label": 1}, {"snippet_id": 65662, "code": "\") self.override_dialog=builder.get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 58055, "code": "( context_data={ \"milestone\": \"first\", \"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson\", \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1", "label": 0}, {"snippet_id": 56407, "code": ".given_a_profile(username='a_b.c', bio='my info', pic='url') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_profile_redirect('a_b", "label": 0}, {"snippet_id": 64202, "code": ".dump({'location': location}).data @authn_views.route('/saml2-ls', methods=['POST']) def logout_service(): \"\"\"SAML Logout Response endpoint The IdP will send the logout response to this view, which will", "label": 0}, {"snippet_id": 30139, "code": " oauth2client.client import FlowExchangeError import httplib2 import json from flask import make_response import requests app=Flask(__name__) CLIENT_ID=json.loads( open('client_secrets.json', 'r').read())", "label": 0}, {"snippet_id": 49611, "code": "'ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"]) f.flush() try", "label": 0}, {"snippet_id": 40816, "code": "(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21", "label": 0}, {"snippet_id": 52491, "code": " results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=['POST']) def save_updated_project_details(project_id): ", "label": 0}, {"snippet_id": 5115, "code": " import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self", "label": 0}, {"snippet_id": 82731, "code": "%s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True", "label": 0}, {"snippet_id": 72205, "code": ", clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not in Ganesha", "label": 0}, {"snippet_id": 36423, "code": ".get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0]", "label": 1}, {"snippet_id": 78828, "code": " description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not", "label": 0}, {"snippet_id": 34095, "code": "]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute", "label": 0}, {"snippet_id": 7374, "code": ", WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' import logging from flask", "label": 0}, {"snippet_id": 35132, "code": " class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def", "label": 0}, {"snippet_id": 73505, "code": "[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) send_mail( 'ScreenDoor", "label": 0}, {"snippet_id": 44502, "code": " url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing...", "label": 0}, {"snippet_id": 64954, "code": " outputs additional \" \"information about exceptions that occur\") args=parser.parse_args() vlevel=args.verbose name=args.name if not name.isidentifier() or keyword.iskeyword(name): raise ValueError('Function", "label": 0}, {"snippet_id": 31548, "code": "'^draw/?$', home_page, name='home_page'), url(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new", "label": 0}, {"snippet_id": 1450, "code": " directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat", "label": 1}, {"snippet_id": 42512, "code": "/extractedtext/{ext.pk}/') def test_qa_approval_redirect(self): self.client.get(f'/qa/extractionscript/{self.objects.exscript.pk}/') pk=self.objects.extext.pk response=self.client.post(f'/qa/extractedtext/{pk", "label": 1}, {"snippet_id": 18383, "code": " password, \tverifies if the hashing happened properly, re-hashes if the verification failed, \tand then returns hashed password. \t\"\"\" \tdef hash_password(self): \t\tph=PasswordHasher() \t\thashed_password=ph", "label": 1}, {"snippet_id": 45658, "code": " def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc", "label": 0}, {"snippet_id": 68978, "code": " 0xM3wceL1AIMuGhlXFeGd0wRv/RVzeZjnTGwhN1DnCDy1I66hUTgehONsfVanuP1 PZKoL38EAxsMzdYgkYH6T9a4wJH/IPt+uuFTFFy3o8TKMvKaJk98+Jsp2X/QuNxh qpcIGaVbtQ1bn7m+k5Qe/fz+bFuUeXPivafLLlGc6KbdgMvSW9EVMO7yBy/2JE15 ZJgl7lXKLQ31VQPAHT3an5IV2C", "label": 0}, {"snippet_id": 59555, "code": ") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir", "label": 0}, {"snippet_id": 40069, "code": " return self.curated_chemical.sid except AttributeError: return False def get_data_document(self): '''Find the child object by trying each of the classes, then return the datadocument id from it NOTE: this", "label": 0}, {"snippet_id": 28967, "code": ". worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It", "label": 0}, {"snippet_id": 81872, "code": " object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm(request.POST or None) if form.is_valid(): object.count +=1 ip=get_client_ip", "label": 1}, {"snippet_id": 41536, "code": ".detail_page_editable: error=(f'{model.__module__} should have one more forms' ' than instances') self.assertEqual(num_forms, children +1, error) else: error=(f'{model.__module__} should have the same number'", "label": 0}, {"snippet_id": 61872, "code": " page, soup def validate_subdomain(url): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"", "label": 0}, {"snippet_id": 84262, "code": " revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member", "label": 0}, {"snippet_id": 24852, "code": ".GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self", "label": 1}, {"snippet_id": 48887, "code": " puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return", "label": 0}, {"snippet_id": 47771, "code": " output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get", "label": 0}, {"snippet_id": 53758, "code": " RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management class for each step in a project. These class instances are exposed to Cauldron users, which provide", "label": 0}, {"snippet_id": 28787, "code": ".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\"", "label": 0}, {"snippet_id": 12582, "code": ".provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled", "label": 0}, {"snippet_id": 34402, "code": " ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait", "label": 0}, {"snippet_id": 62897, "code": " tests that need to access the assertion consumer service and then check the side effects of this access. :param url: the url of the desired authentication mode. :type url: str :param eppn: the eppn of", "label": 0}, {"snippet_id": 11268, "code": " steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages", "label": 0}, {"snippet_id": 24787, "code": " from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor for Ray processes. The monitor is in charge", "label": 0}, {"snippet_id": 16269, "code": ", round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player", "label": 0}, {"snippet_id": 30025, "code": " @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge' id=Column(Integer, primary_key", "label": 0}, {"snippet_id": 32517, "code": ".token self.token=next(self.tokens, None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else: return None def expect(self, ttype): result", "label": 0}, {"snippet_id": 35103, "code": "=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget", "label": 0}, {"snippet_id": 47921, "code": "),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str", "label": 0}, {"snippet_id": 47489, "code": "('data_source/' 'datasource_confirm_delete.html')): datasource=get_object_or_404(DataSource, pk=pk) if request.method=='POST': datasource.delete() return redirect('data_source_list') return render(request", "label": 0}, {"snippet_id": 36232, "code": " time from lxml import html from django.urls import resolve from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard", "label": 0}, {"snippet_id": 69612, "code": ".add_hookspecs(hooks) pm.load_setuptools_entrypoints('tljh') return pm def run_plugin_actions(plugin_manager, plugins): \"\"\" Run installer hooks defined in plugins \"\"\" hook=plugin_manager.hook apt_packages=list", "label": 0}, {"snippet_id": 32139, "code": " The generated token. Throws: May throw a ValueError in the case that the input is malformed and a token cannot be correctly generated from it. ''' while self.char and self.char.isspace(): self.read() if", "label": 0}, {"snippet_id": 20753, "code": "._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful", "label": 0}, {"snippet_id": 51754, "code": ".count=0 def updateScope(self,scope): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript(self,script): script_name='result", "label": 0}, {"snippet_id": 83978, "code": ": is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter( old_title=title).order_by('-revision')[0].article redirected_from", "label": 0}, {"snippet_id": 10262, "code": " _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ ", "label": 0}, {"snippet_id": 59016, "code": "/invite_text.txt') rendered_text=text_template.render(context) send_mail( rendered_subj, rendered_text, settings.EMAIL_FROM, [self.email], fail_silently=False ) return{ 'success': True, 'message': 'Invitation", "label": 0}, {"snippet_id": 19686, "code": " required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address", "label": 1}, {"snippet_id": 7403, "code": ", or_ from app.models.bookings import Exam from app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"", "label": 1}, {"snippet_id": 31647, "code": " request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll in settings.LANGUAGES]: if request.user.is_authenticated(): request.user.locale=locale request.user.save() max_age=10 * 365 * 24 * 60 *", "label": 1}, {"snippet_id": 12926, "code": " Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method", "label": 0}, {"snippet_id": 52982, "code": ".user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase): def setUp(self): super(TestUserUpdateView, self).setUp() self.view", "label": 0}, {"snippet_id": 83761, "code": ", group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles,", "label": 0}, {"snippet_id": 16784, "code": ".game g.name=f.cleaned_data['game_name'] g.the_set=f.cleaned_data['the_set'] try: g.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament", "label": 0}, {"snippet_id": 41541, "code": "' ' than instances') self.assertEqual(num_forms, children +1, error) else: error=(f'{model.__module__} should have the same number' ' of forms as instances') self.assertEqual(num_forms, children, error", "label": 0}, {"snippet_id": 72186, "code": " 'export_id': '{export_id}'}, 2.0) def set(self, cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id", "label": 0}, {"snippet_id": 71670, "code": ".serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2", "label": 0}, {"snippet_id": 57708, "code": " def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere,", "label": 0}, {"snippet_id": 10802, "code": "(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process", "label": 0}, {"snippet_id": 15020, "code": "(ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search(", "label": 0}, {"snippet_id": 82549, "code": " class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component", "label": 0}, {"snippet_id": 8380, "code": "]=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session", "label": 0}, {"snippet_id": 79825, "code": "[users, 'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict", "label": 1}, {"snippet_id": 13757, "code": " if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info", "label": 0}, {"snippet_id": 60862, "code": "\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name", "label": 0}, {"snippet_id": 20779, "code": "._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name", "label": 0}, {"snippet_id": 38453, "code": " the title of the document ``url`` an optional URL to the document's remote source ``raw_category`` ``data_group`` the DataGroup object to which the document belongs. The type of the data group determines", "label": 0}, {"snippet_id": 7530, "code": ".urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import", "label": 0}, {"snippet_id": 77313, "code": "*:\") result=p.sub(r'\\g<1>\"\\g<2>\":', result) return json.loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database", "label": 0}, {"snippet_id": 75419, "code": ".change_candidate', raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) if request", "label": 0}, {"snippet_id": 80126, "code": " __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse()", "label": 0}, {"snippet_id": 6936, "code": " has been ' 'sent.') return redirect(url_for('auth.login')) return render_template('auth/reset_password.html', form=form) @auth.route('/reset/<token>', methods=['GET', 'POST']) def password_reset(token)", "label": 0}, {"snippet_id": 24156, "code": " register_custom_serializer that happen under the hood on workers. Attributes: worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker,", "label": 1}, {"snippet_id": 398, "code": " item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 11581, "code": " step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if", "label": 0}, {"snippet_id": 35762, "code": " p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get(", "label": 0}, {"snippet_id": 60960, "code": " \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent", "label": 0}, {"snippet_id": 76841, "code": ". Returns: The tile bitmap. \"\"\" try: fp=urllib.urlopen(url) f=StringIO.StringIO(fp.read()) im_tile=Image.open(f) im_tile.load() except IOError, e: im_tile=None logger.error(\"Failed to fetch tile:%s\", e", "label": 1}, {"snippet_id": 37418, "code": " **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required' class Meta: model", "label": 0}, {"snippet_id": 58000, "code": " unittest import skip from ddt import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core", "label": 0}, {"snippet_id": 16321, "code": " reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value in form.cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered(i) if", "label": 1}, {"snippet_id": 52371, "code": "\"\"\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id) return \"HTTP-status-code: 200\" @app.route(\"/add-to-board\", methods=[\"POST", "label": 0}, {"snippet_id": 12959, "code": "(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the", "label": 0}, {"snippet_id": 33026, "code": "(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj", "label": 0}, {"snippet_id": 41818, "code": "\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertIsInstance(response.context", "label": 0}, {"snippet_id": 42361, "code": " page.\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self):", "label": 0}, {"snippet_id": 34351, "code": "( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field", "label": 0}, {"snippet_id": 61432, "code": " monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not", "label": 0}, {"snippet_id": 17948, "code": " password.'), 'danger') return flask.redirect('/profile') user.password_hash=form.new_password.data flask.flash(flask.Markup( '<strong>Password successfully changed!</strong>'), 'success') db.session.add", "label": 0}, {"snippet_id": 28564, "code": "\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or", "label": 0}, {"snippet_id": 83276, "code": ".templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm): summary=forms.CharField(widget=forms.Textarea) comment=forms.CharField(required", "label": 0}, {"snippet_id": 73543, "code": ", ) def generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def clear_get_data", "label": 0}, {"snippet_id": 36825, "code": " datetime.date): item['upload_date']=datetime.date.strftime((item['upload_date']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type", "label": 0}, {"snippet_id": 43970, "code": " sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys", "label": 0}, {"snippet_id": 57318, "code": " redirect('transaction_pay', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm", "label": 0}, {"snippet_id": 70442, "code": "(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application", "label": 0}, {"snippet_id": 26916, "code": ". redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with.", "label": 0}, {"snippet_id": 80248, "code": "=set_menu.addAction('BiFi Approx. Wavelength') self.set_bifi_motor_pos_action=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position')", "label": 0}, {"snippet_id": 15128, "code": ", **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final", "label": 0}, {"snippet_id": 6158, "code": " ID token, can't refresh credentials\", exc_info=True) del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server(request.url) g.oidc_id_token=id_token return None def require_login", "label": 0}, {"snippet_id": 56607, "code": " test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa() \\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details", "label": 0}, {"snippet_id": 12324, "code": ") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\"", "label": 0}, {"snippet_id": 31793, "code": " pytest from django.shortcuts import reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert", "label": 1}, {"snippet_id": 70863, "code": " are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 72462, "code": " return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self): return CephFS.list_filesystems() @Endpoint('GET', '/rgw/buckets') def buckets(self, user_id=None): return RgwClient.instance", "label": 0}, {"snippet_id": 55021, "code": ".path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized(p) class FSPath(object): \tdef __init__(self", "label": 0}, {"snippet_id": 28567, "code": " requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources", "label": 0}, {"snippet_id": 78904, "code": " datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id)", "label": 0}, {"snippet_id": 19739, "code": ".ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class", "label": 0}, {"snippet_id": 84556, "code": " def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki', extra_context=None", "label": 0}, {"snippet_id": 73749, "code": "'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): save_position_to_user(request)", "label": 0}, {"snippet_id": 74344, "code": " self.object=self.report self.template_name=self.access_template_name context=self.get_context_data(form=self._get_access_form()) return self.render_to_response(context) def _redirect_from_passphrase(self,", "label": 0}, {"snippet_id": 11448, "code": " 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines", "label": 0}, {"snippet_id": 22269, "code": "=redis_shard_ports self.object_manager_port=object_manager_port self.node_manager_port=node_manager_port self.node_ip_address=node_ip_address self.num_workers=num_workers self.local_mode=local_mode self", "label": 0}, {"snippet_id": 62616, "code": " 'http://test.localhost/failure' }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app", "label": 1}, {"snippet_id": 24685, "code": " type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument", "label": 1}, {"snippet_id": 6192, "code": "(*args, **kwargs): if g.oidc_id_token is None: return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build", "label": 0}, {"snippet_id": 11114, "code": "=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The", "label": 0}, {"snippet_id": 18054, "code": ".EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset.txt', user=user), html=flask.render_template('email", "label": 0}, {"snippet_id": 3882, "code": "=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" ", "label": 0}, {"snippet_id": 73608, "code": "(request) form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get(", "label": 1}, {"snippet_id": 25919, "code": " None (self._redis_address, redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards", "label": 1}, {"snippet_id": 64446, "code": ".get_user_by_eppn(eppn) if user.locked_identity.count > 0: current_app.logger.error('Not new user{} tried to log in using token login'.format(user)) return redirect(location_on_fail) session['eduPersonPrincipalName'", "label": 0}, {"snippet_id": 82905, "code": " comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"", "label": 0}, {"snippet_id": 83391, "code": " title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action']=='create': try:", "label": 1}, {"snippet_id": 23398, "code": " byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object", "label": 0}, {"snippet_id": 26852, "code": " from __future__ import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str)", "label": 0}, {"snippet_id": 56633, "code": " given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def then_response_should_be_json", "label": 0}, {"snippet_id": 39199, "code": " the group.\" raise ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\" Deletes datagroup directory", "label": 0}, {"snippet_id": 79760, "code": " data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict['title'] validator.validate_datarequest(context, data_dict) organisation_updated=data_req.organization_id !=data_dict", "label": 0}, {"snippet_id": 37935, "code": ".type parent, child=get_extracted_models(group_type) extracted=hasattr(document, 'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude)", "label": 0}, {"snippet_id": 46811, "code": " data_group=datagroup) doc.save() text.append(str(doc.pk)+','+','.join(line.values())+'\\n') if errors: datagroup.csv.close() datagroup.delete() return render(request, template_name,{'line_errors': errors", "label": 0}, {"snippet_id": 18405, "code": "\t\thashed_password=ph.hash(self.password) \t\treturn hashed_password \t\"\"\" post(): \tSets class variables, does rudimentary checks on username and email submitted using regex \tand renders signup.html with the", "label": 1}, {"snippet_id": 81982, "code": "-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view') class CustomShortURLCreateView(View): def get(self", "label": 0}, {"snippet_id": 36303, "code": "[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self", "label": 0}, {"snippet_id": 41227, "code": " \"This document is not extracted \") page=html.fromstring(response.content) hhe_no=page.xpath('//dd[contains(@class, \"hh-report-no\")]')[0].text self.assertIn('47', hhe_no) class TestDynamicDetailFormsets", "label": 0}, {"snippet_id": 69436, "code": "(admins) with open(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second each", "label": 0}, {"snippet_id": 28221, "code": ". \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray", "label": 0}, {"snippet_id": 66660, "code": ".add_class(\"destructive-action\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") else: composite_unlock_entry.get_style_context().add_class(\"error\") def", "label": 0}, {"snippet_id": 43695, "code": ".get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited", "label": 0}, {"snippet_id": 70331, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 9094, "code": " from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import", "label": 0}, {"snippet_id": 51579, "code": "'build_condition':builder.build_condition, 'default_platform':default_platform, 'get_vsvars_environment':get_vsvars_environment, 'SshSession':SshSession, 'select_optional_steps':builder.select_optional_steps,", "label": 0}, {"snippet_id": 50366, "code": "=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect(url_for('login')) user=query_social_user(social); session['social'", "label": 0}, {"snippet_id": 21154, "code": "\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address, stdout_file", "label": 0}, {"snippet_id": 55202, "code": "=None): \t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os", "label": 0}, {"snippet_id": 57252, "code": "(employee=request.user) return redirect('transaction_edit', transaction_code=transaction.code) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if", "label": 0}, {"snippet_id": 22437, "code": ".\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None", "label": 0}, {"snippet_id": 25460, "code": ") self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages() time.sleep", "label": 0}, {"snippet_id": 2030, "code": " TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path", "label": 0}, {"snippet_id": 59875, "code": ".get(\"about_url\") or self.metadata(\"about_url\"), } ) def prepare_connection(self, conn): conn.row_factory=sqlite3.Row conn.text_factory=lambda x: str(x, \"utf-8\", \"replace\") for name, num_args, func in self", "label": 0}, {"snippet_id": 3144, "code": " except ImportError: from urllib import urlencode from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import", "label": 0}, {"snippet_id": 23382, "code": " which case we will return an empty string. TODO(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python", "label": 0}, {"snippet_id": 24961, "code": " subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails", "label": 0}, {"snippet_id": 26163, "code": " use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options, ) assert", "label": 0}, {"snippet_id": 33017, "code": "(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description", "label": 0}, {"snippet_id": 21898, "code": " with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory", "label": 0}, {"snippet_id": 14433, "code": "\"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request", "label": 0}, {"snippet_id": 39843, "code": " between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis])", "label": 0}, {"snippet_id": 81371, "code": " counter +=1 return attendee_list def start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled', '=', True)]) for repeating_event in repeating_event_ids", "label": 0}, {"snippet_id": 20364, "code": "(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy", "label": 0}, {"snippet_id": 40822, "code": " should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/'", "label": 0}, {"snippet_id": 78738, "code": " datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action, context, data_dict): \"\"\" Action to update a data request. The function checks", "label": 1}, {"snippet_id": 59956, "code": " metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{},", "label": 0}, {"snippet_id": 46110, "code": "=include_extract_form(dg) context['all_documents']=dg.datadocument_set.get_queryset() context['extract_form']=form context['msg']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button'", "label": 0}, {"snippet_id": 72513, "code": " from django.utils.translation import gettext as _ from screendoor.redactor import parse_applications from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm", "label": 1}, {"snippet_id": 43000, "code": " follow=True) self.assertIn(b'/datadocument/5', response.content) def test_approval(self): response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext/7'", "label": 0}, {"snippet_id": 37301, "code": " fields=['title', 'url', 'estimated_records', 'state', 'priority', 'description'] class PriorityForm(forms.ModelForm): class Meta: model=DataSource fields=['priority'] def __init__(self, *args, **kwargs)", "label": 0}, {"snippet_id": 26829, "code": "(self.live_processes()) def remaining_processes_alive(self): \"\"\"Return true if all remaining processes are still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command", "label": 0}, {"snippet_id": 13376, "code": ".time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page", "label": 0}, {"snippet_id": 22171, "code": " options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None", "label": 0}, {"snippet_id": 23179, "code": " will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command", "label": 0}, {"snippet_id": 2003, "code": "/a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index", "label": 0}, {"snippet_id": 49159, "code": "(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance", "label": 0}, {"snippet_id": 7536, "code": " HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import", "label": 0}, {"snippet_id": 16606, "code": " assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters", "label": 0}, {"snippet_id": 7336, "code": " Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2", "label": 0}, {"snippet_id": 18705, "code": " \t\tcheck_details=self.check_database() \t\tif(check_details!=None): \t\t\tself.render('signin.html',error=check_details) \t\t\treturn \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin", "label": 0}, {"snippet_id": 61566, "code": " securedrop=securedrop, live=pshtt_results['Live'], http_status_200_ok=False, ) return ScanResult( landing_page_url=securedrop.landing_page_url, live=pshtt_results['Live'], http_status_200_ok=validate_200_ok", "label": 1}, {"snippet_id": 71279, "code": " self.session.data[key]=[] return self.session.data[key].append({ 'message': message, 'level': level}) add_message=_add_message def _get_messages(self, key='_messages'): try: return self.session.data.pop", "label": 0}, {"snippet_id": 83210, "code": " already_handleled={} while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name", "label": 0}, {"snippet_id": 83776, "code": " if the user have permission to edit Articles, False otherwise.\"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True return False def article_list(request, group_slug=None,", "label": 0}, {"snippet_id": 12128, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 24240, "code": ".redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis", "label": 1}, {"snippet_id": 78593, "code": "\"\"\" Action to create a new data request. The function checks the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition", "label": 0}, {"snippet_id": 84287, "code": "'GET': article_args={'article__title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'article__content_type': get_ct(group)", "label": 0}, {"snippet_id": 36191, "code": "(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE", "label": 0}, {"snippet_id": 48256, "code": ".form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument", "label": 1}, {"snippet_id": 17712, "code": ".abort(404) if flask.g.user: return flask.redirect(redirect_url()) if payload is None: form=forms.PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models", "label": 0}, {"snippet_id": 80324, "code": ".lock_fast_piezo_action=lock_menu.addAction('Lock Fast Piezo') self.lock_fast_piezo_action.setCheckable(True) tools_menu=menu_bar.addMenu('Tools') self.lock_actions=[self.lock_slow_piezo_action, self.lock_thin_etalon_action", "label": 0}, {"snippet_id": 31684, "code": "=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client", "label": 1}, {"snippet_id": 18888, "code": " GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin: if admin.is_open: return{'gospel_trips_available': True} return{'gospel_trips_available': False} except GospelTrip.DoesNotExist:", "label": 1}, {"snippet_id": 2154, "code": " HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _,", "label": 1}, {"snippet_id": 49963, "code": " else request.form['filename'] if name: if name[-4:] !=\".pml\": name +=\".pml\" if allowed_file(name): session['currentFile']=name if 'email' in session: email=session['email'] elif 'social' in session: email", "label": 0}, {"snippet_id": 44853, "code": " create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects() def test_habitsandpractices(self): found", "label": 0}, {"snippet_id": 57755, "code": ": status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()] return round( len(filter(lambda", "label": 0}, {"snippet_id": 38836, "code": "=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True)", "label": 0}, {"snippet_id": 20825, "code": "\"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args:", "label": 0}, {"snippet_id": 20651, "code": ", shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional", "label": 0}, {"snippet_id": 1003, "code": ", '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath", "label": 1}, {"snippet_id": 30404, "code": "=params) data=answer.json() login_session['username']=data['name'] login_session['picture']=data['picture'] login_session['email']=data['email'] output='' output +='<h1>Welcome, ' output +=login_session", "label": 0}, {"snippet_id": 39986, "code": " blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField", "label": 0}, {"snippet_id": 37756, "code": "'CP']: return False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, ", "label": 0}, {"snippet_id": 42341, "code": "(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code, 302, \"User is redirected to detail page.\") self.assertEqual(response.url, f'/datagroup/{dgpk}/', \"Should go to detail page", "label": 0}, {"snippet_id": 48167, "code": ", ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator", "label": 1}, {"snippet_id": 70437, "code": "': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding", "label": 0}, {"snippet_id": 43710, "code": " field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click()", "label": 0}, {"snippet_id": 54505, "code": "+verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application", "label": 0}, {"snippet_id": 61517, "code": " from scanner.utils import url_to_domain if TYPE_CHECKING: from directory.models import DirectoryEntryQuerySet def pshtt_data_to_result(securedrop: DirectoryEntry, pshtt_results: Dict) -> ScanResult: \"", "label": 1}, {"snippet_id": 74144, "code": ".passphrase) def get_form_kwargs(self): kwargs=super().get_form_kwargs() kwargs.update({\"view\": self}) return kwargs class ReportCreatePartial(ReportBasePartial, views.edit.CreateView): form_class=forms", "label": 0}, {"snippet_id": 70939, "code": " lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{%", "label": 0}, {"snippet_id": 21643, "code": "(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,.", "label": 0}, {"snippet_id": 44311, "code": "/' self.browser.get(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit.is_enabled(), \"Button should be disabled\") tag=self.browser.find_element_by_class_name('taggit-tag'", "label": 0}, {"snippet_id": 35985, "code": " choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default", "label": 0}, {"snippet_id": 24856, "code": " redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub(", "label": 1}, {"snippet_id": 62680, "code": " self.app.test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self,", "label": 0}, {"snippet_id": 71289, "code": " add_message=_add_message def _get_messages(self, key='_messages'): try: return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self): next_uri=self.GET", "label": 1}, {"snippet_id": 48374, "code": "}) @login_required() def link_product_list(request, pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull", "label": 0}, {"snippet_id": 9584, "code": " return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current", "label": 0}, {"snippet_id": 84209, "code": "=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article': True} else: template_params={'form': form, 'new_article': False, 'content_type': ContentType", "label": 0}, {"snippet_id": 79429, "code": "}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject, body) except Exception: logging.exception(\"Error", "label": 1}, {"snippet_id": 84776, "code": " through the view template and returns it to the caller \"\"\" rv=do_wl_markdown(request.POST['body'], 'bleachit') return HttpResponse(rv, content_type='text/html') def article_diff(request): \"\"\"This is a", "label": 0}, {"snippet_id": 72326, "code": ") @ApiController('/nfs-ganesha/daemon') class NFSGaneshaService(RESTController): def list(self): status_dict=Ganesha.get_daemons_status() if status_dict: return[ { 'daemon_id': daemon_id, 'cluster_id':", "label": 0}, {"snippet_id": 10187, "code": "/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns", "label": 0}, {"snippet_id": 34569, "code": ".method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects", "label": 0}, {"snippet_id": 82977, "code": " class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self", "label": 0}, {"snippet_id": 15767, "code": "'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']) def view_run_add(field): run_form=get_run_form() run_form[field]", "label": 0}, {"snippet_id": 68470, "code": "**kwargs) return context def get_queryset(self, request): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('tweet')) return query def get(self, request): self.object_list=self.get_queryset", "label": 0}, {"snippet_id": 16154, "code": " specified numbered round of the specified tournament or raise Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id", "label": 0}, {"snippet_id": 63306, "code": " self.redis_instance.conn.set(sessid, json.dumps({'v1':{'id': '0'}})) eppn=self.test_user_data['eduPersonPrincipalName'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get", "label": 0}, {"snippet_id": 43799, "code": ".browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel", "label": 0}, {"snippet_id": 30092, "code": " 'name': self.name, 'description': self.description, 'processed': self.processed, 'takeaway': self.takeaway, } engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread", "label": 0}, {"snippet_id": 78161, "code": " security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from", "label": 1}, {"snippet_id": 22411, "code": " \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary", "label": 0}, {"snippet_id": 32885, "code": " redirections: A list of redirections. ''' def __init__(self, redirections): self.redirections=redirections self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack()", "label": 0}, {"snippet_id": 40831, "code": "() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath", "label": 0}, {"snippet_id": 63792, "code": " eduid_common.authn.loa import get_loa from eduid_common.authn.eduid_saml2 import get_authn_request, get_authn_response from eduid_common.authn.eduid_saml2 import authenticate from eduid_common.authn.cache import", "label": 0}, {"snippet_id": 16200, "code": "'tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify which players are playing each round\"\"\" t=get_modifiable_tournament_or_404(tournament_id", "label": 0}, {"snippet_id": 58187, "code": ".STEP_8: 0}, 75.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 1, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 1}, 100", "label": 1}, {"snippet_id": 14626, "code": "[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 13067, "code": " the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders", "label": 0}, {"snippet_id": 54779, "code": "\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group in self.problem_groups.values(): \t\t\tself.count_by_groups +=len(group) \t\tprint self.count_by_groups \t\t \tdef process_hwml", "label": 1}, {"snippet_id": 64658, "code": "'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'StopAsyncIteration', 'StopIteration", "label": 0}, {"snippet_id": 47241, "code": " dashboard.forms import DataSourceForm, PriorityForm from dashboard.models import DataSource, DataGroup, DataDocument from.data_group import DataGroupForm from django.db.models import Count, Q @login_required", "label": 1}, {"snippet_id": 6761, "code": " return render_template('auth/register.html', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user", "label": 0}, {"snippet_id": 22966, "code": " binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray", "label": 0}, {"snippet_id": 36627, "code": "('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1, 'The page should show", "label": 0}, {"snippet_id": 33690, "code": " b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code", "label": 1}, {"snippet_id": 1241, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^", "label": 0}, {"snippet_id": 28590, "code": " custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked", "label": 0}, {"snippet_id": 50330, "code": "\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider", "label": 0}, {"snippet_id": 62369, "code": " to the RelayState: ' +relay_state) response=redirect(location=relay_state) session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user, relay_state)) return response", "label": 0}, {"snippet_id": 65006, "code": "'Failed to parse test case %d' % i) valid=False if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0", "label": 0}, {"snippet_id": 32027, "code": "=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto() UNKNOWN=enum.auto() class Token: ''' A string with an assigned meaning. Args: ttype", "label": 0}, {"snippet_id": 4443, "code": " import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale", "label": 0}, {"snippet_id": 20576, "code": " division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray", "label": 0}, {"snippet_id": 72952, "code": " Position.objects.get( id=request.POST.get(\"id\")).delete() request.session['position_sort']=sort_by return render(request, 'positions.html',{ 'baseVisibleText': InterfaceText, 'positionText': PositionText", "label": 0}, {"snippet_id": 67754, "code": " context def get_queryset(self): query=Attribute.objects.order_by('-timestamp') category=self.request.GET.get('category') type=self.request.GET.get('type') if category is not None: query=query.filter(category", "label": 0}, {"snippet_id": 18085, "code": "' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user': user } email_msg=email.EmailHolder( subject='{} password reset request'.format", "label": 0}, {"snippet_id": 74783, "code": " import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis", "label": 0}, {"snippet_id": 57530, "code": "']=form return render(request, 'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_pay", "label": 0}, {"snippet_id": 77389, "code": " doesn't support database\" \"type '%s'\", server_vars[\"dbType\"]) return layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def", "label": 0}, {"snippet_id": 53774, "code": " in a project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self", "label": 0}, {"snippet_id": 33307, "code": ") admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin", "label": 0}, {"snippet_id": 4353, "code": ".test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account", "label": 1}, {"snippet_id": 13689, "code": " reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns:", "label": 0}, {"snippet_id": 48962, "code": " assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product", "label": 0}, {"snippet_id": 32932, "code": " SetUpInputRedirect(cmd) if(\">\" in cmd): SetUpOutputRedirect(cmd) if(\">>\" in cmd): SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\"", "label": 1}, {"snippet_id": 60546, "code": ">\", ) app.add_route( DatabaseDownload.as_view(self), r\"/<db_name:[^/]+?><as_db:(\\.db)$>\" ) app.add_route( DatabaseView.as_view(self), r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route(", "label": 0}, {"snippet_id": 50246, "code": ") def loginButton(): email=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl", "label": 0}, {"snippet_id": 25949, "code": " redis_max_memory=self._ray_params.redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER]=( process_infos) def", "label": 0}, {"snippet_id": 37736, "code": ");' }) def include_extract_form(dg): '''Returns the ExtractionScriptForm based on conditions of DataGroup type as well as whether all records are matched, but not extracted ''' if not dg.type in['FU', ", "label": 0}, {"snippet_id": 13458, "code": "\"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None", "label": 0}, {"snippet_id": 35708, "code": ".create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, ", "label": 0}, {"snippet_id": 10420, "code": " import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps", "label": 0}, {"snippet_id": 82988, "code": " name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating", "label": 0}, {"snippet_id": 74427, "code": " form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super().form_invalid(form", "label": 0}, {"snippet_id": 21585, "code": " exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args:", "label": 0}, {"snippet_id": 42564, "code": "(self): response=self.c.get('/find/?q=ethyl') self.assertContains(response, 'Data Document') self.assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def", "label": 0}, {"snippet_id": 27767, "code": " cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events=[] if", "label": 1}, {"snippet_id": 28313, "code": " f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to", "label": 0}, {"snippet_id": 28540, "code": ". Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus", "label": 0}, {"snippet_id": 25684, "code": " \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is", "label": 0}, {"snippet_id": 63408, "code": "'/test') self.assertEqual(resp.status_code, 200) def test_authn(self): with self.app.test_client() as c: resp=c.get('/test2') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith", "label": 0}, {"snippet_id": 12678, "code": " _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', ", "label": 0}, {"snippet_id": 46373, "code": "=ExtractedText.objects.get(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if", "label": 0}, {"snippet_id": 67954, "code": ".client import HTTPConnection class IndexView(PaginationMixin, ListView): model=Hunt template_name='threat_hunter/index.html' context_object_name='hunts' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 34648, "code": " number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n ", "label": 0}, {"snippet_id": 49445, "code": "=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form", "label": 1}, {"snippet_id": 70315, "code": " given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You", "label": 0}, {"snippet_id": 44009, "code": "=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_hem(self): for i in range(27): ds=DataSource.objects", "label": 1}, {"snippet_id": 680, "code": " lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{%", "label": 0}, {"snippet_id": 67831, "code": " second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name", "label": 0}, {"snippet_id": 40490, "code": "=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC', through='TaxonomyToPUC') class Meta: verbose_name_plural='Taxonomies", "label": 0}, {"snippet_id": 32726, "code": ", args): self.command=command self.args=args self.args.insert(0, command) self.pid=None def execute(self, builtins): if self.command in builtins: builtins[self.command](*self.args) else: pid=os.fork() if", "label": 0}, {"snippet_id": 29708, "code": ".show_posts')) @gallery.route('/gallery/benwa/add', methods=['GET', 'POST']) @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename", "label": 0}, {"snippet_id": 48368, "code": "(request, template_name,{'datasource': ds, 'products': products}) @login_required() def link_product_list(request, pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk", "label": 0}, {"snippet_id": 49482, "code": ") return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1", "label": 0}, {"snippet_id": 52768, "code": " on the socket { 'id': \"id\", 'sent_by':'user_id', 'room':\"room_id\", 'text':message.txt, 'file_name': message.attachment, 'file_link': message.attachment.path } \"\"\" model=Message serializer_class=MessageSerializer", "label": 0}, {"snippet_id": 52285, "code": " \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id=request", "label": 0}, {"snippet_id": 60273, "code": " setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms if custom_time_limit and custom_time_limit < time_limit_ms: time_limit_ms=custom_time_limit with sqlite_timelimit(conn, time_limit_ms)", "label": 0}, {"snippet_id": 59717, "code": "=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self): if not hasattr(self, \"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root),", "label": 0}, {"snippet_id": 37692, "code": "(ExtractedHHDocForm.Meta): fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def", "label": 0}, {"snippet_id": 5596, "code": "]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password", "label": 0}, {"snippet_id": 60876, "code": " with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname", "label": 0}, {"snippet_id": 82677, "code": " comp_name: Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name", "label": 0}, {"snippet_id": 5399, "code": ", 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test", "label": 0}, {"snippet_id": 56445, "code": " \\ .given_a_dynamic_link('') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to('pachatary://app/profiles/a_b.c') class ScenarioMaker: def given_a_profile(self, username, bio", "label": 0}, {"snippet_id": 40250, "code": "(self): return DataDocument.objects.filter( extractedtext__extraction_script=self.pk).count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects.filter(extractedtext__qa_checked", "label": 0}, {"snippet_id": 45234, "code": "'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime", "label": 0}, {"snippet_id": 7406, "code": ".models.bookings import Exam from app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"/exams/\", methods", "label": 0}, {"snippet_id": 5230, "code": " test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/'", "label": 0}, {"snippet_id": 64753, "code": " k: __builtins__.__dict__[k] for k in builtins_whitelist if k in __builtins__.__dict__ } instr_locals={} try: exec(code_obj, instr_globals, instr_locals) except BaseException as e: if vlevel >=1: print", "label": 1}, {"snippet_id": 48661, "code": " request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()", "label": 0}, {"snippet_id": 10488, "code": " request_password_change from openedx.core.djangoapps.user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import", "label": 0}, {"snippet_id": 51457, "code": " message. ''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a", "label": 0}, {"snippet_id": 56907, "code": " form=concept_form(instance=concept) extra_context['form']=form return render(request, 'transactions/concept_edit.html', extra_context) class ConceptList(PaginationMixin, ListView): template_name='transactions", "label": 0}, {"snippet_id": 34984, "code": "(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now", "label": 1}, {"snippet_id": 35461, "code": "': doc, 'form': form}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p", "label": 0}, {"snippet_id": 34980, "code": "=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename", "label": 1}, {"snippet_id": 16248, "code": " played=rps.filter(the_round=r).exists() current['round_%d' % r.number()]=played data.append(current) if round_num: formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num", "label": 0}, {"snippet_id": 67881, "code": "'id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html' context_object_name='tags' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs)", "label": 0}, {"snippet_id": 70314, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'})", "label": 0}, {"snippet_id": 76604, "code": "&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching tiles\") logger.debug(\"rect_of_tiles: %s\", rect_of_tiles)", "label": 0}, {"snippet_id": 11545, "code": " in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id", "label": 0}, {"snippet_id": 79554, "code": ":returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context", "label": 0}, {"snippet_id": 80426, "code": " setup_widgets(self): self.status_monitor_queue=queue.Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function", "label": 0}, {"snippet_id": 46070, "code": " return render(request, template_name, context) zf=zipfile.ZipFile(dg.zip_file, 'a', zipfile.ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc=DataDocument.objects.get(filename=f.name, data_group", "label": 0}, {"snippet_id": 14510, "code": "(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 7540, "code": " HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views", "label": 0}, {"snippet_id": 37524, "code": ".ModelForm): id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput(), required=True) class Meta: model=ProductToPUC fields=['puc', 'id_pks'] class BulkPUCForm(BasePUCForm): class Meta:", "label": 0}, {"snippet_id": 11134, "code": " URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context", "label": 0}, {"snippet_id": 74563, "code": " def redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app", "label": 0}, {"snippet_id": 4960, "code": " logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual", "label": 0}, {"snippet_id": 2367, "code": "\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /", "label": 0}, {"snippet_id": 60036, "code": ": raise click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading the SpatiaLite module.\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite", "label": 0}, {"snippet_id": 41242, "code": "', hhe_no) class TestDynamicDetailFormsets(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_fetch_extracted_records(self):", "label": 1}, {"snippet_id": 55209, "code": " FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t", "label": 0}, {"snippet_id": 53233, "code": " import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return direct_to_template(request, template=\"funding/feature.html\"", "label": 1}, {"snippet_id": 47238, "code": " redirect, get_object_or_404 from dashboard.forms import DataSourceForm, PriorityForm from dashboard.models import DataSource, DataGroup, DataDocument from.data_group import DataGroupForm from django.db", "label": 1}, {"snippet_id": 19140, "code": "): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t", "label": 1}, {"snippet_id": 7774, "code": "\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return", "label": 1}, {"snippet_id": 32780, "code": ", self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node", "label": 0}, {"snippet_id": 32169, "code": " self.char=='>': start=self.position if self.read()=='>': self.read() return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token", "label": 0}, {"snippet_id": 7229, "code": "/www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS", "label": 0}, {"snippet_id": 33873, "code": " object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\"", "label": 0}, {"snippet_id": 31549, "code": " home_page, name='home_page'), url(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project", "label": 0}, {"snippet_id": 11008, "code": ".ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render", "label": 0}, {"snippet_id": 60518, "code": ".json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"plugins.json\", self.plugins), r\"/-/plugins<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"config.json\", lambda: self._config)", "label": 0}, {"snippet_id": 74397, "code": " EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, **kwargs): self._dispatch_processing() return super().dispatch(request, *args, **kwargs) def _rendering_done_hook(self): self.eval_action(\"REVIEW", "label": 0}, {"snippet_id": 10868, "code": "\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if", "label": 0}, {"snippet_id": 48786, "code": "=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks'].value().split(\",\") for id", "label": 0}, {"snippet_id": 49521, "code": " check_password_hash, secure_filename from database.database_create import Base, User from database.database_insert import insert_user, insert_social_user from database.database_query import query_user", "label": 0}, {"snippet_id": 58266, "code": "): self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting') @mock.patch('core.common.utils.c_onboarding_status') def test_get_onboarding_status_with_settings", "label": 0}, {"snippet_id": 64943, "code": " level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information about exceptions that occur\") args=parser.parse_args() vlevel=args.verbose name", "label": 0}, {"snippet_id": 53591, "code": " abort_thread class RedirectBuffer(io.TextIOWrapper): \"\"\" A class for intercepting and independently storing buffer writes for use within Cauldron step display. \"\"\" def __init__(self, redirection_source):", "label": 0}, {"snippet_id": 18317, "code": "\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email':self.email}) \t\tif(document_email!=None): \t\t\terror=\"Email exists already\" \t\treturn error", "label": 0}, {"snippet_id": 21701, "code": " Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append", "label": 0}, {"snippet_id": 62401, "code": " in the session(key reauthn-for-chpass) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type", "label": 0}, {"snippet_id": 30425, "code": "='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(", "label": 0}, {"snippet_id": 64404, "code": "=current_app.config.get('TOKEN_LOGIN_FAILURE_REDIRECT_URL') location_on_success=current_app.config.get('TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get('eppn') token=request.form.get('token') nonce", "label": 0}, {"snippet_id": 25025, "code": "(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex(heartbeat_message", "label": 0}, {"snippet_id": 33190, "code": "','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self).get_changeform_initial_data(request) get_data['last_edited_by']=request.user.pk return", "label": 0}, {"snippet_id": 82984, "code": " subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash", "label": 0}, {"snippet_id": 75076, "code": " request.method=='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form.is_valid(): thesis=form.save() if thesis.abstract", "label": 0}, {"snippet_id": 26765, "code": ") return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns", "label": 0}, {"snippet_id": 21476, "code": ".sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process.wait() finally: timer.cancel() if process.poll() is not", "label": 0}, {"snippet_id": 48528, "code": " p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type)", "label": 0}, {"snippet_id": 64725, "code": ", 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points // len(test_case_objs) instr_globals={ k", "label": 0}, {"snippet_id": 66018, "code": "(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(\"quit_button\") back_button.connect(\"clicked\", self.on_back_button_clicked) quit_button.connect(\"clicked\", self.on_quit_button_clicked", "label": 0}, {"snippet_id": 27159, "code": " If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True", "label": 0}, {"snippet_id": 65048, "code": ".NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', 'eval", "label": 0}, {"snippet_id": 65828, "code": "(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance def update_tab_bar_visibility(self): if self.container", "label": 0}, {"snippet_id": 53482, "code": ")).copy() def is_cauldron_code(test_filename: str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return", "label": 0}, {"snippet_id": 32943, "code": " SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\") sys.stdout=open(cmd[i +1], \"w\") del cmd[i +1] del cmd[i] print(\"this", "label": 1}, {"snippet_id": 13699, "code": ", a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST", "label": 0}, {"snippet_id": 65646, "code": ": self.filechooser_creation_dialog.close() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog.get_filename()): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal", "label": 0}, {"snippet_id": 23161, "code": " has connected to the backend processes. Args: redis_client: The redis client to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver", "label": 0}, {"snippet_id": 25793, "code": "=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property", "label": 0}, {"snippet_id": 63737, "code": " cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app", "label": 0}, {"snippet_id": 21157, "code": "\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 41319, "code": " DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document=doc) if doc.data_group.group_type.code=='CP': self.assertEqual(type(extsub), ExtractedCPCat) elif doc.data_group", "label": 0}, {"snippet_id": 12030, "code": ") third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 72070, "code": ") for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id", "label": 0}, {"snippet_id": 37879, "code": ".extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=[]): '''Returns the pair of formsets that will be needed based", "label": 0}, {"snippet_id": 36416, "code": ".prod_type +',' +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii", "label": 1}, {"snippet_id": 32552, "code": " ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins): ''' Execute the node. Args: builtins: A dict", "label": 0}, {"snippet_id": 9173, "code": " if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse", "label": 0}, {"snippet_id": 23730, "code": " out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse", "label": 0}, {"snippet_id": 27228, "code": ", num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed", "label": 0}, {"snippet_id": 36038, "code": "=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural", "label": 0}, {"snippet_id": 6516, "code": "\") if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: return self.oidc_error( \"You must log in with an account from the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']),", "label": 0}, {"snippet_id": 40610, "code": " be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/", "label": 0}, {"snippet_id": 71004, "code": ".select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 40086, "code": " then return the datadocument id from it NOTE: this will be obsolete once we move the data_document foreign key into RawChem in ticket 654 ''' id=self.id try: return apps.get_model('dashboard.ExtractedChemical", "label": 0}, {"snippet_id": 59818, "code": "}, ) ) if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view') def", "label": 0}, {"snippet_id": 4029, "code": ") self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 66841, "code": "'domain/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']=GeoIP().lookup(domain", "label": 0}, {"snippet_id": 66144, "code": "\"headerbar\") headerbar.set_subtitle(self.database_filepath) self.window.set_titlebar(headerbar) self.parent_widget.set_headerbar(headerbar) back_button=self.builder.get_object(\"back_button\") back_button.connect", "label": 0}, {"snippet_id": 63744, "code": ", 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing", "label": 0}, {"snippet_id": 74846, "code": "=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type", "label": 0}, {"snippet_id": 50921, "code": " decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep(name or f.__name__, f) self._steps.append(f.buildstep) f.buildstep.add_conditions(conditions) return f return decorator_func def", "label": 0}, {"snippet_id": 15209, "code": ": super(ChangeInputAddDelta, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField", "label": 0}, {"snippet_id": 30427, "code": "' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are", "label": 0}, {"snippet_id": 55580, "code": ".commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path) \t\telse: \t\t\treturn Folder(r.dirname().path) \tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r:", "label": 0}, {"snippet_id": 56378, "code": ".response=client.get(reverse('experience-redirect', args=[share_id])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response['Location'", "label": 0}, {"snippet_id": 11473, "code": " @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully", "label": 0}, {"snippet_id": 4483, "code": "\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/'", "label": 0}, {"snippet_id": 52133, "code": "\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\":", "label": 0}, {"snippet_id": 40348, "code": " Use all the related ExtractedText records or, if there are more than 100, select 20% of them. \"\"\" from.qa_group import QAGroup from.extracted_text import ExtractedText es=self if QAGroup.objects.filter", "label": 0}, {"snippet_id": 31644, "code": ".get('next', request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll in settings.LANGUAGES]: if request.user.is_authenticated(): request.user.locale=locale request.user.save() max_age=10 * 365", "label": 1}, {"snippet_id": 35215, "code": ".datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull=False).count() ds.data_groups=dgs return render(request, template_name,{'data_sources': data_sources}) @login_required() def", "label": 0}, {"snippet_id": 37979, "code": " can_delete=can_delete) def one(): ChemicalFormSet=make_formset( parent_model=parent, model=child, formset=ExtractedChemicalFormSet, form=ExtractedChemicalForm ) return(ExtractedTextForm, ChemicalFormSet", "label": 0}, {"snippet_id": 56670, "code": "'^redirects/people/me/login$', login_redirect, name='login-redirect'), url(r'^e/(?P<experience_share_id>[a-zA-Z0-9]+)$', experience_redirect, name='experience-redirect'), url(r'^p/(?P<username>[a-zA-Z0", "label": 0}, {"snippet_id": 53775, "code": " project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=", "label": 0}, {"snippet_id": 83550, "code": ", dmp from wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION except AttributeError", "label": 0}, {"snippet_id": 16025, "code": " redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html'", "label": 0}, {"snippet_id": 46639, "code": ", 'name' : default_name, 'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup", "label": 0}, {"snippet_id": 37279, "code": " 'height:2.75rem; !important'}) self.fields['clean_comp_data_file'].widget.attrs.update( {'accept': '.csv'}) self.collapsed=True class DataSourceForm(forms.ModelForm): required_css_class='required' class", "label": 0}, {"snippet_id": 43927, "code": " import By from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase", "label": 1}, {"snippet_id": 9182, "code": " third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 68170, "code": " if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt", "label": 0}, {"snippet_id": 63645, "code": "-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingIDP(self): eppn=", "label": 0}, {"snippet_id": 28322, "code": " string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the", "label": 0}, {"snippet_id": 74031, "code": " from nacl.exceptions import CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from", "label": 0}, {"snippet_id": 40819, "code": " orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response", "label": 0}, {"snippet_id": 16023, "code": " return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template(", "label": 0}, {"snippet_id": 29752, "code": ".add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get(1)] added_tags=[get_or_create_tag(db.session, tag)[0", "label": 0}, {"snippet_id": 20556, "code": " as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed", "label": 1}, {"snippet_id": 20223, "code": " removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels", "label": 0}, {"snippet_id": 75464, "code": " render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def view_abstract(request, candidate_id): candidate", "label": 0}, {"snippet_id": 13619, "code": " True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER", "label": 0}, {"snippet_id": 5179, "code": "=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users", "label": 0}, {"snippet_id": 1587, "code": " template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist:", "label": 0}, {"snippet_id": 5004, "code": "(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue", "label": 1}, {"snippet_id": 1140, "code": "% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html", "label": 0}, {"snippet_id": 79431, "code": ", extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject, body) except Exception: logging.exception(\"Error sending notification", "label": 1}, {"snippet_id": 36132, "code": ": return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self", "label": 0}, {"snippet_id": 12282, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if", "label": 0}, {"snippet_id": 35921, "code": "=Product.objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={}", "label": 0}, {"snippet_id": 14124, "code": ": context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME)", "label": 0}, {"snippet_id": 42633, "code": " 'Sorry, no result found') def test_faceted_search_renders_div(self): response=self.c.get('/find/?q=terro') self.assertNotContains(response, '<table') self.assertContains(response, '<div class=\"results", "label": 0}, {"snippet_id": 48294, "code": "(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id)", "label": 0}, {"snippet_id": 43493, "code": "\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\")))", "label": 0}, {"snippet_id": 64042, "code": " methods=['POST']) @MarshalWith(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest.", "label": 0}, {"snippet_id": 4485, "code": " authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend", "label": 0}, {"snippet_id": 63069, "code": "): self.authn('/terminate', force_authn=True) def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba' self.assertEquals(session['eduPersonPrincipalName'], eppn", "label": 0}, {"snippet_id": 183, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 31687, "code": " assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password", "label": 1}, {"snippet_id": 49823, "code": "'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(userpath", "label": 0}, {"snippet_id": 71603, "code": ".assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count", "label": 0}, {"snippet_id": 52714, "code": " channels import Group from rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework import status", "label": 1}, {"snippet_id": 76992, "code": " json import logging import re from socket import gethostname import urllib2 import urlparse import wms.ogc.common.projections as projections _LAYER_ARG_NAMES={ \"ImageryMaps\":{ \"x\": \"x\", \"y\": \"y\", \"z\":", "label": 1}, {"snippet_id": 20272, "code": ".get_message() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel", "label": 0}, {"snippet_id": 10836, "code": " password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the", "label": 0}, {"snippet_id": 78902, "code": ") datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj", "label": 0}, {"snippet_id": 66906, "code": " count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count", "label": 0}, {"snippet_id": 68421, "code": " Q, Count from.models import tweet, Hunt from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse", "label": 0}, {"snippet_id": 72813, "code": ", request.FILES) if create_position_form.is_valid(): position=create_position_form.save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors", "label": 1}, {"snippet_id": 23766, "code": " \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes", "label": 0}, {"snippet_id": 36279, "code": " self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string", "label": 0}, {"snippet_id": 33942, "code": ".objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link", "label": 0}, {"snippet_id": 84376, "code": " return HttpResponseNotAllowed(['GET']) def article_history(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki'", "label": 0}, {"snippet_id": 75001, "code": ", 'etd_app/candidate_upload.html',{'candidate': candidate, 'form': form}) def _user_keywords_changed(thesis, user_request_keywords): db_keywords_info={} for kw in thesis.keywords.all(): db_keywords_info", "label": 0}, {"snippet_id": 53818, "code": " @property def last_update_time(self) -> float: \"\"\" The last time at which the report was modified \"\"\" stdout=self.stdout_interceptor stderr=self.stderr_interceptor return max([ self._last_update_time,", "label": 0}, {"snippet_id": 59640, "code": "._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases.get(database) or{}) if table is not None: table_metadata=( (databases.get(database) or{}).get(\"tables", "label": 0}, {"snippet_id": 23316, "code": " generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string", "label": 0}, {"snippet_id": 42577, "code": ".assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find/?q=avcat') self.assertContains(response,", "label": 0}, {"snippet_id": 12197, "code": " render_to_response('student_account/login_and_register.html', context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page.", "label": 0}, {"snippet_id": 60595, "code": "): if original_response.status==404 and request.path.endswith(\"/\"): path=request.path.rstrip(\"/\") if request.query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path)", "label": 0}, {"snippet_id": 31424, "code": " TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS':[], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'django.template.context_processors.debug', 'django.template", "label": 0}, {"snippet_id": 49418, "code": ") return redirect('data_document', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required def extracted_text_edit(request, pk): doc", "label": 0}, {"snippet_id": 33550, "code": " ethylparaben_stats['dds_n'], 'There should now be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"]", "label": 0}, {"snippet_id": 68275, "code": ".objects.order_by('-datetime') keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self", "label": 0}, {"snippet_id": 35280, "code": "=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator", "label": 0}, {"snippet_id": 4194, "code": "\"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get", "label": 0}, {"snippet_id": 34189, "code": "( '//*[@id=\"id_document_type\"]')) option=doc_type_select.first_selected_option doc_type_select.select_by_visible_text(\"ingredient disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link", "label": 0}, {"snippet_id": 47998, "code": ",) script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please", "label": 0}, {"snippet_id": 72717, "code": ": user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists", "label": 1}, {"snippet_id": 52731, "code": " from django.conf import settings from realpal.apps.chat.models import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel", "label": 1}, {"snippet_id": 16076, "code": ".urls import reverse from django.utils.translation import ugettext as _ from tournament.forms import BaseGamePlayersFormset from tournament.forms import BasePlayerRoundFormset from tournament.forms import", "label": 0}, {"snippet_id": 42309, "code": " from here.') def test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by':[str(User", "label": 0}, {"snippet_id": 6892, "code": " not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token", "label": 0}, {"snippet_id": 42458, "code": "=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len", "label": 0}, {"snippet_id": 49565, "code": "'secret': 'U9ufkrhicVHrj5CGojmQ7ZCxSwytoShSgM0t9WCq0HbqcfKwL8' } } app.secret_key='fe2917b485cc985c47071f3e38273348' app.config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS']=set(['pml'", "label": 0}, {"snippet_id": 73139, "code": "', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1][ magic.from_buffer(self.cleaned_data['pdf'].read(), mime=True) ][0] if not(file_type=='.pdf'): msg=forms.ValidationError( ErrorMessages", "label": 0}, {"snippet_id": 55703, "code": " self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos", "label": 0}, {"snippet_id": 37238, "code": " script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data", "label": 0}, {"snippet_id": 66072, "code": " gi.require_version('Gtk', '3.0') import ntpath import threading class UnlockDatabase: builder=NotImplemented parent_widget=NotImplemented window=NotImplemented database_filepath=NotImplemented database_manager", "label": 0}, {"snippet_id": 59415, "code": ") \"\"\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for", "label": 0}, {"snippet_id": 70992, "code": "/body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index", "label": 0}, {"snippet_id": 79147, "code": " tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') %", "label": 0}, {"snippet_id": 39743, "code": " pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view", "label": 1}, {"snippet_id": 13535, "code": " initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if", "label": 0}, {"snippet_id": 3750, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id", "label": 0}, {"snippet_id": 3735, "code": " params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly", "label": 0}, {"snippet_id": 41209, "code": "} response=self.client.post('/extractedtext/edit/354784/', data=data, follow=True) doc=DataDocument.objects.get(pk=354784) self.assertTrue(doc.extracted, \"This document is not extracted \") page=html.fromstring", "label": 0}, {"snippet_id": 69538, "code": " since /usr/local/bin is not place, and works with sudo -E in sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of", "label": 0}, {"snippet_id": 54797, "code": " process_hwml(self): \t\tself.prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str", "label": 1}, {"snippet_id": 44351, "code": " self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_cas\"]'", "label": 0}, {"snippet_id": 16108, "code": " import PlayerRoundForm from tournament.forms import PowerAssignForm from tournament.tournament_views import get_modifiable_tournament_or_404 from tournament.tournament_views import get_visible_tournament_or_404", "label": 0}, {"snippet_id": 33247, "code": ".tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',)", "label": 0}, {"snippet_id": 26924, "code": " shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of", "label": 0}, {"snippet_id": 64322, "code": " elif 'SAMLRequest' in request.form: current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session", "label": 0}, {"snippet_id": 7829, "code": ", 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 31633, "code": " class LocaleSet(View): def get(self, request, *args, **kwargs): locale=request.GET.get('locale') resp=redirect(request.GET.get('next', request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll", "label": 1}, {"snippet_id": 21580, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True):", "label": 0}, {"snippet_id": 45136, "code": "() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": ", "label": 0}, {"snippet_id": 73089, "code": "=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText.browse submit_text=CreatePositionFormText.submit class Meta: model=Position fields=('pdf', 'url_ref') widgets={'url_ref': forms.TextInput(attrs", "label": 0}, {"snippet_id": 34671, "code": " product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values", "label": 0}, {"snippet_id": 59815, "code": " table, \"t\": type_}, ) ) if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name,", "label": 0}, {"snippet_id": 49875, "code": "(): if(not 'email' in session) and(not 'social' in session): return redirect('/login?return_url=saveAs') if 'currentFile' in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer", "label": 0}, {"snippet_id": 80858, "code": " print(f\"{'Locking' if checked else 'Unlocking'} fast piezo.\") self.lock_fast_piezo_action.setChecked(not checked) self.matisse.set_piezo_etalon_lock(checked) self.lock_fast_piezo_action.setChecked(checked)", "label": 0}, {"snippet_id": 28647, "code": " \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU\"]=(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus is not None: resources", "label": 0}, {"snippet_id": 82702, "code": "(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or", "label": 0}, {"snippet_id": 70706, "code": ", ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django", "label": 1}, {"snippet_id": 66621, "code": ") is not \"\": try: self.database_manager=DatabaseManager(self.database_filepath, composite_unlock_entry.get_text(), self.composite_keyfile_path) self.open_database_page() self.logging_manager.log_debug(", "label": 0}, {"snippet_id": 19816, "code": "._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis", "label": 1}, {"snippet_id": 36197, "code": "(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name", "label": 0}, {"snippet_id": 47515, "code": " import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models", "label": 1}, {"snippet_id": 58192, "code": " 1, onboarding.STEP_2: 1, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 1}, 100.0) ) def test_percentage_of_done(self,", "label": 1}, {"snippet_id": 43601, "code": "\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an", "label": 1}, {"snippet_id": 69760, "code": " argparser.add_argument( '--user-requirements-txt-url', help='URL to a requirements.txt file that should be installed in the user enviornment' ) argparser.add_argument( '--plugin', nargs='*', help='Plugin pip", "label": 0}, {"snippet_id": 12014, "code": " or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint", "label": 0}, {"snippet_id": 10389, "code": ".contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import", "label": 0}, {"snippet_id": 40221, "code": "=TYPE_CHOICES, blank =False, default ='EX') confidence=models.PositiveSmallIntegerField('Confidence', blank=True, validators=[ MaxValueValidator(100), MinValueValidator(1)], default=1) def __str__(self", "label": 0}, {"snippet_id": 79005, "code": ":type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model", "label": 0}, {"snippet_id": 20887, "code": "._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards=self._ray_params.num_redis_shards, redis_max_clients=self._ray_params.redis_max_clients", "label": 1}, {"snippet_id": 9212, "code": " redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value", "label": 1}, {"snippet_id": 76248, "code": " fetching tiles and composing them for the final image.\"\"\" import logging import os import StringIO import tempfile import urllib import geom import images import PIL.Image as Image import tilecalcs logger", "label": 1}, {"snippet_id": 28337, "code": " we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO", "label": 0}, {"snippet_id": 7594, "code": ".djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs", "label": 0}, {"snippet_id": 13792, "code": " address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it", "label": 0}, {"snippet_id": 50607, "code": "(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS", "label": 0}, {"snippet_id": 16865, "code": "(pk=1) data=[] if t.power_assignment==Tournament.AUTO: games=_seed_games_and_powers(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r,", "label": 0}, {"snippet_id": 63657, "code": "-relay-state', response.location) def test_logout_service_startingIDP(self): eppn='hubba-bubba' came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie", "label": 0}, {"snippet_id": 26611, "code": " check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type(", "label": 0}, {"snippet_id": 34936, "code": "\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line))", "label": 0}, {"snippet_id": 71028, "code": "(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def", "label": 0}, {"snippet_id": 82860, "code": "% self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self)", "label": 1}, {"snippet_id": 53000, "code": "() self.view=UserUpdateView() request=self.factory.get('/fake-url') request.user=self.user self.view.request=request def test_get_success_url(self): self.assertEqual( self.view.get_success_url(), '/users", "label": 0}, {"snippet_id": 72635, "code": ")[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent=send_mail", "label": 1}, {"snippet_id": 13716, "code": ": 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter", "label": 0}, {"snippet_id": 15618, "code": ") sub_form.input_source_final.data=command.get('input_source_final', '') for index, command in enumerate(get_command('change_input_series_all_models')): sub_form=form.change_input_series_all_models[index", "label": 0}, {"snippet_id": 35715, "code": " classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count'", "label": 0}, {"snippet_id": 29677, "code": ".show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items: return render_template('show.html', post=post, form=CommentForm(", "label": 1}, {"snippet_id": 55610, "code": ".join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef __init__(self,path): \t\tsuper", "label": 0}, {"snippet_id": 58390, "code": ": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" } }, onboarding.CREATE_COURSE:{ \"done\": True, \"settings\":{ \"html\": \"<p>create_course</p>\", \"description\"", "label": 1}, {"snippet_id": 52187, "code": "=\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored", "label": 0}, {"snippet_id": 22141, "code": "): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If", "label": 0}, {"snippet_id": 49377, "code": " qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit", "label": 0}, {"snippet_id": 71066, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"", "label": 0}, {"snippet_id": 1825, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 69242, "code": " authenticators do not have conda-forge packages, but do have pip packages. Keeping all python packages in the hub environment be installed with pip prevents accidental mixing of python and conda packages", "label": 0}, {"snippet_id": 65532, "code": ") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug( \"File selected: \" +filechooser_opening_dialog", "label": 0}, {"snippet_id": 17903, "code": ".current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!</strong> Incorrect password.'), 'danger') return flask.redirect('/profile') user.email=form.email.data flask", "label": 0}, {"snippet_id": 75415, "code": ") @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate", "label": 0}, {"snippet_id": 52454, "code": " open_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() user_id=session.get(\"user_id\") results={\"userId\": user_id, \"pOwnerId\": project_object.user_id, \"pTitle", "label": 0}, {"snippet_id": 11859, "code": " import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import", "label": 0}, {"snippet_id": 65025, "code": "=comp.left right=comp.comparators[0] left_valid=False if type(left)==ast.Call: if type(left.func)==ast.Name and left.func.id==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str, ast", "label": 0}, {"snippet_id": 51066, "code": "\"+\"): name=name[1:] self._disabled_options.discard(name) self._enabled_options.add(name) elif name.startswith(\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else", "label": 0}, {"snippet_id": 55181, "code": "\t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn FSPath(os.path.realpath(self.path)) \tdef relpath(self,start=None): \t\tif", "label": 0}, {"snippet_id": 81677, "code": "(hours=-24)) > datetime.now() and event_type=='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for", "label": 0}, {"snippet_id": 31448, "code": ".context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='gitmate.wsgi.application' DATABASES={ 'default':{ 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME", "label": 0}, {"snippet_id": 22858, "code": "' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so", "label": 0}, {"snippet_id": 60208, "code": " not None, \"templates\": p[\"templates_path\"] is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size", "label": 0}, {"snippet_id": 26920, "code": " ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the", "label": 0}, {"snippet_id": 39686, "code": "=False), self, 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs", "label": 0}, {"snippet_id": 1567, "code": "> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable", "label": 0}, {"snippet_id": 58805, "code": ", request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user.email) ) class Invite(models.Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey(User, blank", "label": 0}, {"snippet_id": 16503, "code": "(sitters): rp=form.cleaned_data['sitter_%d' % i] if rp: rp.game_count=0 rp.save() for i in range(doubles): rp=form.cleaned_data['double_%d' % i] if rp: rp.game_count=2 rp.save() return HttpResponseRedirect", "label": 0}, {"snippet_id": 39946, "code": " DSSToxLookup from.extracted_text import ExtractedText from model_utils.managers import InheritanceManager from django.apps import apps from django.db.models.signals import pre_save from django.dispatch import", "label": 1}, {"snippet_id": 72727, "code": " is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed", "label": 1}, {"snippet_id": 80859, "code": "\nimport sys from contextlib import redirect_stdout from gui import ControlApplication sys.argv.append('USB0::0x17E7::0x0102::07-40-01::INSTR') sys.argv.append('COM5') print(sys.argv) exit_code=ControlApplication", "label": 1}, {"snippet_id": 48335, "code": ": data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource", "label": 0}, {"snippet_id": 75252, "code": ": person_form=CommitteeMemberPersonForm() committee_member_form=CommitteeMemberForm() context={'candidate': candidate, 'person_form': person_form, 'committee_member_form': committee_member_form} return", "label": 0}, {"snippet_id": 80983, "code": " registration in event.registration_ids: for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing registration, set state to cancelled.') registration.state='cancel'", "label": 0}, {"snippet_id": 5467, "code": ".user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): ", "label": 0}, {"snippet_id": 64049, "code": "(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest. \"\"\" eppn=session.get('user_eppn') if", "label": 0}, {"snippet_id": 14059, "code": " \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline", "label": 0}, {"snippet_id": 20967, "code": " process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self", "label": 0}, {"snippet_id": 82482, "code": " is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\"", "label": 0}, {"snippet_id": 1846, "code": ": continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath", "label": 1}, {"snippet_id": 52372, "code": "\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id) return \"HTTP-status-code: 200\" @app.route(\"/add-to-board\", methods=[\"POST\"]", "label": 0}, {"snippet_id": 57839, "code": " onboarding.NEXT_STEPS: ONBOARDING_STEPS_DEFAULT_TEMPLATE } def get_onboarding_setting(setting_name): \"\"\" Return settings for the certain `settings_name` If it does not exist take default settings and save it", "label": 0}, {"snippet_id": 49375, "code": " def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True)", "label": 0}, {"snippet_id": 31857, "code": ":has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote'", "label": 1}, {"snippet_id": 50658, "code": "() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode) return eval(stdout.strip()) def default_platform(): if platform.system()=='Windows': return 'Windows-x86' if platform", "label": 0}, {"snippet_id": 19037, "code": " infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class", "label": 1}, {"snippet_id": 20038, "code": " belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string", "label": 0}, {"snippet_id": 58681, "code": " import uuid4 from django.db import models from django.db.models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib.auth.models", "label": 0}, {"snippet_id": 60630, "code": " message=exception.args[0] elif isinstance(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info=exception.error_dict", "label": 0}, {"snippet_id": 51277, "code": ".txt'), logfile=sys.stdout) def fetch_dependencies(self, *dependencies, **kwargs): kwargs=process_kwargs( \"fetch_dependencies\", kwargs, {\"platform\":None}) dependencies=flatten_string_list(dependencies)", "label": 0}, {"snippet_id": 13735, "code": " limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user", "label": 0}, {"snippet_id": 66117, "code": "=filepath self.unlock_database() def unlock_database(self): self.builder=Gtk.Builder() self.builder.add_from_resource(\"/run/terminal/KeepassGtk/unlock_database.ui\") self.set_headerbar() self.assemble_stack", "label": 0}, {"snippet_id": 84446, "code": " revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='POST':", "label": 0}, {"snippet_id": 46719, "code": "'document_type'] if line['filename']=='': errors.append([count,\"Filename can't be empty!\"]) continue if len(line['filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename", "label": 0}, {"snippet_id": 975, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 11562, "code": " This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next", "label": 0}, {"snippet_id": 52502, "code": "'POST']) def save_updated_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() checked_lst=request.form.get(\"completion\") updated_notes=request.form.get(", "label": 0}, {"snippet_id": 3712, "code": ", 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing", "label": 0}, {"snippet_id": 54983, "code": ".html \tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor", "label": 0}, {"snippet_id": 78370, "code": " user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({", "label": 0}, {"snippet_id": 25174, "code": " for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \"", "label": 0}, {"snippet_id": 46267, "code": "=ext if(ext_child==ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean() good_records", "label": 0}, {"snippet_id": 63111, "code": " self.assertTrue(now -then < 5) self.acs('/chpass', eppn, _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-termination', session)", "label": 0}, {"snippet_id": 39316, "code": ".ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank])", "label": 0}, {"snippet_id": 31915, "code": " enum import Enum def main(): sh=Shell() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd", "label": 0}, {"snippet_id": 62227, "code": "(page, 'no-cache') def validate_nostore(page): return validate_cache_control_header(page, 'no-store') def validate_notransform(page): return validate_cache_control_header(page, 'no-transform') def validate_private", "label": 0}, {"snippet_id": 14147, "code": "=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): ", "label": 0}, {"snippet_id": 8365, "code": " current_provider.skip_registration_form: context[\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg", "label": 0}, {"snippet_id": 10535, "code": " signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from", "label": 0}, {"snippet_id": 14501, "code": " user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from", "label": 0}, {"snippet_id": 80357, "code": ") self.restart_action.triggered.connect(self.restart) self.set_wavelength_action.triggered.connect(self.set_wavelength_dialog) self.set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog", "label": 0}, {"snippet_id": 29286, "code": ") return app def register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'", "label": 0}, {"snippet_id": 69456, "code": " Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0.0.1') return", "label": 0}, {"snippet_id": 13262, "code": " reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators", "label": 0}, {"snippet_id": 711, "code": "<h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}", "label": 0}, {"snippet_id": 70998, "code": " of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n", "label": 0}, {"snippet_id": 17555, "code": " response @bp.route('/register', methods=['GET', 'POST']) def register(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST", "label": 0}, {"snippet_id": 432, "code": " used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse", "label": 0}, {"snippet_id": 37718, "code": "*kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit();' }) def include_extract_form", "label": 0}, {"snippet_id": 69080, "code": "\"Cannot disable configurable-http-proxy...\") try: systemd.uninstall_unit('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot uninstall configurable-http-proxy..", "label": 0}, {"snippet_id": 26192, "code": " \"\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address, stdout_file", "label": 0}, {"snippet_id": 73947, "code": "(\"id\")) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request", "label": 0}, {"snippet_id": 26064, "code": "=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes", "label": 1}, {"snippet_id": 65653, "code": ")): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/override_dialog.ui\") self.override_dialog=builder.get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent", "label": 0}, {"snippet_id": 28527, "code": " return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs.", "label": 0}, {"snippet_id": 11820, "code": " login_required from django.core.urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from", "label": 0}, {"snippet_id": 75539, "code": "=get_object_or_404(Candidate, id=candidate_id) if candidate.person.netid !=request.user.username: if not request.user.has_perm('etd_app.change_candidate'): return HttpResponseForbidden('You don\\'t have permission", "label": 0}, {"snippet_id": 32017, "code": ": ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum", "label": 0}, {"snippet_id": 31116, "code": "=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\"", "label": 0}, {"snippet_id": 3861, "code": " that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full", "label": 0}, {"snippet_id": 477, "code": ", gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views", "label": 0}, {"snippet_id": 31792, "code": "\nimport pytest from django.shortcuts import reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code", "label": 1}, {"snippet_id": 20930, "code": "=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password", "label": 1}, {"snippet_id": 79470, "code": ".chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request. The function checks the access rights of the user before creating the data request.", "label": 0}, {"snippet_id": 41742, "code": "'Type of DataGroup needs to be \"composition\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename", "label": 0}, {"snippet_id": 70776, "code": ". You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create", "label": 0}, {"snippet_id": 11459, "code": "().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render", "label": 0}, {"snippet_id": 36273, "code": "=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum", "label": 0}, {"snippet_id": 70810, "code": ".lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path", "label": 1}, {"snippet_id": 32441, "code": ": return None def redirections(self): redirs=[] redir=self.redirection() while redir: redirs.append(redir) redir=self.redirection() if len(redirs) > 0: return RedirectionsHelper(redirs) else: return None", "label": 0}, {"snippet_id": 41830, "code": ".get(f'/datagroup/{pk}/') self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.gt.code='UN' self.objects.gt.save()", "label": 0}, {"snippet_id": 72824, "code": "'errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition", "label": 1}, {"snippet_id": 15904, "code": " rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password.errors.append(", "label": 0}, {"snippet_id": 31751, "code": "=302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions", "label": 1}, {"snippet_id": 52556, "code": " redirect(\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST']) def invite_new_teammates(team_id): \"\"\" \"\"\" team_object=Team.query.filter_by(t_id=team_id).first() emails_lst=request.form", "label": 0}, {"snippet_id": 37222, "code": "', 'CP']: del self.fields['weight_fraction_type'] self.collapsed=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects", "label": 0}, {"snippet_id": 55645, "code": ".items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t", "label": 0}, {"snippet_id": 39535, "code": " if self.raw_chem_name else '' def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url() def get_extractedtext(self): return self.extracted_cpcat.extractedtext_ptr @property", "label": 0}, {"snippet_id": 3489, "code": "=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self", "label": 0}, {"snippet_id": 14283, "code": "+'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for", "label": 0}, {"snippet_id": 59857, "code": " or self.metadata(\"license\"), \"license_url\": metadata.get(\"license_url\") or self.metadata(\"license_url\"), \"about\": metadata.get(\"about\") or self.metadata(\"about\"), \"about_url\": metadata.get(\"about_url\")", "label": 0}, {"snippet_id": 42186, "code": " span='<span class=\"oi oi-trash\"></span>' self.assertIn(span, response, 'Trash button should be present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url", "label": 0}, {"snippet_id": 84684, "code": "'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, *", "label": 0}, {"snippet_id": 6064, "code": ") return response def before_request(self): g.oidc_id_token=None self.authenticate_or_redirect() def authenticate_or_redirect(self): \"\"\" Helper function suitable for @app.before_request and @check(below", "label": 0}, {"snippet_id": 3758, "code": " 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 11711, "code": "), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(", "label": 0}, {"snippet_id": 33256, "code": " list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType", "label": 0}, {"snippet_id": 58297, "code": ">instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" }", "label": 0}, {"snippet_id": 32389, "code": " other=self.commands() if base and other: return DoubleNode(base, other) else: return other else: return base def command(self): if self.accept(TokenType.WORD): command=self.last.lexeme args=[] while self", "label": 0}, {"snippet_id": 51730, "code": ", SI: genSI, CSRF: genCSRF, OR: genOR, SSCI: genSSCI, SCI: genSCI } class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')", "label": 0}, {"snippet_id": 59147, "code": ".email) if invite_domain !=user_domain: continue res=re.search( \"^{}@{}$\".format(r\"\\.?\".join(user_email_name), user_domain), \"{}@{}\".format(invite_email, invite_domain) ) if res and res.string: my_invite", "label": 0}, {"snippet_id": 41414, "code": " data document. ''' for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd) child_formset=ChildForm(instance=et) for form in child_formset.forms: if dd", "label": 0}, {"snippet_id": 18614, "code": " the database with the \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument exists, returns None or the error message. \t\"\"\" \tdef check_database(self):", "label": 1}, {"snippet_id": 14343, "code": " def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 73725, "code": " create_position_form.is_valid(): position=dictionary.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form'", "label": 0}, {"snippet_id": 27752, "code": " after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start", "label": 1}, {"snippet_id": 76741, "code": " parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\"", "label": 0}, {"snippet_id": 33388, "code": " fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard def setUp(self): self.client=Client() def test_dtxsid_pucs_n(self): dtxs=[\"DTXSID9022528\"", "label": 0}, {"snippet_id": 27073, "code": " If provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory", "label": 0}, {"snippet_id": 83490, "code": " if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision( self.old_content, self.old_title, self.old_markup, comment, editor_ip, editor", "label": 0}, {"snippet_id": 68913, "code": "/kcmYBsLCCI5uSEP6JJRQQhHrCvOX0UaytItfsQfLm EYRd2F72o1yGh3yvWWfDIBXRmaBuIGXGpajC0JyBGSOWb9UxMNZY/2LJEwARAQAB tB9Ob2RlU291cmNlIDxncGdAbm9kZXNvdXJjZS5jb20+iQI4BBMBAgAiBQJTmyS2 AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAWVaCraFdigHTmD/9OKhUy jJ", "label": 0}, {"snippet_id": 68505, "code": "(PaginationMixin, ListView): template_name='twitter_hunter/tweets.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context", "label": 0}, {"snippet_id": 38336, "code": " CommonInfo from.data_source import DataSource from.group_type import GroupType from.data_group import DataGroup from.document_type import DocumentType from.data_document import DataDocument from.ingredient", "label": 0}, {"snippet_id": 82068, "code": "=category) created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success-url-view', kwargs={'pk': created.pk})) return", "label": 0}, {"snippet_id": 51904, "code": ") session[\"new_user\"]=True flash(\"Account created!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"", "label": 0}, {"snippet_id": 32997, "code": "'num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self).get_changeform_initial_data(request) get_data['last_edited_by']=request.user.pk return get_data def", "label": 0}, {"snippet_id": 27246, "code": ", object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory", "label": 1}, {"snippet_id": 47442, "code": "}) @login_required() def data_source_update(request, pk, template_name=('data_source/' 'datasource_form.html')): datasource=get_object_or_404(DataSource, pk=pk) form=DataSourceForm(request.POST or None", "label": 0}, {"snippet_id": 9505, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata.", "label": 0}, {"snippet_id": 33817, "code": " from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select", "label": 0}, {"snippet_id": 28874, "code": "=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def", "label": 0}, {"snippet_id": 52657, "code": "=session.get(\"user_id\") projects_objects=q.get_projects_by_user(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]) def logout_user(): \"\"", "label": 0}, {"snippet_id": 33477, "code": "=puc, puc_assigned_usr=User.objects.get(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(1, ethylparaben_stats['pucs_n", "label": 0}, {"snippet_id": 64879, "code": " argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument('-t', ", "label": 0}, {"snippet_id": 9335, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html',", "label": 0}, {"snippet_id": 60495, "code": " \"metadata.json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app", "label": 0}, {"snippet_id": 12707, "code": "/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset", "label": 0}, {"snippet_id": 79199, "code": " ckan.lib.helpers as helpers import ckan.lib.mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator", "label": 0}, {"snippet_id": 52266, "code": "\"team_id\"]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a", "label": 0}, {"snippet_id": 82091, "code": ": form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs", "label": 0}, {"snippet_id": 5084, "code": ": \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 21328, "code": " We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this", "label": 0}, {"snippet_id": 44211, "code": "=\"edit\"]')[1].click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), ds_detail_url, \"User should go back to detail view when clicking cancel\") dg_detail_url", "label": 0}, {"snippet_id": 59050, "code": " invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404(user, ", "label": 0}, {"snippet_id": 77436, "code": "(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations", "label": 0}, {"snippet_id": 34588, "code": "=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if", "label": 0}, {"snippet_id": 61343, "code": ": Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues", "label": 0}, {"snippet_id": 24274, "code": " profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\"", "label": 0}, {"snippet_id": 38200, "code": ".is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is", "label": 0}, {"snippet_id": 60492, "code": " JsonDataView.as_view(self, \"metadata.json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format", "label": 0}, {"snippet_id": 84337, "code": " if int(revision) is not int(revision_from) +1: from_value=revision_from template_params={'article': article, 'article_title': article.title, 'changeset': changeset, 'differences': changeset.compare_to", "label": 0}, {"snippet_id": 81788, "code": " def post(self, request, *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create", "label": 0}, {"snippet_id": 39691, "code": " nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"", "label": 0}, {"snippet_id": 417, "code": " header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 67055, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() filehash=self.kwargs['pk'] vt=VT() context['vt_hash']=vt.getFileReport(filehash) context['vt_behavior']", "label": 0}, {"snippet_id": 32123, "code": "[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is", "label": 0}, {"snippet_id": 55217, "code": ".relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self):", "label": 0}, {"snippet_id": 30651, "code": " if 'username' not in login_session: return render_template('publicgrudgets.html', grudgets=grudgets) else: return render_template('grudgets.html', grudgets=grudgets) @app.route('/grudget/new/', methods", "label": 0}, {"snippet_id": 18922, "code": "\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\"", "label": 1}, {"snippet_id": 83835, "code": " is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles,", "label": 0}, {"snippet_id": 73503, "code": "('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) send_mail(", "label": 0}, {"snippet_id": 36762, "code": "\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count", "label": 0}, {"snippet_id": 80487, "code": " self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception(*sys.exc_info())) desired_width=min(max([len(line) for line in stack]), 185) description=stack.pop()", "label": 0}, {"snippet_id": 32569, "code": " execute(self, builtins): ''' Execute the node. Args: builtins: A dict of builtin commands. ''' pass def wait(self): ''' Wait for the execution of the node to finish. ''' pass class DoubleNode(Node): '''", "label": 0}, {"snippet_id": 60006, "code": "._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) ", "label": 0}, {"snippet_id": 40872, "code": "'product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save()", "label": 0}, {"snippet_id": 9536, "code": "'data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False", "label": 0}, {"snippet_id": 47268, "code": ".objects.all() ds_list, frm_list=[],[] for ds in datasources: frm_list.append(PriorityForm(request.POST or None, instance=ds)) registered=Count('datagroup__datadocument') uploaded =Count('datagroup__datadocument", "label": 0}, {"snippet_id": 69848, "code": " parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False):", "label": 0}, {"snippet_id": 58207, "code": ") def test_percentage_of_done(self, steps, result, mock): _mock=mock.return_value _mock.find_one.return_value=steps self.assertEqual(get_onboarding_percentage(1), result) @mock.patch('core.common.utils", "label": 0}, {"snippet_id": 4705, "code": " account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 26919, "code": " the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping", "label": 0}, {"snippet_id": 10108, "code": " params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are", "label": 0}, {"snippet_id": 30890, "code": " grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return render_template('showgrudge.html', grudges=grudges, id=grudget_id, grudget=grudget, creator=creator) @app.route('/grudget/<int", "label": 0}, {"snippet_id": 12056, "code": "( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass", "label": 1}, {"snippet_id": 2468, "code": ".listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)", "label": 0}, {"snippet_id": 6179, "code": " require_login(self, view_func): \"\"\" Use this to decorate view functions if only some of your app's views require authentication. \"\"\" @wraps(view_func) def decorated(*args, **kwargs): if g.oidc_id_token is None:", "label": 0}, {"snippet_id": 54102, "code": " politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route", "label": 0}, {"snippet_id": 79127, "code": "['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST", "label": 0}, {"snippet_id": 35252, "code": ".exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource': ds, 'products': products}) @login_required() def", "label": 0}, {"snippet_id": 381, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about.", "label": 0}, {"snippet_id": 69566, "code": ", 'bin', 'tljh-config') tljh_config_dest='/usr/bin/tljh-config' if os.path.exists(tljh_config_dest): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config", "label": 0}, {"snippet_id": 8804, "code": " Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 10093, "code": "(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the", "label": 0}, {"snippet_id": 60441, "code": ".ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath", "label": 0}, {"snippet_id": 47460, "code": "=DataSourceForm(request.POST or None, instance=datasource) if form.is_valid(): if form.has_changed(): form.save() return redirect('data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None", "label": 0}, {"snippet_id": 39734, "code": "): if hasattr(self, 'extractedcpcat'): return self.extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check", "label": 1}, {"snippet_id": 78707, "code": ".user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']", "label": 0}, {"snippet_id": 35544, "code": "(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(", "label": 0}, {"snippet_id": 82488, "code": " as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes", "label": 0}, {"snippet_id": 49332, "code": "(request.POST or None, instance=extracted_list_presence) if tag_form.is_valid(): tag_form.save() return redirect(referer, pk=pk) @login_required() def data_document_delete(request, pk, template_name='data_source", "label": 0}, {"snippet_id": 30384, "code": "']=gplus_id userinfo_url=\"https://www.googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json", "label": 0}, {"snippet_id": 68228, "code": " import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name='twitter/index.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context", "label": 0}, {"snippet_id": 19941, "code": ".primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry", "label": 0}, {"snippet_id": 10466, "code": " from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers", "label": 0}, {"snippet_id": 16631, "code": " round_number): \"\"\"Return a GameSeeder that knows about the tournament so far\"\"\" tourney_players=tournament.tournamentplayer_set.all() seeder=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10) for", "label": 0}, {"snippet_id": 11249, "code": "(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{", "label": 0}, {"snippet_id": 54403, "code": ".search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp \"\"\"News articles from various news sources Format: JSON \"\"\"", "label": 0}, {"snippet_id": 76717, "code": ", _TILE_PIXEL_SIZE)) tiles_array.AddImage(rel_tile_col, rel_tile_row, im_tile) return tiles_array def _SetTransPixelToBgcolor(tile, bgcolor): \"\"\"Set the transparent pixels to bgcolor. Args: tile: Tile as", "label": 0}, {"snippet_id": 31887, "code": " positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse(", "label": 1}, {"snippet_id": 15364, "code": "(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append({'command': field.name, 'include': field", "label": 0}, {"snippet_id": 53982, "code": ". :return: A dom string for the current state of the print buffer contents \"\"\" try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text", "label": 1}, {"snippet_id": 54823, "code": "*50 \t\t\t\tprint item \t\t\t\tprint \"=\"*50 \t\t\t\tanother_count_by_groups +=1 \t\t\t\tprint \"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing() \t\t \t\tproblem_text_students", "label": 1}, {"snippet_id": 84741, "code": " **article_args) if notification.is_observing(article, request.user): notification.stop_observing(article, request.user) return redirect(article) def article_preview(request): \"\"\"This is a AJAX function", "label": 0}, {"snippet_id": 20185, "code": " def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries", "label": 0}, {"snippet_id": 48188, "code": ".db.models import Max class FilteredLabelWidget(LabelWidget): def tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False", "label": 1}, {"snippet_id": 60828, "code": " if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self.pid) if", "label": 0}, {"snippet_id": 39327, "code": ".PositiveIntegerField(\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length=100, null=True, blank=True) def __str__(self", "label": 0}, {"snippet_id": 23, "code": "( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date", "label": 1}, {"snippet_id": 22528, "code": "): Optionally, a dictionary can be passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will", "label": 0}, {"snippet_id": 45299, "code": ".filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc('created_at', 'month', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product", "label": 0}, {"snippet_id": 14691, "code": "\"\" board_cfg=board_config.BoardConfig() node=_get_node(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect.start() print 'Press Ctrl+C to stop' signal.pause(", "label": 1}, {"snippet_id": 25013, "code": ".ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn", "label": 0}, {"snippet_id": 2530, "code": " is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len", "label": 0}, {"snippet_id": 76222, "code": "=re.sub(ending +'$', '.html', path) return self.get_full_path( filename=to, language=language, version_slug=version_slug, ) def redirect_sphinx_htmldir(self, path, language=None, version_slug=None): if", "label": 0}, {"snippet_id": 45336, "code": ".insert(i,{'product_count': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the", "label": 0}, {"snippet_id": 8584, "code": " cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number", "label": 0}, {"snippet_id": 52435, "code": "(new_project) flash(\"New a new{} has been added to your board!\".format(phase_code)) return redirect(\"/view-team\") @app.route(\"/view-details/<int:project_id>\", methods=['GET']) def open_project_details(project_id)", "label": 0}, {"snippet_id": 15784, "code": " view_run_add(field): run_form=get_run_form() run_form[field].append_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template", "label": 0}, {"snippet_id": 10290, "code": "( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url", "label": 0}, {"snippet_id": 5202, "code": ".\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response", "label": 0}, {"snippet_id": 7580, "code": " openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 80871, "code": ".argv.append('COM5') print(sys.argv) exit_code=ControlApplication.EXIT_CODE_RESTART while exit_code==ControlApplication.EXIT_CODE_RESTART: gui=ControlApplication([]) with redirect_stdout(gui.log_stream", "label": 1}, {"snippet_id": 59775, "code": " queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} query=queries.get(query_name) if query: if not isinstance(query, dict): query={\"sql\": query} query[\"name\"]=query_name return", "label": 0}, {"snippet_id": 74647, "code": "']=request.META.get('Shibboleth-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise", "label": 0}, {"snippet_id": 8943, "code": ". \"\"\" import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 28607, "code": " requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is", "label": 0}, {"snippet_id": 64712, "code": "': score, 'deductions': deductions})) def dock_points(deductions, points, reason): deductions.append({'points': points, 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj,", "label": 0}, {"snippet_id": 17053, "code": " the_round=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError", "label": 0}, {"snippet_id": 21291, "code": " will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill", "label": 0}, {"snippet_id": 31873, "code": ":vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create", "label": 1}, {"snippet_id": 9593, "code": ": \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request", "label": 0}, {"snippet_id": 3537, "code": "/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 35691, "code": ") product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr", "label": 0}, {"snippet_id": 10346, "code": ".has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins,", "label": 0}, {"snippet_id": 76424, "code": " pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int(column * _TILE_PIXEL_SIZE), int(row * _TILE_PIXEL_SIZE), int", "label": 0}, {"snippet_id": 59769, "code": " def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} query=queries.get(query_name) if query: if not isinstance(query, dict", "label": 0}, {"snippet_id": 84268, "code": " group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method", "label": 0}, {"snippet_id": 31922, "code": ".run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell. ''", "label": 0}, {"snippet_id": 48075, "code": " context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc.html'): hnp=get_object_or_404(ExtractedHabitsAndPractices, pk=pk,) form=HabitsPUCForm(", "label": 0}, {"snippet_id": 79384, "code": ".title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids", "label": 1}, {"snippet_id": 30195, "code": "=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']) def gconnect(): if request.args.get('state') !=login_session['state']: response=make_response(json.dumps", "label": 1}, {"snippet_id": 76089, "code": "=getattr( self, 'redirect_{type}'.format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None)", "label": 0}, {"snippet_id": 1887, "code": " not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 16968, "code": "=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(the_round=r, initial=data) context={'tournament': t, 'round': r, 'games': games, 'formset': formset} return render(request, 'rounds/seeded_games.html', context", "label": 0}, {"snippet_id": 9276, "code": "'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link", "label": 0}, {"snippet_id": 58006, "code": " data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils import send_email, get_onboarding_percentage", "label": 0}, {"snippet_id": 20631, "code": " from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit", "label": 0}, {"snippet_id": 18122, "code": " on domains in \"+input_file+\" with output file, \"+output_file+\" --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read", "label": 0}, {"snippet_id": 39976, "code": ": extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name", "label": 1}, {"snippet_id": 71409, "code": " strategy_class=self._load_strategy(provider) resp=req.get_response(strategy_class(self.app, self._config)) if resp.request is None: resp.request=req if resp is None: resp=req.get_response(self.app) resp", "label": 0}, {"snippet_id": 72713, "code": "._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: account_key=request.GET.get('key'", "label": 1}, {"snippet_id": 53380, "code": ": exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except UserAbortError: out=None except Exception as error: out=render_error(project, error) set_executing(False", "label": 0}, {"snippet_id": 79029, "code": ", context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) validator.validate_datarequest_closing", "label": 0}, {"snippet_id": 34387, "code": "'The qa_checked attribute should be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324 ", "label": 0}, {"snippet_id": 21926, "code": " for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the", "label": 0}, {"snippet_id": 34918, "code": ".multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode", "label": 0}, {"snippet_id": 79087, "code": "'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights will", "label": 1}, {"snippet_id": 55643, "code": "=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items", "label": 0}, {"snippet_id": 6310, "code": ": http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non-trusted issuer", "label": 0}, {"snippet_id": 84829, "code": " content_type='text/html') def backlinks(request, title): \"\"\"Simple text search for links in other wiki articles pointing to the current article. If we convert WikiWords to markdown wikilinks syntax, this", "label": 0}, {"snippet_id": 4723, "code": ": 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params)", "label": 0}, {"snippet_id": 6081, "code": ".before_request and @check(below). Sets g.oidc_id_token to the ID token if the user has successfully authenticated, else returns a redirect object so they can go try to authenticate. :return: A redirect, or", "label": 0}, {"snippet_id": 80677, "code": ".set_bifi_motor_pos(target_pos) @handled_slot(bool) def set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position", "label": 0}, {"snippet_id": 10176, "code": " Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer'", "label": 0}, {"snippet_id": 27926, "code": ".) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred", "label": 0}, {"snippet_id": 10829, "code": " student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully", "label": 0}, {"snippet_id": 75744, "code": ": import traceback logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list(r.json()['response']['docs'], index) if select2_results", "label": 0}, {"snippet_id": 53220, "code": " Http404 from django.views.generic.simple import direct_to_template from oi.projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects", "label": 1}, {"snippet_id": 75937, "code": "=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301,", "label": 0}, {"snippet_id": 26472, "code": " process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None", "label": 0}, {"snippet_id": 44023, "code": ".browser.quit() def test_hem(self): for i in range(27): ds=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url) row_count=len(self.browser", "label": 0}, {"snippet_id": 7867, "code": ".loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) },", "label": 0}, {"snippet_id": 39693, "code": ": nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document", "label": 0}, {"snippet_id": 67049, "code": " DetailView(TemplateView): template_name='filehash/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() filehash=self.kwargs[", "label": 0}, {"snippet_id": 44740, "code": " except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError", "label": 0}, {"snippet_id": 74278, "code": " False def _passphrase_next_url(self, request): next_url=None if \"next\" in request.GET: if re.search(r\"^/[\\W/-]*\", request.GET[\"next\"]): next_url=request.GET[\"next\"] return next_url def dispatch(self, request", "label": 1}, {"snippet_id": 40679, "code": "=self.objects.puc puc_line=(p.gen_cat +',' +p.prod_fam +',' +p.prod_type +',' +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual", "label": 1}, {"snippet_id": 33790, "code": "'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc", "label": 1}, {"snippet_id": 28595, "code": " runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was", "label": 0}, {"snippet_id": 54805, "code": "=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str(book_edition)+\" on problem \"+problem_number \t\t\tfor item in value: \t\t\t\tprint ", "label": 1}, {"snippet_id": 22836, "code": " not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key'", "label": 0}, {"snippet_id": 46802, "code": "['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group=datagroup) doc.save() text.append(str(doc.pk)+','+','.join(line.values())+'\\n')", "label": 0}, {"snippet_id": 26066, "code": ".huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes", "label": 1}, {"snippet_id": 35631, "code": "'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request", "label": 0}, {"snippet_id": 6796, "code": ") return redirect(url_for('main.index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user.generate_confirmation_token() send_email(current_user.email, 'Confirm Your", "label": 0}, {"snippet_id": 42890, "code": "(group_count==1) self.assertTrue(scr.qa_begun) new_group=QAGroup.objects.get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group) response=self.client.get(f", "label": 0}, {"snippet_id": 55666, "code": "\t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path", "label": 0}, {"snippet_id": 60008, "code": " \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3", "label": 0}, {"snippet_id": 43162, "code": ".raw_cas.encode(), response.content) elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged.raw_cas.encode(), response.content) def test_every_extractedtext_qa(self): for et in", "label": 0}, {"snippet_id": 67106, "code": " count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=filehash)).order_by('-timestamp') count=context['attributes']", "label": 0}, {"snippet_id": 68858, "code": " HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs", "label": 0}, {"snippet_id": 57569, "code": "'next_steps' STEP_8='invite_somebody' INTRODUCTION_COURSE_ID='introduction_course_id' VIEW_INTRODUCTION=STEP_1 INTRODUCTION_INTRO=STEP_2 CREATE_COURSE=STEP_3 CREATE_COURSELET=STEP_4 CREATE_THREAD=STEP_5", "label": 1}, {"snippet_id": 52268, "code": " team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update", "label": 0}, {"snippet_id": 74318, "code": ".access_granted or self.access_form_valid: return super().dispatch(request, *args, **kwargs) else: return self._render_access_form() def _get_access_form(self): form_kwargs=self.get_form_kwargs() form_kwargs.update", "label": 0}, {"snippet_id": 81225, "code": " fields, models, api _logger=logging.getLogger(__name__) class FitEvent(models.Model): _name='event.event' _inherit=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating", "label": 0}, {"snippet_id": 53021, "code": ") def test_get_object(self): self.assertEqual( self.view.get_object(), self.user ) def test_updating_user_info(self): update_url=reverse('users:update') data={ 'purchase_step_form':{'purchase_step': PS_DAP", "label": 0}, {"snippet_id": 36607, "code": " prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save() response=self", "label": 0}, {"snippet_id": 76802, "code": "[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green, blue, alpha)=pixdata[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata[row, col]=(red, green, blue", "label": 0}, {"snippet_id": 68835, "code": " import time from urllib.error import HTTPError from urllib.request import urlopen, URLError import pluggy from tljh import( apt, conda, hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR", "label": 0}, {"snippet_id": 12207, "code": ") def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The", "label": 0}, {"snippet_id": 47129, "code": " ExtractedTextForm, HPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST or None, instance=extext, prefix='habits') context", "label": 0}, {"snippet_id": 59217, "code": ".exceptions import InvalidUsage, NotFound from.views.base import( DatasetteError, ureg ) from.views.database import DatabaseDownload, DatabaseView from.views.index import IndexView from.views.special import", "label": 0}, {"snippet_id": 63900, "code": ".get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len(idps)==1 idp=idps.keys()[0] idp=request.args.get('idp', idp", "label": 1}, {"snippet_id": 82716, "code": " running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null", "label": 0}, {"snippet_id": 19590, "code": ": \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames(", "label": 0}, {"snippet_id": 24134, "code": " to import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen", "label": 1}, {"snippet_id": 13888, "code": " Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if", "label": 0}, {"snippet_id": 3678, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location", "label": 1}, {"snippet_id": 40235, "code": "(1)], default=1) def __str__(self): return str(self.title) def get_absolute_url(self): return reverse('extraction_script_edit', kwargs={'pk': self.pk}) def get_datadocument_count(self): return DataDocument", "label": 0}, {"snippet_id": 15220, "code": "], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) delta=FloatField('New Value',[validators.required()]) class RunForm(FlaskForm): start_day=DateField", "label": 0}, {"snippet_id": 70668, "code": ".group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return", "label": 0}, {"snippet_id": 33014, "code": "=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self,", "label": 0}, {"snippet_id": 15556, "code": ".change_input_series_one_model: for command in get_command('change_input_series_one_model'): form.change_input_series_one_model.append_entry() if not form.change_input_series_all_models: for command in", "label": 0}, {"snippet_id": 74099, "code": "): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial): EVAL_ACTION_TYPE=\"DASHBOARD", "label": 0}, {"snippet_id": 31902, "code": ":vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302", "label": 0}, {"snippet_id": 16476, "code": " t, 'round': r, 'count': count, 'sitters': sitters, 'doubles': doubles} form=GetSevenPlayersForm(request.POST or None, the_round=r) if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1):", "label": 0}, {"snippet_id": 84417, "code": "().order_by('-revision') template_params={'article': article, 'changes': changes, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params", "label": 0}, {"snippet_id": 38245, "code": " PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It", "label": 0}, {"snippet_id": 68964, "code": "/nasj3K9qnlEg9G3+4T7lpdPmZRRe1O8cHCI5imVg6cLIiBLPO16e0fK yHIgYswLdrJFfaHNYM/SWJxHpX795zn+iCwyvZSlLfH9mlegOeVmj9cyhN/VOmS3 QRhlYXoA2z7WZTNoC6iAIlyIpMTcZr+ntaGVtFOLS6fwdBqDXjmSQu66mDKwU5Ek fNlbyrpzZMyFCDWEYo4AIR", "label": 0}, {"snippet_id": 20789, "code": " return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster", "label": 0}, {"snippet_id": 71943, "code": ".get_redirect_uri() self.assertEqual(redirect_uri, '/callback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback", "label": 1}, {"snippet_id": 57662, "code": "(template_subject) rendered_subj=subj_template.render(context) text_template=loader.get_template(template_text) rendered_text=text_template.render(context) send_mail( rendered_subj, rendered_text, from_email, to_email", "label": 0}, {"snippet_id": 52700, "code": "\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate\" return r if __name__==\"__main__\": app.debug=True app.jinja_env.auto_reload=app.debug connect_to_db(app) DebugToolbarExtension(app) app", "label": 0}, {"snippet_id": 55701, "code": " files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif", "label": 0}, {"snippet_id": 79581, "code": ".validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now()", "label": 0}, {"snippet_id": 73822, "code": "': PositionText, 'userVisibleText': PositionsViewText, 'applicationsForm': ImportApplicationsForm, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] ", "label": 0}, {"snippet_id": 43209, "code": " django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver", "label": 1}, {"snippet_id": 4834, "code": ", 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 82381, "code": "-many-urls'), re_path(r'^detail/(?P<pk>(\\d)+)/$', URLDetailView.as_view(), name='url-detail-view'), re_path(r'^update/(?P<pk>(\\d)+)/$', URLUpdateView.as_view(), name='url-update-view'), re_path(r'^delete/(", "label": 0}, {"snippet_id": 75144, "code": ".POST.getlist('keywords',[])): messages.info(request, 'Your keywords contained invisible characters that we\\'ve removed. Please make sure your keywords are correct in the information section below.') return", "label": 0}, {"snippet_id": 55585, "code": "(r.path) \t\telse: \t\t\treturn Folder(r.dirname().path) \tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir", "label": 0}, {"snippet_id": 54774, "code": "].append(prob_code+\"\\n\"+(\"=\"*50)+\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group in self.problem_groups.values(): \t\t\tself.count_by_groups +=len(group) \t\tprint", "label": 1}, {"snippet_id": 49324, "code": " extracted_list_presence in extracted_text.rawchem.select_subclasses('extractedlistpresence'): tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence) if tag_form.is_valid():", "label": 0}, {"snippet_id": 45031, "code": " render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import ", "label": 0}, {"snippet_id": 68161, "code": " return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter", "label": 0}, {"snippet_id": 47246, "code": " dashboard.models import DataSource, DataGroup, DataDocument from.data_group import DataGroupForm from django.db.models import Count, Q @login_required() def data_source_list(request, template_name='data_source", "label": 1}, {"snippet_id": 75471, "code": "'etd_app.change_candidate', raise_exception=True) def view_abstract(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) return render(request, 'etd_app/staff_view_abstract.html", "label": 0}, {"snippet_id": 51657, "code": "(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, 'params':", "label": 0}, {"snippet_id": 32384, "code": ".accept(TokenType.COMMAND_END): other=self.commands() if base and other: return DoubleNode(base, other) else: return other else: return base def command(self): if self.accept(TokenType.WORD): command=self", "label": 0}, {"snippet_id": 37481, "code": " BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField( queryset=PUC.objects.all(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) )", "label": 0}, {"snippet_id": 84232, "code": "'images': article.all_images(), 'article': article, } if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response", "label": 0}, {"snippet_id": 5415, "code": ".status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in", "label": 0}, {"snippet_id": 53135, "code": "={'house_type': 8, 'house_age': 8, 'house_cond': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None)", "label": 0}, {"snippet_id": 71980, "code": " import cephfs from. import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services", "label": 1}, {"snippet_id": 61839, "code": " the HTML of a page into a BeautifulSoup\"\"\" try: page=requests.get(url, allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests", "label": 0}, {"snippet_id": 54083, "code": " Politician from knowyourgov.scripts import insert_politicians_in_db from knowyourgov.scripts.scraping import scrapers \"\"\"Home page \"\"\" @app.route('/') def homepage(): q=Politician.all() q.order('-search_count'", "label": 0}, {"snippet_id": 1015, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath):", "label": 1}, {"snippet_id": 44586, "code": " kind='FO') extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType", "label": 0}, {"snippet_id": 73376, "code": ".decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from.forms import ScreenDoorUserCreationForm, LoginForm", "label": 0}, {"snippet_id": 40548, "code": " response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=", "label": 0}, {"snippet_id": 78793, "code": " assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief", "label": 0}, {"snippet_id": 16988, "code": " @permission_required('tournament.add_game') def create_games(request, tournament_id, round_num): \"\"\"Provide a form to create the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request", "label": 0}, {"snippet_id": 63973, "code": "'SAMLResponse'] session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user=authenticate(current_app, session_info", "label": 0}, {"snippet_id": 75856, "code": ", ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir', _('Sphinx HTML -> HTMLDir')), ) from_url_helptext=_( 'Absolute path, excluding the domain. ' 'Example:", "label": 0}, {"snippet_id": 372, "code": "\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 71248, "code": " _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile", "label": 0}, {"snippet_id": 61126, "code": " class CrashEvent(object): \"\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component", "label": 0}, {"snippet_id": 72279, "code": " in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id': '{cluster_id}', 'export_id", "label": 0}, {"snippet_id": 14548, "code": " released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{", "label": 0}, {"snippet_id": 14634, "code": ".name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins'", "label": 0}, {"snippet_id": 23064, "code": "(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str):", "label": 0}, {"snippet_id": 6655, "code": ".query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) session['auth_token']=user.auth_token return redirect", "label": 1}, {"snippet_id": 49292, "code": ".objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return redirect(referer", "label": 0}, {"snippet_id": 58558, "code": " import update_onboarding_step, get_onboarding_percentage from core.common import onboarding from django.conf import settings class Command(BaseCommand): help='Onboarding preprocessing' def handle(self,", "label": 0}, {"snippet_id": 2409, "code": "/head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode", "label": 0}, {"snippet_id": 29433, "code": "=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response() if not resp:", "label": 1}, {"snippet_id": 10411, "code": " _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce", "label": 0}, {"snippet_id": 13495, "code": " tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login", "label": 1}, {"snippet_id": 71803, "code": ":abc' user_info={ 'auth_id': auth_id, 'info':{}, } p1=models.UserProfile.get_or_create(auth_id, user_info) req.load_user_by_profile(p1) user_count=models.User.query().count() self.assertEqual(user_count", "label": 0}, {"snippet_id": 66367, "code": ".logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() password_unlock_entry.grab_focus() password_unlock_entry.get_style_context().add_class(\"error\"", "label": 0}, {"snippet_id": 75162, "code": " below.') return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate, 'form': form,", "label": 0}, {"snippet_id": 63926, "code": "(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info('Redirecting the user to the IdP for ' +action) return redirect", "label": 0}, {"snippet_id": 21855, "code": " some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A", "label": 0}, {"snippet_id": 47374, "code": "*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or None, instance=datasource) if request.method=='POST': if form.is_valid", "label": 0}, {"snippet_id": 60136, "code": " TABLE v{fts} USING{fts}(data)\".format(fts=fts) ) fts_versions.append(fts) except sqlite3.OperationalError: continue datasette_version={\"version\": __version__} if self.version_note: datasette_version[\"note", "label": 0}, {"snippet_id": 52161, "code": "=[\"POST\"]) def update_team_membership(): \"\"\"Update UserTeam membership field's value to true; update Dashboard with a redirect.\"\"\" user_id=session[\"user_id\"] team_id=request.form.get(\"team\") user_choice", "label": 0}, {"snippet_id": 12693, "code": " info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session", "label": 0}, {"snippet_id": 11624, "code": " account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year", "label": 0}, {"snippet_id": 31072, "code": " grudget_id=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/delete'", "label": 0}, {"snippet_id": 63462, "code": "/test3') self.assertEqual(resp.status_code, 200) class LogoutRequestTests(AuthnAPITestBase): def test_metadataview(self): with self.app.test_client() as c: response=c.get('/saml2-metadata') self.assertEqual", "label": 0}, {"snippet_id": 74323, "code": " super().dispatch(request, *args, **kwargs) else: return self._render_access_form() def _get_access_form(self): form_kwargs=self.get_form_kwargs() form_kwargs.update({\"instance\": self.get_object()}) return", "label": 0}, {"snippet_id": 43995, "code": "() class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver", "label": 1}, {"snippet_id": 52602, "code": "=team_object.name) flash_message=\"Emails sent to\\n\" for i in xrange(len(emails_lst)): if not messages_list[i]: message=default_message else: message=messages_list[i] flash_message=flash_message +emails_lst", "label": 0}, {"snippet_id": 23624, "code": " not None: resources[\"GPU\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus return resources _default_handler=None def setup_logger(logging_level, logging_format): \"", "label": 0}, {"snippet_id": 50725, "code": "(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES:", "label": 0}, {"snippet_id": 84324, "code": "=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision) is not", "label": 0}, {"snippet_id": 4789, "code": " test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password", "label": 0}, {"snippet_id": 73619, "code": ") return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed", "label": 1}, {"snippet_id": 54311, "code": " imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def politicians_by_state(state", "label": 0}, {"snippet_id": 74848, "code": "(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type=degree_type) return", "label": 0}, {"snippet_id": 26067, "code": "=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE", "label": 1}, {"snippet_id": 40013, "code": " blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField(max_length=50, null=True, blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical", "label": 1}, {"snippet_id": 40839, "code": " response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods", "label": 0}, {"snippet_id": 7352, "code": " a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS", "label": 0}, {"snippet_id": 70210, "code": ". size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date", "label": 0}, {"snippet_id": 39053, "code": " found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a", "label": 0}, {"snippet_id": 12567, "code": "\"errorMessage\": None, } if third_party_auth.is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info", "label": 0}, {"snippet_id": 7376, "code": " WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' import logging from flask import g", "label": 0}, {"snippet_id": 2356, "code": " if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE", "label": 0}, {"snippet_id": 40365, "code": " import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1:", "label": 0}, {"snippet_id": 16533, "code": "'rounds/get_seven.html', context) def _sitters_and_two_gamers(tournament, the_round): \"\"\" Return a(sitters, two_gamers) 2-tuple\"\"\" tourney_players=tournament.tournamentplayer_set.all() round_players=the_round", "label": 0}, {"snippet_id": 47164, "code": " if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc.extracted=True doc.save() context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render", "label": 0}, {"snippet_id": 31706, "code": "(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=", "label": 1}, {"snippet_id": 47466, "code": "(): if form.has_changed(): form.save() return redirect('data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required", "label": 0}, {"snippet_id": 65844, "code": ".container.get_n_pages() > 1: self.container.set_show_tabs(True) else: self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab", "label": 0}, {"snippet_id": 41281, "code": "=ex_child.__class__ self.assertEqual(et.pk, child_model.objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent'", "label": 1}, {"snippet_id": 35771, "code": "()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment", "label": 0}, {"snippet_id": 21025, "code": "=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes", "label": 1}, {"snippet_id": 28773, "code": " if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl", "label": 0}, {"snippet_id": 54527, "code": ", mimetype=\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once", "label": 0}, {"snippet_id": 42971, "code": "/{pk}/') self.assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains", "label": 0}, {"snippet_id": 70177, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This", "label": 0}, {"snippet_id": 2171, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure.", "label": 0}, {"snippet_id": 5070, "code": ") params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly", "label": 0}, {"snippet_id": 60749, "code": " :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses", "label": 0}, {"snippet_id": 66527, "code": ".logging_manager.log_debug(\"Keyfile path: \" +keyfile_path) def on_composite_unlock_select_button_clicked(self, widget): filechooser_opening_dialog=Gtk.FileChooserDialog( \"Choose Keyfile\", self.window, Gtk", "label": 0}, {"snippet_id": 43267, "code": ".send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER", "label": 1}, {"snippet_id": 13662, "code": " @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page", "label": 0}, {"snippet_id": 6435, "code": ".config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the auth code for", "label": 0}, {"snippet_id": 54733, "code": "(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t\tfor problem in self", "label": 1}, {"snippet_id": 73239, "code": "(ErrorMessages.user_already_exists % email)) self.add_error('email', message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account", "label": 0}, {"snippet_id": 41164, "code": ".assertContains(response, f'product/%s' % new_product.id) def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when the document doesn't yet have an extracted", "label": 0}, {"snippet_id": 58900, "code": ": old_invite=Invite.get_by_user_or_404( user=user, type=invite_type, course=course, instructor=instructor, enroll_unit_code=enroll_unit_code ) if old_invite: return old_invite except Http404: pass code", "label": 0}, {"snippet_id": 71586, "code": "/google') req.cookies['_eauth']=s.serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session", "label": 0}, {"snippet_id": 49330, "code": " tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence) if tag_form.is_valid(): tag_form.save() return redirect(referer, pk=pk) @login_required() def data_document_delete", "label": 0}, {"snippet_id": 80423, "code": ".addWidget(self.log_area) @handled_function def setup_widgets(self): self.status_monitor_queue=queue.Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout", "label": 0}, {"snippet_id": 13081, "code": "(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{", "label": 0}, {"snippet_id": 27671, "code": ", extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of", "label": 0}, {"snippet_id": 11867, "code": " lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login", "label": 0}, {"snippet_id": 68895, "code": "/h9ou7SowGqQ3wwOtT3Vy qmif0A2GCcjFTqWW6TXaY8eZJ9BCEqW3k/0Cjw7K/mSy/utxYiUIvZNKgaG/P8U7 89QyvxeRxAf93YFAVzMXhoKxu12IuH4VnSwAfb8gQyxKRyiGOUwk0YoBPpqRnMmD Dl7SdmY3oQHEJzBelTMjTM8AjbB9mWoPBX5G8t4u47/FZ6PgdfmRg9hsKXhkLJc7", "label": 0}, {"snippet_id": 31221, "code": "=['testing.com', 'localhost', '127.0.0.1', 'localhost:4200', HOOK_DOMAIN] ALLOWED_HOSTS +=os.environ.get('DJANGO_ALLOWED_HOSTS', '').split() CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True", "label": 0}, {"snippet_id": 43239, "code": " object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name", "label": 0}, {"snippet_id": 38683, "code": " clean(self): this_type=self.data_group.group_type doc_types=DocumentType.objects.filter(group_type=this_type) if not self.document_type in doc_types: raise ValidationError(('The document type must be allowed", "label": 1}, {"snippet_id": 1609, "code": "={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='", "label": 0}, {"snippet_id": 84926, "code": " old_titles: if old_title in article.content: found_old_links.append({'old_title': old_title, 'title': article.title}) context={'found_links': found_links, 'found_old_links': found_old_links, 'name': title", "label": 0}, {"snippet_id": 35292, "code": "=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form", "label": 0}, {"snippet_id": 53004, "code": ") request=self.factory.get('/fake-url') request.user=self.user self.view.request=request def test_get_success_url(self): self.assertEqual( self.view.get_success_url(), '/users/~update/ ) def test_get_object", "label": 0}, {"snippet_id": 42748, "code": "/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript/{pk}/') et=ExtractedText.objects.filter(extraction_script", "label": 0}, {"snippet_id": 48739, "code": "'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request", "label": 0}, {"snippet_id": 22028, "code": " in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from", "label": 0}, {"snippet_id": 32145, "code": " the input is malformed and a token cannot be correctly generated from it. ''' while self.char and self.char.isspace(): self.read() if self.char==None: return Token(TokenType.EOF, None, self.position) elif", "label": 0}, {"snippet_id": 54217, "code": ".search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404", "label": 1}, {"snippet_id": 42755, "code": ".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript/{pk}/') et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertIn(f'/qa/extractedtext/{et.pk}/'.encode()", "label": 0}, {"snippet_id": 43206, "code": " selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait", "label": 1}, {"snippet_id": 15567, "code": "'change_input_series_all_models'): form.change_input_series_all_models.append_entry() if not form.change_timeseries_value_several_days: for command in get_command('change_timeseries_value_several_days'): form", "label": 0}, {"snippet_id": 42993, "code": "') def test_dd_link(self): response=self.client.get('/qa/extractedtext/5', follow=True) self.assertIn(b'/datadocument/5', response.content) def test_approval(self): response=self.client.get('/qa/extractionscript", "label": 0}, {"snippet_id": 8654, "code": " GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request):", "label": 0}, {"snippet_id": 7181, "code": "'exam_color', 'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind' ] column_searchable_list={'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', ", "label": 1}, {"snippet_id": 30213, "code": "=make_response(json.dumps('Invalid state parameter.'), 401) response.headers['Content-Type']='application/json' return response code=request.data try: oauth_flow=flow_from_clientsecrets('client_secrets", "label": 1}, {"snippet_id": 6639, "code": " render_template('auth/unconfirmed.html') @auth.route('/login', methods=['GET', 'POST']) def login(): form=LoginForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first()", "label": 0}, {"snippet_id": 35008, "code": "'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas", "label": 1}, {"snippet_id": 32891, "code": " self.redirections=redirections self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection", "label": 0}, {"snippet_id": 82953, "code": " component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on", "label": 0}, {"snippet_id": 64294, "code": "=client.parse_logout_request_response( request.form['SAMLResponse'], BINDING_HTTP_REDIRECT ) state.sync() if response and response.status_ok(): session.clear() return redirect(next_page) else: current_app", "label": 0}, {"snippet_id": 69133, "code": "'systemd-units', 'traefik.service')) as f: traefik_unit_template=f.read() proxy_secret_path=os.path.join(STATE_DIR, 'traefik-api.secret') if not os.path.exists(proxy_secret_path): with open(proxy_secret_path", "label": 0}, {"snippet_id": 6123, "code": " credentials=self.credentials_store[id_token['sub']] except KeyError: logger.debug(\"Expired ID token, credentials missing\", exc_info=True) return self.redirect_to_auth_server(request.url) try: credentials", "label": 0}, {"snippet_id": 29810, "code": " benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session, tagname): instance=Tag.query.filter_by(name=tagname).first() if instance: return instance, False else: created", "label": 0}, {"snippet_id": 23481, "code": "(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES", "label": 0}, {"snippet_id": 79362, "code": ".organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id) data_dict['followers']=db.DataRequestFollower.get_datarequest_followers_number(", "label": 0}, {"snippet_id": 58049, "code": " Test email sending. Ensure an email has proper subject and body. \"\"\" send_email( context_data={ \"milestone\": \"first\", \"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson\",", "label": 0}, {"snippet_id": 16162, "code": " or raise Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num, template): \"\"\"Just render the specified", "label": 0}, {"snippet_id": 37808, "code": "'true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname']=forms.CharField(max_length=400", "label": 0}, {"snippet_id": 21927, "code": " limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object", "label": 0}, {"snippet_id": 71758, "code": "') req._load_session() req._load_user() user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count", "label": 0}, {"snippet_id": 37545, "code": " class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self", "label": 0}, {"snippet_id": 3776, "code": " UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US", "label": 0}, {"snippet_id": 15483, "code": " 'number_of_days': entry.number_of_days.data, 'delta': entry.delta.data }) return result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults", "label": 0}, {"snippet_id": 2655, "code": " def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in", "label": 0}, {"snippet_id": 25212, "code": " remove{} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver", "label": 0}, {"snippet_id": 2698, "code": " callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView", "label": 0}, {"snippet_id": 47702, "code": "=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) | Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs", "label": 0}, {"snippet_id": 3388, "code": ".get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"", "label": 1}, {"snippet_id": 23993, "code": " method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy", "label": 0}, {"snippet_id": 37701, "code": "['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__", "label": 0}, {"snippet_id": 23912, "code": " large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker used to", "label": 0}, {"snippet_id": 40443, "code": "\nfrom django.db import models from.common_info import CommonInfo class Taxonomy(CommonInfo): title=models.CharField(max_length=100, blank=False, null=False) description=models.TextField(null=True, blank", "label": 1}, {"snippet_id": 47788, "code": "'dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats(stats)", "label": 0}, {"snippet_id": 61796, "code": " current_result=pshtt_data_to_result(securedrop, result_data) current_result.compute_grade() current_result.securedrop=securedrop try: prior_result=securedrop.results.latest() except ScanResult.DoesNotExist", "label": 1}, {"snippet_id": 61273, "code": ".hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 32622, "code": "): self.first.execute(*args) self.first.wait() self.second.execute(*args) self.second.wait() class PipeNode(DoubleNode): ''' A node that forwards the output of one node to the input of another. Args: first", "label": 0}, {"snippet_id": 30540, "code": ".filter_by(email=login_session['email']).one() return user.id def getUserInfo(user_id): user=session.query(User).filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User", "label": 1}, {"snippet_id": 18978, "code": "\"Base core views.\"\"\" from __future__ import unicode_literals from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions", "label": 0}, {"snippet_id": 65514, "code": " self, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type", "label": 0}, {"snippet_id": 75159, "code": " correct in the information section below.') return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate", "label": 0}, {"snippet_id": 44040, "code": "=len(self.browser.find_elements_by_xpath(\"//table[@id='sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath('//*[@title=\"edit", "label": 0}, {"snippet_id": 20511, "code": "\"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address", "label": 1}, {"snippet_id": 80897, "code": "':\"\"\"\"\"\", 'description': \"\"\" Extension for the default Events module; used for BCNL,. \"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view", "label": 0}, {"snippet_id": 56166, "code": ") \\ .when_call_get_email_confirmation() \\ .then_response_should_be_a_redirect_to_app_deeplink_with_params() class ScenarioMaker: def when_call_get_email_confirmation(self): client=Client() self.response", "label": 0}, {"snippet_id": 38571, "code": " raw_category=models.CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument", "label": 0}, {"snippet_id": 31810, "code": "('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse", "label": 1}, {"snippet_id": 31388, "code": ".middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware',", "label": 0}, {"snippet_id": 27617, "code": " data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if", "label": 0}, {"snippet_id": 66790, "code": ".models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data(self, **kwargs)", "label": 0}, {"snippet_id": 81667, "code": ": %s', event.event_type_id.name, event.name) return True if event_start < datetime.now(): return False if(event_start +relativedelta(hours=-24)) > datetime.now() and event_type=='crosstraining': return", "label": 1}, {"snippet_id": 23747, "code": ".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"", "label": 0}, {"snippet_id": 41937, "code": ".create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects.create(document=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context", "label": 0}, {"snippet_id": 68127, "code": ") row=[dt, event.date, event.info, event.get_threat_level_id_display(), event.attribute_count, event.org.name] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response", "label": 0}, {"snippet_id": 63041, "code": " so we can extend data initialized. \"\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login')", "label": 0}, {"snippet_id": 12271, "code": " Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden(", "label": 0}, {"snippet_id": 21902, "code": " name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to", "label": 0}, {"snippet_id": 75912, "code": ", ) redirect_type=models.CharField( _('Redirect Type'), max_length=255, choices=TYPE_CHOICES, help_text=redirect_type_helptext, ) from_url=models.CharField( _('From URL'), max_length=255, db_index=True", "label": 0}, {"snippet_id": 62451, "code": " reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info", "label": 0}, {"snippet_id": 55376, "code": "(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: ", "label": 0}, {"snippet_id": 72984, "code": " @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request, 'position.html',{ 'baseVisibleText': InterfaceText, 'positionText': PositionText,", "label": 0}, {"snippet_id": 30647, "code": "=session.query(Grudget).all() if 'username' not in login_session: return render_template('publicgrudgets.html', grudgets=grudgets) else: return render_template('grudgets.html', grudgets=grudgets) @app.route", "label": 0}, {"snippet_id": 37261, "code": " CSV File\", required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; ", "label": 0}, {"snippet_id": 45922, "code": " from dashboard.models import * from dashboard.forms import(DataGroupForm, ExtractionScriptForm, CleanCompDataForm, create_detail_formset, include_extract_form, include_clean_comp_data_form) from dashboard", "label": 1}, {"snippet_id": 82214, "code": "() print(urls_without_category) queryset=Category.objects.all() for cat in queryset: quantity +=cat.justurl_set.all().count() context['number_of_links']=quantity context['urls_without_category']=urls_without_category", "label": 0}, {"snippet_id": 83244, "code": " mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers", "label": 0}, {"snippet_id": 5957, "code": ")(self.oidc_callback) app.before_request(self.before_request) app.after_request(self.after_request) self.flow=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'], scope=app.config['OIDC_SCOPES']", "label": 0}, {"snippet_id": 27063, "code": " num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number. redis_password(str)", "label": 0}, {"snippet_id": 21718, "code": " process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes", "label": 0}, {"snippet_id": 32496, "code": ")) elif self.accept(TokenType.REDIRECT_IN): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(0,(filename, os.O_RDONLY)) else: return None def next(self): self.last=self.token self.token", "label": 0}, {"snippet_id": 71576, "code": "().count() self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest", "label": 0}, {"snippet_id": 37219, "code": "}) if self.dg_type in['FU', 'CP']: del self.fields['weight_fraction_type'] self.collapsed=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField", "label": 0}, {"snippet_id": 68345, "code": ".now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels", "label": 0}, {"snippet_id": 46221, "code": "]) row['unit_type']=UnitType.objects.get(pk=unit_type_id) rank=row['ingredient_rank'] row['ingredient_rank']=None if rank=='' else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script", "label": 0}, {"snippet_id": 53553, "code": " line=stack_frame.line ) def render_error( project: 'projects.Project', error: Exception ) -> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message", "label": 0}, {"snippet_id": 60881, "code": ".comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"", "label": 0}, {"snippet_id": 57304, "code": " if valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction", "label": 0}, {"snippet_id": 30875, "code": "(Grudge).filter_by(grudget_id=grudget_id).all() if 'username' not in login_session: return render_template('publicgrudges.html', grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return", "label": 0}, {"snippet_id": 20230, "code": " process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there", "label": 0}, {"snippet_id": 56351, "code": ".PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self, dynamic_link): settings.DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN", "label": 0}, {"snippet_id": 71141, "code": " self.request.session_hash==session.hash(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id !=session.user_id: session=models.Session.upgrade_to_user_session", "label": 0}, {"snippet_id": 73310, "code": ".ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message) return self.cleaned_data def get_user(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data.get", "label": 0}, {"snippet_id": 81525, "code": " self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date", "label": 0}, {"snippet_id": 79755, "code": " Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict['title'] validator.validate_datarequest(context, data_dict)", "label": 0}, {"snippet_id": 70024, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length", "label": 0}, {"snippet_id": 69925, "code": " like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part", "label": 1}, {"snippet_id": 69688, "code": "(pip_packages), ' '.join(pip_packages) )) conda.ensure_pip_packages(USER_ENV_PREFIX, pip_packages) def ensure_config_yaml(plugin_manager): \"\"\" Ensure we have a config.yaml present \"\"\" for path in[CONFIG_DIR", "label": 0}, {"snippet_id": 75806, "code": " django.utils.translation import ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from", "label": 0}, {"snippet_id": 43368, "code": ") self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self", "label": 0}, {"snippet_id": 73445, "code": " send_user_email(request, user) return render(request, 'registration/register.html', {'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, ", "label": 0}, {"snippet_id": 68269, "code": "=self.thirty_day_data() return context def get_queryset(self): query=tweet.objects.order_by('-datetime') keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(text__icontains", "label": 0}, {"snippet_id": 40558, "code": "]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should", "label": 0}, {"snippet_id": 75459, "code": "': candidate, 'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def", "label": 0}, {"snippet_id": 84266, "code": " group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, ", "label": 0}, {"snippet_id": 1186, "code": ".templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f", "label": 0}, {"snippet_id": 82160, "code": "-Disposition']='attachment; filename=\"many_urls.csv\"' return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create", "label": 0}, {"snippet_id": 12218, "code": " the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper,", "label": 0}, {"snippet_id": 42771, "code": ".assertIn(f'/qa/extractedtext/{et.pk}/'.encode(), response.content) group_count=QAGroup.objects.filter(extraction_script_id=pk).count() self.assertTrue(group_count==1) self.assertTrue(Script.objects.get(pk=15)", "label": 0}, {"snippet_id": 70576, "code": ") except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if", "label": 0}, {"snippet_id": 14115, "code": "(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{", "label": 0}, {"snippet_id": 46322, "code": "(store) fs.save(str(dg)+'_extracted.csv', csv_file) context['msg']=(f'{len(good_records)} extracted records ' 'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method", "label": 0}, {"snippet_id": 39196, "code": " have been associated with the group.\" raise ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\"", "label": 0}, {"snippet_id": 27477, "code": ") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None", "label": 0}, {"snippet_id": 11710, "code": " settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url", "label": 0}, {"snippet_id": 52362, "code": " def assign_user_to_project(): \"\"\"Update database with user_id for the project.\"\"\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id", "label": 0}, {"snippet_id": 16878, "code": "(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game", "label": 0}, {"snippet_id": 45826, "code": " script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save", "label": 0}, {"snippet_id": 7919, "code": " \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation", "label": 0}, {"snippet_id": 38572, "code": ".CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument') matched=models", "label": 0}, {"snippet_id": 6489, "code": " exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token: logger.debug(\"CSRF token mismatch\") return self.oidc_error() flow=self.flow_for_request() credentials=flow.step2_exchange(code, http", "label": 0}, {"snippet_id": 315, "code": " %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n'", "label": 0}, {"snippet_id": 77385, "code": "\"] not in _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn't support database\" \"type '%s'\", server_vars[\"dbType\"]) return layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def", "label": 0}, {"snippet_id": 59973, "code": " 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem %s\" % name) try: with sqlite3.connect( \"file:{}?immutable", "label": 0}, {"snippet_id": 72964, "code": "{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort", "label": 0}, {"snippet_id": 52245, "code": "(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page, with board\"\"\" team_id=request.form.get(\"team\") session[\"team_id\"]=team_id team_object=Team.query.filter_by", "label": 0}, {"snippet_id": 24412, "code": " of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary", "label": 1}, {"snippet_id": 5176, "code": "%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 56236, "code": " assert self.response.status_code==302 assert self.response['Location']=='{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/login') return self class RedirectExperienceTestCase(TestCase)", "label": 0}, {"snippet_id": 58471, "code": "\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\": False, \"settings\":{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" } }, onboarding", "label": 0}, {"snippet_id": 81034, "code": "(confirmed)') existing_registration.state='open' subscription_update_counter -=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: _logger.info('Found existing registration,", "label": 0}, {"snippet_id": 64185, "code": "] location=headers_tuple[0][1] current_app.logger.info('Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location", "label": 0}, {"snippet_id": 42455, "code": "(self): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext", "label": 0}, {"snippet_id": 61667, "code": " cache_control_notransform_set=validate_notransform(page), cache_control_nostore_set=validate_nostore(page), cache_control_private_set=validate_private(page), referrer_policy_set_to_no_referrer=validate_no_referrer_policy(page),", "label": 1}, {"snippet_id": 78799, "code": " data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param", "label": 0}, {"snippet_id": 84278, "code": "'wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title': title} if group_slug is not None: group=get_object_or_404( group_qs, **", "label": 0}, {"snippet_id": 39518, "code": ", max_length=500, null=True, blank=True) qa_flag=models.BooleanField(default=False) @classmethod def detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__(self): return str(self.raw_chem_name", "label": 0}, {"snippet_id": 27365, "code": " **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs", "label": 0}, {"snippet_id": 81373, "code": " start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled', '=', True)]) for repeating_event in repeating_event_ids: _logger.info('Found repeating event", "label": 0}, {"snippet_id": 25143, "code": " to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins", "label": 0}, {"snippet_id": 71021, "code": "'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory", "label": 0}, {"snippet_id": 49713, "code": "'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: editor_content=f.read() except FileNotFoundError: editor_content=\"\" return render_template", "label": 0}, {"snippet_id": 7164, "code": "(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed def get_query(self): return self.session.query(self.model) create_modal=False edit_modal=False column_list", "label": 1}, {"snippet_id": 22444, "code": " is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None: raise ValueError(\"Should not specify `java-worker-options` \" \"without providing", "label": 0}, {"snippet_id": 14226, "code": " \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user,", "label": 0}, {"snippet_id": 66908, "code": "'bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes", "label": 0}, {"snippet_id": 46351, "code": ".values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max", "label": 0}, {"snippet_id": 67086, "code": ".getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by(", "label": 0}, {"snippet_id": 1296, "code": ".http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import", "label": 1}, {"snippet_id": 54168, "code": ".search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=name, politician=politician) else: return render_template('politician_notfound.html', q=name) \"\"\"Search -", "label": 1}, {"snippet_id": 75121, "code": "['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve removed. Please make sure your title is correct in the information section below.') if _user_keywords_changed(thesis", "label": 0}, {"snippet_id": 31167, "code": " this file, see https://docs.djangoproject.com/en/1.9/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval", "label": 0}, {"snippet_id": 31377, "code": "', 'django.contrib.auth.backends.ModelBackend' ) MIDDLEWARE_CLASSES=[ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware", "label": 0}, {"snippet_id": 49630, "code": ".form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':',", "label": 0}, {"snippet_id": 33417, "code": ", ethylparaben_stats['pucs_n']) self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values", "label": 0}, {"snippet_id": 54798, "code": ": \t\tself.prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str(book_edition)+\" on", "label": 1}, {"snippet_id": 10856, "code": " if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request", "label": 0}, {"snippet_id": 44074, "code": " back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit", "label": 0}, {"snippet_id": 11033, "code": " enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer", "label": 0}, {"snippet_id": 37868, "code": "=Composition and at least 1 document extracted ''' if not dg.type in['CO']: return False if dg.extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1,", "label": 0}, {"snippet_id": 83604, "code": "**{group_slug_field: group_slug}) article_qs=article_qs.filter(content_type=get_ct(group), object_id=group.id) return article_qs, group def get_articles_for_object(object, article_qs=None): if article_qs", "label": 0}, {"snippet_id": 2015, "code": " %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n'", "label": 0}, {"snippet_id": 20637, "code": ". All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams", "label": 0}, {"snippet_id": 70209, "code": "'re talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 15283, "code": " def get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'], model['model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model(name", "label": 0}, {"snippet_id": 49780, "code": ".join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload', methods=[", "label": 0}, {"snippet_id": 28152, "code": ".DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message", "label": 0}, {"snippet_id": 68211, "code": " tweet from.forms import SearchForm from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from datetime import datetime, timezone, timedelta class", "label": 0}, {"snippet_id": 9325, "code": "'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES", "label": 0}, {"snippet_id": 50100, "code": "' in session and('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] filename=session['currentFile'] userpath=os", "label": 0}, {"snippet_id": 78616, "code": " that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation", "label": 0}, {"snippet_id": 1417, "code": ") head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath", "label": 1}, {"snippet_id": 47159, "code": ".method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc.extracted=True doc.save() context={ 'doc' : doc, 'ext_form' : ext_form, ", "label": 0}, {"snippet_id": 54843, "code": "\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text", "label": 0}, {"snippet_id": 33523, "code": "'Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0] dd.delete()", "label": 0}, {"snippet_id": 71688, "code": ".Session.query().count() self.assertTrue(s_count2==1) resp.request.session.user_id='1' resp._save_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) s1=models.Session.query().get()", "label": 0}, {"snippet_id": 79069, "code": ".close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator", "label": 1}, {"snippet_id": 69220, "code": "' ] +extensions) def ensure_jupyterhub_package(prefix): \"\"\" Install JupyterHub into our conda environment if needed. We install all python packages from PyPI as much as possible in the hub environment.", "label": 0}, {"snippet_id": 23960, "code": " object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object)", "label": 0}, {"snippet_id": 21814, "code": " import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address", "label": 0}, {"snippet_id": 21791, "code": ".live_processes()) def remaining_processes_alive(self): \"\"\"Return true if all remaining processes are still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command", "label": 0}, {"snippet_id": 48647, "code": ", flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects", "label": 0}, {"snippet_id": 62233, "code": " validate_cache_control_header(page, 'no-store') def validate_notransform(page): return validate_cache_control_header(page, 'no-transform') def validate_private(page): return validate_cache_control_header(page", "label": 0}, {"snippet_id": 39737, "code": "'extractedcpcat'): return self.extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''", "label": 1}, {"snippet_id": 36666, "code": " login_required from dashboard.models import * from dashboard.models import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime", "label": 0}, {"snippet_id": 37027, "code": ") writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for", "label": 1}, {"snippet_id": 50213, "code": ": return redirect('/') flash('Email already in use') return redirect('/signup') @app.route(\"/login\") def login(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return", "label": 0}, {"snippet_id": 45248, "code": "(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count", "label": 0}, {"snippet_id": 29891, "code": " methods=['GET', 'POST']) @login_required def delete_comment(post_id, comment_id): comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment.owner(current_user): db.session", "label": 0}, {"snippet_id": 81634, "code": ".fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name).lower() event_start=datetime.strptime(event.date_begin, '%Y-%m-%d %H:%M:%S')", "label": 0}, {"snippet_id": 68472, "code": " return context def get_queryset(self, request): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('tweet')) return query def get(self, request): self.object_list=self.get_queryset(request", "label": 0}, {"snippet_id": 47483, "code": " form}) @login_required() def data_source_delete(request, pk, template_name=('data_source/' 'datasource_confirm_delete.html')): datasource=get_object_or_404(DataSource, pk=pk) if request.method=='POST'", "label": 0}, {"snippet_id": 26174, "code": "=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"", "label": 0}, {"snippet_id": 83876, "code": " if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return", "label": 0}, {"snippet_id": 75548, "code": ".user.has_perm('etd_app.change_candidate'): return HttpResponseForbidden('You don\\'t have permission to view this candidate\\'s thesis.') if not candidate.thesis.current_file_name: return HttpResponse('Couldn", "label": 0}, {"snippet_id": 36511, "code": " def test_producttopuc_counts(self): response=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html", "label": 0}, {"snippet_id": 22020, "code": " files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients", "label": 0}, {"snippet_id": 7026, "code": " current_user.verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email',", "label": 0}, {"snippet_id": 29422, "code": " return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None)", "label": 1}, {"snippet_id": 22726, "code": " such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events", "label": 1}, {"snippet_id": 56738, "code": " import PaginationMixin from django.http import HttpResponse, QueryDict from django.conf import settings from django.utils import timezone from django_xhtml2pdf.utils import generate_pdf @login_required(", "label": 0}, {"snippet_id": 53987, "code": " current state of the print buffer contents \"\"\" try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"", "label": 1}, {"snippet_id": 45277, "code": "+relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats", "label": 0}, {"snippet_id": 60570, "code": "(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view(self), r\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?)?$>\", ) self.register_custom_units()", "label": 0}, {"snippet_id": 38831, "code": "=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True)", "label": 0}, {"snippet_id": 23579, "code": " of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy() else: resources", "label": 0}, {"snippet_id": 16027, "code": "'view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html', form=login_form", "label": 0}, {"snippet_id": 24147, "code": ", which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the worker object in this process. mode: worker", "label": 1}, {"snippet_id": 61188, "code": " with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s", "label": 0}, {"snippet_id": 55820, "code": ",l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf.close() \t\treturn r \tdef writelines(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.writelines(o) \t\tf.close() \t\treturn r \tdef open(self,mode): ", "label": 0}, {"snippet_id": 28349, "code": " number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we", "label": 0}, {"snippet_id": 34857, "code": ", stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template", "label": 0}, {"snippet_id": 78815, "code": " string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id", "label": 0}, {"snippet_id": 27274, "code": " logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options", "label": 0}, {"snippet_id": 9110, "code": " as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils", "label": 0}, {"snippet_id": 19566, "code": " \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename", "label": 1}, {"snippet_id": 82000, "code": " CustomShortURLCreateView(View): def get(self, request, *args, **kwargs): form=JustURLForm() return render(request, 'custom-short-url.html',{'form': form}) def post(self, request, *args, **kwargs): form", "label": 0}, {"snippet_id": 68454, "code": "(PaginationMixin, ListView): template_name='twitter_hunter/index.html' context_object_name='hts' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def", "label": 0}, {"snippet_id": 27508, "code": "=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type", "label": 1}, {"snippet_id": 81059, "code": " > 0 and event.seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id", "label": 0}, {"snippet_id": 22765, "code": "), self.worker.node_ip_address, events) def add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a", "label": 0}, {"snippet_id": 38194, "code": "(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self", "label": 0}, {"snippet_id": 67623, "code": " **kwargs): pk=self.kwargs['pk'] event_obj=Event.objects.get(pk=pk) objects_obj=Object.objects.filter(event=pk) context=super().get_context_data(**kwargs) context['event']=event_obj context['objects']=objects_obj", "label": 0}, {"snippet_id": 15488, "code": ".delta.data }) return result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form, commands): def get_command(command_name)", "label": 0}, {"snippet_id": 61495, "code": " requests import re from typing import Dict, TYPE_CHECKING from pshtt.pshtt import inspect_domains import tldextract from django.utils import timezone from directory.models import ScanResult, DirectoryEntry", "label": 1}, {"snippet_id": 29263, "code": "', template_mode='bootstrap3') setup_adminviews(admin, db) register_blueprints(app) register_cli(app) register_teardowns(app) app.register_blueprint(gallery) app.register_blueprint(auth) app.register_blueprint", "label": 0}, {"snippet_id": 32283, "code": ".isspace(): value.append(self.char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self)", "label": 0}, {"snippet_id": 15817, "code": " run_form=get_run_form() run_form[field].pop_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html", "label": 0}, {"snippet_id": 53834, "code": ".stderr_interceptor return max([ self._last_update_time, stdout.last_write_time if stdout else 0, stderr.last_write_time if stderr else 0, ]) @property def project(self): return self.step.project if self.step", "label": 0}, {"snippet_id": 84727, "code": ", group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if notification.is_observing(article, request", "label": 0}, {"snippet_id": 55107, "code": "): \t\treturn FSPath(os.path.lexists(self.path)) \tdef expanduser(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self", "label": 0}, {"snippet_id": 79467, "code": ")=='admin']) return users @tk.chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request. The function checks the access rights of the user before", "label": 0}, {"snippet_id": 18841, "code": "\t\t(r'/signin', SignInHandler), \t\t\t(r'/postlogin',PostLoginHandler) \t\t], \t\ttemplate_path=os.path.join(os.path.dirname(__file__),\"templates\"), \t\tstatic_path=os.path.join(os.path.dirname(__file__),\"static", "label": 1}, {"snippet_id": 36780, "code": "(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'),", "label": 0}, {"snippet_id": 36487, "code": "]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures", "label": 0}, {"snippet_id": 3734, "code": ") params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly", "label": 0}, {"snippet_id": 9563, "code": " received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( ", "label": 0}, {"snippet_id": 14687, "code": " serial_redirection cli main function \"\"\" board_cfg=board_config.BoardConfig() node=_get_node(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect.start() print 'Press Ctrl", "label": 1}, {"snippet_id": 46946, "code": ".has_changed(): form.save() return redirect('data_group_detail', pk=datagroup.id) form.referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled=True", "label": 0}, {"snippet_id": 41902, "code": "() self.objects.doc.save() response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self", "label": 0}, {"snippet_id": 62333, "code": ")) session['_saml2_session_name_id']=code(session_info['name_id']) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info", "label": 0}, {"snippet_id": 64801, "code": " except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, points_per_case, 'exception during test case %d' % i) return deductions def main(): parser=argparse.ArgumentParser", "label": 1}, {"snippet_id": 34620, "code": " stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label", "label": 0}, {"snippet_id": 68592, "code": " hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow", "label": 0}, {"snippet_id": 58373, "code": "</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro", "label": 1}, {"snippet_id": 52674, "code": "\"\" \"\"\" session.clear() return redirect(\"/\") @app.route(\"/logout\", methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility", "label": 0}, {"snippet_id": 8263, "code": " matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, }", "label": 0}, {"snippet_id": 53864, "code": " between sessions to prevent loss of display data between runs :return: \"\"\" if not self.project: return '' return os.path.join( self.project.results_path, '.cache', 'steps', '{}.json'.format(self.id) )", "label": 0}, {"snippet_id": 71497, "code": " GoogleStrategy) self.assertRaises(Exception, app._load_strategy, 'enron') from engineauth.strategies.appengine_openid import\\ AppEngineOpenIDStrategy strategy_class=app._load_strategy('appengine_openid') self", "label": 0}, {"snippet_id": 53902, "code": " else None def clear(self) -> 'Report': \"\"\" Clear all user-data stored in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining \"\"\" self.body=[", "label": 0}, {"snippet_id": 14188, "code": ". \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def", "label": 0}, {"snippet_id": 76816, "code": "[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata[row, col]=(red, green, blue) +_OPAQUE_ALPHA return tile def _FetchMapTile(url): \"\"\"Fetches and returns a tile, given an url. Args: url: the exact url of the", "label": 0}, {"snippet_id": 1916, "code": " response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size", "label": 0}, {"snippet_id": 54422, "code": "/json/<newspaper>/<query>') def test(newspaper, query): \thinduscraper=scrapers[newspaper] \thinduscraper.getArticleLinks(query) \thinduscraper.addArticleContent() \tarticles=hinduscraper.getArticles() \treturn", "label": 0}, {"snippet_id": 6463, "code": ".pop('oidc_csrf_token') state=json.loads(request.args['state']) csrf_token=state['csrf_token'] destination=state['destination'] code=request.args['code'] except(KeyError, ValueError): logger.debug(\"Can", "label": 0}, {"snippet_id": 28037, "code": ".digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function", "label": 0}, {"snippet_id": 65012, "code": "(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0] left_valid=False if type(left)==ast.Call: if type", "label": 0}, {"snippet_id": 21398, "code": " raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait()", "label": 0}, {"snippet_id": 13136, "code": "'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value", "label": 0}, {"snippet_id": 36450, "code": "'PUC_type,num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode", "label": 1}, {"snippet_id": 76090, "code": "=getattr( self, 'redirect_{type}'.format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if", "label": 0}, {"snippet_id": 17291, "code": " tournament_id, round_num): \"\"\"Display a list of games in the round\"\"\" t=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) the_list=r.game_set.all() context={'round", "label": 0}, {"snippet_id": 29918, "code": " SQLALCHEMY_MIGRATE_REPO=os.path.join(BASE_DIR, 'db_repository') SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static', 'tempbenwas') class DevConfig(Config)", "label": 1}, {"snippet_id": 44891, "code": " self.assertEqual(found.func, views.link_habitsandpractices) def test_product_surveyed_field(self): self.objects.gt.code='HP' self.objects.gt.save() _, HnPFormSet=create_detail_formset(self.objects.doc", "label": 0}, {"snippet_id": 22181, "code": " ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port", "label": 0}, {"snippet_id": 80413, "code": ".lock_fast_piezo_action.triggered.connect(self.toggle_fast_piezo_lock) def setup_log_window(self): self.layout.addWidget(self.log_area) @handled_function def setup_widgets(self): self.status_monitor_queue", "label": 0}, {"snippet_id": 22034, "code": " If provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory", "label": 0}, {"snippet_id": 33464, "code": ".refresh_from_db() pid=dd.products.first().pk puc=PUC.objects.get(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get(pk=pid), puc=puc, puc_assigned_usr=User.objects.get(username='Karyn'))", "label": 0}, {"snippet_id": 78113, "code": "', None): for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application", "label": 0}, {"snippet_id": 10946, "code": " it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']", "label": 0}, {"snippet_id": 63532, "code": ") def test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context('/logout', method='POST', headers=", "label": 0}, {"snippet_id": 46226, "code": "'ingredient_rank'] row['ingredient_rank']=None if rank=='' else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script=script) if not created and ext.one_to_one_check(row):", "label": 0}, {"snippet_id": 34786, "code": "['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n", "label": 0}, {"snippet_id": 78677, "code": " open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict", "label": 0}, {"snippet_id": 29744, "code": ".utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=", "label": 0}, {"snippet_id": 44818, "code": ". Arguments:\\n{1!r}\" message=template.format(type(ex).__name__, ex.args) long_note='A long QA note' * 200 note.qa_notes=long_note try: note.clean() except Exception as ex: template=\"An exception of type", "label": 0}, {"snippet_id": 75364, "code": "'candidate_id': candidate.id})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_home(request): return HttpResponseRedirect(reverse('review_candidates', kwargs", "label": 0}, {"snippet_id": 24778, "code": ".ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class", "label": 0}, {"snippet_id": 76862, "code": "\"Failed to fetch tile:%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname:", "label": 1}, {"snippet_id": 10889, "code": ".POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound", "label": 0}, {"snippet_id": 16696, "code": "\"\"\"Wrapper round GameSeeder to do the actual seeding for a round\"\"\" seeder=_create_game_seeder(tournament, the_round.number()) sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder", "label": 0}, {"snippet_id": 42753, "code": "/15/'> Begin QA\".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript/{pk}/') et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertIn(f'/qa/extractedtext", "label": 0}, {"snippet_id": 4086, "code": " image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range", "label": 0}, {"snippet_id": 77995, "code": " resources): destination=LocalCKAN() destination.action.package_patch(id=package_id, security_classification=security_classification, data_driven_application=data_driven_application, version=version, author_email", "label": 0}, {"snippet_id": 7700, "code": " def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the", "label": 0}, {"snippet_id": 15546, "code": "('number_of_days')[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models')[0]['include'] if not form.change_input_series_one_model: for command in get_command(", "label": 0}, {"snippet_id": 71976, "code": " absolute_import from functools import partial import cherrypy import cephfs from. import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security", "label": 1}, {"snippet_id": 79049, "code": " data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id',", "label": 0}, {"snippet_id": 73476, "code": "=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title(", "label": 0}, {"snippet_id": 74650, "code": "-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise PermissionDenied return candidate", "label": 0}, {"snippet_id": 76711, "code": "(1, 1): im_tile=im_tile.resize((_TILE_PIXEL_SIZE, _TILE_PIXEL_SIZE)) tiles_array.AddImage(rel_tile_col, rel_tile_row, im_tile) return tiles_array def _SetTransPixelToBgcolor(tile, bgcolor): \"\"\"Set the transparent", "label": 0}, {"snippet_id": 69198, "code": " ensure_jupyterlab_extensions(): \"\"\" Install the JupyterLab extensions we want. \"\"\" extensions=[ '@jupyterlab/hub-extension', '@jupyter-widgets/jupyterlab-manager' ] subprocess.check_output([ os.path.join(USER_ENV_PREFIX, ", "label": 0}, {"snippet_id": 16051, "code": " \"\"\" from django.contrib.auth.decorators import permission_required from django.core.exceptions import ValidationError from django.forms.formsets import formset_factory from django.http import Http404,", "label": 0}, {"snippet_id": 18075, "code": ".html', user=user), ) email.send_email(email_msg) def send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link':", "label": 0}, {"snippet_id": 44827, "code": " long_note='A long QA note' * 200 note.qa_notes=long_note try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type(ex).__name__", "label": 0}, {"snippet_id": 15880, "code": " password=PasswordField('Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not", "label": 0}, {"snippet_id": 24549, "code": " next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}", "label": 1}, {"snippet_id": 10997, "code": " member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for", "label": 0}, {"snippet_id": 48077, "code": " def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc.html'): hnp=get_object_or_404(ExtractedHabitsAndPractices, pk=pk,) form=HabitsPUCForm() if request.method==", "label": 0}, {"snippet_id": 39944, "code": " from.dsstox_lookup import DSSToxLookup from.extracted_text import ExtractedText from model_utils.managers import InheritanceManager from django.apps import apps from django.db.models.signals import pre_save", "label": 1}, {"snippet_id": 38923, "code": "(matched=True).count() def all_matched(self): return all(self.datadocument_set.values_list('matched', flat=True)) def all_extracted(self): return all(self.datadocument_set.values_list('extracted', flat=True", "label": 0}, {"snippet_id": 69577, "code": " if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest", "label": 0}, {"snippet_id": 15828, "code": ".dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/history', methods=['POST']) def view_run_history(): history=json.loads(request.data) history", "label": 0}, {"snippet_id": 74697, "code": "=CandidateForm(post_data) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '') if banner_id: person.bannerid=banner_id", "label": 0}, {"snippet_id": 48148, "code": " django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import", "label": 1}, {"snippet_id": 9981, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api", "label": 0}, {"snippet_id": 33624, "code": "=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(0, ethylparaben_stats['products_n'], 'There should be 0 products \\ associated with ethylparaben", "label": 0}, {"snippet_id": 26435, "code": " if check_alive: raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate(", "label": 0}, {"snippet_id": 24521, "code": " any changes to the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles", "label": 1}, {"snippet_id": 7861, "code": "': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION", "label": 0}, {"snippet_id": 75460, "code": " candidate, 'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def", "label": 0}, {"snippet_id": 1932, "code": ".S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> ", "label": 0}, {"snippet_id": 39868, "code": " decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis])", "label": 0}, {"snippet_id": 69360, "code": " installer_path: conda.install_miniconda(installer_path, USER_ENV_PREFIX) apt.install_packages([ 'gcc' ]) conda.ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[", "label": 0}, {"snippet_id": 14653, "code": ".accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login or state.has_account] return context", "label": 0}, {"snippet_id": 47090, "code": "\"registered_records.csv\", use_verbose_names=False) @login_required() def habitsandpractices(request, pk, template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument, pk=pk,)", "label": 0}, {"snippet_id": 70921, "code": "-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=", "label": 0}, {"snippet_id": 41547, "code": " import_module from django.test import Client from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard.views.data_group import ExtractionScriptForm", "label": 1}, {"snippet_id": 64006, "code": " authorized\") action=get_action() return action(session_info, user) def _get_name_id(session): \"\"\" Get the SAML2 NameID of the currently logged in user. :param session: The current session object :return: NameID", "label": 0}, {"snippet_id": 14263, "code": " Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key", "label": 0}, {"snippet_id": 81528, "code": ", new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event existence", "label": 0}, {"snippet_id": 54432, "code": "[newspaper] \thinduscraper.getArticleLinks(query) \thinduscraper.addArticleContent() \tarticles=hinduscraper.getArticles() \treturn jsonify(articles=articles) \"\"\"Tweets for a search query Format: JSON \"\"\" @app", "label": 0}, {"snippet_id": 3004, "code": ": return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, *", "label": 0}, {"snippet_id": 17815, "code": ".PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask", "label": 0}, {"snippet_id": 594, "code": ".path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s", "label": 1}, {"snippet_id": 59528, "code": ".sqlite_functions=[] self.sqlite_extensions=sqlite_extensions or[] self.template_dir=template_dir self.plugins_dir=plugins_dir self.static_mounts=static_mounts or[] self._config=dict(DEFAULT_CONFIG, **(config or{}))", "label": 0}, {"snippet_id": 66178, "code": " stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE) self.unlock_database_stack_box=self.builder.get_object(\"unlock_database_stack_box\") unlock_database_stack_switcher=self.builder.get_object(", "label": 0}, {"snippet_id": 74708, "code": ".get('Shibboleth-brownBannerID', '') if banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return HttpResponseRedirect", "label": 0}, {"snippet_id": 20150, "code": ".redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted", "label": 0}, {"snippet_id": 38616, "code": "(max_length=255, blank=True) note=models.TextField(blank=True, null=True) class Meta: ordering=['-id'] def __str__(self): return str(self.title) @property def detail_page_editable(self): return self.data_group", "label": 0}, {"snippet_id": 83543, "code": ".forms import ArticleForm from wiki.models import Article, ChangeSet, dmp from wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import", "label": 0}, {"snippet_id": 36098, "code": ": return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three", "label": 0}, {"snippet_id": 77739, "code": " application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email", "label": 0}, {"snippet_id": 9426, "code": "'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter", "label": 0}, {"snippet_id": 73389, "code": " CreatePositionForm, ImportApplicationsForm, ImportApplicationsText from.models import EmailAuthenticateToken, Position from screendoor.parseposter import parse_upload from screendoor.redactor import parse_applications", "label": 1}, {"snippet_id": 52236, "code": ".query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page", "label": 0}, {"snippet_id": 25561, "code": " args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config", "label": 1}, {"snippet_id": 7864, "code": " 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION", "label": 0}, {"snippet_id": 57307, "code": ") if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction.code) else: extra_context", "label": 0}, {"snippet_id": 54417, "code": " news sources Format: JSON \"\"\" @app.route('/json/<newspaper>/<query>') def test(newspaper, query): \thinduscraper=scrapers[newspaper] \thinduscraper.getArticleLinks(query) \thinduscraper.addArticleContent()", "label": 0}, {"snippet_id": 32314, "code": " of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into an Abstract Syntax Tree for later execution. Args: tokens:", "label": 0}, {"snippet_id": 40366, "code": " es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1: return QAGroup.objects", "label": 0}, {"snippet_id": 80818, "code": ") self.lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked) self.lock_thin_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_piezo_etalon_lock(self,", "label": 0}, {"snippet_id": 52810, "code": ".get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text']=self.request.data.get('message') serializer=self.get_serializer(data=request", "label": 0}, {"snippet_id": 1419, "code": "(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root", "label": 1}, {"snippet_id": 47319, "code": " form=PriorityForm(request.POST or None, instance=datasource) if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() return redirect('data_source_list')", "label": 0}, {"snippet_id": 80828, "code": ".lock_thin_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_piezo_etalon_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} piezo etalon.\") self.lock_piezo_etalon_action.setChecked(not", "label": 0}, {"snippet_id": 50721, "code": ") shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__", "label": 0}, {"snippet_id": 75256, "code": "'candidate': candidate, 'person_form': person_form, 'committee_member_form': committee_member_form} return render(request, 'etd_app/candidate_committee.html', context) @login_required @require_http_methods", "label": 0}, {"snippet_id": 22011, "code": ". redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary", "label": 0}, {"snippet_id": 57732, "code": " done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id", "label": 1}, {"snippet_id": 76208, "code": "(self, path, language=None, version_slug=None): for ending in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re.sub(ending +'$', '.html', path) return", "label": 0}, {"snippet_id": 20159, "code": " redis entries of the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted !=len(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard", "label": 0}, {"snippet_id": 29920, "code": "(BASE_DIR, 'db_repository') SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static', 'tempbenwas') class DevConfig(Config): SQLALCHEMY_DATABASE_URI=", "label": 1}, {"snippet_id": 84526, "code": ", get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request)) return redirect(article) messages.error( request, 'Reverting not possible because an article with name \\'%s", "label": 0}, {"snippet_id": 84694, "code": " not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if not notification.is_observing(article, request.user): notification.observe(article, request.user", "label": 0}, {"snippet_id": 18555, "code": "=None): \t\t\tself.render(\"signup.html\",error=does_it_exist) \t\t\treturn \t\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself", "label": 0}, {"snippet_id": 31534, "code": " url from apps.home.views import home_page, projects, project, project_clone urlpatterns=patterns( '', url(r'^$', home_page, name='home_page'), url(r'^draw/?$', home_page, name='home_page'), url(r'^account", "label": 1}, {"snippet_id": 70746, "code": "\"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to", "label": 0}, {"snippet_id": 78558, "code": " extra_vars) mailer.mail_user(user_data, subject, body) except Exception: logging.exception(\"Error sending notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set", "label": 1}, {"snippet_id": 64862, "code": ", and defaults to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this", "label": 0}, {"snippet_id": 54290, "code": " for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician", "label": 0}, {"snippet_id": 65127, "code": "(e), file=sys.stderr) dock_points(deductions, args.points, 'failed to parse code') break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body", "label": 0}, {"snippet_id": 69547, "code": " sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os.path.join", "label": 0}, {"snippet_id": 63709, "code": "'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService", "label": 0}, {"snippet_id": 22728, "code": " cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events=[] if", "label": 1}, {"snippet_id": 1878, "code": "\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request", "label": 0}, {"snippet_id": 84892, "code": "(r\"%s\" % title) else: search_title=re.compile(r\"\\/%s\\)\" % title) found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title", "label": 0}, {"snippet_id": 6811, "code": ".generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index'", "label": 0}, {"snippet_id": 41294, "code": " object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self): ''' Confirm that the inheritance manager is returning appropriate subclass objects", "label": 0}, {"snippet_id": 47900, "code": "'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %", "label": 0}, {"snippet_id": 5361, "code": "%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale", "label": 1}, {"snippet_id": 84508, "code": ").old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request", "label": 1}, {"snippet_id": 38298, "code": " return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag'", "label": 0}, {"snippet_id": 80256, "code": "=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction", "label": 0}, {"snippet_id": 37348, "code": ") class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA Notes(required if approving edited records)'), } class", "label": 1}, {"snippet_id": 45928, "code": " ExtractionScriptForm, CleanCompDataForm, create_detail_formset, include_extract_form, include_clean_comp_data_form) from dashboard.utils import get_extracted_models, clean_dict, update_fields from django.db", "label": 1}, {"snippet_id": 43611, "code": " test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a", "label": 0}, {"snippet_id": 12043, "code": "[0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id", "label": 1}, {"snippet_id": 9199, "code": "=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint", "label": 1}, {"snippet_id": 15305, "code": "=load_json('models.json') model=next(item for item in models if item['model_system_name']==name) return[( value['series_name_system'], value['series_name_system'] +':' +value['series_name_user'] ) for key", "label": 0}, {"snippet_id": 81438, "code": "%H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta(days=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date", "label": 1}, {"snippet_id": 8339, "code": " running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[", "label": 0}, {"snippet_id": 23785, "code": " memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename):", "label": 0}, {"snippet_id": 65692, "code": "\"clicked\", self.on_override_button_clicked) self.override_dialog.present() else: self.copy_database_file() tab_title=self.create_tab_title_from_filepath(self.filechooser_creation_dialog.get_current_name())", "label": 0}, {"snippet_id": 50930, "code": " f.__name__, f) self._steps.append(f.buildstep) f.buildstep.add_conditions(conditions) return f return decorator_func def build_step(self, name=None, optional=False, default=True): def decorator_func(f", "label": 0}, {"snippet_id": 40617, "code": "/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 2732, "code": " **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication", "label": 0}, {"snippet_id": 25088, "code": ".encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins", "label": 0}, {"snippet_id": 27296, "code": " self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports", "label": 0}, {"snippet_id": 33609, "code": "'There should be 2 extracted chemicals \\ with weight fraction data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781", "label": 0}, {"snippet_id": 50838, "code": " list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list(x) for x in arglist],[]) def flatten_comma_list(arglist): return sum([s.split(\",", "label": 0}, {"snippet_id": 29831, "code": " False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance, True @gallery.route('/gallery/benwa/<int:post_id>/comment/add', methods=['POST'", "label": 0}, {"snippet_id": 82002, "code": "(View): def get(self, request, *args, **kwargs): form=JustURLForm() return render(request, 'custom-short-url.html',{'form': form}) def post(self, request, *args, **kwargs): form=JustURLForm(request.POST", "label": 0}, {"snippet_id": 51629, "code": " for i in range(len(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript(endpoint, params): keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i", "label": 0}, {"snippet_id": 4550, "code": "=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" ", "label": 0}, {"snippet_id": 72044, "code": " composed_decorator @ApiController('/nfs-ganesha/export', Scope.NFS_GANESHA) class NFSGaneshaExports(RESTController): RESOURCE_ID=\"cluster_id/export_id\" def list(self): result=[] for cluster_id in Ganesha", "label": 0}, {"snippet_id": 29024, "code": " create a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict", "label": 0}, {"snippet_id": 32789, "code": " class RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ''' def __init__(self, base, redirections", "label": 0}, {"snippet_id": 67196, "code": " GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist", "label": 0}, {"snippet_id": 26696, "code": ", kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type", "label": 0}, {"snippet_id": 80785, "code": " checked): print(f\"{'Locking' if checked else 'Unlocking'} slow piezo.\") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked", "label": 0}, {"snippet_id": 52204, "code": "\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return \"Pending my good lady\" @app.route(\"/view-team\") def view_team(): \"\"\"Renders", "label": 0}, {"snippet_id": 84860, "code": " this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles", "label": 0}, {"snippet_id": 40322, "code": " the derived percent checked against the threshold constant Return true when the percent checked is above the threshold \"\"\" return self.get_pct_checked_numeric() >=self.QA_COMPLETE_PERCENTAGE * 100 def", "label": 0}, {"snippet_id": 3509, "code": "=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users", "label": 0}, {"snippet_id": 12599, "code": " enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 22872, "code": " __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside", "label": 0}, {"snippet_id": 23088, "code": ": The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if", "label": 0}, {"snippet_id": 15931, "code": "') return False self.user=auth_add_user(self.email.data, self.password.data) return True class LoginForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password'", "label": 0}, {"snippet_id": 31940, "code": " def run(self): ''' Run the shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline(self): ''' Read a command from stdin to execute. Returns: A raw", "label": 0}, {"snippet_id": 2997, "code": ".authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint", "label": 0}, {"snippet_id": 43836, "code": " should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]')", "label": 0}, {"snippet_id": 76748, "code": "(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\") if not tile: return tile if tile.getbands()==(\"P\",): rgba_tile", "label": 0}, {"snippet_id": 16609, "code": " 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters, two_gamers def _create_game_seeder", "label": 0}, {"snippet_id": 42035, "code": ".aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create", "label": 0}, {"snippet_id": 29287, "code": " return app def register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'):", "label": 0}, {"snippet_id": 38908, "code": "*args, **kwargs): super(DataGroup, self).save(*args, **kwargs) def matched_docs(self): return self.datadocument_set.filter(matched=True).count() def all_matched(self): return all(self.datadocument_set.values_list", "label": 0}, {"snippet_id": 80996, "code": " registration.state='cancel' subscription_update_counter +=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: existing_registration=http.request.env['event.registration", "label": 0}, {"snippet_id": 38697, "code": " Path, PurePath from django.db import models from.common_info import CommonInfo from django.urls import reverse from django.db.models.signals import pre_save from django.dispatch import receiver from model_utils", "label": 1}, {"snippet_id": 39249, "code": "={'value': value},) class ExtractedChemical(CommonInfo, RawChem): raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\",", "label": 0}, {"snippet_id": 35817, "code": "'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request", "label": 0}, {"snippet_id": 55322, "code": ".lchflags(self.path,flags) \tdef lchmod(self,mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self", "label": 0}, {"snippet_id": 23599, "code": ") else: resources={} if \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The resources dictionary must not \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU", "label": 0}, {"snippet_id": 16368, "code": " reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() else: RoundPlayer.objects.filter(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number(", "label": 0}, {"snippet_id": 26656, "code": "(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR,", "label": 0}, {"snippet_id": 69863, "code": " serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 60734, "code": " monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component ", "label": 0}, {"snippet_id": 35442, "code": " form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect('link_product_list', pk=doc.data_group.pk) else: pass return render(request, template_name,{'document': doc, ", "label": 0}, {"snippet_id": 50093, "code": " session: if 'tempFile' in session: filepath=session['tempFile'] if 'currentFile' in session and('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social'", "label": 0}, {"snippet_id": 60640, "code": "=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception", "label": 0}, {"snippet_id": 30528, "code": ", picture=login_session['picture']) session.add(newUser) session.commit() user=session.query(User).filter_by(email=login_session['email']).one() return user.id def getUserInfo(user_id): user=session.query", "label": 1}, {"snippet_id": 16576, "code": ".append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected game_count value ", "label": 0}, {"snippet_id": 30330, "code": "( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app's.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session", "label": 0}, {"snippet_id": 40131, "code": ".objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedListPresence').DoesNotExist: return False @staticmethod def pre_save(sender, **kwargs): instance=kwargs.get('instance'", "label": 0}, {"snippet_id": 60092, "code": " sqlite_version=conn.execute(\"select sqlite_version()\").fetchone()[0] sqlite_extensions={} for extension, testsql, hasversion in( (\"json1\", \"SELECT json('{}')\", False), (\"spatialite\", \"SELECT spatialite_version()\",", "label": 0}, {"snippet_id": 46379, "code": " if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if doc.title: new_prod_title='%s stub' % doc", "label": 0}, {"snippet_id": 57535, "code": "'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context)", "label": 0}, {"snippet_id": 37142, "code": "(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField", "label": 0}, {"snippet_id": 57486, "code": "=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid: if form.cleaned_data['confirm_button']: transaction.closed=True transaction.closed_date=timezone", "label": 0}, {"snippet_id": 49957, "code": "'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name: if name[-4:] !=\".pml\": name +=\".pml\" if allowed_file(name): session['currentFile'", "label": 0}, {"snippet_id": 30348, "code": " stored_access_token=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current", "label": 0}, {"snippet_id": 76127, "code": ".get_full_path( filename=cut_path, language=language, version_slug=version_slug, ) return to def redirect_page(self, path, language=None, version_slug=None): if path==self.from_url: log.debug('Redirecting", "label": 0}, {"snippet_id": 42091, "code": ".get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on the page'", "label": 0}, {"snippet_id": 55086, "code": "\treturn os.path.basename(self.path) \tdef dirname(self): \t\treturn FSPath(os.path.dirname(self.path)) \tdef exists(self): \t\treturn FSPath(os.path.exists(self.path)) \tdef lexists(self): \t\treturn FSPath(os.path", "label": 0}, {"snippet_id": 14267, "code": " user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' ", "label": 0}, {"snippet_id": 57534, "code": ", 'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context", "label": 0}, {"snippet_id": 61692, "code": " single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the result to the database. In", "label": 0}, {"snippet_id": 10052, "code": " account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in", "label": 0}, {"snippet_id": 38654, "code": "(self): return reverse('data_document', kwargs={'pk': self.pk}) def get_abstract_filename(self): ext=self.filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self.data_group", "label": 0}, {"snippet_id": 29420, "code": ".is_authenticated: return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or", "label": 1}, {"snippet_id": 67221, "code": ".models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='ip/index.html' def get_context_data(self, **kwargs):", "label": 0}, {"snippet_id": 5124, "code": "'test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user", "label": 0}, {"snippet_id": 45005, "code": ".assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2", "label": 0}, {"snippet_id": 84214, "code": " template_params={'form': form, 'new_article': True} else: template_params={'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images", "label": 0}, {"snippet_id": 75656, "code": "=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'] if", "label": 0}, {"snippet_id": 21343, "code": " exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1", "label": 0}, {"snippet_id": 13316, "code": ".login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import", "label": 0}, {"snippet_id": 83786, "code": " None) or is_member(user, group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name=", "label": 0}, {"snippet_id": 6755, "code": " been sent.') return redirect(url_for('auth.login')) return render_template('auth/register.html', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed", "label": 0}, {"snippet_id": 22340, "code": "\"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self,", "label": 0}, {"snippet_id": 62619, "code": ".localhost/failure' }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost", "label": 1}, {"snippet_id": 38581, "code": "=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument') matched=models.BooleanField(default=False) extracted=models.BooleanField(default=False) document_type=models.ForeignKey", "label": 0}, {"snippet_id": 27495, "code": " from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context", "label": 1}, {"snippet_id": 468, "code": " import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given", "label": 0}, {"snippet_id": 48099, "code": " puc=PUC.objects.get(id=form['puc'].value()) if not ExtractedHabitsAndPracticesToPUC.objects.filter( PUC=puc, extracted_habits_and_practices=hnp).exists(): ExtractedHabitsAndPracticesToPUC.objects.create(", "label": 0}, {"snippet_id": 56598, "code": "=302 assert self.response['Location']==url return self class AASATestCase(TestCase): def test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios", "label": 0}, {"snippet_id": 77569, "code": "\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package )", "label": 0}, {"snippet_id": 79317, "code": "'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time, 'closed", "label": 0}, {"snippet_id": 14737, "code": " FormField, StringField, PasswordField, validators from datetime import datetime import os.path import json import redis import re import pprint pp=pprint.PrettyPrinter(indent=4) app=Flask(__name__) app.config", "label": 0}, {"snippet_id": 19813, "code": ".GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self", "label": 1}, {"snippet_id": 59691, "code": " return m def plugin_config( self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database", "label": 0}, {"snippet_id": 58644, "code": "(): update_onboarding_step(onboarding.STEP_5, instructor.user_id) if Invite.objects.filter(instructor=instructor).exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists", "label": 1}, {"snippet_id": 65470, "code": "!=NotImplemented: self.first_start_grid.destroy() self.container=Gtk.Notebook() self.container.set_border_width(0) self.container.set_scrollable(True) self.container.set_show_border(False) self.container", "label": 0}, {"snippet_id": 58804, "code": " shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user.email) ) class Invite(models.Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey", "label": 0}, {"snippet_id": 73467, "code": ", {'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'", "label": 0}, {"snippet_id": 14765, "code": ".filters['json_pretty']=lambda value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self):", "label": 0}, {"snippet_id": 53092, "code": " data: data_to_pass=data[form] data[form][form]='Update' response=self.client.post(update_url, data_to_pass) self.assertEqual(response.status_code, 302) self.assertTemplateUsed('users/update.html') data={", "label": 1}, {"snippet_id": 36151, "code": "(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse", "label": 0}, {"snippet_id": 79377, "code": "=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict", "label": 0}, {"snippet_id": 24223, "code": "+=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports", "label": 1}, {"snippet_id": 36454, "code": ".assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS", "label": 1}, {"snippet_id": 12927, "code": "(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage", "label": 0}, {"snippet_id": 56491, "code": ", deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=", "label": 0}, {"snippet_id": 57429, "code": "(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return self.get(request, *args, ", "label": 0}, {"snippet_id": 13285, "code": ".http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms", "label": 0}, {"snippet_id": 62411, "code": " reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user", "label": 0}, {"snippet_id": 78010, "code": " data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\" self._load_config()", "label": 0}, {"snippet_id": 11318, "code": "'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration", "label": 0}, {"snippet_id": 78191, "code": "(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this prefix', type=str, default='publisher-')", "label": 0}, {"snippet_id": 84325, "code": " not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision) is not int(revision_from", "label": 0}, {"snippet_id": 64866, "code": " parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this program just checks the", "label": 0}, {"snippet_id": 3348, "code": "'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE',", "label": 0}, {"snippet_id": 61050, "code": " hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock", "label": 0}, {"snippet_id": 41762, "code": "'raw_chem_name', 'report_funcuse','raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'], \"Fieldnames passed are incorrect!\") self.objects.gt.title='Functional use' self.objects", "label": 0}, {"snippet_id": 68456, "code": "'twitter_hunter/index.html' context_object_name='hts' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request): query", "label": 0}, {"snippet_id": 50605, "code": " def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None", "label": 0}, {"snippet_id": 69543, "code": " place, and works with sudo -E in sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\"", "label": 0}, {"snippet_id": 4359, "code": "%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale", "label": 1}, {"snippet_id": 57895, "code": " ONBOARDING_SETTINGS_DEFAULT[setting_name] return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for", "label": 0}, {"snippet_id": 38127, "code": " extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to", "label": 0}, {"snippet_id": 47332, "code": "] datasource.priority=priority datasource.save() return redirect('data_source_list') return render(request, template_name,{'object_list': out}) @login_required() def data_source_detail(request, pk, template_name", "label": 0}, {"snippet_id": 58329, "code": ": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody", "label": 1}, {"snippet_id": 17789, "code": " flask.abort(404) if(time.time() -request_timestamp) > 6 * 3600: return flask.abort(404) sha1_password_hash_hash=binascii.hexlify(sha1_hash(user.password_hash.hash)).decode() if pw_hash !=sha1_password_hash_hash", "label": 0}, {"snippet_id": 41288, "code": ".get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self): ''' Confirm that the", "label": 0}, {"snippet_id": 73011, "code": "=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm", "label": 0}, {"snippet_id": 54295, "code": "(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count", "label": 0}, {"snippet_id": 3744, "code": ".assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 36533, "code": "=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, ", "label": 0}, {"snippet_id": 68106, "code": "(stream) header=[' writer.writerow(header) for event in Event.objects.filter(id__in=Hunt(id=pk).events.all()).order_by('publish_timestamp'): dt=event.publish_timestamp.astimezone(timezone('Asia/Tokyo')", "label": 0}, {"snippet_id": 29946, "code": ": SQLALCHEMY_DATABASE_URI='sqlite://' TESTING=True TWITTER_CONSUMER_KEY='consume' TWITTER_CONSUMER_SECRET='secret' WTF_CSRF_ENABLED=False SECRET_KEY='not-so-secret' class ProdConfig(Config): DEBUG=False", "label": 0}, {"snippet_id": 74525, "code": "'bdr@brown.edu' logger=logging.getLogger('etd') def login(request): if request.user.is_authenticated(): next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error", "label": 1}, {"snippet_id": 817, "code": " True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+", "label": 0}, {"snippet_id": 6644, "code": "=['GET', 'POST']) def login(): form=LoginForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user", "label": 0}, {"snippet_id": 75048, "code": " and(user_keywords !=db_keywords): return True return False @login_required def candidate_metadata(request, candidate_id): from.forms import MetadataForm try: candidate=_get_candidate(candidate_id=candidate_id", "label": 0}, {"snippet_id": 13704, "code": " confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been", "label": 0}, {"snippet_id": 1017, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"", "label": 1}, {"snippet_id": 10869, "code": " limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user", "label": 0}, {"snippet_id": 64720, "code": ": deductions.append({'points': points, 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points //", "label": 0}, {"snippet_id": 35662, "code": "=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count", "label": 1}, {"snippet_id": 6096, "code": " try to authenticate. :return: A redirect, or None if the user is authenticated. \"\"\" if request.endpoint in frozenset(['oidc_callback', 'oidc_error']): return None id_token=self.get_cookie_id_token() if", "label": 0}, {"snippet_id": 34235, "code": "): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ", "label": 1}, {"snippet_id": 27855, "code": " extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called", "label": 0}, {"snippet_id": 13245, "code": ".conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse", "label": 0}, {"snippet_id": 29479, "code": ") flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret", "label": 0}, {"snippet_id": 61534, "code": " a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"\"\" try: page, soup=request_and_scrape_page(securedrop", "label": 1}, {"snippet_id": 3682, "code": ", 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self", "label": 1}, {"snippet_id": 27889, "code": ") or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self", "label": 0}, {"snippet_id": 7182, "code": "'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind' ] column_searchable_list={'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', 'number_of_hours'", "label": 1}, {"snippet_id": 75809, "code": " ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log", "label": 0}, {"snippet_id": 34114, "code": "\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save", "label": 0}, {"snippet_id": 58093, "code": ".assertEqual(len(mail.outbox), 1) @mock.patch('core.common.utils.c_onboarding_status') @unpack @data( ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0", "label": 0}, {"snippet_id": 34058, "code": "+doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save", "label": 0}, {"snippet_id": 27548, "code": " in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary", "label": 0}, {"snippet_id": 40814, "code": ").count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method", "label": 0}, {"snippet_id": 29766, "code": " tags=[Tag.query.get(1)] added_tags=[get_or_create_tag(db.session, tag)[0] for tag in form.tags.data if tag] tags.extend(added_tags) post=Post(title=fname, created=datetime.utcnow(), image=image, tags=tags", "label": 0}, {"snippet_id": 11693, "code": "'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, ", "label": 0}, {"snippet_id": 62352, "code": " session_info) session['eduPersonAssurance']=loa session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState: ' +relay_state) response=redirect", "label": 1}, {"snippet_id": 33141, "code": "(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec) admin.site.register(PUCToTag, PUCToTagAdmin", "label": 0}, {"snippet_id": 81699, "code": " event id: %s, name: %s', event.event_type_id.name, event.name) can_subscribe=True return can_subscribe def can_unsubscribe(self, event): event_start=datetime.strptime(event.date_begin_located, '%Y-%m-%d ", "label": 0}, {"snippet_id": 12418, "code": " return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current", "label": 0}, {"snippet_id": 51303, "code": ".path.join('dependencies', platform), logfile=sys.stdout) if len(dependencies) > 0: if not dependency_collection.fetch(dependencies, self._context.env): raise AbortRunException() def get_dependency_args", "label": 0}, {"snippet_id": 26127, "code": "._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address, self._raylet_socket_name, self._plasma_store_socket_name, self._ray_params.worker_path,", "label": 1}, {"snippet_id": 1959, "code": "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 71188, "code": "') session=None if value: session=models.Session.get_by_value(value) if session is not None: session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self", "label": 0}, {"snippet_id": 69862, "code": " def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 60426, "code": "=escape_sqlite self.jinja_env.filters[\"to_css_class\"]=to_css_class pm.hook.prepare_jinja2_environment(env=self.jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?)?$>\") app.add_route(favicon", "label": 0}, {"snippet_id": 4984, "code": "/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale", "label": 0}, {"snippet_id": 5820, "code": " MemoryCredentials(dict): \"\"\" Non-persistent local credentials store. Use this if you only have one app server, and don't mind making everyone log in again after a restart. \"\"\" pass class OpenIDConnect(object): ", "label": 0}, {"snippet_id": 28689, "code": ") is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging", "label": 1}, {"snippet_id": 38464, "code": " the DataGroup object to which the document belongs. The type of the data group determines which document types the document might be among, and determines much of the available relationships and behavior", "label": 0}, {"snippet_id": 74217, "code": " request\" invalid_access_no_key_message=\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner", "label": 0}, {"snippet_id": 52107, "code": " else: return redirect(\"/\") @app.route(\"/new-team\", methods=[\"POST\"]) def create_team(): \"\"\"Create Team model and UserTeam model, updating database each time.\"\"\" name=request.form.get(\"name\", \"Untitled", "label": 0}, {"snippet_id": 17095, "code": ": g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer", "label": 0}, {"snippet_id": 74032, "code": " nacl.exceptions import CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from django", "label": 0}, {"snippet_id": 61893, "code": " for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics(page): \"\"\"Scan for common analytics scripts anywhere", "label": 0}, {"snippet_id": 7531, "code": " resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as", "label": 0}, {"snippet_id": 5679, "code": "(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example", "label": 1}, {"snippet_id": 18049, "code": " password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email", "label": 0}, {"snippet_id": 82127, "code": ".']+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance=JustURL.objects.create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save() data", "label": 0}, {"snippet_id": 32357, "code": " of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands() self.expect(TokenType.EOF) return", "label": 0}, {"snippet_id": 43022, "code": " test_hidden_fields(self): '''ExtractionScript 15 includes a functional use data group with pk=5. Its QA page should hide the composition fields ''' response=self.client.get('/qa/extractionscript/15/', follow=True)", "label": 0}, {"snippet_id": 18400, "code": " \t\ttry: \t\t\tph.verify(hashed_password,self.password) \t\texcept VerifyMismatchError: \t\t\thashed_password=ph.hash(self.password) \t\treturn hashed_password \t\"\"\" post(): \tSets class variables, does rudimentary", "label": 1}, {"snippet_id": 60158, "code": "{ \"python\":{ \"version\": \".\".join(map(str, sys.version_info[:3])), \"full\": sys.version }, \"datasette\": datasette_version, \"sqlite\":{ \"version\": sqlite_version, \"fts_versions\": fts_versions, \"extensions\"", "label": 0}, {"snippet_id": 25654, "code": " of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo", "label": 0}, {"snippet_id": 25119, "code": "(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id, _ in object_table_objects.items(): task_id_bin=ray._raylet.compute_task_id(object_id).binary() if", "label": 0}, {"snippet_id": 12882, "code": "=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url", "label": 0}, {"snippet_id": 48610, "code": " puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'", "label": 0}, {"snippet_id": 71461, "code": " import models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2.WSGIApplication()) class TestAuthMiddleware(test_base.BaseTestCase): def setUp(self)", "label": 0}, {"snippet_id": 30817, "code": " delete this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgetToDelete) session.commit() return redirect", "label": 0}, {"snippet_id": 47945, "code": "=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload", "label": 0}, {"snippet_id": 17330, "code": "=flask.current_app bp=flask.Blueprint('account', __name__) @bp.route('/login', methods=['GET', 'POST']) def login(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.LoginForm(flask.request", "label": 0}, {"snippet_id": 83222, "code": " jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs)", "label": 0}, {"snippet_id": 59911, "code": ".execute(\"SELECT load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn", "label": 0}, {"snippet_id": 1679, "code": "\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len", "label": 0}, {"snippet_id": 28459, "code": ".version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier", "label": 0}, {"snippet_id": 66402, "code": "(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text", "label": 0}, {"snippet_id": 4094, "code": "=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id", "label": 0}, {"snippet_id": 26992, "code": " the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple", "label": 0}, {"snippet_id": 36753, "code": "=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={", "label": 0}, {"snippet_id": 21123, "code": ", use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options,", "label": 0}, {"snippet_id": 84682, "code": "(group), 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs", "label": 0}, {"snippet_id": 47007, "code": " redirect('data_group_list') return render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip", "label": 0}, {"snippet_id": 54930, "code": " \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number", "label": 1}, {"snippet_id": 13866, "code": ". \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field", "label": 0}, {"snippet_id": 79308, "code": " data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time", "label": 0}, {"snippet_id": 76561, "code": " threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,", "label": 0}, {"snippet_id": 14411, "code": " in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id", "label": 0}, {"snippet_id": 72790, "code": ", redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') @login_required(login_url='/login/', redirect_field_name=None) def import_position(request): if request.method", "label": 1}, {"snippet_id": 38720, "code": ".exceptions import ValidationError from.group_type import GroupType from.extracted_text import ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical from", "label": 0}, {"snippet_id": 83371, "code": " wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title).count() if cs > 0: raise forms.ValidationError( _('The title ", "label": 1}, {"snippet_id": 36675, "code": " current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request", "label": 0}, {"snippet_id": 83674, "code": " def __init__(self, title, request, message_template=None): self.title=title self.user_ip=get_real_ip(request) self.created_at=datetime.now() if message_template is None: message_template=('Possible edit", "label": 0}, {"snippet_id": 11792, "code": " student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django", "label": 0}, {"snippet_id": 75708, "code": " error_response=[{'text': 'FAST results', 'children':[{'id': '', 'text': 'Error retrieving FAST results.'}]}] url=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout", "label": 0}, {"snippet_id": 24055, "code": " return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call", "label": 0}, {"snippet_id": 76086, "code": " language=None, version_slug=None): method=getattr( self, 'redirect_{type}'.format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self,", "label": 0}, {"snippet_id": 47624, "code": " of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears", "label": 0}, {"snippet_id": 45565, "code": ": context['edit_text_form']=ParentForm() return render(request, template_name, context) @login_required() def save_doc_form(request, pk): '''Writes changes to the data document form The request object should", "label": 1}, {"snippet_id": 79697, "code": " request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title", "label": 0}, {"snippet_id": 68241, "code": " def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) search_form=SearchForm(self.request.GET) context['search_form']=search_form count=self.object_list.count() context['count", "label": 0}, {"snippet_id": 9754, "code": ".displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl", "label": 0}, {"snippet_id": 41617, "code": " response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should start w/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start", "label": 0}, {"snippet_id": 58920, "code": " pass code=Invite( instructor=instructor, user=user, email=email, code=uuid4().hex, status='pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save() return code", "label": 0}, {"snippet_id": 3782, "code": " test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username,", "label": 0}, {"snippet_id": 83988, "code": "=ChangeSet.objects.filter( old_title=title).order_by('-revision')[0].article redirected_from=title except IndexError: article=ArticleClass(**article_args) if revision is not None: changeset=get_object_or_404(", "label": 0}, {"snippet_id": 1724, "code": " FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date,", "label": 1}, {"snippet_id": 7798, "code": "(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags':", "label": 0}, {"snippet_id": 14395, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view", "label": 0}, {"snippet_id": 28468, "code": " byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier", "label": 0}, {"snippet_id": 26251, "code": " config=self._config) assert(ray_constants.PROCESS_TYPE_RAYLET_MONITOR not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_RAYLET_MONITOR]=[ process_info ] def start_ray_processes(self", "label": 0}, {"snippet_id": 76522, "code": " the tiles for a given image. Args: rect_of_tiles: is ul -lr(lr is exclusive!) addresses of tiles at a given zoom_level. zoom_level: self-explanatory. layer_properties: Object with details about the layer", "label": 0}, {"snippet_id": 63323, "code": " as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__) @test_views", "label": 0}, {"snippet_id": 45446, "code": " redirect, get_object_or_404 from djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail", "label": 0}, {"snippet_id": 26364, "code": ", then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool", "label": 0}, {"snippet_id": 6575, "code": "\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm @auth.before_app_request def before_request(): if current_user.is_authenticated: current_user.ping() if not current_user.verify_auth_token", "label": 0}, {"snippet_id": 57658, "code": " subj_template=loader.get_template(template_subject) rendered_subj=subj_template.render(context) text_template=loader.get_template(template_text) rendered_text=text_template.render(context) send_mail( rendered_subj", "label": 0}, {"snippet_id": 42414, "code": " for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp.status_code, 200) resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_ids", "label": 0}, {"snippet_id": 49675, "code": " or filename !=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if('email' in session) or('social'", "label": 0}, {"snippet_id": 51118, "code": "=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext() options, args=self._optionParser.parse_args(argv) self._context.options=options self._context", "label": 0}, {"snippet_id": 51961, "code": " is None: flash(\"No account found with that email. Would you like to register?\") return redirect(\"/login\") else: if user_record.password !=pw: template=h.handle_bad_attempts(remaining) return render_template", "label": 0}, {"snippet_id": 4625, "code": " properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self", "label": 0}, {"snippet_id": 9883, "code": " Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"", "label": 0}, {"snippet_id": 11305, "code": " form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values", "label": 0}, {"snippet_id": 50670, "code": "(stdout.strip()) def default_platform(): if platform.system()=='Windows': return 'Windows-x86' if platform.system()=='Linux' and platform.architecture()[0]=='32bit': return 'Linux-x86' if platform.system", "label": 0}, {"snippet_id": 26009, "code": " self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI", "label": 0}, {"snippet_id": 73736, "code": "/importposition.html', {'position': position, 'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {", "label": 0}, {"snippet_id": 39980, "code": ", related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name", "label": 1}, {"snippet_id": 55827, "code": ".close() \t\treturn r \tdef writelines(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.writelines(o) \t\tf.close() \t\treturn r \tdef open(self,mode): \t\treturn open(self.path,mode) \t\t class Link(FSItem): \tdef __init__(self", "label": 0}, {"snippet_id": 58359, "code": " onboarding.VIEW_INTRODUCTION:{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{ \"html\": \"<p>preview_courselet</p>\", ", "label": 0}, {"snippet_id": 64003, "code": " IdP') raise Forbidden(\"Access not authorized\") action=get_action() return action(session_info, user) def _get_name_id(session): \"\"\" Get the SAML2 NameID of the currently logged in user. :param session", "label": 0}, {"snippet_id": 59413, "code": " KB(0==use SQLite default) \"\"\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\"", "label": 0}, {"snippet_id": 888, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False", "label": 0}, {"snippet_id": 44249, "code": ") self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url", "label": 0}, {"snippet_id": 6967, "code": ") if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token, form.password.data): flash", "label": 0}, {"snippet_id": 68316, "code": "=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append(count) return data def thirty_day_labels", "label": 0}, {"snippet_id": 35851, "code": "'' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request", "label": 0}, {"snippet_id": 47584, "code": "(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)", "label": 0}, {"snippet_id": 64181, "code": " headers_tuple=loresponse[1]['headers'] location=headers_tuple[0][1] current_app.logger.info('Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return", "label": 0}, {"snippet_id": 28219, "code": " to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND", "label": 0}, {"snippet_id": 27326, "code": ".num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients self.redis_password=redis_password self.plasma_directory=plasma_directory self.worker_path=worker_path self.huge_pages=huge_pages self", "label": 0}, {"snippet_id": 61394, "code": " subscriber to the list of queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger", "label": 0}, {"snippet_id": 61671, "code": " cache_control_nostore_set=validate_nostore(page), cache_control_private_set=validate_private(page), referrer_policy_set_to_no_referrer=validate_no_referrer_policy(page), ) def scan(securedrop: DirectoryEntry", "label": 1}, {"snippet_id": 21230, "code": "\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address", "label": 0}, {"snippet_id": 77224, "code": " tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified target.", "label": 0}, {"snippet_id": 39292, "code": "\", max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True", "label": 0}, {"snippet_id": 73172, "code": "(UserCreationForm): text=CreateAccountFormText.create_account email_text=CreateAccountFormText.email_address password_text=CreateAccountFormText.choose_password password_confirm_text=CreateAccountFormText", "label": 0}, {"snippet_id": 11450, "code": " order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order[", "label": 0}, {"snippet_id": 36899, "code": "{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) ", "label": 0}, {"snippet_id": 71718, "code": " test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user)", "label": 0}, {"snippet_id": 1069, "code": "(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content", "label": 0}, {"snippet_id": 38873, "code": "(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return self.type=", "label": 0}, {"snippet_id": 54538, "code": " \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once, will create multiple entries \"\"\" @app.route('/updatedb/politicians') def update_all(): return insert_politicians_in_db(", "label": 0}, {"snippet_id": 67918, "code": ".mixins import PaginationMixin from django.db.models import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from", "label": 0}, {"snippet_id": 81581, "code": "'website_published': True}) new_repeating_event.date_end=new_end_date new_repeating_event.date_begin=new_start_date old_repeating_event.fit_repetition_enabled=False old_repeating_event.fit_repetition='", "label": 0}, {"snippet_id": 64613, "code": "'hex', 'id', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'input', 'int', 'InterruptedError', 'IOError', 'IsADirectoryError', 'isinstance', 'issubclass', 'iter', 'KeyboardInterrupt", "label": 0}, {"snippet_id": 55144, "code": ") \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir", "label": 0}, {"snippet_id": 84817, "code": ".POST['body'] diffs=dmp.diff_main(current_article.content, content) dmp.diff_cleanupSemantic(diffs) return HttpResponse(dmp.diff_prettyHtml(diffs), content_type='text/html') def backlinks(request, title", "label": 0}, {"snippet_id": 72464, "code": "[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self): return CephFS.list_filesystems() @Endpoint('GET', '/rgw/buckets') def buckets(self, user_id=None): return RgwClient.instance(user_id).get_buckets", "label": 0}, {"snippet_id": 9241, "code": "(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags':", "label": 0}, {"snippet_id": 61286, "code": " disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection", "label": 0}, {"snippet_id": 79263, "code": ") def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id': organization_id}) except Exception as e: log.warn", "label": 0}, {"snippet_id": 29132, "code": " If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def is_main_thread(): return threading", "label": 0}, {"snippet_id": 37339, "code": "'priority'].widget.attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes", "label": 1}, {"snippet_id": 58475, "code": ":{ \"done\": False, \"settings\":{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" } }, onboarding.PREVIEW_COURSELET:{ \"done\": False, \"settings\":{ ", "label": 0}, {"snippet_id": 28277, "code": "\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj)", "label": 0}, {"snippet_id": 61458, "code": " jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs)", "label": 0}, {"snippet_id": 66728, "code": "\"unlock_failed_revealer\") unlock_failed_revealer.set_reveal_child(not unlock_failed_revealer.get_reveal_child()) revealer_timer=threading.Timer(3.0, self.hide_unlock_failed_revealer) revealer_timer.start", "label": 0}, {"snippet_id": 64880, "code": " string. If this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument('-t', '--test_case', required", "label": 0}, {"snippet_id": 14511, "code": "(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider'", "label": 0}, {"snippet_id": 76789, "code": " \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: ", "label": 0}, {"snippet_id": 79381, "code": "(data_request, data_dict): data_request.title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if", "label": 0}, {"snippet_id": 2637, "code": " expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def", "label": 0}, {"snippet_id": 30299, "code": " return response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response.headers['Content-Type", "label": 0}, {"snippet_id": 10195, "code": " True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year),", "label": 0}, {"snippet_id": 43218, "code": " from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user", "label": 1}, {"snippet_id": 27262, "code": " redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None,", "label": 0}, {"snippet_id": 9957, "code": " of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\"", "label": 0}, {"snippet_id": 80570, "code": "\\\\'\\')\"') @handled_slot(bool) def restart(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble", "label": 1}, {"snippet_id": 45145, "code": " select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') ", "label": 0}, {"snippet_id": 84897, "code": "\"\\/%s\\)\" % title) found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match: found_links", "label": 0}, {"snippet_id": 51225, "code": "\", \".join(argstring+kwargstring)) subprocess.check_call(*args, **kwargs) def python(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env", "label": 0}, {"snippet_id": 57060, "code": ".CONCEPTS: permission=concept.replace('.','.add_') concept_model=apps.get_model(concept) if not permission in concepts_permitted_by_employee: continue disabled=False url=concept_model._url.format('new/", "label": 0}, {"snippet_id": 14579, "code": "'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={", "label": 0}, {"snippet_id": 84681, "code": "': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404", "label": 0}, {"snippet_id": 63552, "code": "={'Cookie': cookie}, data={'csrf': csrft}): session['_csrft_']=csrft response2=self.app.dispatch_request() self.assertEqual(response2.status, '200 OK') self.assertIn('https://idp.example.com/simplesaml", "label": 0}, {"snippet_id": 18983, "code": " unicode_literals from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation", "label": 0}, {"snippet_id": 60971, "code": "' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate", "label": 0}, {"snippet_id": 83381, "code": " cs=ChangeSet.objects.filter(old_title=title).count() if cs > 0: raise forms.ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def", "label": 1}, {"snippet_id": 38555, "code": " ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank", "label": 0}, {"snippet_id": 50818, "code": " flatten_string_list(arglist): \"\"\" Assemble a list of string, such as for a subprocess call. Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings", "label": 0}, {"snippet_id": 32506, "code": "(0,(filename, os.O_RDONLY)) else: return None def next(self): self.last=self.token self.token=next(self.tokens, None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype", "label": 0}, {"snippet_id": 12756, "code": ". Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response", "label": 0}, {"snippet_id": 49410, "code": " instance=datadocument) if form.is_valid(): if form.has_changed(): form.save() return redirect('data_document', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name", "label": 0}, {"snippet_id": 77539, "code": " import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field", "label": 0}, {"snippet_id": 47279, "code": " registered=Count('datagroup__datadocument') uploaded =Count('datagroup__datadocument', filter=Q(datagroup__datadocument__matched=True)) extracted =Count('datagroup__datadocument__extractedtext') ds_list", "label": 0}, {"snippet_id": 17038, "code": " expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial=data)", "label": 0}, {"snippet_id": 3284, "code": " does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure", "label": 0}, {"snippet_id": 60406, "code": "=True) self.jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u: urllib.parse.quote_plus(u) self.jinja_env.filters[\"escape_sqlite\"]=escape_sqlite self", "label": 0}, {"snippet_id": 42384, "code": "').first() resp=self.client.get(f'/datagroup/%s/' % dg_co.id) self.assertIn(b'Download Raw', resp.content) dg_ids=DataDocument.objects.filter( id__in=ExtractedChemical.objects.all().values('extracted_text_id", "label": 0}, {"snippet_id": 76556, "code": " WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg", "label": 0}, {"snippet_id": 25795, "code": "._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address", "label": 0}, {"snippet_id": 7465, "code": ".filter_by(office_id=csr.office_id)\\ .filter(or_(Exam.exam_returned_date.is_(None), Exam.exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam", "label": 0}, {"snippet_id": 17780, "code": " pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp) > 6 * 3600: return flask.abort(404", "label": 0}, {"snippet_id": 51650, "code": " for i in range(len(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':", "label": 0}, {"snippet_id": 35104, "code": "[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget", "label": 0}, {"snippet_id": 77066, "code": " db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type=request_type self.db_type=db_type self", "label": 0}, {"snippet_id": 83334, "code": " model=Article exclude=('creator', 'creator_ip', 'group', 'created_at', 'last_update') def clean_title(self): \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for reserved", "label": 1}, {"snippet_id": 83007, "code": " event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running on :type", "label": 0}, {"snippet_id": 8772, "code": " account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year", "label": 0}, {"snippet_id": 17773, "code": "=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time()", "label": 0}, {"snippet_id": 42918, "code": " response.content) scr=Script.objects.annotate(num_ets=Count( 'extractedtext')).filter(num_ets__gt=100).first() pk=ExtractedText.objects.filter(extraction_script=scr).first().pk response=self.client.get(f", "label": 0}, {"snippet_id": 62213, "code": " else: return False def validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache", "label": 0}, {"snippet_id": 49548, "code": " import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app.config['OAUTH_CREDENTIALS']={ 'facebook':{ 'id': '604820106335654',", "label": 1}, {"snippet_id": 57454, "code": " transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if transaction.closed: return redirect(", "label": 0}, {"snippet_id": 58491, "code": " \"settings\":{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } } status_mock=status_mock.return_value status_mock.find_one.return_value={ onboarding", "label": 0}, {"snippet_id": 33493, "code": "(1, ethylparaben_stats['pucs_n']) def test_dtxsid_dds_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528", "label": 0}, {"snippet_id": 33021, "code": ".get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products", "label": 0}, {"snippet_id": 69593, "code": "(tljh_config_src, tljh_config_dest) def setup_plugins(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda.ensure_pip_packages(HUB_ENV_PREFIX, plugins) pm=pluggy.PluginManager('tljh'", "label": 0}, {"snippet_id": 39759, "code": " of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self,", "label": 0}, {"snippet_id": 6864, "code": " flash('Your password has been updated.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_password.html\", form=form) @auth.route('/reset', methods", "label": 0}, {"snippet_id": 31867, "code": "(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions)", "label": 1}, {"snippet_id": 73831, "code": ".positions.all().order_by(sort_by), 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request)", "label": 0}, {"snippet_id": 49079, "code": "(request, pk): template_name='data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1 if doc.detail_page_editable else 0 ParentForm", "label": 0}, {"snippet_id": 50422, "code": "(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True:", "label": 0}, {"snippet_id": 47147, "code": ") context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form", "label": 0}, {"snippet_id": 50191, "code": "=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email, password_hash) session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect", "label": 0}, {"snippet_id": 25223, "code": " shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\"", "label": 0}, {"snippet_id": 76373, "code": " layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor else _NO_DATA_PIXELS) alpha=_OPAQUE_ALPHA if set_pixel_to_bgcolor else _TRANSPARENT_ALPHA if layer_properties", "label": 0}, {"snippet_id": 15539, "code": "')[0]['start_day']) if get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models", "label": 0}, {"snippet_id": 9020, "code": " openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from", "label": 0}, {"snippet_id": 14165, "code": " _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', ", "label": 0}, {"snippet_id": 47820, "code": " filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats", "label": 0}, {"snippet_id": 9189, "code": "(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog", "label": 0}, {"snippet_id": 40408, "code": "< 100 and len(doc_text_ids) > 0: texts=ExtractedText.objects.filter(pk__in=doc_text_ids) elif len(doc_text_ids) >=100: random_20=math.ceil(len(doc_text_ids)/5) shuffle(doc_text_ids) texts=ExtractedText", "label": 0}, {"snippet_id": 62078, "code": "(page.headers['Server']) if 'nginx' in server_header or 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not", "label": 0}, {"snippet_id": 47801, "code": "['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv", "label": 0}, {"snippet_id": 61636, "code": "), mime_sniffing_blocked=validate_no_sniff(page), noopen_download=validate_download_options(page), xss_protection=validate_xss_protection(page), clickjacking_protection=validate_clickjacking_protection", "label": 1}, {"snippet_id": 75057, "code": "(request, candidate_id): from.forms import MetadataForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register", "label": 0}, {"snippet_id": 31505, "code": ".password_validation.' 'NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True STATIC_ROOT=os.environ.get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static", "label": 0}, {"snippet_id": 64945, "code": " time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information about exceptions that occur\") args=parser.parse_args() vlevel=args.verbose name=args.name", "label": 0}, {"snippet_id": 60885, "code": "(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on", "label": 0}, {"snippet_id": 74927, "code": "[0] context_data={'candidate': candidate} other_candidacies=Candidate.objects.filter(person__netid=request.user.username).exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies'", "label": 0}, {"snippet_id": 67631, "code": ".objects.filter(event=pk) context=super().get_context_data(**kwargs) context['event']=event_obj context['objects']=objects_obj context['categories']=event_obj.getUniqCategory() context['types']=event_obj", "label": 0}, {"snippet_id": 16275, "code": "(request.POST or None, tournament=t, initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer.objects.get_or_create", "label": 0}, {"snippet_id": 38180, "code": " natural_key(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else", "label": 0}, {"snippet_id": 77112, "code": "'ll append '?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path=urlparse.urlsplit(target_url).path[1:] layer_ns=\"[%s]:%s\" %(target_path, str(server_layer_def[\"id\"])", "label": 0}, {"snippet_id": 10621, "code": "=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 1}, {"snippet_id": 19674, "code": " type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default", "label": 0}, {"snippet_id": 23873, "code": "=\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle", "label": 0}, {"snippet_id": 62060, "code": ".encoding.upper() in('UTF-8', 'ISO-8859-1'): return True else: return False def validate_server_software(page): if 'Server' not in page.headers: return True else: server_header=str.lower(page.headers['Server']", "label": 0}, {"snippet_id": 35556, "code": " None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks", "label": 0}, {"snippet_id": 72134, "code": " daemons, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons", "label": 0}, {"snippet_id": 9427, "code": "' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if", "label": 0}, {"snippet_id": 5109, "code": " from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp", "label": 0}, {"snippet_id": 4955, "code": " \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 49822, "code": " email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) os", "label": 0}, {"snippet_id": 6507, "code": ".step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN'", "label": 0}, {"snippet_id": 6686, "code": "('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for", "label": 0}, {"snippet_id": 73327, "code": "'home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form, name=", "label": 0}, {"snippet_id": 12000, "code": "\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register", "label": 0}, {"snippet_id": 45596, "code": " appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST['referer'] if request.POST[", "label": 1}, {"snippet_id": 4659, "code": "): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %", "label": 0}, {"snippet_id": 69576, "code": "): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest", "label": 0}, {"snippet_id": 9503, "code": ") def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that", "label": 0}, {"snippet_id": 65187, "code": " as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points, 'failed to compile code') output_json(args.points, deductions) return deductions", "label": 0}, {"snippet_id": 10313, "code": "'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user", "label": 0}, {"snippet_id": 65625, "code": " Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk.ResponseType.OK", "label": 0}, {"snippet_id": 14235, "code": "(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to", "label": 0}, {"snippet_id": 62964, "code": "': base64.b64encode(authr), 'RelayState': came_from}): oq_cache=OutstandingQueriesCache(session) oq_cache.set(token, came_from) resp=self.app.dispatch_request() self.assertEquals(resp.status_code, 302)", "label": 0}, {"snippet_id": 39590, "code": "=True, blank=True) doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete", "label": 0}, {"snippet_id": 4067, "code": " terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories", "label": 0}, {"snippet_id": 41950, "code": "/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') self.objects.dg.group_type=GroupType.objects.create( title=", "label": 0}, {"snippet_id": 56340, "code": " author=orm_person) experience.picture=pic experience.save() return self def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self, dynamic_link", "label": 0}, {"snippet_id": 46089, "code": "(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +'/pdf') afn=doc.get_abstract_filename() fs.save(afn, f) zf.write(store +'/pdf/' +afn,", "label": 0}, {"snippet_id": 73916, "code": ": PositionText, 'userVisibleText': PositionsViewText, 'position': position} @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request, 'position", "label": 1}, {"snippet_id": 42122, "code": ".first().id}/').content.decode('utf8') self.assertIn('0 extracted', response, 'Data Group should contain a count of 0 total extracted documents') self.objects.doc.extracted=True self.objects.doc.save()", "label": 0}, {"snippet_id": 25538, "code": " required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False,", "label": 0}, {"snippet_id": 78937, "code": ") tk.enqueue_job(_send_mail,[users, 'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action", "label": 1}, {"snippet_id": 48475, "code": " upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer", "label": 0}, {"snippet_id": 26109, "code": ". \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name or get_raylet_socket_name()) self.prepare_socket_file(self._raylet_socket_name) stdout_file, stderr_file", "label": 0}, {"snippet_id": 24525, "code": " updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell()) next_line=self", "label": 1}, {"snippet_id": 53796, "code": " self.data=SharedCache() self.files=SharedCache() self.title=self.definition.get('title') self.subtitle=self.definition.get('subtitle') self.summary=self.definition.get('summary') self.library_includes=", "label": 0}, {"snippet_id": 58163, "code": ": 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding", "label": 1}, {"snippet_id": 20257, "code": " messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message()", "label": 0}, {"snippet_id": 20697, "code": " node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker", "label": 0}, {"snippet_id": 50523, "code": ".handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle) class PosixUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"HOME\"]+\"/.openhome-build/\"", "label": 0}, {"snippet_id": 23639, "code": " setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper())", "label": 1}, {"snippet_id": 41386, "code": ".group_type.code)[1] childform_model=child_formset.__dict__.get('queryset').__dict__.get('model') self.assertEqual(dd_child_model, childform_model) def test_curated_chemical(self): ''''Confirm that if an", "label": 0}, {"snippet_id": 30661, "code": ", grudgets=grudgets) else: return render_template('grudgets.html', grudgets=grudgets) @app.route('/grudget/new/', methods=['GET', 'POST']) def newGrudget(): if 'username' not in login_session: return redirect", "label": 0}, {"snippet_id": 79699, "code": " string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id", "label": 0}, {"snippet_id": 33621, "code": "\"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(0, ethylparaben_stats['products_n'], 'There should", "label": 0}, {"snippet_id": 37196, "code": " self.fields['weight_fraction_type'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields", "label": 0}, {"snippet_id": 6152, "code": " self.set_cookie_id_token(id_token) except AccessTokenRefreshError: logger.debug(\"Expired ID token, can't refresh credentials\", exc_info=True) del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server", "label": 0}, {"snippet_id": 38818, "code": ".ForeignKey('DataSource', on_delete=models.CASCADE) fs_id=models.UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100)", "label": 0}, {"snippet_id": 4721, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post", "label": 0}, {"snippet_id": 75355, "code": " return HttpResponseRedirect(reverse('register')) candidate.thesis.submit() return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) @login_required @permission_required(", "label": 0}, {"snippet_id": 2709, "code": ".is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, ", "label": 0}, {"snippet_id": 8553, "code": " commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache", "label": 0}, {"snippet_id": 67077, "code": "'tm_meta']=tm.getMetaFromSample(filehash) context['tm_http']=tm.getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report", "label": 0}, {"snippet_id": 66525, "code": " chosen\") self.logging_manager.log_debug(\"Keyfile path: \" +keyfile_path) def on_composite_unlock_select_button_clicked(self, widget): filechooser_opening_dialog=Gtk.FileChooserDialog( \"Choose Keyfile\", self", "label": 0}, {"snippet_id": 18293, "code": " also exists in the database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username", "label": 1}, {"snippet_id": 56059, "code": ".PUBLIC_DOMAIN, PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='", "label": 0}, {"snippet_id": 42531, "code": " import TestCase from django.test.client import Client from lxml import html from django.urls import resolve from django.contrib.auth.models import User from dashboard.tests.loader import fixtures_standard", "label": 0}, {"snippet_id": 41190, "code": " record for data group types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number':['47']", "label": 0}, {"snippet_id": 71552, "code": ".Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id", "label": 0}, {"snippet_id": 3778, "code": " test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client(", "label": 0}, {"snippet_id": 32020, "code": " recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto() UNKNOWN=enum.auto(", "label": 0}, {"snippet_id": 33063, "code": "'content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site", "label": 0}, {"snippet_id": 11791, "code": " Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages", "label": 0}, {"snippet_id": 84874, "code": " old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b)\", title) if m", "label": 0}, {"snippet_id": 9283, "code": ".get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings", "label": 0}, {"snippet_id": 61433, "code": " :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue", "label": 0}, {"snippet_id": 2407, "code": " endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 81632, "code": " +=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name).lower() event_start=datetime.strptime(event.date_begin, '%Y-%m-%d %H", "label": 0}, {"snippet_id": 56308, "code": "'pachatary://app/experiences/AsdE43E4') class ScenarioMaker: def given_an_experience_on_db(self, title, description, share_id, pic): orm_person=ORMPerson.objects.create() ORMProfile.objects.create(person", "label": 0}, {"snippet_id": 20124, "code": " xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys))", "label": 0}, {"snippet_id": 59559, "code": "\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path(filepath, name", "label": 0}, {"snippet_id": 31664, "code": " request.user.save() max_age=10 * 365 * 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME, locale, max_age=max_age, expires=(datetime.utcnow() +timedelta(seconds=max_age)).strftime( '%a, %d-%b-%Y ", "label": 0}, {"snippet_id": 41997, "code": " test_bulk_create_post(self): '''test the POST to create Products and link if needed''' doc=DataDocument.objects.create(data_group=self.objects.dg) response=self.client.get(f'/datagroup/{self.objects.dg.pk}", "label": 0}, {"snippet_id": 84552, "code": " HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir=", "label": 0}, {"snippet_id": 24488, "code": " monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1) for log_filename in", "label": 1}, {"snippet_id": 33401, "code": " dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n'", "label": 0}, {"snippet_id": 52159, "code": "-invitation\", methods=[\"POST\"]) def update_team_membership(): \"\"\"Update UserTeam membership field's value to true; update Dashboard with a redirect.\"\"\" user_id=session[\"user_id\"] team_id=request.form.get", "label": 0}, {"snippet_id": 37011, "code": " there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat", "label": 1}, {"snippet_id": 29292, "code": " Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string(name) if hasattr(mod, 'bp'):", "label": 0}, {"snippet_id": 63087, "code": "'], eppn) self.acs('/login', eppn, _check) def test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass", "label": 0}, {"snippet_id": 21104, "code": ".worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password", "label": 0}, {"snippet_id": 20806, "code": " url.\"\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the", "label": 0}, {"snippet_id": 48455, "code": ") queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form", "label": 0}, {"snippet_id": 40912, "code": " django.test import TestCase, override_settings from django.core.exceptions import ObjectDoesNotExist from dashboard.forms import * from factotum.settings import EXTRA from dashboard.tests.loader import *", "label": 0}, {"snippet_id": 13952, "code": "'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name':", "label": 0}, {"snippet_id": 70758, "code": " import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd", "label": 0}, {"snippet_id": 70145, "code": "': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files", "label": 0}, {"snippet_id": 74628, "code": ".DoesNotExist: pass return person_instance def get_shib_info_from_request(request): info={} info['last_name']=request.META.get('Shibboleth-sn', '') info['first_name']=request.META.get('Shibboleth-givenName', '", "label": 0}, {"snippet_id": 22671, "code": " t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this as a thread to flush profile data in the background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data(", "label": 1}, {"snippet_id": 73573, "code": " if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete() return", "label": 1}, {"snippet_id": 5973, "code": " OAuth2WebServerFlow) self.cookie_serializer=TimedJSONWebSignatureSerializer( app.config['SECRET_KEY']) try: self.credentials_store=app.config['OIDC_CREDENTIALS_STORE'] except KeyError: pass def get_cookie_id_token(self", "label": 0}, {"snippet_id": 9555, "code": "=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise", "label": 0}, {"snippet_id": 42959, "code": "=ExtractedText.objects.filter( extraction_script_id=scr.id).filter(qa_group=None).first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') self.assertGreater(ExtractedText.objects.filter( qa_group", "label": 0}, {"snippet_id": 6223, "code": ") flow.redirect_uri=url_for('oidc_callback', _external=True) return flow def redirect_to_auth_server(self, destination): \"\"\" Set a CSRF token in the session, and redirect to the IdP. :param destination", "label": 0}, {"snippet_id": 45708, "code": "(DataDocument, pk=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required", "label": 0}, {"snippet_id": 47348, "code": "'data_source/datasource_detail.html'): datasource=get_object_or_404(DataSource, pk=pk,) docs=DataDocument.objects.filter(data_group__in=DataGroup.objects.filter(data_source=datasource)) datasource.registered=(len", "label": 0}, {"snippet_id": 37687, "code": "', 'occupation', 'facility'] class ExtractedHHDocEditForm(ExtractedHHDocForm): class Meta(ExtractedHHDocForm.Meta): fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm", "label": 0}, {"snippet_id": 44966, "code": "'habits') self.assertTrue(hp_formset.is_valid()) def test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 56839, "code": "=get_concept_and_form_from_kwargs(**kwargs) extra_context['concept']=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context)", "label": 0}, {"snippet_id": 52269, "code": "=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page", "label": 0}, {"snippet_id": 32931, "code": " SetUpInputRedirect(cmd) if(\">\" in cmd): SetUpOutputRedirect(cmd) if(\">>\" in cmd): SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(", "label": 1}, {"snippet_id": 37021, "code": "-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols)", "label": 1}, {"snippet_id": 13772, "code": " destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(", "label": 0}, {"snippet_id": 8906, "code": "']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 30289, "code": "(result.get('error')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(", "label": 0}, {"snippet_id": 64921, "code": " to a return value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5, 6], last=8)==None''\") parser.add_argument('-v', '--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time", "label": 0}, {"snippet_id": 53027, "code": ".get_object(), self.user ) def test_updating_user_info(self): update_url=reverse('users:update') data={ 'purchase_step_form':{'purchase_step': PS_DAP}, 'marital_status_form':{'status': SC_SI}, 'first_home_form'", "label": 0}, {"snippet_id": 53718, "code": ") super(RedirectBuffer, self).write(*args, **kwargs) return self.redirection_source.write(*args, **kwargs) def __getattribute__(self, item): \"\"\" :param item: :return: \"\"\" abort_thread() if item=='write", "label": 0}, {"snippet_id": 29816, "code": " get_or_create_tag(session, tagname): instance=Tag.query.filter_by(name=tagname).first() if instance: return instance, False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session", "label": 0}, {"snippet_id": 21329, "code": " usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this method", "label": 0}, {"snippet_id": 28214, "code": " If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message,", "label": 0}, {"snippet_id": 14995, "code": ") (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type", "label": 0}, {"snippet_id": 6299, "code": " application, was issued by the Apps domain we expected, and that the email address has been verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False if id_token", "label": 0}, {"snippet_id": 6693, "code": ".html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET', 'POST", "label": 0}, {"snippet_id": 51568, "code": ":builder.add_bool_option, 'python':builder.python, 'shell':builder.shell, 'rsync':builder.rsync, 'build_step':builder.build_step, 'build_condition':builder.build_condition, 'default_platform':default_platform", "label": 0}, {"snippet_id": 81725, "code": ", reverse, redirect, HttpResponse from django.urls import reverse_lazy from django.views import View from django.views.generic import CreateView, ListView, UpdateView, DeleteView from django.contrib.auth", "label": 0}, {"snippet_id": 384, "code": "-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header", "label": 0}, {"snippet_id": 54384, "code": ".all() politicians=[] for pol in pols: tokens=pol.name.title().split(' ') politician={ 'value': pol.name.title(), 'tokens': tokens, 'search_count': pol.search_count } politicians.append(politician) resp", "label": 0}, {"snippet_id": 15426, "code": "': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command'", "label": 0}, {"snippet_id": 10987, "code": " Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers", "label": 0}, {"snippet_id": 73001, "code": "'position': position }) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return", "label": 0}, {"snippet_id": 59569, "code": " os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self, key): return", "label": 0}, {"snippet_id": 3751, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id)", "label": 0}, {"snippet_id": 62154, "code": "\"X-Content-Type-Options\", \"nosniff\", ) def validate_download_options(page): return validate_security_header( page, \"X-Download-Options\", \"noopen\", ) def validate_clickjacking_protection(page): return validate_security_header", "label": 0}, {"snippet_id": 72612, "code": ".POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.", "label": 0}, {"snippet_id": 58374, "code": ", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro", "label": 1}, {"snippet_id": 63236, "code": "): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'TOKEN_SERVICE_URL", "label": 0}, {"snippet_id": 17464, "code": ".url_for('account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '<strong>Login failed!</strong> Account is not activated.'), 'danger') return flask.redirect(flask.url_for", "label": 0}, {"snippet_id": 41895, "code": "=self.objects.dg) doc.matched=True self.objects.doc.matched=True doc.save() self.objects.doc.save() response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk", "label": 0}, {"snippet_id": 56032, "code": "'.format(settings.APP_DEEPLINK_DOMAIN, EXPERIENCE_DEEPLINK_PATH, experience_share_id) response=HttpResponse('', status=302) response['Location']=link return response def profile_redirect(request, username", "label": 0}, {"snippet_id": 64263, "code": "=identity) logout_redirect_url=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') next_page=session.get('next', logout_redirect_url) next_page=request.args.get('next', next_page) next_page=request.form.get(", "label": 0}, {"snippet_id": 52365, "code": "\"\"\"Update database with user_id for the project.\"\"\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id) return \"HTTP-status-code:", "label": 0}, {"snippet_id": 30606, "code": "<int:grudge_id>/JSON') def grudgeJSON(grudget_id, grudge_id): grudge=session.query(Grudge).filter_by(id=grudge_id).one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON", "label": 0}, {"snippet_id": 47517, "code": ".shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models import * from dashboard", "label": 1}, {"snippet_id": 9467, "code": " request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset", "label": 0}, {"snippet_id": 39876, "code": ".DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script, on_delete=models.CASCADE, null=True, blank=True) rawchem_ptr=models", "label": 0}, {"snippet_id": 81146, "code": "'subscription_type', '=', 'ai_montly'), ('subscription_partner', '=', partner.id)]) cf_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'cf_montly'), ('subscription_partner', ", "label": 0}, {"snippet_id": 54865, "code": " problem_text_students.items(): \t\t\tif len(s) > 1: \t\t\t\tprint(t,s) def process_problem_scores(code_list): \tproblems=[] \tclass problem(object): \t\tdef __init__(self,student,book_edition,chapter,number,code", "label": 1}, {"snippet_id": 24244, "code": "=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key", "label": 1}, {"snippet_id": 13368, "code": ".errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import", "label": 0}, {"snippet_id": 37727, "code": "='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit();' }) def include_extract_form(dg): '''Returns the ExtractionScriptForm based on conditions of DataGroup type as well as", "label": 0}, {"snippet_id": 81433, "code": "=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta(days=+1) if self._event_does_not_exist(old_repeating_event, new_end_date)", "label": 1}, {"snippet_id": 32126, "code": " self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is malformed and a token", "label": 0}, {"snippet_id": 19208, "code": " num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis", "label": 1}, {"snippet_id": 54012, "code": " except Exception: return if len(contents) > 0: self.body.append(render_texts.preformatted_text(contents)) self._last_update_time=time.time() return contents def read_stderr(self): \"\"\" Returns the current", "label": 0}, {"snippet_id": 10694, "code": "'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME'", "label": 0}, {"snippet_id": 64345, "code": " user{0} ' 'Performing local logout'.format( session['eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page) else: http_info=client.handle_logout_request( request.form['SAMLRequest'], subject_id", "label": 0}, {"snippet_id": 47736, "code": ".filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate", "label": 0}, {"snippet_id": 19312, "code": ".SCRIPT_MODE and driver_id !=self.worker.task_driver_id.binary()): return try: function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc(", "label": 0}, {"snippet_id": 82092, "code": " form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs", "label": 0}, {"snippet_id": 6131, "code": "\"Expired ID token, credentials missing\", exc_info=True) return self.redirect_to_auth_server(request.url) try: credentials.refresh(self.http) id_token=credentials.id_token self.credentials_store[id_token[", "label": 0}, {"snippet_id": 71734, "code": "=user.get_id() req._load_user() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create", "label": 0}, {"snippet_id": 58946, "code": "\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save(self, force_insert=False, force_update=False, using=None, update_fields=None", "label": 0}, {"snippet_id": 33946, "code": " for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 40148, "code": "'instance') previous_raw_cas=instance.tracker.previous('raw_cas') previous_raw_chem_name=instance.tracker.previous('raw_chem_name') if instance.tracker.has_changed('raw_cas') or \\ instance.tracker.has_changed", "label": 0}, {"snippet_id": 39464, "code": ") raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__", "label": 0}, {"snippet_id": 26957, "code": " redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables", "label": 0}, {"snippet_id": 53123, "code": ".view.get_object().purchase_step, PS_DAP) data={'status': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().status, None) data={'house_type': 8, 'house_age': 8, 'house_cond': 8}", "label": 0}, {"snippet_id": 71356, "code": "._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/]+)/*(\\S*)' % (self._config['base_uri'])) def __call__(self, environ, start_response): if environ['PATH_INFO'].startswith('/_ah/'):", "label": 0}, {"snippet_id": 52638, "code": "\"/actions-board\") def display_user_actions_board(): \"\"\"Retrieve user and project data from db, render projects on action page. \"\"\" if session.get(\"is_logged_in\") is True: user_id=session.get(\"user_id\")", "label": 0}, {"snippet_id": 78921, "code": " datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition(org_dict) users.discard(context", "label": 1}, {"snippet_id": 7701, "code": " login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword", "label": 0}, {"snippet_id": 22666, "code": "=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this as a thread to flush profile data", "label": 1}, {"snippet_id": 14299, "code": "=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number", "label": 0}, {"snippet_id": 72340, "code": "'cluster_id': cluster_id, 'status': status_dict[cluster_id][daemon_id]['status'], 'desc': status_dict[cluster_id][daemon_id]['desc'] } for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ]", "label": 0}, {"snippet_id": 14945, "code": "[], 'y':[] } } dates=[key for key in values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$', name): attrs=name.split('", "label": 0}, {"snippet_id": 1432, "code": "=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory", "label": 1}, {"snippet_id": 4989, "code": " response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation", "label": 0}, {"snippet_id": 49720, "code": "]=filename try: with open(filepath) as f: editor_content=f.read() except FileNotFoundError: editor_content=\"\" return render_template(\"editor.html\", editor_content=editor_content) @app.route('/openFile'", "label": 0}, {"snippet_id": 43198, "code": " import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver", "label": 1}, {"snippet_id": 19148, "code": ": \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client", "label": 1}, {"snippet_id": 8799, "code": " except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), ", "label": 0}, {"snippet_id": 26871, "code": "(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some", "label": 0}, {"snippet_id": 20252, "code": " there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients:", "label": 0}, {"snippet_id": 42256, "code": ".') fu=GroupType.objects.create(title='Functional use') self.objects.dg.group_type=fu self.objects.dg.save() response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertNotIn('<th>Product", "label": 0}, {"snippet_id": 1606, "code": "=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath", "label": 0}, {"snippet_id": 61532, "code": " \"\"\" Takes a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"\"\" try: page, soup=request_and_scrape_page", "label": 1}, {"snippet_id": 63866, "code": "\"\" return _authn('change-password-action', force_authn=True) @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account", "label": 0}, {"snippet_id": 78127, "code": "'key'] in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in", "label": 0}, {"snippet_id": 21396, "code": " if check_alive: raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate(", "label": 0}, {"snippet_id": 29138, "code": "\nimport os from flask import Flask, g, url_for from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_admin import Admin, helpers from flask_security import Security from flask_login", "label": 1}, {"snippet_id": 21959, "code": " of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object", "label": 0}, {"snippet_id": 27319, "code": " self.driver_mode=driver_mode self.redirect_worker_output=redirect_worker_output self.redirect_output=redirect_output self.num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients self", "label": 0}, {"snippet_id": 52025, "code": " session[\"team_id\"]=None if session.get(\"new_user\"): flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if", "label": 0}, {"snippet_id": 55533, "code": "(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): ", "label": 0}, {"snippet_id": 24751, "code": " __future__ import print_function import argparse import logging import os import time import traceback import redis import ray from ray.autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import", "label": 0}, {"snippet_id": 69249, "code": " have pip packages. Keeping all python packages in the hub environment be installed with pip prevents accidental mixing of python and conda packages! \"\"\" conda.ensure_pip_packages(prefix,[ 'jupyterhub=", "label": 1}, {"snippet_id": 72029, "code": "): return Task(\"nfs/{}\".format(name), metadata, wait_for, partial(serialize_dashboard_exception, include_http_status=True))(func) return composed_decorator @ApiController('/nfs-ganesha/export', Scope.NFS_GANESHA", "label": 0}, {"snippet_id": 13305, "code": " import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx", "label": 0}, {"snippet_id": 26506, "code": " continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process])", "label": 0}, {"snippet_id": 28657, "code": "(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus is not None: resources[\"GPU\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus", "label": 0}, {"snippet_id": 51076, "code": ".startswith(\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps", "label": 0}, {"snippet_id": 81024, "code": ".seats_available > 0 and event.seats_availability==u'limited': _logger.info('Found existing registration, set state to open(confirmed)') existing_registration.state='open' subscription_update_counter -", "label": 0}, {"snippet_id": 24128, "code": " profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import", "label": 1}, {"snippet_id": 22695, "code": "(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running", "label": 1}, {"snippet_id": 65544, "code": ")) filechooser_opening_dialog.close() tab_title=self.create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog", "label": 1}, {"snippet_id": 36928, "code": "=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats)", "label": 0}, {"snippet_id": 22245, "code": " include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options=None, _internal_config=None): self.object_id_seed=object_id_seed self.redis_address=redis_address self.num_cpus=num_cpus self", "label": 0}, {"snippet_id": 7987, "code": " if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 80154, "code": ".clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True)", "label": 0}, {"snippet_id": 10230, "code": " Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 34184, "code": "%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) option=doc_type_select.first_selected_option", "label": 0}, {"snippet_id": 26340, "code": " raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully.", "label": 0}, {"snippet_id": 5200, "code": " are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self", "label": 0}, {"snippet_id": 37384, "code": " ProductLinkForm(forms.ModelForm): required_css_class='required' document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True) return_url=forms.CharField", "label": 0}, {"snippet_id": 32359, "code": " The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands() self.expect(TokenType.EOF) return root def commands", "label": 0}, {"snippet_id": 11046, "code": " enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 69004, "code": "/jyr7FXeUJj9B7cLo+s/TXo+RaVfi3kOc9BoxIvy /qiNGs/TKy2/Ujqp/affmIMoMXSozKmga81JSwkADO1JMgUy6dApXz9kP4EE3g== =CLGF -----END PGP PUBLIC KEY BLOCK----- \"\"\".strip() apt.trust_gpg_key(key) apt.add_source('nodesource'", "label": 0}, {"snippet_id": 29101, "code": " wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded", "label": 0}, {"snippet_id": 26390, "code": " then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The", "label": 0}, {"snippet_id": 64853, "code": ", help=\"The number of points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure", "label": 0}, {"snippet_id": 50430, "code": ".path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.", "label": 0}, {"snippet_id": 27375, "code": ": The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" ", "label": 0}, {"snippet_id": 8840, "code": " }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES", "label": 0}, {"snippet_id": 39001, "code": "{csv_folder}' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self", "label": 0}, {"snippet_id": 35774, "code": "=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p", "label": 0}, {"snippet_id": 21833, "code": " The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers", "label": 0}, {"snippet_id": 24809, "code": " in the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub", "label": 0}, {"snippet_id": 10261, "code": "], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':", "label": 0}, {"snippet_id": 73277, "code": "(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data.get('password') user=authenticate(username=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages", "label": 0}, {"snippet_id": 9738, "code": " if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint", "label": 0}, {"snippet_id": 12763, "code": " request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response.content def _external_auth_intercept(request, mode)", "label": 0}, {"snippet_id": 38355, "code": ".product import Product from.source_category import SourceCategory from.product_document import ProductDocument from.extracted_text import ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical", "label": 0}, {"snippet_id": 36391, "code": ".get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%', extracted_doc_count", "label": 0}, {"snippet_id": 72890, "code": " CreatePositionForm, 'baseVisibleText': InterfaceText }) @login_required(login_url='/login/', redirect_field_name=None) def positions(request): try: sort_by=request.session['position_sort'] except KeyError:", "label": 1}, {"snippet_id": 20041, "code": " Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\"", "label": 0}, {"snippet_id": 18793, "code": " except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': ", "label": 1}, {"snippet_id": 54705, "code": "\tprint \"num_probs was \"+str(num_probs)+\" for student \"+assignment.student \t\tself.problems=[] \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tprob_id=(assignment.book_edition", "label": 1}, {"snippet_id": 6566, "code": " from..models import User from..email import send_email from.forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm @auth.before_app_request", "label": 0}, {"snippet_id": 24915, "code": " redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1", "label": 0}, {"snippet_id": 63527, "code": "(response.data)['payload']['location']) def test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context", "label": 0}, {"snippet_id": 16795, "code": ": g.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset}) g.save() for gp_id, field in f.cleaned_data", "label": 0}, {"snippet_id": 78565, "code": " Exception: logging.exception(\"Error sending notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization'", "label": 0}, {"snippet_id": 33347, "code": " django.test.client import Client from django.contrib.auth import authenticate from django.contrib.auth.models import User from dashboard.models import PUC, Product, ProductToPUC, ProductDocument, DSSToxLookup", "label": 0}, {"snippet_id": 76659, "code": " logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles", "label": 0}, {"snippet_id": 62631, "code": " provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config) def add_outstanding_query(self, came_from): \"\"\" Add a SAML2 authentication query to the queries", "label": 0}, {"snippet_id": 35932, "code": "\nfrom taggit.models import TaggedItemBase, TagBase from taggit.managers import TaggableManager from django.db import models from django.urls import reverse from django.utils.translation import ugettext_lazy", "label": 0}, {"snippet_id": 46704, "code": ".join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType.objects.get(pk=1) code=line['document_type'] if line['filename']=='': errors.append([count,", "label": 0}, {"snippet_id": 51084, "code": "._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self, *args, **kwargs): ''' Deprecated. Use specify_optional_steps or", "label": 0}, {"snippet_id": 75604, "code": " r in search_results: select2_results.append({'id': r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords)", "label": 0}, {"snippet_id": 42886, "code": "(extraction_script=scr).count() self.assertTrue(group_count==1) self.assertTrue(scr.qa_begun) new_group=QAGroup.objects.get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group=", "label": 0}, {"snippet_id": 59904, "code": " func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"):", "label": 0}, {"snippet_id": 21448, "code": ".read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler", "label": 0}, {"snippet_id": 19831, "code": ".pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics", "label": 0}, {"snippet_id": 20410, "code": " about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map", "label": 0}, {"snippet_id": 44831, "code": " resolve from django.test import TestCase from django.http import HttpRequest from lxml import html from dashboard import views from dashboard.models import * from dashboard.forms import create_detail_formset", "label": 1}, {"snippet_id": 83197, "code": " :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue", "label": 0}, {"snippet_id": 52964, "code": ".make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request", "label": 0}, {"snippet_id": 25305, "code": " subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils", "label": 0}, {"snippet_id": 13493, "code": " tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id", "label": 1}, {"snippet_id": 62578, "code": "): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings", "label": 0}, {"snippet_id": 77806, "code": "('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list", "label": 0}, {"snippet_id": 59616, "code": " cascading backwards from specified level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata() with table=specified but not database=", "label": 0}, {"snippet_id": 65458, "code": "\") self.first_start_grid=builder.get_object(\"first_start_grid\") self.add(self.first_start_grid) def create_container(self): if self.first_start_grid !=NotImplemented: self.first_start_grid.destroy() self", "label": 0}, {"snippet_id": 60285, "code": " with sqlite_timelimit(conn, time_limit_ms): try: cursor=conn.cursor() cursor.execute(sql, params or{}) max_returned_rows=self.max_returned_rows if max_returned_rows==page_size: max_returned_rows +=1 if", "label": 0}, {"snippet_id": 4186, "code": " status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/'", "label": 0}, {"snippet_id": 20828, "code": " file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string):", "label": 0}, {"snippet_id": 11644, "code": "(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 46733, "code": "'filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']=='': line['title", "label": 0}, {"snippet_id": 20431, "code": ".autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser", "label": 0}, {"snippet_id": 36782, "code": ".order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'), document_count=Count('id", "label": 0}, {"snippet_id": 12279, "code": " if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 4409, "code": " params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i)", "label": 0}, {"snippet_id": 32121, "code": ".char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case", "label": 0}, {"snippet_id": 41570, "code": ".files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import Client from importlib import import_module from django.db.models import Max from dashboard", "label": 1}, {"snippet_id": 17821, "code": "='POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password was reset. Log in now", "label": 0}, {"snippet_id": 51423, "code": " def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message", "label": 0}, {"snippet_id": 48853, "code": "=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else:", "label": 0}, {"snippet_id": 26586, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already", "label": 0}, {"snippet_id": 55327, "code": ": \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn", "label": 0}, {"snippet_id": 12827, "code": " Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration", "label": 0}, {"snippet_id": 63217, "code": "/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_FAILURE_REDIRECT_URL'])) class UnAuthnAPITestCase(EduidAPITestCase", "label": 0}, {"snippet_id": 53634, "code": ": return self.redirection_source.encoding return 'utf8' def read_all(self) -> str: \"\"\" Reads the current state of the buffer and returns a string those contents :return: A string for the current state of", "label": 1}, {"snippet_id": 77065, "code": " request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type=request_type self.db_type", "label": 0}, {"snippet_id": 45668, "code": "=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if", "label": 0}, {"snippet_id": 33937, "code": " cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' ", "label": 0}, {"snippet_id": 62541, "code": ".authn.eduid_saml2 import get_authn_request from eduid_common.authn.tests.responses import(auth_response, logout_response, logout_request) from eduid_webapp.authn.app import authn_init_app from eduid_common", "label": 0}, {"snippet_id": 68251, "code": ".request.GET) context['search_form']=search_form count=self.object_list.count() context['count']=count context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return", "label": 0}, {"snippet_id": 63964, "code": "'SAMLResponse' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user", "label": 0}, {"snippet_id": 4532, "code": " are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self", "label": 0}, {"snippet_id": 29416, "code": " def oauthorize(): if g.user.is_authenticated: return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback", "label": 1}, {"snippet_id": 76022, "code": ".redirect_type=='prefix': to_url='/{lang}/{version}/'.format( lang=self.project.language, version=self.project.default_version, ) return '{from_url} ->{to_url}'.format( from_url=from_url, to_url=to_url, )", "label": 0}, {"snippet_id": 58011, "code": ".contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils import send_email, get_onboarding_percentage from core.common import onboarding from", "label": 0}, {"snippet_id": 62566, "code": " import logging logger=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class AuthnAPITestBase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class", "label": 0}, {"snippet_id": 14555, "code": ")) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages", "label": 0}, {"snippet_id": 14617, "code": "]=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider", "label": 0}, {"snippet_id": 83154, "code": " add_subscriber(self, queue): \"\"\"Adds a subscriber to the list of queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"", "label": 0}, {"snippet_id": 22389, "code": " setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert ", "label": 0}, {"snippet_id": 81977, "code": "() form_class=JustULRUpdateForm template_name='url-update-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home", "label": 0}, {"snippet_id": 12235, "code": " currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email", "label": 0}, {"snippet_id": 37620, "code": " **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', ", "label": 0}, {"snippet_id": 24994, "code": ".gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data, 0)) for j", "label": 0}, {"snippet_id": 63136, "code": "()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check) def test_token_login_new_user(self): eppn='hubba-fooo' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format", "label": 0}, {"snippet_id": 71613, "code": "=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized", "label": 0}, {"snippet_id": 62531, "code": " OutstandingQueriesCache from eduid_common.authn.utils import get_location, no_authn_views from eduid_common.authn.eduid_saml2 import get_authn_request from eduid_common.authn.tests.responses import(auth_response", "label": 0}, {"snippet_id": 45497, "code": ") qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit': edit, 'document_type_form': document_type_form", "label": 0}, {"snippet_id": 1093, "code": "\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http", "label": 0}, {"snippet_id": 77903, "code": ")) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id'], users) else", "label": 0}, {"snippet_id": 72642, "code": " digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent=send_mail( 'ScreenDoor: Please confirm e-mail address',", "label": 1}, {"snippet_id": 41327, "code": " doc.data_group.group_type.code=='CP': self.assertEqual(type(extsub), ExtractedCPCat) elif doc.data_group.group_type.code=='HH': self.assertEqual(type(extsub), ExtractedHHDoc) else: self.assertEqual(type", "label": 0}, {"snippet_id": 10822, "code": " password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns", "label": 0}, {"snippet_id": 32676, "code": "=RedirectionHelper(1, write) with outp: self.first.execute(builtins) outp.close() with inp: self.second.execute(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): '", "label": 0}, {"snippet_id": 64906, "code": "\"The test cases to run the students code against. Each test case \" \"must take the form of of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2", "label": 0}, {"snippet_id": 84670, "code": " group=None if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm", "label": 0}, {"snippet_id": 18358, "code": "={'username': self.username,'email': self.email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher from argon2", "label": 1}, {"snippet_id": 53075, "code": " 'email': 'test_email@gmail.com', }, } self.client.login(username='testuser', password='password') self.assertTemplateUsed('users/update.html') for form in data: data_to_pass=data[form] data[form][form", "label": 1}, {"snippet_id": 1439, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath", "label": 1}, {"snippet_id": 83136, "code": " thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue): \"\"\"Adds a", "label": 0}, {"snippet_id": 18974, "code": ".LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"\" def get_redirect_url(self): \"\"\"Find proper next hop.\"\"\" return find_nextlocation(self.request, self.request.user", "label": 0}, {"snippet_id": 80441, "code": ".layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id=sys.argv[1], wavemeter_port=sys.argv[2]) except Exception as err: self.matisse", "label": 0}, {"snippet_id": 82586, "code": " run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"", "label": 0}, {"snippet_id": 82335, "code": ", CategoryCreateView, CategoryListView, CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView, link_redirect ) urlpatterns=[ re_path(r'admin/', admin.site.urls), re_path(r", "label": 0}, {"snippet_id": 84402, "code": " group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article.changeset_set.all().order_by('", "label": 0}, {"snippet_id": 7909, "code": " context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to", "label": 0}, {"snippet_id": 58824, "code": ".ForeignKey(Instructor) user=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code', max_length=255) status=models.CharField('status', max_length=20", "label": 0}, {"snippet_id": 34437, "code": ".text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the", "label": 0}, {"snippet_id": 66516, "code": ".add_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile chosen\") self.logging_manager.log_debug(\"Keyfile path: \" ", "label": 0}, {"snippet_id": 36228, "code": "(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\") ordering=('name',) def __str__(self): return", "label": 1}, {"snippet_id": 40120, "code": " apps.get_model('dashboard.ExtractedFunctionalUse').DoesNotExist: try: return apps.get_model('dashboard.ExtractedListPresence').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard", "label": 0}, {"snippet_id": 29651, "code": ".query.filter(Post.tags.any(name=s)) posts.extend(results) tags=Tag.query.all() return render_template('gallery.html', posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect():", "label": 1}, {"snippet_id": 166, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_(", "label": 1}, {"snippet_id": 72548, "code": " return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form", "label": 0}, {"snippet_id": 42365, "code": "): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO", "label": 0}, {"snippet_id": 25228, "code": ": \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0", "label": 0}, {"snippet_id": 56764, "code": " concept_form=get_concept_and_form_from_kwargs(**kwargs) extra_context['concept']=concept transaction=concept.transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')", "label": 0}, {"snippet_id": 72284, "code": ") return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id': '{cluster_id}', 'export_id': '{export_id}'}, 2.0) def delete(self, cluster_id, export_id, reload_daemons=True): export_id", "label": 0}, {"snippet_id": 63488, "code": " def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout', method='POST', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn'", "label": 0}, {"snippet_id": 48041, "code": "'habits') if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return", "label": 0}, {"snippet_id": 78577, "code": " datarequest_dict['organization']['users'] if user.get('capacity')=='admin']) return users @tk.chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request", "label": 0}, {"snippet_id": 75668, "code": "(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'] if item['type'] !='auth': text='%s(%s)' %(text, item[index][0]) if item['idroot'] not in fast_ids: results.append", "label": 0}, {"snippet_id": 46687, "code": ") datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors", "label": 0}, {"snippet_id": 50396, "code": " platform import threading import sys import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS=\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS", "label": 0}, {"snippet_id": 31705, "code": ".login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\"", "label": 1}, {"snippet_id": 17029, "code": ") expected_games=(round_players +6) // 7 if expected_games < 1: expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset)", "label": 0}, {"snippet_id": 44047, "code": "'sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel')", "label": 0}, {"snippet_id": 18752, "code": "): \tChecks if a secure_cookie exists, if it doesn't then it redirects the user to /, \telse it renders /postlogin. \t\"\"\" \tdef get(self): \t\tcookie_status=self.get_secure_cookie(\"user\") \t\tif(cookie_status=", "label": 1}, {"snippet_id": 3225, "code": " expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def", "label": 0}, {"snippet_id": 9562, "code": " the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value", "label": 0}, {"snippet_id": 59897, "code": ".sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('{", "label": 0}, {"snippet_id": 77114, "code": "?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path=urlparse.urlsplit(target_url).path[1:] layer_ns=\"[%s]:%s\" %(target_path, str(server_layer_def[\"id\"])) if server_layer_def", "label": 0}, {"snippet_id": 46780, "code": " doc_type=DocumentType.objects.get( group_type=datagroup.group_type,code=code) else: errors.append([count,\"DocumentType code doesn't exist.\"]) filenames.append(line['filename']) doc=DataDocument(filename=line[", "label": 0}, {"snippet_id": 52966, "code": ".factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user", "label": 0}, {"snippet_id": 77252, "code": "/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result", "label": 1}, {"snippet_id": 50270, "code": " None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Incorrect Email/Password') return redirect('/login') @app.route(\"/logout\") def logout(): session.clear() if 'return_url", "label": 0}, {"snippet_id": 11120, "code": " currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication.", "label": 0}, {"snippet_id": 14781, "code": " password_hash='' def get_id(self): return self.user_id def db_init(): db.flushdb() auth_init() auth_add_user('gleb.kondratenko@skybonds.com', 'pwd') def auth_init(): db.set('user:ids', '0') def auth_add_user", "label": 0}, {"snippet_id": 35703, "code": ".objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render", "label": 0}, {"snippet_id": 73772, "code": "'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort'] except KeyError: return '", "label": 0}, {"snippet_id": 48051, "code": "() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return HttpResponseRedirect(f'/habitsandpractices/{doc.pk}') context={ 'doc' : doc, 'ext_form", "label": 0}, {"snippet_id": 74696, "code": ")) candidate_form=CandidateForm(post_data) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '') if banner_id: person", "label": 0}, {"snippet_id": 830, "code": " is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len", "label": 0}, {"snippet_id": 20015, "code": " \"Monitor: \" \"could not find ip for client{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries", "label": 0}, {"snippet_id": 57310, "code": ".cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction.code) else: extra_context['form']=form", "label": 0}, {"snippet_id": 57641, "code": " to a subject template, e.g. 'ctms/email/subject.txt' template_text(str): path to a body template, e.g. 'ctms/email/text.txt' \"\"\" context=Context(context_data) subj_template=loader.get_template(template_subject", "label": 0}, {"snippet_id": 69185, "code": " systemd.reload_daemon() systemd.restart_service('jupyterhub') systemd.restart_service('traefik') systemd.enable_service('jupyterhub') systemd.enable_service('traefik') def ensure_jupyterlab_extensions(): ", "label": 0}, {"snippet_id": 36125, "code": ".prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam", "label": 0}, {"snippet_id": 22097, "code": " logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the", "label": 0}, {"snippet_id": 73957, "code": "=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return", "label": 0}, {"snippet_id": 29922, "code": " SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static', 'tempbenwas') class DevConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite:///' +os.path", "label": 1}, {"snippet_id": 22215, "code": ", redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level", "label": 1}, {"snippet_id": 53241, "code": " task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return direct_to_template(request, template=\"funding/feature.html\", extra_context={'object': task.master, 'task'", "label": 0}, {"snippet_id": 83760, "code": " is_member(user, group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit", "label": 0}, {"snippet_id": 36804, "code": "(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats", "label": 0}, {"snippet_id": 48665, "code": ") form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks", "label": 0}, {"snippet_id": 46521, "code": ") try: ingredient=Ingredient.objects.get(rawchem_ptr=extracted_chemical.rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis", "label": 0}, {"snippet_id": 40616, "code": "=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 61170, "code": " of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the", "label": 0}, {"snippet_id": 47185, "code": " dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id','id','raw_cas','raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText", "label": 0}, {"snippet_id": 46507, "code": " +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical matches rawchem_ptr_id %s' % row['id']) try: ingredient=Ingredient.objects.get(rawchem_ptr=extracted_chemical", "label": 0}, {"snippet_id": 46239, "code": ".get_or_create(data_document=d, extraction_script=script) if not created and ext.one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name' err_msg=['must be 1:1 with \"data_document_id\"", "label": 0}, {"snippet_id": 63453, "code": "'NO_AUTHN_URLS']) with self.app.test_client() as c: resp=c.get('/test3') self.assertEqual(resp.status_code, 200) class LogoutRequestTests(AuthnAPITestBase): def test_metadataview(self): with self.app.test_client()", "label": 0}, {"snippet_id": 50547, "code": " def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False def release(self): self.f.close()", "label": 0}, {"snippet_id": 60502, "code": "/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"plugins.json\",", "label": 0}, {"snippet_id": 21581, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"", "label": 0}, {"snippet_id": 72225, "code": "(): raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) old_export=ganesha_conf.update_export({ 'export_id': export_id", "label": 0}, {"snippet_id": 12601, "code": " enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id", "label": 0}, {"snippet_id": 42373, "code": " self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f'/datagroup/%s/' ", "label": 0}, {"snippet_id": 42219, "code": " style=\"color:green;\"></span>' self.assertIn(span, response, 'Check should be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}", "label": 0}, {"snippet_id": 6337, "code": " return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple", "label": 0}, {"snippet_id": 58395, "code": "\"instructor_intro desc\", \"title\": \"instructor_intro\" } }, onboarding.CREATE_COURSE:{ \"done\": True, \"settings\":{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" } ", "label": 1}, {"snippet_id": 71108, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return False", "label": 0}, {"snippet_id": 84566, "code": " changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, *args, **kw): if request.method=='GET': if group_slug is not None: group=get_object_or_404(group_qs,", "label": 0}, {"snippet_id": 77732, "code": "=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg:", "label": 0}, {"snippet_id": 19547, "code": ": self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename", "label": 1}, {"snippet_id": 35398, "code": ".value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(", "label": 0}, {"snippet_id": 51973, "code": " user_record.password !=pw: template=h.handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to", "label": 0}, {"snippet_id": 30295, "code": "-Type']='application/json' return response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401)", "label": 0}, {"snippet_id": 46572, "code": " template_name, context) if not context['clean_comp_err']: for ingredient in good_records: ingredient.save() context['msg']=(f'{len(good_records)} clean composition data records ' 'uploaded successfully", "label": 0}, {"snippet_id": 19083, "code": " ray import cloudpickle as pickle from ray import profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has", "label": 1}, {"snippet_id": 84331, "code": "*article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision) is not int(revision_from) +1: from_value=revision_from template_params={'article': article, 'article_title", "label": 0}, {"snippet_id": 31487, "code": "' 'UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'CommonPasswordValidator'", "label": 0}, {"snippet_id": 52507, "code": "\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() checked_lst=request.form.get(\"completion\") updated_notes=request.form.get(\"notes\") project_object.notes=updated_notes congratulatory_messages", "label": 0}, {"snippet_id": 9107, "code": " from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import", "label": 0}, {"snippet_id": 22974, "code": " as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string(): id_hash=hashlib.sha1() id_hash", "label": 0}, {"snippet_id": 84616, "code": "'-modified'), 'allow_write': allow_write} if group_slug is not None: template_params['group']=group_slug if extra_context is not None: template_params.update(extra_context) return render_to_response('/", "label": 0}, {"snippet_id": 79006, "code": " accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model", "label": 0}, {"snippet_id": 68760, "code": "'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess", "label": 0}, {"snippet_id": 4665, "code": " with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 59482, "code": ", files, cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None, template_dir=None, plugins_dir=None, static_mounts=None, memory=False, config=None, version_note=None,", "label": 0}, {"snippet_id": 55069, "code": "\t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn os.path.basename(self.path) \tdef dirname(self): \t\treturn FSPath", "label": 0}, {"snippet_id": 68143, "code": " +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice", "label": 0}, {"snippet_id": 18223, "code": " help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef", "label": 1}, {"snippet_id": 23303, "code": " can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that", "label": 0}, {"snippet_id": 25806, "code": ".kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get", "label": 0}, {"snippet_id": 39717, "code": ",'HH']: return reverse('qa_chemicalpresence_index') else: return reverse('qa_extractionscript_index') def fetch_extracted_records(self): return self.rawchem.all() def pull_out_cp(self): if hasattr(self", "label": 1}, {"snippet_id": 52877, "code": " 'user_type': self.request.user.user_type, 'message': instance.text, 'file_name': os.path.basename(urlparse(instance.attachment.path).path) if instance.attachment else None, 'file_link': instance.file_download_link", "label": 0}, {"snippet_id": 35929, "code": "'product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return render(request, template_name", "label": 0}, {"snippet_id": 67795, "code": "(value__icontains=keyword)).order_by('-timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0,", "label": 0}, {"snippet_id": 23636, "code": "=default_num_gpus return resources _default_handler=None def setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str", "label": 1}, {"snippet_id": 45886, "code": " django.urls import reverse from django.conf import settings from django.core.files import File from django.core.exceptions import ValidationError from django.core.files.storage import FileSystemStorage from", "label": 1}, {"snippet_id": 8150, "code": "=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 19984, "code": ".ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i))", "label": 0}, {"snippet_id": 51618, "code": "' keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript(endpoint, params): keys", "label": 0}, {"snippet_id": 48318, "code": "() for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull=False).count() ds.data_groups=dgs return render(request, template_name,{'data_sources", "label": 0}, {"snippet_id": 55290, "code": "\t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) \tdef chown(self,uid=-1,gid=-1)", "label": 0}, {"snippet_id": 68370, "code": ".append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url)", "label": 0}, {"snippet_id": 73421, "code": " request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST", "label": 0}, {"snippet_id": 18944, "code": ".parameters.get_value( \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index", "label": 1}, {"snippet_id": 6400, "code": ") return False if id_token['iat'] <(self.time() -self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN", "label": 0}, {"snippet_id": 39555, "code": " from django.db import models from django.core.exceptions import ValidationError from django import forms from django.urls import reverse from.common_info import CommonInfo \t \t \t \t \t class ExtractedText", "label": 1}, {"snippet_id": 63572, "code": "//idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php', json.loads(response2.data)['payload']['location']) def test_logout_service_startingSP(self): came_from='/afterlogin/' session_id=self", "label": 0}, {"snippet_id": 38890, "code": " def is_hh(self): return self.type=='HH' def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 44802, "code": ".extext) self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\" try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format", "label": 0}, {"snippet_id": 53395, "code": " except Exception as error: out=render_error(project, error) set_executing(False) return{'success': True} if out is None else out def render_syntax_error( project: 'projects.Project', code: str, error:", "label": 0}, {"snippet_id": 56042, "code": "('', status=302) response['Location']=link return response def profile_redirect(request, username): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: real_link='{}{}/{}'.format(settings.PUBLIC_DOMAIN", "label": 0}, {"snippet_id": 29714, "code": "]) @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename) f.save(join( current_app.static_folder, current_app.config['STATIC_BENWA_DIR", "label": 1}, {"snippet_id": 67255, "code": "'keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html' def get_context_data(self, *", "label": 1}, {"snippet_id": 2210, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 83571, "code": "=15 try: from notification import models as notification except ImportError: notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs", "label": 0}, {"snippet_id": 56468, "code": " orm_person=ORMPerson.objects.create() profile=ORMProfile.objects.create(username=username, bio=bio, person=orm_person) profile.picture=pic profile.save() return self def given_a_public_domain(self, public_domain", "label": 0}, {"snippet_id": 75328, "code": ") return render(request, 'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate", "label": 0}, {"snippet_id": 69466, "code": " to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1) continue raise except URLError as e: if isinstance(e.reason", "label": 0}, {"snippet_id": 72142, "code": " protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(ex_id).to_dict() def get(self, cluster_id,", "label": 0}, {"snippet_id": 8211, "code": " enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def", "label": 0}, {"snippet_id": 74880, "code": ", candidate_id=None): try: if candidate_id: candidate=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate", "label": 0}, {"snippet_id": 1128, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a><", "label": 0}, {"snippet_id": 4450, "code": " test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username,", "label": 0}, {"snippet_id": 71122, "code": " engineauth.config import load_config import re from webob import Response from webob import Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request", "label": 0}, {"snippet_id": 52699, "code": " headers\"\"\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate\" return r if __name__==\"__main__\": app.debug=True app.jinja_env.auto_reload=app.debug connect_to_db(app) DebugToolbarExtension", "label": 0}, {"snippet_id": 80466, "code": ".status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor", "label": 0}, {"snippet_id": 12318, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\"", "label": 0}, {"snippet_id": 39808, "code": " of which 'item' is a part of. direction is 'next' or 'prev' ''' getit=False if direction=='prev': models=models.reverse() for m in models: if getit: return m if item==m: getit=True if getit: return models", "label": 0}, {"snippet_id": 70873, "code": ") %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type,", "label": 0}, {"snippet_id": 47427, "code": "'datasource_form.html')): form=DataSourceForm(request.POST or None) if form.is_valid(): form.save() return redirect('data_source_list') return render(request, template_name,{'form': form}) @login_required() def", "label": 0}, {"snippet_id": 37232, "code": "=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required", "label": 0}, {"snippet_id": 51302, "code": "._dependency_collection() delete_directory(os.path.join('dependencies', platform), logfile=sys.stdout) if len(dependencies) > 0: if not dependency_collection.fetch(dependencies, self._context.env): raise AbortRunException(", "label": 0}, {"snippet_id": 54744, "code": " \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=(assignment_student", "label": 0}, {"snippet_id": 43377, "code": ".browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self", "label": 0}, {"snippet_id": 28177, "code": " background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver", "label": 0}, {"snippet_id": 66449, "code": "\"keyfile_unlock_select_button\") keyfile_unlock_select_button.get_style_context().remove_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_SUGGESTED_ACTION", "label": 0}, {"snippet_id": 61840, "code": " HTML of a page into a BeautifulSoup\"\"\" try: page=requests.get(url, allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests.get", "label": 0}, {"snippet_id": 67874, "code": " context def get_queryset(self): query=Org.objects.order_by('id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html' context_object_name='tags' def get_context_data(self", "label": 0}, {"snippet_id": 38877, "code": " @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return self.type=='HH' def get_extract_models(self", "label": 0}, {"snippet_id": 36728, "code": ") stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC", "label": 0}, {"snippet_id": 72816, "code": ".is_valid(): position=create_position_form.save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid()", "label": 1}, {"snippet_id": 21225, "code": " process_info ] def start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format(", "label": 0}, {"snippet_id": 2785, "code": "({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url", "label": 1}, {"snippet_id": 68900, "code": " 89QyvxeRxAf93YFAVzMXhoKxu12IuH4VnSwAfb8gQyxKRyiGOUwk0YoBPpqRnMmD Dl7SdmY3oQHEJzBelTMjTM8AjbB9mWoPBX5G8t4u47/FZ6PgdfmRg9hsKXhkLJc7 C1btblOHNgDx19fzASWX+xOjZiKpP6MkEEzq1bilUFul6RDtxkTWsTa5TGixgCB/ G2fK8I9JL/yQhDc6OGY9mjPOxMb5PgUlT8ox3v8wt25erWj9z30QoEBwfSg4tzLc", "label": 0}, {"snippet_id": 41935, "code": " should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects.create(document=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/')", "label": 0}, {"snippet_id": 75168, "code": " kwargs={'candidate_id': candidate.id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate, 'form': form, 'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app", "label": 0}, {"snippet_id": 79017, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk", "label": 0}, {"snippet_id": 24891, "code": "=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning", "label": 0}, {"snippet_id": 2678, "code": ", 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback", "label": 0}, {"snippet_id": 37878, "code": " False if dg.extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=[]): '''Returns the pair of formsets that will be", "label": 0}, {"snippet_id": 33686, "code": "/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self): response=self.client.get(", "label": 1}, {"snippet_id": 83837, "code": " allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write", "label": 0}, {"snippet_id": 35791, "code": "'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path)", "label": 0}, {"snippet_id": 75089, "code": ".thesis) if form.is_valid(): thesis=form.save() if thesis.abstract !=form.cleaned_data['abstract']: messages.info(request, 'Your abstract contained invisible characters that we\\'ve removed. Please make", "label": 0}, {"snippet_id": 70148, "code": ".from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory'", "label": 0}, {"snippet_id": 58684, "code": ".db import models from django.db.models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib.auth.models import User from django.contrib", "label": 0}, {"snippet_id": 55878, "code": " \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item) \t\treturn r \tdef filter(self,pattern): \t\treturn fnmatch.filter(self,pattern) if __name__==\"__main__\": \tprint \"current", "label": 0}, {"snippet_id": 58792, "code": ": return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user", "label": 0}, {"snippet_id": 79878, "code": ":type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title", "label": 0}, {"snippet_id": 72732, "code": "'key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete()", "label": 1}, {"snippet_id": 20010, "code": " static_resources, dynamic_resources) else: logger.warning( \"Monitor: \" \"could not find ip for client{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver", "label": 0}, {"snippet_id": 23486, "code": "=\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing", "label": 0}, {"snippet_id": 48161, "code": " from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels", "label": 1}, {"snippet_id": 84058, "code": ", title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name='edit.html', template_dir='wiki', extra_context", "label": 0}, {"snippet_id": 65381, "code": " screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER) def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened", "label": 0}, {"snippet_id": 84654, "code": " article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): article_args={'title': title} group=None if group_slug", "label": 0}, {"snippet_id": 11851, "code": " require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from", "label": 0}, {"snippet_id": 66848, "code": "*kwargs) context['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']=GeoIP().lookup(domain) except Exception as e: print(e) pass try: context['ipaddress']=socket.gethostbyname(domain", "label": 0}, {"snippet_id": 36497, "code": "'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get", "label": 0}, {"snippet_id": 4472, "code": ") self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username", "label": 0}, {"snippet_id": 18359, "code": "'username': self.username,'email': self.email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher from argon2", "label": 1}, {"snippet_id": 43959, "code": ".browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\")", "label": 0}, {"snippet_id": 35119, "code": "-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args,", "label": 0}, {"snippet_id": 14877, "code": "() login_manager=LoginManager(app) login_manager.login_view='view_login' @login_manager.user_loader def load_user(user_id): return auth_get_user_by_id(user_id) def load_json(name): filename=os.path.join", "label": 0}, {"snippet_id": 52197, "code": " user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return", "label": 0}, {"snippet_id": 57282, "code": " transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']", "label": 0}, {"snippet_id": 81026, "code": ".seats_availability==u'limited': _logger.info('Found existing registration, set state to open(confirmed)') existing_registration.state='open' subscription_update_counter -=1 self._update_counter_subscription", "label": 0}, {"snippet_id": 48942, "code": " product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc", "label": 0}, {"snippet_id": 26366, "code": " SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true,", "label": 0}, {"snippet_id": 60577, "code": "<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash(request, original_response): if original_response", "label": 0}, {"snippet_id": 7091, "code": " License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required", "label": 0}, {"snippet_id": 26771, "code": " list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that", "label": 0}, {"snippet_id": 7325, "code": "'appointments_enabled_ind', 'timezone') column_labels={'sb': 'Smartboard', 'timezone.timezone_name': 'Timezone Name'} column_sortable_list=['office_name', 'sb', 'deleted', 'exams_enabled_ind'] column_default_sort", "label": 0}, {"snippet_id": 57124, "code": " None) if transaction_code: transaction=get_transaction_from_kwargs(**kwargs) return concept_class(transaction=transaction), concept_form concept_code=kwargs.get('concept_code', None) concept=get_object_or_404", "label": 0}, {"snippet_id": 14425, "code": " the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect", "label": 0}, {"snippet_id": 74391, "code": " _ReportUpdatePartial, wizard_builder_partials.WizardPartial ): steps_helper=view_helpers.ReportStepsHelper EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, **kwargs): self._dispatch_processing()", "label": 0}, {"snippet_id": 53749, "code": " cauldron.render import texts as render_texts from cauldron.session.buffering import RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management class", "label": 0}, {"snippet_id": 45279, "code": " i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month", "label": 0}, {"snippet_id": 21369, "code": " check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert", "label": 0}, {"snippet_id": 48980, "code": " p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product", "label": 0}, {"snippet_id": 50533, "code": "(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"HOME\"]+\"/.openhome-build/\"+name+\".lock\") def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl", "label": 0}, {"snippet_id": 45275, "code": " range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count': '0',", "label": 0}, {"snippet_id": 44020, "code": " tearDown(self): self.browser.quit() def test_hem(self): for i in range(27): ds=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url)", "label": 0}, {"snippet_id": 18131, "code": " \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n -Trying payload \"+payload+\" -\"\r for domain in domains:\r if", "label": 0}, {"snippet_id": 65262, "code": "=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True", "label": 0}, {"snippet_id": 27580, "code": " if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args", "label": 0}, {"snippet_id": 5940, "code": "'OIDC_VALID_ISSUERS', ['accounts.google.com', 'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True) app.route('/oidc_callback", "label": 0}, {"snippet_id": 53179, "code": "'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object(", "label": 0}, {"snippet_id": 670, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=", "label": 0}, {"snippet_id": 5855, "code": " https://developers.google.com/api-client-library/python/samples/authorized_api_web_server_calendar.py \"\"\" def __init__(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self", "label": 0}, {"snippet_id": 64936, "code": "', '--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information about exceptions", "label": 0}, {"snippet_id": 9037, "code": ".api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers", "label": 0}, {"snippet_id": 77482, "code": " of the server on which command to be executed. target_path: Target published point. Returns: The layers from the server definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug", "label": 0}, {"snippet_id": 2349, "code": "[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 45750, "code": "=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta", "label": 1}, {"snippet_id": 4512, "code": "(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected", "label": 0}, {"snippet_id": 29051, "code": "'s methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr)", "label": 0}, {"snippet_id": 56507, "code": " args=[username])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response['Location']==url return self class RedirectRootTestCase(TestCase", "label": 1}, {"snippet_id": 62862, "code": ": resp=c.get(url) authn_req=get_location(get_authn_request(self.app.config, session, '/', None, force_authn=force_authn)) idp_url=authn_req.split('?')[0] self.assertEqual(resp.status_code, 302) self.assertTrue", "label": 1}, {"snippet_id": 33112, "code": "(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register", "label": 0}, {"snippet_id": 79854, "code": " the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request", "label": 0}, {"snippet_id": 42199, "code": " be present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span", "label": 0}, {"snippet_id": 77397, "code": " server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name", "label": 0}, {"snippet_id": 1520, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=", "label": 0}, {"snippet_id": 45493, "code": "=DocumentTypeForm(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit", "label": 0}, {"snippet_id": 8239, "code": " Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override", "label": 0}, {"snippet_id": 57896, "code": "[setting_name] return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for according", "label": 0}, {"snippet_id": 36948, "code": "=chart_month: product_stats.insert(i,{'product_count': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is", "label": 0}, {"snippet_id": 12346, "code": " view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context", "label": 0}, {"snippet_id": 20763, "code": ".start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self", "label": 0}, {"snippet_id": 29987, "code": "(Integer, primary_key=True) name=Column(String(250), nullable=False) email=Column(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base): __tablename__='Grudget' id=Column(Integer,", "label": 0}, {"snippet_id": 46767, "code": "'t be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType.objects.get( group_type=datagroup.group_type,code=code) else: errors.append", "label": 0}, {"snippet_id": 59466, "code": " DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette: def __init__( self, files, cache_headers=True, cors=False", "label": 0}, {"snippet_id": 30328, "code": "!=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app's.\" response.headers['Content-Type']='application/json' return", "label": 0}, {"snippet_id": 3590, "code": "(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant'", "label": 0}, {"snippet_id": 18162, "code": ".head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed", "label": 1}, {"snippet_id": 45669, "code": ", pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if ext_text_form", "label": 0}, {"snippet_id": 26704, "code": " any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful", "label": 0}, {"snippet_id": 42899, "code": ".get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/{scr.pk}/", "label": 0}, {"snippet_id": 8798, "code": "=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options':", "label": 0}, {"snippet_id": 43481, "code": "/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click(", "label": 0}, {"snippet_id": 15847, "code": " history=json.loads(request.data) history=[ { 'id': item['id'], 'date': datetime.fromtimestamp(item['date'] / 1000), 'commands': item['commands'] } for item in history ] return render_template('run_history", "label": 0}, {"snippet_id": 6331, "code": " issued by non-trusted issuer: %s' % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid audience') return", "label": 0}, {"snippet_id": 67436, "code": " context['count']=self.object_list.count() context['alltag']=Tag.objects.order_by('id') taglist=self.request.GET.getlist('tag') context['tags']=Tag.objects.filter(id__in=taglist) search_form=EventSearchForm", "label": 0}, {"snippet_id": 61738, "code": " return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet') -> None: \"\"\" This method takes a queryset and scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance", "label": 0}, {"snippet_id": 65727, "code": " Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self.database_manager=DatabaseManager( self.filechooser_creation_dialog.get_filename", "label": 0}, {"snippet_id": 49791, "code": " except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload', methods=['POST']) def upload(): if(not 'email' in session) and(not 'social' in session", "label": 0}, {"snippet_id": 6757, "code": ") return redirect(url_for('auth.login')) return render_template('auth/register.html', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect", "label": 0}, {"snippet_id": 24716, "code": ".LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser", "label": 0}, {"snippet_id": 62855, "code": " force_authn: bool \"\"\" with self.app.test_client() as c: resp=c.get(url) authn_req=get_location(get_authn_request(self.app.config, session, '/', None, force_authn=force_authn)) idp_url=authn_req.split(", "label": 1}, {"snippet_id": 80325, "code": "=lock_menu.addAction('Lock Fast Piezo') self.lock_fast_piezo_action.setCheckable(True) tools_menu=menu_bar.addMenu('Tools') self.lock_actions=[self.lock_slow_piezo_action, self.lock_thin_etalon_action,", "label": 0}, {"snippet_id": 7383, "code": " License for the specific language governing permissions and limitations under the License.''' import logging from flask import g, request from flask_restplus import Resource from sqlalchemy import exc, or_", "label": 1}, {"snippet_id": 639, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length", "label": 0}, {"snippet_id": 22359, "code": " self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs:", "label": 0}, {"snippet_id": 2519, "code": " is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9", "label": 0}, {"snippet_id": 69700, "code": " a config.yaml present \"\"\" for path in[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config.d')]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files() if os.path.exists(CONFIG_FILE", "label": 0}, {"snippet_id": 26335, "code": " If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM", "label": 0}, {"snippet_id": 46866, "code": "\") zf=zipfile.ZipFile(str(new_zip_path), 'w', zipfile.ZIP_DEFLATED) datagroup.zip_file=new_zip_name zf.close() datagroup.save() return redirect('data_group_detail', pk=datagroup.id) else: groups=GroupType", "label": 0}, {"snippet_id": 29281, "code": "(images,)) patch_request_class(app, FILE_SIZE_LIMIT) return app def register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\"", "label": 0}, {"snippet_id": 18890, "code": "-open_time') if gt.is_open), None) if admin: if admin.is_open: return{'gospel_trips_available': True} return{'gospel_trips_available': False} except GospelTrip.DoesNotExist: return{'gospel_trips_available", "label": 1}, {"snippet_id": 28406, "code": " leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is", "label": 0}, {"snippet_id": 30047, "code": " primary_key=True) name=Column(String(80), nullable=False) description=Column(String(450),nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id", "label": 1}, {"snippet_id": 17841, "code": ".Markup('Your password was reset. Log in now.'), 'info') return flask.redirect(flask.url_for('account.login')) return flask.render_template('password_reset.html', form=form) @bp.route('/profile', methods=[", "label": 0}, {"snippet_id": 84513, "code": ".get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request", "label": 1}, {"snippet_id": 69833, "code": " from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils", "label": 0}, {"snippet_id": 40259, "code": ").count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects.filter(extractedtext__qa_checked=True, extractedtext__extraction_script=self.pk).count() def get_pct_checked(self): count", "label": 0}, {"snippet_id": 61355, "code": "\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the run function to end. ", "label": 0}, {"snippet_id": 34355, "code": " self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes", "label": 0}, {"snippet_id": 62132, "code": " 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode=block\", ) def", "label": 0}, {"snippet_id": 44734, "code": " extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc, extraction_script", "label": 0}, {"snippet_id": 80252, "code": " Wavelength') self.set_bifi_motor_pos_action=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan'", "label": 0}, {"snippet_id": 30697, "code": " redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id): editedGrudget=session", "label": 1}, {"snippet_id": 63194, "code": " self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_SUCCESS_REDIRECT_URL'])) def test_token_login_old_user(self): eppn='hubba-bubba' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY", "label": 0}, {"snippet_id": 22228, "code": ", huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor", "label": 0}, {"snippet_id": 10819, "code": " The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args:", "label": 0}, {"snippet_id": 35040, "code": " django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import", "label": 0}, {"snippet_id": 16064, "code": ".forms.formsets import formset_factory from django.http import Http404, HttpResponseRedirect from django.shortcuts import render from django.urls import reverse from django.utils.translation import ugettext", "label": 0}, {"snippet_id": 77856, "code": "=0 for org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if", "label": 0}, {"snippet_id": 6060, "code": " max_age=self.app.config['OIDC_ID_TOKEN_COOKIE_TTL']) return response def before_request(self): g.oidc_id_token=None self.authenticate_or_redirect() def authenticate_or_redirect(self): \"\"\" Helper function", "label": 0}, {"snippet_id": 1702, "code": " Views and functions for serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import", "label": 0}, {"snippet_id": 14499, "code": " dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order", "label": 0}, {"snippet_id": 17088, "code": "'tournament': t, 'round': r, 'formset': formset}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try:", "label": 0}, {"snippet_id": 68000, "code": "'threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk)", "label": 0}, {"snippet_id": 35347, "code": ") queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form", "label": 0}, {"snippet_id": 51263, "code": "=flatten_string_list(args) self._check_call([\"rsync\"] +args, **kwargs) def _dependency_collection(self): return read_dependencies_from_filename(os.path.join('projectdata', 'dependencies.txt'), logfile=sys", "label": 0}, {"snippet_id": 2664, "code": " nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not", "label": 0}, {"snippet_id": 77213, "code": "=_TILE_ARGS %( self.tile_arg_names[\"x\"], x, self.tile_arg_names[\"y\"], y, self.tile_arg_names[\"z\"], z ) return tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server.", "label": 0}, {"snippet_id": 22603, "code": " set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray", "label": 0}, {"snippet_id": 43352, "code": ".get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id", "label": 0}, {"snippet_id": 17431, "code": "(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a mistake, contact ' 'a moderator on IRC.'.format(ban_reason)", "label": 0}, {"snippet_id": 19157, "code": "=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client", "label": 1}, {"snippet_id": 3121, "code": "\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request", "label": 0}, {"snippet_id": 16195, "code": "(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify which players are playing", "label": 0}, {"snippet_id": 13166, "code": "'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled", "label": 0}, {"snippet_id": 47975, "code": ".auth.decorators import login_required from dashboard.models import * from dashboard.forms import HabitsPUCForm, create_detail_formset @login_required() def habitsandpractices(request, pk, template_name", "label": 0}, {"snippet_id": 2054, "code": " 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header", "label": 0}, {"snippet_id": 35670, "code": ".filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value", "label": 1}, {"snippet_id": 74857, "code": " person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form", "label": 0}, {"snippet_id": 21001, "code": ".prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self", "label": 0}, {"snippet_id": 71452, "code": ".middleware import AuthMiddleware from engineauth.middleware import EngineAuthRequest from engineauth import models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware", "label": 0}, {"snippet_id": 80815, "code": "} thin etalon.\") self.lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked) self.lock_thin_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_piezo_etalon_lock", "label": 0}, {"snippet_id": 83762, "code": " group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles, False", "label": 0}, {"snippet_id": 42055, "code": " DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product self.assertEqual(product.title, 'unknown', 'Title should be unknown in bulk_create') self.assertEqual(product", "label": 0}, {"snippet_id": 43839, "code": ".invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until", "label": 0}, {"snippet_id": 40476, "code": " blank=True) source=models.ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete", "label": 0}, {"snippet_id": 13585, "code": ") or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 65254, "code": ".ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented", "label": 0}, {"snippet_id": 38429, "code": ".utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): \"\"\" A DataDocument object is a single source of Factotum", "label": 0}, {"snippet_id": 12688, "code": " Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"", "label": 0}, {"snippet_id": 56462, "code": " def given_a_profile(self, username, bio, pic): orm_person=ORMPerson.objects.create() profile=ORMProfile.objects.create(username=username, bio=bio, person=orm_person) profile.picture=pic profile.save()", "label": 0}, {"snippet_id": 49398, "code": "'data_document/' 'data_document_form.html')): datadocument=get_object_or_404(DataDocument, pk=pk) form=DataDocumentForm(request.POST or None, instance=datadocument) if form.is_valid(): if form.has_changed(): form", "label": 0}, {"snippet_id": 27513, "code": "\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"", "label": 1}, {"snippet_id": 54867, "code": ".items(): \t\t\tif len(s) > 1: \t\t\t\tprint(t,s) def process_problem_scores(code_list): \tproblems=[] \tclass problem(object): \t\tdef __init__(self,student,book_edition,chapter,number,code): \t\t\tself.student=student ", "label": 1}, {"snippet_id": 50433, "code": ".abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s..", "label": 0}, {"snippet_id": 84193, "code": ".update({'title': title, 'action': 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params", "label": 0}, {"snippet_id": 34570, "code": "'POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter", "label": 0}, {"snippet_id": 27798, "code": ".push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An", "label": 0}, {"snippet_id": 46251, "code": "'prod_name' err_msg=['must be 1:1 with \"data_document_id\".'] context['ext_err'][i+1]={col: err_msg} if created: update_fields(row, ext) row['extracted_text']=ext if(ext_child==ExtractedListPresence): row", "label": 0}, {"snippet_id": 30107, "code": ", url_for, flash from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from database_setup import Grudget, Base, Grudge, User from flask import session as login_session import random", "label": 0}, {"snippet_id": 7074, "code": "'/change-email/<token>') @login_required def change_email(token): if current_user.change_email(token): session['auth_token']=current_user.auth_token flash('Your email address has been updated.') else: flash", "label": 0}, {"snippet_id": 23245, "code": " Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether", "label": 0}, {"snippet_id": 72667, "code": " +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return", "label": 0}, {"snippet_id": 73986, "code": " subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master", "label": 0}, {"snippet_id": 69884, "code": " import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd", "label": 0}, {"snippet_id": 53418, "code": " :param project: :param code: :param error: :return: \"\"\" stack=[dict( filename=error.filename, location=None, line_number=error.lineno, line=error.text.rstrip() )] render_data=dict( type=error.__class__", "label": 0}, {"snippet_id": 14468, "code": " Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer'", "label": 0}, {"snippet_id": 24831, "code": " Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state", "label": 1}, {"snippet_id": 4498, "code": "'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/", "label": 0}, {"snippet_id": 17767, "code": "('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user", "label": 0}, {"snippet_id": 43332, "code": ".browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value') true_cas=self.browser.find_element_by_xpath( '//*[@id", "label": 0}, {"snippet_id": 18610, "code": " if there is any document in the database with the \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument exists, returns None or the error message. \t\"", "label": 1}, {"snippet_id": 83382, "code": ".objects.filter(old_title=title).count() if cs > 0: raise forms.ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self):", "label": 1}, {"snippet_id": 57546, "code": " return render(request, 'transactions/transaction_pay.html', extra_context) def transactions_open(request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request)", "label": 0}, {"snippet_id": 47939, "code": " line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"", "label": 0}, {"snippet_id": 71221, "code": "'user_model']) except Exception: return models.User def _load_user(self): if self.session is not None and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id)) if self", "label": 0}, {"snippet_id": 13526, "code": " initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages", "label": 0}, {"snippet_id": 18127, "code": "\"+output_file+\" --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n -Trying payload \"+payload", "label": 0}, {"snippet_id": 50226, "code": ") def login(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]) def loginButton(): email=request", "label": 0}, {"snippet_id": 54194, "code": "]) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician=None for p in politicians: politician=p if politician !=None: politician.search_count", "label": 1}, {"snippet_id": 39468, "code": "(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__(self): return self.raw_chem_name", "label": 0}, {"snippet_id": 16711, "code": " two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games(omitting_players=sitters, players_doubling_up=two_gamers) def _seed_games_and_powers(tournament, the_round): \"\"\"Wrapper", "label": 0}, {"snippet_id": 71772, "code": ".load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) user=models.User.query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req", "label": 0}, {"snippet_id": 31768, "code": " positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse(", "label": 1}, {"snippet_id": 50834, "code": " or similar lists. Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list(x) for x in arglist],[]) def flatten_comma_list", "label": 0}, {"snippet_id": 65809, "code": " close_button.connect(\"clicked\", self.on_tab_close_button_clicked, page_instance) close_button.add(close_image) tab_hbox.pack_start(close_button, False, False, False) tab_hbox.show_all() self.container", "label": 0}, {"snippet_id": 84454, "code": " extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='POST': revision=int(request.POST['revision']) article_args={'title': title} group=None if group_slug is not None:", "label": 0}, {"snippet_id": 58665, "code": "( courseUnit__course__addedBy=instructor.user, isPreview=True, isLive=False, isTest=False ).exists() if enroll_unit_code_exists: update_onboarding_step(onboarding.STEP_6, instructor.user_id) print(\"Instructor", "label": 0}, {"snippet_id": 12295, "code": ".is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens", "label": 0}, {"snippet_id": 15723, "code": " commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form", "label": 0}, {"snippet_id": 74480, "code": " from django.contrib import messages from django.conf import settings from django.core.exceptions import PermissionDenied from django.core.urlresolvers import reverse from django.http import HttpResponse", "label": 0}, {"snippet_id": 83463, "code": "['user_ip'] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip", "label": 0}, {"snippet_id": 44950, "code": "'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', } hp_formset=HnPFormSet(data, prefix='habits') self.assertTrue(hp_formset.is_valid()) def test_edit_hnp_detail(self): self", "label": 0}, {"snippet_id": 72518, "code": " from screendoor.redactor import parse_applications from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm from.models import EmailAuthenticateToken, Position", "label": 1}, {"snippet_id": 34301, "code": "/*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem", "label": 0}, {"snippet_id": 40826, "code": " PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 9493, "code": " return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the", "label": 0}, {"snippet_id": 27609, "code": " the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color,", "label": 0}, {"snippet_id": 3167, "code": ".crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated", "label": 0}, {"snippet_id": 10602, "code": "(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args", "label": 0}, {"snippet_id": 79177, "code": ".commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator Email", "label": 1}, {"snippet_id": 63195, "code": " self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_SUCCESS_REDIRECT_URL'])) def test_token_login_old_user(self): eppn='hubba-bubba' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY']", "label": 0}, {"snippet_id": 62594, "code": " config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config, 'TOKEN_LOGIN_SHARED_KEY': 'shared_secret', 'TOKEN_LOGIN_SUCCESS_REDIRECT_URL", "label": 0}, {"snippet_id": 48036, "code": ".POST or None, instance=extext, prefix='habits') if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save()", "label": 0}, {"snippet_id": 19913, "code": " exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises:", "label": 0}, {"snippet_id": 48822, "code": " classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count", "label": 0}, {"snippet_id": 79295, "code": " e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest", "label": 0}, {"snippet_id": 77966, "code": " def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids", "label": 0}, {"snippet_id": 10489, "code": " from openedx.core.djangoapps.user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx", "label": 0}, {"snippet_id": 62375, "code": " session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user, relay_state)) return response @acs_action('change-password-action') def chpass_action(session_info, user): \"", "label": 0}, {"snippet_id": 25619, "code": " import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray.tempfile_services import( get_logs_dir_path,", "label": 0}, {"snippet_id": 13543, "code": " account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to", "label": 0}, {"snippet_id": 9305, "code": " json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION", "label": 0}, {"snippet_id": 19846, "code": ", self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0", "label": 0}, {"snippet_id": 75102, "code": ".info(request, 'Your abstract contained invisible characters that we\\'ve removed. Please make sure your abstract is correct in the information section below.') if thesis.title !=form.cleaned_data['title']:", "label": 0}, {"snippet_id": 6632, "code": " current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed.html') @auth.route('/login', methods=['GET', 'POST']) def login(): form", "label": 0}, {"snippet_id": 28717, "code": " global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close(", "label": 1}, {"snippet_id": 30228, "code": "=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri='postmessage' credentials=oauth_flow.step2_exchange(code) except FlowExchangeError: response=make_response( json.dumps('Failed to", "label": 0}, {"snippet_id": 83383, "code": "(old_title=title).count() if cs > 0: raise forms.ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm", "label": 1}, {"snippet_id": 22586, "code": " the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed", "label": 0}, {"snippet_id": 8987, "code": ".views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import", "label": 0}, {"snippet_id": 83321, "code": " widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class Meta: model=Article exclude=('creator', 'creator_ip',", "label": 0}, {"snippet_id": 73636, "code": "': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error", "label": 0}, {"snippet_id": 71728, "code": "'/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id':", "label": 0}, {"snippet_id": 55340, "code": " \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode", "label": 0}, {"snippet_id": 42558, "code": " setUp(self): self.c=Client() def test_faceted_search_excludes_chemicals(self): response=self.c.get('/find/?q=ethyl') self.assertContains(response, 'Data Document') self.assertNotContains(response, 'Extracted", "label": 0}, {"snippet_id": 43594, "code": ".find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process", "label": 1}, {"snippet_id": 81340, "code": "(self): attendee_list=str('') counter=1 reg_ids=self.sudo().registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False) for registration in reg_ids: if registration.state=='open':", "label": 0}, {"snippet_id": 81607, "code": ".One2many(comodel_name='fit.subscription', inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0", "label": 0}, {"snippet_id": 48403, "code": "=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form(request, pk, template_name", "label": 0}, {"snippet_id": 22698, "code": "\"Push the logged profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks", "label": 1}, {"snippet_id": 39361, "code": "'report_funcuse', 'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text", "label": 0}, {"snippet_id": 4584, "code": ") response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self", "label": 0}, {"snippet_id": 65281, "code": "(self, *args, **kwargs): super().__init__(*args, **kwargs) keepassgtk.config_manager.configure() self.assemble_window() def assemble_window(self): self.set_default_size(800, 500) self.create_headerbar(", "label": 0}, {"snippet_id": 8600, "code": "': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append", "label": 0}, {"snippet_id": 33236, "code": ".admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin", "label": 0}, {"snippet_id": 56208, "code": "-confirmation') return self class RedirectLoginEmailTestCase(TestCase): def test_when_called_redirect_view_redirects_to_apps_url(self): RedirectLoginEmailTestCase.ScenarioMaker() \\ .when_call_login_email_redirect", "label": 0}, {"snippet_id": 78374, "code": "=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id", "label": 0}, {"snippet_id": 238, "code": "]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content", "label": 0}, {"snippet_id": 19844, "code": "=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self", "label": 0}, {"snippet_id": 23866, "code": " memory file system in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats", "label": 0}, {"snippet_id": 22410, "code": " is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included", "label": 0}, {"snippet_id": 58302, "code": "\"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" }, onboarding.CREATE_COURSELET:{ \"html\": \"<p>create_courselet<", "label": 0}, {"snippet_id": 35926, "code": ") return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return", "label": 0}, {"snippet_id": 39497, "code": " class ExtractedListPresence(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500,", "label": 1}, {"snippet_id": 34964, "code": ".getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def", "label": 1}, {"snippet_id": 4976, "code": "'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't", "label": 0}, {"snippet_id": 51732, "code": ", CSRF: genCSRF, OR: genOR, SSCI: genSSCI, SCI: genSCI } class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count", "label": 0}, {"snippet_id": 31539, "code": ", project_clone urlpatterns=patterns( '', url(r'^$', home_page, name='home_page'), url(r'^draw/?$', home_page, name='home_page'), url(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects", "label": 1}, {"snippet_id": 19057, "code": "(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"\" def get_redirect_url(self): \"\"\"Find proper next hop.\"\"\" return find_nextlocation(self.request, self.request", "label": 0}, {"snippet_id": 62246, "code": "(page): return validate_cache_control_header(page, 'private') def validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page)", "label": 0}, {"snippet_id": 80501, "code": " for line in stack]), 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in item, stack) dialog=QMessageBox(icon=QMessageBox", "label": 0}, {"snippet_id": 65119, "code": " code=fixed except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, args.points, 'failed to parse code') break if not tree: output_json(args.points, deductions", "label": 0}, {"snippet_id": 13916, "code": "=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer", "label": 0}, {"snippet_id": 23114, "code": ".nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to", "label": 0}, {"snippet_id": 83386, "code": " if cs > 0: raise forms.ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={}", "label": 1}, {"snippet_id": 30533, "code": "(newUser) session.commit() user=session.query(User).filter_by(email=login_session['email']).one() return user.id def getUserInfo(user_id): user=session.query(User).filter_by(id=user_id).one() return user", "label": 1}, {"snippet_id": 26926, "code": " Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available", "label": 0}, {"snippet_id": 20928, "code": " stdout_file, stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password", "label": 1}, {"snippet_id": 16063, "code": " django.forms.formsets import formset_factory from django.http import Http404, HttpResponseRedirect from django.shortcuts import render from django.urls import reverse from django.utils.translation import", "label": 0}, {"snippet_id": 17803, "code": "(sha1_hash(user.password_hash.hash)).decode() if pw_hash !=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(", "label": 0}, {"snippet_id": 61249, "code": " a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self", "label": 0}, {"snippet_id": 6568, "code": " from..email import send_email from.forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm @auth.before_app_request def before_request", "label": 0}, {"snippet_id": 7868, "code": "['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url':", "label": 0}, {"snippet_id": 12001, "code": " the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\"", "label": 0}, {"snippet_id": 2386, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 64652, "code": " 'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set", "label": 0}, {"snippet_id": 57194, "code": "() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required def transaction_detail(request, *args, **kwargs", "label": 0}, {"snippet_id": 62675, "code": " the query :rtype: str \"\"\" with self.app.test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return", "label": 0}, {"snippet_id": 42313, "code": "): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by':[str(User.objects.get(username='Karyn').pk)], 'downloaded_at", "label": 0}, {"snippet_id": 50199, "code": "(email, password_hash) session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email already in use') return redirect(", "label": 0}, {"snippet_id": 57364, "code": " mutable=True) data.update(self.filter_data) data.update(self.request.GET) self.is_filtered=False if len([k for k in data.keys() if k !='page']) > 0: self.is_filtered=True self.filter=TransactionFilter", "label": 0}, {"snippet_id": 13150, "code": " settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url", "label": 0}, {"snippet_id": 22441, "code": " \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None: raise ValueError(\"Should not specify `java-worker-options`", "label": 0}, {"snippet_id": 66768, "code": " from lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models", "label": 0}, {"snippet_id": 31827, "code": ".username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections/results", "label": 1}, {"snippet_id": 84375, "code": " return HttpResponseNotAllowed(['GET']) def article_history(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki", "label": 0}, {"snippet_id": 50077, "code": " return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass except FileNotFoundError: editor_content=\"\" elif 'tempFile' in session or 'currentFile' in session:", "label": 0}, {"snippet_id": 43031, "code": " page should hide the composition fields ''' response=self.client.get('/qa/extractionscript/15/', follow=True) response=self.client.get('/qa/extractedtext/5/', follow=True) self.assertIn( b'<input type", "label": 0}, {"snippet_id": 71962, "code": " redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri() req._config", "label": 1}, {"snippet_id": 80678, "code": "(target_pos) @handled_slot(bool) def set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position:',", "label": 0}, {"snippet_id": 55460, "code": ".rmdir(self.path) \tdef stat(self): \t\treturn os.stat(self.path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t", "label": 0}, {"snippet_id": 25758, "code": ", include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client", "label": 0}, {"snippet_id": 53745, "code": ".__getattribute__(item) source=super(RedirectBuffer, self) \\ .__getattribute__('redirection_source') if hasattr(source, item): return getattr(source, item) return super(RedirectBuffer, self).__getattribute__(item)", "label": 0}, {"snippet_id": 38248, "code": ".gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC", "label": 0}, {"snippet_id": 1221, "code": " \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 56928, "code": "' model=BaseConcept context_object_name='concepts' paginate_by=8 queryset=None header=gettext_lazy('Concepts') request=None filter=None filter_data=None is_filtered=False def get(self, request, *args, ", "label": 0}, {"snippet_id": 81950, "code": " client_ip=ip, user_agent=client_agent, ) clicktracker.url.add(object) clicktracker.save() object.save() return link_redirect(request, pk) return render(request, 'url-detail-view.html',{'object': object, 'form", "label": 0}, {"snippet_id": 9840, "code": " ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in", "label": 0}, {"snippet_id": 52835, "code": " return Response(serializer.data, status=status.HTTP_201_CREATED) except Room.DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid", "label": 0}, {"snippet_id": 49121, "code": " edit, 'document_type_form': document_type_form} if code=='CP': try: list_presence=doc.extractedtext.rawchem.select_subclasses('extractedlistpresence').first() list_presence_tag_form=ExtractedListPresenceTagForm", "label": 0}, {"snippet_id": 62155, "code": " \"nosniff\", ) def validate_download_options(page): return validate_security_header( page, \"X-Download-Options\", \"noopen\", ) def validate_clickjacking_protection(page): return validate_security_header( page", "label": 0}, {"snippet_id": 40039, "code": "=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self): '''If", "label": 1}, {"snippet_id": 73941, "code": " upload_applications(request): position=Position.objects.get( id=request.POST.get(\"id\")) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if", "label": 0}, {"snippet_id": 24426, "code": " client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a", "label": 1}, {"snippet_id": 2909, "code": " success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self", "label": 0}, {"snippet_id": 17327, "code": " import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint('account', __name__) @bp.route('/login', methods=['GET', 'POST']) def login(): if flask.g.user", "label": 0}, {"snippet_id": 38123, "code": "', through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through", "label": 0}, {"snippet_id": 82202, "code": "*kwargs): context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count() print(urls_without_category) queryset=Category.objects.all() for cat in", "label": 0}, {"snippet_id": 521, "code": " ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called", "label": 0}, {"snippet_id": 52953, "code": " import UserRedirectView, UserUpdateView class BaseUserTestCase(TestCase): def setUp(self): self.user=self.make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client", "label": 0}, {"snippet_id": 30981, "code": "', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') editgrudge=session.query(Grudge).filter_by(id=grudge_id).one() grudget=session", "label": 0}, {"snippet_id": 65209, "code": " deductions) return deductions +=grade(code_obj, name, args.points, test_case_objs, vlevel) output_json(args.points, deductions) if __name__=='__main__': try: main() except Exception as e: sys.exit(str", "label": 0}, {"snippet_id": 83131, "code": "\"Shuts down the thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self", "label": 0}, {"snippet_id": 26875, "code": " Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill", "label": 0}, {"snippet_id": 56293, "code": " test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app') \\ .given_a_dynamic_link('') \\ .when_call_experience_redirect(", "label": 0}, {"snippet_id": 11068, "code": ".get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u'</b>'", "label": 0}, {"snippet_id": 77165, "code": " request_type=request_type, db_type=server_layer_def[\"db_type\"], version=version_info, tile_arg_names=tile_arg_names ) return layer def GetMapBaseUrl(self): \"\"\"Prepares the base URL for fetching tiles.", "label": 0}, {"snippet_id": 63725, "code": "/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn='hubba-bubba' came_from='/afterlogin/' session_id=self.add_outstanding_query", "label": 0}, {"snippet_id": 31364, "code": "'SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS=( 'social_core.backends.github.GithubOAuth2', 'social_core.backends.gitlab.GitLabOAuth2', 'social_core.backends.bitbucket.BitbucketOAuth', 'django.contrib", "label": 0}, {"snippet_id": 82996, "code": "\"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name", "label": 0}, {"snippet_id": 20253, "code": " are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for", "label": 0}, {"snippet_id": 49994, "code": "], email) os.makedirs(savepath, exist_ok=True) saveFilePath=os.path.join(savepath, name) tempFilePath=session.pop(\"tempFile\", None) if tempFilePath: shutil.copy(tempFilePath, saveFilePath) if \"diagram\"", "label": 0}, {"snippet_id": 17051, "code": "(request.POST or None, the_round=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data", "label": 0}, {"snippet_id": 65666, "code": "\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self.filechooser_creation_dialog) cancel_button=builder.get_object", "label": 0}, {"snippet_id": 35043, "code": ", get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm", "label": 0}, {"snippet_id": 63680, "code": " cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST',", "label": 0}, {"snippet_id": 18780, "code": "') \t\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado", "label": 1}, {"snippet_id": 30971, "code": " render_template('newgrudge.html', grudget_id=grudget_id) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if 'username", "label": 0}, {"snippet_id": 27628, "code": " you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the", "label": 0}, {"snippet_id": 47640, "code": " data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number", "label": 0}, {"snippet_id": 3989, "code": ") def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com", "label": 0}, {"snippet_id": 1236, "code": "-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None:", "label": 0}, {"snippet_id": 29027, "code": " for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original", "label": 0}, {"snippet_id": 35893, "code": "=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,{'product':", "label": 0}, {"snippet_id": 49525, "code": ".database_create import Base, User from database.database_insert import insert_user, insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import", "label": 0}, {"snippet_id": 83473, "code": ") editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args", "label": 0}, {"snippet_id": 46389, "code": "=None if not new_prod_title: if doc.title: new_prod_title='%s stub' % doc.title else: new_prod_title='unknown' product=Product.objects.create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc", "label": 0}, {"snippet_id": 60623, "code": " exception): title=None help=None if isinstance(exception, NotFound): status=404 info={} message=exception.args[0] elif isinstance(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif", "label": 0}, {"snippet_id": 6498, "code": " return self.oidc_error() flow=self.flow_for_request() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID", "label": 0}, {"snippet_id": 73653, "code": ".validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request)", "label": 0}, {"snippet_id": 36107, "code": " self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is ", "label": 0}, {"snippet_id": 15956, "code": ") if not rv: return False user=auth_get_user_by_email(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email or password') return False", "label": 0}, {"snippet_id": 414, "code": "[0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise", "label": 0}, {"snippet_id": 12584, "code": ".displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl", "label": 0}, {"snippet_id": 10444, "code": ".utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import", "label": 0}, {"snippet_id": 40350, "code": " records or, if there are more than 100, select 20% of them. \"\"\" from.qa_group import QAGroup from.extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1", "label": 0}, {"snippet_id": 76699, "code": ".GetTileArgs(world_wrapped_tile_col, abs_tile_row, zoom_level) tile_url=base_url +tile_args im_tile=_FetchMapTile(tile_url) if im_tile: if im_tile.size==(1, 1): im_tile=im_tile.resize((_TILE_PIXEL_SIZE", "label": 0}, {"snippet_id": 69907, "code": " if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index", "label": 0}, {"snippet_id": 6509, "code": ".http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: return self.oidc_error( ", "label": 0}, {"snippet_id": 15173, "code": "=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of", "label": 0}, {"snippet_id": 14654, "code": "\n \"\"\" CLI client for serial_redirection \"\"\" import signal import gateway_code.board_config as board_config from.. import serial_redirection from. import log_to_stderr def _get_node(board_cfg): if board_cfg", "label": 1}, {"snippet_id": 11807, "code": ".conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve", "label": 0}, {"snippet_id": 39258, "code": " raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) raw_min_comp=models.CharField(", "label": 0}, {"snippet_id": 84438, "code": " HttpResponseNotAllowed(['GET']) @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, ", "label": 0}, {"snippet_id": 63421, "code": "') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_no_authn_util(self): no_authn_urls_before=[path for path in self.app.config", "label": 0}, {"snippet_id": 82337, "code": " CategoryListView, CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView, link_redirect ) urlpatterns=[ re_path(r'admin/', admin.site.urls), re_path(r'^$', HomeView.as_view()", "label": 0}, {"snippet_id": 83332, "code": ".HiddenInput) class Meta: model=Article exclude=('creator', 'creator_ip', 'group', 'created_at', 'last_update') def clean_title(self): \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2", "label": 1}, {"snippet_id": 6349, "code": "]: logger.error('We are not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple audiences and not authorized party') return False else: if id_token['aud'] !=self.flow.client_id", "label": 0}, {"snippet_id": 80892, "code": "', 'depends':['website_event'], 'summary':\"\"\"\"\"\", 'description': \"\"\" Extension for the default Events module; used for BCNL,. \"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views", "label": 0}, {"snippet_id": 45635, "code": "(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document", "label": 0}, {"snippet_id": 9997, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()", "label": 0}, {"snippet_id": 82433, "code": "'category-detail-view'), re_path(r'^update/category/(?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update-view'), re_path(r'^delete/category/(?P<pk>(\\d)+)/$', CategoryDeleteView.as_view(", "label": 0}, {"snippet_id": 76418, "code": "(rect_of_tiles.Extent())) logger.debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int(column", "label": 0}, {"snippet_id": 36532, "code": "=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count", "label": 0}, {"snippet_id": 59763, "code": " return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{", "label": 0}, {"snippet_id": 16947, "code": ".assign_powers_from_prefs() for tp in g: gp=GamePlayer.objects.get(player=tp.player, game=new_game) current[gp.id]=gp.power data.append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset", "label": 0}, {"snippet_id": 82237, "code": " CategoryDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request,", "label": 0}, {"snippet_id": 71464, "code": " webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2.WSGIApplication()) class TestAuthMiddleware(test_base.BaseTestCase): def setUp(self): super(TestAuthMiddleware, self).setUp", "label": 0}, {"snippet_id": 51962, "code": "(\"No account found with that email. Would you like to register?\") return redirect(\"/login\") else: if user_record.password !=pw: template=h.handle_bad_attempts(remaining) return render_template(template", "label": 0}, {"snippet_id": 67350, "code": "-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['tws'].count()", "label": 0}, {"snippet_id": 37159, "code": " weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label=\"Weight Fraction Type\", initial=\"1\") extract_file=forms.FileField(label=\"Extracted Text CSV File\") def __init__", "label": 0}, {"snippet_id": 54373, "code": " of datums for politicians Format: JSON \"\"\" @app.route('/json/politicians/all') def all_politicians(): pols=Politician.all() politicians=[] for pol in pols: tokens=pol.name.title().split(' ') politician", "label": 0}, {"snippet_id": 33857, "code": " ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input", "label": 0}, {"snippet_id": 64356, "code": ") session.clear() return redirect(next_page) else: http_info=client.handle_logout_request( request.form['SAMLRequest'], subject_id, BINDING_HTTP_REDIRECT, relay_state=request.form['RelayState'] ) state", "label": 0}, {"snippet_id": 34219, "code": " '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser", "label": 0}, {"snippet_id": 17305, "code": " datetime import datetime from ipaddress import ip_address import flask from nyaa import email, forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import", "label": 0}, {"snippet_id": 2715, "code": " OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, *", "label": 0}, {"snippet_id": 83036, "code": ".hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__", "label": 0}, {"snippet_id": 49782, "code": ".config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload', methods=['POST'])", "label": 0}, {"snippet_id": 8285, "code": ": if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass", "label": 0}, {"snippet_id": 19315, "code": "()): return try: function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants", "label": 0}, {"snippet_id": 3615, "code": ".assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale", "label": 0}, {"snippet_id": 7276, "code": "(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False", "label": 0}, {"snippet_id": 58267, "code": " self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting') @mock.patch('core.common.utils.c_onboarding_status') def test_get_onboarding_status_with_settings", "label": 0}, {"snippet_id": 83348, "code": " for some errors regarding the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title'] if", "label": 1}, {"snippet_id": 2564, "code": " SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string from django.utils", "label": 0}, {"snippet_id": 12751, "code": ", used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request", "label": 0}, {"snippet_id": 72007, "code": " CephX from..services.exception import serialize_dashboard_exception from..services.ganesha import Ganesha, GaneshaConf, NFSException from..services.rgw_client import RgwClient def NfsTask(name, metadata", "label": 0}, {"snippet_id": 26917, "code": " redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources:", "label": 0}, {"snippet_id": 43463, "code": " save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 66607, "code": " def on_composite_unlock_button_clicked(self, widget): composite_unlock_entry=self.builder.get_object(\"composite_unlock_entry\") composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button", "label": 0}, {"snippet_id": 5833, "code": " everyone log in again after a restart. \"\"\" pass class OpenIDConnect(object): \"\"\" @see: https://developers.google.com/api-client-library/python/start/get_started @see: https://developers.google.com/api", "label": 0}, {"snippet_id": 14853, "code": "=user_data['user_id'] user.email=user_data['email'] user.password_hash=generate_password_hash(user_data['password_hash']) return user def auth_check_password(user, password): print('auth_check_password'", "label": 1}, {"snippet_id": 5743, "code": "=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id", "label": 0}, {"snippet_id": 59550, "code": "\") ) self.max_returned_rows=self.config(\"max_returned_rows\") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in", "label": 0}, {"snippet_id": 37719, "code": ": super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit();' }) def include_extract_form", "label": 0}, {"snippet_id": 25230, "code": " notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries", "label": 0}, {"snippet_id": 8709, "code": " etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the", "label": 0}, {"snippet_id": 16376, "code": " formset}) if created: i.save() else: RoundPlayer.objects.filter(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number()==round_num): if t.seed_games: if(r.roundplayer_set.count() ", "label": 1}, {"snippet_id": 51975, "code": "=pw: template=h.handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to SamePage\") return", "label": 0}, {"snippet_id": 62555, "code": " from eduid_webapp.authn.app import authn_init_app from eduid_common.api.app import eduid_init_app import logging logger=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class", "label": 0}, {"snippet_id": 18901, "code": " from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user)", "label": 0}, {"snippet_id": 48236, "code": "=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs)", "label": 1}, {"snippet_id": 13968, "code": " branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and", "label": 0}, {"snippet_id": 72659, "code": " Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request,", "label": 0}, {"snippet_id": 35638, "code": "() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip() if q > '': p=", "label": 0}, {"snippet_id": 50064, "code": "'currentFile']=filename try: with open(filepath) as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass except", "label": 0}, {"snippet_id": 17034, "code": " if expected_games < 1: expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST", "label": 0}, {"snippet_id": 14720, "code": " logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField, DateField, SelectField, \\ SelectMultipleField, FieldList,", "label": 1}, {"snippet_id": 50337, "code": " session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider) return oauth.authorize() @app.route('/callback/<provider>'", "label": 0}, {"snippet_id": 25424, "code": "\"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self):", "label": 0}, {"snippet_id": 79587, "code": " _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 48640, "code": "=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm", "label": 0}, {"snippet_id": 78430, "code": "'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time", "label": 0}, {"snippet_id": 84016, "code": "'revision': revision, 'redirected_from': redirected_from, 'allow_write': allow_write} if notification is not None: template_params.update({'is_observing': is_observing, 'can_observe': True}) if group_slug", "label": 0}, {"snippet_id": 15724, "code": "(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/submit', methods", "label": 0}, {"snippet_id": 25783, "code": "._internal_config else None) self._node_ip_address=ray_params.node_ip_address self._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url", "label": 0}, {"snippet_id": 23320, "code": " TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"", "label": 0}, {"snippet_id": 68360, "code": " date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl", "label": 0}, {"snippet_id": 2487, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this", "label": 0}, {"snippet_id": 57113, "code": ": concept_form=kwargs.get('concept_form', None) concept_class=concept_form._meta.model transaction_code=kwargs.get('transaction_code', None) if transaction_code: transaction=get_transaction_from_kwargs", "label": 0}, {"snippet_id": 51900, "code": ".update_session_for_good_login(user.u_id, user.displayname) session[\"new_user\"]=True flash(\"Account created!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app", "label": 0}, {"snippet_id": 26311, "code": ", process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the", "label": 0}, {"snippet_id": 77798, "code": ", name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this prefix', type=str, default", "label": 0}, {"snippet_id": 7519, "code": ".contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import", "label": 0}, {"snippet_id": 65396, "code": ".config_manager.get_string(\"history\", \"last-opened-db\") !=\"\" and exists(keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\")): self.logging_manager.log_debug( \"Found last opened database entry(\"", "label": 0}, {"snippet_id": 8281, "code": " third_party_auth.is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id,", "label": 0}, {"snippet_id": 53324, "code": ".source_to_code(source_code, step.source_path) except SyntaxError as error: return render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path) setattr( module, '__package__", "label": 0}, {"snippet_id": 65076, "code": "=sys.stderr) obj=None if not obj: raise ValueError('Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast", "label": 0}, {"snippet_id": 61340, "code": " its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue", "label": 0}, {"snippet_id": 47845, "code": "'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename", "label": 0}, {"snippet_id": 21914, "code": ") to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries.", "label": 0}, {"snippet_id": 44789, "code": ".clean) def test_long_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\"", "label": 1}, {"snippet_id": 21547, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already", "label": 0}, {"snippet_id": 39895, "code": "\nfrom django.db import models from.common_info import CommonInfo from django.core.exceptions import ValidationError from django.utils.translation import ugettext_lazy as _ from dashboard.models import ExtractedText", "label": 0}, {"snippet_id": 74254, "code": ".warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message) return False @property def access_form_valid(self): form=self._get_access_form() if form.is_valid", "label": 0}, {"snippet_id": 43386, "code": ".browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem", "label": 0}, {"snippet_id": 55853, "code": "(Link,self).__init__(path) \t\tassert(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList", "label": 0}, {"snippet_id": 10894, "code": "(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter", "label": 0}, {"snippet_id": 46114, "code": ".datadocument_set.get_queryset() context['extract_form']=form context['msg']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm", "label": 0}, {"snippet_id": 6917, "code": ", 'Reset Your Password', 'auth/email/reset_password', user=user, token=token, next=request.args.get('next')) flash('An email with instructions for resetting your password has been ' 'sent.') return redirect", "label": 0}, {"snippet_id": 29982, "code": " __tablename__='user' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) email=Column(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base): __tablename__", "label": 1}, {"snippet_id": 69981, "code": "): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %", "label": 1}, {"snippet_id": 73203, "code": ": model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data.get('email') email_domain=email.split('@')[1].lower() if email_domain !=\"canada.ca\": message=forms.ValidationError( format", "label": 0}, {"snippet_id": 70626, "code": " header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we", "label": 0}, {"snippet_id": 24836, "code": " components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address", "label": 1}, {"snippet_id": 37810, "code": "=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname']=forms.CharField(max_length=400) self.fields[", "label": 0}, {"snippet_id": 32133, "code": " a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is malformed and a token cannot be correctly generated from it. ''' while self.char", "label": 0}, {"snippet_id": 9494, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine", "label": 0}, {"snippet_id": 62424, "code": " eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set", "label": 0}, {"snippet_id": 33094, "code": "(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin)", "label": 1}, {"snippet_id": 26116, "code": " get_raylet_socket_name()) self.prepare_socket_file(self._raylet_socket_name) stdout_file, stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services", "label": 1}, {"snippet_id": 22957, "code": " from __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import", "label": 0}, {"snippet_id": 52788, "code": "} \"\"\" model=Message serializer_class=MessageSerializer permission_classes=[IsAuthenticated,] def create(self, request, *args, **kwargs): room_id=self.request.data.get('room') try: self.room=Room.objects", "label": 0}, {"snippet_id": 50068, "code": "(filepath) as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass except FileNotFoundError: editor_content=", "label": 0}, {"snippet_id": 73598, "code": " not request.user.is_authenticated: form=LoginForm() if request.method=='POST': clear_get_data(request) form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return", "label": 0}, {"snippet_id": 14178, "code": " to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form", "label": 0}, {"snippet_id": 43531, "code": " card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to", "label": 0}, {"snippet_id": 24254, "code": "\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun", "label": 1}, {"snippet_id": 46760, "code": ".append([count, \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType.objects.get( group_type=datagroup", "label": 0}, {"snippet_id": 81602, "code": " _name='res.partner' _inherit=['res.partner'] fit_subscriptions=fields.One2many(comodel_name='fit.subscription', inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count", "label": 0}, {"snippet_id": 47395, "code": "): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource, 'datagroup_list': datagroup_list", "label": 0}, {"snippet_id": 78868, "code": " raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict['title'] validator.validate_datarequest", "label": 0}, {"snippet_id": 75292, "code": " return HttpResponseRedirect(reverse('register')) cm=CommitteeMember.objects.get(id=cm_id) candidate.committee_members.remove(cm) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id'", "label": 0}, {"snippet_id": 34131, "code": ".send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self", "label": 0}, {"snippet_id": 2329, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 21573, "code": "=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 79492, "code": " not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not", "label": 0}, {"snippet_id": 9066, "code": "( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data", "label": 0}, {"snippet_id": 12769, "code": ", args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response.content def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request", "label": 0}, {"snippet_id": 63754, "code": " saml2.ident import decode from saml2.client import Saml2Client from saml2.response import LogoutResponse from saml2.metadata import entity_descriptor from werkzeug.exceptions import Forbidden from flask", "label": 0}, {"snippet_id": 60245, "code": " conn=getattr(connections, db_name, None) if not conn: info=self.inspect()[db_name] if info[\"file\"]==\":memory:\": conn=sqlite3.connect(\":memory:\") else: conn=sqlite3.connect( \"file:{}?immutable=1\".format", "label": 0}, {"snippet_id": 4672, "code": ": http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response", "label": 1}, {"snippet_id": 6159, "code": " refresh credentials\", exc_info=True) del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server(request.url) g.oidc_id_token=id_token return None def require_login(self, view_func", "label": 0}, {"snippet_id": 7584, "code": " ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register", "label": 0}, {"snippet_id": 47325, "code": "=datasource) if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() return redirect('data_source_list') return render(request, template_name,{'object_list':", "label": 0}, {"snippet_id": 81487, "code": " new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event", "label": 0}, {"snippet_id": 76750, "code": " The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\") if not tile: return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new", "label": 0}, {"snippet_id": 23811, "code": " psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys", "label": 0}, {"snippet_id": 51614, "code": " createGetScript(endpoint, params): script='curl '+start_url+endpoint+'?' keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script+", "label": 0}, {"snippet_id": 72547, "code": "'positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST", "label": 0}, {"snippet_id": 74958, "code": ".forms import UploadForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked", "label": 0}, {"snippet_id": 19675, "code": ", choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants", "label": 0}, {"snippet_id": 27105, "code": " be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether to start the", "label": 0}, {"snippet_id": 78336, "code": " ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def", "label": 0}, {"snippet_id": 37083, "code": "'required' class Meta: model=DataGroup fields=['name', 'description', 'url', 'group_type', 'downloaded_by', 'downloaded_at', 'download_script', 'data_source', 'csv'] widgets={'downloaded_at': DatePickerInput", "label": 0}, {"snippet_id": 42308, "code": " DataSource from here.') def test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by'", "label": 0}, {"snippet_id": 44320, "code": ".is_enabled(), \"Button should be disabled\") tag=self.browser.find_element_by_class_name('taggit-tag') tag.click() self.assertTrue(submit.is_enabled(), \"Button should be enabled\") def test_field_exclusion(self)", "label": 0}, {"snippet_id": 427, "code": " Views and functions for serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import", "label": 0}, {"snippet_id": 21813, "code": " from __future__ import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str)", "label": 0}, {"snippet_id": 54636, "code": " assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\")", "label": 1}, {"snippet_id": 5525, "code": " target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/'", "label": 0}, {"snippet_id": 32308, "code": " Utility iterator to allow easy creation of a stream of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into an Abstract", "label": 0}, {"snippet_id": 32978, "code": "'prod_type', 'description','tags',] readonly_fields=('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products'", "label": 1}, {"snippet_id": 63095, "code": " test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass'] now=int(time.time()) self.assertTrue(now -then < 5)", "label": 0}, {"snippet_id": 73675, "code": "'login') def parse_position_return_dictionary(create_position_form): return parse_upload(create_position_form.save(commit=False)) def save_position_to_user(request): request.user.positions.add(Position", "label": 0}, {"snippet_id": 52919, "code": ".conf.urls import url from realpal.apps.chat.views import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(", "label": 1}, {"snippet_id": 19316, "code": "): return try: function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants", "label": 0}, {"snippet_id": 36254, "code": " dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get('/').content.decode", "label": 0}, {"snippet_id": 13676, "code": " the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper,", "label": 0}, {"snippet_id": 79629, "code": " update_datarequest(original_action, context, data_dict): \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed", "label": 0}, {"snippet_id": 5912, "code": " self.app=app app.config.setdefault('OIDC_SCOPES',['openid', 'email']) app.config.setdefault('OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config", "label": 0}, {"snippet_id": 66806, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): domain=request.GET.get(", "label": 0}, {"snippet_id": 58145, "code": ": 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding", "label": 1}, {"snippet_id": 65762, "code": "), self.database_manager) def create_tab(self, title, headerbar): if self.container==NotImplemented: self.create_container() page_instance=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0) tab_label", "label": 0}, {"snippet_id": 62038, "code": "=16070400: return True else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if page.encoding is None: return False", "label": 0}, {"snippet_id": 35024, "code": " django.urls import resolve from django.utils import timezone, safestring from django.shortcuts import redirect from django.db.models import Count, Q from django.shortcuts import render, get_object_or_404", "label": 0}, {"snippet_id": 62539, "code": " no_authn_views from eduid_common.authn.eduid_saml2 import get_authn_request from eduid_common.authn.tests.responses import(auth_response, logout_response, logout_request) from eduid_webapp.authn.app import", "label": 0}, {"snippet_id": 35871, "code": "'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html'))", "label": 0}, {"snippet_id": 30385, "code": "=gplus_id userinfo_url=\"https://www.googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json", "label": 0}, {"snippet_id": 50536, "code": " name): BaseUserLock.__init__(self, os.environ[\"HOME\"]+\"/.openhome-build/\"+name+\".lock\") def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return", "label": 0}, {"snippet_id": 34595, "code": ".values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first", "label": 0}, {"snippet_id": 56181, "code": "() self.response=client.get('{}?{}'.format(reverse('email-confirmation-redirect'), 'token=ABXZ')) return self def then_response_should_be_a_redirect_to_app_deeplink_with_params(self): assert self.response", "label": 0}, {"snippet_id": 45628, "code": " and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note", "label": 0}, {"snippet_id": 25663, "code": " and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"", "label": 0}, {"snippet_id": 48615, "code": ".value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in", "label": 0}, {"snippet_id": 79600, "code": ") datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job", "label": 1}, {"snippet_id": 37793, "code": "(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas']", "label": 0}, {"snippet_id": 46994, "code": "'data_source/datasource_confirm_delete.html'): datagroup=get_object_or_404(DataGroup, pk=pk) if request.method=='POST': datagroup.delete() return redirect('data_group_list') return render(request, template_name", "label": 0}, {"snippet_id": 54396, "code": ".title(), 'tokens': tokens, 'search_count': pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp \"\"\"News", "label": 0}, {"snippet_id": 15923, "code": ".password.errors.append('Password should be at least 8 characters long') return False self.user=auth_add_user(self.email.data, self.password.data) return True class LoginForm(FlaskForm): email=StringField", "label": 0}, {"snippet_id": 29258, "code": ".index_view, h=helpers, get_url=url_for ) admin=Admin(app, name='benwaonline', template_mode='bootstrap3') setup_adminviews(admin, db) register_blueprints(app) register_cli(app) register_teardowns(app)", "label": 0}, {"snippet_id": 23807, "code": ": docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes", "label": 0}, {"snippet_id": 63895, "code": " redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len(idps)==1 idp=idps.keys()", "label": 1}, {"snippet_id": 1479, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 16444, "code": "\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters", "label": 0}, {"snippet_id": 76417, "code": ", str(rect_of_tiles.Extent())) logger.debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int", "label": 0}, {"snippet_id": 16163, "code": " Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num, template): \"\"\"Just render the specified template with", "label": 0}, {"snippet_id": 31360, "code": " SOCIAL_AUTH_BITBUCKET_SECRET=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS=( 'social_core.backends.github.GithubOAuth2', 'social_core.backends.gitlab.GitLabOAuth2', 'social_core", "label": 0}, {"snippet_id": 66877, "code": "=ThreatMiner() context['tm_url']=tm.getURIFromDomain(domain) context['tm_sample']=tm.getSamplesFromDomain(domain) context['tm_report']=tm.getReportFromDomain(domain) context['bls']=blacklist.objects.filter", "label": 0}, {"snippet_id": 30832, "code": " session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete) @app.route", "label": 0}, {"snippet_id": 33932, "code": " a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link", "label": 0}, {"snippet_id": 83353, "code": " Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise", "label": 1}, {"snippet_id": 39356, "code": "', 'raw_max_comp', 'unit_type', 'weight_fraction_type', 'report_funcuse', 'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property", "label": 0}, {"snippet_id": 13475, "code": " third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get", "label": 0}, {"snippet_id": 9863, "code": "()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest):", "label": 0}, {"snippet_id": 2722, "code": " __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID", "label": 0}, {"snippet_id": 21029, "code": "._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE", "label": 1}, {"snippet_id": 75980, "code": ") ordering=('-update_dt',) def __str__(self): redirect_text='{type}:{from_to_url}' if self.redirect_type in['prefix', 'page', 'exact']: return redirect_text.format( type=self.get_redirect_type_display(", "label": 0}, {"snippet_id": 80128, "code": ", **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets(", "label": 0}, {"snippet_id": 9564, "code": ", and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 32456, "code": "> 0: return RedirectionsHelper(redirs) else: return None def redirection(self): if self.accept(TokenType.REDIRECT_OUT): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(1,(filename,", "label": 0}, {"snippet_id": 75236, "code": ".save(commit=False) committee_member.person=person committee_member.save() candidate.committee_members.add(committee_member) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id'", "label": 0}, {"snippet_id": 27827, "code": " events with a with statement. Attributes: event_type(str): The type of the event being logged. extra_data: Additional information to log. \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"", "label": 0}, {"snippet_id": 46737, "code": " errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']=='': line['title']=line['filename']", "label": 0}, {"snippet_id": 52836, "code": " return Response(serializer.data, status=status.HTTP_201_CREATED) except Room.DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self)", "label": 0}, {"snippet_id": 20176, "code": "\" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args:", "label": 0}, {"snippet_id": 38301, "code": "(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name", "label": 0}, {"snippet_id": 74775, "code": " True}) @login_required def candidate_profile(request, candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate", "label": 0}, {"snippet_id": 39753, "code": " one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text", "label": 0}, {"snippet_id": 49296, "code": ".POST, instance=extracted_text) if ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return redirect(referer, pk=pk) @login_required() def save_list_presence_tag_form(request", "label": 0}, {"snippet_id": 80715, "code": " def start_bifi_scan(self, checked): print('Starting BiFi scan...') self.matisse.birefringent_filter_scan() @handled_slot(bool) def start_thin_etalon_scan(self, checked): print('Starting thin etalon scan", "label": 0}, {"snippet_id": 5227, "code": " target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }", "label": 0}, {"snippet_id": 82963, "code": "\"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes", "label": 0}, {"snippet_id": 11775, "code": ", pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id", "label": 0}, {"snippet_id": 68140, "code": " writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv", "label": 0}, {"snippet_id": 42387, "code": ".client.get(f'/datagroup/%s/' % dg_co.id) self.assertIn(b'Download Raw', resp.content) dg_ids=DataDocument.objects.filter( id__in=ExtractedChemical.objects.all().values('extracted_text_id') ).order_by(", "label": 0}, {"snippet_id": 34737, "code": "=True)).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate", "label": 0}, {"snippet_id": 79618, "code": " 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action, context, data_dict): \"\"\" Action", "label": 1}, {"snippet_id": 68291, "code": "(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0", "label": 0}, {"snippet_id": 66212, "code": ".child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property(keyfile_unlock_stack_page", "label": 0}, {"snippet_id": 59754, "code": "\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name): queries", "label": 0}, {"snippet_id": 36988, "code": " worth noting that if when making the call to here from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter", "label": 0}, {"snippet_id": 5771, "code": " functools import wraps import os import json from base64 import b64encode import time as time_module from copy import copy import logging from six.moves.urllib.parse import urlencode from flask import", "label": 0}, {"snippet_id": 48536, "code": "=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect", "label": 0}, {"snippet_id": 72122, "code": ") ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type, ", "label": 0}, {"snippet_id": 65056, "code": ".UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', 'eval') except BaseException as e: if vlevel >=1: print(repr(e), file", "label": 0}, {"snippet_id": 65255, "code": ".ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar", "label": 0}, {"snippet_id": 49814, "code": " in session: email=session['email'] elif 'social' in session: email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename", "label": 0}, {"snippet_id": 6209, "code": " flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for('oidc_callback', _external=True) return flow", "label": 0}, {"snippet_id": 14539, "code": "[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile", "label": 0}, {"snippet_id": 53145, "code": ".post(update_url, data) self.assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None) self.assertEqual(self.view.get_object().house_cond, None) data=", "label": 0}, {"snippet_id": 16401, "code": "()))) return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect(reverse('create_games', args=(tournament_id, r.number()))) return render(request", "label": 1}, {"snippet_id": 75245, "code": " HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: person_form=CommitteeMemberPersonForm() committee_member_form=CommitteeMemberForm() context={'candidate': candidate", "label": 0}, {"snippet_id": 78680, "code": " followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context", "label": 0}, {"snippet_id": 21367, "code": " already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER", "label": 0}, {"snippet_id": 22593, "code": " can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile", "label": 0}, {"snippet_id": 31029, "code": ".method=='POST': if request.form['name']: editgrudge.name=request.form['name'] if request.form['description']: editgrudge.description=request.form['description'] if request.form['processed']: editgrudge", "label": 0}, {"snippet_id": 63283, "code": ": resp=c.get('/') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_cookie(self): token=('a7MPUEQQLAEEQEAQDGJOXKAMFM467EUW6HCETFI4VP5JCU3CDVJDQZSHMXAOSC", "label": 0}, {"snippet_id": 2940, "code": "'oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session", "label": 0}, {"snippet_id": 73603, "code": "=LoginForm() if request.method=='POST': clear_get_data(request) form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is", "label": 0}, {"snippet_id": 41481, "code": " ExtractedChemical, 'FU': ExtractedFunctionalUse, 'HP': ExtractedHabitsAndPractices, 'CP': ExtractedListPresence, 'HH': ExtractedHHRec } for code, model in group_models.items(): if DataDocument.objects.filter(", "label": 1}, {"snippet_id": 76494, "code": ".AsTuple())) im_true=im_whole_tiles.crop(within_tiled_image.AsTuple()) logger.debug(\"Stretching to requested: %s\", str( (user_width, user_height))) im_user=im_true.resize((user_width, user_height), Image", "label": 0}, {"snippet_id": 30618, "code": ").one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session.query(Grudget).all() return jsonify(grudget=[g.serialize for g in grudgets]) @app.route(", "label": 0}, {"snippet_id": 29809, "code": " adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session, tagname): instance=Tag.query.filter_by(name=tagname).first() if instance: return instance, False", "label": 0}, {"snippet_id": 61655, "code": " expires_set=validate_expires(page), cache_control_set=validate_cache_control_set(page), cache_control_revalidate_set=validate_cache_must_revalidate(page), cache_control_nocache_set=validate_nocache(page),", "label": 1}, {"snippet_id": 52505, "code": ": \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() checked_lst=request.form.get(\"completion\") updated_notes=request.form.get(\"notes\") project_object.notes=updated_notes congratulatory_messages", "label": 0}, {"snippet_id": 23265, "code": "\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed", "label": 0}, {"snippet_id": 9481, "code": " destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email", "label": 0}, {"snippet_id": 67980, "code": " get_queryset(self): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('events')) return query class EventListView(PaginationMixin, ListView): model=Event template_name='threat_hunter/event_list", "label": 0}, {"snippet_id": 4449, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self", "label": 0}, {"snippet_id": 24945, "code": ".ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the", "label": 0}, {"snippet_id": 15216, "code": "=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) delta=FloatField('New Value',[validators.required()])", "label": 0}, {"snippet_id": 2044, "code": "(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def", "label": 0}, {"snippet_id": 77768, "code": "(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher", "label": 1}, {"snippet_id": 4865, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/", "label": 0}, {"snippet_id": 69155, "code": "(32)) traefik.ensure_traefik_config(STATE_DIR) unit_params=dict( python_interpreter_path=sys.executable, jupyterhub_config_path=os.path.join(HERE, 'jupyterhub_config.py'), install_prefix=INSTALL_PREFIX", "label": 0}, {"snippet_id": 13941, "code": ", end_bold=u'</b>', enterprise_name=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 64530, "code": "'Token login failed, redirecting user to{}'.format(location_on_fail)) return redirect(location_on_fail) @authn_views.route('/saml2-metadata') def metadata(): \"\"\" Returns an XML with the SAML 2.0 metadata", "label": 0}, {"snippet_id": 76933, "code": " Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e", "label": 0}, {"snippet_id": 64327, "code": " current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for user{0} ", "label": 0}, {"snippet_id": 74411, "code": "*kwargs) def _rendering_done_hook(self): self.eval_action(\"REVIEW\") class _ReportActionPartial(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self", "label": 0}, {"snippet_id": 31006, "code": "(Grudget).filter_by(id=grudget_id).one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to edit this grudge.');}</script><body onload", "label": 1}, {"snippet_id": 65611, "code": ".ResponseType.OK)) self.filechooser_creation_dialog.set_current_name(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\")", "label": 0}, {"snippet_id": 36929, "code": " distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats", "label": 0}, {"snippet_id": 63232, "code": "'TOKEN_LOGIN_FAILURE_REDIRECT_URL'])) class UnAuthnAPITestCase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. ", "label": 0}, {"snippet_id": 9309, "code": " json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True", "label": 0}, {"snippet_id": 37417, "code": "*args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required' class Meta", "label": 0}, {"snippet_id": 59231, "code": " DatabaseDownload, DatabaseView from.views.index import IndexView from.views.special import JsonDataView from.views.table import RowView, TableView from.utils import( InterruptedError, Results, escape_css_string", "label": 0}, {"snippet_id": 83184, "code": " subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run", "label": 0}, {"snippet_id": 5861, "code": "/authorized_api_web_server_calendar.py \"\"\" def __init__(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self.credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials()", "label": 0}, {"snippet_id": 84170, "code": " return redirect(new_article) elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip} if group_slug is not None: initial.update({'content_type': group_ct.id, 'object_id': group", "label": 0}, {"snippet_id": 63707, "code": " ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService", "label": 0}, {"snippet_id": 4433, "code": " in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id) self.assertEqual(12, get_partition_id(11002))", "label": 0}, {"snippet_id": 74756, "code": " else: person_form=PersonForm(initial=shib_info, degree_type=degree_type) candidate_form=CandidateForm(degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form': person_form", "label": 0}, {"snippet_id": 67016, "code": ".html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'):", "label": 0}, {"snippet_id": 34315, "code": "=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get", "label": 0}, {"snippet_id": 33290, "code": ".register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register", "label": 1}, {"snippet_id": 56810, "code": " concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required(", "label": 0}, {"snippet_id": 62591, "code": " this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config,", "label": 0}, {"snippet_id": 79949, "code": ".get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job", "label": 1}, {"snippet_id": 43620, "code": " 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]:", "label": 0}, {"snippet_id": 48156, "code": " login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm", "label": 1}, {"snippet_id": 37181, "code": ": self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {'style':", "label": 0}, {"snippet_id": 466, "code": " django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files", "label": 0}, {"snippet_id": 67747, "code": "=AttributeSearchForm(self.request.GET) context['search_form']=search_form return context def get_queryset(self): query=Attribute.objects.order_by('-timestamp') category=self.request.GET.get('category') type=self", "label": 0}, {"snippet_id": 82704, "code": "\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent", "label": 0}, {"snippet_id": 35386, "code": " data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size']", "label": 0}, {"snippet_id": 75565, "code": ": return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis.current_file_name) response=FileResponse", "label": 0}, {"snippet_id": 6409, "code": "-self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: logger.error('Invalid google apps domain')", "label": 0}, {"snippet_id": 60925, "code": ":type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is", "label": 0}, {"snippet_id": 15761, "code": " render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST'", "label": 0}, {"snippet_id": 60752, "code": " :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called", "label": 0}, {"snippet_id": 65554, "code": ".start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") filechooser_opening_dialog.close(", "label": 1}, {"snippet_id": 56558, "code": ".then_response_should_be_a_redirect_to('pachatary://app/') class ScenarioMaker: def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self,", "label": 1}, {"snippet_id": 67368, "code": ") count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['exs'].count() if count > 0: context", "label": 0}, {"snippet_id": 34613, "code": "]=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of", "label": 1}, {"snippet_id": 23242, "code": " a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method", "label": 0}, {"snippet_id": 13536, "code": ") if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account", "label": 0}, {"snippet_id": 28304, "code": "\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed", "label": 0}, {"snippet_id": 80358, "code": ".restart_action.triggered.connect(self.restart) self.set_wavelength_action.triggered.connect(self.set_wavelength_dialog) self.set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog", "label": 0}, {"snippet_id": 10001, "code": "( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order", "label": 0}, {"snippet_id": 46948, "code": " return redirect('data_group_detail', pk=datagroup.id) form.referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled=True groups=GroupType.objects", "label": 0}, {"snippet_id": 19562, "code": "\"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e", "label": 1}, {"snippet_id": 60442, "code": ") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/", "label": 0}, {"snippet_id": 41816, "code": " passed are incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertIsInstance", "label": 0}, {"snippet_id": 39990, "code": ".CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True,", "label": 0}, {"snippet_id": 31677, "code": " import reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request", "label": 1}, {"snippet_id": 11879, "code": ".external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps", "label": 0}, {"snippet_id": 48898, "code": "'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path", "label": 0}, {"snippet_id": 46180, "code": "'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] ext_parent, ext_child=get_extracted_models(dg.type) for i, row in enumerate(csv.DictReader(info)): d=docs.get", "label": 0}, {"snippet_id": 24013, "code": " methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if", "label": 0}, {"snippet_id": 36252, "code": " import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get(", "label": 0}, {"snippet_id": 41912, "code": "}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should be present", "label": 0}, {"snippet_id": 23695, "code": " _default_handler.close() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested", "label": 1}, {"snippet_id": 60430, "code": ".prepare_jinja2_environment(env=self.jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?)?$>\") app.add_route(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" ", "label": 0}, {"snippet_id": 1975, "code": "\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href", "label": 0}, {"snippet_id": 64332, "code": " request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for user{0} ' 'Performing local logout'.format( session", "label": 0}, {"snippet_id": 63424, "code": " 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_no_authn_util(self): no_authn_urls_before=[path for path in self.app.config['NO_AUTHN_URLS']] no_authn_path", "label": 0}, {"snippet_id": 18220, "code": " options define(\"port\", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler", "label": 1}, {"snippet_id": 59392, "code": "=parameter \"\"\".strip()), ConfigOption(\"default_cache_ttl\", 365 * 24 * 60 * 60, \"\"\" Default HTTP cache TTL(used in Cache-Control: max-age=header) \"\"\".strip()), ConfigOption(\"cache_size_kb\", 0, \"\"\" SQLite", "label": 1}, {"snippet_id": 61134, "code": " name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self", "label": 0}, {"snippet_id": 36212, "code": "', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo", "label": 1}, {"snippet_id": 79905, "code": " been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request", "label": 0}, {"snippet_id": 33199, "code": "=super(PUCAdmin, self).get_changeform_initial_data(request) get_data['last_edited_by']=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request)", "label": 0}, {"snippet_id": 16743, "code": "(omitting_players=sitters, players_doubling_up=two_gamers) @permission_required('tournament.add_game') def seed_games(request, tournament_id, round_num): \"\"\"Seed players to the games for a round\"\"\" t=get_modifiable_tournament_or_404", "label": 0}, {"snippet_id": 64031, "code": ".saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=['POST']) @MarshalWith(LogoutResponseSchema) def logout(", "label": 0}, {"snippet_id": 59171, "code": ": my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email) @receiver(post_save, sender", "label": 1}, {"snippet_id": 67231, "code": "): template_name='ip/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if", "label": 0}, {"snippet_id": 75814, "code": " ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log=logging.getLogger(__name__) HTTP_STATUS_CHOICES=", "label": 0}, {"snippet_id": 39575, "code": " data_document=models.OneToOneField('DataDocument',on_delete=models.CASCADE, primary_key=True) prod_name=models.CharField(max_length=500, null=True, blank=True) doc_date=models.CharField(max_length=25,", "label": 0}, {"snippet_id": 50868, "code": " for key, value in kwarg_dict.items(): if key in result: result[key]=value else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)) return result class Builder(object", "label": 0}, {"snippet_id": 37140, "code": " class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type", "label": 0}, {"snippet_id": 80671, "code": " position to{target_pos}.\") self.matisse.set_bifi_motor_pos(target_pos) @handled_slot(bool) def set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title=", "label": 0}, {"snippet_id": 26389, "code": " true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true.", "label": 0}, {"snippet_id": 67435, "code": ".get_context_data(**kwargs) context['count']=self.object_list.count() context['alltag']=Tag.objects.order_by('id') taglist=self.request.GET.getlist('tag') context['tags']=Tag.objects.filter(id__in=taglist) search_form", "label": 0}, {"snippet_id": 73125, "code": "('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1", "label": 0}, {"snippet_id": 58082, "code": "=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email/milestone_ortc_notify_text\" ) self.assertEqual(len(mail.outbox), 1) @mock.patch('core.common.utils.c_onboarding_status') @unpack @data", "label": 0}, {"snippet_id": 12698, "code": "'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api", "label": 0}, {"snippet_id": 32809, "code": " redirections): self.base=base self.redirections=redirections def execute(self, builtins): with self.redirections: self.base.execute(builtins) def wait(self): self.base.wait() class RedirectionHelper: '", "label": 0}, {"snippet_id": 66941, "code": "> 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=domain)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context", "label": 0}, {"snippet_id": 74110, "code": "*kwargs) class DashboardPartial(_PassphraseClearingPartial): EVAL_ACTION_TYPE=\"DASHBOARD\" class ReportBasePartial(EvalDataMixin, wizard_builder_partials.WizardFormPartial): model=models.Report storage_helper", "label": 0}, {"snippet_id": 38737, "code": ".extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace(' ', '_') name='", "label": 0}, {"snippet_id": 6600, "code": " flash('Your session has expired.') return redirect(url_for('auth.login')) if not current_user.confirmed \\ and request.endpoint[:5] !='auth.' \\ and request.endpoint !='static': return redirect(url_for('auth", "label": 0}, {"snippet_id": 81883, "code": ".get(pk=pk) form=CounterCountingForm(request.POST or None) if form.is_valid(): object.count +=1 ip=get_client_ip(request) client_agent=request.META['HTTP_USER_AGENT'] clicktracker=ClickTracking.objects", "label": 1}, {"snippet_id": 118, "code": " called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head,", "label": 1}, {"snippet_id": 56399, "code": "(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_profile(username='a_b.c', bio='my info', pic='url') \\ .given_a_public_domain", "label": 0}, {"snippet_id": 45655, "code": "('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm", "label": 0}, {"snippet_id": 40624, "code": " test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div", "label": 0}, {"snippet_id": 57502, "code": ": transaction.closed=True transaction.closed_date=timezone.datetime.now() transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']", "label": 0}, {"snippet_id": 22647, "code": " events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target", "label": 1}, {"snippet_id": 36164, "code": " PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used to filter which", "label": 0}, {"snippet_id": 6825, "code": " token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST']) @login_required def change_password(): form", "label": 0}, {"snippet_id": 20588, "code": " as ray_constants from ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name, get_raylet_socket_name, new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file", "label": 0}, {"snippet_id": 26355, "code": "): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the", "label": 0}, {"snippet_id": 27268, "code": " huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor", "label": 0}, {"snippet_id": 14466, "code": " an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js", "label": 0}, {"snippet_id": 79356, "code": " } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id", "label": 0}, {"snippet_id": 36368, "code": " extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self", "label": 0}, {"snippet_id": 53487, "code": "(test_filename: str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return True while len(frames) > 1", "label": 0}, {"snippet_id": 71915, "code": ") msgs=req.get_messages() self.assertEquals(msgs, None) msgs_key=req.get_messages() self.assertEquals(msgs_key, None) def test_set_redirect_uri(self): req=EngineAuthRequest.blank('/auth/google') req._load_session", "label": 1}, {"snippet_id": 65602, "code": ".FileChooserAction.SAVE, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK)) self.filechooser_creation_dialog.set_current_name(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal", "label": 0}, {"snippet_id": 12704, "code": " return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get", "label": 0}, {"snippet_id": 37509, "code": " HabitsPUCForm(BasePUCForm): class Meta: model=ExtractedHabitsAndPracticesToPUC fields=['puc'] class BulkProductPUCForm(forms.ModelForm): id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput", "label": 0}, {"snippet_id": 66270, "code": "\"keyfile_unlock_button\") keyfile_unlock_button.connect(\"clicked\", self.on_keyfile_unlock_button_clicked) composite_unlock_button=self.builder.get_object(\"composite_unlock_button\") composite_unlock_button", "label": 0}, {"snippet_id": 581, "code": " path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_", "label": 1}, {"snippet_id": 54563, "code": " attributesOf, parse import os import pprint from hwml import Problem, Assignment from collections import defaultdict import string class HWML_processor(object): \tdef prepare_for_processing(self): \t\tself", "label": 1}, {"snippet_id": 68510, "code": " context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter", "label": 0}, {"snippet_id": 51544, "code": " path.\" subprocess.check_call([program] +list(args)) def run(buildname=\"build\", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder", "label": 0}, {"snippet_id": 5068, "code": " licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image", "label": 0}, {"snippet_id": 19142, "code": "=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run", "label": 1}, {"snippet_id": 71697, "code": ".session.user_id='1' resp._save_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) s1=models.Session.query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self):", "label": 0}, {"snippet_id": 35738, "code": "'product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p", "label": 0}, {"snippet_id": 71774, "code": "=models.User.query().count() self.assertEqual(user_count, 1) user=models.User.query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req._load_session() req", "label": 0}, {"snippet_id": 1406, "code": " part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace", "label": 1}, {"snippet_id": 53326, "code": ".source_to_code(source_code, step.source_path) except SyntaxError as error: return render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path) setattr( module, '__package__', '.", "label": 0}, {"snippet_id": 32080, "code": " Performs lexical analysis on a raw string. Args: string: The raw string on which to operate. ''' def __init__(self, string): self.string=string self.position=-1 self.char=None self.read() def read(self):", "label": 0}, {"snippet_id": 84185, "code": " initial.update({'content_type': group_ct.id, 'object_id': group.id}) if article is None: initial.update({'title': title, 'action': 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']=", "label": 0}, {"snippet_id": 60798, "code": " \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 19801, "code": ", redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password", "label": 1}, {"snippet_id": 61300, "code": " a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends", "label": 0}, {"snippet_id": 19173, "code": ".worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock", "label": 1}, {"snippet_id": 60287, "code": "): try: cursor=conn.cursor() cursor.execute(sql, params or{}) max_returned_rows=self.max_returned_rows if max_returned_rows==page_size: max_returned_rows +=1 if max_returned_rows and truncate: rows=cursor", "label": 0}, {"snippet_id": 13461, "code": " redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 47390, "code": "='POST': if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource", "label": 0}, {"snippet_id": 55348, "code": " \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os", "label": 0}, {"snippet_id": 35193, "code": "[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except: ds.no_category=0 dgs=ds", "label": 0}, {"snippet_id": 27487, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START", "label": 0}, {"snippet_id": 65024, "code": " left=comp.left right=comp.comparators[0] left_valid=False if type(left)==ast.Call: if type(left.func)==ast.Name and left.func.id==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str", "label": 0}, {"snippet_id": 59310, "code": " 3, \"\"\" Number of threads in the thread pool for executing SQLite queries \"\"\".strip()), ConfigOption(\"sql_time_limit_ms\", 1000, \"\"\" Time limit for a SQL query in milliseconds \"\"\".strip()), ConfigOption(", "label": 0}, {"snippet_id": 67250, "code": ".get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail", "label": 1}, {"snippet_id": 19583, "code": " raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log", "label": 1}, {"snippet_id": 73187, "code": "=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields", "label": 0}, {"snippet_id": 28940, "code": ", worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote", "label": 0}, {"snippet_id": 65790, "code": ".ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click", "label": 0}, {"snippet_id": 10190, "code": "': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 57003, "code": " k in data.keys() if k !='page']) > 0: self.is_filtered=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by", "label": 0}, {"snippet_id": 84710, "code": ".observe(article, request.user, 'wiki_observed_article_changed') return redirect(article) return HttpResponseNotAllowed(['POST']) @login_required def stop_observing_article(request, title, group_slug=None", "label": 0}, {"snippet_id": 36844, "code": "-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats", "label": 0}, {"snippet_id": 15262, "code": "(ChangeOneModelForm), min_entries=0) change_input_series_all_models=FieldList(FormField(ChangeAllModelsForm), min_entries=0) change_timeseries_value_several_days=FieldList(FormField(ChangeInputNewValue), min_entries=0)", "label": 0}, {"snippet_id": 36584, "code": "\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list(", "label": 0}, {"snippet_id": 61878, "code": " a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache", "label": 0}, {"snippet_id": 53781, "code": " provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache() self", "label": 0}, {"snippet_id": 3216, "code": " return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request", "label": 0}, {"snippet_id": 19953, "code": " gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data", "label": 0}, {"snippet_id": 47989, "code": ") def habitsandpractices(request, pk, template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)', script_type='EX')", "label": 0}, {"snippet_id": 14644, "code": ".AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), }", "label": 0}, {"snippet_id": 28716, "code": " global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close", "label": 1}, {"snippet_id": 71661, "code": "(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id", "label": 0}, {"snippet_id": 50563, "code": " self.f.close() return False def release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only one build at a time can run with the given name per user per machine.", "label": 0}, {"snippet_id": 62733, "code": " so that the user is logged in(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with any subsequent request that needs to be athenticated. :param", "label": 0}, {"snippet_id": 12632, "code": "=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider", "label": 0}, {"snippet_id": 77408, "code": "[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers processing done", "label": 0}, {"snippet_id": 73893, "code": "( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render(request, 'positions.html', positions_list_data(request, sort_by)) def position_detail_data(request, position): return", "label": 1}, {"snippet_id": 51, "code": " _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django", "label": 0}, {"snippet_id": 31678, "code": " reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url", "label": 1}, {"snippet_id": 68040, "code": " context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form", "label": 0}, {"snippet_id": 7494, "code": " result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}, 200 except exc.SQLAlchemyError as error: logging.error(error, exc_info=True) return{\"message\": \"api is down\"}", "label": 0}, {"snippet_id": 6049, "code": ".set_cookie( self.app.config['OIDC_ID_TOKEN_COOKIE_NAME'], signed_id_token, secure=self.app.config['OIDC_ID_TOKEN_COOKIE_SECURE'], httponly=True, max_age=self.app.config['OIDC_ID_TOKEN_COOKIE_TTL']) return", "label": 0}, {"snippet_id": 41330, "code": ".assertEqual(type(extsub), ExtractedCPCat) elif doc.data_group.group_type.code=='HH': self.assertEqual(type(extsub), ExtractedHHDoc) else: self.assertEqual(type(extsub), ExtractedText) except ObjectDoesNotExist", "label": 0}, {"snippet_id": 31241, "code": " 'pr_size_labeller', 'issue_labeller', 'bug_spotter', 'ack', ] INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages", "label": 0}, {"snippet_id": 82913, "code": ":param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of", "label": 0}, {"snippet_id": 21822, "code": ": \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis", "label": 0}, {"snippet_id": 65320, "code": "/run/terminal/KeepassGtk/main_window.ui\") self.headerbar=builder.get_object(\"headerbar\") file_open_button=builder.get_object(\"open_button\") file_open_button.connect(\"clicked\", self.open_filechooser, None", "label": 0}, {"snippet_id": 21377, "code": " process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process", "label": 0}, {"snippet_id": 49466, "code": " form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston", "label": 0}, {"snippet_id": 54922, "code": ".append(problem(assignment_student,book_edition,chapter,problem_number,prob_code)) \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book Edition, Student Name, Problem Number, Problem Order, Score", "label": 1}, {"snippet_id": 45962, "code": " return render(request, template_name, data) @login_required() def data_group_detail(request, pk, template_name='data_group/datagroup_detail.html'): dg=get_object_or_404(DataGroup, pk=pk,) dg.doc_types", "label": 0}, {"snippet_id": 43816, "code": ", 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data", "label": 0}, {"snippet_id": 75382, "code": "})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_view_candidates(request, status): if 'sort_by' in request.GET: candidates=Candidate.get_candidates_by_status", "label": 0}, {"snippet_id": 7455, "code": ".is_(None), Exam.exam_returned_date > ninety_day_filter)) else: exams=Exam.query.filter(Exam.deleted_date.is_(None))\\ .filter_by(office_id=csr.office_id)\\ .filter(or_(Exam.exam_returned_date.is_(None),", "label": 1}, {"snippet_id": 71085, "code": " is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches", "label": 0}, {"snippet_id": 57692, "code": " Reference: https://devblog.kogan.com/blog/disable-signal-receivers-in-your-django-tests \"\"\" def our_wrapper(func): @receiver(signal, **decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, *", "label": 0}, {"snippet_id": 41501, "code": " document_type__group_type__code=code, extractedtext__isnull=False ): doc=DataDocument.objects.filter( document_type__group_type__code=code, extractedtext__isnull=False ).first() response=self.client.get(", "label": 0}, {"snippet_id": 11148, "code": " configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\"", "label": 0}, {"snippet_id": 42026, "code": "'bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/", "label": 0}, {"snippet_id": 43093, "code": ".get(f'/qa/chemicalpresence/') self.assertIn( f\"/qa/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content) response=self.client.get( f'/qa/chemicalpresencegroup/49', follow", "label": 0}, {"snippet_id": 45290, "code": "}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc('created_at', ", "label": 0}, {"snippet_id": 28429, "code": " Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not", "label": 0}, {"snippet_id": 83261, "code": " import ContentType from django.utils.translation import ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern", "label": 0}, {"snippet_id": 50247, "code": " loginButton(): email=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl=session.pop", "label": 0}, {"snippet_id": 8810, "code": " 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages", "label": 0}, {"snippet_id": 82978, "code": " RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self,", "label": 0}, {"snippet_id": 9892, "code": "'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration", "label": 0}, {"snippet_id": 32826, "code": " class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file descriptor to modify. newfd: The new file descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup", "label": 0}, {"snippet_id": 67269, "code": " template_name='ip/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP().lookup(ip) try:", "label": 0}, {"snippet_id": 84876, "code": " cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b)\", title) if m: search_title=re", "label": 0}, {"snippet_id": 25877, "code": " the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path", "label": 0}, {"snippet_id": 13511, "code": " ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request", "label": 1}, {"snippet_id": 73659, "code": "': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') def parse_position_return_dictionary(create_position_form", "label": 0}, {"snippet_id": 24663, "code": " for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True", "label": 1}, {"snippet_id": 46616, "code": " pk=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'", "label": 0}, {"snippet_id": 39288, "code": "(\"Raw maximum composition\", max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\", max_length=100", "label": 0}, {"snippet_id": 10732, "code": "(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION'", "label": 0}, {"snippet_id": 13628, "code": ", settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 3370, "code": " 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params", "label": 1}, {"snippet_id": 40936, "code": " DataDocumentDetailTest(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_absent_extracted_text(self): for dd in DataDocument", "label": 0}, {"snippet_id": 50025, "code": "%s'%name) else: return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename", "label": 0}, {"snippet_id": 32678, "code": ", write) with outp: self.first.execute(builtins) outp.close() with inp: self.second.execute(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains", "label": 0}, {"snippet_id": 46627, "code": "'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'\"' initial_values={'downloaded_by': request.user, 'name' : default_name, 'data_source' : datasource", "label": 0}, {"snippet_id": 7723, "code": "\"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None", "label": 0}, {"snippet_id": 82714, "code": " the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s ", "label": 0}, {"snippet_id": 17054, "code": "=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue", "label": 0}, {"snippet_id": 21995, "code": " executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if stdout and", "label": 0}, {"snippet_id": 21805, "code": " processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: True if any process that wasn't explicitly killed is still alive. \"\"\" return not any(self.dead_processes", "label": 0}, {"snippet_id": 65937, "code": ") def on_save_check_button_toggled(self, check_button, db): if check_button.get_active(): self.databases_to_save.append(db) else: self.databases_to_save.remove(db) def on_back_button_clicked(self, button", "label": 0}, {"snippet_id": 56972, "code": "=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context['is_filtered']=self.is_filtered return context def get_queryset(self): data=QueryDict('', mutable=True", "label": 0}, {"snippet_id": 34856, "code": "'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template", "label": 0}, {"snippet_id": 20523, "code": ".parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os", "label": 1}, {"snippet_id": 54660, "code": "\t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem.childNodes) \t\tself.assignments=map(Assignment,self.assignments) \t\tself.book_editions=defaultdict(list) \t\tfor assignment", "label": 1}, {"snippet_id": 31870, "code": "=302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions", "label": 1}, {"snippet_id": 28539, "code": " environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus", "label": 0}, {"snippet_id": 41462, "code": ") self.assertFalse( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms is appropriate for the group type. ''' group_models", "label": 1}, {"snippet_id": 74635, "code": " info['last_name']=request.META.get('Shibboleth-sn', '') info['first_name']=request.META.get('Shibboleth-givenName', '') info['email']=request.META.get('Shibboleth-mail', '') return info def _get_candidate", "label": 0}, {"snippet_id": 70004, "code": " not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 68352, "code": "=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels def expand_url(request): url=request.GET.get(", "label": 0}, {"snippet_id": 30491, "code": "'] del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')) else: flash(\"You were", "label": 0}, {"snippet_id": 70309, "code": "\"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to", "label": 0}, {"snippet_id": 12737, "code": " Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of", "label": 0}, {"snippet_id": 50446, "code": ".filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str(self.locktime) def __exit__(self,", "label": 0}, {"snippet_id": 1960, "code": "-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 38736, "code": ".extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace(' ', '_') name", "label": 0}, {"snippet_id": 30308, "code": " response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response.headers['Content-Type']='application/json' return response if result['issued_to'] !=CLIENT_ID: response", "label": 0}, {"snippet_id": 83790, "code": " group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html', template_dir=", "label": 0}, {"snippet_id": 60867, "code": " monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"", "label": 0}, {"snippet_id": 48791, "code": "=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id", "label": 0}, {"snippet_id": 66760, "code": " from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event,", "label": 0}, {"snippet_id": 36195, "code": " return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag',", "label": 0}, {"snippet_id": 47305, "code": " extracted=extracted) out=zip(ds_list, frm_list) if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if form", "label": 0}, {"snippet_id": 18261, "code": "): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself.render('signup.html',error='') \t \t\"\"\" check_if_exists(): \tUses the pymongo driver(so everything is synchronous", "label": 1}, {"snippet_id": 38975, "code": " self.name.replace(' ', '_') def get_dg_folder(self): uuid_dir=f'{settings.MEDIA_ROOT}{str(self.fs_id)}' name_dir=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self", "label": 0}, {"snippet_id": 19449, "code": " monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1) for log_filename in", "label": 1}, {"snippet_id": 10003, "code": " commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-", "label": 0}, {"snippet_id": 29825, "code": ").first() if instance: return instance, False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance, True @gallery.route('/gallery/benwa/<int", "label": 0}, {"snippet_id": 57869, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\" try: ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError: return onboarding_setting=c_onboarding_settings(use_secondary=True).find_one({'name': setting_name})", "label": 0}, {"snippet_id": 41162, "code": ".objects.get(upc='stub_9101') self.assertContains(response, f'product/%s' % new_product.id) def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when the document", "label": 0}, {"snippet_id": 46665, "code": "'ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info) good_fields=['filename','title','document_type', 'url','organization'] if not table.fieldnames==good_fields: datagroup.csv", "label": 0}, {"snippet_id": 45867, "code": "\nimport os import csv import zipfile from itertools import islice from collections import OrderedDict from djqscsv import render_to_csv_response from pathlib import Path from django import forms from django", "label": 1}, {"snippet_id": 52039, "code": " can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[] invites_list=[] user_id=session.get(\"user_id\") user_object=q.get_user_object(user_id) ut_objects", "label": 0}, {"snippet_id": 59946, "code": ": \" Inspect the database and return a dictionary of table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]", "label": 0}, {"snippet_id": 6905, "code": ".filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password', 'auth/email/reset_password', user=user, token=token, next=request.args.get(", "label": 0}, {"snippet_id": 34667, "code": " \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc", "label": 0}, {"snippet_id": 21622, "code": " monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes", "label": 0}, {"snippet_id": 60709, "code": " from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract", "label": 0}, {"snippet_id": 18895, "code": " views.\"\"\" from __future__ import unicode_literals from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import", "label": 0}, {"snippet_id": 38212, "code": "'' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids", "label": 0}, {"snippet_id": 50705, "code": ", logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile", "label": 0}, {"snippet_id": 76664, "code": ", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles <=abs_tile_row: logger.debug(\"[", "label": 0}, {"snippet_id": 43848, "code": ".browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") )", "label": 0}, {"snippet_id": 66636, "code": ".logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context().add_class(\"error\"", "label": 0}, {"snippet_id": 83568, "code": " except AttributeError: WIKI_LOCK_DURATION=15 try: from notification import models as notification except ImportError: notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects", "label": 0}, {"snippet_id": 13057, "code": ", 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 18733, "code": ".RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tChecks if a secure_cookie", "label": 1}, {"snippet_id": 19288, "code": "\"\"\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers", "label": 0}, {"snippet_id": 5929, "code": ") app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True) app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com', 'https://accounts", "label": 0}, {"snippet_id": 31375, "code": "'social_core.backends.bitbucket.BitbucketOAuth', 'django.contrib.auth.backends.ModelBackend' ) MIDDLEWARE_CLASSES=[ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.security.SecurityMiddleware'", "label": 0}, {"snippet_id": 72213, "code": ".instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot make modifications to this export", "label": 0}, {"snippet_id": 83282, "code": "('^' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm): summary=forms.CharField(widget=forms.Textarea) comment=forms.CharField(required=False) user_ip=forms.CharField(widget=forms.HiddenInput) content_type", "label": 0}, {"snippet_id": 14446, "code": " the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse", "label": 0}, {"snippet_id": 80838, "code": "'Unlocking'} piezo etalon.\") self.lock_piezo_etalon_action.setChecked(not checked) self.matisse.set_piezo_etalon_lock(checked) self.lock_piezo_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_fast_piezo_lock", "label": 0}, {"snippet_id": 7771, "code": "=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False", "label": 1}, {"snippet_id": 20713, "code": "/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password", "label": 0}, {"snippet_id": 69813, "code": " setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 34365, "code": "() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() et.refresh_from_db", "label": 0}, {"snippet_id": 37359, "code": "{ 'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name', 'data_document", "label": 0}, {"snippet_id": 9596, "code": " Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if", "label": 0}, {"snippet_id": 1914, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length", "label": 0}, {"snippet_id": 49841, "code": " email) os.makedirs(userpath, exist_ok=True) file.save(os.path.join(userpath, filename)) session['currentFile']=filename if 'diagram' in request.referrer: return redirect('/diagram?filename=%s'%filename", "label": 0}, {"snippet_id": 48471, "code": " form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created:", "label": 0}, {"snippet_id": 82723, "code": ":rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0", "label": 0}, {"snippet_id": 16314, "code": "', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value in form.cleaned_data.items(): if r_name", "label": 1}, {"snippet_id": 5174, "code": " full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 55700, "code": " files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) ", "label": 0}, {"snippet_id": 78717, "code": " datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job", "label": 1}, {"snippet_id": 71383, "code": "=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self._url_parse_re.match( req", "label": 1}, {"snippet_id": 36500, "code": " should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get('/').content.decode", "label": 0}, {"snippet_id": 76138, "code": " language=None, version_slug=None): if path==self.from_url: log.debug('Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to", "label": 0}, {"snippet_id": 23748, "code": ".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\"", "label": 0}, {"snippet_id": 73714, "code": "=parse_position_return_dictionary(create_position_form) errors=dictionary.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=dictionary.get('position", "label": 0}, {"snippet_id": 24621, "code": " else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those", "label": 1}, {"snippet_id": 76109, "code": ", language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting %s', self) cut_path=re.sub('^%s' % self.from_url, '', path) to=self.get_full_path( filename=cut_path, language", "label": 0}, {"snippet_id": 24875, "code": ".local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\"", "label": 0}, {"snippet_id": 68871, "code": " logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs from nodesource is installed \"\"\" key=b\"\"\" -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1 Comment: GPGTools -https://gpgtools", "label": 0}, {"snippet_id": 21625, "code": " exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False", "label": 0}, {"snippet_id": 70129, "code": " t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 8403, "code": " dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session", "label": 0}, {"snippet_id": 58281, "code": "'core.common.utils.c_onboarding_status') def test_get_onboarding_status_with_settings(self, status_mock, settings_mock): def mocked_setting(setting_name): data={ onboarding.INTRODUCTION_INTRO:{ \"html\": ", "label": 0}, {"snippet_id": 29823, "code": "(name=tagname).first() if instance: return instance, False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance, True @gallery.route('/gallery", "label": 0}, {"snippet_id": 47750, "code": "'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField", "label": 0}, {"snippet_id": 75808, "code": " ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager", "label": 0}, {"snippet_id": 61567, "code": "=securedrop, live=pshtt_results['Live'], http_status_200_ok=False, ) return ScanResult( landing_page_url=securedrop.landing_page_url, live=pshtt_results['Live'], http_status_200_ok=validate_200_ok(no_redirects_page", "label": 1}, {"snippet_id": 34769, "code": "())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or", "label": 0}, {"snippet_id": 10796, "code": " @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page", "label": 0}, {"snippet_id": 2464, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +", "label": 0}, {"snippet_id": 74436, "code": ".form_valid(form) self.view_action() return output def form_invalid(self, form): return super().form_invalid(form) def view_action(self): pass class ReportDeletePartial(_ReportActionPartial): EVAL_ACTION_TYPE", "label": 0}, {"snippet_id": 7371, "code": " distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.'''", "label": 0}, {"snippet_id": 31003, "code": ") grudget=session.query(Grudget).filter_by(id=grudget_id).one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to edit this grudge.')", "label": 1}, {"snippet_id": 6270, "code": " auth_url='{url}&{extra_params}'.format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token", "label": 0}, {"snippet_id": 50429, "code": " dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not", "label": 0}, {"snippet_id": 20980, "code": ".all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store(self): \"\"\"Start the plasma store.\"\"\" assert self._plasma_store_socket_name", "label": 0}, {"snippet_id": 83273, "code": " wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm):", "label": 0}, {"snippet_id": 70534, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {", "label": 0}, {"snippet_id": 51860, "code": "\"]) def make_new_user(): \"\"\"Validate new user form entry, register user if valid.\"\"\" email=request.form.get('email') pw=request.form.get('pw') displayname=request.form.get('displayname') user_record=User", "label": 0}, {"snippet_id": 57026, "code": ", transaction): \"\"\" Get a list of the available concepts that can be added to the given transaction. :param employee: The employee executing the transaction(current user) :param transaction: The open transaction", "label": 0}, {"snippet_id": 84859, "code": "\"\" this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles", "label": 0}, {"snippet_id": 1670, "code": " modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\"", "label": 0}, {"snippet_id": 55796, "code": "): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write", "label": 0}, {"snippet_id": 55013, "code": " import fnmatch def specialized(p): \tif os.path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): ", "label": 0}, {"snippet_id": 11980, "code": "\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\")", "label": 0}, {"snippet_id": 37139, "code": ".queryset=qs class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type", "label": 0}, {"snippet_id": 76183, "code": " return self.to_url if '$rest' in self.from_url: match=self.from_url.split('$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s' % match, self.to_url, full_path) return cut_path def redirect_sphinx_html", "label": 0}, {"snippet_id": 19795, "code": " to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state", "label": 1}, {"snippet_id": 43105, "code": ".content) response=self.client.get( f'/qa/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter(", "label": 0}, {"snippet_id": 29848, "code": ", methods=['POST']) @login_required def add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow", "label": 0}, {"snippet_id": 4198, "code": " are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self", "label": 0}, {"snippet_id": 52388, "code": "/add-to-board\", methods=[\"POST\"]) def add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title\", \"Untitled", "label": 0}, {"snippet_id": 59362, "code": " using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files \"\"\".strip()), ConfigOption(\"suggest_facets\", True, \"\"\" Calculate", "label": 0}, {"snippet_id": 21031, "code": " redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def", "label": 0}, {"snippet_id": 38401, "code": ".PUC import PUC, PUCToTag, PUCTag from.product_to_tag import ProductToTag from.product_to_puc import ProductToPUC from.extracted_habits_and_practices_to_puc import ExtractedHabitsAndPracticesToPUC from", "label": 0}, {"snippet_id": 63514, "code": ".app.dispatch_request() self.assertEqual(response.status, '200 OK') self.assertIn(self.app.config['SAML2_LOGOUT_REDIRECT_URL'], json.loads(response.data)['payload']['location']) def test_logout_loggedin", "label": 0}, {"snippet_id": 7761, "code": ".skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except", "label": 1}, {"snippet_id": 70763, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory", "label": 0}, {"snippet_id": 71709, "code": ".query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id", "label": 0}, {"snippet_id": 44931, "code": "} hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000", "label": 0}, {"snippet_id": 49405, "code": ", pk=pk) form=DataDocumentForm(request.POST or None, instance=datadocument) if form.is_valid(): if form.has_changed(): form.save() return redirect('data_document', pk=pk) form.referer=request.META.get(", "label": 0}, {"snippet_id": 25607, "code": ".format_error_message(traceback.format_exc()) message=\"The monitor failed with the following error:\\n{}\".format( traceback_str) ray.utils.push_error_to_driver_through_redis( redis_client, ray_constants.MONITOR_DIED_ERROR,", "label": 0}, {"snippet_id": 75401, "code": "(status, sort_param=request.GET['sort_by']) else: candidates=Candidate.get_candidates_by_status(status) return render(request, 'etd_app/staff_view_candidates.html',{'candidates': candidates, 'status': status", "label": 0}, {"snippet_id": 25992, "code": " process_info ] def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file", "label": 0}, {"snippet_id": 12603, "code": " None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER", "label": 0}, {"snippet_id": 57556, "code": ": if not request.user.is_authenticated: return invalid_permission_redirect(request) filter_data={ 'closed': False, } listview=TransactionList.as_view() return listview(request, filter_data=filter_data)", "label": 1}, {"snippet_id": 67134, "code": "['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains", "label": 0}, {"snippet_id": 38506, "code": " is considered \"matched\" to that source file. ``extracted`` When the content of a data document has been extracted by manual data entry or by an extraction script, a new ExtractedText record is created", "label": 0}, {"snippet_id": 68455, "code": " template_name='twitter_hunter/index.html' context_object_name='hts' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self,", "label": 0}, {"snippet_id": 15721, "code": " run_form=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form", "label": 0}, {"snippet_id": 80688, "code": ".getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE:POS?', numeric_result=True)) if success: print(f\"Setting thin etalon motor position", "label": 0}, {"snippet_id": 6939, "code": " return redirect(url_for('auth.login')) return render_template('auth/reset_password.html', form=form) @auth.route('/reset/<token>', methods=['GET', 'POST']) def password_reset(token): if not current_user", "label": 0}, {"snippet_id": 62421, "code": ":type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn", "label": 0}, {"snippet_id": 80977, "code": ".partner_id partner_id=int(partner.id) if event_is_participating: for registration in event.registration_ids: for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing", "label": 0}, {"snippet_id": 6863, "code": ".auth_token flash('Your password has been updated.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_password.html\", form=form) @auth.route('", "label": 0}, {"snippet_id": 22727, "code": " cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events=", "label": 1}, {"snippet_id": 57481, "code": ".method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid: if form", "label": 0}, {"snippet_id": 37386, "code": " required_css_class='required' document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True) return_url=forms.CharField() class Meta: model=Product", "label": 0}, {"snippet_id": 8615, "code": "'lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request", "label": 0}, {"snippet_id": 64908, "code": " run the students code against. Each test case \" \"must take the form of of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2)==3'' or ``(1,", "label": 0}, {"snippet_id": 18830, "code": ").example \tsync_db=MongoClient().example \t\t\t\t\t \tapplication=tornado.web.Application( \t\thandlers=[ \t\t\t(r'/',IndexHandler), \t\t\t(r'/signup', SignUpHandler), \t\t\t(r'/signin', SignInHandler), \t\t\t(r'/postlogin", "label": 1}, {"snippet_id": 83232, "code": " not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is", "label": 0}, {"snippet_id": 9045, "code": " ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps", "label": 0}, {"snippet_id": 46794, "code": " filenames.append(line['filename']) doc=DataDocument(filename=line['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group=datagroup) doc.save()", "label": 0}, {"snippet_id": 31740, "code": " assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url", "label": 1}, {"snippet_id": 69050, "code": "): try: systemd.stop_service('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot stop configurable-http-proxy...\") if systemd.check_service_enabled('configurable", "label": 0}, {"snippet_id": 69124, "code": "'systemd-units', 'jupyterhub.service')) as f: hub_unit_template=f.read() with open(os.path.join(HERE, 'systemd-units', 'traefik.service')) as f: traefik_unit_template=f.read() proxy_secret_path=os.path", "label": 0}, {"snippet_id": 50244, "code": "[\"POST\"]) def loginButton(): email=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email", "label": 0}, {"snippet_id": 12433, "code": " render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer:", "label": 0}, {"snippet_id": 40413, "code": "=doc_text_ids) elif len(doc_text_ids) >=100: random_20=math.ceil(len(doc_text_ids)/5) shuffle(doc_text_ids) texts=ExtractedText.objects.filter(pk__in=doc_text_ids[:random_20]) else: texts=None if texts", "label": 0}, {"snippet_id": 37596, "code": "'Attribute') id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm", "label": 0}, {"snippet_id": 76708, "code": " im_tile.size==(1, 1): im_tile=im_tile.resize((_TILE_PIXEL_SIZE, _TILE_PIXEL_SIZE)) tiles_array.AddImage(rel_tile_col, rel_tile_row, im_tile) return tiles_array def _SetTransPixelToBgcolor(tile, bgcolor): ", "label": 0}, {"snippet_id": 53676, "code": " return 'Redirect Buffer Error:{}'.format(err) def flush_all(self) -> str: \"\"\" :return: \"\"\" self.bytes_buffer.seek(0) contents=self.bytes_buffer.read() self.bytes_buffer.truncate(0) self.bytes_buffer.seek(0", "label": 1}, {"snippet_id": 80979, "code": "(partner.id) if event_is_participating: for registration in event.registration_ids: for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing registration, set state", "label": 0}, {"snippet_id": 46935, "code": "=datagroup) header=f'Update Data Group for Data Source \"{datagroup.data_source}\"' if form.is_valid(): if form.has_changed(): form.save() return redirect('data_group_detail', pk=datagroup.id) form.referer", "label": 0}, {"snippet_id": 67100, "code": "']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter", "label": 0}, {"snippet_id": 76658, "code": " < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles", "label": 0}, {"snippet_id": 66108, "code": " __init__(self, window, widget, filepath): self.window=window self.parent_widget=widget self.database_filepath=filepath self.unlock_database() def unlock_database(self): self.builder=Gtk.Builder() self.builder", "label": 0}, {"snippet_id": 5205, "code": "/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302", "label": 0}, {"snippet_id": 67274, "code": ": context=super().get_context_data(**kwargs) context['search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP().lookup(ip) try: context['domain']=socket.gethostbyaddr(ip)[0] except Exception", "label": 0}, {"snippet_id": 57284, "code": " extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True'", "label": 0}, {"snippet_id": 15993, "code": "')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home')) return render_template('register.html', form=register_form", "label": 1}, {"snippet_id": 21661, "code": "... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET", "label": 0}, {"snippet_id": 37899, "code": "'),('HH') Parameters ---------- document: DataDocument The parent DataDocument extra: integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included", "label": 0}, {"snippet_id": 49842, "code": ".makedirs(userpath, exist_ok=True) file.save(os.path.join(userpath, filename)) session['currentFile']=filename if 'diagram' in request.referrer: return redirect('/diagram?filename=%s'%filename) return redirect", "label": 0}, {"snippet_id": 19125, "code": " process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self", "label": 1}, {"snippet_id": 29633, "code": ":tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all() else: split=tags.split(' ') posts=[] for s in split: results=Post.query.filter(Post.tags.any(name=s)) posts.extend(results) tags", "label": 0}, {"snippet_id": 61180, "code": "(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent", "label": 0}, {"snippet_id": 35279, "code": ".objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page", "label": 0}, {"snippet_id": 76611, "code": ",400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching tiles\") logger.debug(\"rect_of_tiles: %s\", rect_of_tiles) world_extent_in_tiles=2 ** zoom_level tiles_array=images.ImagesArray( rect_of_tiles", "label": 0}, {"snippet_id": 5002, "code": "=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password,", "label": 0}, {"snippet_id": 16439, "code": " get_seven(request, tournament_id, round_num): \"\"\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num", "label": 0}, {"snippet_id": 79804, "code": "'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition", "label": 1}, {"snippet_id": 53456, "code": ", message=templating.render_template( 'user-code-error.txt', **render_data ), html_message=templating.render_template( 'user-code-error.html', **render_data ) ) def get_stack_frames(): \"\"\" :return: \"\"\"", "label": 0}, {"snippet_id": 29175, "code": " benwaonline.database import db from benwaonline.oauth import oauth from benwaonline.admin import setup_adminviews from benwaonline.models import user_datastore, User from benwaonline.gallery import gallery", "label": 1}, {"snippet_id": 15534, "code": "'start_day'): form.start_day.data=str_to_datetime(get_command('start_day')[0]['start_day']) if get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if", "label": 0}, {"snippet_id": 7995, "code": " limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure(", "label": 0}, {"snippet_id": 13070, "code": " request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except", "label": 0}, {"snippet_id": 21968, "code": " generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However, the same ID should not be used for different jobs", "label": 0}, {"snippet_id": 38037, "code": " taggit.models import TaggedItemBase, TagBase from taggit.managers import TaggableManager from django.db import models from django.urls import reverse from django.utils.translation import ugettext_lazy as", "label": 0}, {"snippet_id": 26520, "code": ".terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process.wait() finally: timer.cancel() if process.poll() is not None: continue process.kill() if wait: process", "label": 0}, {"snippet_id": 3665, "code": " path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 49610, "code": " app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"]) f", "label": 0}, {"snippet_id": 75483, "code": " return render(request, 'etd_app/staff_view_abstract.html',{'candidate': candidate}) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) @require_http_methods(['POST'])", "label": 0}, {"snippet_id": 71022, "code": ".from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory'", "label": 0}, {"snippet_id": 17671, "code": "']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('register.html', form=form) @bp.route('/password-reset/<payload>',", "label": 0}, {"snippet_id": 41760, "code": " 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse','raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'], \"Fieldnames passed are incorrect!\") self.objects.gt.title", "label": 0}, {"snippet_id": 82717, "code": " running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' ", "label": 0}, {"snippet_id": 44181, "code": "=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f'", "label": 0}, {"snippet_id": 30461, "code": " def disconnect(): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook", "label": 0}, {"snippet_id": 71093, "code": "([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime)", "label": 0}, {"snippet_id": 34609, "code": "(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical", "label": 1}, {"snippet_id": 35675, "code": " | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks']", "label": 1}, {"snippet_id": 77651, "code": " default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources", "label": 0}, {"snippet_id": 26361, "code": " gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process", "label": 0}, {"snippet_id": 7431, "code": ".requires_auth def get(self): try: csr=CSR.find_by_username(g.jwt_oidc_token_info['preferred_username']) ninety_day_filter=datetime.now() -timedelta(days=90) if csr.liaison_designate==1: exams=Exam.query", "label": 0}, {"snippet_id": 1226, "code": " user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is", "label": 0}, {"snippet_id": 36604, "code": ".values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA'", "label": 0}, {"snippet_id": 19507, "code": ".readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key", "label": 1}, {"snippet_id": 7799, "code": "(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages", "label": 0}, {"snippet_id": 8991, "code": " from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import", "label": 0}, {"snippet_id": 11816, "code": " get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest,", "label": 0}, {"snippet_id": 73920, "code": ", 'position': position} @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request, 'position.html', position_detail_data(request, position)) def", "label": 1}, {"snippet_id": 53595, "code": "): \"\"\" A class for intercepting and independently storing buffer writes for use within Cauldron step display. \"\"\" def __init__(self, redirection_source): self.active=False self.bytes_buffer=io.BytesIO(", "label": 0}, {"snippet_id": 13063, "code": " account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year", "label": 0}, {"snippet_id": 8609, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the", "label": 0}, {"snippet_id": 3313, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID", "label": 0}, {"snippet_id": 84505, "code": "=revision+1).get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request", "label": 1}, {"snippet_id": 30062, "code": " takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize", "label": 0}, {"snippet_id": 63044, "code": " initialized. \"\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login') def test_chpass_authn(self)", "label": 0}, {"snippet_id": 73412, "code": "/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request):", "label": 0}, {"snippet_id": 65397, "code": "\", \"last-opened-db\") !=\"\" and exists(keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\")): self.logging_manager.log_debug( \"Found last opened database entry(\" + keepassgtk.config_manager.get_string", "label": 0}, {"snippet_id": 53286, "code": "() if isinstance(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param project: :param step: :return: \"", "label": 0}, {"snippet_id": 20782, "code": " redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name", "label": 0}, {"snippet_id": 3743, "code": " self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 71782, "code": "() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual", "label": 0}, {"snippet_id": 14580, "code": ": configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username", "label": 0}, {"snippet_id": 44970, "code": ".is_valid()) def test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc", "label": 0}, {"snippet_id": 46326, "code": "'_extracted.csv', csv_file) context['msg']=(f'{len(good_records)} extracted records ' 'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method=='POST' and 'bulk' in request", "label": 0}, {"snippet_id": 47785, "code": " 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n']", "label": 0}, {"snippet_id": 38874, "code": ": return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return self.type=='HH'", "label": 0}, {"snippet_id": 1546, "code": " name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul", "label": 0}, {"snippet_id": 54579, "code": " HWML_processor(object): \tdef prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t\tself.p=pprint.PrettyPrinter(indent=2) \t\tself.homeworks=[] \t\tfor homework_file in self.d: \t\t\ttry: \t\t", "label": 1}, {"snippet_id": 7077, "code": ") @login_required def change_email(token): if current_user.change_email(token): session['auth_token']=current_user.auth_token flash('Your email address has been updated.') else: flash('Invalid request.", "label": 0}, {"snippet_id": 34815, "code": ") return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now", "label": 1}, {"snippet_id": 35863, "code": "() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags", "label": 0}, {"snippet_id": 5035, "code": "'location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1'", "label": 0}, {"snippet_id": 82722, "code": ". :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True", "label": 0}, {"snippet_id": 19962, "code": ".gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data, 0)) for j in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength", "label": 0}, {"snippet_id": 7621, "code": ".helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx", "label": 0}, {"snippet_id": 70186, "code": " user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is", "label": 0}, {"snippet_id": 46669, "code": "] table=csv.DictReader(info) good_fields=['filename','title','document_type', 'url','organization'] if not table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request,", "label": 0}, {"snippet_id": 55780, "code": "(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t", "label": 0}, {"snippet_id": 3889, "code": ".assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self", "label": 0}, {"snippet_id": 1537, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}<", "label": 0}, {"snippet_id": 7466, "code": "(office_id=csr.office_id)\\ .filter(or_(Exam.exam_returned_date.is_(None), Exam.exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam, key):", "label": 0}, {"snippet_id": 66740, "code": ".start() def hide_unlock_failed_revealer(self): unlock_failed_revealer=self.builder.get_object(\"unlock_failed_revealer\") unlock_failed_revealer.set_reveal_child(not unlock_failed_revealer.get_reveal_child(", "label": 0}, {"snippet_id": 17093, "code": "}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except", "label": 0}, {"snippet_id": 17748, "code": " sent to the provided email, ' 'if a matching account was found.'), 'info') return flask.redirect(flask.url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else", "label": 0}, {"snippet_id": 67834, "code": "]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs", "label": 0}, {"snippet_id": 37841, "code": "=forms.CharField(max_length=50) self.fields['SID'].initial=self.instance.dsstox.sid self.fields['SID'].disabled=True class Meta: model=ExtractedChemical fields='__all__' def include_clean_comp_data_form", "label": 0}, {"snippet_id": 67169, "code": " import forms class SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder']=", "label": 1}, {"snippet_id": 29040, "code": " original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj", "label": 0}, {"snippet_id": 26273, "code": " the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is None: self.start_redis(", "label": 0}, {"snippet_id": 63566, "code": "() self.assertEqual(response2.status, '200 OK') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php', json.loads(response2.data)['payload']['location']) def test_logout_service_startingSP", "label": 0}, {"snippet_id": 22046, "code": " clients without the password from connecting to Redis if provided. plasma_directory: A directory where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that", "label": 0}, {"snippet_id": 62490, "code": ") session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState: ' +relay_state) return redirect(location=relay_state", "label": 0}, {"snippet_id": 79743, "code": ") tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base'", "label": 0}, {"snippet_id": 17092, "code": "': formset}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power", "label": 0}, {"snippet_id": 55654, "code": "\t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn", "label": 0}, {"snippet_id": 20617, "code": " processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists", "label": 0}, {"snippet_id": 49897, "code": "']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request", "label": 0}, {"snippet_id": 11246, "code": "]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage", "label": 0}, {"snippet_id": 48738, "code": " puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe", "label": 0}, {"snippet_id": 60335, "code": "( conn, repr(sql), params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio.get_event_loop().run_in_executor", "label": 0}, {"snippet_id": 61792, "code": "(domain=result_data['Domain']) current_result=pshtt_data_to_result(securedrop, result_data) current_result.compute_grade() current_result.securedrop=securedrop try: prior_result=securedrop.results.latest", "label": 1}, {"snippet_id": 59358, "code": ", \"\"\" Allow users to specify columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files \"\"\".strip()), ConfigOption", "label": 0}, {"snippet_id": 35052, "code": " import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField", "label": 0}, {"snippet_id": 81611, "code": "='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0 for subscription in self.fit_subscriptions: counter", "label": 0}, {"snippet_id": 28052, "code": " exception thrown by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely.", "label": 0}, {"snippet_id": 68048, "code": "/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return '/threat_hunter", "label": 0}, {"snippet_id": 51727, "code": "{ DT: genDT, SI: genSI, CSRF: genCSRF, OR: genOR, SSCI: genSSCI, SCI: genSCI } class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category", "label": 0}, {"snippet_id": 28486, "code": "() return hex_identifier def hex_to_binary(hex_identifier): return binascii.unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable", "label": 0}, {"snippet_id": 52348, "code": "\"current_board\"]=board_id print \"Session updated with board{}.\".format(board_id) return \"HTTP-status-code: 200\" @app.route(\"/claim-project\", methods=[\"POST\"]) def assign_user_to_project(): \"\"\"Update database", "label": 0}, {"snippet_id": 297, "code": "</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 68007, "code": " def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): pk=self.kwargs['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk", "label": 0}, {"snippet_id": 32041, "code": "=enum.auto() class Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme: The token value(optional). position: The location of the token in the stream. ''' def __init__(self", "label": 0}, {"snippet_id": 37751, "code": " if not dg.type in['FU', 'CO', 'CP']: return False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet", "label": 0}, {"snippet_id": 71731, "code": "._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id': auth_id, 'info':{}", "label": 0}, {"snippet_id": 37775, "code": " def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) class ExtractedChemicalForm(forms.ModelForm): def __init__(self, *args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args", "label": 0}, {"snippet_id": 19585, "code": ".files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis", "label": 1}, {"snippet_id": 31078, "code": "'editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/delete', methods=['GET', 'POST']) def deleteGrudge(grudget_id", "label": 0}, {"snippet_id": 76650, "code": " logger.debug(\"Row -abs: %d; rel:%d\", abs_tile_row, rel_tile_row) if rel_tile_row < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles", "label": 0}, {"snippet_id": 582, "code": "=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory", "label": 1}, {"snippet_id": 64882, "code": " argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument('-t', '--test_case', required=True, action", "label": 0}, {"snippet_id": 57414, "code": " transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf\"'.format(transaction.code)", "label": 0}, {"snippet_id": 1769, "code": " given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You", "label": 0}, {"snippet_id": 74590, "code": ", 'etd_app/faq.html') def copyright(request): return render(request, 'etd_app/copyright.html') def get_person_instance(request): person_instance=None try: person_instance=Person.objects.get(netid=request", "label": 0}, {"snippet_id": 31475, "code": " 'HOST': os.environ.get('DB_ADDRESS', ''), 'PORT': os.environ.get('DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator', ", "label": 0}, {"snippet_id": 75416, "code": " @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate", "label": 0}, {"snippet_id": 28434, "code": " flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{}", "label": 0}, {"snippet_id": 47310, "code": " request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if form.is_valid(): priority=form.cleaned_data['priority", "label": 0}, {"snippet_id": 2756, "code": ", 'next') params={ 'response_type': 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings", "label": 0}, {"snippet_id": 45394, "code": " checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer", "label": 0}, {"snippet_id": 66868, "code": "=socket.gethostbyname(domain) except Exception as e: pass vt=VT() context['vt_domain']=vt.getDomainReport(domain) tm=ThreatMiner() context['tm_url']=tm.getURIFromDomain(domain) context['tm_sample']=tm.getSamplesFromDomain", "label": 0}, {"snippet_id": 35990, "code": "=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default='') description=models.TextField(null=False, blank=False)", "label": 0}, {"snippet_id": 523, "code": " if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index", "label": 0}, {"snippet_id": 52000, "code": "-recovery\") def password_recovery(): \"\"\"Displays form to send email to user for password recovery\"\"\" return \"OOOOOOOPS\" @app.route(\"/dashboard\") def dashboard(): \"\"\"Renders dashboard view, grabbing existing", "label": 0}, {"snippet_id": 75931, "code": "=True, help_text=from_url_helptext, blank=True, ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP", "label": 0}, {"snippet_id": 73341, "code": ", name='logout'), path('confirm/', views.login_form, name='confirm_account'), path('createnewposition/', views.import_position, name='importposition'), path('positions/', views.positions, name='positions", "label": 0}, {"snippet_id": 19229, "code": " if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith", "label": 0}, {"snippet_id": 62885, "code": ".startswith(idp_url)) def acs(self, url, eppn, check_fn): \"\"\" common code for the tests that need to access the assertion consumer service and then check the side effects of this access. :param url: the url of", "label": 1}, {"snippet_id": 34866, "code": "=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv", "label": 0}, {"snippet_id": 62690, "code": "=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self, eppn, came_from): \"\"\" Add a SAML2 authentication query to the queries cache", "label": 0}, {"snippet_id": 34533, "code": " IntegerField, Subquery, OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data", "label": 0}, {"snippet_id": 8569, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status", "label": 0}, {"snippet_id": 66659, "code": "().add_class(\"destructive-action\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") else: composite_unlock_entry.get_style_context().add_class(\"error\"", "label": 0}, {"snippet_id": 10993, "code": " don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 80411, "code": ".toggle_piezo_etalon_lock) self.lock_fast_piezo_action.triggered.connect(self.toggle_fast_piezo_lock) def setup_log_window(self): self.layout.addWidget(self.log_area) @handled_function def setup_widgets", "label": 0}, {"snippet_id": 9327, "code": " True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER", "label": 0}, {"snippet_id": 22881, "code": " so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb", "label": 0}, {"snippet_id": 19760, "code": "\"A monitor for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures", "label": 0}, {"snippet_id": 74695, "code": "(request)) candidate_form=CandidateForm(post_data) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '') if banner_id", "label": 0}, {"snippet_id": 46690, "code": " render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line", "label": 0}, {"snippet_id": 49246, "code": ".has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note", "label": 0}, {"snippet_id": 78208, "code": " prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self", "label": 0}, {"snippet_id": 70244, "code": ", and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404", "label": 0}, {"snippet_id": 23323, "code": " want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np", "label": 0}, {"snippet_id": 81867, "code": " render(request, 'success-url-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm(request.POST or None) if", "label": 0}, {"snippet_id": 37252, "code": " Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__", "label": 0}, {"snippet_id": 29336, "code": ".models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db(error): \"\"\"Closes the database again at the end of the request.\"\"\" if hasattr(g, 'sqlite_db'): g.sqlite_db.close", "label": 0}, {"snippet_id": 3157, "code": " django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic", "label": 0}, {"snippet_id": 83930, "code": " if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm(request", "label": 0}, {"snippet_id": 74098, "code": "(EvalDataMixin, _PassphrasePartial): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial)", "label": 0}, {"snippet_id": 57314, "code": "('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_edit", "label": 0}, {"snippet_id": 74082, "code": " _PassphrasePartial(views.base.TemplateView): storage_helper=view_helpers.ReportStorageHelper @property def storage(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin", "label": 0}, {"snippet_id": 83333, "code": " Meta: model=Article exclude=('creator', 'creator_ip', 'group', 'created_at', 'last_update') def clean_title(self): \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for", "label": 1}, {"snippet_id": 82840, "code": " self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null", "label": 1}, {"snippet_id": 78401, "code": "') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time", "label": 0}, {"snippet_id": 37489, "code": "='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] class HabitsPUCForm", "label": 0}, {"snippet_id": 84819, "code": "['body'] diffs=dmp.diff_main(current_article.content, content) dmp.diff_cleanupSemantic(diffs) return HttpResponse(dmp.diff_prettyHtml(diffs), content_type='text/html') def backlinks(request, title): \"", "label": 0}, {"snippet_id": 17990, "code": ".args.get('next') or \\ flask.request.referrer or \\ home_url if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context=", "label": 1}, {"snippet_id": 63824, "code": ".authn.helpers import verify_auth_token from eduid_webapp.authn.schemas import LogoutPayload, LogoutResponseSchema authn_views=Blueprint('authn', __name__) @authn_views.route('/login') def login(): \"\"\"", "label": 1}, {"snippet_id": 35244, "code": " its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request", "label": 0}, {"snippet_id": 41436, "code": " dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form", "label": 0}, {"snippet_id": 44171, "code": ".live_server_url +'/datagroups/' self.browser.get(list_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href", "label": 0}, {"snippet_id": 24720, "code": ".add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level", "label": 0}, {"snippet_id": 56948, "code": " **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop('filter_data',{}) return super().get(self, request, *args,", "label": 0}, {"snippet_id": 8492, "code": "(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if", "label": 0}, {"snippet_id": 8683, "code": " FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll", "label": 0}, {"snippet_id": 56634, "code": "(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def then_response_should_be_json(self, json_string):", "label": 0}, {"snippet_id": 59052, "code": " user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404(user, **kwargs):", "label": 0}, {"snippet_id": 70174, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 29243, "code": " security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor(): return dict( admin_base_template=admin.base_template, admin_view=admin.index_view, h=helpers,", "label": 0}, {"snippet_id": 54852, "code": " problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text].append(assignment.student) \t\tfor t,s in problem_text_students.items(): \t\t\tif len(s)", "label": 0}, {"snippet_id": 27468, "code": "' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead", "label": 0}, {"snippet_id": 43906, "code": " webdriver from selenium.webdriver.support.select import Select from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver", "label": 1}, {"snippet_id": 77012, "code": "\"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=", "label": 0}, {"snippet_id": 36295, "code": " factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar", "label": 0}, {"snippet_id": 18772, "code": ".render('index.html') \t\t\treturn \t\telse: \t\t\tself.render('postlogin.html') \t\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes statements which are included in every page, except it's easier", "label": 1}, {"snippet_id": 29528, "code": " form.pos.data]) name_exists=User.query.filter(User.username==username).all() if name_exists: flash('Username %s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user", "label": 1}, {"snippet_id": 82745, "code": ": return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job", "label": 0}, {"snippet_id": 44608, "code": ".create(title='reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type=ut, weight_fraction_type=wft, raw_chem_name='Test Chem Name', raw_cas='test_cas' )", "label": 0}, {"snippet_id": 34931, "code": ")) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip", "label": 0}, {"snippet_id": 42174, "code": " url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-trash\"></span>' self.assertIn(span, response, 'Trash button should be present", "label": 0}, {"snippet_id": 25979, "code": " stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]", "label": 1}, {"snippet_id": 72430, "code": "\"input depth=%s\", depth) depth=5 root_dir='{}/'.format(root_dir) \\ if not root_dir.endswith('/') else root_dir try: cfs=CephFS() paths=cfs.get_dir_list(root_dir, depth) paths=[p[:-1] for p in paths if p !", "label": 0}, {"snippet_id": 70567, "code": ".select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 60946, "code": ". :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname", "label": 0}, {"snippet_id": 20318, "code": "\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split(\":\")[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS", "label": 0}, {"snippet_id": 16157, "code": " round of the specified tournament or raise Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num, template", "label": 0}, {"snippet_id": 29239, "code": " load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor(): return dict( admin_base_template=admin", "label": 0}, {"snippet_id": 60652, "code": ".status info=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc()", "label": 0}, {"snippet_id": 38817, "code": ".ForeignKey('DataSource', on_delete=models.CASCADE) fs_id=models.UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length", "label": 0}, {"snippet_id": 39752, "code": " self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent},", "label": 0}, {"snippet_id": 65845, "code": ".get_n_pages() > 1: self.container.set_show_tabs(True) else: self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab(self,", "label": 0}, {"snippet_id": 27724, "code": "\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling", "label": 1}, {"snippet_id": 55664, "code": " self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path", "label": 0}, {"snippet_id": 77495, "code": " definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information for target url '%s'\", target_url) layers_by_name=_LayersFromServerVars(target_url) for layer_name", "label": 0}, {"snippet_id": 36833, "code": "%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats", "label": 0}, {"snippet_id": 62673, "code": ": the session token corresponding to the query :rtype: str \"\"\" with self.app.test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token", "label": 0}, {"snippet_id": 14018, "code": "={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled()", "label": 0}, {"snippet_id": 8843, "code": ", }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers", "label": 0}, {"snippet_id": 26968, "code": " the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager.", "label": 0}, {"snippet_id": 62660, "code": " assertion consumer service. :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the session token corresponding to the query :rtype: str \"\"\"", "label": 0}, {"snippet_id": 72878, "code": ".user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText", "label": 1}, {"snippet_id": 20775, "code": " cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): ", "label": 0}, {"snippet_id": 52343, "code": " board_id=request.form.get(\"boardId\") session[\"current_board\"]=board_id print \"Session updated with board{}.\".format(board_id) return \"HTTP-status-code: 200\" @app.route(\"/claim-project\", methods=[\"POST\"])", "label": 0}, {"snippet_id": 53374, "code": " environ.modes.has(environ.modes.TESTING): exec_test() else: exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except UserAbortError: out=None except Exception", "label": 0}, {"snippet_id": 57608, "code": " def send_email(context_data, from_email, to_email, template_subject, template_text): \"\"\" Send an email with specified content. Arguments: context_data(dict): data to be passed to templates. from_email", "label": 0}, {"snippet_id": 76950, "code": " except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs %s\", str(im_src.size), str(im_dest.size)) logger.debug(\"Mode %s vs %s\", str(im_src.mode), str(im_dest.mode)", "label": 0}, {"snippet_id": 77989, "code": ", security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination.action.package_patch(id=package_id, security_classification", "label": 0}, {"snippet_id": 46223, "code": "=UnitType.objects.get(pk=unit_type_id) rank=row['ingredient_rank'] row['ingredient_rank']=None if rank=='' else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script=script)", "label": 0}, {"snippet_id": 74068, "code": " import( data_helper, view_partials as wizard_builder_partials, ) from. import forms, models, view_helpers logger=logging.getLogger(__name__) class _PassphrasePartial(views.base.TemplateView): storage_helper", "label": 0}, {"snippet_id": 58880, "code": " search_user_by_email(email): return User.objects.filter(email=email).first() @classmethod def create_new(cls, commit, course, instructor, email, invite_type, enroll_unit_code): user=Invite.search_user_by_email(email) try", "label": 0}, {"snippet_id": 6318, "code": " id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non-trusted issuer: %s' % id_token['iss']) return False if isinstance(id_token[", "label": 0}, {"snippet_id": 83975, "code": " if notification is not None: is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter( old_title=title).order_by('-revision", "label": 0}, {"snippet_id": 9572, "code": " Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields", "label": 0}, {"snippet_id": 60986, "code": ".comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running", "label": 0}, {"snippet_id": 76265, "code": " tempfile import urllib import geom import images import PIL.Image as Image import tilecalcs logger=logging.getLogger(\"wms_maps\") _TILE_PIXEL_SIZE=256 _NO_DATA_PIXELS=(0, 0, 0) _OPAQUE_ALPHA=(255,) _TRANSPARENT_ALPHA", "label": 1}, {"snippet_id": 43402, "code": " now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter(", "label": 0}, {"snippet_id": 75178, "code": "'form': form, 'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app/candidate_metadata.html', context) @login_required def candidate_committee(request, candidate_id): from.forms import CommitteeMemberPersonForm", "label": 0}, {"snippet_id": 24088, "code": " object that will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy", "label": 0}, {"snippet_id": 73160, "code": "'pdf', msg) if url: msg=forms.ValidationError( ErrorMessages.url_upload_not_supported_yet) self.add_error('url_ref', msg) return self.cleaned_data class ScreenDoorUserCreationForm(UserCreationForm): text", "label": 1}, {"snippet_id": 12860, "code": " else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders:", "label": 0}, {"snippet_id": 35476, "code": ".delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm", "label": 0}, {"snippet_id": 50327, "code": "\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider", "label": 0}, {"snippet_id": 33054, "code": ") class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag", "label": 0}, {"snippet_id": 66911, "code": "']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter", "label": 0}, {"snippet_id": 81803, "code": " category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created", "label": 0}, {"snippet_id": 82124, "code": "(r\"[\\w.']+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance=JustURL.objects.create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save(", "label": 0}, {"snippet_id": 28676, "code": " def setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper", "label": 1}, {"snippet_id": 69889, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory", "label": 0}, {"snippet_id": 47682, "code": "'sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\ values('sid','dds_n'", "label": 0}, {"snippet_id": 39874, "code": ") upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script, on_delete=models.CASCADE, null=True", "label": 0}, {"snippet_id": 82688, "code": " :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is", "label": 0}, {"snippet_id": 67934, "code": " HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import", "label": 0}, {"snippet_id": 18046, "code": "): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask", "label": 0}, {"snippet_id": 47976, "code": ".auth.decorators import login_required from dashboard.models import * from dashboard.forms import HabitsPUCForm, create_detail_formset @login_required() def habitsandpractices(request, pk, template_name=", "label": 0}, {"snippet_id": 22473, "code": "\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None):", "label": 1}, {"snippet_id": 5114, "code": " test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client(", "label": 0}, {"snippet_id": 39166, "code": "(self): return['id','lower_wf_analysis','central_wf_analysis', 'upper_wf_analysis'] def clean_fields(self, exclude=None): super().clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id'", "label": 0}, {"snippet_id": 14266, "code": " user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY", "label": 0}, {"snippet_id": 26766, "code": " return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns:", "label": 0}, {"snippet_id": 29061, "code": "=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr", "label": 0}, {"snippet_id": 41266, "code": " returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all(): for ex_child in et.fetch_extracted_records(): child_model=ex_child.__class__ self.assertEqual", "label": 1}, {"snippet_id": 60995, "code": " information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid", "label": 0}, {"snippet_id": 25573, "code": " args.autoscaling_config: autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args", "label": 1}, {"snippet_id": 19172, "code": "=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self", "label": 1}, {"snippet_id": 37062, "code": ".translation import ugettext_lazy as _ from dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models class DataGroupForm(forms.ModelForm): required_css_class=", "label": 1}, {"snippet_id": 35349, "code": "=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid()", "label": 0}, {"snippet_id": 46426, "code": "'clean_comp_data_button' in request.POST: clean_comp_data_form=CleanCompDataForm(request.POST, request.FILES) if clean_comp_data_form.is_valid(): script_pk=int(request.POST['script_selection']) script=Script", "label": 0}, {"snippet_id": 9530, "code": "'data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']", "label": 0}, {"snippet_id": 49550, "code": " shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app.config['OAUTH_CREDENTIALS']={ 'facebook':{ 'id': '604820106335654', 'secret': '5eb3f15f84c722df9cbc577206557cc8", "label": 1}, {"snippet_id": 16760, "code": "=get_round_or_404(t, round_num) if request.method=='POST': PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(request.POST, the_round", "label": 0}, {"snippet_id": 70106, "code": "\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s", "label": 0}, {"snippet_id": 42379, "code": "'specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f'/datagroup/%s/' % dg_co.id) self.assertIn(b'Download Raw', resp.content)", "label": 0}, {"snippet_id": 69728, "code": " config={} hook=plugin_manager.hook hook.tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main(): from.log import init_logging init_logging() argparser", "label": 0}, {"snippet_id": 75449, "code": ") return HttpResponseRedirect(reverse('staff_home')) else: format_form=FormatChecklistForm(instance=candidate.thesis.format_checklist) context={'candidate': candidate, 'format_form': format_form} return", "label": 0}, {"snippet_id": 51195, "code": "**kwargs): self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in args])] kwargstring=[\", \".join", "label": 0}, {"snippet_id": 38057, "code": " CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES=( ", "label": 1}, {"snippet_id": 16523, "code": " HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request, 'rounds/get_seven.html', context) def _sitters_and_two_gamers(tournament, the_round): \"\"", "label": 0}, {"snippet_id": 70457, "code": ".guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime)", "label": 0}, {"snippet_id": 7561, "code": " django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils", "label": 0}, {"snippet_id": 6165, "code": " del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server(request.url) g.oidc_id_token=id_token return None def require_login(self, view_func): \"\"\" Use this to decorate view functions", "label": 0}, {"snippet_id": 42374, "code": ".client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f'/datagroup/%s/' %", "label": 0}, {"snippet_id": 75652, "code": "%s&queryReturn=%s&suggest=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for item in fast_results", "label": 0}, {"snippet_id": 49678, "code": "=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if('email' in session) or('social' in session): if", "label": 0}, {"snippet_id": 29201, "code": " benwaonline.auth import auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config", "label": 0}, {"snippet_id": 54663, "code": "\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem.childNodes) \t\tself.assignments=map(Assignment,self.assignments) \t\tself.book_editions=defaultdict(list) \t\tfor assignment in", "label": 1}, {"snippet_id": 38198, "code": " return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is", "label": 0}, {"snippet_id": 12233, "code": "(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if", "label": 0}, {"snippet_id": 56614, "code": ".when_call_aasa() \\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings", "label": 0}, {"snippet_id": 27764, "code": " quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events", "label": 1}, {"snippet_id": 57818, "code": " onboarding.INTRODUCTION_INTRO: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSE: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding", "label": 0}, {"snippet_id": 23792, "code": " in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f: docker_limit=int", "label": 0}, {"snippet_id": 39988, "code": " raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default", "label": 0}, {"snippet_id": 4751, "code": "\"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 72825, "code": " if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition", "label": 1}, {"snippet_id": 19812, "code": ".GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password", "label": 1}, {"snippet_id": 24933, "code": " port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception", "label": 0}, {"snippet_id": 627, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb", "label": 0}, {"snippet_id": 58793, "code": " return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user", "label": 0}, {"snippet_id": 19214, "code": " key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE", "label": 1}, {"snippet_id": 25381, "code": " control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes:", "label": 0}, {"snippet_id": 5985, "code": "'OIDC_CREDENTIALS_STORE'] except KeyError: pass def get_cookie_id_token(self): try: id_token_cookie=request.cookies[self.app.config['OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer.loads(id_token_cookie) except", "label": 0}, {"snippet_id": 5609, "code": "'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path", "label": 0}, {"snippet_id": 30242, "code": " FlowExchangeError: response=make_response( json.dumps('Failed to upgrade the authorization code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token", "label": 0}, {"snippet_id": 15132, "code": " self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField(", "label": 0}, {"snippet_id": 81866, "code": " return render(request, 'success-url-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm(request.POST or", "label": 0}, {"snippet_id": 82269, "code": " UpdateView): queryset=Category.objects.all() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy('category-list-view') class CategoryDeleteView(LoginRequiredMixin", "label": 0}, {"snippet_id": 62032, "code": " def validate_hsts_max_age(max_age): if max_age and max_age >=16070400: return True else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def", "label": 0}, {"snippet_id": 49950, "code": "/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name: if name[-4:] !=\".pml\":", "label": 0}, {"snippet_id": 77377, "code": "\"Server database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn't support database\" \"type '%s'\", server_vars[\"dbType\"]", "label": 0}, {"snippet_id": 45073, "code": ",datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument", "label": 0}, {"snippet_id": 35839, "code": "'product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags", "label": 0}, {"snippet_id": 42722, "code": ".get(pk=5).qa_begun, 'The Script should have qa_begun of False at the beginning') response=self.client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should", "label": 0}, {"snippet_id": 10291, "code": "'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url'", "label": 0}, {"snippet_id": 59747, "code": " def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for", "label": 0}, {"snippet_id": 38181, "code": "(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property", "label": 0}, {"snippet_id": 38011, "code": " def four(): ListPresenceFormSet=make_formset(parent, child) ParentForm=ExtractedCPCatForm if extracted else ExtractedCPCatEditForm return(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset", "label": 0}, {"snippet_id": 74548, "code": "() -got anonymous user: %s' % request.META) return HttpResponseServerError('Internet Server error. Please contact %s for assistance.' % BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect", "label": 0}, {"snippet_id": 6012, "code": "=True) return None def set_cookie_id_token(self, id_token): \"\"\" Cooperates with @after_request to set a new ID token cookie. \"\"\" g.oidc_id_token=id_token g.oidc_id_token_dirty=True def after_request(self", "label": 0}, {"snippet_id": 78700, "code": " data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session", "label": 0}, {"snippet_id": 2662, "code": " code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if ", "label": 0}, {"snippet_id": 26367, "code": " We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this", "label": 0}, {"snippet_id": 7754, "code": ".get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to", "label": 1}, {"snippet_id": 14435, "code": " login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse", "label": 0}, {"snippet_id": 75690, "code": "'%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall'): error_response=[{'text': 'FAST", "label": 0}, {"snippet_id": 22544, "code": " override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type:", "label": 0}, {"snippet_id": 46414, "code": ".create(product=product, document=doc) stub +=1 context['bulk']=0 if request.method=='POST' and 'clean_comp_data_button' in request.POST: clean_comp_data_form=CleanCompDataForm(request.POST, request.FILES", "label": 0}, {"snippet_id": 24394, "code": " ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process", "label": 1}, {"snippet_id": 49900, "code": " in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request.args or diagram", "label": 0}, {"snippet_id": 34067, "code": " save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw", "label": 0}, {"snippet_id": 78788, "code": " notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the data request", "label": 0}, {"snippet_id": 59027, "code": " fail_silently=False ) return{ 'success': True, 'message': 'Invitation successfully sent.', 'invite':{ 'status': self.status, } } except IntegrityError: return{ 'success': False, 'message': 'You already have", "label": 0}, {"snippet_id": 17693, "code": "'POST']) @bp.route('/password-reset', methods=['GET', 'POST']) def password_reset(payload=None): if not app.config['ALLOW_PASSWORD_RESET']: return flask.abort(404) if flask.g.user: return flask.redirect", "label": 0}, {"snippet_id": 10789, "code": ", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses", "label": 0}, {"snippet_id": 6626, "code": "/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed.html') @auth.route('/login', methods", "label": 0}, {"snippet_id": 70982, "code": " endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 21008, "code": ".redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self._ray_params.object_store_memory", "label": 0}, {"snippet_id": 46445, "code": "=script_pk) csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames()", "label": 0}, {"snippet_id": 82031, "code": ".cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short", "label": 0}, {"snippet_id": 41989, "code": " (\"Bulk button shouldn't be present w/ \" \"Habits and practices group_type.\")) def test_bulk_create_post(self): '''test the POST to create Products and link if needed''' doc=DataDocument.objects.create(data_group", "label": 0}, {"snippet_id": 20096, "code": " task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys", "label": 0}, {"snippet_id": 57210, "code": " transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction return render(request, 'transactions/transaction_detail", "label": 0}, {"snippet_id": 31279, "code": ".BasicAuthentication', 'rest_framework.authentication.SessionAuthentication' ) } SOCIAL_AUTH_URL_NAMESPACE='auth' SOCIAL_AUTH_LOGIN_REDIRECT_URL=os.environ.get('SOCIAL_AUTH_REDIRECT', 'http://localhost", "label": 1}, {"snippet_id": 15554, "code": "'include'] if not form.change_input_series_one_model: for command in get_command('change_input_series_one_model'): form.change_input_series_one_model.append_entry() if not form.change_input_series_all_models", "label": 0}, {"snippet_id": 19205, "code": "=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key", "label": 1}, {"snippet_id": 41264, "code": " detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all(): for ex_child in et.fetch_extracted_records(): child_model=ex_child", "label": 1}, {"snippet_id": 81923, "code": " URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object", "label": 0}, {"snippet_id": 25676, "code": ". All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams", "label": 0}, {"snippet_id": 41546, "code": " from importlib import import_module from django.test import Client from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard.views.data_group", "label": 1}, {"snippet_id": 44570, "code": ".objects.create(gen_cat='Test General Category', prod_fam='Test Product Family', prod_type='Test Product Type', description='Test Product Description', last_edited_by=user, kind='FO') extext=ExtractedText", "label": 0}, {"snippet_id": 41041, "code": ".assertTrue(p_idx > e_idx,('Product card should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, ", "label": 0}, {"snippet_id": 70729, "code": " from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure", "label": 0}, {"snippet_id": 43925, "code": ".common.by import By from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing", "label": 1}, {"snippet_id": 21703, "code": " list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type", "label": 0}, {"snippet_id": 917, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'", "label": 0}, {"snippet_id": 11387, "code": " Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration", "label": 0}, {"snippet_id": 47587, "code": " 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp", "label": 0}, {"snippet_id": 4470, "code": ") self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"", "label": 0}, {"snippet_id": 71431, "code": " def _load_strategy(self, provider): try: strategy_location=self._config[ 'provider.{0}'.format(provider)]['class_path'] return utils.import_class(strategy_location) except Exception, e: raise(Exception", "label": 0}, {"snippet_id": 30057, "code": ",nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id'", "label": 1}, {"snippet_id": 14194, "code": "': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept", "label": 0}, {"snippet_id": 54031, "code": "\"\"\" Returns the current state of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr", "label": 0}, {"snippet_id": 20832, "code": " method helps to prepare a socket file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if", "label": 0}, {"snippet_id": 52584, "code": "\"displayname\") default_message=\"\"\"{sender} has invited you to join the team {team_name} on SamePage. Accept to help complete projects for {team_name}.\"\"\".format(sender=sender, team_name=team_object.name", "label": 0}, {"snippet_id": 2988, "code": ": msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success(", "label": 0}, {"snippet_id": 28948, "code": " pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker:", "label": 0}, {"snippet_id": 5339, "code": " next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo", "label": 1}, {"snippet_id": 19900, "code": ") try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes", "label": 0}, {"snippet_id": 81336, "code": "%a') def get_attendee_list(self): attendee_list=str('') counter=1 reg_ids=self.sudo().registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False) for registration in reg_ids: if registration", "label": 0}, {"snippet_id": 20378, "code": " max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}\".format(num_flushed))", "label": 0}, {"snippet_id": 60575, "code": "\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash(request, original_response", "label": 0}, {"snippet_id": 73600, "code": ".user.is_authenticated: form=LoginForm() if request.method=='POST': clear_get_data(request) form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home", "label": 0}, {"snippet_id": 18766, "code": "\t\tcookie_status=self.get_secure_cookie(\"user\") \t\tif(cookie_status==None): \t\t\tself.render('index.html') \t\t\treturn \t\telse: \t\t\tself.render('postlogin.html') \t\t\treturn \"\"\" BootstrapModule(): Class that has", "label": 1}, {"snippet_id": 5886, "code": " is not None else httplib2.Http() self.time=time if time is not None else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app", "label": 0}, {"snippet_id": 38480, "code": " the available relationships and behavior associated with the document's extracted data ``products`` Products are associated with the data document in a many-to-many relationship ``matched`` When a source", "label": 0}, {"snippet_id": 57283, "code": " transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']==", "label": 0}, {"snippet_id": 79453, "code": " notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'] if user.get('capacity')=='admin'", "label": 0}, {"snippet_id": 35020, "code": "\nfrom urllib import parse from django.urls import resolve from django.utils import timezone, safestring from django.shortcuts import redirect from django.db.models import Count, Q from django.shortcuts", "label": 0}, {"snippet_id": 13738, "code": " limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 28284, "code": " Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether", "label": 0}, {"snippet_id": 18727, "code": "(): Class that handles / \"\"\" class IndexHandler(tornado.web.RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler", "label": 1}, {"snippet_id": 49969, "code": "\".pml\": name +=\".pml\" if allowed_file(name): session['currentFile']=name if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] savepath=os.path.join(app.config", "label": 0}, {"snippet_id": 76850, "code": ".StringIO(fp.read()) im_tile=Image.open(f) im_tile.load() except IOError, e: im_tile=None logger.error(\"Failed to fetch tile:%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname", "label": 1}, {"snippet_id": 83973, "code": "*article_args) if notification is not None: is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter( old_title=title).order_by(", "label": 0}, {"snippet_id": 9413, "code": " view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited", "label": 0}, {"snippet_id": 64818, "code": " return deductions def main(): parser=argparse.ArgumentParser(description=\"Grade student code against \" \"given test cases. Results will be written over stdout in JSON\") parser.add_argument('-n', '--name',", "label": 0}, {"snippet_id": 25257, "code": " logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process", "label": 0}, {"snippet_id": 51238, "code": "=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args) self._check_call(args, env=self._context.env,", "label": 0}, {"snippet_id": 17061, "code": ", created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue try: g.full_clean() except ValidationError as e: f.add_error", "label": 0}, {"snippet_id": 73442, "code": "): user=create_account(request) send_user_email(request, user) return render(request, 'registration/register.html', {'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created", "label": 0}, {"snippet_id": 26417, "code": ".all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process.poll() is not", "label": 0}, {"snippet_id": 12490, "code": "=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name", "label": 0}, {"snippet_id": 56778, "code": " message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept.concept_type)) extra_context['message']=concept.description_short", "label": 0}, {"snippet_id": 14166, "code": " _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration'", "label": 0}, {"snippet_id": 77343, "code": "\" layers_by_name={} server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(\"projection\"): server_vars[\"dbType\"]=\"gemap\" else: server_vars[\"dbType\"]=\"gedb\" if", "label": 0}, {"snippet_id": 49654, "code": ", 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request", "label": 0}, {"snippet_id": 38727, "code": ".extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def", "label": 0}, {"snippet_id": 13860, "code": " want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 39175, "code": "'upper_wf_analysis'] def clean_fields(self, exclude=None): super().clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id') and self.extracted_docs(): msg=\"The Group Type may not be changed once", "label": 0}, {"snippet_id": 12322, "code": " attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context", "label": 0}, {"snippet_id": 43177, "code": " def test_every_extractedtext_qa(self): for et in ExtractedText.objects.all(): response=self.client.get(f'/qa/extractedtext/%s' % et.data_document_id, follow=True) if response.status_code !=200: print(et", "label": 1}, {"snippet_id": 67505, "code": ".request.GET.get('level') if level is not None: query=query.filter(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(info__icontains=keyword)).order_by", "label": 0}, {"snippet_id": 30786, "code": " deleteGrudget(grudget_id): grudgetToDelete=session.query(Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if grudgetToDelete.user_id !=login_session['user_id'", "label": 1}, {"snippet_id": 67022, "code": ".get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): filehash=request.GET.get('keyword') return HttpResponseRedirect(filehash", "label": 1}, {"snippet_id": 77058, "code": "\"\" def __init__( self, target_url, name, layer_id, label, projection, request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self", "label": 0}, {"snippet_id": 61312, "code": " % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def __init__(self, queue): \"\"\"Initializes the monitoring thread with its input", "label": 0}, {"snippet_id": 24985, "code": " xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries", "label": 0}, {"snippet_id": 20770, "code": " allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return", "label": 0}, {"snippet_id": 54523, "code": "=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates entry for politicians", "label": 0}, {"snippet_id": 44679, "code": " timezone from django.contrib.auth.models import User from django.core.exceptions import ValidationError from dashboard.tests.loader import load_model_objects from dashboard.models import ExtractedText,", "label": 1}, {"snippet_id": 72266, "code": ": clients }) daemons=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id", "label": 0}, {"snippet_id": 72291, "code": "'export_id': '{export_id}'}, 2.0) def delete(self, cluster_id, export_id, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id", "label": 0}, {"snippet_id": 82931, "code": " for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a", "label": 0}, {"snippet_id": 74529, "code": "('etd') def login(request): if request.user.is_authenticated(): next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error('login() -got anonymous user: ", "label": 1}, {"snippet_id": 44609, "code": "'reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type=ut, weight_fraction_type=wft, raw_chem_name='Test Chem Name', raw_cas='test_cas' ) rc=ec.rawchem_ptr", "label": 0}, {"snippet_id": 11968, "code": " import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger", "label": 0}, {"snippet_id": 39688, "code": ", 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs determines which", "label": 0}, {"snippet_id": 45017, "code": ", f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertContains(response2, 'Data Group Detail: Data Group for Test", "label": 0}, {"snippet_id": 33616, "code": " test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual", "label": 0}, {"snippet_id": 65352, "code": "): self.set_titlebar(self.headerbar) def get_headerbar(self): return self.headerbar def custom_css(self): screen=Gdk.Screen.get_default() css_provider=Gtk.CssProvider() css_provider_resource=Gio.File.new_for_uri", "label": 0}, {"snippet_id": 20744, "code": "._internal_config else None) self._node_ip_address=ray_params.node_ip_address self._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url", "label": 0}, {"snippet_id": 21582, "code": ": Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the", "label": 0}, {"snippet_id": 35602, "code": " form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name", "label": 0}, {"snippet_id": 14244, "code": " \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned", "label": 0}, {"snippet_id": 63482, "code": "-metadata') self.assertEqual(response.status, '200 OK') def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout', method='POST', data={'csrf': csrft}", "label": 0}, {"snippet_id": 72327, "code": " @ApiController('/nfs-ganesha/daemon') class NFSGaneshaService(RESTController): def list(self): status_dict=Ganesha.get_daemons_status() if status_dict: return[ { 'daemon_id': daemon_id, 'cluster_id': cluster_id", "label": 0}, {"snippet_id": 71049, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll", "label": 0}, {"snippet_id": 28090, "code": " if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in", "label": 0}, {"snippet_id": 67345, "code": ".objects.filter(Q(value__icontains=ip)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)", "label": 0}, {"snippet_id": 68284, "code": "'keyword') if keyword is not None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')", "label": 0}, {"snippet_id": 51134, "code": " self._context.options=options self._context.args=args self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True if step.is_optional: enabled=step", "label": 0}, {"snippet_id": 70610, "code": "(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 45398, "code": " ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam", "label": 1}, {"snippet_id": 76472, "code": " % _TILE_PIXEL_SIZE ) logger.debug(\"Offset within: %s\", str(offset_within_tiled_image)) within_tiled_image=geom.Rect.FromLowerLeftAndExtent( offset_within_tiled_image, tilepixel_rect.Extent()) logger.debug", "label": 0}, {"snippet_id": 6291, "code": ": \"\"\" Check if `id_token` is a current ID token for this application, was issued by the Apps domain we expected, and that the email address has been verified. @see: http://openid.net/specs/openid-connect", "label": 0}, {"snippet_id": 19709, "code": " __future__ import division from __future__ import print_function import argparse import logging import os import time import traceback import redis import ray from ray.autoscaler.autoscaler import LoadMetrics", "label": 0}, {"snippet_id": 18099, "code": ".EmailHolder( subject='{} password reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset-request.txt', **tmpl_context), html=flask.render_template(", "label": 0}, {"snippet_id": 67357, "code": ": context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']", "label": 0}, {"snippet_id": 84763, "code": " body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller \"\"\" rv=do_wl_markdown(request", "label": 0}, {"snippet_id": 55458, "code": "(self): \t\treturn os.rmdir(self.path) \tdef stat(self): \t\treturn os.stat(self.path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) ", "label": 0}, {"snippet_id": 24927, "code": " self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger", "label": 0}, {"snippet_id": 60733, "code": " monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component", "label": 0}, {"snippet_id": 80758, "code": " self.lock_actions]): [action.setEnabled(False) for action in self.lock_actions] else: self.lock_all_action.setChecked(False) print(\"Couldn't lock all laser components.\") else: for action in reversed(self", "label": 0}, {"snippet_id": 11065, "code": "=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>',", "label": 0}, {"snippet_id": 73424, "code": "'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid():", "label": 0}, {"snippet_id": 30509, "code": " else: flash(\"You were not logged in\") return redirect(url_for('showGrudgets')) def createUser(login_session): newUser=User(name=login_session['username'], email=login_session[ 'email'], picture=login_session", "label": 1}, {"snippet_id": 79785, "code": ") session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users.discard", "label": 0}, {"snippet_id": 71381, "code": "=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self", "label": 1}, {"snippet_id": 17012, "code": " g in games: current={'game_name': g.name, 'the_set': g.the_set} for gp in g.gameplayer_set.all(): current[gp.power.name]=gp.roundplayer() data.append(current) round_players=r.roundplayer_set.count() expected_games", "label": 0}, {"snippet_id": 58044, "code": " Test auxiliary functions. \"\"\" def test_send_email(self): \"\"\" Test email sending. Ensure an email has proper subject and body. \"\"\" send_email( context_data={ \"milestone\": \"first\", \"students_number\": 2,", "label": 0}, {"snippet_id": 34877, "code": "\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data)", "label": 0}, {"snippet_id": 28846, "code": ": docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes", "label": 0}, {"snippet_id": 80122, "code": " ControlApplication(QApplication): EXIT_CODE_RESTART=42 def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners", "label": 0}, {"snippet_id": 84467, "code": "['revision']) article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group)", "label": 0}, {"snippet_id": 55508, "code": "): \tdef _raw(self): \t\treturn map(lambda x: x.path,self) \t \t \tdef commonprefix(self): \t\treturn FSPath(os.path.commonprefix(self._raw())) \tdef join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath", "label": 0}, {"snippet_id": 22170, "code": " command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus", "label": 0}, {"snippet_id": 24887, "code": " self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1)", "label": 0}, {"snippet_id": 78510, "code": "'organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id)", "label": 1}, {"snippet_id": 61746, "code": "\"\" This method takes a queryset and scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that", "label": 0}, {"snippet_id": 9947, "code": " external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce.", "label": 0}, {"snippet_id": 70371, "code": ") path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 13638, "code": "=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME", "label": 0}, {"snippet_id": 65588, "code": "\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self.filechooser_creation_dialog=Gtk.FileChooserDialog( \"Create new Database\", self,", "label": 0}, {"snippet_id": 68581, "code": " get_success_url(self): self.object.restart() return '/twitter_hunter' def hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter:index') def", "label": 0}, {"snippet_id": 12743, "code": " request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest", "label": 0}, {"snippet_id": 7685, "code": " import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form", "label": 0}, {"snippet_id": 75019, "code": ".id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords", "label": 0}, {"snippet_id": 11290, "code": "]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The", "label": 0}, {"snippet_id": 36213, "code": ", on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo)", "label": 1}, {"snippet_id": 5031, "code": ") self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 37376, "code": "['prod_name', 'data_document', 'qa_checked'] class ProductLinkForm(forms.ModelForm): required_css_class='required' document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data", "label": 0}, {"snippet_id": 46701, "code": "'DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType.objects.get(pk=1) code=line['document_type'] if line['filename']=='': errors", "label": 0}, {"snippet_id": 62516, "code": " import User from eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing import EduidAPITestCase from eduid_common.authn.cache import OutstandingQueriesCache from", "label": 0}, {"snippet_id": 67374, "code": " import HttpResponse, HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin", "label": 1}, {"snippet_id": 27444, "code": " _check_usage(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,(", "label": 0}, {"snippet_id": 19141, "code": " self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start", "label": 1}, {"snippet_id": 42039, "code": "=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects", "label": 0}, {"snippet_id": 17974, "code": " flask.g.user=user return flask.redirect('/profile') return flask.render_template('profile.html', form=form) def redirect_url(): home_url=flask.url_for('main.home') url=flask.request.args.get('next') or \\", "label": 1}, {"snippet_id": 46197, "code": ": d=docs.get(pk=int(row['data_document_id'])) d.raw_category=row.pop('raw_category') wft=request.POST.get('weight_fraction_type', None) if wft: w='weight_fraction_type' row[w]=WeightFractionType.objects", "label": 0}, {"snippet_id": 49122, "code": "'document_type_form': document_type_form} if code=='CP': try: list_presence=doc.extractedtext.rawchem.select_subclasses('extractedlistpresence').first() list_presence_tag_form=ExtractedListPresenceTagForm", "label": 0}, {"snippet_id": 40209, "code": "=True, validators=[URLValidator()]) qa_begun=models.BooleanField(default=False) script_type=models.CharField( max_length=2, choices =TYPE_CHOICES, blank =False, default ='EX') confidence=models.PositiveSmallIntegerField", "label": 0}, {"snippet_id": 58005, "code": " import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils import send_email,", "label": 0}, {"snippet_id": 35359, "code": "=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc", "label": 0}, {"snippet_id": 568, "code": " part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os", "label": 1}, {"snippet_id": 74019, "code": "-redirect handlers and should not define: -templates -url names \"\"\" import logging import re import ratelimit.mixins from nacl.exceptions import CryptoError from django.conf import settings from django.core", "label": 0}, {"snippet_id": 856, "code": " be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse", "label": 0}, {"snippet_id": 53989, "code": " the print buffer contents \"\"\" try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"\"\" Empties \"", "label": 1}, {"snippet_id": 79278, "code": " except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log", "label": 0}, {"snippet_id": 74299, "code": "): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ) and self._passphrase_next_url(request): return self._redirect_from_passphrase(request) elif", "label": 0}, {"snippet_id": 73880, "code": "\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by", "label": 0}, {"snippet_id": 71898, "code": "(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages('_mykey') self.assertEquals(msgs_key,[ {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs", "label": 0}, {"snippet_id": 22166, "code": " Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self,", "label": 0}, {"snippet_id": 61785, "code": "}) results_to_be_written=[] for result_data in results: securedrop=securedrops.get(domain=result_data['Domain']) current_result=pshtt_data_to_result(securedrop, result_data) current_result.compute_grade", "label": 1}, {"snippet_id": 32124, "code": ".position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is malformed", "label": 0}, {"snippet_id": 77054, "code": " client needs to deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label, projection, request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name", "label": 0}, {"snippet_id": 60714, "code": ", NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local", "label": 0}, {"snippet_id": 12621, "code": ", } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 14770, "code": " indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self): return self.user_id def db_init(): db.flushdb() auth_init() auth_add_user(", "label": 0}, {"snippet_id": 37502, "code": "): class Meta: model=ProductToPUC fields=['puc'] class HabitsPUCForm(BasePUCForm): class Meta: model=ExtractedHabitsAndPracticesToPUC fields=['puc'] class BulkProductPUCForm(forms.ModelForm): id_pks=forms", "label": 0}, {"snippet_id": 19234, "code": "\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function", "label": 0}, {"snippet_id": 47500, "code": " from django.db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from", "label": 1}, {"snippet_id": 58222, "code": "'core.common.utils.c_onboarding_status') @unpack @data( (onboarding.INTRODUCTION_COURSE_ID, settings.ONBOARDING_INTRODUCTION_COURSE_ID), (onboarding.VIEW_INTRODUCTION, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 73861, "code": ".POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request", "label": 1}, {"snippet_id": 75697, "code": " ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall'): error_response=[{'text': 'FAST results', 'children':[{'id'", "label": 0}, {"snippet_id": 39530, "code": ",'raw_chem_name'] def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url() def get_extractedtext", "label": 0}, {"snippet_id": 84109, "code": "=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_write: return HttpResponseForbidden() try:", "label": 0}, {"snippet_id": 35526, "code": ".queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=", "label": 0}, {"snippet_id": 29408, "code": " return redirect(url_for('auth.test')) @auth.route('/login/auth') def oauthorize(): if g.user.is_authenticated: return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback',", "label": 1}, {"snippet_id": 38735, "code": " from.extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace(' ',", "label": 0}, {"snippet_id": 77457, "code": " \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability to fetch tiles - everything a code client needs to know about and use, to get tiles from a server. Args", "label": 0}, {"snippet_id": 36681, "code": "%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count", "label": 0}, {"snippet_id": 56251, "code": " self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_an_experience_on_db(title='a',", "label": 0}, {"snippet_id": 32285, "code": ": value.append(self.char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): '''", "label": 0}, {"snippet_id": 50981, "code": " self._steps if self.is_optional) def specify_optional_steps(self, *steps): ''' Specify which optional steps to include in the build. \"default\" includes all default steps. \"all\" includes all steps. \"foo\"", "label": 0}, {"snippet_id": 4418, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id", "label": 0}, {"snippet_id": 65327, "code": "\") file_open_button=builder.get_object(\"open_button\") file_open_button.connect(\"clicked\", self.open_filechooser, None) file_new_button=builder.get_object(\"new_button\") file_new_button.connect(\"clicked\"", "label": 0}, {"snippet_id": 455, "code": ", ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def", "label": 1}, {"snippet_id": 75774, "code": ": %s' % e) logger.error('fast response: %s -%s' %(r.status_code, r.text)) return error_response @login_required def autocomplete_keywords(request): term=request.GET['term'] results=_get_previously_used", "label": 0}, {"snippet_id": 75908, "code": " verbose_name=_('Project'), related_name='redirects', ) redirect_type=models.CharField( _('Redirect Type'), max_length=255, choices=TYPE_CHOICES, help_text=redirect_type_helptext, ) from_url=models.CharField( _(", "label": 0}, {"snippet_id": 66573, "code": "=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() file_path", "label": 0}, {"snippet_id": 58651, "code": "(instructor=instructor).exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy=instructor.user, isPreview", "label": 1}, {"snippet_id": 32843, "code": " fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self):", "label": 1}, {"snippet_id": 9308, "code": ": json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True", "label": 0}, {"snippet_id": 6729, "code": ".data) db.session.add(user) db.session.commit() token=user.generate_confirmation_token() send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token) flash('Check your inbox", "label": 0}, {"snippet_id": 55416, "code": ".path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.rename(self.path,other.path) \t\telse: \t\t\treturn os.rename(self.path,other", "label": 0}, {"snippet_id": 43547, "code": " Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url ", "label": 0}, {"snippet_id": 38786, "code": "=models.TextField(null=True, blank=True) downloaded_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script", "label": 0}, {"snippet_id": 9428, "code": " HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded", "label": 0}, {"snippet_id": 44266, "code": "/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser.current_url, \"User should always return to detail page after submit\"", "label": 0}, {"snippet_id": 53776, "code": " project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=[]", "label": 0}, {"snippet_id": 13174, "code": "), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider", "label": 0}, {"snippet_id": 20044, "code": "\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state", "label": 0}, {"snippet_id": 41342, "code": " ExtractedHHDoc) else: self.assertEqual(type(extsub), ExtractedText) except ObjectDoesNotExist: pass def test_every_extractedtext(self): ''''Loop through all the ExtractedText objects and confirm that the new", "label": 0}, {"snippet_id": 84419, "code": " template_params={'article': article, 'changes': changes, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context)", "label": 0}, {"snippet_id": 39492, "code": " models from dashboard.models import CommonInfo from.raw_chem import RawChem class ExtractedListPresence(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True)", "label": 1}, {"snippet_id": 15797, "code": " json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/remove/<field>', methods=['POST']) def view_run_remove(field): run_form=get_run_form()", "label": 0}, {"snippet_id": 52843, "code": ".DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if", "label": 0}, {"snippet_id": 44467, "code": ".objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type", "label": 0}, {"snippet_id": 76730, "code": "\"Set the transparent pixels to bgcolor. Args: tile: Tile as sent from the server. bgcolor: BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent", "label": 0}, {"snippet_id": 80424, "code": " @handled_function def setup_widgets(self): self.status_monitor_queue=queue.Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor", "label": 0}, {"snippet_id": 69235, "code": " much as possible in the hub environment. A lot of spawners & authenticators do not have conda-forge packages, but do have pip packages. Keeping all python packages in the hub environment be installed with", "label": 0}, {"snippet_id": 67038, "code": " return HttpResponseRedirect(filehash) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='filehash/detail.html' def get_context_data(self", "label": 1}, {"snippet_id": 70951, "code": " http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans ", "label": 0}, {"snippet_id": 51733, "code": " genCSRF, OR: genOR, SSCI: genSSCI, SCI: genSCI } class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count=0 def", "label": 0}, {"snippet_id": 8047, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata.", "label": 0}, {"snippet_id": 71975, "code": " __future__ import absolute_import from functools import partial import cherrypy import cephfs from. import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger", "label": 1}, {"snippet_id": 70816, "code": " in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\", "label": 1}, {"snippet_id": 68697, "code": ".stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url", "label": 0}, {"snippet_id": 79570, "code": " session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic", "label": 0}, {"snippet_id": 5548, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"", "label": 0}, {"snippet_id": 9766, "code": " None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\":", "label": 0}, {"snippet_id": 14083, "code": ", } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 6388, "code": "'Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']): logger.error('Token has expired') return False if id_token['iat'] <(self.time() -self.app.config['OIDC_CLOCK_SKEW'", "label": 0}, {"snippet_id": 255, "code": " lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{%", "label": 0}, {"snippet_id": 1930, "code": ".st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <", "label": 0}, {"snippet_id": 65826, "code": ".container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance def update_tab_bar_visibility", "label": 0}, {"snippet_id": 42272, "code": ".decode('utf8') self.assertNotIn('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/", "label": 0}, {"snippet_id": 82780, "code": " self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid", "label": 0}, {"snippet_id": 10870, "code": "=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated", "label": 0}, {"snippet_id": 55606, "code": "\t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef", "label": 0}, {"snippet_id": 25472, "code": ".update() self._maybe_flush_gcs() self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis", "label": 0}, {"snippet_id": 61406, "code": " get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts", "label": 0}, {"snippet_id": 43792, "code": "( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ", "label": 0}, {"snippet_id": 62650, "code": " authentication query to the queries cache. To be used before accessing the assertion consumer service. :param came_from: url to redirect back the client after finishing with the authn service. :type came_from:", "label": 0}, {"snippet_id": 52021, "code": " teams for display\"\"\" session[\"team_id\"]=None if session.get(\"new_user\"): flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from", "label": 0}, {"snippet_id": 13855, "code": " received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( ", "label": 0}, {"snippet_id": 83496, "code": " from datetime import datetime from django.conf import settings from django.core.cache import cache from django.template import RequestContext from django.core.urlresolvers import reverse from django.http", "label": 0}, {"snippet_id": 64338, "code": ": current_app.logger.warning( 'The session does not contain the subject id for user{0} ' 'Performing local logout'.format( session['eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page", "label": 0}, {"snippet_id": 61045, "code": " Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status", "label": 0}, {"snippet_id": 7558, "code": " require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string", "label": 0}, {"snippet_id": 40045, "code": " tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self): '''If there is no DSSToxLookup record via the curated_chemical relationship, it", "label": 0}, {"snippet_id": 45458, "code": " from dashboard.models import * @login_required() def data_document_detail(request, pk): template_name='data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group", "label": 0}, {"snippet_id": 40637, "code": "=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('/').content", "label": 0}, {"snippet_id": 17232, "code": ") for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean", "label": 0}, {"snippet_id": 23154, "code": ".g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to use. error_type(str): The type of the error. message", "label": 0}, {"snippet_id": 67260, "code": "=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs", "label": 0}, {"snippet_id": 17317, "code": " nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint('account',", "label": 0}, {"snippet_id": 10102, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference.", "label": 0}, {"snippet_id": 51758, "code": ": if(self.count): self.scope['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript(self,script): script_name='result/'+self.cate_str+'_attack'+str(self", "label": 0}, {"snippet_id": 11021, "code": "\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request)", "label": 0}, {"snippet_id": 60050, "code": "\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite.html\" ) else: raise return self._inspect def register_custom_units(self): \"Register any custom units defined in the metadata.json", "label": 0}, {"snippet_id": 56632, "code": " def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def then_response_should_be_json", "label": 0}, {"snippet_id": 33924, "code": " test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter(", "label": 0}, {"snippet_id": 35630, "code": " puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe", "label": 0}, {"snippet_id": 9454, "code": " exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()", "label": 0}, {"snippet_id": 11339, "code": "() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register", "label": 0}, {"snippet_id": 21653, "code": " kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self", "label": 0}, {"snippet_id": 8559, "code": "=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, ", "label": 0}, {"snippet_id": 13391, "code": " get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline", "label": 0}, {"snippet_id": 8773, "code": "): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS", "label": 0}, {"snippet_id": 14507, "code": "(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{", "label": 0}, {"snippet_id": 71419, "code": " resp.request is None: resp.request=req if resp is None: resp=req.get_response(self.app) resp._save_session() return resp(environ, start_response) def _load_strategy(self, provider): try: strategy_location", "label": 0}, {"snippet_id": 43681, "code": "-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id", "label": 0}, {"snippet_id": 52334, "code": " methods=[\"POST\"]) def update_most_recently_clicked_board(): \"\"\" \"\"\" board_id=request.form.get(\"boardId\") session[\"current_board\"]=board_id print \"Session updated with board{}.\".format(board_id) return \"HTTP", "label": 0}, {"snippet_id": 74137, "code": ".request.site.id @property def decrypted_report(self): return self.report.decrypt_record(self.storage.passphrase) def get_form_kwargs(self): kwargs=super().get_form_kwargs() kwargs.update({\"view\": self", "label": 0}, {"snippet_id": 46523, "code": "=Ingredient.objects.get(rawchem_ptr=extracted_chemical.rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis=row", "label": 0}, {"snippet_id": 6853, "code": " current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for('main.index')) else:", "label": 0}, {"snippet_id": 27577, "code": "\"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this", "label": 0}, {"snippet_id": 13276, "code": " ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from", "label": 0}, {"snippet_id": 12102, "code": "'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode'", "label": 0}, {"snippet_id": 67990, "code": "')) return query class EventListView(PaginationMixin, ListView): model=Event template_name='threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 30150, "code": "'client_secrets.json', 'r').read())['web']['client_id'] APPLICATION_NAME=\"Grudget Catalog\" engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata", "label": 0}, {"snippet_id": 76156, "code": " version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path(path, language, version_slug", "label": 1}, {"snippet_id": 75017, "code": "): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords", "label": 0}, {"snippet_id": 84535, "code": " return redirect(article) messages.error( request, 'Reverting not possible because an article with name \\'%s\\' already exists' % old_title) return redirect(article) return HttpResponseNotAllowed(['POST'", "label": 0}, {"snippet_id": 10554, "code": " import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form", "label": 0}, {"snippet_id": 61118, "code": " host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\" def __init__(self, comp_name): ", "label": 0}, {"snippet_id": 70522, "code": "\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href", "label": 0}, {"snippet_id": 54587, "code": "\t\t \t\tself.p=pprint.PrettyPrinter(indent=2) \t\tself.homeworks=[] \t\tfor homework_file in self.d: \t\t\ttry: \t\t\t\tif homework_file.basename() !=\".DS_Store\": \t\t\t\t\tself.homeworks.append(parse(homework_file.path)", "label": 0}, {"snippet_id": 4223, "code": ".assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self", "label": 0}, {"snippet_id": 40364, "code": ".extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1", "label": 0}, {"snippet_id": 64250, "code": " started') state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) logout_redirect_url=current_app.config.get(", "label": 0}, {"snippet_id": 58220, "code": "), result) @mock.patch('core.common.utils.c_onboarding_status') @unpack @data( (onboarding.INTRODUCTION_COURSE_ID, settings.ONBOARDING_INTRODUCTION_COURSE_ID), (onboarding.VIEW_INTRODUCTION, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 68207, "code": " import Q from.models import tweet from.forms import SearchForm from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from datetime import datetime", "label": 0}, {"snippet_id": 59515, "code": "(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data self._metadata=metadata or{} self.sqlite_functions=[] self.sqlite_extensions=sqlite_extensions or[] self", "label": 0}, {"snippet_id": 22928, "code": " a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback", "label": 0}, {"snippet_id": 8007, "code": " if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info", "label": 0}, {"snippet_id": 82590, "code": " a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self", "label": 0}, {"snippet_id": 80293, "code": ".setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon')", "label": 0}, {"snippet_id": 15443, "code": "{ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'new_value': entry.new_value.data ", "label": 0}, {"snippet_id": 10036, "code": "(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's", "label": 0}, {"snippet_id": 28884, "code": "\"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns", "label": 0}, {"snippet_id": 66791, "code": " blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data(self, **kwargs): context=super(", "label": 0}, {"snippet_id": 56769, "code": "'concept']=concept transaction=concept.transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header", "label": 0}, {"snippet_id": 82265, "code": " class CategoryUpdateView(LoginRequiredMixin, UpdateView): queryset=Category.objects.all() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy('category", "label": 0}, {"snippet_id": 34079, "code": "/*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent", "label": 0}, {"snippet_id": 43037, "code": "('/qa/extractionscript/15/', follow=True) response=self.client.get('/qa/extractedtext/5/', follow=True) self.assertIn( b'<input type=\"text\" name=\"rawchem-1-raw_cas\"', response.content) self.assertNotIn", "label": 0}, {"snippet_id": 83310, "code": "( queryset=ContentType.objects.all(), required=False, widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class", "label": 0}, {"snippet_id": 41788, "code": ".assertEqual(str(self.objects.dg.group_type),'Functional use', 'Type of DataGroup needs to be \"FU\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields", "label": 0}, {"snippet_id": 64698, "code": " output_json(points, deductions): score=points -sum(d['points'] for d in deductions) if score < 0: score=0 print(json.dumps({'score': score, 'deductions': deductions})) def dock_points(deductions, points,", "label": 0}, {"snippet_id": 40005, "code": " null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField(max_length=50, null=True", "label": 0}, {"snippet_id": 15140, "code": "',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeInputNewValue(FlaskForm): def __init__(self, csrf_enabled", "label": 0}, {"snippet_id": 19440, "code": "=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES", "label": 1}, {"snippet_id": 78285, "code": " user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation ", "label": 0}, {"snippet_id": 59282, "code": "\", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned", "label": 0}, {"snippet_id": 7505, "code": "\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model", "label": 0}, {"snippet_id": 17586, "code": " email=form.email.data.strip(), password=form.password.data) user.registration_ip=ip_address(flask.request.remote_addr).packed user.last_login_ip=user.registration_ip db.session.add(user) db.session.commit", "label": 0}, {"snippet_id": 52651, "code": "\"is_logged_in\") is True: user_id=session.get(\"user_id\") projects_objects=q.get_projects_by_user(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=", "label": 0}, {"snippet_id": 59835, "code": " view, 'view') def update_with_inherited_metadata(self, metadata): metadata.update( { \"source\": metadata.get(\"source\") or self.metadata(\"source\"), \"source_url\": metadata.get(\"source_url\") or self.metadata(", "label": 0}, {"snippet_id": 61559, "code": " securedrop.landing_page_url, allow_redirects=False ) except requests.exceptions.RequestException: return ScanResult( securedrop=securedrop, live=pshtt_results['Live'], http_status_200_ok=False, ) return", "label": 1}, {"snippet_id": 40543, "code": "').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the", "label": 0}, {"snippet_id": 74648, "code": "('Shibboleth-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise PermissionDenied", "label": 0}, {"snippet_id": 80002, "code": " be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time", "label": 0}, {"snippet_id": 38310, "code": ".ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__", "label": 0}, {"snippet_id": 14328, "code": "(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's", "label": 0}, {"snippet_id": 75070, "code": "'Thesis has already been submitted and is locked.') if request.method=='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if", "label": 0}, {"snippet_id": 33032, "code": "')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for", "label": 0}, {"snippet_id": 72867, "code": " request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session['position_id']) request.user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm", "label": 1}, {"snippet_id": 12573, "code": " third_party_auth.is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id,", "label": 0}, {"snippet_id": 76206, "code": " redirect_sphinx_html(self, path, language=None, version_slug=None): for ending in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re.sub(ending +'$', ", "label": 0}, {"snippet_id": 17362, "code": ".validate(): if app.config['MAINTENANCE_MODE'] and not app.config['MAINTENANCE_MODE_LOGINS']: flask.flash(flask.Markup('<strong>Logins are currently disabled.</strong>'), 'danger') return flask.redirect(flask", "label": 0}, {"snippet_id": 78570, "code": "{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'] if user.get('capacity')=='admin']) return users", "label": 0}, {"snippet_id": 82966, "code": " self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the", "label": 0}, {"snippet_id": 28730, "code": "(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get", "label": 1}, {"snippet_id": 39636, "code": ", blank=True, verbose_name=\"QA approval date\") qa_approved_by=models.ForeignKey('auth.User', on_delete=models.SET_NULL, verbose_name=\"QA approved by\", null=True, blank=True,) qa_group=models.ForeignKey", "label": 0}, {"snippet_id": 25934, "code": "._ray_params.num_redis_shards, redis_max_clients=self._ray_params.redis_max_clients, redirect_output=self._ray_params.redirect_output, redirect_worker_output=self._ray_params.redirect_worker_output, password=self", "label": 0}, {"snippet_id": 76540, "code": ": self-explanatory. layer_properties: Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with", "label": 0}, {"snippet_id": 52029, "code": " session.get(\"new_user\"): flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\"", "label": 0}, {"snippet_id": 50314, "code": "(mode=\"w+t\", delete=False) as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session", "label": 0}, {"snippet_id": 50110, "code": " email=session['email'] elif 'social' in session: email=session['social'] filename=session['currentFile'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename", "label": 0}, {"snippet_id": 50584, "code": " a time can run with the given name per user per machine. While waiting for the lock, prints a notice to stdout every 30s. ''' if platform.system()=='Windows': return WindowsUserLock(name) return PosixUserLock", "label": 0}, {"snippet_id": 33839, "code": " import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ", "label": 0}, {"snippet_id": 42227, "code": " response, 'Check should be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertIn('<th>Product<", "label": 0}, {"snippet_id": 18221, "code": ", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler", "label": 1}, {"snippet_id": 11940, "code": " import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view", "label": 0}, {"snippet_id": 75740, "code": ") return error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list(r.json", "label": 0}, {"snippet_id": 49541, "code": " import query_user,query_social_user, number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app", "label": 1}, {"snippet_id": 25278, "code": " messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of", "label": 0}, {"snippet_id": 51258, "code": ", **kwargs) def rsync(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([\"rsync\"] +args, **kwargs) def _dependency_collection(self): return read_dependencies_from_filename(os.path", "label": 0}, {"snippet_id": 80013, "code": "=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict)", "label": 0}, {"snippet_id": 40284, "code": ") return \"{0:.0f}%\".format(pct) def get_pct_checked_numeric(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count() / count * 100)) return pct def", "label": 0}, {"snippet_id": 74733, "code": "': candidate.id})) else: shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type', '') if person_instance: person_form=PersonForm(instance", "label": 0}, {"snippet_id": 4442, "code": " users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self)", "label": 0}, {"snippet_id": 48833, "code": "': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk)", "label": 0}, {"snippet_id": 70166, "code": "': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the", "label": 0}, {"snippet_id": 18870, "code": " GospelTrip def gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects", "label": 0}, {"snippet_id": 75260, "code": "'person_form': person_form, 'committee_member_form': committee_member_form} return render(request, 'etd_app/candidate_committee.html', context) @login_required @require_http_methods(['POST']) def candidate_committee_remove", "label": 0}, {"snippet_id": 2734, "code": "=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication initialization HTTP endpoint", "label": 0}, {"snippet_id": 26796, "code": " process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result", "label": 0}, {"snippet_id": 81213, "code": "\nimport logging from datetime import datetime from dateutil.relativedelta import relativedelta from odoo import fields, models, api _logger=logging.getLogger(__name__) class FitEvent(models.Model): _name", "label": 0}, {"snippet_id": 71927, "code": "(self): req=EngineAuthRequest.blank('/auth/google') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri", "label": 1}, {"snippet_id": 54499, "code": " 'result_type': 'mixed'} response=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response", "label": 0}, {"snippet_id": 49069, "code": " from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail(request, pk): template_name='data_document/data_document_detail.html' doc=get_object_or_404", "label": 0}, {"snippet_id": 38472, "code": " which document types the document might be among, and determines much of the available relationships and behavior associated with the document's extracted data ``products`` Products are associated with", "label": 0}, {"snippet_id": 75962, "code": ".BooleanField(choices=STATUS_CHOICES, default=True) create_dt=models.DateTimeField(auto_now_add=True) update_dt=models.DateTimeField(auto_now=True) objects=RedirectManager() class Meta: verbose_name=_('redirect')", "label": 0}, {"snippet_id": 41385, "code": "(dd.data_group.group_type.code)[1] childform_model=child_formset.__dict__.get('queryset').__dict__.get('model') self.assertEqual(dd_child_model, childform_model) def test_curated_chemical(self): ''''Confirm", "label": 0}, {"snippet_id": 60459, "code": ": if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"", "label": 0}, {"snippet_id": 1072, "code": "), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"", "label": 0}, {"snippet_id": 9464, "code": ".get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG", "label": 0}, {"snippet_id": 40119, "code": ".data_document except apps.get_model('dashboard.ExtractedFunctionalUse').DoesNotExist: try: return apps.get_model('dashboard.ExtractedListPresence').objects.get(rawchem_ptr=id).data_document except apps.get_model", "label": 0}, {"snippet_id": 60975, "code": ".hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing", "label": 0}, {"snippet_id": 571, "code": ": continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath", "label": 1}, {"snippet_id": 24680, "code": " parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None", "label": 1}, {"snippet_id": 84923, "code": " article.title}) for old_title in old_titles: if old_title in article.content: found_old_links.append({'old_title': old_title, 'title': article.title}) context={'found_links': found_links, 'found_old_links':", "label": 0}, {"snippet_id": 13969, "code": " 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running", "label": 0}, {"snippet_id": 37629, "code": " Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num'] widgets={ 'data_document': forms.HiddenInput(), ", "label": 0}, {"snippet_id": 47601, "code": ">0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated", "label": 0}, {"snippet_id": 32015, "code": " class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END", "label": 0}, {"snippet_id": 26702, "code": " an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive", "label": 0}, {"snippet_id": 19156, "code": "\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys", "label": 1}, {"snippet_id": 24222, "code": " num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client", "label": 1}, {"snippet_id": 52240, "code": " render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page, with board\"\"\" team_id=request.form.get(\"team", "label": 0}, {"snippet_id": 47525, "code": ", Subquery, OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data", "label": 1}, {"snippet_id": 57380, "code": " self.filter=TransactionFilter(data) self.queryset=self.filter.qs.select_related('cashclose')\\ .prefetch_related('concepts__value__currency') \\ .order_by('-id') return self.queryset def post(self, request", "label": 0}, {"snippet_id": 46486, "code": ") good_records=[] for i, row in enumerate(csv.DictReader(info)): try: extracted_chemical=ExtractedChemical.objects.get(rawchem_ptr=int(row['id'])) except ExtractedChemical.DoesNotExist as e: extracted_chemical", "label": 0}, {"snippet_id": 12412, "code": "=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def", "label": 0}, {"snippet_id": 39978, "code": ".ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField", "label": 1}, {"snippet_id": 26118, "code": ") self.prepare_socket_file(self._raylet_socket_name) stdout_file, stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address", "label": 1}, {"snippet_id": 80981, "code": " event_is_participating: for registration in event.registration_ids: for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing registration, set state to cancelled.') registration.state", "label": 0}, {"snippet_id": 42357, "code": "{dgpk}/', \"Should go to detail page.\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data", "label": 0}, {"snippet_id": 69644, "code": ", ' '.join(apt_packages) )) apt.install_packages(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()))) if conda_packages: logger.info('Installing{} conda packages", "label": 0}, {"snippet_id": 76016, "code": "]: from_url=self.from_url to_url=self.to_url if self.redirect_type=='prefix': to_url='/{lang}/{version}/'.format( lang=self.project.language, version=self.project.default_version, ) return '{from_url} ", "label": 0}, {"snippet_id": 17002, "code": " games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) games=r.game_set.all() data=[] for g in games: current={'game_name': g.name, 'the_set", "label": 0}, {"snippet_id": 39597, "code": "=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models.CASCADE, limit_choices_to={'script_type': 'EX'}", "label": 0}, {"snippet_id": 21983, "code": " However, the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the", "label": 0}, {"snippet_id": 35518, "code": "=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products", "label": 0}, {"snippet_id": 82769, "code": "\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__", "label": 0}, {"snippet_id": 49669, "code": "']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile", "label": 0}, {"snippet_id": 65337, "code": " None) file_new_button=builder.get_object(\"new_button\") file_new_button.connect(\"clicked\", self.create_filechooser, None) self.set_titlebar(self.headerbar) def set_headerbar(self): self.set_titlebar(self", "label": 0}, {"snippet_id": 83165, "code": " :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues", "label": 0}, {"snippet_id": 55724, "code": ",name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder(t) \t\telif what is File: \t\t\tf=open(t,\"w\") \t\t\tf.close() \t\t\treturn File(t) \t\telse: \t\t\traise NotImplementedError \t \tdef file_with_name(self,name): ", "label": 0}, {"snippet_id": 14768, "code": " json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self): return self.user_id def db_init(): db", "label": 0}, {"snippet_id": 75790, "code": " @login_required def autocomplete_keywords(request): term=request.GET['term'] results=_get_previously_used(Keyword, term) results.extend(_get_fast_results(term)) return JsonResponse({'err': 'nil', 'results': results}", "label": 0}, {"snippet_id": 52876, "code": ".request.user.full_name, 'user_type': self.request.user.user_type, 'message': instance.text, 'file_name': os.path.basename(urlparse(instance.attachment.path).path) if instance.attachment else None, 'file_link", "label": 0}, {"snippet_id": 22464, "code": " traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value,", "label": 1}, {"snippet_id": 40906, "code": " Client from django.urls import reverse from django.test import TestCase, override_settings from django.core.exceptions import ObjectDoesNotExist from dashboard.forms import * from factotum.settings import", "label": 1}, {"snippet_id": 2361, "code": " response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head", "label": 0}, {"snippet_id": 14697, "code": "(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect.start() print 'Press Ctrl+C to stop' signal.pause() except KeyboardInterrupt: pass finally: redirect.stop() print", "label": 1}, {"snippet_id": 34774, "code": " output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid", "label": 0}, {"snippet_id": 68484, "code": "'tweet')) return query def get(self, request): self.object_list=self.get_queryset(request) context=self.get_context_data() return render(request, 'twitter_hunter/index.html', context) class TweetsView(PaginationMixin", "label": 0}, {"snippet_id": 46242, "code": " extraction_script=script) if not created and ext.one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name' err_msg=['must be 1:1 with \"data_document_id\".'] context['ext_err'][i+1]=", "label": 0}, {"snippet_id": 71663, "code": "=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id==s.session_id)", "label": 0}, {"snippet_id": 29060, "code": ".orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache", "label": 0}, {"snippet_id": 55121, "code": " expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime(self.path) \tdef getsize(self):", "label": 0}, {"snippet_id": 31670, "code": "* 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME, locale, max_age=max_age, expires=(datetime.utcnow() +timedelta(seconds=max_age)).strftime( '%a, %d-%b-%Y %H:%M:%S GMT'), domain=settings.SESSION_COOKIE_DOMAIN", "label": 0}, {"snippet_id": 27461, "code": "\"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers", "label": 0}, {"snippet_id": 84696, "code": " return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if not notification.is_observing(article, request.user): notification.observe(article, request.user, 'wiki_observed_article_changed", "label": 0}, {"snippet_id": 48345, "code": "'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)", "label": 0}, {"snippet_id": 14183, "code": "', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json()", "label": 0}, {"snippet_id": 75421, "code": " raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) if request.method", "label": 0}, {"snippet_id": 26784, "code": " Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if", "label": 0}, {"snippet_id": 39313, "code": ", blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient rank\", null=True, blank", "label": 0}, {"snippet_id": 27786, "code": "==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address,", "label": 0}, {"snippet_id": 79849, "code": " rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator", "label": 0}, {"snippet_id": 55267, "code": " os.path.splitunc(self.path) \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd", "label": 0}, {"snippet_id": 65968, "code": " for db in self.databases_to_save: db.database_manager.save_database() self.quit_dialog.destroy() self.application.quit() def on_application_quit(self, window, event): unsaved_databases_list=[] for db in", "label": 0}, {"snippet_id": 75563, "code": " candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis.current_file_name", "label": 0}, {"snippet_id": 35821, "code": " else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404", "label": 0}, {"snippet_id": 5514, "code": "(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected", "label": 0}, {"snippet_id": 33943, "code": ".filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id", "label": 0}, {"snippet_id": 73105, "code": "'disabled'})} def clean(self): pdf=self.cleaned_data.get('pdf') url=self.cleaned_data.get('url_ref') if not pdf and not url: msg=forms.ValidationError(ErrorMessages.empty_create_position_form) self.add_error", "label": 1}, {"snippet_id": 28767, "code": ".encode(\"ascii\") for line in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): ", "label": 0}, {"snippet_id": 19318, "code": "=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR", "label": 0}, {"snippet_id": 33367, "code": " dashboard.views.get_data import * from django.test import TestCase from django.test.client import Client from dashboard.views.get_data import * from dashboard.tests.loader import fixtures_standard @override_settings", "label": 0}, {"snippet_id": 55867, "code": " root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 54637, "code": " assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t", "label": 1}, {"snippet_id": 8861, "code": "'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={", "label": 0}, {"snippet_id": 2202, "code": "<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index", "label": 0}, {"snippet_id": 54222, "code": " return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other errors \"\"\" \"\"\" 404 ", "label": 1}, {"snippet_id": 76445, "code": "), int((row +1) * _TILE_PIXEL_SIZE) ) im_tile=tiles_array.ImageAt(column, row) if set_pixel_to_bgcolor: im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile,", "label": 0}, {"snippet_id": 31317, "code": ".pipeline.social_auth.associate_by_email', 'social.pipeline.user.create_user', 'social.pipeline.social_auth.associate_user', 'social.pipeline.social_auth.load_extra_data', 'social.pipeline.user.user_details", "label": 0}, {"snippet_id": 60501, "code": "/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"plugins", "label": 0}, {"snippet_id": 24167, "code": " worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start", "label": 1}, {"snippet_id": 22322, "code": "._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self", "label": 0}, {"snippet_id": 29915, "code": "(object): BASE_DIR=BASE SQLALCHEMY_MIGRATE_REPO=os.path.join(BASE_DIR, 'db_repository') SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static'", "label": 1}, {"snippet_id": 65423, "code": "\")\") tab_title=ntpath.basename(keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last", "label": 1}, {"snippet_id": 66526, "code": ") self.logging_manager.log_debug(\"Keyfile path: \" +keyfile_path) def on_composite_unlock_select_button_clicked(self, widget): filechooser_opening_dialog=Gtk.FileChooserDialog( \"Choose Keyfile\", self.window", "label": 0}, {"snippet_id": 68919, "code": " jJ+h8gMRg6ri5EQxOExccSRU0i7UHktecSs0DVC4lZG9AOzBe+Q36cym5Z1di6JQ kHl69q3zBdV3KTW+H1pdmnZlebYGz8paG9iQ/wS9gpnSeEyx0Enyi167Bzm0O4A1 GK0prkLnz/yROHHEfHjsTgMvFwAnf9uaxwWgE1d1RitIWgJpAnp1DZ5O0uVlsPPm XAhuBJ32mU8S5BezPTuJJICwBlLYECGb1Y65Cil4OALU7T7sbUqfLCuaRKxuPtcU", "label": 0}, {"snippet_id": 66899, "code": "(url__contains=domain)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events']", "label": 0}, {"snippet_id": 59255, "code": " from.inspect import inspect_hash, inspect_views, inspect_tables from.plugins import pm, DEFAULT_PLUGINS from.version import __version__ app_root=Path(__file__).parent.parent connections=threading.local", "label": 0}, {"snippet_id": 73256, "code": "=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) password=forms.CharField( label=LoginFormText", "label": 0}, {"snippet_id": 23351, "code": ") np.random.set_state(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none", "label": 0}, {"snippet_id": 29902, "code": " comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment.owner(current_user): db.session.delete(comment) db.session.commit() else: flash('you can\\'t delete this comment')", "label": 0}, {"snippet_id": 3799, "code": ".test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users", "label": 0}, {"snippet_id": 19581, "code": "(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also", "label": 1}, {"snippet_id": 4422, "code": ".\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id", "label": 0}, {"snippet_id": 47591, "code": "=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids", "label": 0}, {"snippet_id": 44130, "code": ".click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit\") num_pucs=len(PUC.objects.filter(kind='FO')) self.browser.get(self.live_server_url", "label": 0}, {"snippet_id": 18447, "code": "\tif check_if_exists returns not None then renders signup.html with the error. \tAfter confirming that no errors have occured, hashes the password and then inserts it into the \tMongoDB database by calling", "label": 1}, {"snippet_id": 81584, "code": " logging from datetime import datetime from dateutil.relativedelta import relativedelta from odoo import fields, models _logger=logging.getLogger(__name__) class Partner(models.Model): _name='res.partner", "label": 0}, {"snippet_id": 1048, "code": ", statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 62596, "code": " 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config, 'TOKEN_LOGIN_SHARED_KEY': 'shared_secret', 'TOKEN_LOGIN_SUCCESS_REDIRECT_URL': 'http:", "label": 0}, {"snippet_id": 37034, "code": "','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam", "label": 1}, {"snippet_id": 14217, "code": " request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register", "label": 0}, {"snippet_id": 23321, "code": " TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\"", "label": 0}, {"snippet_id": 19085, "code": " cloudpickle as pickle from ray import profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has an import thread,", "label": 1}, {"snippet_id": 65764, "code": ".database_manager) def create_tab(self, title, headerbar): if self.container==NotImplemented: self.create_container() page_instance=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0) tab_label=Gtk.Label(title", "label": 0}, {"snippet_id": 75757, "code": "'response']['docs'], index) if select2_results: return[{'text': 'FAST results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e) logger.error", "label": 0}, {"snippet_id": 62076, "code": " server_header=str.lower(page.headers['Server']) if 'nginx' in server_header or 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if ", "label": 0}, {"snippet_id": 68071, "code": ": model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_edit_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' def hunt_del(request, pk): hunt=get_object_or_404", "label": 0}, {"snippet_id": 48523, "code": " ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type", "label": 0}, {"snippet_id": 478, "code": " def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 68880, "code": "--- Version: GnuPG v1 Comment: GPGTools -https://gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R+RJfRpb1qvljURr54y35IZgs fMG22Np+TmM2RLgdFCZa18h0", "label": 0}, {"snippet_id": 42594, "code": ") self.assertContains(response, 'stub_1845') def test_group_type_facet(self): response=self.c.get('/find/?q=diatom') self.assertContains(response, 'Filter by Group Type') response=self.c.get('/find/?q=diatom", "label": 1}, {"snippet_id": 4732, "code": "'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test", "label": 0}, {"snippet_id": 12538, "code": " is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration", "label": 0}, {"snippet_id": 82799, "code": " job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict", "label": 0}, {"snippet_id": 52967, "code": "=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view", "label": 0}, {"snippet_id": 12031, "code": " third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 71166, "code": ".set_cookie('_eauth', session.serialize()) return self def _save_user(self): pass class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth", "label": 0}, {"snippet_id": 27335, "code": " self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self.include_log_monitor", "label": 0}, {"snippet_id": 32949, "code": "\nfrom django.contrib import admin from dashboard.models import * from django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import ", "label": 0}, {"snippet_id": 72821, "code": ") d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position", "label": 1}, {"snippet_id": 44261, "code": "\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser.current_url, \"User", "label": 0}, {"snippet_id": 13787, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if", "label": 0}, {"snippet_id": 31722, "code": "('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections", "label": 1}, {"snippet_id": 23568, "code": " requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is", "label": 0}, {"snippet_id": 19618, "code": "\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"The address", "label": 1}, {"snippet_id": 66692, "code": ".unlock_database_stack_box.destroy() UnlockedDatabase(self.window, self.parent_widget, self.database_manager) def clear_input_fields(self): password_unlock_entry=self.builder.get_object(\"password_unlock_entry", "label": 0}, {"snippet_id": 42497, "code": ".get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get(f'/qa/extractedtext/{ext.pk}/", "label": 0}, {"snippet_id": 55868, "code": "\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item", "label": 0}, {"snippet_id": 24741, "code": " redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args.node_ip_address, redis_password=args.redis_password", "label": 1}, {"snippet_id": 62198, "code": " validate_expires(page): return validate_security_header(page, \"Expires\", \"-1\") def validate_cache_control_set(page): if 'Cache-Control' in page.headers: return True else: return False def validate_cache_must_revalidate", "label": 0}, {"snippet_id": 58799, "code": " return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user.email) ) class Invite(models.Model): instructor=models", "label": 0}, {"snippet_id": 47308, "code": "=zip(ds_list, frm_list) if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if form.is_valid(): priority=form", "label": 0}, {"snippet_id": 83871, "code": "=ArticleClass(title='NewArticle') template_params['new_article']=new_article if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]),", "label": 0}, {"snippet_id": 56315, "code": " given_an_experience_on_db(self, title, description, share_id, pic): orm_person=ORMPerson.objects.create() ORMProfile.objects.create(person=orm_person, username='u') experience=ORMExperience.objects.create(title=title,", "label": 0}, {"snippet_id": 24108, "code": " __future__ import print_function import threading import traceback import redis import ray from ray import ray_constants from ray import cloudpickle as pickle from ray import profiling from ray import", "label": 1}, {"snippet_id": 34293, "code": "=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys('", "label": 0}, {"snippet_id": 10071, "code": " not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context", "label": 0}, {"snippet_id": 27389, "code": " else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs", "label": 0}, {"snippet_id": 68580, "code": ".html' def get_success_url(self): self.object.restart() return '/twitter_hunter' def hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter", "label": 0}, {"snippet_id": 52574, "code": "=team_id).first() emails_lst=request.form.getlist(\"email\") messages_list=request.form.getlist(\"email-message\") sender=session.get(\"displayname\") default_message=\"\"\"{sender} has invited you to join the team ", "label": 0}, {"snippet_id": 11571, "code": "/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the", "label": 0}, {"snippet_id": 56707, "code": ", render, redirect, reverse from django.utils.translation import gettext, gettext_lazy from clickgestion.transactions.filters import ConceptFilter, TransactionFilter from clickgestion.core.utilities import", "label": 0}, {"snippet_id": 33911, "code": "='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname", "label": 0}, {"snippet_id": 79980, "code": " def open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be", "label": 0}, {"snippet_id": 35158, "code": "): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list", "label": 0}, {"snippet_id": 73780, "code": " InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort'] except KeyError: return '-created' def change_positions_sort_method(request, sort_by): if request.POST", "label": 0}, {"snippet_id": 63270, "code": " can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp", "label": 0}, {"snippet_id": 68845, "code": "( apt, conda, hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath", "label": 0}, {"snippet_id": 68205, "code": " from django.db.models import Q from.models import tweet from.forms import SearchForm from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from", "label": 0}, {"snippet_id": 78631, "code": " valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data request :type title: string :param description: A brief", "label": 0}, {"snippet_id": 7614, "code": ".site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change", "label": 0}, {"snippet_id": 3155, "code": " reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string from django.utils.module_loading import import_string from django", "label": 0}, {"snippet_id": 29508, "code": "/signup', methods=['GET', 'POST']) def signup(): form=RegistrationForm() if request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists", "label": 1}, {"snippet_id": 67088, "code": ") context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp') count", "label": 0}, {"snippet_id": 50347, "code": ") def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider) return oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider", "label": 0}, {"snippet_id": 5819, "code": " MemoryCredentials(dict): \"\"\" Non-persistent local credentials store. Use this if you only have one app server, and don't mind making everyone log in again after a restart. \"\"\" pass class OpenIDConnect", "label": 0}, {"snippet_id": 22769, "code": " add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str)", "label": 0}, {"snippet_id": 76549, "code": " the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002", "label": 0}, {"snippet_id": 74022, "code": ": -templates -url names \"\"\" import logging import re import ratelimit.mixins from nacl.exceptions import CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied", "label": 0}, {"snippet_id": 59989, "code": " with same stem %s\" % name) try: with sqlite3.connect( \"file:{}?immutable=1\".format(path), uri=True ) as conn: self.prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str", "label": 0}, {"snippet_id": 60607, "code": ".query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title=None help=None if isinstance(exception", "label": 0}, {"snippet_id": 83429, "code": " self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title=self.instance.title self.old_content", "label": 0}, {"snippet_id": 47952, "code": " as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats", "label": 0}, {"snippet_id": 59664, "code": "} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item: return item[key] return", "label": 0}, {"snippet_id": 80691, "code": " title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE:POS?', numeric_result=True)) if success: print(f\"Setting thin etalon motor position to{target_pos}.\"", "label": 0}, {"snippet_id": 62061, "code": "('UTF-8', 'ISO-8859-1'): return True else: return False def validate_server_software(page): if 'Server' not in page.headers: return True else: server_header=str.lower(page.headers['Server']) if 'nginx'", "label": 0}, {"snippet_id": 64629, "code": "'KeyError', 'len', 'list', 'locals', 'LookupError', 'map', 'max', 'MemoryError', 'memoryview', 'min', '__name__', 'NameError', 'next', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError", "label": 0}, {"snippet_id": 53537, "code": "] location=stack_frame.name if location=='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project: ", "label": 0}, {"snippet_id": 69108, "code": " JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp() systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units', 'jupyterhub.service')) as", "label": 0}, {"snippet_id": 75335, "code": " @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return", "label": 0}, {"snippet_id": 63558, "code": " csrft}): session['_csrft_']=csrft response2=self.app.dispatch_request() self.assertEqual(response2.status, '200 OK') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php'", "label": 0}, {"snippet_id": 84690, "code": " is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if not notification.is_observing(article, request.user", "label": 0}, {"snippet_id": 73834, "code": " 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by", "label": 0}, {"snippet_id": 7201, "code": "'ita_ind', 'group_exam_ind' ) column_sortable_list=[ 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind' ] column_default_sort='exam_type_name' ExamTypeModelView", "label": 0}, {"snippet_id": 29031, "code": " Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the", "label": 0}, {"snippet_id": 53350, "code": ", 1)[0].split(os.sep) ) ) def exec_test(): step.test_locals=dict() step.test_locals.update(module.__dict__) exec(code, step.test_locals) try: set_executing(True) threads.abort_thread() if environ.modes", "label": 0}, {"snippet_id": 46698, "code": " text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType.objects.get(pk=1) code=line['document_type'] if line['filename'", "label": 0}, {"snippet_id": 83224, "code": ") if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs", "label": 0}, {"snippet_id": 5168, "code": ", 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 72905, "code": " sort_by=request.session['position_sort'] except KeyError: sort_by='-created' if request.method=='POST': if request.POST.get(\"sort-created\"): sort_by='-created' elif request.POST.get(\"sort-closed\"): sort_by", "label": 1}, {"snippet_id": 34101, "code": "-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle", "label": 0}, {"snippet_id": 6643, "code": "/login', methods=['GET', 'POST']) def login(): form=LoginForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password", "label": 0}, {"snippet_id": 21428, "code": " of \" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read(", "label": 0}, {"snippet_id": 82706, "code": " check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"", "label": 0}, {"snippet_id": 17927, "code": " successfully changed!</strong>'), 'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed!</strong> Incorrect password.'),", "label": 0}, {"snippet_id": 44849, "code": " * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects(", "label": 1}, {"snippet_id": 11215, "code": ".AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None", "label": 0}, {"snippet_id": 26901, "code": " Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis", "label": 0}, {"snippet_id": 67854, "code": "/org_list.html' context_object_name='orgs' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) count=self.object_list.count() context['count']=count return context def get_queryset", "label": 0}, {"snippet_id": 42405, "code": ").values('extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp", "label": 0}, {"snippet_id": 56934, "code": "=8 queryset=None header=gettext_lazy('Concepts') request=None filter=None filter_data=None is_filtered=False def get(self, request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect", "label": 0}, {"snippet_id": 69210, "code": "-widgets/jupyterlab-manager' ] subprocess.check_output([ os.path.join(USER_ENV_PREFIX, 'bin/jupyter'), 'labextension', 'install' ] +extensions) def ensure_jupyterhub_package(prefix): \"\"\" Install JupyterHub", "label": 0}, {"snippet_id": 49547, "code": " number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app.config['OAUTH_CREDENTIALS']={ 'facebook':{ 'id'", "label": 1}, {"snippet_id": 64803, "code": " if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, points_per_case, 'exception during test case %d' % i) return deductions def main(): parser=argparse.ArgumentParser(description=\"Grade", "label": 1}, {"snippet_id": 83753, "code": "\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"", "label": 0}, {"snippet_id": 61694, "code": " method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the result to the database. In that case, the", "label": 0}, {"snippet_id": 34445, "code": " self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element", "label": 0}, {"snippet_id": 42869, "code": ".first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script group_count=QAGroup.objects.filter(extraction_script=scr).count() self.assertTrue", "label": 0}, {"snippet_id": 12364, "code": "'data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']", "label": 0}, {"snippet_id": 26613, "code": "(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive", "label": 0}, {"snippet_id": 14295, "code": " commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-", "label": 0}, {"snippet_id": 27947, "code": " Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary", "label": 0}, {"snippet_id": 3379, "code": "['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT", "label": 1}, {"snippet_id": 58059, "code": "\"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson\", \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings", "label": 1}, {"snippet_id": 43766, "code": " should be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url", "label": 0}, {"snippet_id": 12832, "code": " authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current", "label": 0}, {"snippet_id": 7994, "code": "\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email,", "label": 0}, {"snippet_id": 54486, "code": "/api.twitter.com/1.1/' search_url='search/tweets.json' verify_url='account/verify_credentials.json' payload={'q': query, 'count': '5', 'lang': 'en', 'result_type': 'mixed'} response=requests.get(base_url ", "label": 0}, {"snippet_id": 14721, "code": ", UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField, DateField, SelectField, \\ SelectMultipleField, FieldList, FormField, StringField", "label": 1}, {"snippet_id": 53777, "code": " instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=[] self.css=[] self", "label": 0}, {"snippet_id": 79880, "code": " string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description", "label": 0}, {"snippet_id": 53061, "code": "'how_soon_form':{'how_soon': HS_3}, 'personal_profile_form':{ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': '+263771819478', 'email': 'test_email@gmail.com'", "label": 0}, {"snippet_id": 32013, "code": ", name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE", "label": 0}, {"snippet_id": 27354, "code": "=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args:", "label": 0}, {"snippet_id": 30183, "code": "''.join(random.choice(string.ascii_uppercase +string.digits) for x in xrange(32)) login_session['state']=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']", "label": 1}, {"snippet_id": 74097, "code": "(EvalDataMixin, _PassphrasePartial): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial", "label": 0}, {"snippet_id": 15018, "code": ".split(',') (ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if", "label": 0}, {"snippet_id": 65613, "code": ".filechooser_creation_dialog.set_current_name(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(", "label": 0}, {"snippet_id": 46662, "code": "=form.save() info=[x.decode('ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info) good_fields=['filename','title','document_type', 'url','organization'] if not table.fieldnames=", "label": 0}, {"snippet_id": 12217, "code": " page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 43321, "code": "=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 77360, "code": "]=\"gedb\" if not server_vars.has_key(\"projection\"): server_vars[\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars", "label": 0}, {"snippet_id": 52226, "code": " view of team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team", "label": 0}, {"snippet_id": 47749, "code": ")).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field", "label": 0}, {"snippet_id": 64656, "code": "'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', ", "label": 0}, {"snippet_id": 66712, "code": " composite_unlock_entry.set_text(\"\") def show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context=unlock_failed_box.get_style_context() context.add_class('NotifyRevealer", "label": 0}, {"snippet_id": 7720, "code": "(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request", "label": 0}, {"snippet_id": 58292, "code": " data={ onboarding.INTRODUCTION_INTRO:{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p", "label": 0}, {"snippet_id": 19977, "code": "} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity", "label": 0}, {"snippet_id": 72766, "code": " return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return", "label": 0}, {"snippet_id": 35598, "code": ") puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags", "label": 0}, {"snippet_id": 71867, "code": " self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message", "label": 0}, {"snippet_id": 8467, "code": " str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response.content def", "label": 0}, {"snippet_id": 79042, "code": " the data base') % datarequest_id) validator.validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed'", "label": 0}, {"snippet_id": 12139, "code": "'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 48181, "code": ".widgets import LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget): def tag_list(self, tags): puc=self.form_instance.instance", "label": 1}, {"snippet_id": 21798, "code": "\"\"\"Return true if all remaining processes are still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: True if any process that", "label": 0}, {"snippet_id": 59411, "code": "\" SQLite cache size in KB(0==use SQLite default) \"\"\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption", "label": 0}, {"snippet_id": 38961, "code": "): return self.name def get_absolute_url(self): return reverse('data_group_edit', kwargs={'pk': self.pk}) def get_name_as_slug(self): return self.name.replace(' ', '_') def get_dg_folder(self): uuid_dir", "label": 0}, {"snippet_id": 30471, "code": " login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook': fbdisconnect() del login_session['facebook_id'] del login_session['username'] del login_session['email'] del", "label": 0}, {"snippet_id": 2410, "code": "<body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\"", "label": 0}, {"snippet_id": 32253, "code": " is None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start) elif self.char.isprintable(): start=self.position value", "label": 0}, {"snippet_id": 9589, "code": "] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information", "label": 0}, {"snippet_id": 78155, "code": "] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers", "label": 1}, {"snippet_id": 63934, "code": "=force_authn) schedule_action(action) current_app.logger.info('Redirecting the user to the IdP for ' +action) return redirect(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST'])", "label": 0}, {"snippet_id": 70637, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 17419, "code": " 'danger') return flask.redirect(flask.url_for('account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with", "label": 0}, {"snippet_id": 50118, "code": "'] filename=session['currentFile'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) with open(filepath) as f: data=f.read() try: parsed=parser.parse(data", "label": 0}, {"snippet_id": 7097, "code": " may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing,", "label": 0}, {"snippet_id": 83030, "code": ":type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): ", "label": 0}, {"snippet_id": 39725, "code": "'qa_extractionscript_index') def fetch_extracted_records(self): return self.rawchem.all() def pull_out_cp(self): if hasattr(self, 'extractedcpcat'): return self.extractedcpcat else: return self def pull_out_hh(self):", "label": 1}, {"snippet_id": 65961, "code": ".destroy() def on_quit_button_clicked(self, button): for db in self.databases_to_save: db.database_manager.save_database() self.quit_dialog.destroy() self.application.quit() def on_application_quit(self", "label": 0}, {"snippet_id": 67867, "code": ".object_list.count() context['count']=count return context def get_queryset(self): query=Org.objects.order_by('id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html", "label": 0}, {"snippet_id": 71565, "code": ".serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self):", "label": 0}, {"snippet_id": 82893, "code": "\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name", "label": 0}, {"snippet_id": 13861, "code": " to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return", "label": 0}, {"snippet_id": 9160, "code": " actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect", "label": 0}, {"snippet_id": 618, "code": ") if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 10059, "code": " settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported", "label": 0}, {"snippet_id": 60646, "code": "(exception, DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={", "label": 0}, {"snippet_id": 18386, "code": " happened properly, re-hashes if the verification failed, \tand then returns hashed password. \t\"\"\" \tdef hash_password(self): \t\tph=PasswordHasher() \t\thashed_password=ph.hash(self.password) \t\ttry: \t\t\tph.verify", "label": 1}, {"snippet_id": 4012, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location", "label": 1}, {"snippet_id": 25794, "code": " self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def", "label": 0}, {"snippet_id": 60887, "code": "\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote", "label": 0}, {"snippet_id": 5716, "code": ", 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing", "label": 0}, {"snippet_id": 17235, "code": " field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean() except ValidationError", "label": 0}, {"snippet_id": 62247, "code": "): return validate_cache_control_header(page, 'private') def validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page): if", "label": 0}, {"snippet_id": 18000, "code": " if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context={ 'activation_link': activation_link, 'user': user } email_msg", "label": 1}, {"snippet_id": 45755, "code": "'data_document' doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)')", "label": 1}, {"snippet_id": 8606, "code": " 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def", "label": 0}, {"snippet_id": 14971, "code": "(ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', ", "label": 0}, {"snippet_id": 64176, "code": ": location}).data else: abort(500) headers_tuple=loresponse[1]['headers'] location=headers_tuple[0][1] current_app.logger.info('Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format", "label": 0}, {"snippet_id": 146, "code": ": continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath", "label": 1}, {"snippet_id": 61225, "code": " the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating a short", "label": 0}, {"snippet_id": 68737, "code": " Validate serverextensions we want are installed \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-serverextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE) extensions=[ 'jupyterlab 0.35.3',", "label": 1}, {"snippet_id": 32184, "code": " None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType.REDIRECT_IN, None, self.position) self.read() return token elif self.char=='|': token=Token", "label": 0}, {"snippet_id": 44738, "code": ".clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except", "label": 0}, {"snippet_id": 48386, "code": "=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None", "label": 0}, {"snippet_id": 8464, "code": ". Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response", "label": 0}, {"snippet_id": 24946, "code": ".info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args", "label": 0}, {"snippet_id": 74694, "code": "=get_person_instance(request)) candidate_form=CandidateForm(post_data) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '') if", "label": 0}, {"snippet_id": 66723, "code": " context.add_class('NotifyRevealer') unlock_failed_revealer=self.builder.get_object(\"unlock_failed_revealer\") unlock_failed_revealer.set_reveal_child(not unlock_failed_revealer.get_reveal_child()) revealer_timer", "label": 0}, {"snippet_id": 58048, "code": ": \"\"\" Test email sending. Ensure an email has proper subject and body. \"\"\" send_email( context_data={ \"milestone\": \"first\", \"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson", "label": 0}, {"snippet_id": 6013, "code": " return None def set_cookie_id_token(self, id_token): \"\"\" Cooperates with @after_request to set a new ID token cookie. \"\"\" g.oidc_id_token=id_token g.oidc_id_token_dirty=True def after_request(self, response", "label": 0}, {"snippet_id": 4945, "code": ": 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit", "label": 0}, {"snippet_id": 76871, "code": " _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the image. image_spec: all details about type, extension etc. \"", "label": 0}, {"snippet_id": 2307, "code": "(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size", "label": 0}, {"snippet_id": 46183, "code": "{missing}') return render(request, template_name, context) good_records=[] ext_parent, ext_child=get_extracted_models(dg.type) for i, row in enumerate(csv.DictReader(info)): d=docs.get(pk=int(row['data_document_id", "label": 0}, {"snippet_id": 75274, "code": ") def candidate_committee_remove(request, candidate_id, cm_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse", "label": 0}, {"snippet_id": 58938, "code": "=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course',", "label": 0}, {"snippet_id": 44648, "code": "(product=p, document=doc) ehp=ExtractedHabitsAndPractices.objects.create(extracted_text=extext, product_surveyed='Test Product Surveyed', prevalence='Continuous') return dotdict({'user':user, 'superuser", "label": 0}, {"snippet_id": 17674, "code": " flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('register.html', form=form) @bp.route('/password-reset/<payload>', methods=[", "label": 0}, {"snippet_id": 51907, "code": "]=True flash(\"Account created!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login", "label": 0}, {"snippet_id": 71265, "code": ".session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self.session.data.get(key): self.session.data[key]=[]", "label": 0}, {"snippet_id": 73259, "code": "=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) password=forms.CharField( label=LoginFormText.password, min_length=8, max_length=42, widget", "label": 0}, {"snippet_id": 40519, "code": " import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get(", "label": 0}, {"snippet_id": 3827, "code": ") paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects", "label": 0}, {"snippet_id": 62961, "code": " data={'SAMLResponse': base64.b64encode(authr), 'RelayState': came_from}): oq_cache=OutstandingQueriesCache(session) oq_cache.set(token, came_from) resp=self.app.dispatch_request() self.assertEquals(resp", "label": 0}, {"snippet_id": 57752, "code": " ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps", "label": 0}, {"snippet_id": 34099, "code": " '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 82036, "code": "'category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message}", "label": 0}, {"snippet_id": 36310, "code": "'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode(", "label": 0}, {"snippet_id": 37369, "code": " ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name', 'data_document', 'qa_checked'] class ProductLinkForm(forms.ModelForm): required_css_class", "label": 0}, {"snippet_id": 34564, "code": ": hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC", "label": 0}, {"snippet_id": 81773, "code": " check_input_url import re class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm() return render(request, 'home.html',{'form': form}) def post(self, request, *args, **kwargs):", "label": 0}, {"snippet_id": 7563, "code": " countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService", "label": 0}, {"snippet_id": 12462, "code": "(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value(", "label": 0}, {"snippet_id": 32952, "code": " import admin from dashboard.models import * from django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms", "label": 0}, {"snippet_id": 80803, "code": ".set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} thin etalon.\")", "label": 0}, {"snippet_id": 51994, "code": " return redirect(\"/dashboard\") @app.route(\"/login/password-recovery\") def password_recovery(): \"\"\"Displays form to send email to user for password recovery\"\"\" return \"OOOOOOOPS\" @app.route(\"/dashboard\")", "label": 0}, {"snippet_id": 37413, "code": " 'size', 'color'] def __init__(self, *args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class", "label": 0}, {"snippet_id": 82651, "code": "\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote", "label": 0}, {"snippet_id": 829, "code": "\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len", "label": 0}, {"snippet_id": 63489, "code": " test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout', method='POST', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn']=eppn", "label": 0}, {"snippet_id": 65382, "code": " screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER) def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\")", "label": 0}, {"snippet_id": 71261, "code": "().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self.session", "label": 0}, {"snippet_id": 21175, "code": "._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]", "label": 0}, {"snippet_id": 44600, "code": "=UnitType.objects.create(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type", "label": 0}, {"snippet_id": 4576, "code": ".test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4", "label": 0}, {"snippet_id": 20815, "code": " name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory", "label": 0}, {"snippet_id": 15561, "code": ".change_input_series_one_model.append_entry() if not form.change_input_series_all_models: for command in get_command('change_input_series_all_models'): form.change_input_series_all_models.append_entry() if", "label": 0}, {"snippet_id": 70680, "code": " development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse", "label": 0}, {"snippet_id": 27622, "code": " objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then", "label": 0}, {"snippet_id": 17648, "code": "'USE_EMAIL_VERIFICATION']: send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user", "label": 0}, {"snippet_id": 12900, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render", "label": 0}, {"snippet_id": 1621, "code": "): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime", "label": 0}, {"snippet_id": 57719, "code": " fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3", "label": 0}, {"snippet_id": 40852, "code": "\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id'", "label": 0}, {"snippet_id": 54478, "code": "=access_token_secret, client_secret=consumer_secret ) base_url='https://api.twitter.com/1.1/' search_url='search/tweets.json' verify_url='account/verify_credentials.json' payload={'q': query, 'count': '5", "label": 0}, {"snippet_id": 14384, "code": " @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params.", "label": 0}, {"snippet_id": 17426, "code": ".login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a mistake", "label": 0}, {"snippet_id": 2176, "code": " _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django", "label": 0}, {"snippet_id": 40700, "code": "/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0],('gen_cat,prod_fam,prod_type,description,' 'PUC_type,num_prods')", "label": 1}, {"snippet_id": 51096, "code": " ''' Deprecated. Use specify_optional_steps or modify_optional_steps instead. ''' kwargs=process_kwargs( \"select_optional_steps\", kwargs, {\"disable_others\":False}) if kwargs[\"disable_others\"]: self._enabled_options", "label": 0}, {"snippet_id": 62887, "code": ", url, eppn, check_fn): \"\"\" common code for the tests that need to access the assertion consumer service and then check the side effects of this access. :param url: the url of the desired authentication", "label": 1}, {"snippet_id": 83661, "code": "(['/', app, url]) class ArticleEditLock(object): \"\"\"A soft lock to edting an article.\"\"\" def __init__(self, title, request, message_template=None): self.title=title self.user_ip=get_real_ip(request) self", "label": 0}, {"snippet_id": 65083, "code": " case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if", "label": 0}, {"snippet_id": 15966, "code": " user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email or password') return False self.user=user return True @app.route('/register', methods=['GET', 'POST", "label": 0}, {"snippet_id": 31819, "code": " test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request", "label": 1}, {"snippet_id": 5192, "code": ".client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths:", "label": 0}, {"snippet_id": 70521, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 13444, "code": " the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\"", "label": 0}, {"snippet_id": 19561, "code": "\"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise", "label": 1}, {"snippet_id": 67624, "code": " pk=self.kwargs['pk'] event_obj=Event.objects.get(pk=pk) objects_obj=Object.objects.filter(event=pk) context=super().get_context_data(**kwargs) context['event']=event_obj context['objects']=objects_obj", "label": 0}, {"snippet_id": 14155, "code": "()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest):", "label": 0}, {"snippet_id": 48174, "code": " ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget", "label": 1}, {"snippet_id": 42551, "code": ".loader import fixtures_standard class FacetedSearchTest(TestCase): fixtures=fixtures_standard def setUp(self): self.c=Client() def test_faceted_search_excludes_chemicals(self): response=self.c.get('/find/?q", "label": 0}, {"snippet_id": 17265, "code": "'tournament': t, 'round': round_num, 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, 'rounds/game_score.html', {'tournament': t,", "label": 0}, {"snippet_id": 59525, "code": " self.sqlite_functions=[] self.sqlite_extensions=sqlite_extensions or[] self.template_dir=template_dir self.plugins_dir=plugins_dir self.static_mounts=static_mounts or[] self._config=dict(DEFAULT_CONFIG, *", "label": 0}, {"snippet_id": 58240, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_THREAD, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.INVITE_SOMEBODY, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.PREVIEW_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 1}, {"snippet_id": 69484, "code": ".sleep(1) continue raise except URLError as e: if isinstance(e.reason, ConnectionRefusedError): time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format", "label": 0}, {"snippet_id": 74714, "code": " banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id", "label": 0}, {"snippet_id": 42653, "code": "-wrapper\">') def test_product_facet_returns(self): response=self.c.get('/find/?q=insecticide') brands=response.content.count(b'name=\"brand_name\"') self.assertTrue(brands>10,('There should be ~143 product", "label": 0}, {"snippet_id": 61465, "code": " ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info())", "label": 0}, {"snippet_id": 78318, "code": " ckan.lib.mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging", "label": 0}, {"snippet_id": 72944, "code": " Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() request.session['position_sort']=sort_by return render(request, ", "label": 0}, {"snippet_id": 55270, "code": " \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags", "label": 0}, {"snippet_id": 10342, "code": ".name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins'", "label": 0}, {"snippet_id": 33504, "code": "=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 2, ethylparaben_stats['dds_n'], 'There should be 2 datadocuments associated with ethylaraben'", "label": 0}, {"snippet_id": 51020, "code": "=ALL_STEPS in steps self._disable_all_options=DEFAULT_STEPS not in steps self._disabled_options=set(s[1:] for s in steps if s.startswith(\"-\")) self._enabled_options=set(s[1:] for s in steps if s.startswith(", "label": 0}, {"snippet_id": 13379, "code": " from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile", "label": 0}, {"snippet_id": 44505, "code": " qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing...', data_source=ds, download_script", "label": 0}, {"snippet_id": 6924, "code": "=request.args.get('next')) flash('An email with instructions for resetting your password has been ' 'sent.') return redirect(url_for('auth.login')) return render_template('auth/reset_password.html', form=form", "label": 0}, {"snippet_id": 27106, "code": " by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether to start the web UI", "label": 0}, {"snippet_id": 3226, "code": "=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request)", "label": 0}, {"snippet_id": 26909, "code": " listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus", "label": 0}, {"snippet_id": 53789, "code": ", step=None): self.step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache() self.title=self.definition.get('title') self.subtitle=self.definition.get('subtitle') self.summary", "label": 0}, {"snippet_id": 5314, "code": "( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path", "label": 0}, {"snippet_id": 47879, "code": "(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request", "label": 0}, {"snippet_id": 39992, "code": "=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models", "label": 0}, {"snippet_id": 5812, "code": "'MemoryCredentials'] logger=logging.getLogger(__name__) class MemoryCredentials(dict): \"\"\" Non-persistent local credentials store. Use this if you only have one app server, and don't mind making everyone", "label": 0}, {"snippet_id": 14240, "code": " external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns:", "label": 0}, {"snippet_id": 75832, "code": ".getLogger(__name__) HTTP_STATUS_CHOICES=( (301, _('301 -Permanent Redirect')), (302, _('302 -Temporary Redirect')), ) STATUS_CHOICES=( (True, _('Active')), (False, _('Inactive')), ) TYPE_CHOICES=( ('prefix', _", "label": 0}, {"snippet_id": 42667, "code": " * from django.test import TestCase, override_settings, RequestFactory from dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical, QAGroup from django.db.models import Count @override_settings", "label": 0}, {"snippet_id": 2616, "code": "): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def", "label": 0}, {"snippet_id": 4124, "code": "' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user", "label": 0}, {"snippet_id": 59485, "code": " cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None, template_dir=None, plugins_dir=None, static_mounts=None, memory=False, config=None, version_note=None, ): self.files", "label": 0}, {"snippet_id": 30494, "code": "['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')) else: flash(\"You were not logged in\") return", "label": 0}, {"snippet_id": 30660, "code": " render_template('publicgrudgets.html', grudgets=grudgets) else: return render_template('grudgets.html', grudgets=grudgets) @app.route('/grudget/new/', methods=['GET', 'POST']) def newGrudget(): if 'username' not in", "label": 0}, {"snippet_id": 22815, "code": "=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was", "label": 0}, {"snippet_id": 22220, "code": "=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT,", "label": 0}, {"snippet_id": 33899, "code": " TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome()", "label": 0}, {"snippet_id": 25374, "code": " a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run", "label": 0}, {"snippet_id": 20062, "code": "(driver_id) driver_task_id_bins=set() for task_id_hex, task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !", "label": 0}, {"snippet_id": 77432, "code": "\"Layers processing done\") return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self,", "label": 0}, {"snippet_id": 25745, "code": "=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client", "label": 0}, {"snippet_id": 20821, "code": "._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if the directory does not exist. 2. If", "label": 0}, {"snippet_id": 58075, "code": " from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email/milestone_ortc_notify_text\" ) self.assertEqual(len(mail", "label": 0}, {"snippet_id": 14281, "code": "=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key", "label": 0}, {"snippet_id": 9140, "code": " @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load", "label": 0}, {"snippet_id": 75456, "code": ".format_checklist) context={'candidate': candidate, 'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate'", "label": 0}, {"snippet_id": 1590, "code": " %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n'", "label": 0}, {"snippet_id": 79910, "code": ") tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base')", "label": 0}, {"snippet_id": 19161, "code": "(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0,", "label": 1}, {"snippet_id": 57949, "code": ": \"\", \"description\": \"\", \"title\": \"\" } }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title</p>\", \"description\": \"Here is some description\", \"title\": \"Title\" } }, \"invite_somebody\":{ \"done", "label": 0}, {"snippet_id": 4143, "code": ".create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=(", "label": 0}, {"snippet_id": 45010, "code": "{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2=self.client.get(f'/datagroup/{self.objects.dg.pk", "label": 0}, {"snippet_id": 36926, "code": " .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if", "label": 0}, {"snippet_id": 79211, "code": ".plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log", "label": 0}, {"snippet_id": 71820, "code": ").count() self.assertEqual(user_count, 1) def test_add_message(self): req=EngineAuthRequest.blank('/auth/google') req._load_session() msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message", "label": 0}, {"snippet_id": 70621, "code": " something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're", "label": 0}, {"snippet_id": 42810, "code": " f\"'/qa/extractionscript/15/\\'> Continue QA\".encode(), response.content) def test_qa_script_without_ext_text(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript", "label": 0}, {"snippet_id": 17387, "code": ".data.strip() password=form.password.data user=models.User.by_username(username) if not user: user=models.User.by_email(username) if not user or password !=user.password_hash: flask.flash(flask.Markup(", "label": 0}, {"snippet_id": 6102, "code": "\"\" if request.endpoint in frozenset(['oidc_callback', 'oidc_error']): return None id_token=self.get_cookie_id_token() if id_token is None: return self.redirect_to_auth_server(request.url) if self.time(", "label": 0}, {"snippet_id": 78881, "code": ".title==data_dict['title'] validator.validate_datarequest(context, data_dict) organisation_updated=data_req.organization_id !=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id", "label": 0}, {"snippet_id": 39714, "code": " group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index') else: return reverse('qa_extractionscript_index') def fetch_extracted_records(self): return self.rawchem.all() def pull_out_cp", "label": 1}, {"snippet_id": 45443, "code": " from django.shortcuts import render, redirect, get_object_or_404 from djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings import EXTRA from dashboard.models import *", "label": 0}, {"snippet_id": 31579, "code": " project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/clone/?$', project_clone, name='project_clone'), url(r'^project/(?P<proj_id>[0-9]+)/scenario/(?P<scenario_id>[0-9]+)/$', project, name='project')", "label": 0}, {"snippet_id": 11789, "code": "\"\"\" Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages", "label": 0}, {"snippet_id": 32539, "code": " return None def expect(self, ttype): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node", "label": 0}, {"snippet_id": 4499, "code": "/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 72929, "code": " elif request.POST.get(\"sort-position\"): sort_by='position_title' elif request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete", "label": 1}, {"snippet_id": 3325, "code": ".OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)", "label": 0}, {"snippet_id": 84853, "code": " changed to use '[[title]]' for searching. \"\"\" this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title", "label": 0}, {"snippet_id": 19854, "code": ".issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning( \"Monitor: \" ", "label": 0}, {"snippet_id": 73384, "code": " LoginFormText from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm, ImportApplicationsText from.models import EmailAuthenticateToken, Position from screendoor", "label": 1}, {"snippet_id": 68886, "code": "/gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R+RJfRpb1qvljURr54y35IZgs fMG22Np+TmM2RLgdFCZa18h0+RbH9i0b+ZrB9XPZmLb/h9ou7SowGqQ3wwOtT3Vy", "label": 0}, {"snippet_id": 42746, "code": "=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript/{pk}/') et=ExtractedText", "label": 0}, {"snippet_id": 77468, "code": " to fetch tiles - everything a code client needs to know about and use, to get tiles from a server. Args: server_url: URL of the server on which command to be executed. target_path: Target published point", "label": 0}, {"snippet_id": 10896, "code": ")) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 52342, "code": " board_id=request.form.get(\"boardId\") session[\"current_board\"]=board_id print \"Session updated with board{}.\".format(board_id) return \"HTTP-status-code: 200\" @app.route(\"/claim-project\", methods=[\"POST\"", "label": 0}, {"snippet_id": 73372, "code": " import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from.forms", "label": 0}, {"snippet_id": 24517, "code": "] def check_log_files_and_push_updates(self): \"\"\"Get any changes to the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[", "label": 1}, {"snippet_id": 36341, "code": " link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self", "label": 0}, {"snippet_id": 33511, "code": " ethylparaben_stats=e self.assertEqual( 2, ethylparaben_stats['dds_n'], 'There should be 2 datadocuments associated with ethylaraben') self.client.login(username='Karyn', password='specialP@55word') dds", "label": 0}, {"snippet_id": 56561, "code": "') class ScenarioMaker: def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self, dynamic_link): settings.DYNAMIC_LINK=dynamic_link", "label": 1}, {"snippet_id": 76663, "code": " 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles <=abs_tile_row: logger.debug", "label": 0}, {"snippet_id": 16001, "code": ".validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home')) return render_template('register.html', form=register_form) @app.route('/login', methods=['GET', 'POST']", "label": 0}, {"snippet_id": 55797, "code": "=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self", "label": 0}, {"snippet_id": 7393, "code": " logging from flask import g, request from flask_restplus import Resource from sqlalchemy import exc, or_ from app.models.bookings import Exam from app.models.theq import CSR from app.schemas.bookings import", "label": 1}, {"snippet_id": 17676, "code": ".permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('register.html', form=form) @bp.route('/password-reset/<payload>', methods=['GET', 'POST']", "label": 0}, {"snippet_id": 43964, "code": "=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input", "label": 0}, {"snippet_id": 81367, "code": " ' +registration.partner_id.sudo().name counter +=1 return attendee_list def start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled', '=', True", "label": 0}, {"snippet_id": 21004, "code": " stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 1404, "code": " newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 40513, "code": " import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar", "label": 0}, {"snippet_id": 59458, "code": " to always use https:// protocol \"\"\".strip()), ) DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette: def __init__", "label": 0}, {"snippet_id": 33739, "code": " response=self.client.get('/dl_raw_chems/') rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc.raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content", "label": 1}, {"snippet_id": 81603, "code": "' _inherit=['res.partner'] fit_subscriptions=fields.One2many(comodel_name='fit.subscription', inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer", "label": 0}, {"snippet_id": 62737, "code": "(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with any subsequent request that needs to be athenticated. :param eppn: the eppn of the user to", "label": 0}, {"snippet_id": 34429, "code": "-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id", "label": 0}, {"snippet_id": 73286, "code": "'password') user=authenticate(username=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed", "label": 0}, {"snippet_id": 37472, "code": ") for f in self.fields: self.fields[f].disabled=True class BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField( queryset=PUC.objects.all(), label='Category', widget=autocomplete.ModelSelect2( url=", "label": 0}, {"snippet_id": 80364, "code": "(self.set_wavelength_dialog) self.set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog) self.set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog", "label": 0}, {"snippet_id": 10196, "code": " def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year", "label": 0}, {"snippet_id": 76134, "code": "=version_slug, ) return to def redirect_page(self, path, language=None, version_slug=None): if path==self.from_url: log.debug('Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/", "label": 0}, {"snippet_id": 11831, "code": " HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django", "label": 0}, {"snippet_id": 14054, "code": ", \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url", "label": 0}, {"snippet_id": 71887, "code": ".add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages('_mykey", "label": 0}, {"snippet_id": 64536, "code": " return redirect(location_on_fail) @authn_views.route('/saml2-metadata') def metadata(): \"\"\" Returns an XML with the SAML 2.0 metadata for this SP as configured in the saml2_settings.py file. \"\"\" metadata", "label": 0}, {"snippet_id": 70196, "code": "-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None:", "label": 0}, {"snippet_id": 45516, "code": " extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) extracted_text_form=ParentForm(instance=extracted_text) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms:", "label": 1}, {"snippet_id": 43541, "code": ".get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s", "label": 0}, {"snippet_id": 46453, "code": ",'ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form'].collapsed", "label": 0}, {"snippet_id": 73061, "code": " class CreatePositionForm(forms.ModelForm): text=CreatePositionFormText.upload_new_position description=CreatePositionFormText.please_select_either_filetype pdf_name=CreatePositionFormText.pdf url_name", "label": 0}, {"snippet_id": 2980, "code": ") if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self", "label": 0}, {"snippet_id": 20196, "code": " channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData", "label": 0}, {"snippet_id": 55912, "code": " import settings from experiences.factories import create_get_experience_interactor from profiles.factories import create_get_profile_interactor EMAIL_CONFIRMATION_PATH='/people/me/email-confirmation' LOGIN_PATH", "label": 0}, {"snippet_id": 80464, "code": "() def clean_up(self): self.status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self", "label": 0}, {"snippet_id": 83640, "code": ", group=None, args=None, kw=None): if group is None: return reverse(urlname, args=args) else: app=group._meta.app_label urlconf='.'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return '", "label": 0}, {"snippet_id": 25343, "code": ".state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address", "label": 0}, {"snippet_id": 45058, "code": " import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1)", "label": 0}, {"snippet_id": 80341, "code": ".lock_piezo_etalon_action, self.lock_fast_piezo_action] def setup_action_listeners(self): self.clear_log_area_action.triggered.connect(self.clear_log_area) self.open_idle_action.triggered.connect(self.open_idle", "label": 0}, {"snippet_id": 58142, "code": " onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1,", "label": 1}, {"snippet_id": 32482, "code": "(TokenType.REDIRECT_APPEND): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(1,(filename, os.O_CREAT | os.O_WRONLY | os.O_APPEND)) elif self.accept(TokenType.REDIRECT_IN): filename=self", "label": 0}, {"snippet_id": 31480, "code": "'DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'MinimumLengthValidator", "label": 0}, {"snippet_id": 4484, "code": "\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', ", "label": 0}, {"snippet_id": 18756, "code": " doesn't then it redirects the user to /, \telse it renders /postlogin. \t\"\"\" \tdef get(self): \t\tcookie_status=self.get_secure_cookie(\"user\") \t\tif(cookie_status==None): \t\t\tself.render('index.html') \t\t\treturn \t", "label": 1}, {"snippet_id": 41083, "code": "'/datadocument/167497/') response=self.client.get(response.url) self.assertContains(response, 'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self", "label": 0}, {"snippet_id": 74238, "code": ".POST[\"key\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else", "label": 0}, {"snippet_id": 29746, "code": "(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get(1)] added_tags", "label": 0}, {"snippet_id": 81134, "code": "(self, event, partner, subscription_update_counter): event_cat=str(event.event_type_id.name).lower() ai_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'ai_montly'), ", "label": 0}, {"snippet_id": 47124, "code": ".doc_date='please add...' ExtractedTextForm, HPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST or None, instance=extext", "label": 0}, {"snippet_id": 79841, "code": "(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data", "label": 0}, {"snippet_id": 2978, "code": ".login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs", "label": 0}, {"snippet_id": 5511, "code": "(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self)", "label": 0}, {"snippet_id": 46615, "code": " pk=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +", "label": 0}, {"snippet_id": 30013, "code": "=Column(String(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return", "label": 1}, {"snippet_id": 22518, "code": ".. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you", "label": 0}, {"snippet_id": 55397, "code": ".path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs", "label": 0}, {"snippet_id": 69348, "code": "'Downloading & setting up user environment...') with conda.download_miniconda_installer(miniconda_version, miniconda_installer_md5) as installer_path: conda.install_miniconda(installer_path, USER_ENV_PREFIX", "label": 0}, {"snippet_id": 24588, "code": ".log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif", "label": 1}, {"snippet_id": 72099, "code": ", transports, fsal, clients, reload_daemons=True): if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot create this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format", "label": 0}, {"snippet_id": 61404, "code": " will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self):", "label": 0}, {"snippet_id": 75358, "code": ".submit() return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_home", "label": 0}, {"snippet_id": 75217, "code": "'POST': person_form=CommitteeMemberPersonForm(request.POST) committee_member_form=CommitteeMemberForm(request.POST) if person_form.is_valid() and committee_member_form.is_valid(): person=person_form.save(", "label": 0}, {"snippet_id": 28557, "code": " default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor", "label": 0}, {"snippet_id": 81688, "code": " for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for event id: %s, name: %s', event.event_type_id.name, event.name) can_subscribe", "label": 0}, {"snippet_id": 18413, "code": " hashed_password \t\"\"\" post(): \tSets class variables, does rudimentary checks on username and email submitted using regex \tand renders signup.html with the error if the regex fails to match the submitted value. ", "label": 1}, {"snippet_id": 55278, "code": "): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self", "label": 0}, {"snippet_id": 38018, "code": " ExtractedCPCatEditForm return(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm", "label": 0}, {"snippet_id": 10801, "code": " password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password", "label": 0}, {"snippet_id": 7624, "code": " openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from", "label": 0}, {"snippet_id": 23936, "code": " if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean", "label": 0}, {"snippet_id": 64548, "code": " metadata for this SP as configured in the saml2_settings.py file. \"\"\" metadata=entity_descriptor(current_app.saml2_config) response=make_response(metadata.to_string(), 200) response.headers['Content-Type'", "label": 0}, {"snippet_id": 8397, "code": "(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login", "label": 0}, {"snippet_id": 9125, "code": " import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie", "label": 0}, {"snippet_id": 69595, "code": "(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda.ensure_pip_packages(HUB_ENV_PREFIX, plugins) pm=pluggy.PluginManager('tljh') pm.add_hookspecs(hooks) pm.load_setuptools_entrypoints", "label": 0}, {"snippet_id": 22716, "code": " For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background", "label": 1}, {"snippet_id": 6505, "code": "() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd') !=self.app.config[", "label": 0}, {"snippet_id": 60082, "code": "(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection(conn) sqlite_version=conn.execute(\"select sqlite_version()\").fetchone()[0] sqlite_extensions={} for extension, testsql,", "label": 0}, {"snippet_id": 82548, "code": " or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for", "label": 0}, {"snippet_id": 63, "code": "\"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to", "label": 0}, {"snippet_id": 82328, "code": " CustomShortURLCreateView, ShortManyURLSView, URLDetailView, URLUpdateView, URLDeleteView, CategoryCreateView, CategoryListView, CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView", "label": 0}, {"snippet_id": 18190, "code": " import re import motor.motor_tornado from argon2 import PasswordHasher from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado", "label": 1}, {"snippet_id": 51453, "code": "''' fail(message, exitcode=1) Abort the build with an error message. ''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.", "label": 0}, {"snippet_id": 82700, "code": "=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated", "label": 0}, {"snippet_id": 6475, "code": "['destination'] code=request.args['code'] except(KeyError, ValueError): logger.debug(\"Can't retrieve CSRF token, state, or code\", exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token", "label": 0}, {"snippet_id": 40481, "code": " on_delete=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models", "label": 0}, {"snippet_id": 27951, "code": "\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead", "label": 0}, {"snippet_id": 51857, "code": ".route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user form entry, register user if valid.\"\"\" email=request.form.get('email') pw=request.form.get('pw') displayname=request.form", "label": 0}, {"snippet_id": 42005, "code": " Products and link if needed''' doc=DataDocument.objects.create(data_group=self.objects.dg) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not", "label": 0}, {"snippet_id": 81929, "code": " get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) def post(self, request", "label": 0}, {"snippet_id": 69694, "code": ", pip_packages) def ensure_config_yaml(plugin_manager): \"\"\" Ensure we have a config.yaml present \"\"\" for path in[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config.d')]: os.makedirs(path, mode=0o700", "label": 0}, {"snippet_id": 1693, "code": " re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except", "label": 0}, {"snippet_id": 77245, "code": " if target_url[-1] !=\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try:", "label": 1}, {"snippet_id": 81847, "code": "'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render(request, 'success-url-view", "label": 0}, {"snippet_id": 56652, "code": " profile_redirect, \\ root_redirect, aasa_redirect urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people", "label": 1}, {"snippet_id": 16187, "code": "(t, round_num) context={'tournament': t, 'round': r} return render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id,", "label": 0}, {"snippet_id": 83022, "code": " hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host ", "label": 0}, {"snippet_id": 48107, "code": ", extracted_habits_and_practices=hnp).exists(): ExtractedHabitsAndPracticesToPUC.objects.create( PUC=puc, extracted_habits_and_practices=hnp ) form=HabitsPUCForm() linked=ExtractedHabitsAndPracticesToPUC", "label": 0}, {"snippet_id": 14158, "code": "'errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to", "label": 0}, {"snippet_id": 61760, "code": " instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that are in the database and always commits the results back to the database. \"\"\" securedrops=securedrops.with_domain_annotation", "label": 0}, {"snippet_id": 55325, "code": "(self,mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): ", "label": 0}, {"snippet_id": 55718, "code": "(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder(t) \t\telif what is File: \t\t\tf=open(t,\"w\") \t\t\tf.close() \t\t\treturn File(t) \t\telse: ", "label": 0}, {"snippet_id": 58378, "code": "\"title\": \"preview_courselet\" } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro", "label": 1}, {"snippet_id": 7851, "code": " settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 3805, "code": ".save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password", "label": 0}, {"snippet_id": 3777, "code": " from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client", "label": 0}, {"snippet_id": 34034, "code": " ExtractedChemical without a unit type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation:", "label": 0}, {"snippet_id": 62940, "code": ".test_client() as c: resp=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr=auth_response(token, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers=", "label": 0}, {"snippet_id": 31874, "code": ")==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create(", "label": 1}, {"snippet_id": 47747, "code": "(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n", "label": 0}, {"snippet_id": 10470, "code": " import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx", "label": 0}, {"snippet_id": 53054, "code": "'}, 'max_budget_form':{'budget': 1200.59}, 'current_rent_form':{'current_rent': 321.49}, 'how_soon_form':{'how_soon': HS_3}, 'personal_profile_form':{ 'first_name': 'TestFirstName', 'last_name': 'TestLastName", "label": 0}, {"snippet_id": 50353, "code": ") return oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication", "label": 0}, {"snippet_id": 12458, "code": "=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer", "label": 0}, {"snippet_id": 41517, "code": "={'pk': doc.pk}) ) num_forms=response.context['detail_formset'].total_form_count() children=model.objects.filter( extracted_text=doc.extractedtext ).count() if doc.detail_page_editable: error=(f'{model", "label": 0}, {"snippet_id": 77555, "code": ".and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras to datasets to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name", "label": 0}, {"snippet_id": 9549, "code": "'hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to", "label": 0}, {"snippet_id": 545, "code": "/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part)", "label": 1}, {"snippet_id": 53564, "code": " \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict", "label": 0}, {"snippet_id": 44590, "code": " prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description", "label": 0}, {"snippet_id": 19434, "code": "=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"", "label": 1}, {"snippet_id": 75645, "code": ".FAST_LOOKUP_BASE_URL, urllib.parse.quote(term), index) url='%s&queryReturn=%s&suggest=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results", "label": 0}, {"snippet_id": 42972, "code": " self.assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains", "label": 0}, {"snippet_id": 15026, "code": "'result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source[1],", "label": 0}, {"snippet_id": 51941, "code": "\"Validate login entry.\"\"\" num_attempts=h.get_login_attempts() remaining=h.calc_attempts_remaining(num_attempts) email=request.form.get('email') pw=request.form.get('pw') user_record=q.get_user_by_email", "label": 0}, {"snippet_id": 64500, "code": ".logger.error('No user with eduPersonPrincipalName={} found'.format(eppn)) except current_app.central_userdb.exceptions.MultipleUsersReturned: current_app.logger.error(\"There are more than one user with", "label": 0}, {"snippet_id": 40633, "code": " response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self", "label": 0}, {"snippet_id": 72480, "code": " digits from django.http import HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth", "label": 1}, {"snippet_id": 45330, "code": ") or product_stats[i]['puc_assigned_month'] !=chart_month: product_stats.insert(i,{'product_count': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view", "label": 0}, {"snippet_id": 4580, "code": " '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains", "label": 0}, {"snippet_id": 79354, "code": " qualified=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package", "label": 0}, {"snippet_id": 27553, "code": " be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be passed as the \"extra_data\"", "label": 0}, {"snippet_id": 20037, "code": " all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix", "label": 0}, {"snippet_id": 24495, "code": ":{}\".format(self.node_ip_address), num_current_log_files, -1) for log_filename in new_log_filenames: logger.info(\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files", "label": 1}, {"snippet_id": 25455, "code": ". \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler: self.autoscaler.update", "label": 0}, {"snippet_id": 32340, "code": " stream of tokens. ''' def __init__(self, tokens): self.tokens=iter(tokens) self.token=None self.last=None self.next() def parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract", "label": 0}, {"snippet_id": 35829, "code": "': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance", "label": 0}, {"snippet_id": 22121, "code": " it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start", "label": 0}, {"snippet_id": 20094, "code": ").binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients", "label": 0}, {"snippet_id": 14684, "code": " \"\"\" serial_redirection cli main function \"\"\" board_cfg=board_config.BoardConfig() node=_get_node(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect.start()", "label": 1}, {"snippet_id": 79285, "code": "') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time", "label": 0}, {"snippet_id": 78572, "code": " _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'] if user.get('capacity')=='admin']) return users @tk.chained_action def", "label": 0}, {"snippet_id": 75530, "code": "={'candidate_id': candidate_id})) @login_required def view_file(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) if candidate.person.netid !=request.user.username: if not", "label": 0}, {"snippet_id": 83890, "code": "=RequestContext(request)) return HttpResponseNotAllowed(['GET']) def view_article(request, title, revision=None, ArticleClass=Article, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES,", "label": 0}, {"snippet_id": 48812, "code": ".get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request", "label": 0}, {"snippet_id": 4910, "code": ".test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4", "label": 0}, {"snippet_id": 37338, "code": ".fields['priority'].widget.attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels", "label": 1}, {"snippet_id": 59033, "code": "'Invitation successfully sent.', 'invite':{ 'status': self.status, } } except IntegrityError: return{ 'success': False, 'message': 'You already have sent invite to user with{} email'.format(request.POST['email'", "label": 0}, {"snippet_id": 63611, "code": "', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self", "label": 1}, {"snippet_id": 81512, "code": ".strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(months=+1) new_end_date=end_date +relativedelta(months=+1) if self._event_does_not_exist(old_repeating_event, new_end_date)", "label": 1}, {"snippet_id": 24911, "code": " if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0", "label": 0}, {"snippet_id": 38193, "code": ") def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two", "label": 0}, {"snippet_id": 58964, "code": " force_update=False, using=None, update_fields=None): user=Invite.search_user_by_email(self.email) self.user=user return super(Invite, self).save(force_insert, force_update, using, update_fields) def send_mail", "label": 0}, {"snippet_id": 76447, "code": ") * _TILE_PIXEL_SIZE) ) im_tile=tiles_array.ImageAt(column, row) if set_pixel_to_bgcolor: im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug", "label": 0}, {"snippet_id": 43809, "code": "']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), ", "label": 0}, {"snippet_id": 81453, "code": " new_start_date, new_end_date) def _handle_weekly_event_repetition(self, old_repeating_event): _logger.info('Handling weekly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '", "label": 0}, {"snippet_id": 28371, "code": " here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state", "label": 0}, {"snippet_id": 16749, "code": " def seed_games(request, tournament_id, round_num): \"\"\"Seed players to the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) if request", "label": 0}, {"snippet_id": 66101, "code": " logging_manager=LoggingManager(True) overlay=NotImplemented def __init__(self, window, widget, filepath): self.window=window self.parent_widget=widget self.database_filepath=filepath self.unlock_database", "label": 0}, {"snippet_id": 82476, "code": " psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component", "label": 0}, {"snippet_id": 79146, "code": "(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base')", "label": 0}, {"snippet_id": 81622, "code": "(self): counter=0 for subscription in self.fit_subscriptions: counter +=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name", "label": 0}, {"snippet_id": 6307, "code": " address has been verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token", "label": 0}, {"snippet_id": 37168, "code": " label=\"Weight Fraction Type\", initial=\"1\") extract_file=forms.FileField(label=\"Extracted Text CSV File\") def __init__(self, *args, **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop(", "label": 0}, {"snippet_id": 77273, "code": " except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close() logger.debug(\"Server definitions data read, start regex\") logger.debug(\"JSON vars", "label": 1}, {"snippet_id": 59915, "code": ".format(extension)) if self.config(\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table", "label": 0}, {"snippet_id": 41170, "code": " new_product.id) def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when the document doesn't yet have an extracted record for data group types 'CP' and 'HH'", "label": 0}, {"snippet_id": 45613, "code": "'referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid() and document_type_form.has_changed()", "label": 1}, {"snippet_id": 31179, "code": "://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get(", "label": 0}, {"snippet_id": 13466, "code": " request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse", "label": 0}, {"snippet_id": 12689, "code": "(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login", "label": 0}, {"snippet_id": 43879, "code": "-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name of the new object should match what was entered\")", "label": 0}, {"snippet_id": 66329, "code": ".set_invisible_char(\"\u25cf\") widget.set_visibility(False) else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window.set_headerbar() self.window.close_tab(self.parent_widget", "label": 0}, {"snippet_id": 56248, "code": "/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_an_experience_on_db", "label": 0}, {"snippet_id": 44180, "code": " btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f", "label": 0}, {"snippet_id": 3961, "code": "\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 74263, "code": " return False @property def access_form_valid(self): form=self._get_access_form() if form.is_valid(): form.save() return True else: return False def _passphrase_next_url(self, request): next_url=None if ", "label": 0}, {"snippet_id": 73151, "code": " if not(file_type=='.pdf'): msg=forms.ValidationError( ErrorMessages.incorrect_mime_type) self.add_error('pdf', msg) if url: msg=forms.ValidationError( ErrorMessages.url_upload_not_supported_yet) self.add_error", "label": 1}, {"snippet_id": 83409, "code": "=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data", "label": 0}, {"snippet_id": 38269, "code": " ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used to filter which PUCs a Product", "label": 0}, {"snippet_id": 27059, "code": " files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients", "label": 0}, {"snippet_id": 29940, "code": "'benwaonline.db') DEBUG=True SECRET_KEY='not-so-secret' class TestConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite://' TESTING=True TWITTER_CONSUMER_KEY='consume' TWITTER_CONSUMER_SECRET='secret' WTF_CSRF_ENABLED", "label": 0}, {"snippet_id": 80630, "code": " numeric_result=True)) if success: print(f\"Setting BiFi approximate wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog", "label": 0}, {"snippet_id": 4008, "code": ".client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http:/", "label": 1}, {"snippet_id": 13730, "code": " usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user", "label": 0}, {"snippet_id": 48376, "code": " link_product_list(request, pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator", "label": 0}, {"snippet_id": 59586, "code": " def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self, key=None, database=None,", "label": 0}, {"snippet_id": 49826, "code": "['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(userpath, exist_ok=True) file", "label": 0}, {"snippet_id": 67430, "code": "(self, **kwargs): context=super().get_context_data(**kwargs) context['count']=self.object_list.count() context['alltag']=Tag.objects.order_by('id') taglist=self.request.GET.getlist('tag') context['tags']", "label": 0}, {"snippet_id": 83106, "code": ":type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues", "label": 0}, {"snippet_id": 78803, "code": ":type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of", "label": 0}, {"snippet_id": 29976, "code": " import create_engine Base=declarative_base() class User(Base): __tablename__='user' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) email=Column(String(250), nullable=False)", "label": 1}, {"snippet_id": 54898, "code": "\t\t\tself.number=number \t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id", "label": 0}, {"snippet_id": 84882, "code": ": old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b)\", title) if m: search_title=re.compile(r\"%s\" % title) else: search_title=re.compile(r\"\\/%s\\)\" % title) found_old_links=[] found_links", "label": 0}, {"snippet_id": 16485, "code": "'doubles': doubles} form=GetSevenPlayersForm(request.POST or None, the_round=r) if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1): rp.game_count=1 rp.save() for i in range(sitters):", "label": 0}, {"snippet_id": 48358, "code": ") products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource': ds, 'products': products}) @login_required", "label": 0}, {"snippet_id": 4149, "code": "\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/'", "label": 0}, {"snippet_id": 42482, "code": ".extraction_script.pk response=self.client.get(f'/qa/extractionscript/{pk}/') self.assertEqual(response.status_code,200) qa_group=QAGroup.objects.get( extraction_script=self.objects.extext.extraction_script) ext", "label": 0}, {"snippet_id": 36531, "code": "(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods,", "label": 0}, {"snippet_id": 73134, "code": " ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1][ magic.from_buffer(self.cleaned_data['pdf'].read(), mime=True) ", "label": 0}, {"snippet_id": 59535, "code": " or[] self._config=dict(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self", "label": 0}, {"snippet_id": 41113, "code": " :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product", "label": 0}, {"snippet_id": 78157, "code": " default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"", "label": 1}, {"snippet_id": 73803, "code": "' elif request.POST.get(\"sort-closed\"): return '-date_closed' elif request.POST.get(\"sort-position\"): return 'position_title' return sort_by def positions_list_data(request, sort_by): return{ 'baseVisibleText", "label": 0}, {"snippet_id": 8423, "code": "/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session) } def _local_server_get(url, session): \"\"\"Simulate a server", "label": 0}, {"snippet_id": 77687, "code": " default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size\": size, \"name\": name, ", "label": 1}, {"snippet_id": 11798, "code": " json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 27196, "code": " autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration", "label": 0}, {"snippet_id": 79306, "code": "(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest", "label": 0}, {"snippet_id": 46921, "code": " template_name='data_group/datagroup_form.html'): datagroup=get_object_or_404(DataGroup, pk=pk) form=DataGroupForm(request.POST or None, instance=datagroup) header=f'Update Data Group for Data Source \"", "label": 0}, {"snippet_id": 66814, "code": " def get(self, request, **kwargs): if request.GET.get('keyword'): domain=request.GET.get('keyword') return HttpResponseRedirect(domain) context=self.get_context_data() return self.render_to_response(context", "label": 1}, {"snippet_id": 78014, "code": " update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\" self._load_config() context={'session': model.Session} package_ids=self.get_package_ids() for package_id in package_ids", "label": 0}, {"snippet_id": 63420, "code": "'/test2') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_no_authn_util(self): no_authn_urls_before=[path for path in self", "label": 0}, {"snippet_id": 67109, "code": "'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=filehash)).order_by('-timestamp') count=context['attributes'].count() if count >", "label": 0}, {"snippet_id": 56023, "code": "(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, EXPERIENCE_DEEPLINK_PATH, experience_share_id) response=HttpResponse", "label": 0}, {"snippet_id": 75730, "code": ", timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc", "label": 0}, {"snippet_id": 10323, "code": ": context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id", "label": 0}, {"snippet_id": 220, "code": "'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding", "label": 0}, {"snippet_id": 83841, "code": ") if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params['group", "label": 0}, {"snippet_id": 78353, "code": "(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id", "label": 0}, {"snippet_id": 67878, "code": " query=Org.objects.order_by('id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html' context_object_name='tags' def get_context_data(self, **kwargs): context=super()", "label": 0}, {"snippet_id": 25638, "code": " new_raylet_monitor_log_file, new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging.getLogger(__name__) class Node(object): \"\"\"An encapsulation", "label": 0}, {"snippet_id": 40710, "code": "[0],('gen_cat,prod_fam,prod_type,description,' 'PUC_type,num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card", "label": 1}, {"snippet_id": 64837, "code": "', '--name', required=True, help=\"The name of the function the student was supposed to implement\") parser.add_argument('-p', '--points', type=int, default=0, help=\"The number of points this question is", "label": 0}, {"snippet_id": 40367, "code": " QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1: return QAGroup.objects.filter(extraction_script", "label": 0}, {"snippet_id": 57444, "code": " return result request.method='GET' return self.get(request, *args, **kwargs) @login_required def transaction_pay(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return", "label": 0}, {"snippet_id": 24737, "code": ".setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args", "label": 1}, {"snippet_id": 33956, "code": ".live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value') true_cas=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]'", "label": 0}, {"snippet_id": 77582, "code": "=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application", "label": 0}, {"snippet_id": 31636, "code": ", request, *args, **kwargs): locale=request.GET.get('locale') resp=redirect(request.GET.get('next', request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll in settings.LANGUAGES]: if request", "label": 1}, {"snippet_id": 14062, "code": ".url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id", "label": 0}, {"snippet_id": 66897, "code": "=domain)|Q(url__contains=domain)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count", "label": 0}, {"snippet_id": 37665, "code": ".Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num', 'cpcat_code'] class ExtractedHHDocForm(ExtractedTextForm): class Meta: model=ExtractedHHDoc fields=['hhe_report_number', 'study_location', 'naics_code',", "label": 0}, {"snippet_id": 10805, "code": " change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently", "label": 0}, {"snippet_id": 43928, "code": " from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase", "label": 1}, {"snippet_id": 1485, "code": ".guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime)", "label": 0}, {"snippet_id": 82218, "code": " for cat in queryset: quantity +=cat.justurl_set.all().count() context['number_of_links']=quantity context['urls_without_category']=urls_without_category return context class CategoryDetailView(LoginRequiredMixin", "label": 0}, {"snippet_id": 52244, "code": ") @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page, with board\"\"\" team_id=request.form.get(\"team\") session[\"team_id\"]=team_id team_object=Team", "label": 0}, {"snippet_id": 37355, "code": "'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText", "label": 1}, {"snippet_id": 70917, "code": "(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html", "label": 0}, {"snippet_id": 12980, "code": " string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view", "label": 0}, {"snippet_id": 26413, "code": " code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info", "label": 0}, {"snippet_id": 74010, "code": "/master/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models -helper classes -access checks -redirect handlers and should not define: -templates -url names \"\"\" import", "label": 0}, {"snippet_id": 77424, "code": ".debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers processing done\") return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self)", "label": 0}, {"snippet_id": 83605, "code": "{group_slug_field: group_slug}) article_qs=article_qs.filter(content_type=get_ct(group), object_id=group.id) return article_qs, group def get_articles_for_object(object, article_qs=None): if article_qs is None:", "label": 0}, {"snippet_id": 57908, "code": " combined data with the status by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done", "label": 0}, {"snippet_id": 12580, "code": "): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\"", "label": 0}, {"snippet_id": 24097, "code": ". Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def is_main_thread(): return threading.current_thread().getName()==", "label": 0}, {"snippet_id": 23806, "code": " as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes", "label": 0}, {"snippet_id": 24598, "code": ": logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename", "label": 1}, {"snippet_id": 70692, "code": " import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import", "label": 1}, {"snippet_id": 72789, "code": "='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') @login_required(login_url='/login/', redirect_field_name=None) def import_position(request): if request", "label": 1}, {"snippet_id": 31641, "code": " resp=redirect(request.GET.get('next', request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll in settings.LANGUAGES]: if request.user.is_authenticated(): request.user.locale=locale request.user", "label": 1}, {"snippet_id": 26840, "code": " are still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: True if any process that wasn't explicitly killed is still alive", "label": 0}, {"snippet_id": 14092, "code": " running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context", "label": 0}, {"snippet_id": 75330, "code": "'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id", "label": 0}, {"snippet_id": 24654, "code": ".sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type", "label": 1}, {"snippet_id": 39802, "code": " of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is a part of. direction is 'next' or 'prev' ''' getit=False if direction=='prev': models=models.reverse() for m in", "label": 0}, {"snippet_id": 47841, "code": "'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition", "label": 0}, {"snippet_id": 69310, "code": "'/etc/sudoers.d/jupyterhub-admins', 'w') as f: f.write('%jupyterhub-admins ALL=(ALL) NOPASSWD: ALL\\n') f.write('Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file", "label": 0}, {"snippet_id": 43039, "code": "/', follow=True) response=self.client.get('/qa/extractedtext/5/', follow=True) self.assertIn( b'<input type=\"text\" name=\"rawchem-1-raw_cas\"', response.content) self.assertNotIn( b'<input type=\"text\" name", "label": 0}, {"snippet_id": 78226, "code": " patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options", "label": 0}, {"snippet_id": 84686, "code": ".id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if", "label": 0}, {"snippet_id": 21451, "code": ": with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time", "label": 0}, {"snippet_id": 10576, "code": "\"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or", "label": 0}, {"snippet_id": 58121, "code": " onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 13.0), ({onboarding.STEP_1: 0, onboarding.STEP_2:", "label": 1}, {"snippet_id": 22056, "code": " where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store", "label": 0}, {"snippet_id": 19009, "code": " for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\": if request.user.role", "label": 1}, {"snippet_id": 9510, "code": " processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context", "label": 0}, {"snippet_id": 79371, "code": "'followers']=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict[", "label": 0}, {"snippet_id": 62506, "code": " from flask import session from flask import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb.user import User from eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE", "label": 0}, {"snippet_id": 34496, "code": " save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name", "label": 0}, {"snippet_id": 68695, "code": ".setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl", "label": 0}, {"snippet_id": 62084, "code": " 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not in page.headers: return True else: matches=version_regex", "label": 0}, {"snippet_id": 62592, "code": "\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config, 'TOKEN_LOGIN_SHARED_KEY", "label": 0}, {"snippet_id": 151, "code": ".replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 2122, "code": ") header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return", "label": 0}, {"snippet_id": 70564, "code": " directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags", "label": 0}, {"snippet_id": 59541, "code": "(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(\"max_returned_rows\") self.sql_time_limit_ms", "label": 0}, {"snippet_id": 56100, "code": "{}'.format(settings.APP_DEEPLINK_DOMAIN, PROFILE_DEEPLINK_PATH, username) response=HttpResponse('', status=302) response['Location']=link return response def root_redirect(request): dynamic_link=settings", "label": 1}, {"snippet_id": 29019, "code": " _ThreadSafeProxy(object): \"\"\"This class is used to create a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock)", "label": 0}, {"snippet_id": 79963, "code": "[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict", "label": 1}, {"snippet_id": 63144, "code": "'/terminate', eppn, _check) def test_token_login_new_user(self): eppn='hubba-fooo' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode", "label": 0}, {"snippet_id": 48790, "code": " full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product", "label": 0}, {"snippet_id": 28905, "code": " memory file system in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats", "label": 0}, {"snippet_id": 10921, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if", "label": 0}, {"snippet_id": 5322, "code": "), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation", "label": 0}, {"snippet_id": 32519, "code": "(self.tokens, None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype", "label": 0}, {"snippet_id": 75399, "code": ".get_candidates_by_status(status, sort_param=request.GET['sort_by']) else: candidates=Candidate.get_candidates_by_status(status) return render(request, 'etd_app/staff_view_candidates.html',{'candidates': candidates, 'status", "label": 0}, {"snippet_id": 29932, "code": " class DevConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite:///' +os.path.join(BASE, 'db', 'benwaonline.db') DEBUG=True SECRET_KEY='not-so-secret' class TestConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite://'", "label": 0}, {"snippet_id": 42489, "code": " self.assertEqual(response.status_code,200) qa_group=QAGroup.objects.get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext", "label": 0}, {"snippet_id": 58130, "code": " 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 13.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7", "label": 1}, {"snippet_id": 24722, "code": "\"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format", "label": 0}, {"snippet_id": 70357, "code": " below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split", "label": 1}, {"snippet_id": 46031, "code": " include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles", "label": 0}, {"snippet_id": 15248, "code": " number_of_days=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models',[validators.required()]) change_input_series_one_model=FieldList(FormField(ChangeOneModelForm", "label": 0}, {"snippet_id": 82555, "code": " a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name", "label": 0}, {"snippet_id": 67704, "code": "/attribute_list.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): attr=Attribute.objects.all() context=super().get_context_data(**kwargs) context['categories']", "label": 0}, {"snippet_id": 24555, "code": "[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self", "label": 1}, {"snippet_id": 60292, "code": " or{}) max_returned_rows=self.max_returned_rows if max_returned_rows==page_size: max_returned_rows +=1 if max_returned_rows and truncate: rows=cursor.fetchmany(max_returned_rows +1) truncated=len(rows)", "label": 0}, {"snippet_id": 72860, "code": ", 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session['position_id']) request.user.positions.add(position", "label": 1}, {"snippet_id": 27180, "code": "): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If", "label": 0}, {"snippet_id": 23329, "code": " deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random", "label": 0}, {"snippet_id": 48487, "code": " product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value()", "label": 0}, {"snippet_id": 22513, "code": " be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be passed as the \"extra_data", "label": 0}, {"snippet_id": 41671, "code": "/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(),( 'UploadForm should not be included in the page!')) self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm,", "label": 0}, {"snippet_id": 43935, "code": ".exceptions import NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * def log_karyn_in(object", "label": 1}, {"snippet_id": 26776, "code": " processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type", "label": 0}, {"snippet_id": 10497, "code": " get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES", "label": 0}, {"snippet_id": 1386, "code": " hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/", "label": 1}, {"snippet_id": 9431, "code": " client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request):", "label": 0}, {"snippet_id": 78218, "code": "'organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users})", "label": 0}, {"snippet_id": 8299, "code": " enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 0}, {"snippet_id": 3477, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/'", "label": 0}, {"snippet_id": 29850, "code": ") @login_required def add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user", "label": 0}, {"snippet_id": 62958, "code": ", method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(authr), 'RelayState': came_from}): oq_cache=OutstandingQueriesCache(session) oq_cache.set(token, came_from) resp=self", "label": 0}, {"snippet_id": 35005, "code": "'data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem", "label": 1}, {"snippet_id": 83177, "code": " Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"\"", "label": 0}, {"snippet_id": 55464, "code": ": \t\treturn os.stat(self.path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) ", "label": 0}, {"snippet_id": 18002, "code": " return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context={ 'activation_link': activation_link, 'user': user } email_msg=email.EmailHolder( subject", "label": 1}, {"snippet_id": 7667, "code": " as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils", "label": 0}, {"snippet_id": 26141, "code": ", self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params", "label": 0}, {"snippet_id": 22221, "code": " redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name", "label": 0}, {"snippet_id": 73704, "code": ": create_position_form=CreatePositionForm( request.POST, request.FILES) if create_position_form.is_valid(): dictionary=parse_position_return_dictionary(create_position_form) errors=dictionary.get('errors", "label": 0}, {"snippet_id": 68953, "code": "/Ro8Kmh 41nuxZDSuBJhDeFIp0ccnN2Lp1o6XfIeDYPegyEPSSZqrudfqLrSZhStDlJgXjea JjW6UP6txPtYaaila9/Hn6vF87AQ5bR2dEWB/xRJzgNwRiax7KSU0xca6xAuf+TD xCjZ5pp2JwdCjquXLTmUnbIZ9LGV54UZ/MeiG8yVu6pxbiGnXo4Ekbk6xgi1ewLi", "label": 0}, {"snippet_id": 20352, "code": " at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy", "label": 0}, {"snippet_id": 42876, "code": "/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script group_count=QAGroup.objects.filter(extraction_script=scr).count() self.assertTrue(group_count==1) self.assertTrue(scr.qa_begun)", "label": 0}, {"snippet_id": 22394, "code": " ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should", "label": 0}, {"snippet_id": 78230, "code": "'organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations", "label": 0}, {"snippet_id": 49546, "code": " number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app.config['OAUTH_CREDENTIALS']={ 'facebook':", "label": 1}, {"snippet_id": 6678, "code": ".args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user(", "label": 1}, {"snippet_id": 66222, "code": "\"keyfile_unlock\", \"Keyfile\") stack.child_set_property(keyfile_unlock_stack_page, \"icon-name\", \"mail-attachment-symbolic\") stack.add_titled(composite_unlock_stack_page, \"composite_unlock\", \"Composite\") stack", "label": 0}, {"snippet_id": 74425, "code": "\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super", "label": 0}, {"snippet_id": 12616, "code": ".provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if", "label": 0}, {"snippet_id": 65167, "code": "'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>',", "label": 0}, {"snippet_id": 10574, "code": "\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login", "label": 0}, {"snippet_id": 27874, "code": " attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError", "label": 0}, {"snippet_id": 35113, "code": ".name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'", "label": 0}, {"snippet_id": 47727, "code": " distinct=True)).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).", "label": 0}, {"snippet_id": 79426, "code": "=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject, body", "label": 1}, {"snippet_id": 2357, "code": ".S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> ", "label": 0}, {"snippet_id": 20396, "code": ".flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly", "label": 0}, {"snippet_id": 82125, "code": "\"[\\w.']+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance=JustURL.objects.create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save() data", "label": 0}, {"snippet_id": 2954, "code": " OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce", "label": 0}, {"snippet_id": 23085, "code": " message(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers", "label": 0}, {"snippet_id": 28393, "code": "(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will", "label": 0}, {"snippet_id": 3658, "code": "\"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param", "label": 0}, {"snippet_id": 82077, "code": "})) return redirect(reverse('success-url-view', kwargs={'pk': created.pk})) return render(request, 'home.html',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form", "label": 0}, {"snippet_id": 13522, "code": "\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None:", "label": 0}, {"snippet_id": 80281, "code": ".addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action=lock_menu.addAction('Lock All') self.lock_all_action.setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction(", "label": 0}, {"snippet_id": 194, "code": " not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 4285, "code": " def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username", "label": 0}, {"snippet_id": 22874, "code": ": \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. ", "label": 0}, {"snippet_id": 70595, "code": ".isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): ", "label": 0}, {"snippet_id": 81810, "code": "=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view'", "label": 0}, {"snippet_id": 71403, "code": " provider: req.provider=provider req.provider_params=provider_params strategy_class=self._load_strategy(provider) resp=req.get_response(strategy_class(self.app, self._config)) if resp.request is None: resp", "label": 0}, {"snippet_id": 104, "code": " directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path", "label": 1}, {"snippet_id": 11400, "code": " user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY", "label": 0}, {"snippet_id": 26768, "code": " dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead", "label": 0}, {"snippet_id": 49817, "code": "=session['email'] elif 'social' in session: email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path", "label": 0}, {"snippet_id": 56820, "code": "'next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail(request, *args, **kwargs): extra_context={} concept", "label": 0}, {"snippet_id": 50712, "code": " path=os.path.abspath(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"'", "label": 0}, {"snippet_id": 39303, "code": " report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default=", "label": 0}, {"snippet_id": 70466, "code": "(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content", "label": 0}, {"snippet_id": 79747, "code": ", data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check", "label": 0}, {"snippet_id": 16542, "code": "\"\" Return a(sitters, two_gamers) 2-tuple\"\"\" tourney_players=tournament.tournamentplayer_set.all() round_players=the_round.roundplayer_set.all() rps=[] sitters=set() two_gamers=set() for rp in round_players", "label": 0}, {"snippet_id": 39141, "code": " extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name)", "label": 0}, {"snippet_id": 6198, "code": " return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL", "label": 0}, {"snippet_id": 25583, "code": " monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port", "label": 1}, {"snippet_id": 39661, "code": " on_delete=models.SET_NULL, null=True, blank=True) objects=InheritanceManager() def __str__(self): return str(self.data_document) def next_extracted_text_in_qa_group(self): nextid=0 extextnext=get_next_or_prev", "label": 0}, {"snippet_id": 54251, "code": "\"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 \"\"\" ** JSON response routes ** \"\"\" \"\"\"JSON response containing information for a particular politician", "label": 0}, {"snippet_id": 78371, "code": ") USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth", "label": 0}, {"snippet_id": 82847, "code": " try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status", "label": 1}, {"snippet_id": 51086, "code": " raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self, *args, **kwargs): ''' Deprecated. Use specify_optional_steps or modify_optional_steps instead. ''", "label": 0}, {"snippet_id": 8581, "code": "=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number", "label": 0}, {"snippet_id": 48735, "code": " products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned", "label": 0}, {"snippet_id": 44001, "code": " setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser", "label": 1}, {"snippet_id": 82219, "code": " queryset: quantity +=cat.justurl_set.all().count() context['number_of_links']=quantity context['urls_without_category']=urls_without_category return context class CategoryDetailView(LoginRequiredMixin", "label": 0}, {"snippet_id": 57205, "code": " @login_required def transaction_detail(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code'", "label": 0}, {"snippet_id": 49036, "code": "('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return render(request, template_name", "label": 0}, {"snippet_id": 79108, "code": " rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns", "label": 0}, {"snippet_id": 35632, "code": " form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get(", "label": 0}, {"snippet_id": 66900, "code": ")) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events'].count()", "label": 0}, {"snippet_id": 60379, "code": "\"templates_path\"] for plugin in get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( [ FileSystemLoader(template_paths), PrefixLoader( {\"default\"", "label": 0}, {"snippet_id": 24544, "code": ".log_file_handles[log_filename].readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] ", "label": 1}, {"snippet_id": 42691, "code": ") class TestQaPage(TestCase): fixtures=fixtures_standard def setUp(self): self.factory=RequestFactory() self.client.login(username='Karyn', password='specialP@55word') def test_qa_begin(self): \"\"\" Check", "label": 0}, {"snippet_id": 73843, "code": " redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\")", "label": 0}, {"snippet_id": 26245, "code": "=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password, config=self._config) assert(ray_constants.PROCESS_TYPE_RAYLET_MONITOR not in self.all_processes) self.all_processes", "label": 0}, {"snippet_id": 76204, "code": " return cut_path def redirect_sphinx_html(self, path, language=None, version_slug=None): for ending in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re", "label": 0}, {"snippet_id": 11566, "code": " like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args:", "label": 0}, {"snippet_id": 25100, "code": " driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex, task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID", "label": 0}, {"snippet_id": 39841, "code": "'Quantity{value} must be between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=", "label": 0}, {"snippet_id": 41780, "code": ".title='Functional use' self.objects.gt.code='FU' self.objects.gt.save() self.assertEqual(str(self.objects.dg.group_type),'Functional use', 'Type of DataGroup needs to be \"FU\" for this test.') response", "label": 0}, {"snippet_id": 21066, "code": " should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name or get_raylet_socket_name()) self.prepare_socket_file", "label": 0}, {"snippet_id": 36141, "code": " PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It", "label": 0}, {"snippet_id": 82834, "code": ":type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec ", "label": 1}, {"snippet_id": 52764, "code": "): \"\"\" Creates a new message object with a file attachment Returns on the socket { 'id': \"id\", 'sent_by':'user_id', 'room':\"room_id\", 'text':message.txt, 'file_name': message.attachment, 'file_link': message", "label": 0}, {"snippet_id": 56079, "code": "': '@{}'.format(profile.username), 'sd': profile.bio, 'si': profile.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link", "label": 0}, {"snippet_id": 75598, "code": ".thesis.original_file_name return response def _select2_list(search_results): select2_results=[] for r in search_results: select2_results.append({'id': r.id, 'text': r.text}) return select2_results def", "label": 0}, {"snippet_id": 16931, "code": "'the_set': new_game.the_set} for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment==Tournament.PREFERENCES: new_game.assign_powers_from_prefs() for tp in g: gp", "label": 0}, {"snippet_id": 9806, "code": " not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl", "label": 0}, {"snippet_id": 71176, "code": "(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models.Session.get_by_value(value) if session is not None: session_hash", "label": 0}, {"snippet_id": 32738, "code": " if self.command in builtins: builtins[self.command](*self.args) else: pid=os.fork() if pid==0: os.execv(self.full_command, self.args) else: self.pid=pid def wait(self): if self.pid: os.waitpid(self.pid", "label": 0}, {"snippet_id": 66489, "code": "=keyfile_unlock_select_button.get_label() try: self.database_manager=DatabaseManager(self.database_filepath, password=None, keyfile=keyfile_path) self.open_database_page() self.logging_manager.log_debug(", "label": 0}, {"snippet_id": 22262, "code": " self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self", "label": 0}, {"snippet_id": 80414, "code": ".lock_fast_piezo_action.triggered.connect(self.toggle_fast_piezo_lock) def setup_log_window(self): self.layout.addWidget(self.log_area) @handled_function def setup_widgets(self): self.status_monitor_queue=queue", "label": 0}, {"snippet_id": 24965, "code": " given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe", "label": 0}, {"snippet_id": 15930, "code": " long') return False self.user=auth_add_user(self.email.data, self.password.data) return True class LoginForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password", "label": 0}, {"snippet_id": 1873, "code": " show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath", "label": 1}, {"snippet_id": 46039, "code": "'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg", "label": 0}, {"snippet_id": 35955, "code": " from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES=( ('UN', ", "label": 0}, {"snippet_id": 46959, "code": ".extracted_docs(): form.fields['group_type'].disabled=True groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) return render(request, template_name,{", "label": 0}, {"snippet_id": 22460, "code": " import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__", "label": 1}, {"snippet_id": 27569, "code": " can be passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the", "label": 0}, {"snippet_id": 56033, "code": ".APP_DEEPLINK_DOMAIN, EXPERIENCE_DEEPLINK_PATH, experience_share_id) response=HttpResponse('', status=302) response['Location']=link return response def profile_redirect(request, username): dynamic_link", "label": 0}, {"snippet_id": 23978, "code": " class _ThreadSafeProxy(object): \"\"\"This class is used to create a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object", "label": 0}, {"snippet_id": 36951, "code": "': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also", "label": 0}, {"snippet_id": 36445, "code": "('gen_cat,prod_fam,prod_type,description,' 'PUC_type,num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self", "label": 1}, {"snippet_id": 71626, "code": "=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !=old_sid) s_count2=models.Session.query().count() self.assertTrue", "label": 0}, {"snippet_id": 56140, "code": "=HttpResponse('', status=302) response['Location']=link return response def aasa_redirect(request): return JsonResponse({\"applinks\":{\"apps\":[], \"details\":[{\"appID\": settings.APPLE_APPID, \"paths\":[\"*\"]}]}})", "label": 0}, {"snippet_id": 62485, "code": ") session['_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the", "label": 0}, {"snippet_id": 70338, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it,", "label": 0}, {"snippet_id": 21286, "code": " the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code.", "label": 0}, {"snippet_id": 51132, "code": "._optionParser.parse_args(argv) self._context.options=options self._context.args=args self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True", "label": 0}, {"snippet_id": 56132, "code": "}/'.format(settings.APP_DEEPLINK_DOMAIN) response=HttpResponse('', status=302) response['Location']=link return response def aasa_redirect(request): return JsonResponse({\"applinks\":{\"apps\":[], \"details", "label": 1}, {"snippet_id": 77190, "code": ".request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for", "label": 0}, {"snippet_id": 79067, "code": "'accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users", "label": 1}, {"snippet_id": 50042, "code": "(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session", "label": 0}, {"snippet_id": 83236, "code": " comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all", "label": 0}, {"snippet_id": 71454, "code": " AuthMiddleware from engineauth.middleware import EngineAuthRequest from engineauth import models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2", "label": 0}, {"snippet_id": 16552, "code": ".all() round_players=the_round.roundplayer_set.all() rps=[] sitters=set() two_gamers=set() for rp in round_players: assert rp.gameplayers().count()==0, \"%d games already exist for %s in this round\" %(rp", "label": 0}, {"snippet_id": 65841, "code": " update_tab_bar_visibility(self): if self.container.get_n_pages() > 1: self.container.set_show_tabs(True) else: self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return", "label": 0}, {"snippet_id": 10690, "code": "'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or ''", "label": 0}, {"snippet_id": 21272, "code": ", process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the", "label": 0}, {"snippet_id": 22120, "code": " If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True", "label": 0}, {"snippet_id": 49666, "code": "] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args", "label": 0}, {"snippet_id": 81496, "code": " new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00", "label": 0}, {"snippet_id": 41770, "code": "', 'raw_central_comp'], \"Fieldnames passed are incorrect!\") self.objects.gt.title='Functional use' self.objects.gt.code='FU' self.objects.gt.save() self.assertEqual(str(self.objects.dg.group_type),'Functional", "label": 0}, {"snippet_id": 25820, "code": "._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return", "label": 0}, {"snippet_id": 57819, "code": ": ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSE: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_THREAD: ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 34333, "code": " field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click()", "label": 0}, {"snippet_id": 74075, "code": " from. import forms, models, view_helpers logger=logging.getLogger(__name__) class _PassphrasePartial(views.base.TemplateView): storage_helper=view_helpers.ReportStorageHelper @property def storage(self)", "label": 0}, {"snippet_id": 55935, "code": ": response=HttpResponse('', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, EMAIL_CONFIRMATION_PATH, request.GET.urlencode()) return response def login_redirect(request)", "label": 0}, {"snippet_id": 43586, "code": "=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text", "label": 1}, {"snippet_id": 72537, "code": " screendoor.parseposter import parse_upload @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request", "label": 0}, {"snippet_id": 24998, "code": " data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data, 0)) for j in range(message.BatchLength()): heartbeat_message", "label": 0}, {"snippet_id": 78038, "code": "\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources'", "label": 0}, {"snippet_id": 29383, "code": "=current_user @auth.route('/test') def test(): if current_user.is_authenticated: return str(current_user.username) +str(current_user.user_id) return \"not logged in \" +str(current_user.is_authenticated) @auth", "label": 1}, {"snippet_id": 72850, "code": "'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText'", "label": 0}, {"snippet_id": 43467, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath", "label": 0}, {"snippet_id": 20954, "code": " def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 75613, "code": ", 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0: return[{'text': 'Previously Used', 'children': _select2_list", "label": 0}, {"snippet_id": 84114, "code": " allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_write: return HttpResponseForbidden() try: article=article_qs.get(**article_args) except ArticleClass", "label": 0}, {"snippet_id": 78007, "code": "=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" ", "label": 0}, {"snippet_id": 49426, "code": " None) return render(request, template_name,{'form': form}) @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra", "label": 0}, {"snippet_id": 57496, "code": " if valid: if form.cleaned_data['confirm_button']: transaction.closed=True transaction.closed_date=timezone.datetime.now() transaction.save() return redirect('transaction_detail', transaction_code=transaction", "label": 0}, {"snippet_id": 54181, "code": " render_template('politician_notfound.html', q=name) \"\"\"Search -> Politician Page \"\"\" @app.route('/search', methods=['POST', 'GET']) def search(): query=request.args.get('q').lower() politicians=Politician", "label": 1}, {"snippet_id": 62468, "code": "('reauthn-for-termination', session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id", "label": 0}, {"snippet_id": 68968, "code": "+iCwyvZSlLfH9mlegOeVmj9cyhN/VOmS3 QRhlYXoA2z7WZTNoC6iAIlyIpMTcZr+ntaGVtFOLS6fwdBqDXjmSQu66mDKwU5Ek fNlbyrpzZMyFCDWEYo4AIR/18aGZBYUAEQEAAYkCHwQYAQIACQUCU5sktgIbDAAK CRAWVaCraFdigIPQEACcYh8rR19wMZZ/hgYv5so6Y1HcJNARuzmffQKozS", "label": 0}, {"snippet_id": 4497, "code": "', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 10549, "code": ".bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods", "label": 0}, {"snippet_id": 75238, "code": "=False) committee_member.person=person committee_member.save() candidate.committee_members.add(committee_member) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id}", "label": 0}, {"snippet_id": 31739, "code": ")) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request", "label": 1}, {"snippet_id": 53720, "code": ".write(*args, **kwargs) return self.redirection_source.write(*args, **kwargs) def __getattribute__(self, item): \"\"\" :param item: :return: \"\"\" abort_thread() if item=='write': return self.write_both elif", "label": 0}, {"snippet_id": 25567, "code": " redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config", "label": 1}, {"snippet_id": 80867, "code": "-01::INSTR') sys.argv.append('COM5') print(sys.argv) exit_code=ControlApplication.EXIT_CODE_RESTART while exit_code==ControlApplication.EXIT_CODE_RESTART: gui=ControlApplication([]) with redirect_stdout", "label": 1}, {"snippet_id": 17810, "code": " !=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session", "label": 0}, {"snippet_id": 76308, "code": " coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image. Returns: The image to be", "label": 0}, {"snippet_id": 12994, "code": " AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it", "label": 0}, {"snippet_id": 36475, "code": " response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count()", "label": 0}, {"snippet_id": 84629, "code": "'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def observe_article(request, title, group_slug=None", "label": 0}, {"snippet_id": 84640, "code": "'GET']) @login_required def observe_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context", "label": 0}, {"snippet_id": 74490, "code": " django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseForbidden, JsonResponse, FileResponse, HttpResponseServerError", "label": 0}, {"snippet_id": 53287, "code": "(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param project: :param step: :return: \"\"\" module_name=step", "label": 0}, {"snippet_id": 56806, "code": "('transaction_detail', kwargs={'transaction_code': concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core", "label": 0}, {"snippet_id": 28311, "code": "\"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore", "label": 0}, {"snippet_id": 13113, "code": "[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile", "label": 0}, {"snippet_id": 24688, "code": "=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging", "label": 1}, {"snippet_id": 18305, "code": " check_if_exists(self): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({", "label": 0}, {"snippet_id": 36134, "code": ".objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def", "label": 0}, {"snippet_id": 15973, "code": ".append('Invalid email or password') return False self.user=user return True @app.route('/register', methods=['GET', 'POST']) def view_register(): if current_user.is_authenticated: return redirect(url_for", "label": 1}, {"snippet_id": 11839, "code": " import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth", "label": 0}, {"snippet_id": 81815, "code": "(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse(", "label": 0}, {"snippet_id": 30127, "code": " random import string from oauth2client.client import flow_from_clientsecrets from oauth2client.client import FlowExchangeError import httplib2 import json from flask import make_response import requests app", "label": 0}, {"snippet_id": 48969, "code": " PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs", "label": 0}, {"snippet_id": 57727, "code": "'t decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding", "label": 1}, {"snippet_id": 67417, "code": "(PaginationMixin, ListView): model=Event template_name='threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context", "label": 0}, {"snippet_id": 33292, "code": ".register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin", "label": 0}, {"snippet_id": 33626, "code": " for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(0, ethylparaben_stats['products_n'], 'There should be 0 products \\ associated with ethylparaben') self.client.login(username", "label": 0}, {"snippet_id": 19613, "code": ".check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"", "label": 1}, {"snippet_id": 15298, "code": ") for model in models ] def get_inputs_choices_by_model(name): models=load_json('models.json') model=next(item for item in models if item['model_system_name']==name) return[( value['series_name_system'", "label": 0}, {"snippet_id": 34591, "code": ".objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0", "label": 0}, {"snippet_id": 10234, "code": "{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language", "label": 0}, {"snippet_id": 77719, "code": "=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra", "label": 0}, {"snippet_id": 28608, "code": " task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources", "label": 0}, {"snippet_id": 2313, "code": "') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 38352, "code": ".ingredient import Ingredient from.product import Product from.source_category import SourceCategory from.product_document import ProductDocument from.extracted_text import ExtractedText from.extracted_cpcat", "label": 0}, {"snippet_id": 77267, "code": ", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close() logger.debug(\"Server", "label": 1}, {"snippet_id": 69276, "code": "-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group(", "label": 1}, {"snippet_id": 7015, "code": " def change_email_request(): form=ChangeEmailForm() if form.validate_on_submit(): if current_user.verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token", "label": 0}, {"snippet_id": 37295, "code": " class DataSourceForm(forms.ModelForm): required_css_class='required' class Meta: model=DataSource fields=['title', 'url', 'estimated_records', 'state', 'priority', 'description'] class PriorityForm(forms", "label": 0}, {"snippet_id": 16007, "code": "(url_for('view_home')) return render_template('register.html', form=register_form) @app.route('/login', methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for", "label": 0}, {"snippet_id": 39037, "code": "'no_folder_found': return self.get_dg_folder() else: return False @property def csv_url(self): '''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self", "label": 0}, {"snippet_id": 2116, "code": "\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 24271, "code": " key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling", "label": 0}, {"snippet_id": 3059, "code": "'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE'", "label": 0}, {"snippet_id": 72810, "code": "=CreatePositionForm( request.POST, request.FILES) if create_position_form.is_valid(): position=create_position_form.save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form", "label": 1}, {"snippet_id": 84726, "code": "(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if notification.is_observing(article,", "label": 0}, {"snippet_id": 30340, "code": " not match app's.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token", "label": 0}, {"snippet_id": 10537, "code": " old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils", "label": 0}, {"snippet_id": 28793, "code": " output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return", "label": 0}, {"snippet_id": 27603, "code": " Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the", "label": 0}, {"snippet_id": 54544, "code": " sys sys.stdout=codecs.getwriter(locale.getpreferredencoding())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import", "label": 0}, {"snippet_id": 42212, "code": "'utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>' self.assertIn(span, response, 'Check should be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg", "label": 0}, {"snippet_id": 83307, "code": " content_type=forms.ModelChoiceField( queryset=ContentType.objects.all(), required=False, widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField", "label": 0}, {"snippet_id": 55404, "code": "\tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance", "label": 0}, {"snippet_id": 81800, "code": ".cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host", "label": 0}, {"snippet_id": 43771, "code": " Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self", "label": 0}, {"snippet_id": 66797, "code": ".models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm()", "label": 0}, {"snippet_id": 78649, "code": ":param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional). :type organization_id:", "label": 0}, {"snippet_id": 31851, "code": ".decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request", "label": 1}, {"snippet_id": 26197, "code": " stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 73800, "code": "): return '-created' elif request.POST.get(\"sort-closed\"): return '-date_closed' elif request.POST.get(\"sort-position\"): return 'position_title' return sort_by def positions_list_data(request, sort_by)", "label": 0}, {"snippet_id": 61937, "code": "/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux Digital: https://whotracks.me/trackers/krux_digital.html \"\"\"", "label": 0}, {"snippet_id": 75028, "code": " db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords=sorted([kw.text for kw in db_keywords_info.values()]) user_keywords=sorted(", "label": 0}, {"snippet_id": 43888, "code": " load_model_objects from dashboard.models import * import os import csv import time import unittest import collections import json import re from selenium import webdriver from selenium.webdriver.support", "label": 1}, {"snippet_id": 22000, "code": " debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected", "label": 0}, {"snippet_id": 47064, "code": " qs=DataDocument.objects.filter(data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg.get_name_as_slug() + \"_registered_records.csv\"), field_header_map={\"id\": \"DataDocument_id", "label": 0}, {"snippet_id": 43062, "code": "\"text\" name=\"rawchem-1-unit_type\"', response.content) self.assertIn(b'Functional Use Chem1', response.content) response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('", "label": 0}, {"snippet_id": 41066, "code": "], 'document_type':[1], 'return_url' :['/datadocument/167497/']} response=self.client.post('/link_product_form/167497/', data=data) self.assertRedirects(response,'/datadocument/167497/') response=self.client", "label": 0}, {"snippet_id": 76269, "code": " Image import tilecalcs logger=logging.getLogger(\"wms_maps\") _TILE_PIXEL_SIZE=256 _NO_DATA_PIXELS=(0, 0, 0) _OPAQUE_ALPHA=(255,) _TRANSPARENT_ALPHA=(0,) _ALPHA_THRESHOLD=128 ALL_WHITE_PIXELS=(255, 255, 255)", "label": 0}, {"snippet_id": 20751, "code": "._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self", "label": 0}, {"snippet_id": 13881, "code": "] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information", "label": 0}, {"snippet_id": 10139, "code": " a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even", "label": 0}, {"snippet_id": 11113, "code": " tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to", "label": 0}, {"snippet_id": 10876, "code": " AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change", "label": 0}, {"snippet_id": 65546, "code": ".close() tab_title=self.create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response", "label": 1}, {"snippet_id": 65787, "code": " False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE", "label": 0}, {"snippet_id": 11030, "code": " depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME',", "label": 0}, {"snippet_id": 75268, "code": "/candidate_committee.html', context) @login_required @require_http_methods(['POST']) def candidate_committee_remove(request, candidate_id, cm_id): try: candidate=_get_candidate(candidate_id=candidate_id,", "label": 0}, {"snippet_id": 58961, "code": " save(self, force_insert=False, force_update=False, using=None, update_fields=None): user=Invite.search_user_by_email(self.email) self.user=user return super(Invite, self).save(force_insert, force_update,", "label": 0}, {"snippet_id": 56944, "code": " request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop('filter_data',{}) return super().get(self,", "label": 0}, {"snippet_id": 55361, "code": " mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse", "label": 0}, {"snippet_id": 46717, "code": ".objects.get(pk=1) code=line['document_type'] if line['filename']=='': errors.append([count,\"Filename can't be empty!\"]) continue if len(line['filename'])>255: errors.append([count,\"Filename too long!\"", "label": 0}, {"snippet_id": 38902, "code": " extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs): super(DataGroup, self).save(*args, **kwargs) def matched_docs(self): return self.datadocument_set.filter(matched=True)", "label": 0}, {"snippet_id": 59742, "code": ") ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[", "label": 0}, {"snippet_id": 341, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list':", "label": 0}, {"snippet_id": 59729, "code": "(self): if not hasattr(self, \"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root), \"datasette/static/app.css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash", "label": 0}, {"snippet_id": 19040, "code": "[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView", "label": 1}, {"snippet_id": 26003, "code": ") self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info", "label": 0}, {"snippet_id": 45226, "code": " item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats", "label": 0}, {"snippet_id": 14572, "code": "} }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 18649, "code": "==None): \t\t\terror=\"User doesn't exist. Please sign up first!\" \t\telif(ph.verify(document_username['password'],self.password)==False): \t\t\terror=\"Password is wrong, try again!\" \t\treturn error\t\t\t \t\"\"\" post", "label": 1}, {"snippet_id": 81135, "code": ", subscription_update_counter): event_cat=str(event.event_type_id.name).lower() ai_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'ai_montly'), ('subscription_partner", "label": 0}, {"snippet_id": 66651, "code": ".get_style_context().remove_class(\"suggested-action\") composite_unlock_select_button.get_style_context().add_class(\"destructive-action\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open", "label": 0}, {"snippet_id": 14408, "code": ". auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if", "label": 0}, {"snippet_id": 17590, "code": "), password=form.password.data) user.registration_ip=ip_address(flask.request.remote_addr).packed user.last_login_ip=user.registration_ip db.session.add(user) db.session.commit() if models.RangeBan.is_rangebanned", "label": 0}, {"snippet_id": 39584, "code": " primary_key=True) prod_name=models.CharField(max_length=500, null=True, blank=True) doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank", "label": 0}, {"snippet_id": 59336, "code": "(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested facet \"\"\".strip())", "label": 0}, {"snippet_id": 18998, "code": "..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST", "label": 1}, {"snippet_id": 78288, "code": " in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self", "label": 0}, {"snippet_id": 47419, "code": " @login_required() def data_source_create(request, template_name=('data_source/' 'datasource_form.html')): form=DataSourceForm(request.POST or None) if form.is_valid(): form.save() return redirect('data_source_list'", "label": 0}, {"snippet_id": 72744, "code": ".get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete() return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText", "label": 1}, {"snippet_id": 60081, "code": ".define(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection(conn) sqlite_version=conn.execute(\"select sqlite_version()\").fetchone()[0] sqlite_extensions={} for extension,", "label": 0}, {"snippet_id": 47223, "code": "}, use_verbose_names=False) else: qs=ExtractedChemical.objects.filter(extracted_text__data_document__id=pk).values(*columnlist) return render_to_csv_response(qs, filename='raw_extracted_records.csv', use_verbose_names", "label": 0}, {"snippet_id": 22351, "code": ": raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The", "label": 0}, {"snippet_id": 47474, "code": "'data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required() def data_source_delete(request, pk, template_name=(", "label": 0}, {"snippet_id": 11643, "code": ", unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 5307, "code": "'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection", "label": 0}, {"snippet_id": 8255, "code": " following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, ", "label": 0}, {"snippet_id": 59340, "code": " for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested facet \"\"\".strip()), ConfigOption(\"allow_facet\", True, \"\"\" Allow", "label": 0}, {"snippet_id": 51821, "code": " Project, Phase) import query as q import helper as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route", "label": 0}, {"snippet_id": 30073, "code": " grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'id':", "label": 0}, {"snippet_id": 36373, "code": "[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 55810, "code": " f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf.close() \t\treturn r \tdef writelines(self,o): \t\tf=open(self.path,\"wb", "label": 0}, {"snippet_id": 57717, "code": "*kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding", "label": 0}, {"snippet_id": 23227, "code": " \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the", "label": 0}, {"snippet_id": 59855, "code": ": metadata.get(\"license\") or self.metadata(\"license\"), \"license_url\": metadata.get(\"license_url\") or self.metadata(\"license_url\"), \"about\": metadata.get(\"about\") or self.metadata(\"about\"), \"about_url\":", "label": 0}, {"snippet_id": 20948, "code": " ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file", "label": 0}, {"snippet_id": 53292, "code": ": 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param project: :param step: :return: \"\"\" module_name=step.definition.name.rsplit('.', 1)[0] module=types.ModuleType(module_name) with", "label": 1}, {"snippet_id": 54614, "code": "+homework_file.path \t\t\t\traise \t\tself.assignments=[] \t\tfor homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t", "label": 0}, {"snippet_id": 7116, "code": " law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the", "label": 0}, {"snippet_id": 49157, "code": " child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form", "label": 0}, {"snippet_id": 80263, "code": ".addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon')", "label": 0}, {"snippet_id": 66001, "code": "/KeepassGtk/quit_dialog.ui\") self.quit_dialog=builder.get_object(\"quit_dialog\") self.quit_dialog.set_destroy_with_parent(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button", "label": 0}, {"snippet_id": 9381, "code": " originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student", "label": 0}, {"snippet_id": 6335, "code": " % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid audience') return False if 'azp' not in id_token: logger", "label": 0}, {"snippet_id": 46119, "code": "']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type) if extract_form", "label": 0}, {"snippet_id": 63619, "code": ".status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from", "label": 0}, {"snippet_id": 53941, "code": " :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer(if it exists) and returns a body-ready dom", "label": 0}, {"snippet_id": 39110, "code": " zip_url=uuid_path elif os.path.isfile(zip_file_path): zip_url=zip_file_path else: zip_url='no_path_found' return zip_url def get_extracted_template_fieldnames(self): extract_fields=['data_document_id',", "label": 0}, {"snippet_id": 15432, "code": ".input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data,", "label": 0}, {"snippet_id": 30819, "code": " own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id", "label": 0}, {"snippet_id": 31032, "code": "['name']: editgrudge.name=request.form['name'] if request.form['description']: editgrudge.description=request.form['description'] if request.form['processed']: editgrudge.processed=request.form['processed", "label": 0}, {"snippet_id": 29471, "code": "(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id", "label": 0}, {"snippet_id": 9820, "code": "]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage", "label": 0}, {"snippet_id": 64690, "code": "'UserWarning', 'ValueError', 'vars', 'Warning', 'ZeroDivisionError', 'zip', ] def output_json(points, deductions): score=points -sum(d['points'] for d in deductions) if score < 0: score=0 print(json.dumps(", "label": 0}, {"snippet_id": 46370, "code": " docs_needing_products: try: ext=ExtractedText.objects.get(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title", "label": 0}, {"snippet_id": 26887, "code": " a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None", "label": 0}, {"snippet_id": 39699, "code": " \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if group_type_code in['CP", "label": 0}, {"snippet_id": 23109, "code": " if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message", "label": 0}, {"snippet_id": 9133, "code": "=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the", "label": 0}, {"snippet_id": 30023, "code": "')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge'", "label": 1}, {"snippet_id": 20443, "code": ".heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\",", "label": 0}, {"snippet_id": 5497, "code": ") paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects", "label": 0}, {"snippet_id": 27537, "code": "\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). ..", "label": 0}, {"snippet_id": 52287, "code": " board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id=request.form.get(", "label": 0}, {"snippet_id": 23038, "code": " A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"", "label": 0}, {"snippet_id": 69246, "code": " packages, but do have pip packages. Keeping all python packages in the hub environment be installed with pip prevents accidental mixing of python and conda packages! \"\"\" conda.ensure_pip_packages(prefix", "label": 0}, {"snippet_id": 47206, "code": ".get_name_as_slug() qs=ExtractedChemical.objects.filter(extracted_text__data_document__data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg_name + \"_raw_extracted_records", "label": 0}, {"snippet_id": 64310, "code": ".clear() return redirect(next_page) else: current_app.logger.error('Unknown error during the logout') abort(400) elif 'SAMLRequest' in request.form: current_app.logger.debug('Receiving a logout request from", "label": 0}, {"snippet_id": 81678, "code": "-24)) > datetime.now() and event_type=='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for event", "label": 0}, {"snippet_id": 27762, "code": " to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock:", "label": 1}, {"snippet_id": 74220, "code": " invalid_access_no_key_message=\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner() try: passphrase", "label": 0}, {"snippet_id": 30589, "code": " grudges=session.query(Grudge).filter_by(grudget_id=grudget.id).all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/JSON') def grudgeJSON", "label": 0}, {"snippet_id": 41236, "code": "\"hh-report-no\")]')[0].text self.assertIn('47', hhe_no) class TestDynamicDetailFormsets(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 15311, "code": "']==name) return[( value['series_name_system'], value['series_name_system'] +':' +value['series_name_user'] ) for key, value in model['inputs'].iteritems()] def get_inputs_choices(): models=load_json('models", "label": 0}, {"snippet_id": 47738, "code": "=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field", "label": 0}, {"snippet_id": 5263, "code": " response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password", "label": 0}, {"snippet_id": 70508, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 65038, "code": "==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str, ast.Bytes, ast.NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid: raise ValueError", "label": 0}, {"snippet_id": 68795, "code": " extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc.stdout.decode() assert proc.stderr.decode()==' -Validating: \\x1b[32mOK", "label": 0}, {"snippet_id": 57913, "code": " on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\": \"", "label": 0}, {"snippet_id": 838, "code": "=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime:", "label": 0}, {"snippet_id": 38239, "code": "=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self", "label": 0}, {"snippet_id": 41745, "code": " \"composition\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num", "label": 0}, {"snippet_id": 36115, "code": " and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat", "label": 0}, {"snippet_id": 11037, "code": " return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 49784, "code": "'UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload', methods=['POST']) def upload()", "label": 0}, {"snippet_id": 50317, "code": " delete=False) as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile", "label": 0}, {"snippet_id": 33378, "code": ".client import Client from dashboard.views.get_data import * from dashboard.tests.loader import fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard", "label": 0}, {"snippet_id": 70839, "code": " if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath)", "label": 1}, {"snippet_id": 45661, "code": "['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk", "label": 0}, {"snippet_id": 4206, "code": "/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200", "label": 0}, {"snippet_id": 72009, "code": ".services.exception import serialize_dashboard_exception from..services.ganesha import Ganesha, GaneshaConf, NFSException from..services.rgw_client import RgwClient def NfsTask(name, metadata, wait_for)", "label": 0}, {"snippet_id": 18767, "code": ".get_secure_cookie(\"user\") \t\tif(cookie_status==None): \t\t\tself.render('index.html') \t\t\treturn \t\telse: \t\t\tself.render('postlogin.html') \t\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes", "label": 1}, {"snippet_id": 35, "code": " Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None", "label": 0}, {"snippet_id": 56789, "code": "'.format(concept.concept_type)) extra_context['message']=concept.description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transaction_detail", "label": 0}, {"snippet_id": 68544, "code": "=self.get_context_data() return render(request, 'twitter_hunter/tweets.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def", "label": 0}, {"snippet_id": 59654, "code": "(databases.get(database) or{}).get(\"tables\") or{} ).get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None", "label": 0}, {"snippet_id": 83168, "code": " will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self):", "label": 0}, {"snippet_id": 32172, "code": " start=self.position if self.read()=='>': self.read() return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType", "label": 0}, {"snippet_id": 80935, "code": " fields, http, _ from odoo.exceptions import ValidationError, UserError _logger=logging.getLogger(__name__) class WebsiteEventController(http.Controller): @http.route(['/fit_subscribe_controller/subscribe", "label": 0}, {"snippet_id": 76451, "code": " im_tile=tiles_array.ImageAt(column, row) if set_pixel_to_bgcolor: im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\"", "label": 0}, {"snippet_id": 68851, "code": " from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(", "label": 0}, {"snippet_id": 79887, "code": " request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict", "label": 0}, {"snippet_id": 41098, "code": "(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/') data={'title' :['Product Title'], 'upc' :['stub_9100'], 'document_type':[1], 'return_url", "label": 0}, {"snippet_id": 47600, "code": "(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical", "label": 0}, {"snippet_id": 59168, "code": " ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email) @receiver", "label": 1}, {"snippet_id": 26498, "code": "\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer", "label": 0}, {"snippet_id": 81195, "code": "', '=', 'bz_tickets'), ('subscription_partner', '=', partner.id)]) if ai_monthly.subscription_is_active: return; if event_cat=='bokszaktraining': if bz_tickets: bz_tickets.subscription_counter +=subscription_update_counter", "label": 1}, {"snippet_id": 16826, "code": ".objects.get(id=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset", "label": 0}, {"snippet_id": 55153, "code": "(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir(self.path) \tdef islink(self): \t\treturn os.path.islink(self.path) ", "label": 0}, {"snippet_id": 82386, "code": "/$', URLDetailView.as_view(), name='url-detail-view'), re_path(r'^update/(?P<pk>(\\d)+)/$', URLUpdateView.as_view(), name='url-update-view'), re_path(r'^delete/(?P<pk>(\\d)+)/$', URLDeleteView.as_view(),", "label": 0}, {"snippet_id": 10119, "code": " in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id", "label": 0}, {"snippet_id": 55210, "code": "(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: ", "label": 0}, {"snippet_id": 5922, "code": "'OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True", "label": 0}, {"snippet_id": 34076, "code": ".browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '/", "label": 0}, {"snippet_id": 39547, "code": " import datetime from model_utils.managers import InheritanceManager from django.db import models from django.core.exceptions import ValidationError from django import forms from django.urls import reverse", "label": 1}, {"snippet_id": 2431, "code": " %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index", "label": 0}, {"snippet_id": 29306, "code": "'benwaonline.blueprints'): mod=import_string(name) if hasattr(mod, 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app): @app.cli.command('initdb') def initdb_command(): \"\"\"Creates the database", "label": 0}, {"snippet_id": 8547, "code": " no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 63694, "code": ".app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): response", "label": 0}, {"snippet_id": 21982, "code": " manner. However, the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True", "label": 0}, {"snippet_id": 44362, "code": "('//*[@id=\"id_rawchem-0-true_cas\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname\"]') with self.assertRaises(NoSuchElementException", "label": 0}, {"snippet_id": 41639, "code": " extracted False')) self.assertFalse(response.context['datagroup'].all_matched(), ('UploadForm should be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not", "label": 0}, {"snippet_id": 40717, "code": "'PUC_type,num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode", "label": 1}, {"snippet_id": 4770, "code": " Client from drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword", "label": 0}, {"snippet_id": 23455, "code": " def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs", "label": 0}, {"snippet_id": 83648, "code": " return reverse(urlname, args=args) else: app=group._meta.app_label urlconf='.'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return ''.join(['/', app, url]) class ArticleEditLock(object): ", "label": 0}, {"snippet_id": 77713, "code": " data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras']: if extra[", "label": 0}, {"snippet_id": 61148, "code": ":param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name", "label": 0}, {"snippet_id": 62614, "code": ", 'TOKEN_LOGIN_FAILURE_REDIRECT_URL': 'http://test.localhost/failure' }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this", "label": 1}, {"snippet_id": 58817, "code": "=request.user.email) ) class Invite(models.Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code'", "label": 0}, {"snippet_id": 80522, "code": "(icon=QMessageBox.Critical) dialog.setWindowTitle('Error') dialog.setText(f\"{description +'_' * desired_width}\\n\\n{''.join(stack)}\") dialog.exec() @handled_slot(bool) def clear_log_area(self, checked):", "label": 0}, {"snippet_id": 72707, "code": "._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key')", "label": 1}, {"snippet_id": 64221, "code": " the logout response to this view, which will process it with pysaml2 help and log the user out. Note that the IdP can request a logout even when we didn't initiate the process as a single logout request", "label": 0}, {"snippet_id": 6229, "code": " def redirect_to_auth_server(self, destination): \"\"\" Set a CSRF token in the session, and redirect to the IdP. :param destination: the page that the user was going to, before we noticed they weren't logged", "label": 0}, {"snippet_id": 75, "code": " import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd", "label": 0}, {"snippet_id": 23393, "code": " here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes", "label": 0}, {"snippet_id": 61412, "code": ": Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"", "label": 0}, {"snippet_id": 35505, "code": "=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects", "label": 0}, {"snippet_id": 24333, "code": " run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE and driver_id !", "label": 0}, {"snippet_id": 45469, "code": "' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1 if doc.detail_page_editable else 0 ParentForm, ChildFormSet=create_detail_formset( doc, extra=edit, can_delete=edit", "label": 1}, {"snippet_id": 49425, "code": "', None) return render(request, template_name,{'form': form}) @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra", "label": 0}, {"snippet_id": 27653, "code": " span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class", "label": 0}, {"snippet_id": 44240, "code": "'//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url", "label": 0}, {"snippet_id": 7187, "code": "'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind' ) form_edit_rules=( 'exam_type_name',", "label": 1}, {"snippet_id": 23784, "code": "\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os", "label": 0}, {"snippet_id": 68888, "code": "/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R+RJfRpb1qvljURr54y35IZgs fMG22Np+TmM2RLgdFCZa18h0+RbH9i0b+ZrB9XPZmLb/h9ou7SowGqQ3wwOtT3Vy qmif0A2GCcjFTqWW6TXaY8eZJ9BCEqW3k/0Cjw7K/mSy/utxYiUIvZNKgaG", "label": 0}, {"snippet_id": 43017, "code": "/extractedtext/7', follow=True) def test_hidden_fields(self): '''ExtractionScript 15 includes a functional use data group with pk=5. Its QA page should hide the composition fields ''' response=self.client.get(", "label": 0}, {"snippet_id": 59627, "code": " and table is not None), \\ \"Cannot call metadata() with table=specified but not database=\" databases=self._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases", "label": 0}, {"snippet_id": 40705, "code": ".content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0],('gen_cat,prod_fam,prod_type,description,' 'PUC_type,num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures", "label": 1}, {"snippet_id": 81286, "code": ": email=self.env.user.partner_id.email for event in self: domain=['&', '|',('email', '=', email),('partner_id', '=', self.env.user.partner_id.id),('event_id', '=', event.id), ('state', '=', 'open')] count", "label": 0}, {"snippet_id": 59445, "code": " \"\"\" Truncate cells longer than this in HTML table view -set 0 to disable \"\"\".strip()), ConfigOption(\"force_https_urls\", False, \"\"\" Force URLs in API output to always use https:// protocol \"\"\".strip())", "label": 0}, {"snippet_id": 24005, "code": " lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def", "label": 0}, {"snippet_id": 75721, "code": "] url=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return error_response except Exception: import traceback", "label": 0}, {"snippet_id": 77929, "code": " toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy", "label": 0}, {"snippet_id": 2827, "code": "\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request", "label": 0}, {"snippet_id": 22844, "code": " attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\"", "label": 0}, {"snippet_id": 36046, "code": " of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return", "label": 0}, {"snippet_id": 50362, "code": " def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect(url_for('login')) user", "label": 0}, {"snippet_id": 16839, "code": "'tournament': t, 'round': r, 'formset': formset}) gp.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) else: r.game_set.all().delete() default_set", "label": 0}, {"snippet_id": 12077, "code": " initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response", "label": 0}, {"snippet_id": 79798, "code": ".discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization", "label": 1}, {"snippet_id": 29098, "code": "._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client:", "label": 0}, {"snippet_id": 40587, "code": ".login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id", "label": 0}, {"snippet_id": 21374, "code": " code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info", "label": 0}, {"snippet_id": 68784, "code": "/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '", "label": 0}, {"snippet_id": 25099, "code": " driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex, task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[", "label": 0}, {"snippet_id": 82450, "code": "<pk>(\\d)+)/$', CategoryDeleteView.as_view(), name='category-delete-view'), re_path(r'^(?P<pk>(\\d)+)/reports/$', ClickTrackingDetailView.as_view(), name='clicktracking-detail-view'), re_path(r'^(?P<pk>(", "label": 1}, {"snippet_id": 13954, "code": ", settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url", "label": 0}, {"snippet_id": 58519, "code": ".CREATE_COURSELET: False, onboarding.CREATE_THREAD: False, onboarding.INVITE_SOMEBODY: True, onboarding.NEXT_STEPS: False, onboarding.PREVIEW_COURSELET: False } settings_mock.side_effect=mocked_setting", "label": 1}, {"snippet_id": 70010, "code": ".st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath", "label": 0}, {"snippet_id": 67873, "code": " context def get_queryset(self): query=Org.objects.order_by('id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html' context_object_name='tags' def get_context_data", "label": 0}, {"snippet_id": 47187, "code": "'extracted_text_id','id','raw_cas','raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group", "label": 0}, {"snippet_id": 52385, "code": " @app.route(\"/add-to-board\", methods=[\"POST\"]) def add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title", "label": 0}, {"snippet_id": 9089, "code": ".features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student", "label": 0}, {"snippet_id": 79079, "code": "[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict", "label": 1}, {"snippet_id": 68907, "code": " Jq6N/iepQemNfo6Is+TG+JzI6vhXjlsBm/Xmz0ZiFPPObAH/vGCY5I6886vXQ7ft qWHYHT8jz/R4tigMGC+tvZ/kcmYBsLCCI5uSEP6JJRQQhHrCvOX0UaytItfsQfLm EYRd2F72o1yGh3yvWWfDIBXRmaBuIGXGpajC0JyBGSOWb9UxMNZY/2LJEwARAQAB tB9Ob2RlU291cmNlIDxncGdAbm9kZXNvdXJjZS5jb20", "label": 0}, {"snippet_id": 39244, "code": " (f'Quantity{value} is not allowed'), params={'value': value},) class ExtractedChemical(CommonInfo, RawChem): raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old", "label": 0}, {"snippet_id": 38672, "code": "=self.get_abstract_filename() return f'/media/{dg.fs_id}/pdf/{fn}' def clean(self): this_type=self.data_group.group_type doc_types=DocumentType.objects.filter(group_type=this_type) if not self.document_type", "label": 1}, {"snippet_id": 58566, "code": " onboarding from django.conf import settings class Command(BaseCommand): help='Onboarding preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects.all(): try: course=Course.objects", "label": 1}, {"snippet_id": 50268, "code": ".pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Incorrect Email/Password') return redirect('/login') @app.route(\"/logout\") def logout(): session.clear(", "label": 0}, {"snippet_id": 47810, "code": " download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv", "label": 0}, {"snippet_id": 25954, "code": "( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER]=( process_infos) def start_log_monitor(self): \"\"\"Start the log monitor.\"", "label": 0}, {"snippet_id": 24711, "code": " required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type", "label": 0}, {"snippet_id": 25691, "code": "=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional processes like", "label": 0}, {"snippet_id": 59423, "code": " rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for CSV export in MB -set 0 to disable this limit \"\"\".strip()), ConfigOption(\"truncate_cells_html\"", "label": 0}, {"snippet_id": 778, "code": " c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded", "label": 0}, {"snippet_id": 61865, "code": "), allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") return page, soup def validate_subdomain(url): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url", "label": 0}, {"snippet_id": 845, "code": "(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError):", "label": 0}, {"snippet_id": 20448, "code": " parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis", "label": 0}, {"snippet_id": 26804, "code": " process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns:", "label": 0}, {"snippet_id": 4623, "code": " redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 76267, "code": " import images import PIL.Image as Image import tilecalcs logger=logging.getLogger(\"wms_maps\") _TILE_PIXEL_SIZE=256 _NO_DATA_PIXELS=(0, 0, 0) _OPAQUE_ALPHA=(255,) _TRANSPARENT_ALPHA=(0,) _ALPHA_THRESHOLD", "label": 0}, {"snippet_id": 63280, "code": "(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_cookie(self): token", "label": 0}, {"snippet_id": 74996, "code": "'candidate_id': candidate.id})) else: form=UploadForm() return render(request, 'etd_app/candidate_upload.html',{'candidate': candidate, 'form': form}) def _user_keywords_changed(thesis, user_request_keywords", "label": 0}, {"snippet_id": 16185, "code": ".user) r=get_round_or_404(t, round_num) context={'tournament': t, 'round': r} return render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call", "label": 0}, {"snippet_id": 77970, "code": ").__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package", "label": 0}, {"snippet_id": 36020, "code": " through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through", "label": 0}, {"snippet_id": 601, "code": "(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath", "label": 1}, {"snippet_id": 57800, "code": ".update_one(find_crit,{'$set':{ step: True }}, upsert=True) ONBOARDING_STEPS_DEFAULT_TEMPLATE={ 'title': '', 'description': '', 'html': '' } ONBOARDING_SETTINGS_DEFAULT={ onboarding.INTRODUCTION_COURSE_ID", "label": 0}, {"snippet_id": 80813, "code": " checked else 'Unlocking'} thin etalon.\") self.lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked) self.lock_thin_etalon_action.setChecked(checked) @handled_slot(bool)", "label": 0}, {"snippet_id": 41369, "code": "(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd, EXTRA) extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model =get_extracted_models(dd.data_group", "label": 1}, {"snippet_id": 26899, "code": " these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for", "label": 0}, {"snippet_id": 81766, "code": " create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import re class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm() return render(request, 'home", "label": 0}, {"snippet_id": 34320, "code": "(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, ", "label": 0}, {"snippet_id": 22581, "code": " to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\"", "label": 0}, {"snippet_id": 34128, "code": "[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index", "label": 0}, {"snippet_id": 64782, "code": " deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions, points_per_case, 'failed test case %d'", "label": 1}, {"snippet_id": 44137, "code": ".browser.current_url, \"User should always return to detail page after submit\") num_pucs=len(PUC.objects.filter(kind='FO')) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser", "label": 0}, {"snippet_id": 9350, "code": " context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\",", "label": 0}, {"snippet_id": 2250, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 27589, "code": " Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This", "label": 0}, {"snippet_id": 19989, "code": ".ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id", "label": 0}, {"snippet_id": 8993, "code": ".http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms", "label": 0}, {"snippet_id": 56695, "code": " TransactionEditForm, TransactionPayForm from clickgestion.transactions.models import BaseConcept, Transaction from django.shortcuts import get_object_or_404, render, redirect, reverse from django.utils", "label": 0}, {"snippet_id": 64448, "code": ".locked_identity.count > 0: current_app.logger.error('Not new user{} tried to log in using token login'.format(user)) return redirect(location_on_fail) session['eduPersonPrincipalName']=user.eppn session", "label": 0}, {"snippet_id": 28803, "code": ": The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system", "label": 0}, {"snippet_id": 58879, "code": " @staticmethod def search_user_by_email(email): return User.objects.filter(email=email).first() @classmethod def create_new(cls, commit, course, instructor, email, invite_type, enroll_unit_code): user=Invite", "label": 0}, {"snippet_id": 65876, "code": " on_tab_close_button_clicked(self, sender, widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container.page_num(db.parent_widget)==page_num: self.opened_databases.remove", "label": 0}, {"snippet_id": 79810, "code": ") org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition(org_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users", "label": 1}, {"snippet_id": 83519, "code": " HttpResponseForbidden) from django.shortcuts import get_object_or_404, render_to_response, redirect from django.contrib.contenttypes.models import ContentType from django.contrib import messages from django", "label": 1}, {"snippet_id": 19701, "code": ".logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args.node_ip_address, redis_password=args", "label": 1}, {"snippet_id": 26293, "code": ".start_raylet_monitor() self.start_plasma_store() self.start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self", "label": 0}, {"snippet_id": 5498, "code": "('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 9854, "code": "\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions", "label": 0}, {"snippet_id": 6677, "code": "(request.args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user", "label": 1}, {"snippet_id": 43841, "code": "//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH", "label": 0}, {"snippet_id": 54443, "code": " jsonify(articles=articles) \"\"\"Tweets for a search query Format: JSON \"\"\" @app.route('/json/tweets/search/<query>', methods=['GET']) def tweets_search(query): access_token='487593326-yu9WIClcUgs9vBWJGGgW4QC9pKedHMdm3NhhNoxe", "label": 0}, {"snippet_id": 56090, "code": " preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, PROFILE_DEEPLINK_PATH, username) response", "label": 0}, {"snippet_id": 33804, "code": "\nfrom lxml import html from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from", "label": 0}, {"snippet_id": 15121, "code": "(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField(", "label": 0}, {"snippet_id": 81621, "code": " _compute_total_scubscriptions(self): counter=0 for subscription in self.fit_subscriptions: counter +=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event", "label": 0}, {"snippet_id": 41094, "code": "'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/') data={'title' :['Product Title'], ", "label": 0}, {"snippet_id": 14862, "code": " return user def auth_check_password(user, password): print('auth_check_password', user.password_hash, password) return check_password_hash(user.password_hash, password) db_init() login_manager=LoginManager", "label": 1}, {"snippet_id": 67384, "code": " get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event, Attribute, Org, Tag, Object", "label": 1}, {"snippet_id": 9506, "code": "(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\"", "label": 0}, {"snippet_id": 23881, "code": ") try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"", "label": 0}, {"snippet_id": 7688, "code": "\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\")", "label": 0}, {"snippet_id": 55558, "code": "\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir():", "label": 0}, {"snippet_id": 31731, "code": " request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting", "label": 1}, {"snippet_id": 6480, "code": " except(KeyError, ValueError): logger.debug(\"Can't retrieve CSRF token, state, or code\", exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token: logger.debug(\"CSRF token mismatch\") return", "label": 0}, {"snippet_id": 72647, "code": ".save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent=send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to", "label": 1}, {"snippet_id": 26607, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was", "label": 0}, {"snippet_id": 54296, "code": "(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ", "label": 0}, {"snippet_id": 19280, "code": " should be unreachable.\") def fetch_and_execute_function_to_run(self, key): \"\"\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget", "label": 0}, {"snippet_id": 30984, "code": " 'POST']) def editGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') editgrudge=session.query(Grudge).filter_by(id=grudge_id).one() grudget=session.query(Grudget", "label": 0}, {"snippet_id": 77178, "code": ": \"\"\"Prepares the base URL for fetching tiles.\"\"\" base_url=_TILE_BASE_URL %(self.target_url, self.request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION", "label": 0}, {"snippet_id": 49619, "code": " my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode", "label": 0}, {"snippet_id": 56924, "code": " template_name='transactions/concept_list.html' model=BaseConcept context_object_name='concepts' paginate_by=8 queryset=None header=gettext_lazy('Concepts') request=None filter=None filter_data=None is_filtered", "label": 0}, {"snippet_id": 52624, "code": " h.send_team_invite(emails_lst[i], sender, message, team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(\"/actions-board\") def display_user_actions_board(): \"\"\"Retrieve user and", "label": 0}, {"snippet_id": 59111, "code": " search by :return: invite if found :raise: Http404 if not found ''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email", "label": 0}, {"snippet_id": 17930, "code": "</strong>'), 'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed!</strong> Incorrect password.'), 'danger') return flask", "label": 0}, {"snippet_id": 50024, "code": "/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request", "label": 0}, {"snippet_id": 52284, "code": "): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id", "label": 0}, {"snippet_id": 15528, "code": " datetime.strptime(str, '%Y-%m-%d') if get_command('start_day'): form.start_day.data=str_to_datetime(get_command('start_day')[0]['start_day']) if get_command('number_of_days'): form.number_of_days.data", "label": 0}, {"snippet_id": 34843, "code": ", 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template", "label": 0}, {"snippet_id": 55335, "code": ": \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat(self.path", "label": 0}, {"snippet_id": 1459, "code": "'\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 11705, "code": ", } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings", "label": 0}, {"snippet_id": 40197, "code": "=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators=[URLValidator()]) qa_begun=models.BooleanField(default=False) script_type=models.CharField", "label": 1}, {"snippet_id": 69623, "code": " installer hooks defined in plugins \"\"\" hook=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected", "label": 0}, {"snippet_id": 54934, "code": "\tprint \"Answer ID Number, Book Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: ", "label": 1}, {"snippet_id": 74236, "code": " passphrase=self.request.POST[\"key\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message", "label": 0}, {"snippet_id": 5446, "code": " UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US", "label": 0}, {"snippet_id": 30267, "code": "//www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s' % access_token) h=httplib2.Http() result=json.loads(h.request(url, 'GET')[1]) if result.get('error') is not None: response=make_response(json.dumps", "label": 0}, {"snippet_id": 27880, "code": " key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they", "label": 0}, {"snippet_id": 3213, "code": " login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS',", "label": 0}, {"snippet_id": 15183, "code": " '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) new_value=FloatField('Delta',[validators.required()]) class ChangeInputAddDelta(FlaskForm): def", "label": 0}, {"snippet_id": 73816, "code": " positions_list_data(request, sort_by): return{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'applicationsForm': ImportApplicationsForm, 'positions':", "label": 0}, {"snippet_id": 6645, "code": ", 'POST']) def login(): form=LoginForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user", "label": 0}, {"snippet_id": 77932, "code": " from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were", "label": 0}, {"snippet_id": 73250, "code": ".cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100)", "label": 0}, {"snippet_id": 6330, "code": " logger.error('id_token issued by non-trusted issuer: %s' % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid", "label": 0}, {"snippet_id": 61882, "code": ".extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page", "label": 0}, {"snippet_id": 56655, "code": " aasa_redirect urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people/me/login$', login_redirect, name=", "label": 1}, {"snippet_id": 13979, "code": " tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to", "label": 0}, {"snippet_id": 52486, "code": " project_object.updated } if project_object.user_id: results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=['POST'", "label": 0}, {"snippet_id": 53843, "code": " stderr else 0, ]) @property def project(self): return self.step.project if self.step else None @property def results_cache_path(self) -> str: \"\"\" Location where step report is cached between sessions to", "label": 0}, {"snippet_id": 10527, "code": " import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators", "label": 0}, {"snippet_id": 37989, "code": "=ExtractedChemicalFormSet, form=ExtractedChemicalForm ) return(ExtractedTextForm, ChemicalFormSet) def two(): FunctionalUseFormSet=make_formset(parent, child) return(ExtractedTextForm, FunctionalUseFormSet) def three():", "label": 0}, {"snippet_id": 390, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 84675, "code": ", **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True", "label": 0}, {"snippet_id": 73755, "code": ", 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): save_position_to_user(request) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition", "label": 0}, {"snippet_id": 22791, "code": "(str): The type of the event being logged. extra_data: Additional information to log. \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler", "label": 0}, {"snippet_id": 52630, "code": " team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(\"/actions-board\") def display_user_actions_board(): \"\"\"Retrieve user and project data from db, render projects on action page. \"", "label": 0}, {"snippet_id": 47212, "code": "(extracted_text__data_document__data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg_name + \"_raw_extracted_records.csv\"), field_header_map={\"id\": \"ExtractedChemical_id\"}, use_verbose_names=False)", "label": 0}, {"snippet_id": 17268, "code": ", 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset", "label": 0}, {"snippet_id": 72104, "code": " in Ganesha.fsals_available(): raise NFSException(\"Cannot create this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id", "label": 0}, {"snippet_id": 82642, "code": "(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status", "label": 0}, {"snippet_id": 29106, "code": " thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be", "label": 0}, {"snippet_id": 65801, "code": ".Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button.connect(\"clicked\", self.on_tab_close_button_clicked, page_instance) close_button.add(close_image", "label": 0}, {"snippet_id": 19447, "code": " of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1)", "label": 1}, {"snippet_id": 10560, "code": "(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login", "label": 0}, {"snippet_id": 36484, "code": "'//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures", "label": 0}, {"snippet_id": 38653, "code": " get_absolute_url(self): return reverse('data_document', kwargs={'pk': self.pk}) def get_abstract_filename(self): ext=self.filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self", "label": 0}, {"snippet_id": 72165, "code": " export_id): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) return ganesha_conf.get_export(export_id).to_dict()", "label": 0}, {"snippet_id": 31697, "code": " @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert ", "label": 1}, {"snippet_id": 21753, "code": " \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process", "label": 0}, {"snippet_id": 3120, "code": " redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url", "label": 0}, {"snippet_id": 48259, "code": " def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt", "label": 0}, {"snippet_id": 67472, "code": "() return context def get_queryset(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request.GET.get('tag') if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get", "label": 0}, {"snippet_id": 46977, "code": " render(request, template_name,{'datagroup': datagroup, 'form': form, 'header': header, 'groups': groups}) @login_required() def data_group_delete(request, pk, template_name='data_source/datasource_confirm_delete", "label": 0}, {"snippet_id": 78540, "code": "') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject", "label": 1}, {"snippet_id": 58485, "code": ", \"title\": \"view_introduction\" } }, onboarding.PREVIEW_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" ", "label": 0}, {"snippet_id": 79967, "code": ".enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"\"\" Action to open", "label": 1}, {"snippet_id": 75452, "code": " else: format_form=FormatChecklistForm(instance=candidate.thesis.format_checklist) context={'candidate': candidate, 'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html", "label": 0}, {"snippet_id": 15049, "code": "'source_type']='model' else: ts['source_type']='timeseries' time_series.append(ts) time_series.sort(key=lambda ts_item: ts_item['result_type'], reverse=False) return render_template('results.html', results", "label": 0}, {"snippet_id": 67491, "code": ".filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id=level", "label": 0}, {"snippet_id": 5708, "code": ".\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com',", "label": 0}, {"snippet_id": 77776, "code": ", resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def", "label": 1}, {"snippet_id": 22472, "code": " \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None", "label": 1}, {"snippet_id": 51181, "code": " kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs) def add_option(self, *args, **kwargs): self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args", "label": 0}, {"snippet_id": 39056, "code": " evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a \"falsy\" property.", "label": 0}, {"snippet_id": 60870, "code": " \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring", "label": 0}, {"snippet_id": 78967, "code": " be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id", "label": 0}, {"snippet_id": 79593, "code": "'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']: users=_get_admin_users_from_organasition", "label": 0}, {"snippet_id": 21063, "code": " process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name", "label": 0}, {"snippet_id": 45288, "code": "': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc(", "label": 0}, {"snippet_id": 84477, "code": " allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not(allow_read or allow_write): return", "label": 0}, {"snippet_id": 10265, "code": ".LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ ", "label": 0}, {"snippet_id": 79714, "code": ", accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError", "label": 0}, {"snippet_id": 81163, "code": "'subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner', '=', partner.id)]) bc_tickets", "label": 0}, {"snippet_id": 66609, "code": " widget): composite_unlock_entry=self.builder.get_object(\"composite_unlock_entry\") composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") if composite_unlock_entry.get_text", "label": 0}, {"snippet_id": 36594, "code": " show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id", "label": 0}, {"snippet_id": 68084, "code": "/threat_hunter' def hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.delete() return redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream", "label": 0}, {"snippet_id": 32289, "code": " self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow", "label": 0}, {"snippet_id": 22222, "code": " redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None", "label": 0}, {"snippet_id": 77362, "code": " if not server_vars.has_key(\"projection\"): server_vars[\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars[\"dbType\"", "label": 0}, {"snippet_id": 9452, "code": "\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email,", "label": 0}, {"snippet_id": 48406, "code": " docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form(request, pk, template_name=('product_curation/' 'link_product_form", "label": 0}, {"snippet_id": 4776, "code": " users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self)", "label": 0}, {"snippet_id": 79546, "code": " want to asign the data request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time", "label": 0}, {"snippet_id": 40159, "code": " from django.db import models from django.urls import reverse from django.core.validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info import CommonInfo from.data_document", "label": 0}, {"snippet_id": 45737, "code": ".get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer'] if request.POST['referer", "label": 1}, {"snippet_id": 75149, "code": " keywords contained invisible characters that we\\'ve removed. Please make sure your keywords are correct in the information section below.') return HttpResponseRedirect(reverse('candidate_home', kwargs", "label": 0}, {"snippet_id": 61905, "code": " False else: return True def validate_not_using_analytics(page): \"\"\"Scan for common analytics scripts anywhere in the page Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat", "label": 0}, {"snippet_id": 3757, "code": "(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 57459, "code": " None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) if", "label": 0}, {"snippet_id": 55598, "code": "=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files]", "label": 0}, {"snippet_id": 5359, "code": "'login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register", "label": 1}, {"snippet_id": 23021, "code": " exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback.format_exc()", "label": 0}, {"snippet_id": 57734, "code": "\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id)", "label": 1}, {"snippet_id": 14529, "code": " True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), ", "label": 0}, {"snippet_id": 62095, "code": "\\d+.\\d+') if 'Server' not in page.headers: return True else: matches=version_regex.search(page.headers['Server']) if not matches: return True elif len(matches.group()) > 1: return False else: return True", "label": 0}, {"snippet_id": 76929, "code": "\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger", "label": 0}, {"snippet_id": 74229, "code": " access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner() try: passphrase=self.request.POST[\"key\"] except Exception: return False if passphrase: try: self.storage.report", "label": 0}, {"snippet_id": 64153, "code": ".logger.debug('Performing local logout for{!r}'.format(user)) session.clear() location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') location=request.form.get('RelayState', location) return LogoutPayload", "label": 1}, {"snippet_id": 64205, "code": " @authn_views.route('/saml2-ls', methods=['POST']) def logout_service(): \"\"\"SAML Logout Response endpoint The IdP will send the logout response to this view, which will process it with pysaml2 help and log the", "label": 0}, {"snippet_id": 33048, "code": ", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', ", "label": 0}, {"snippet_id": 82107, "code": "-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w.']+\", urls)", "label": 0}, {"snippet_id": 35862, "code": " PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' :", "label": 0}, {"snippet_id": 3409, "code": "\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): ", "label": 0}, {"snippet_id": 17853, "code": ") return flask.render_template('password_reset.html', form=form) @bp.route('/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form", "label": 0}, {"snippet_id": 71536, "code": "=models.Session.query().count() self.assertTrue(s_count==1) def test_laod_session_session_id_no_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1)", "label": 0}, {"snippet_id": 5701, "code": "/example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', ", "label": 0}, {"snippet_id": 25160, "code": ")].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in", "label": 0}, {"snippet_id": 9010, "code": " lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login", "label": 0}, {"snippet_id": 16942, "code": "=new_game) if t.power_assignment==Tournament.PREFERENCES: new_game.assign_powers_from_prefs() for tp in g: gp=GamePlayer.objects.get(player=tp.player, game=new_game) current[gp.id]=gp.power data.append(current", "label": 0}, {"snippet_id": 63158, "code": " timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce':", "label": 0}, {"snippet_id": 11814, "code": ".auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest", "label": 0}, {"snippet_id": 14314, "code": " 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines", "label": 0}, {"snippet_id": 40535, "code": ": self.client.logout() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text", "label": 0}, {"snippet_id": 58701, "code": ".contrib.auth.models import User from django.contrib.sites.models import Site from django.conf import settings from django.core.mail import send_mail from django.core.urlresolvers import reverse from django", "label": 0}, {"snippet_id": 52096, "code": "(invite_dict) return render_template('dashboard.html', teams_list=teams_list, invites_list=invites_list, displayname=user_object.displayname) else: return redirect(\"/\") @app.route(\"/new-team\", methods=", "label": 1}, {"snippet_id": 1325, "code": " gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from", "label": 0}, {"snippet_id": 34403, "code": "' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait", "label": 0}, {"snippet_id": 44732, "code": "=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc", "label": 0}, {"snippet_id": 78692, "code": "(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context", "label": 0}, {"snippet_id": 44384, "code": ") try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self.live_server_url +f'/datadocument", "label": 0}, {"snippet_id": 84578, "code": " None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) changes_qs=changes_qs.filter(article__content_type=get_ct(group), article__object_id=group.id) allow_read=has_read_perm(request", "label": 0}, {"snippet_id": 83443, "code": ".is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new=False def save(self, *args, **kwargs): editor_ip=self.cleaned_data", "label": 0}, {"snippet_id": 42840, "code": "', follow=True) self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX'", "label": 1}, {"snippet_id": 39469, "code": "\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__(self): return self.raw_chem_name", "label": 0}, {"snippet_id": 74887, "code": " candidate=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type'", "label": 0}, {"snippet_id": 44428, "code": "'12_product_to_puc', '13_puc_tag' ] class dotdict(dict): \"\"\"dot.notation access to dictionary attributes\"\"\" __getattr__=dict.get __setattr__=dict.__setitem__ __delattr__=dict.__delitem__ def load_model_objects(): user", "label": 1}, {"snippet_id": 62681, "code": ".test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self, eppn,", "label": 0}, {"snippet_id": 51472, "code": " old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have version{0}, but need version{1}.\".format(VERSION, required_version),32) def windows_program_exists", "label": 0}, {"snippet_id": 84204, "code": "(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article': True} else: template_params={'form'", "label": 0}, {"snippet_id": 55027, "code": ".path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized(p) class FSPath(object): \tdef __init__(self,path): \t\tself.path=path \tdef __sub__(self", "label": 0}, {"snippet_id": 65620, "code": ".FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run", "label": 0}, {"snippet_id": 18673, "code": " variables and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin.", "label": 1}, {"snippet_id": 84906, "code": "] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match: found_links.append({'title': article.title}) for old_title in", "label": 0}, {"snippet_id": 33917, "code": ".browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup", "label": 0}, {"snippet_id": 55707, "code": ".path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder", "label": 0}, {"snippet_id": 11806, "code": " django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import", "label": 0}, {"snippet_id": 24279, "code": "): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager.", "label": 0}, {"snippet_id": 32201, "code": " self.position) self.read() return token elif self.char=='|': token=Token(TokenType.PIPE, None, self.position) self.read() return token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self", "label": 0}, {"snippet_id": 20529, "code": "=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor", "label": 1}, {"snippet_id": 61473, "code": " comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man", "label": 0}, {"snippet_id": 3420, "code": "'LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', ", "label": 0}, {"snippet_id": 55638, "code": "\t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__", "label": 0}, {"snippet_id": 7572, "code": " render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 45064, "code": ".now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects", "label": 0}, {"snippet_id": 58845, "code": "=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES, default='tester') course=models.ForeignKey(Course) enroll_unit_code=models.ForeignKey(EnrollUnitCode,", "label": 0}, {"snippet_id": 38043, "code": " from django.db import models from django.urls import reverse from django.utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import", "label": 0}, {"snippet_id": 9994, "code": " else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders:", "label": 0}, {"snippet_id": 3108, "code": ") return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings", "label": 0}, {"snippet_id": 60405, "code": "=template_loader, autoescape=True) self.jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u: urllib.parse.quote_plus(u) self.jinja_env.filters[\"escape_sqlite\"", "label": 0}, {"snippet_id": 78566, "code": " logging.exception(\"Error sending notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'", "label": 0}, {"snippet_id": 32, "code": " django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request", "label": 0}, {"snippet_id": 80020, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result:", "label": 0}, {"snippet_id": 29255, "code": " dict( admin_base_template=admin.base_template, admin_view=admin.index_view, h=helpers, get_url=url_for ) admin=Admin(app, name='benwaonline', template_mode='bootstrap3') setup_adminviews(admin, db) register_blueprints", "label": 0}, {"snippet_id": 22339, "code": " fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent", "label": 0}, {"snippet_id": 30306, "code": " !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response.headers['Content-Type']='application/json' return response if result['issued_to'] !=CLIENT_ID", "label": 0}, {"snippet_id": 77834, "code": "}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix", "label": 0}, {"snippet_id": 14473, "code": "=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request):", "label": 0}, {"snippet_id": 46902, "code": " form, 'header': header, 'datasource': datasource, 'groups': groups} return render(request, template_name, context) @login_required() def data_group_update(request, pk, template_name='data_group/datagroup_form", "label": 0}, {"snippet_id": 3118, "code": "'get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\"", "label": 0}, {"snippet_id": 84093, "code": "=get_object_or_404(group_qs, **{group_slug_field: group_slug}) group_ct=get_ct(group) article_args.update({'content_type': group_ct, 'object_id': group.id}) allow_read=has_read_perm(request.user, group", "label": 0}, {"snippet_id": 27174, "code": " directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config:", "label": 0}, {"snippet_id": 53322, "code": ": code=InspectLoader.source_to_code(source_code, step.source_path) except SyntaxError as error: return render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path) setattr", "label": 0}, {"snippet_id": 70376, "code": " newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 66635, "code": ".logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context().add_class(", "label": 0}, {"snippet_id": 32727, "code": " self.command=command self.args=args self.args.insert(0, command) self.pid=None def execute(self, builtins): if self.command in builtins: builtins[self.command](*self.args) else: pid=os.fork() if pid==0", "label": 0}, {"snippet_id": 45466, "code": "'data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1 if doc.detail_page_editable else 0 ParentForm, ChildFormSet=create_detail_formset", "label": 0}, {"snippet_id": 34044, "code": "(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn", "label": 0}, {"snippet_id": 66404, "code": ".ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application", "label": 0}, {"snippet_id": 43315, "code": " relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id", "label": 0}, {"snippet_id": 83599, "code": " None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_qs=article_qs.filter(content_type=get_ct(group), object_id=group.id) return article_qs, group def get_articles_for_object", "label": 0}, {"snippet_id": 66547, "code": " composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\"", "label": 0}, {"snippet_id": 27117, "code": " plasma_directory. include_webui: Boolean flag indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format", "label": 0}, {"snippet_id": 54831, "code": "\"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing() \t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments", "label": 1}, {"snippet_id": 68725, "code": "\nfrom django import forms class SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder", "label": 1}, {"snippet_id": 51239, "code": "(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args) self._check_call(args, env=self._context.env, shell=True, *", "label": 0}, {"snippet_id": 9818, "code": "=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else:", "label": 0}, {"snippet_id": 3522, "code": ".client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths:", "label": 0}, {"snippet_id": 76397, "code": "\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str(rect_of_tiles),", "label": 0}, {"snippet_id": 62884, "code": ".startswith(idp_url)) def acs(self, url, eppn, check_fn): \"\"\" common code for the tests that need to access the assertion consumer service and then check the side effects of this access. :param url: the", "label": 1}, {"snippet_id": 31063, "code": "(editgrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge", "label": 0}, {"snippet_id": 18504, "code": "{2})[a-zA-Z0-9._]+(?<![_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_", "label": 1}, {"snippet_id": 15147, "code": "'Final input',[validators.required()], choices=[]) class ChangeInputNewValue(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeInputNewValue, self).__init__(csrf_enabled=csrf_enabled", "label": 0}, {"snippet_id": 32811, "code": " self.base=base self.redirections=redirections def execute(self, builtins): with self.redirections: self.base.execute(builtins) def wait(self): self.base.wait() class RedirectionHelper: ''' Helps perform", "label": 0}, {"snippet_id": 39934, "code": ": return 'Notes for{}'.format(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before approving, please add a note explaining your", "label": 1}, {"snippet_id": 21697, "code": "\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info", "label": 0}, {"snippet_id": 44091, "code": " should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn", "label": 0}, {"snippet_id": 68666, "code": " hunt.stop() if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.start() return redirect('twitter_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt,", "label": 0}, {"snippet_id": 68936, "code": "/nYjUt4Mtc pVsVYIB7oIDIbImODm8ggsgrIzqxOzQVP1zsCGek5U6QFc9GYrQ+Wv3/fG8hfkDn xXLww0OGaEQxfodm8cLFZ5b8JaG3+Yxfe7JkNclwvRimvlAjqIiW5OK0vvfHco+Y gANhQrlMnTx//IdZssaxvYytSHpPZTYw+qPEjbBJOLpoLrz8ZafN1uekpAqQjffI", "label": 0}, {"snippet_id": 10345, "code": ".has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins", "label": 0}, {"snippet_id": 30554, "code": ".filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user.id except: return None @app.route('/grudget/<int:grudget_id>/grudge", "label": 1}, {"snippet_id": 14315, "code": "'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines", "label": 0}, {"snippet_id": 66279, "code": "\"composite_unlock_button\") composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked) keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button", "label": 0}, {"snippet_id": 47582, "code": ".objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0", "label": 0}, {"snippet_id": 47338, "code": " render(request, template_name,{'object_list': out}) @login_required() def data_source_detail(request, pk, template_name='data_source/datasource_detail.html'): datasource=get_object_or_404(DataSource, pk", "label": 0}, {"snippet_id": 472, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 14627, "code": ": state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url", "label": 0}, {"snippet_id": 44035, "code": " +'/datasources/' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"//table[@id='sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table", "label": 0}, {"snippet_id": 51341, "code": " def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username, look_for_keys", "label": 0}, {"snippet_id": 46696, "code": " good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType.objects.get(pk=1) code=line['document_type", "label": 0}, {"snippet_id": 20950, "code": ".all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray", "label": 0}, {"snippet_id": 39365, "code": "'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def indexing(self):", "label": 0}, {"snippet_id": 82038, "code": "'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message}) created", "label": 0}, {"snippet_id": 63919, "code": ".args.get('required_loa', None) authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info", "label": 0}, {"snippet_id": 624, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 4205, "code": "/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 22342, "code": " for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs", "label": 0}, {"snippet_id": 23039, "code": " message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n", "label": 0}, {"snippet_id": 58024, "code": " send_email, get_onboarding_percentage from core.common import onboarding from core.common.utils import get_onboarding_setting, ONBOARDING_STEPS_DEFAULT_TEMPLATE, \\ get_onboarding_status_with_settings @ddt class", "label": 0}, {"snippet_id": 78962, "code": " Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email", "label": 0}, {"snippet_id": 33494, "code": "'pucs_n']) def test_dtxsid_dds_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats", "label": 0}, {"snippet_id": 40724, "code": " DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the", "label": 0}, {"snippet_id": 42778, "code": " group_count=QAGroup.objects.filter(extraction_script_id=pk).count() self.assertTrue(group_count==1) self.assertTrue(Script.objects.get(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id=pk).pk", "label": 0}, {"snippet_id": 54091, "code": "/') def homepage(): q=Politician.all() q.order('-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home", "label": 0}, {"snippet_id": 55295, "code": "(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) \tdef chown(self,uid=-1,gid=-1): \t\treturn os.chown(self.path,uid,gid) \tdef lchflags", "label": 0}, {"snippet_id": 13410, "code": ".decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging", "label": 0}, {"snippet_id": 71277, "code": " self.session.data.get(key): self.session.data[key]=[] return self.session.data[key].append({ 'message': message, 'level': level}) add_message=_add_message def _get_messages(self, key='_messages'): try", "label": 0}, {"snippet_id": 82346, "code": " link_redirect ) urlpatterns=[ re_path(r'admin/', admin.site.urls), re_path(r'^$', HomeView.as_view(), name='home-view'), re_path(r'^success/(?P<pk>(\\d)+)/$', SuccessUrlView.as_view(), name='success-url-view", "label": 0}, {"snippet_id": 81208, "code": ".subscription_counter +=subscription_update_counter if event_cat=='bootcamp': if bc_monthly and bc_monthly.subscription_is_active: return if cf_monthly and cf_monthly.subscription_is_active: return if bc_tickets:", "label": 0}, {"snippet_id": 9279, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 66185, "code": " unlock_database_stack_switcher=self.builder.get_object(\"unlock_database_stack_switcher\") unlock_database_stack_switcher.set_stack(stack) password_unlock_stack_page=self.builder.get_object(\"password_unlock_stack_page", "label": 0}, {"snippet_id": 81183, "code": "([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bz_tickets'), ('subscription_partner", "label": 0}, {"snippet_id": 56523, "code": "): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link", "label": 1}, {"snippet_id": 13767, "code": " else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status", "label": 0}, {"snippet_id": 17020, "code": ".the_set} for gp in g.gameplayer_set.all(): current[gp.power.name]=gp.roundplayer() data.append(current) round_players=r.roundplayer_set.count() expected_games=(round_players +6) // 7 if expected_games <", "label": 0}, {"snippet_id": 48760, "code": "(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product", "label": 0}, {"snippet_id": 83316, "code": "), required=False, widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class Meta: model=Article exclude=('creator", "label": 0}, {"snippet_id": 53761, "code": " SharedCache class Report(object): \"\"\" The display management class for each step in a project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element", "label": 0}, {"snippet_id": 68478, "code": ".objects.order_by('id') query=query.annotate(count=Count('tweet')) return query def get(self, request): self.object_list=self.get_queryset(request) context=self.get_context_data() return render(request,", "label": 0}, {"snippet_id": 33226, "code": "')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for", "label": 0}, {"snippet_id": 50286, "code": "/login') @app.route(\"/logout\") def logout(): session.clear() if 'return_url' in request.args: return redirect(request.args['return_url']) else: return redirect('/') @app.route(\"/tmp\", methods=[\"POST\"])", "label": 0}, {"snippet_id": 21454, "code": ", \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process", "label": 0}, {"snippet_id": 35807, "code": "'HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name", "label": 0}, {"snippet_id": 9856, "code": "(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"", "label": 0}, {"snippet_id": 14647, "code": "), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login", "label": 0}, {"snippet_id": 1727, "code": " HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation", "label": 1}, {"snippet_id": 16757, "code": "=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) if request.method=='POST': PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra", "label": 0}, {"snippet_id": 49389, "code": "=True) @login_required def data_document_edit(request, pk, template_name=('data_document/' 'data_document_form.html')): datadocument=get_object_or_404(DataDocument, pk=pk) form=DataDocumentForm(request", "label": 0}, {"snippet_id": 55994, "code": ".set_params(experience_share_id=experience_share_id, logged_person_id='-1') \\ .execute() desc=(experience.description[:77] +'...') if len(experience.description) > 77 else experience.description preview_content", "label": 0}, {"snippet_id": 54927, "code": ",chapter,problem_number,prob_code)) \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items()", "label": 1}, {"snippet_id": 12726, "code": " } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore", "label": 0}, {"snippet_id": 67519, "code": " if keyword is not None: query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST", "label": 0}, {"snippet_id": 11827, "code": ".http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators", "label": 0}, {"snippet_id": 11749, "code": ": context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id", "label": 0}, {"snippet_id": 21644, "code": "(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,...", "label": 0}, {"snippet_id": 16911, "code": ".append(current) else: games=_seed_games(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name':", "label": 0}, {"snippet_id": 53964, "code": "-ready dom object of those contents without adding them to the actual report body. This is useful for creating intermediate body values for display while the method is still executing. :return: A dom string", "label": 0}, {"snippet_id": 58926, "code": "=email, code=uuid4().hex, status='pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return self.email", "label": 0}, {"snippet_id": 3646, "code": "://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/", "label": 0}, {"snippet_id": 74160, "code": "(ReportBasePartial, views.edit.CreateView): form_class=forms.ReportCreateForm EVAL_ACTION_TYPE=\"CREATE\" def get_success_url(self): return reverse(self.success_url, kwargs={\"step\": 0, \"uuid\": self.object", "label": 0}, {"snippet_id": 45740, "code": " render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document", "label": 1}, {"snippet_id": 64721, "code": " deductions.append({'points': points, 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points // len", "label": 0}, {"snippet_id": 81956, "code": ") clicktracker.save() object.save() return link_redirect(request, pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) class URLUpdateView(LoginRequiredMixin, UpdateView)", "label": 0}, {"snippet_id": 84499, "code": ", **article_args) old_title=article.changeset_set.filter( revision=revision+1).get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request", "label": 1}, {"snippet_id": 55189, "code": "\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn FSPath(os.path.realpath(self.path)) \tdef relpath(self,start=None): \t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) ", "label": 0}, {"snippet_id": 83223, "code": "(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job", "label": 0}, {"snippet_id": 62945, "code": "=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr=auth_response(token, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data", "label": 0}, {"snippet_id": 67829, "code": "(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model", "label": 0}, {"snippet_id": 35417, "code": " product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects", "label": 0}, {"snippet_id": 44405, "code": ".browser.get(dd_url) try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') except NoSuchElementException: self.fail(\"Absence of weight_fraction_type element raised exception\"", "label": 0}, {"snippet_id": 52662, "code": ".get_projects_by_user(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]) def logout_user(): \"\"\" \"\"\" session.clear() return redirect(\"/\") @app.route(\"", "label": 0}, {"snippet_id": 17261, "code": "/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, 'rounds/game_score.html", "label": 0}, {"snippet_id": 56012, "code": " preview_content={'st': experience.title, 'sd': desc, 'si': experience.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else:", "label": 0}, {"snippet_id": 20861, "code": ".path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def start_redis(self): \"\"\"Start the Redis servers", "label": 0}, {"snippet_id": 20749, "code": ".node_ip_address self._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit", "label": 0}, {"snippet_id": 52272, "code": " return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get", "label": 0}, {"snippet_id": 9785, "code": "( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request", "label": 0}, {"snippet_id": 4331, "code": " with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 4404, "code": "'policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"", "label": 0}, {"snippet_id": 57737, "code": ", onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status", "label": 1}, {"snippet_id": 72885, "code": " render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) @login_required(login_url='/login/', redirect_field_name=None) def positions(request):", "label": 1}, {"snippet_id": 32411, "code": "=[] while self.accept(TokenType.WORD): args.append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE", "label": 0}, {"snippet_id": 78119, "code": "']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra['value'] or", "label": 0}, {"snippet_id": 17578, "code": "='POST' and form.validate(): user=models.User(username=form.username.data.strip(), email=form.email.data.strip(), password=form.password.data) user.registration_ip=ip_address(flask.request.remote_addr)", "label": 0}, {"snippet_id": 68788, "code": "', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in", "label": 0}, {"snippet_id": 80632, "code": " print(f\"Setting BiFi approximate wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos,", "label": 0}, {"snippet_id": 39181, "code": "=exclude) if self.tracker.has_changed('group_type_id') and self.extracted_docs(): msg=\"The Group Type may not be changed once extracted documents have been associated with the group.\" raise ValidationError({", "label": 0}, {"snippet_id": 33725, "code": ".assertEqual(response.status_code, 200) self.assertContains(response, 'Download Uncurated Chemicals') rc=RawChem.objects.filter(dsstox_id__isnull=True).first() response=self.client.get('/dl_raw_chems/') rc_row=f", "label": 1}, {"snippet_id": 81497, "code": " new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00')", "label": 0}, {"snippet_id": 6193, "code": ", **kwargs): if g.oidc_id_token is None: return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow", "label": 0}, {"snippet_id": 15979, "code": "'/register', methods=['GET', 'POST']) def view_register(): if current_user.is_authenticated: return redirect(url_for('view_home')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user", "label": 1}, {"snippet_id": 9585, "code": "[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration", "label": 0}, {"snippet_id": 17882, "code": " flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user.password_hash", "label": 0}, {"snippet_id": 53195, "code": "(update_url, data) self.assertEqual(self.view.get_object().how_soon, None) data={ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': '+26334465657456774567', 'email'", "label": 0}, {"snippet_id": 1330, "code": "(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r", "label": 0}, {"snippet_id": 3067, "code": "), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce'", "label": 0}, {"snippet_id": 40948, "code": " password='specialP@55word') def test_absent_extracted_text(self): for dd in DataDocument.objects.all(): ddid=dd.id resp=self.client.get('/datadocument/%s/' % ddid) self.assertEqual(resp.status_code, 200, ", "label": 0}, {"snippet_id": 50085, "code": " FileNotFoundError: editor_content=\"\" elif 'tempFile' in session or 'currentFile' in session: if 'tempFile' in session: filepath=session['tempFile'] if 'currentFile' in session and('email' in session) or('social", "label": 0}, {"snippet_id": 27743, "code": ". By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly", "label": 1}, {"snippet_id": 11219, "code": "[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry", "label": 0}, {"snippet_id": 72484, "code": " HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django", "label": 1}, {"snippet_id": 32148, "code": " token cannot be correctly generated from it. ''' while self.char and self.char.isspace(): self.read() if self.char==None: return Token(TokenType.EOF, None, self.position) elif self.char=='>': start=self", "label": 0}, {"snippet_id": 10242, "code": "'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[", "label": 0}, {"snippet_id": 61745, "code": ": \"\"\" This method takes a queryset and scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that", "label": 0}, {"snippet_id": 12962, "code": " def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in", "label": 0}, {"snippet_id": 37839, "code": " self.fields['SID']=forms.CharField(max_length=50) self.fields['SID'].initial=self.instance.dsstox.sid self.fields['SID'].disabled=True class Meta: model=ExtractedChemical fields='__all__' def include_clean_comp_data_form", "label": 0}, {"snippet_id": 67674, "code": "'category') type=self.request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) return query class AttributeListView(PaginationMixin", "label": 0}, {"snippet_id": 30761, "code": "]: editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget=editedGrudget) @app.route('/grudget/<int:grudget_id>/delete/", "label": 0}, {"snippet_id": 46953, "code": ".referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled=True groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects", "label": 0}, {"snippet_id": 12435, "code": " logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers", "label": 0}, {"snippet_id": 16333, "code": ".cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True: i, created=RoundPlayer.objects.get_or_create(player=p, the_round=r) try: i.full_clean() except", "label": 0}, {"snippet_id": 39696, "code": " get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if", "label": 0}, {"snippet_id": 17710, "code": " return flask.abort(404) if flask.g.user: return flask.redirect(redirect_url()) if payload is None: form=forms.PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate", "label": 0}, {"snippet_id": 29159, "code": " import LoginManager from flask_uploads import patch_request_class, configure_uploads from werkzeug.utils import find_modules, import_string from config import app_config from benwaonline.database import db", "label": 0}, {"snippet_id": 62809, "code": "': came_from}): response1=self.app.dispatch_request() cookie=response1.headers['Set-Cookie'] return cookie def authn(self, url, force_authn=False): \"\"\" Common code for the tests that need to send an authentication", "label": 1}, {"snippet_id": 79908, "code": " db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in", "label": 0}, {"snippet_id": 7369, "code": " is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License", "label": 0}, {"snippet_id": 80766, "code": " self.lock_all_action.setChecked(False) print(\"Couldn't lock all laser components.\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock", "label": 0}, {"snippet_id": 9337, "code": " settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 28688, "code": "(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter", "label": 1}, {"snippet_id": 45745, "code": "=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset", "label": 1}, {"snippet_id": 27282, "code": " temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options=None, _internal_config=None): self.object_id_seed=object_id_seed self.redis_address=redis_address self", "label": 0}, {"snippet_id": 62620, "code": "/failure' }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config", "label": 1}, {"snippet_id": 63118, "code": " _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time.time(", "label": 0}, {"snippet_id": 6548, "code": "=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized', code=None): return(message, 401,{ 'Content-Type': 'text/plain', })", "label": 1}, {"snippet_id": 28946, "code": " message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or ", "label": 0}, {"snippet_id": 67490, "code": "=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id", "label": 0}, {"snippet_id": 23964, "code": "(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is", "label": 0}, {"snippet_id": 81532, "code": "._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event existence: ' +old_repeating_event.name +', date", "label": 0}, {"snippet_id": 65081, "code": " ValueError('Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed", "label": 0}, {"snippet_id": 27769, "code": " can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events=[] if self.worker.mode=", "label": 1}, {"snippet_id": 6776, "code": " if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash('Your account is confirmed. Thank you!') else: flash('The confirmation link is invalid or has expired", "label": 0}, {"snippet_id": 74281, "code": " \"next\" in request.GET: if re.search(r\"^/[\\W/-]*\", request.GET[\"next\"]): next_url=request.GET[\"next\"] return next_url def dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__", "label": 1}, {"snippet_id": 16493, "code": ") if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1): rp.game_count=1 rp.save() for i in range(sitters): rp=form.cleaned_data['sitter_%d' % i] if rp: rp.game_count=0 rp.save() for i in", "label": 0}, {"snippet_id": 21441, "code": "(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read(", "label": 0}, {"snippet_id": 7686, "code": " strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form", "label": 0}, {"snippet_id": 54954, "code": "\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\", \"+str(book_edition)+\", \"+str(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups) \t\t \t\t def process_hwml(): \thp=HWML_processor()", "label": 1}, {"snippet_id": 19948, "code": " \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData", "label": 0}, {"snippet_id": 65583, "code": "/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 46050, "code": " matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg']=('There are no matching records in the ' 'selected directory.') return render", "label": 0}, {"snippet_id": 6866, "code": " password has been updated.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_password.html\", form=form) @auth.route('/reset', methods=['GET', ", "label": 0}, {"snippet_id": 78100, "code": "=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras", "label": 0}, {"snippet_id": 44924, "code": " self.objects.ehp.pk, 'habits-0-product_surveyed':'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', ", "label": 0}, {"snippet_id": 42846, "code": ") def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText.objects.filter(qa_group=None).filter", "label": 1}, {"snippet_id": 71024, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/'", "label": 0}, {"snippet_id": 25165, "code": " object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index", "label": 0}, {"snippet_id": 7412, "code": " CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"/exams/\", methods=[\"GET\"]) class ExamList(Resource): exam_schema=ExamSchema", "label": 0}, {"snippet_id": 20414, "code": " up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler:", "label": 0}, {"snippet_id": 36108, "code": "'' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids", "label": 0}, {"snippet_id": 6279, "code": ".step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token): \"\"\" Check if `id_token` is a current ID token", "label": 0}, {"snippet_id": 46459, "code": "(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added", "label": 0}, {"snippet_id": 84614, "code": ": changes_qs.order_by('-modified'), 'allow_write': allow_write} if group_slug is not None: template_params['group']=group_slug if extra_context is not None: template_params.update(extra_context) return", "label": 0}, {"snippet_id": 3613, "code": " self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 41656, "code": "'extract_form'], ('ExtractForm should not be included in the page!')) self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context", "label": 0}, {"snippet_id": 75124, "code": "(request, 'Your title contained invisible characters that we\\'ve removed. Please make sure your title is correct in the information section below.') if _user_keywords_changed(thesis, request.POST.getlist", "label": 0}, {"snippet_id": 20265, "code": ".primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel=", "label": 0}, {"snippet_id": 59798, "code": " query async def get_table_definition(self, database_name, table, type_=\"table\"): table_definition_rows=list( await self.execute( database_name, 'select sql from sqlite_master where name=:n and type=:t', {", "label": 0}, {"snippet_id": 16254, "code": "'round_%d' % r.number()]=played data.append(current) if round_num: formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset", "label": 0}, {"snippet_id": 25612, "code": " from __future__ import division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as", "label": 0}, {"snippet_id": 8196, "code": "=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template", "label": 0}, {"snippet_id": 26630, "code": " ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception if the process was already dead. ", "label": 0}, {"snippet_id": 77718, "code": " update_frequency=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification", "label": 0}, {"snippet_id": 67482, "code": "') tag=self.request.GET.get('tag') if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level", "label": 0}, {"snippet_id": 80138, "code": ".setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container=QWidget() container.setLayout(self.layout", "label": 0}, {"snippet_id": 1169, "code": " t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 52889, "code": ".attachment.path).path) if instance.attachment else None, 'file_link': instance.file_download_link if instance.attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update", "label": 0}, {"snippet_id": 59108, "code": " user: request.user :param kwargs: params to search by :return: invite if found :raise: Http404 if not found ''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite", "label": 0}, {"snippet_id": 59812, "code": "=:t', {\"n\": table, \"t\": type_}, ) ) if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name", "label": 0}, {"snippet_id": 46306, "code": "(request, template_name, context) if not context['ext_err']: for doc,text,record in good_records: doc.extracted=True doc.save() text.save() record.save() fs=FileSystemStorage(store) fs.save(str(dg)+'_extracted", "label": 0}, {"snippet_id": 23685, "code": " _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler logger.addHandler(_default_handler", "label": 1}, {"snippet_id": 24708, "code": "-logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\",", "label": 0}, {"snippet_id": 72856, "code": "/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session[", "label": 1}, {"snippet_id": 60842, "code": " or LocalCrashEvent \"\"\" try: proc=Process(self.pid) if proc.is_running(): return True except NoSuchProcess: pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the", "label": 0}, {"snippet_id": 75007, "code": " candidate, 'form': form}) def _user_keywords_changed(thesis, user_request_keywords): db_keywords_info={} for kw in thesis.keywords.all(): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in", "label": 0}, {"snippet_id": 57682, "code": "(signal, **decorator_kwargs): \"\"\" Custom decorator to disable signals. Reference: https://devblog.kogan.com/blog/disable-signal-receivers-in-your-django-tests \"\"\" def our_wrapper(func): @receiver(signal", "label": 0}, {"snippet_id": 23629, "code": "=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus return resources _default_handler=None def setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray", "label": 0}, {"snippet_id": 14010, "code": " An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl", "label": 0}, {"snippet_id": 14097, "code": " running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context", "label": 0}, {"snippet_id": 72788, "code": "(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') @login_required(login_url='/login/', redirect_field_name=None) def import_position(request", "label": 1}, {"snippet_id": 73626, "code": "(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request,", "label": 1}, {"snippet_id": 2264, "code": " continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath:", "label": 1}, {"snippet_id": 5738, "code": ") params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly", "label": 0}, {"snippet_id": 52800, "code": " **kwargs): room_id=self.request.data.get('room') try: self.room=Room.objects.get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data[", "label": 0}, {"snippet_id": 21026, "code": "._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes", "label": 1}, {"snippet_id": 50727, "code": " logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'", "label": 0}, {"snippet_id": 58597, "code": "\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step(onboarding.STEP_2, instructor", "label": 1}, {"snippet_id": 60009, "code": "(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3.OperationalError as e", "label": 0}, {"snippet_id": 15171, "code": "*kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today())", "label": 0}, {"snippet_id": 18274, "code": "\" check_if_exists(): \tUses the pymongo driver(so everything is synchronous) to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions", "label": 1}, {"snippet_id": 67641, "code": " context['objects']=objects_obj context['categories']=event_obj.getUniqCategory() context['types']=event_obj.getUniqType() context['count']=self.object_list.count() return context def get_queryset(self): pk", "label": 0}, {"snippet_id": 42904, "code": "(et.qa_group==new_group) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/{scr.pk}/\\'> Continue QA\".encode(), response.content) scr=Script.objects.annotate(num_ets", "label": 0}, {"snippet_id": 51394, "code": "(target=pump_output_thread, args=(stderr, sys.stderr)) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel.recv_exit_status() def __call__(self, ", "label": 0}, {"snippet_id": 17410, "code": "'<strong>Login failed!</strong> Incorrect username or password.'), 'danger') return flask.redirect(flask.url_for('account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first()", "label": 0}, {"snippet_id": 51574, "code": ", 'rsync':builder.rsync, 'build_step':builder.build_step, 'build_condition':builder.build_condition, 'default_platform':default_platform, 'get_vsvars_environment':get_vsvars_environment, 'SshSession':SshSession", "label": 0}, {"snippet_id": 34414, "code": ".find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal", "label": 0}, {"snippet_id": 42094, "code": ".first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on the page') def test_extracted_count(self):", "label": 0}, {"snippet_id": 69230, "code": " if needed. We install all python packages from PyPI as much as possible in the hub environment. A lot of spawners & authenticators do not have conda-forge packages, but do have pip packages. Keeping all", "label": 0}, {"snippet_id": 46104, "code": "/pdf/' +afn, afn) zf.close() form=include_extract_form(dg) context['all_documents']=dg.datadocument_set.get_queryset() context['extract_form']=form context['msg']='Matching records uploaded successfully.'", "label": 0}, {"snippet_id": 80267, "code": " Position') scan_menu=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock", "label": 0}, {"snippet_id": 39709, "code": " use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index') else: return reverse('qa_extractionscript_index') def", "label": 1}, {"snippet_id": 70883, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 37104, "code": " CSV File'), 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None) super(DataGroupForm, self).__init__(*args, **kwargs) self", "label": 0}, {"snippet_id": 23837, "code": " bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes", "label": 0}, {"snippet_id": 2834, "code": " def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op:", "label": 0}, {"snippet_id": 32742, "code": " builtins[self.command](*self.args) else: pid=os.fork() if pid==0: os.execv(self.full_command, self.args) else: self.pid=pid def wait(self): if self.pid: os.waitpid(self.pid, 0) @property def full_command", "label": 0}, {"snippet_id": 36242, "code": " import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self", "label": 0}, {"snippet_id": 84683, "code": "'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs", "label": 0}, {"snippet_id": 25808, "code": " check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis", "label": 0}, {"snippet_id": 67416, "code": " EventListView(PaginationMixin, ListView): model=Event template_name='threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(*", "label": 0}, {"snippet_id": 48889, "code": " referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk", "label": 0}, {"snippet_id": 65366, "code": " css_provider_resource=Gio.File.new_for_uri( \"resource:///run/terminal/KeepassGtk/keepassgtk.css\") css_provider.load_from_file(css_provider_resource) context=Gtk.StyleContext() context.add_provider_for_screen", "label": 0}, {"snippet_id": 73309, "code": "=forms.ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message) return self.cleaned_data def get_user(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data", "label": 0}, {"snippet_id": 76054, "code": " path for a given filename. This will include version and language information. No protocol/domain is returned. \"\"\" if re.match('^https?://', filename): return filename return resolve_path( project=self", "label": 1}, {"snippet_id": 6497, "code": ") return self.oidc_error() flow=self.flow_for_request() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid", "label": 0}, {"snippet_id": 32721, "code": "''' def __init__(self, command, args): self.command=command self.args=args self.args.insert(0, command) self.pid=None def execute(self, builtins): if self.command in builtins: builtins[self.command](*self", "label": 0}, {"snippet_id": 59748, "code": " get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ", "label": 0}, {"snippet_id": 29391, "code": " return str(current_user.username) +str(current_user.user_id) return \"not logged in \" +str(current_user.is_authenticated) @auth.route('/logout') @login_required def logout(): logout_user() return redirect", "label": 1}, {"snippet_id": 9912, "code": ".to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or", "label": 0}, {"snippet_id": 45718, "code": " pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk", "label": 0}, {"snippet_id": 19238, "code": "\"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\", worker=self.worker):", "label": 0}, {"snippet_id": 4506, "code": " full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 6815, "code": ".email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password'", "label": 0}, {"snippet_id": 33259, "code": " 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup", "label": 0}, {"snippet_id": 56609, "code": " AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa() \\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp.ios\", \"paths\"", "label": 0}, {"snippet_id": 49346, "code": " def data_document_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): doc=get_object_or_404(DataDocument, pk=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc", "label": 0}, {"snippet_id": 80655, "code": "(self.window, title='Set BiFi Motor Position', label='Absolute Position:', value=self.matisse.query('MOTBI:POS?', numeric_result=True)) if success: print(f\"Setting BiFi motor position to{target_pos}.\")", "label": 0}, {"snippet_id": 35900, "code": " instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_delete(request, pk", "label": 0}, {"snippet_id": 28477, "code": ".hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier.decode() return hex_identifier def hex_to_binary(hex_identifier): return binascii.unhexlify(hex_identifier) def get_cuda_visible_devices", "label": 0}, {"snippet_id": 64622, "code": "'InterruptedError', 'IOError', 'IsADirectoryError', 'isinstance', 'issubclass', 'iter', 'KeyboardInterrupt', 'KeyError', 'len', 'list', 'locals', 'LookupError', 'map', 'max', 'MemoryError', 'memoryview', ", "label": 0}, {"snippet_id": 80877, "code": " { 'name': 'FIT BCNL Events', 'category': 'Website', 'version': '10.0.0.0.1', 'author': 'Fundament IT', 'website': 'https://fundament.it/', 'licence': 'AGPL-3', 'depends':['website_event'], 'summary':\"", "label": 1}, {"snippet_id": 53464, "code": ", **render_data ) ) def get_stack_frames(): \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def", "label": 0}, {"snippet_id": 75870, "code": ") from_url_helptext=_( 'Absolute path, excluding the domain. ' 'Example: <b>/docs/</b> or <b>/install.html</b>', ) to_url_helptext=_( 'Absolute or relative URL. Example: ' '<b>/tutorial/install.html</b", "label": 0}, {"snippet_id": 49693, "code": "'] if('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email", "label": 0}, {"snippet_id": 21231, "code": " all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is", "label": 0}, {"snippet_id": 38641, "code": ", 'HH', 'CO',] @property def is_extracted(self): return hasattr(self,'extractedtext') def get_absolute_url(self): return reverse('data_document', kwargs={'pk': self.pk}) def get_abstract_filename(self)", "label": 0}, {"snippet_id": 26446, "code": " this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some errors", "label": 0}, {"snippet_id": 83408, "code": ".cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return", "label": 0}, {"snippet_id": 67168, "code": " import forms class SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder'", "label": 1}, {"snippet_id": 49484, "code": ", we have a problem.\") @login_required def extracted_child_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet", "label": 0}, {"snippet_id": 26890, "code": " plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port", "label": 0}, {"snippet_id": 32052, "code": " The token value(optional). position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class", "label": 0}, {"snippet_id": 20179, "code": "{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message", "label": 0}, {"snippet_id": 35088, "code": " tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name", "label": 0}, {"snippet_id": 27936, "code": ".start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key,", "label": 0}, {"snippet_id": 64731, "code": " None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points // len(test_case_objs) instr_globals={ k: globals()[k] for k in global_whitelist if k in globals() ", "label": 0}, {"snippet_id": 21356, "code": " process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a", "label": 0}, {"snippet_id": 38034, "code": "=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO': one, 'UN': one, 'FU': two, 'HP': three, 'CP': four, 'HH': five, } func=dg_types.get(group_type, lambda:", "label": 0}, {"snippet_id": 45795, "code": ") else: return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra", "label": 1}, {"snippet_id": 56735, "code": " login_required from pure_pagination.mixins import PaginationMixin from django.http import HttpResponse, QueryDict from django.conf import settings from django.utils import timezone from django_xhtml2pdf", "label": 0}, {"snippet_id": 84011, "code": ".content=changeset.get_content() template_params={'article': article, 'revision': revision, 'redirected_from': redirected_from, 'allow_write': allow_write} if notification is not None: template_params.update(", "label": 0}, {"snippet_id": 73827, "code": "'applicationsForm': ImportApplicationsForm, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name", "label": 0}, {"snippet_id": 1699, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return False", "label": 0}, {"snippet_id": 4051, "code": " 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 72501, "code": " django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from django.utils.translation import", "label": 1}, {"snippet_id": 38096, "code": "=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey", "label": 0}, {"snippet_id": 23470, "code": " list of integers with the IDs of the GPUs. If it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return", "label": 0}, {"snippet_id": 67074, "code": "=ThreatMiner() context['tm_meta']=tm.getMetaFromSample(filehash) context['tm_http']=tm.getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample", "label": 0}, {"snippet_id": 75541, "code": "=candidate_id) if candidate.person.netid !=request.user.username: if not request.user.has_perm('etd_app.change_candidate'): return HttpResponseForbidden('You don\\'t have permission to view this candidate", "label": 0}, {"snippet_id": 47404, "code": ") context= {'object': datasource, 'datagroup_list': datagroup_list, 'form': form} return render(request, template_name, context) @login_required() def data_source_create(request, template_name=('data_source", "label": 0}, {"snippet_id": 41579, "code": " from django.test import Client from importlib import import_module from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def", "label": 0}, {"snippet_id": 47846, "code": "['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template", "label": 0}, {"snippet_id": 75640, "code": "(term, index): url='%s?query=%s&queryIndex=%s' %(settings.FAST_LOOKUP_BASE_URL, urllib.parse.quote(term), index) url='%s&queryReturn=%s&suggest=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' ", "label": 0}, {"snippet_id": 17618, "code": " new accounts. ' 'Please <a href=\"{}\">ask a moderator</a> to manually ' 'activate your account <a href=\"{}\">\\'{}\\'</a>.' .format(flask.url_for('site.help') +' flask.url_for('users.view_user', user_name", "label": 0}, {"snippet_id": 64288, "code": " current_app.logger.debug('Receiving a logout response from the IdP') response=client.parse_logout_request_response( request.form['SAMLResponse'], BINDING_HTTP_REDIRECT ) state.sync() if response and response", "label": 0}, {"snippet_id": 43691, "code": "/*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects", "label": 0}, {"snippet_id": 76942, "code": " copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs %s\", str(im_src.size), str", "label": 0}, {"snippet_id": 1478, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb')", "label": 0}, {"snippet_id": 67572, "code": ") return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date", "label": 0}, {"snippet_id": 84559, "code": "(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, *args, **kw)", "label": 0}, {"snippet_id": 30080, "code": "')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'id': self.id, 'name': self.name, 'description': self.description, 'processed'", "label": 0}, {"snippet_id": 78432, "code": ".title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time,", "label": 0}, {"snippet_id": 15691, "code": "=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.delta.data=command.get('delta', '') @app.route('/run') def view_run(): return render_template", "label": 0}, {"snippet_id": 47748, "code": "('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value", "label": 0}, {"snippet_id": 22685, "code": "\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling", "label": 1}, {"snippet_id": 47197, "code": "] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group=dg).first() if et: dg_name=dg.get_name_as_slug() qs=ExtractedChemical.objects.filter(extracted_text__data_document__data_group_id", "label": 0}, {"snippet_id": 77176, "code": " GetMapBaseUrl(self): \"\"\"Prepares the base URL for fetching tiles.\"\"\" base_url=_TILE_BASE_URL %(self.target_url, self.request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url", "label": 0}, {"snippet_id": 66845, "code": " **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']=GeoIP().lookup(domain) except Exception as e: print(e) pass try", "label": 0}, {"snippet_id": 55865, "code": " root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: ", "label": 0}, {"snippet_id": 2451, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not", "label": 0}, {"snippet_id": 37217, "code": "'accept': '.csv'}) if self.dg_type in['FU', 'CP']: del self.fields['weight_fraction_type'] self.collapsed=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField", "label": 0}, {"snippet_id": 54227, "code": ": return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other errors \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404) def page_not_found(error): return render_template", "label": 0}, {"snippet_id": 62486, "code": "'_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState:", "label": 0}, {"snippet_id": 48908, "code": " p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment'", "label": 0}, {"snippet_id": 53597, "code": " and independently storing buffer writes for use within Cauldron step display. \"\"\" def __init__(self, redirection_source): self.active=False self.bytes_buffer=io.BytesIO() self.redirection_source=redirection_source", "label": 0}, {"snippet_id": 81339, "code": " get_attendee_list(self): attendee_list=str('') counter=1 reg_ids=self.sudo().registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False) for registration in reg_ids: if registration.state", "label": 0}, {"snippet_id": 18866, "code": ".trainee_utils import is_trainee from.models import GospelTrip def gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False", "label": 0}, {"snippet_id": 61803, "code": " current_result.securedrop=securedrop try: prior_result=securedrop.results.latest() except ScanResult.DoesNotExist: results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result):", "label": 1}, {"snippet_id": 28821, "code": "): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if", "label": 0}, {"snippet_id": 13436, "code": " login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword", "label": 0}, {"snippet_id": 18125, "code": " with output file, \"+output_file+\" --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n ", "label": 0}, {"snippet_id": 62388, "code": " response @acs_action('change-password-action') def chpass_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-chpass) and redirect back to the", "label": 0}, {"snippet_id": 30778, "code": ":grudget_id>/delete/', methods=['GET', 'POST']) def deleteGrudget(grudget_id): grudgetToDelete=session.query(Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect(", "label": 0}, {"snippet_id": 67734, "code": "'type', flat=True).order_by('type').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET) context['search_form']=search_form return context def get_queryset", "label": 0}, {"snippet_id": 81989, "code": " DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view') class CustomShortURLCreateView(View): def get(self, request, *args, **kwargs): form=JustURLForm() return", "label": 0}, {"snippet_id": 6542, "code": ".credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized', code=None): return(message", "label": 1}, {"snippet_id": 20834, "code": " a socket file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path", "label": 0}, {"snippet_id": 40918, "code": ".exceptions import ObjectDoesNotExist from dashboard.forms import * from factotum.settings import EXTRA from dashboard.tests.loader import * @override_settings(ALLOWED_HOSTS=['testserver']) class DataDocumentDetailTest", "label": 0}, {"snippet_id": 74298, "code": ", **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ) and self._passphrase_next_url(request): return self._redirect_from_passphrase(request", "label": 0}, {"snippet_id": 76882, "code": " image: the PIL tile image. fname: the name to give the image. image_spec: all details about type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname", "label": 0}, {"snippet_id": 59698, "code": "=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins", "label": 0}, {"snippet_id": 69384, "code": ".3.0', 'ipywidgets==7.4.2', 'tornado<6.0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"\"\" Setup given list of", "label": 0}, {"snippet_id": 58501, "code": "\"preview_courselet\" } } } status_mock=status_mock.return_value status_mock.find_one.return_value={ onboarding.VIEW_INTRODUCTION: False, onboarding.INTRODUCTION_INTRO: False, onboarding.CREATE_COURSE: True, onboarding", "label": 0}, {"snippet_id": 36472, "code": "'DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup", "label": 0}, {"snippet_id": 2627, "code": "(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15)", "label": 0}, {"snippet_id": 74707, "code": "=request.META.get('Shibboleth-brownBannerID', '') if banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return HttpResponseRedirect", "label": 0}, {"snippet_id": 40332, "code": "() >=self.QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA Group for the specified Script object; Use all the related ExtractedText records or, if there are more", "label": 0}, {"snippet_id": 32816, "code": " builtins): with self.redirections: self.base.execute(builtins) def wait(self): self.base.wait() class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file descriptor to modify", "label": 0}, {"snippet_id": 36259, "code": " DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 38984, "code": ")}' name_dir=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path", "label": 0}, {"snippet_id": 76916, "code": " save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of", "label": 0}, {"snippet_id": 66983, "code": " lib.threatminer import ThreatMiner from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from", "label": 0}, {"snippet_id": 31346, "code": "'SOCIAL_AUTH_GITLAB_KEY') SOCIAL_AUTH_GITLAB_SECRET=os.environ.get('SOCIAL_AUTH_GITLAB_SECRET') SOCIAL_AUTH_GITLAB_REDIRECT_URL=os.environ.get( 'SOCIAL_AUTH_GITLAB_REDIRECT_URL') SOCIAL_AUTH_GITLAB_SCOPE=", "label": 0}, {"snippet_id": 58365, "code": " \"view_introduction desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return", "label": 0}, {"snippet_id": 5055, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post", "label": 0}, {"snippet_id": 38726, "code": " ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import", "label": 0}, {"snippet_id": 35385, "code": " data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form[", "label": 0}, {"snippet_id": 67172, "code": " SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder']='Lookup IP Address'", "label": 1}, {"snippet_id": 60024, "code": ").get(name,{})) } except sqlite3.OperationalError as e: if(e.args[0]=='no such module: VirtualSpatialIndex'): raise click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without", "label": 0}, {"snippet_id": 46552, "code": ") except ValidationError as e: context['clean_comp_err'][i+1]=e.message_dict good_records.append(ingredient) if context['clean_comp_err']: context['clean_comp_data_form'].collapsed=False return render(request", "label": 0}, {"snippet_id": 82715, "code": " is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s >", "label": 0}, {"snippet_id": 44984, "code": " self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True", "label": 0}, {"snippet_id": 19269, "code": " elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def fetch_and_execute_function_to_run(self", "label": 0}, {"snippet_id": 65055, "code": ", ast.UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', 'eval') except BaseException as e: if vlevel >=1: print(repr(e),", "label": 0}, {"snippet_id": 60187, "code": " compile_options;\").fetchall() ], }, } def plugins(self, show_all=False): ps=list(get_plugins(pm)) if not show_all: ps=[p for p in ps if p[\"name\"] not in DEFAULT_PLUGINS] return[ { \"name\": p[\"name\"], \"static\"", "label": 0}, {"snippet_id": 16915, "code": "(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp in g: gp=GamePlayer", "label": 0}, {"snippet_id": 69594, "code": " def setup_plugins(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda.ensure_pip_packages(HUB_ENV_PREFIX, plugins) pm=pluggy.PluginManager('tljh') pm.add_hookspecs(hooks) pm", "label": 0}, {"snippet_id": 17560, "code": "', methods=['GET', 'POST']) def register(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models", "label": 0}, {"snippet_id": 4137, "code": " self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\"", "label": 0}, {"snippet_id": 19805, "code": " autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis(", "label": 1}, {"snippet_id": 62136, "code": "]: return False else: return True def validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode=block\", ) def validate_no_sniff(page): return validate_security_header", "label": 0}, {"snippet_id": 33716, "code": " test_download_raw_chem_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains(response, 'Download Uncurated Chemicals') rc=RawChem.objects", "label": 1}, {"snippet_id": 49370, "code": ",{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename", "label": 0}, {"snippet_id": 30753, "code": "'myFunction()'>\" if request.method=='POST': if request.form['name']: editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget", "label": 1}, {"snippet_id": 25541, "code": " type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default", "label": 0}, {"snippet_id": 32000, "code": "(self, name, n=0): sys.exit(n) def _builtin_pwd(self, name): wd=os.getcwd() print(wd) def _builtin_cd(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer", "label": 0}, {"snippet_id": 39839, "code": " ValidationError( (f'Quantity{value} must be between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank", "label": 0}, {"snippet_id": 36317, "code": " test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn(", "label": 0}, {"snippet_id": 39685, "code": ".qa_group, qa_checked=False), self, 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text", "label": 0}, {"snippet_id": 2501, "code": " user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is", "label": 0}, {"snippet_id": 5927, "code": " 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True) app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com", "label": 0}, {"snippet_id": 74342, "code": "(self): self.object=self.report self.template_name=self.access_template_name context=self.get_context_data(form=self._get_access_form()) return self.render_to_response(context) def _redirect_from_passphrase", "label": 0}, {"snippet_id": 51960, "code": " user_record is None: flash(\"No account found with that email. Would you like to register?\") return redirect(\"/login\") else: if user_record.password !=pw: template=h.handle_bad_attempts(remaining) return", "label": 0}, {"snippet_id": 5997, "code": "'OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def set_cookie_id_token", "label": 0}, {"snippet_id": 58446, "code": ".INVITE_SOMEBODY:{ \"done\": True, \"settings\":{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" } }, onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\"", "label": 0}, {"snippet_id": 57187, "code": " default_next=reverse('transactions_open') transaction.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context", "label": 0}, {"snippet_id": 71225, "code": " return models.User def _load_user(self): if self.session is not None and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id)) if self.user is None: pass else: self", "label": 0}, {"snippet_id": 22637, "code": "\"\"\"A class that holds the profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker", "label": 1}, {"snippet_id": 49276, "code": "): referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk", "label": 0}, {"snippet_id": 80879, "code": " BCNL Events', 'category': 'Website', 'version': '10.0.0.0.1', 'author': 'Fundament IT', 'website': 'https://fundament.it/', 'licence': 'AGPL-3', 'depends':['website_event'], 'summary':\"\"\"\"\"\", 'description", "label": 1}, {"snippet_id": 65030, "code": " if type(left)==ast.Call: if type(left.func)==ast.Name and left.func.id==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str, ast.Bytes, ast.NameConstant, ast.Dict, ast.Set, ast.List", "label": 0}, {"snippet_id": 80184, "code": ".log_queue, parent=self) self.log_thread.message_received.connect(self.log) self.log_thread.start() def setup_window(self): self.window=window=QMainWindow() self.layout=QVBoxLayout() window.setWindowTitle", "label": 0}, {"snippet_id": 69995, "code": "%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 17757, "code": " found.'), 'info') return flask.redirect(flask.url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id", "label": 0}, {"snippet_id": 9387, "code": " user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django", "label": 0}, {"snippet_id": 11784, "code": "'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login", "label": 0}, {"snippet_id": 53659, "code": "\"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format", "label": 1}, {"snippet_id": 54936, "code": " Book Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups", "label": 1}, {"snippet_id": 79045, "code": " % datarequest_id) validator.validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed", "label": 0}, {"snippet_id": 31801, "code": ",create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user):", "label": 1}, {"snippet_id": 82266, "code": " CategoryUpdateView(LoginRequiredMixin, UpdateView): queryset=Category.objects.all() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy('category-list", "label": 0}, {"snippet_id": 78049, "code": ".get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None", "label": 0}, {"snippet_id": 61531, "code": "> ScanResult: \"\"\" Takes a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"\"\" try: page, soup=request_and_scrape_page", "label": 1}, {"snippet_id": 46067, "code": " ' 'selected directory.') return render(request, template_name, context) zf=zipfile.ZipFile(dg.zip_file, 'a', zipfile.ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc=DataDocument.objects.get", "label": 0}, {"snippet_id": 56556, "code": "() \\ .then_response_should_be_a_redirect_to('pachatary://app/') class ScenarioMaker: def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link", "label": 1}, {"snippet_id": 43189, "code": " dashboard.tests.loader import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver", "label": 1}, {"snippet_id": 12975, "code": " FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll", "label": 0}, {"snippet_id": 49868, "code": " file\") return redirect('/openFile') @app.route('/save') def save(): if(not 'email' in session) and(not 'social' in session): return redirect('/login?return_url=saveAs') if 'currentFile' in session: return", "label": 0}, {"snippet_id": 1528, "code": "%} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE", "label": 0}, {"snippet_id": 54536, "code": " errands** \"\"\" \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once, will create multiple entries \"\"\" @app.route('/updatedb/politicians') def update_all(): return insert_politicians_in_db", "label": 0}, {"snippet_id": 51357, "code": "(host, username=username, look_for_keys='True') def call(self, *args, **kwargs): stdin, stdout, stderr=self.ssh.exec_command(*args, **kwargs) def pump_output_thread(source, destination): for line in source", "label": 0}, {"snippet_id": 27987, "code": ": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time\": self.start_time, \"end_time\": time.time(), \"extra_data\": extra_data, }", "label": 0}, {"snippet_id": 20117, "code": " task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin", "label": 0}, {"snippet_id": 21577, "code": " \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor", "label": 0}, {"snippet_id": 81289, "code": " for event in self: domain=['&', '|',('email', '=', email),('partner_id', '=', self.env.user.partner_id.id),('event_id', '=', event.id), ('state', '=', 'open')] count=self.env['event.registration'].search_count", "label": 0}, {"snippet_id": 4821, "code": " specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=", "label": 0}, {"snippet_id": 66035, "code": " unsaved_databases_list_box=builder.get_object(\"unsaved_databases_list_box\") for db in unsaved_databases_list: unsaved_database_row=Gtk.ListBoxRow() check_button=Gtk.CheckButton() check_button.set_label", "label": 0}, {"snippet_id": 51702, "code": " endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script def genSCI(): pass def genSSCI(): pass def genCSRF(): pass def genOR(", "label": 1}, {"snippet_id": 65616, "code": ") self.filechooser_creation_dialog.set_modal(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 9885, "code": " original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form", "label": 0}, {"snippet_id": 34745, "code": ".filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate", "label": 0}, {"snippet_id": 36995, "code": " the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type=", "label": 0}, {"snippet_id": 15068, "code": " render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm", "label": 0}, {"snippet_id": 43096, "code": "') self.assertIn( f\"/qa/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content) response=self.client.get( f'/qa/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa", "label": 0}, {"snippet_id": 35489, "code": "'product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags", "label": 0}, {"snippet_id": 849, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return False", "label": 0}, {"snippet_id": 13448, "code": " login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request", "label": 0}, {"snippet_id": 24444, "code": " mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self", "label": 1}, {"snippet_id": 7717, "code": " actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect", "label": 0}, {"snippet_id": 26850, "code": " from __future__ import division from __future__ import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray", "label": 0}, {"snippet_id": 57526, "code": " transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']", "label": 0}, {"snippet_id": 78346, "code": " import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk", "label": 0}, {"snippet_id": 46882, "code": "=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context={", "label": 0}, {"snippet_id": 49134, "code": ".first() list_presence_tag_form=ExtractedListPresenceTagForm(instance=list_presence) context.update({'list_presence_tag_form': list_presence_tag_form}) except ObjectDoesNotExist: pass if doc.is_extracted", "label": 0}, {"snippet_id": 57583, "code": " from django.dispatch import receiver from django.conf import settings from django.core.mail import send_mail from django.template import loader, Context from core.common.mongo import c_onboarding_status", "label": 0}, {"snippet_id": 83549, "code": " ChangeSet, dmp from wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION except", "label": 0}, {"snippet_id": 18153, "code": " !=\"\":\r \r url=\"https://\" +domain +payload\r url=url.strip()\r \r try:\r r=requests.head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example", "label": 1}, {"snippet_id": 2141, "code": " import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import", "label": 1}, {"snippet_id": 69472, "code": " times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1) continue raise except URLError as e: if isinstance(e.reason, ConnectionRefusedError): time.sleep", "label": 0}, {"snippet_id": 82299, "code": " ClickTrackingDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=get_object_or_404(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by('timestamp') return render(request,", "label": 0}, {"snippet_id": 13442, "code": "\"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or", "label": 0}, {"snippet_id": 9688, "code": "=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The", "label": 0}, {"snippet_id": 26507, "code": " if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try", "label": 0}, {"snippet_id": 32362, "code": " Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands() self.expect(TokenType.EOF) return root def commands(self): base=self.command() if self.accept", "label": 0}, {"snippet_id": 54423, "code": "/<query>') def test(newspaper, query): \thinduscraper=scrapers[newspaper] \thinduscraper.getArticleLinks(query) \thinduscraper.addArticleContent() \tarticles=hinduscraper.getArticles() \treturn jsonify(articles", "label": 0}, {"snippet_id": 40941, "code": "=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_absent_extracted_text(self): for dd in DataDocument.objects.all(): ddid=dd.id resp=self.client.get('", "label": 0}, {"snippet_id": 68838, "code": " HTTPError from urllib.request import urlopen, URLError import pluggy from tljh import( apt, conda, hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX,", "label": 0}, {"snippet_id": 84406, "code": "=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article.changeset_set.all().order_by('-revision') template_params={'article':", "label": 0}, {"snippet_id": 54215, "code": ".search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" *", "label": 1}, {"snippet_id": 54370, "code": "(politicians=politicians) \"\"\"Array of datums for politicians Format: JSON \"\"\" @app.route('/json/politicians/all') def all_politicians(): pols=Politician.all() politicians=[] for pol in pols: tokens=pol", "label": 0}, {"snippet_id": 203, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb')", "label": 0}, {"snippet_id": 29655, "code": " posts.extend(results) tags=Tag.query.all() return render_template('gallery.html', posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for('gallery.show_posts", "label": 1}, {"snippet_id": 54622, "code": ".homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment", "label": 0}, {"snippet_id": 32554, "code": "'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins): ''' Execute the node. Args: builtins: A dict of builtin", "label": 0}, {"snippet_id": 55673, "code": "\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t", "label": 0}, {"snippet_id": 24356, "code": " function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR", "label": 0}, {"snippet_id": 43992, "code": ".find_element_by_class_name('btn').click() class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox(", "label": 1}, {"snippet_id": 62772, "code": " came_from: str :return: the cookie corresponding to the authn session :rtype: str \"\"\" session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response", "label": 0}, {"snippet_id": 69858, "code": " ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:", "label": 0}, {"snippet_id": 78213, "code": " return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict", "label": 0}, {"snippet_id": 9314, "code": "'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True", "label": 0}, {"snippet_id": 61333, "code": " input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread", "label": 0}, {"snippet_id": 54569, "code": " pprint from hwml import Problem, Assignment from collections import defaultdict import string class HWML_processor(object): \tdef prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t", "label": 1}, {"snippet_id": 74557, "code": " error. Please contact %s for assistance.' % BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html", "label": 0}, {"snippet_id": 28123, "code": " the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed", "label": 0}, {"snippet_id": 49989, "code": " savepath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(savepath, exist_ok=True) saveFilePath=os.path.join(savepath, name) tempFilePath=session.pop(\"tempFile\", None) if tempFilePath: shutil", "label": 0}, {"snippet_id": 64126, "code": " does not contain ' 'the subject id for user{!r}'.format(user)) location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') else: logouts=client.global_logout(subject_id) loresponse=logouts.values()[0] if", "label": 0}, {"snippet_id": 65526, "code": "(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK:", "label": 0}, {"snippet_id": 63671, "code": " eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response", "label": 0}, {"snippet_id": 6665, "code": ".verify_password(form.password.data): login_user(user, form.remember_me.data) session['auth_token']=user.auth_token return redirect(request.args.get('next') or url_for('main.index')) flash('Invalid username", "label": 1}, {"snippet_id": 80440, "code": " self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id=sys.argv[1], wavemeter_port=sys.argv[2]) except Exception as err: self", "label": 0}, {"snippet_id": 73470, "code": " def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST", "label": 0}, {"snippet_id": 31396, "code": ".common.CommonMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware", "label": 0}, {"snippet_id": 51151, "code": ".is_optional: enabled=step.is_enabled_by_default if self._disable_all_options: enabled=False if step.name in self._enabled_options: enabled=True if step.name in self._disabled_options: enabled=False if enabled:", "label": 0}, {"snippet_id": 10610, "code": " '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 66676, "code": "\"error\") def open_database_page(self): self.clear_input_fields() keepassgtk.config_manager.create_config_entry_string(\"history\", \"last-opened-db\", str(self.database_filepath)) keepassgtk.config_manager", "label": 0}, {"snippet_id": 50358, "code": "('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect", "label": 0}, {"snippet_id": 79121, "code": " ID of the data request to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers)", "label": 0}, {"snippet_id": 79943, "code": ")]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 69864, "code": "(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r", "label": 0}, {"snippet_id": 10030, "code": "'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(", "label": 0}, {"snippet_id": 69575, "code": "(tljh_config_dest): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src", "label": 0}, {"snippet_id": 50128, "code": ".path.join(userpath, filename) with open(filepath) as f: data=f.read() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException:", "label": 0}, {"snippet_id": 38843, "code": ".ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return str(self.group_type", "label": 0}, {"snippet_id": 4133, "code": ".test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users", "label": 0}, {"snippet_id": 64963, "code": "() vlevel=args.verbose name=args.name if not name.isidentifier() or keyword.iskeyword(name): raise ValueError('Function name is not a valid identifier') test_case_objs=[] for i, test_case in enumerate(args", "label": 0}, {"snippet_id": 72866, "code": " PositionText}) if request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session['position_id']) request.user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm", "label": 1}, {"snippet_id": 57705, "code": "*decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): ", "label": 0}, {"snippet_id": 14368, "code": " unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods([", "label": 0}, {"snippet_id": 27991, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as", "label": 0}, {"snippet_id": 31194, "code": ".path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s '*szo DEBUG=literal_eval(os.environ.get('DJANGO_DEBUG', 'False')) if DEBUG and not literal_eval(os.environ.get(", "label": 0}, {"snippet_id": 80109, "code": " handled_slot from.logging_stream import LoggingStream from.status_monitor import StatusMonitor from.threading import ExitFlag, LoggingThread class ControlApplication(QApplication): EXIT_CODE_RESTART=42", "label": 0}, {"snippet_id": 46276, "code": "(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean() good_records.append((d,ext,record)) except ValidationError as e: context['ext_err'][i+1]=e.message_dict if context", "label": 0}, {"snippet_id": 73366, "code": " from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText", "label": 0}, {"snippet_id": 51135, "code": "._context.options=options self._context.args=args self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True if step.is_optional: enabled=step.is_enabled_by_default", "label": 0}, {"snippet_id": 9908, "code": ".get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request.", "label": 0}, {"snippet_id": 12452, "code": ", settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer", "label": 0}, {"snippet_id": 36451, "code": ",num_prods')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8", "label": 1}, {"snippet_id": 2835, "code": ", request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string", "label": 0}, {"snippet_id": 53341, "code": " setattr( module, '__package__', '.'.join( [project.id.replace('.', '-')] + step.filename.rsplit('.', 1)[0].split(os.sep) ) ) def exec_test(): step.test_locals=dict() step.test_locals.update(module.__dict__", "label": 0}, {"snippet_id": 13261, "code": " import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views", "label": 0}, {"snippet_id": 82140, "code": ".get_host()}/{token_generator()}') instance.save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment", "label": 0}, {"snippet_id": 20953, "code": " process_info ] def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file", "label": 0}, {"snippet_id": 4312, "code": "( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path", "label": 0}, {"snippet_id": 52957, "code": " BaseUserTestCase(TestCase): def setUp(self): self.user=self.make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view", "label": 0}, {"snippet_id": 55812, "code": "\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf.close() \t\treturn r \tdef writelines(self,o): \t\tf=open(self.path,\"wb\") \t", "label": 0}, {"snippet_id": 57034, "code": " concepts that can be added to the given transaction. :param employee: The employee executing the transaction(current user) :param transaction: The open transaction :return: A list of dictionaries. \"\"\"", "label": 0}, {"snippet_id": 63099, "code": " eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/chpass', eppn, _check) def", "label": 0}, {"snippet_id": 12703, "code": ". \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset", "label": 0}, {"snippet_id": 84363, "code": ") return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) def article_history(request, title", "label": 0}, {"snippet_id": 72346, "code": "'status'], 'desc': status_dict[cluster_id][daemon_id]['desc'] } for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result", "label": 0}, {"snippet_id": 13512, "code": " IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode", "label": 1}, {"snippet_id": 47026, "code": "}.zip' zip_file=open(dg.get_zip_url(), 'rb') response=HttpResponse(zip_file, content_type='application/zip') response['Content-Disposition']='attachment; filename=%s' % zip_file_name return response @login_required", "label": 0}, {"snippet_id": 72105, "code": "(): raise NFSException(\"Cannot create this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export", "label": 0}, {"snippet_id": 55794, "code": " readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self", "label": 0}, {"snippet_id": 38712, "code": " from django.dispatch import receiver from model_utils import FieldTracker from django.core.exceptions import ValidationError from.group_type import GroupType from.extracted_text import ExtractedText from", "label": 0}, {"snippet_id": 4357, "code": "'login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register", "label": 1}, {"snippet_id": 51329, "code": " dependency_collection=self._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__(self, host, username): import paramiko", "label": 0}, {"snippet_id": 84447, "code": ", title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='POST': revision=int(request", "label": 0}, {"snippet_id": 59248, "code": " escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit, to_css_class ) from.inspect import inspect_hash, inspect_views, inspect_tables from.plugins import pm, DEFAULT_PLUGINS from.version", "label": 0}, {"snippet_id": 51655, "code": "&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, ", "label": 0}, {"snippet_id": 10505, "code": ".core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student", "label": 0}, {"snippet_id": 49154, "code": ".objects.get_subclass(pk=doc.pk) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True", "label": 0}, {"snippet_id": 69422, "code": "'r') as f: config=yaml.load(f) else: config={} config['users']=config.get('users',{}) config['users']['admin']=list(admins) with open(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running", "label": 0}, {"snippet_id": 14594, "code": ".username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history", "label": 0}, {"snippet_id": 72800, "code": " redirect_field_name=None) def import_position(request): if request.method=='POST': create_position_form=CreatePositionForm( request.POST, request.FILES) if create_position_form.is_valid(): position=create_position_form", "label": 1}, {"snippet_id": 4372, "code": ".\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com',", "label": 0}, {"snippet_id": 45719, "code": "=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk", "label": 0}, {"snippet_id": 30102, "code": " Flask, render_template, request, redirect, jsonify, url_for, flash from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from database_setup import Grudget, Base, Grudge, User from", "label": 0}, {"snippet_id": 64399, "code": "'Starting token login') location_on_fail=current_app.config.get('TOKEN_LOGIN_FAILURE_REDIRECT_URL') location_on_success=current_app.config.get('TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get(", "label": 0}, {"snippet_id": 51114, "code": ") self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext() options, args=self", "label": 0}, {"snippet_id": 35283, "code": ".filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render", "label": 0}, {"snippet_id": 74252, "code": " CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message) return False @property def access_form_valid(self): form=self._get_access_form(", "label": 0}, {"snippet_id": 70029, "code": "(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content", "label": 0}, {"snippet_id": 67541, "code": " minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(publish_timestamp__gte=from_date,", "label": 0}, {"snippet_id": 82176, "code": "(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset=Category.objects.all().order_by('name')", "label": 0}, {"snippet_id": 52489, "code": " project_object.user_id: results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=['POST']) def save_updated_project_details", "label": 0}, {"snippet_id": 64029, "code": ":rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=['POST']) @MarshalWith(LogoutResponseSchema", "label": 0}, {"snippet_id": 71802, "code": "'test:abc' user_info={ 'auth_id': auth_id, 'info':{}, } p1=models.UserProfile.get_or_create(auth_id, user_info) req.load_user_by_profile(p1) user_count=models.User.query().count() self.assertEqual(user_count", "label": 0}, {"snippet_id": 2622, "code": "('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings(", "label": 0}, {"snippet_id": 17857, "code": ") @bp.route('/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method", "label": 0}, {"snippet_id": 48922, "code": " request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required(", "label": 0}, {"snippet_id": 65712, "code": "=Gio.File.new_for_uri( \"resource:///run/terminal/KeepassGtk/database.kdbx\") new_database=Gio.File.new_for_path( self.filechooser_creation_dialog.get_filename()) stock_database.copy(new_database, Gio.FileCopyFlags", "label": 0}, {"snippet_id": 1271, "code": ".group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return", "label": 0}, {"snippet_id": 19219, "code": "(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"): with profiling", "label": 1}, {"snippet_id": 16550, "code": ".tournamentplayer_set.all() round_players=the_round.roundplayer_set.all() rps=[] sitters=set() two_gamers=set() for rp in round_players: assert rp.gameplayers().count()==0, \"%d games already exist for ", "label": 0}, {"snippet_id": 48248, "code": "(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'):", "label": 1}, {"snippet_id": 81805, "code": " category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save()", "label": 0}, {"snippet_id": 40792, "code": "'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC", "label": 0}, {"snippet_id": 57327, "code": "']=form return render(request, 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_edit", "label": 0}, {"snippet_id": 1157, "code": " </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index", "label": 0}, {"snippet_id": 30931, "code": "=grudget_id).one() if request.method=='POST': newGrudge=Grudge(name=request.form['name'], description=request.form[ 'description'], processed=request.form['processed'], takeaway=request.form['takeaway'", "label": 1}, {"snippet_id": 28965, "code": " 'object'. worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled", "label": 0}, {"snippet_id": 72310, "code": " not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) export=ganesha_conf.remove_export(export_id) if reload_daemons: ganesha_conf.reload_daemons(export.daemons) @ApiController('/nfs-ganesha", "label": 0}, {"snippet_id": 72625, "code": "['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1].split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def", "label": 1}, {"snippet_id": 700, "code": "\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href", "label": 0}, {"snippet_id": 48065, "code": " 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc", "label": 0}, {"snippet_id": 44456, "code": ".objects.create_superuser(username='SuperKaryn', password='specialP@55word', email='me@epa.gov') ds=DataSource.objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI'", "label": 0}, {"snippet_id": 66519, "code": " keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile chosen\") self.logging_manager.log_debug(\"Keyfile path: \" +keyfile_path) def on_composite_unlock_select_button_clicked(self,", "label": 0}, {"snippet_id": 84010, "code": "=revision) article.content=changeset.get_content() template_params={'article': article, 'revision': revision, 'redirected_from': redirected_from, 'allow_write': allow_write} if notification is not None:", "label": 0}, {"snippet_id": 80120, "code": " import ExitFlag, LoggingThread class ControlApplication(QApplication): EXIT_CODE_RESTART=42 def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window", "label": 0}, {"snippet_id": 17869, "code": "(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form", "label": 0}, {"snippet_id": 79833, "code": " Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing", "label": 1}, {"snippet_id": 61441, "code": " funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance", "label": 0}, {"snippet_id": 44425, "code": "'11_habits_and_practices_to_puc', '12_product_to_puc', '13_puc_tag' ] class dotdict(dict): \"\"\"dot.notation access to dictionary attributes\"\"\" __getattr__=dict.get __setattr__=dict.__setitem__ __delattr__=dict.__delitem__ def", "label": 1}, {"snippet_id": 19534, "code": ".decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError", "label": 1}, {"snippet_id": 48305, "code": " ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except: ds.no_category=0 dgs=ds.datagroup_set.all() for dg in dgs: dg.unlinked=dg.datadocument_set", "label": 0}, {"snippet_id": 16435, "code": " @permission_required('tournament.add_game') def get_seven(request, tournament_id, round_num): \"\"\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id", "label": 0}, {"snippet_id": 5946, "code": ".google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True) app.route('/oidc_callback')(self.oidc_callback) app.before_request(self.before_request", "label": 0}, {"snippet_id": 10959, "code": "['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else:", "label": 0}, {"snippet_id": 8218, "code": " branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and", "label": 0}, {"snippet_id": 53402, "code": ") set_executing(False) return{'success': True} if out is None else out def render_syntax_error( project: 'projects.Project', code: str, error: SyntaxError ) -> dict: \"\"\" :param project: :param code: :param", "label": 0}, {"snippet_id": 25067, "code": " \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix", "label": 0}, {"snippet_id": 77639, "code": ": default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources", "label": 0}, {"snippet_id": 78936, "code": "['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest", "label": 1}, {"snippet_id": 38504, "code": ", the document is considered \"matched\" to that source file. ``extracted`` When the content of a data document has been extracted by manual data entry or by an extraction script, a new ExtractedText record", "label": 0}, {"snippet_id": 64821, "code": "): parser=argparse.ArgumentParser(description=\"Grade student code against \" \"given test cases. Results will be written over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The", "label": 0}, {"snippet_id": 52449, "code": ":project_id>\", methods=['GET']) def open_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() user_id=session.get(\"user_id\") results={\"userId\": user_id, \"pOwnerId\"", "label": 0}, {"snippet_id": 58490, "code": " False, \"settings\":{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } } status_mock=status_mock.return_value status_mock.find_one.return_value={", "label": 0}, {"snippet_id": 37835, "code": ".true_chemname self.fields['true_chemname'].disabled=True self.fields['SID']=forms.CharField(max_length=50) self.fields['SID'].initial=self.instance.dsstox.sid self.fields['SID'].disabled=True class Meta:", "label": 0}, {"snippet_id": 58552, "code": ".models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage from core.common import onboarding from django.conf import settings class Command(BaseCommand):", "label": 0}, {"snippet_id": 54445, "code": "=articles) \"\"\"Tweets for a search query Format: JSON \"\"\" @app.route('/json/tweets/search/<query>', methods=['GET']) def tweets_search(query): access_token='487593326-yu9WIClcUgs9vBWJGGgW4QC9pKedHMdm3NhhNoxe'", "label": 0}, {"snippet_id": 43197, "code": ".staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from", "label": 1}, {"snippet_id": 51139, "code": "._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True if step.is_optional: enabled=step.is_enabled_by_default if self._disable_all_options: enabled", "label": 0}, {"snippet_id": 54907, "code": "(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition", "label": 1}, {"snippet_id": 22336, "code": ": The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" ", "label": 0}, {"snippet_id": 63570, "code": " self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php', json.loads(response2.data)['payload']['location']) def test_logout_service_startingSP(self): came_from='/afterlogin", "label": 0}, {"snippet_id": 58094, "code": " 1) @mock.patch('core.common.utils.c_onboarding_status') @unpack @data( ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6", "label": 0}, {"snippet_id": 936, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 63209, "code": "'hubba-bubba' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce,", "label": 0}, {"snippet_id": 76783, "code": " else None) return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD:", "label": 0}, {"snippet_id": 46302, "code": " e in good_records] return render(request, template_name, context) if not context['ext_err']: for doc,text,record in good_records: doc.extracted=True doc.save() text.save() record.save() fs=FileSystemStorage", "label": 0}, {"snippet_id": 73079, "code": " url_text=CreatePositionFormText.link_to_job_description upload_text=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText.browse submit_text=CreatePositionFormText.submit class Meta:", "label": 0}, {"snippet_id": 5285, "code": ".assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale", "label": 0}, {"snippet_id": 63172, "code": " nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code", "label": 0}, {"snippet_id": 9360, "code": ", domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password", "label": 0}, {"snippet_id": 53041, "code": " SC_SI}, 'first_home_form':{'firsthome': True}, 'house_type_form':{'house_type': HT_SF, 'house_age': HA_15, 'house_cond': HC_SL}, 'city_form':{'preferred_city': ''}, 'max_budget_form':{'budget': 1200.59},", "label": 0}, {"snippet_id": 1618, "code": ".listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)", "label": 0}, {"snippet_id": 80549, "code": " open_idle(self, checked): print('Opening IDLE.') subprocess.Popen('python -m idlelib -t \"Matisse Controller -Python Shell\" -c \"from matisse import Matisse; ' + 'matisse=Matisse(); print(\\'Access the Matisse", "label": 1}, {"snippet_id": 34408, "code": "/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec", "label": 0}, {"snippet_id": 24929, "code": "=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor:", "label": 0}, {"snippet_id": 58086, "code": " template_text=\"ct/email/milestone_ortc_notify_text\" ) self.assertEqual(len(mail.outbox), 1) @mock.patch('core.common.utils.c_onboarding_status') @unpack @data( ({onboarding.STEP_1: 0, onboarding.STEP_2: 0", "label": 0}, {"snippet_id": 78312, "code": "\nimport ckan.lib.base as base import ckan.lib.helpers as helpers import ckan.lib.mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext", "label": 0}, {"snippet_id": 62576, "code": " AuthnAPITestBase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os", "label": 0}, {"snippet_id": 18530, "code": "+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', self.email)==None): \t\t\tself.render(\"signup.html\",error=\"Your email doesn't look like a valid email\") \t\t\treturn \t\tdoes_it_exist=self.check_if_exists() \t\tif(does_it_exist", "label": 0}, {"snippet_id": 44049, "code": "(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute", "label": 0}, {"snippet_id": 9088, "code": " openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from", "label": 0}, {"snippet_id": 53139, "code": "'house_age': 8, 'house_cond': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None) self.assertEqual(self.view", "label": 0}, {"snippet_id": 52737, "code": ".models import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models import Room logger=logging", "label": 1}, {"snippet_id": 61301, "code": " message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.", "label": 0}, {"snippet_id": 47709, "code": "(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id", "label": 0}, {"snippet_id": 20260, "code": "\"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message", "label": 0}, {"snippet_id": 9423, "code": " HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\"", "label": 0}, {"snippet_id": 8554, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else", "label": 0}, {"snippet_id": 54398, "code": "': tokens, 'search_count': pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp \"\"\"News articles from", "label": 0}, {"snippet_id": 61062, "code": " acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc", "label": 0}, {"snippet_id": 42847, "code": "(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText.objects.filter(qa_group=None).filter(extraction_script=scr", "label": 0}, {"snippet_id": 62229, "code": ") def validate_nostore(page): return validate_cache_control_header(page, 'no-store') def validate_notransform(page): return validate_cache_control_header(page, 'no-transform') def validate_private(page", "label": 0}, {"snippet_id": 24758, "code": " os import time import traceback import redis import ray from ray.autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import ray.gcs_utils import ray.utils import", "label": 0}, {"snippet_id": 37327, "code": "): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority'].widget.attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm):", "label": 0}, {"snippet_id": 22902, "code": ", tb): \"\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data", "label": 0}, {"snippet_id": 77620, "code": "=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\" self._load_config() context", "label": 0}, {"snippet_id": 52037, "code": " on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[] invites_list=[] user_id=session.get(\"user_id\") user_object", "label": 0}, {"snippet_id": 40991, "code": ", '<h4>Extracted Text') def test_script_links(self): doc=DataDocument.objects.first() response=self.client.get(f'/datadocument/179486/') self.assertIn('Download Script',response.content.decode('utf-8')", "label": 0}, {"snippet_id": 1322, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 61712, "code": ", the passed DirectoryEntry *must* already be in the database. \"\"\" securedrop_domain=url_to_domain(securedrop.landing_page_url) pshtt_results=inspect_domains([securedrop_domain],{'timeout': 10}) result", "label": 1}, {"snippet_id": 29113, "code": " thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a new lock", "label": 0}, {"snippet_id": 67002, "code": ".models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='filehash/index.html' def get_context_data(self, **kwargs)", "label": 0}, {"snippet_id": 23015, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str", "label": 0}, {"snippet_id": 47971, "code": " import ugettext_lazy as _ from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.forms import HabitsPUCForm, create_detail_formset @login_required() def", "label": 1}, {"snippet_id": 22576, "code": " strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate", "label": 0}, {"snippet_id": 39750, "code": ".extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the", "label": 1}, {"snippet_id": 30029, "code": " in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge' id=Column(Integer, primary_key=True) name=Column(String(80), nullable=False) description", "label": 0}, {"snippet_id": 16156, "code": " numbered round of the specified tournament or raise Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num,", "label": 0}, {"snippet_id": 32130, "code": "(self): ''' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is malformed and a token cannot be correctly generated from it. ''", "label": 0}, {"snippet_id": 64664, "code": "'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'StopAsyncIteration', 'StopIteration', 'str', 'sum', 'super', 'SyntaxError', 'SyntaxWarning', 'SystemExit', ", "label": 0}, {"snippet_id": 45229, "code": "(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(", "label": 0}, {"snippet_id": 54546, "code": "=codecs.getwriter(locale.getpreferredencoding())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import pprint from hwml", "label": 0}, {"snippet_id": 54606, "code": "(homework_file.path)) \t\t\texcept: \t\t\t\tprint \"parsing error in \"+homework_file.path \t\t\t\traise \t\tself.assignments=[] \t\tfor homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment", "label": 0}, {"snippet_id": 12679, "code": " _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration'", "label": 0}, {"snippet_id": 28936, "code": " check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the", "label": 0}, {"snippet_id": 32293, "code": ".WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy creation of a stream of tokens", "label": 0}, {"snippet_id": 78507, "code": "] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data", "label": 1}, {"snippet_id": 78802, "code": " :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of", "label": 0}, {"snippet_id": 65307, "code": "-event\", self.on_application_quit) self.custom_css() def create_headerbar(self): builder=Gtk.Builder() builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui\") self.headerbar=builder.get_object", "label": 0}, {"snippet_id": 39744, "code": " pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this", "label": 1}, {"snippet_id": 77032, "code": "%s\" _TILE_ARGS=\"&%s=%d&%s=%d&%s=%d\" _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with", "label": 0}, {"snippet_id": 71075, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^", "label": 0}, {"snippet_id": 60665, "code": " else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html\".format(status)] +templates info.update( {\"ok\": False, \"error\": message", "label": 0}, {"snippet_id": 46640, "code": "'name' : default_name, 'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup=form", "label": 0}, {"snippet_id": 28137, "code": " the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id,", "label": 0}, {"snippet_id": 68015, "code": "(**kwargs) return context def get_queryset(self, request, pk): pk=self.kwargs['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self", "label": 0}, {"snippet_id": 75759, "code": "], index) if select2_results: return[{'text': 'FAST results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e) logger.error('fast response", "label": 0}, {"snippet_id": 21669, "code": ". \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in", "label": 0}, {"snippet_id": 47035, "code": ") response['Content-Disposition']='attachment; filename=%s' % zip_file_name return response @login_required def data_group_registered_records_csv(request, pk): columnlist=['filename','title','document_type", "label": 0}, {"snippet_id": 71592, "code": "._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create", "label": 0}, {"snippet_id": 76765, "code": " tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile.getbands", "label": 0}, {"snippet_id": 10078, "code": " method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def", "label": 0}, {"snippet_id": 46873, "code": "=new_zip_name zf.close() datagroup.save() return redirect('data_group_detail', pk=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type", "label": 0}, {"snippet_id": 33167, "code": "(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam', 'prod_type', 'description','tags',] readonly_fields=('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin", "label": 1}, {"snippet_id": 41434, "code": " in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse", "label": 0}, {"snippet_id": 70052, "code": "\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /", "label": 0}, {"snippet_id": 36787, "code": "=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'), document_count=Count('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter", "label": 0}, {"snippet_id": 42425, "code": ".client.get(f'/datagroup/raw_extracted_records/%s/' % dg_ids[0]) field_list='ExtractedChemical_id,raw_cas,raw_chem_name,raw_min_comp,raw_central_comp,raw_max_comp,unit_type' content=list(i.decode('utf-8", "label": 0}, {"snippet_id": 26005, "code": ", process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None", "label": 0}, {"snippet_id": 21164, "code": " process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, autoscaling_config=self._ray_params.autoscaling_config, redis_password=self", "label": 0}, {"snippet_id": 28923, "code": "=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message", "label": 0}, {"snippet_id": 53577, "code": "[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', **render_data ), html_message=templating", "label": 0}, {"snippet_id": 29229, "code": ".init_app(app) migrate=Migrate(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore", "label": 0}, {"snippet_id": 48485, "code": ") product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value", "label": 0}, {"snippet_id": 27904, "code": ".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...)", "label": 0}, {"snippet_id": 26035, "code": ".plasma_store_socket_name or get_object_store_socket_name()) self.prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output))", "label": 0}, {"snippet_id": 3462, "code": " self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self", "label": 0}, {"snippet_id": 50741, "code": ": def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a build step name.\".format(name)) self.name=name self.condition_sets=[] self.is_optional=False self.is_enabled_by_default", "label": 0}, {"snippet_id": 24522, "code": " the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename]", "label": 1}, {"snippet_id": 33159, "code": " django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam', 'prod_type', ", "label": 1}, {"snippet_id": 8420, "code": ": _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session) } def _local_server_get(url, session", "label": 0}, {"snippet_id": 66173, "code": ".overlay.add_overlay(unlock_failed_overlay) stack=Gtk.Stack() stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE) self.unlock_database_stack_box=self.builder.get_object(\"unlock_database_stack_box\")", "label": 0}, {"snippet_id": 46471, "code": "'clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] for i", "label": 0}, {"snippet_id": 17147, "code": "': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', {'tournament': t, 'round'", "label": 0}, {"snippet_id": 8164, "code": ".logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template", "label": 0}, {"snippet_id": 15351, "code": " field in form: if field.name=='start_day': result.append({'command': field.name, 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days", "label": 0}, {"snippet_id": 83964, "code": ") is_observing=False redirected_from=None try: article=article_qs.get(**article_args) if notification is not None: is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist", "label": 0}, {"snippet_id": 10566, "code": " @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load", "label": 0}, {"snippet_id": 3099, "code": "(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=[", "label": 0}, {"snippet_id": 1067, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding", "label": 0}, {"snippet_id": 43652, "code": ") raw_chem=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id", "label": 1}, {"snippet_id": 20506, "code": " help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args", "label": 0}, {"snippet_id": 55658, "code": " \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders", "label": 0}, {"snippet_id": 5854, "code": ": https://developers.google.com/api-client-library/python/samples/authorized_api_web_server_calendar.py \"\"\" def __init__(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self", "label": 0}, {"snippet_id": 78756, "code": " function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be", "label": 0}, {"snippet_id": 57915, "code": "(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\"", "label": 0}, {"snippet_id": 1089, "code": " encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html;", "label": 0}, {"snippet_id": 62471, "code": " session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code(session_info['name_id'", "label": 0}, {"snippet_id": 22071, "code": " Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether to start the web UI, which is a Jupyter notebook", "label": 0}, {"snippet_id": 60059, "code": "/spatialite.html\" ) else: raise return self._inspect def register_custom_units(self): \"Register any custom units defined in the metadata.json with Pint\" for unit in self.metadata(\"custom_units\") or[]: ureg", "label": 0}, {"snippet_id": 64075, "code": " action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location}).data user=current_app.central_userdb.get_user_by_eppn(eppn) current_app", "label": 0}, {"snippet_id": 25668, "code": "): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit", "label": 0}, {"snippet_id": 18565, "code": "\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"\" SignInHandler(): Class that handles /signin \"\"\"", "label": 1}, {"snippet_id": 41147, "code": "/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9101') self.assertContains", "label": 0}, {"snippet_id": 12611, "code": "=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders", "label": 0}, {"snippet_id": 49228, "code": "('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid() and document_type_form.has_changed", "label": 0}, {"snippet_id": 37968, "code": " return forms.inlineformset_factory(parent_model=parent_model, model=model, fields=formset_fields, formset=formset, form=form, extra=extra, can_delete=can_delete) def one(): ChemicalFormSet=make_formset", "label": 0}, {"snippet_id": 13994, "code": " determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long", "label": 0}, {"snippet_id": 42084, "code": " def test_upload_note(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, ", "label": 0}, {"snippet_id": 10703, "code": " configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link':", "label": 0}, {"snippet_id": 13105, "code": "{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 14682, "code": " main(): \"\"\" serial_redirection cli main function \"\"\" board_cfg=board_config.BoardConfig() node=_get_node(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect", "label": 1}, {"snippet_id": 24923, "code": ": addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis", "label": 0}, {"snippet_id": 60263, "code": "\".format(info[\"file\"]), uri=True, check_same_thread=False, ) self.prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms if custom_time_limit and custom_time_limit", "label": 0}, {"snippet_id": 50676, "code": "'Windows': return 'Windows-x86' if platform.system()=='Linux' and platform.architecture()[0]=='32bit': return 'Linux-x86' if platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux", "label": 0}, {"snippet_id": 35777, "code": ", classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail'", "label": 0}, {"snippet_id": 15791, "code": "=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/remove/<field>',", "label": 0}, {"snippet_id": 84067, "code": "=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name='edit.html', template_dir='wiki', extra_context=None, check_membership=False, is_member=None, is_private=None, *args, **kw): group", "label": 0}, {"snippet_id": 65589, "code": "(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self.filechooser_creation_dialog=Gtk.FileChooserDialog( \"Create new Database\", self, Gtk.FileChooserAction", "label": 0}, {"snippet_id": 27440, "code": " % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead", "label": 0}, {"snippet_id": 12555, "code": " matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, }", "label": 0}, {"snippet_id": 32793, "code": " that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ''' def __init__(self, base, redirections): self.base=base self.redirections", "label": 0}, {"snippet_id": 54829, "code": "\tanother_count_by_groups +=1 \t\t\t\tprint \"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing() \t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment", "label": 1}, {"snippet_id": 54742, "code": "(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=", "label": 1}, {"snippet_id": 13975, "code": " _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if", "label": 0}, {"snippet_id": 38141, "code": " tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'", "label": 0}, {"snippet_id": 9119, "code": " import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger", "label": 0}, {"snippet_id": 16812, "code": " gp_id, field in f.cleaned_data.items(): if gp_id in['the_set', 'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None,", "label": 0}, {"snippet_id": 74858, "code": " person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form'", "label": 0}, {"snippet_id": 11355, "code": " mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders", "label": 0}, {"snippet_id": 57412, "code": " print_transaction: transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf\"'.format", "label": 0}, {"snippet_id": 49439, "code": ", pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects", "label": 1}, {"snippet_id": 2399, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 60855, "code": " CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for", "label": 0}, {"snippet_id": 4399, "code": " to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition", "label": 0}, {"snippet_id": 42392, "code": " % dg_co.id) self.assertIn(b'Download Raw', resp.content) dg_ids=DataDocument.objects.filter( id__in=ExtractedChemical.objects.all().values('extracted_text_id') ).order_by().values_list('data_group_id'", "label": 0}, {"snippet_id": 3266, "code": ", 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback", "label": 0}, {"snippet_id": 26270, "code": " all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is", "label": 0}, {"snippet_id": 37697, "code": ".Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args, **kwargs): super(DocumentTypeForm", "label": 0}, {"snippet_id": 57777, "code": ", 0 ) return 0 def update_onboarding_step(step, user_id): find_crit={onboarding.USER_ID: user_id} onboarding_data=c_onboarding_status(use_secondary=True).find_one(find_crit) if not onboarding_data or not", "label": 0}, {"snippet_id": 28866, "code": "=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]", "label": 0}, {"snippet_id": 62374, "code": " session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user, relay_state)) return response @acs_action('change-password-action') def chpass_action(session_info, user", "label": 0}, {"snippet_id": 42973, "code": ".assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains(response", "label": 0}, {"snippet_id": 6455, "code": " to the originally requested page. \"\"\" try: session_csrf_token=session.pop('oidc_csrf_token') state=json.loads(request.args['state']) csrf_token=state['csrf_token'] destination=state['destination'] code", "label": 0}, {"snippet_id": 6894, "code": "(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user", "label": 0}, {"snippet_id": 63325, "code": ".assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__) @test_views.route('/test", "label": 0}, {"snippet_id": 61409, "code": " thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. ", "label": 0}, {"snippet_id": 55387, "code": ".path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)", "label": 0}, {"snippet_id": 2882, "code": " import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"", "label": 0}, {"snippet_id": 57576, "code": "'introduction_course_id' VIEW_INTRODUCTION=STEP_1 INTRODUCTION_INTRO=STEP_2 CREATE_COURSE=STEP_3 CREATE_COURSELET=STEP_4 CREATE_THREAD=STEP_5 PREVIEW_COURSELET=STEP_6 NEXT_STEPS=STEP_7 INVITE_SOMEBODY=STEP_8", "label": 1}, {"snippet_id": 14080, "code": ".AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not", "label": 0}, {"snippet_id": 84336, "code": ") -1 from_value=None if int(revision) is not int(revision_from) +1: from_value=revision_from template_params={'article': article, 'article_title': article.title, 'changeset': changeset, 'differences': changeset", "label": 0}, {"snippet_id": 49242, "code": ") if document_type_form.is_valid() and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404", "label": 0}, {"snippet_id": 57559, "code": " STEP_1='view_introduction' STEP_2='instructor_intro' STEP_3='create_course' STEP_4='create_courselet' STEP_5='create_thread' STEP_6='preview_courselet' STEP_7='next_steps' STEP_8='invite_somebody' INTRODUCTION_COURSE_ID", "label": 1}, {"snippet_id": 24774, "code": " import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger", "label": 0}, {"snippet_id": 71757, "code": "/google') req._load_session() req._load_user() user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual", "label": 0}, {"snippet_id": 78473, "code": ".organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id)", "label": 0}, {"snippet_id": 46850, "code": "\"/\" +str(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") new_zip_path=Path(settings.MEDIA_ROOT +\"/\" +str(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") zf=zipfile.ZipFile(str(new_zip_path), ", "label": 0}, {"snippet_id": 26151, "code": "._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file,", "label": 0}, {"snippet_id": 19676, "code": " choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants", "label": 0}, {"snippet_id": 60378, "code": " plugin[\"templates_path\"] for plugin in get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( [ FileSystemLoader(template_paths), PrefixLoader", "label": 0}, {"snippet_id": 53563, "code": "> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return", "label": 0}, {"snippet_id": 17263, "code": "{'tournament': t, 'round': round_num, 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, 'rounds/game_score.html', {'tournament", "label": 0}, {"snippet_id": 83696, "code": " started editing this article at %s') self.message_template=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60) def create_message(self, request): \"\"\"Send a message to the user if there is", "label": 0}, {"snippet_id": 77433, "code": " return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path)", "label": 0}, {"snippet_id": 4033, "code": "'location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1'", "label": 0}, {"snippet_id": 13077, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders", "label": 0}, {"snippet_id": 48975, "code": ".order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request", "label": 0}, {"snippet_id": 27048, "code": " be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start", "label": 0}, {"snippet_id": 39072, "code": " def zip_url(self): '''This is a \"falsy\" property. If the zip file cannot be found, dg.zip_url evaluates to boolean False ''' if self.get_zip_url()!='no_path_found': return(self.get_zip_url) else: return", "label": 0}, {"snippet_id": 67643, "code": "=objects_obj context['categories']=event_obj.getUniqCategory() context['types']=event_obj.getUniqType() context['count']=self.object_list.count() return context def get_queryset(self): pk=self.kwargs['pk'", "label": 0}, {"snippet_id": 78154, "code": "'update_frequency'] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS", "label": 1}, {"snippet_id": 65192, "code": "(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points, 'failed to compile code') output_json(args.points, deductions) return deductions +=grade(code_obj, name, args", "label": 0}, {"snippet_id": 25485, "code": " if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the", "label": 0}, {"snippet_id": 34291, "code": "-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field", "label": 0}, {"snippet_id": 68253, "code": "['search_form']=search_form count=self.object_list.count() context['count']=count context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset", "label": 0}, {"snippet_id": 20581, "code": " import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name", "label": 0}, {"snippet_id": 32690, "code": " wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH). args", "label": 0}, {"snippet_id": 73904, "code": "', positions_list_data(request, sort_by)) def position_detail_data(request, position): return{'baseVisibleText': InterfaceText, 'applicationsForm': ImportApplicationsForm, 'positionText': PositionText,", "label": 1}, {"snippet_id": 56873, "code": " extra_context['transaction']=transaction if request.method=='POST': form=concept_form(request.POST, instance=concept) if form.is_valid(): form.save() return redirect('transaction_edit', transaction_code", "label": 0}, {"snippet_id": 20212, "code": ".GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver", "label": 0}, {"snippet_id": 77531, "code": ".model as model import ckan.plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class", "label": 0}, {"snippet_id": 25773, "code": ".include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self._node_ip_address=ray_params.node_ip_address", "label": 0}, {"snippet_id": 56358, "code": ".DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_experience_redirect(self, share_id):", "label": 0}, {"snippet_id": 48284, "code": "(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc", "label": 0}, {"snippet_id": 64110, "code": "=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain ' 'the subject", "label": 0}, {"snippet_id": 70181, "code": " \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 61364, "code": "=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\")", "label": 0}, {"snippet_id": 21630, "code": " dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes", "label": 0}, {"snippet_id": 18364, "code": ".email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher from argon2, hashes the password, \tverifies if the", "label": 1}, {"snippet_id": 72542, "code": "'login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request)", "label": 0}, {"snippet_id": 34578, "code": "['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices", "label": 0}, {"snippet_id": 63164, "code": " nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self", "label": 0}, {"snippet_id": 15633, "code": "] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form.input_source_final.choices=get_inputs_choices() sub_form", "label": 0}, {"snippet_id": 35779, "code": " puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return", "label": 0}, {"snippet_id": 30809, "code": "\"<script>function myFunction(){alert('As juicy as this is, you are not authorized to delete this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request", "label": 0}, {"snippet_id": 47769, "code": ") \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else", "label": 0}, {"snippet_id": 58840, "code": ") status=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES, default='tester') course=models.ForeignKey", "label": 0}, {"snippet_id": 53548, "code": " dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project: 'projects.Project', error: Exception ) -> dict: \"\"\" :param project: :param", "label": 0}, {"snippet_id": 78065, "code": "['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description", "label": 0}, {"snippet_id": 74190, "code": " report(self): return self.get_object() class _ReportLimitedDetailPartial( _ReportDetailPartial, ratelimit.mixins.RatelimitMixin ): ratelimit_key=\"user\" ratelimit_rate=settings.DECRYPT_THROTTLE_RATE class", "label": 0}, {"snippet_id": 53625, "code": " encoding=redirection_source.encoding, write_through=True ) @property def source_encoding(self): if self.redirection_source.encoding: return self.redirection_source.encoding return 'utf8' def read_all(self) ->", "label": 1}, {"snippet_id": 79510, "code": " if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data request :type title:", "label": 0}, {"snippet_id": 51171, "code": ".name step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs) def add_option(self,", "label": 0}, {"snippet_id": 82773, "code": " remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status", "label": 0}, {"snippet_id": 62273, "code": "\n from time import time from saml2.ident import code from flask import session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action", "label": 0}, {"snippet_id": 59261, "code": " inspect_tables from.plugins import pm, DEFAULT_PLUGINS from.version import __version__ app_root=Path(__file__).parent.parent connections=threading.local() MEMORY=object() ConfigOption=collections.namedtuple(", "label": 0}, {"snippet_id": 47628, "code": " ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported", "label": 0}, {"snippet_id": 46334, "code": " records ' 'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list(", "label": 0}, {"snippet_id": 8653, "code": " Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth", "label": 0}, {"snippet_id": 8545, "code": " Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key", "label": 0}, {"snippet_id": 23435, "code": ") def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier.decode() return hex_identifier def hex_to_binary(hex_identifier)", "label": 0}, {"snippet_id": 10557, "code": "\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\")", "label": 0}, {"snippet_id": 35879, "code": " assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance", "label": 0}, {"snippet_id": 49730, "code": " FileNotFoundError: editor_content=\"\" return render_template(\"editor.html\", editor_content=editor_content) @app.route('/openFile') def openFile(): if(not 'email' in session) and(not 'social' in session): if", "label": 0}, {"snippet_id": 5845, "code": " https://developers.google.com/api-client-library/python/start/get_started @see: https://developers.google.com/api-client-library/python/samples/authorized_api_web_server_calendar.py \"\"\" def __init__(self", "label": 0}, {"snippet_id": 59731, "code": "\"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root), \"datasette/static/app.css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self", "label": 0}, {"snippet_id": 55466, "code": ".path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) \tdef utime(self,times): ", "label": 0}, {"snippet_id": 51944, "code": "=h.get_login_attempts() remaining=h.calc_attempts_remaining(num_attempts) email=request.form.get('email') pw=request.form.get('pw') user_record=q.get_user_by_email(email) if user_record is None: flash(", "label": 0}, {"snippet_id": 41516, "code": "'data_document',kwargs={'pk': doc.pk}) ) num_forms=response.context['detail_formset'].total_form_count() children=model.objects.filter( extracted_text=doc.extractedtext ).count() if doc.detail_page_editable: error", "label": 0}, {"snippet_id": 908, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>", "label": 0}, {"snippet_id": 43682, "code": " rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual", "label": 0}, {"snippet_id": 74777, "code": "(request, candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect", "label": 0}, {"snippet_id": 43238, "code": " ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name", "label": 0}, {"snippet_id": 41308, "code": " is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document=doc) if doc.data_group", "label": 0}, {"snippet_id": 39022, "code": "(self): '''This is a \"falsy\" property. If the folder cannot be found, dg.dg_folder evaluates to boolean False ''' if self.get_dg_folder() !='no_folder_found': return self.get_dg_folder() else: return False", "label": 0}, {"snippet_id": 50776, "code": "): self.is_enabled_by_default=enabled_by_default def set_optional(self, optional): self.is_optional=optional def test_conditions(self, env): if len(self.condition_sets)==0: return True for conditions in", "label": 0}, {"snippet_id": 21780, "code": " true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes()) def remaining_processes_alive(self): \"\"\"Return true if all remaining processes are", "label": 0}, {"snippet_id": 1250, "code": ". size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date", "label": 0}, {"snippet_id": 12179, "code": "'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), }", "label": 0}, {"snippet_id": 33801, "code": "() rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc.raw_chem_name, rc.sid if rc.sid else '') rc_row=bytes(rc_row, 'utf-8') self.assertNotIn(rc_row, response.content, 'The curated row should not appear", "label": 1}, {"snippet_id": 46926, "code": ".html'): datagroup=get_object_or_404(DataGroup, pk=pk) form=DataGroupForm(request.POST or None, instance=datagroup) header=f'Update Data Group for Data Source \"{datagroup.data_source}\"' if form.is_valid():", "label": 0}, {"snippet_id": 22448, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START", "label": 0}, {"snippet_id": 60304, "code": "=cursor.fetchmany(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args", "label": 0}, {"snippet_id": 7234, "code": " Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied", "label": 0}, {"snippet_id": 7939, "code": " reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns:", "label": 0}, {"snippet_id": 7571, "code": ".shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core", "label": 0}, {"snippet_id": 32302, "code": ".position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy creation of a stream of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType.EOF: break", "label": 0}, {"snippet_id": 29726, "code": " f=form.image.data fname=secure_filename(f.filename) f.save(join( current_app.static_folder, current_app.config['STATIC_BENWA_DIR'], fname )) fpath='/'.join(['thumbs', fname]) created=datetime.utcnow()", "label": 1}, {"snippet_id": 6870, "code": "') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_password.html\", form=form) @auth.route('/reset', methods=['GET', 'POST']) def password_reset_request", "label": 0}, {"snippet_id": 69827, "code": " Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date", "label": 1}, {"snippet_id": 84656, "code": "'recentchanges.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404(group_qs", "label": 0}, {"snippet_id": 73646, "code": ", 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required", "label": 0}, {"snippet_id": 70069, "code": "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 80372, "code": ".set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action.triggered.connect", "label": 0}, {"snippet_id": 84599, "code": " group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() template_params={'changes':", "label": 0}, {"snippet_id": 7042, "code": " Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent.') return redirect(url_for('main.index')) else", "label": 0}, {"snippet_id": 63719, "code": ".status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn", "label": 0}, {"snippet_id": 54316, "code": ".search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def politicians_by_state(state): pols=Politician.all() pols.filter(\"state=\", state.lower", "label": 0}, {"snippet_id": 66648, "code": "\"error\") composite_unlock_select_button.get_style_context().remove_class(\"suggested-action\") composite_unlock_select_button.get_style_context().add_class(\"destructive-action\") self.clear_input_fields()", "label": 0}, {"snippet_id": 43073, "code": "'/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext/7/', follow=True) self.assertIn(b'rawchem-1-unit_type', response.content) def test_cpcat_qa(self): response=self.client", "label": 0}, {"snippet_id": 22708, "code": " a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be", "label": 1}, {"snippet_id": 24159, "code": " on workers. Attributes: worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self", "label": 1}, {"snippet_id": 8213, "code": " enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to,", "label": 0}, {"snippet_id": 72726, "code": "'key') is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user", "label": 1}, {"snippet_id": 43559, "code": "=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) option=doc_type_select.first_selected_option", "label": 1}, {"snippet_id": 81071, "code": ".registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner.mobile if partner.mobile else '', 'email': partner.email if partner", "label": 0}, {"snippet_id": 27807, "code": ".node_ip_address, events) def add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes", "label": 0}, {"snippet_id": 55401, "code": " os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef", "label": 0}, {"snippet_id": 31508, "code": "'NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True STATIC_ROOT=os.environ.get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static')) STATIC_URL='/static/", "label": 0}, {"snippet_id": 12229, "code": " password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest)", "label": 0}, {"snippet_id": 65139, "code": " break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef, ast.AsyncFunctionDef]: if", "label": 0}, {"snippet_id": 15632, "code": ".change_input_series_all_models[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form.input_source_final.choices", "label": 0}, {"snippet_id": 73041, "code": " import ScreenDoorUser, Position, Applicant from.uservisibletext import ErrorMessages, CreatePositionFormText, \\ CreateAccountFormText, StandardFormText, LoginFormText class ImportApplicationsForm(forms", "label": 1}, {"snippet_id": 10845, "code": " 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method", "label": 0}, {"snippet_id": 48891, "code": ".get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve", "label": 0}, {"snippet_id": 1698, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return", "label": 0}, {"snippet_id": 61804, "code": " try: prior_result=securedrop.results.latest() except ScanResult.DoesNotExist: results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result): prior_result.result_last_seen", "label": 1}, {"snippet_id": 69903, "code": " may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create", "label": 0}, {"snippet_id": 30244, "code": " response=make_response( json.dumps('Failed to upgrade the authorization code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token url=('https", "label": 0}, {"snippet_id": 27746, "code": " for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can", "label": 1}, {"snippet_id": 18675, "code": " and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"\" \tdef", "label": 1}, {"snippet_id": 47304, "code": "=uploaded, extracted=extracted) out=zip(ds_list, frm_list) if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if", "label": 0}, {"snippet_id": 1385, "code": " use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath=''", "label": 1}, {"snippet_id": 24629, "code": ": \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames(", "label": 0}, {"snippet_id": 9316, "code": "( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js", "label": 0}, {"snippet_id": 34404, "code": " doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait", "label": 0}, {"snippet_id": 43510, "code": " unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*", "label": 0}, {"snippet_id": 2939, "code": ".session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce", "label": 0}, {"snippet_id": 6963, "code": "('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password", "label": 0}, {"snippet_id": 84422, "code": " 'changes': changes, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response(", "label": 0}, {"snippet_id": 75935, "code": ", ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default", "label": 0}, {"snippet_id": 60928, "code": "\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return", "label": 0}, {"snippet_id": 10951, "code": "=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'", "label": 0}, {"snippet_id": 18339, "code": "): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password):", "label": 1}, {"snippet_id": 71719, "code": "(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user) def", "label": 0}, {"snippet_id": 49737, "code": " @app.route('/openFile') def openFile(): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('", "label": 0}, {"snippet_id": 14960, "code": "'values']['y'].append(values[date]) if re.search(':timeseries$', name): attrs=name.split(':') (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts", "label": 0}, {"snippet_id": 46743, "code": " continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']=='': line['title']=line['filename'].split('.')[0] if code=='': errors.append", "label": 0}, {"snippet_id": 4356, "code": ".assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"", "label": 1}, {"snippet_id": 74129, "code": ".EncryptedReportStorageHelper EVAL_ACTION_TYPE=\"VIEW\" @property def site_id(self): return self.request.site.id @property def decrypted_report(self): return self.report.decrypt_record(self.storage.passphrase) def get_form_kwargs", "label": 0}, {"snippet_id": 31540, "code": " project_clone urlpatterns=patterns( '', url(r'^$', home_page, name='home_page'), url(r'^draw/?$', home_page, name='home_page'), url(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects, name", "label": 1}, {"snippet_id": 81397, "code": " repeating_event.fit_repetition=='weekly': self._handle_weekly_event_repetition(repeating_event) if repeating_event.fit_repetition=='monthly': self._handle_montly_event_repetition(repeating_event) def _handle_daily_event_repetition", "label": 0}, {"snippet_id": 80021, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk", "label": 0}, {"snippet_id": 62750, "code": " request that needs to be athenticated. :param eppn: the eppn of the user to be logged in :type eppn: str :param came_from: url to redirect back the client after finishing with the authn service. :type", "label": 0}, {"snippet_id": 64475, "code": "'eduPersonAssurance']=loa session.persist() response=redirect(location_on_success) session.set_cookie(response) current_app.logger.info('Successful token login, redirecting user{} to{}'.format(user, location_on_success", "label": 0}, {"snippet_id": 23315, "code": " number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random", "label": 0}, {"snippet_id": 17527, "code": " form=form) @bp.route('/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session.modified=False response=flask.make_response(flask.redirect(redirect_url())) response.set_cookie", "label": 0}, {"snippet_id": 55848, "code": " Link(FSItem): \tdef __init__(self,path): \t\tsuper(Link,self).__init__(path) \t\tassert(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder", "label": 0}, {"snippet_id": 20415, "code": " accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler: self.autoscaler", "label": 0}, {"snippet_id": 56693, "code": ".transactions.forms import TransactionEditForm, TransactionPayForm from clickgestion.transactions.models import BaseConcept, Transaction from django.shortcuts import get_object_or_404, render, redirect", "label": 0}, {"snippet_id": 68648, "code": " content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() if hunt.notice", "label": 0}, {"snippet_id": 76464, "code": ".debug(\"tilepixel_rect: %s\", str(tilepixel_rect)) offset_within_tiled_image=geom.Pair( tilepixel_rect.x0 % _TILE_PIXEL_SIZE, tilepixel_rect.y0 % _TILE_PIXEL_SIZE ) logger.debug(\"Offset within: %s\", str", "label": 0}, {"snippet_id": 57019, "code": " .order_by('-id') return self.queryset def get_available_concepts(employee, transaction): \"\"\" Get a list of the available concepts that can be added to the given transaction. :param employee: The employee", "label": 0}, {"snippet_id": 18730, "code": "/ \"\"\" class IndexHandler(tornado.web.RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler", "label": 1}, {"snippet_id": 6163, "code": " exc_info=True) del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server(request.url) g.oidc_id_token=id_token return None def require_login(self, view_func): \"\"\" Use this to decorate", "label": 0}, {"snippet_id": 47019, "code": " pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg.get_zip_url(), 'rb') response=HttpResponse(zip_file, content_type='application/zip') response['Content-Disposition", "label": 0}, {"snippet_id": 1173, "code": "/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in", "label": 0}, {"snippet_id": 10442, "code": ".djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register", "label": 0}, {"snippet_id": 46893, "code": " group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context={'form': form, 'header': header, 'datasource': datasource, ", "label": 0}, {"snippet_id": 15066, "code": " reverse=False) return render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled\"\"", "label": 0}, {"snippet_id": 34263, "code": " qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_chem=self.browser.find_element_by_xpath( '/", "label": 0}, {"snippet_id": 48723, "code": "' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required", "label": 0}, {"snippet_id": 71858, "code": ".assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, {'level': 'success'", "label": 0}, {"snippet_id": 53048, "code": " 'house_cond': HC_SL}, 'city_form':{'preferred_city': ''}, 'max_budget_form':{'budget': 1200.59}, 'current_rent_form':{'current_rent': 321.49}, 'how_soon_form':{'how_soon': HS_3}, 'personal_profile_form", "label": 0}, {"snippet_id": 48699, "code": ": ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids", "label": 0}, {"snippet_id": 49959, "code": "(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name: if name[-4:] !=\".pml\": name +=\".pml\" if allowed_file(name): session['currentFile']=name if 'email' in", "label": 0}, {"snippet_id": 80473, "code": "(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception", "label": 0}, {"snippet_id": 51697, "code": "'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script def genSCI(): pass", "label": 1}, {"snippet_id": 10209, "code": " user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from", "label": 0}, {"snippet_id": 68554, "code": " class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def get_success_url(self): self.object.start() return '/twitter_hunter' class HuntUpdateView", "label": 0}, {"snippet_id": 45930, "code": " CleanCompDataForm, create_detail_formset, include_extract_form, include_clean_comp_data_form) from dashboard.utils import get_extracted_models, clean_dict, update_fields from django.db.models import Max", "label": 1}, {"snippet_id": 29465, "code": ") user_id=resp['user_id'] user=User.query.filter_by(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for", "label": 0}, {"snippet_id": 53304, "code": "\" module_name=step.definition.name.rsplit('.', 1)[0] module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code(source_code,", "label": 1}, {"snippet_id": 67998, "code": "): model=Event template_name='threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def", "label": 0}, {"snippet_id": 50811, "code": " self.action(context) class BuildContext(object): pass def flatten_string_list(arglist): \"\"\" Assemble a list of string, such as for a subprocess call. Input should be a string or a list containing only", "label": 0}, {"snippet_id": 83343, "code": ") def clean_title(self): \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title", "label": 1}, {"snippet_id": 34641, "code": ") the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e", "label": 0}, {"snippet_id": 36386, "code": " self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0", "label": 0}, {"snippet_id": 6722, "code": "=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit() token=user.generate_confirmation_token() send_email(user.email, 'Confirm Your", "label": 0}, {"snippet_id": 27380, "code": "\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, ", "label": 0}, {"snippet_id": 27220, "code": " ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port", "label": 0}, {"snippet_id": 75184, "code": "'etd_app/candidate_metadata.html', context) @login_required def candidate_committee(request, candidate_id): from.forms import CommitteeMemberPersonForm, CommitteeMemberForm try: candidate=_get_candidate", "label": 0}, {"snippet_id": 64496, "code": " response except current_app.central_userdb.exceptions.UserDoesNotExist: current_app.logger.error('No user with eduPersonPrincipalName={} found'.format(eppn)) except current_app.central_userdb.exceptions", "label": 0}, {"snippet_id": 55931, "code": " EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse('', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN", "label": 0}, {"snippet_id": 73979, "code": " views if you are implementing callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en/1.11", "label": 0}, {"snippet_id": 12784, "code": "(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if", "label": 0}, {"snippet_id": 21695, "code": "=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for", "label": 0}, {"snippet_id": 49659, "code": " editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session", "label": 0}, {"snippet_id": 29241, "code": " return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor(): return dict( admin_base_template=admin.base_template, admin_view", "label": 0}, {"snippet_id": 26594, "code": ": \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor", "label": 0}, {"snippet_id": 54881, "code": "): \t\tdef __init__(self,student,book_edition,chapter,number,code): \t\t\tself.student=student \t\t\tself.book_edition=book_edition \t\t\tself.chapter=chapter \t\t\tself.number=number \t\t\tself.code=code \tfrom collections", "label": 0}, {"snippet_id": 52381, "code": "(user_id, project_id) return \"HTTP-status-code: 200\" @app.route(\"/add-to-board\", methods=[\"POST\"]) def add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team", "label": 0}, {"snippet_id": 41158, "code": " response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9101') self.assertContains(response, f'product/%s' % new_product.id) def test_add_extracted(self): '''Check that the user", "label": 0}, {"snippet_id": 51604, "code": " 'scp':scp, 'require_version':require_version } try: execfile(os.path.join('projectdata', buildname+'_behaviour.py'), behaviour_globals) builder.run(argv) except AbortRunException as e: print e.message", "label": 0}, {"snippet_id": 66857, "code": " context['geoip']=GeoIP().lookup(domain) except Exception as e: print(e) pass try: context['ipaddress']=socket.gethostbyname(domain) except Exception as e: pass vt=VT() context['vt_domain']=vt.getDomainReport", "label": 0}, {"snippet_id": 8540, "code": " authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current", "label": 0}, {"snippet_id": 20266, "code": " subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils", "label": 0}, {"snippet_id": 75553, "code": " HttpResponseForbidden('You don\\'t have permission to view this candidate\\'s thesis.') if not candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be", "label": 0}, {"snippet_id": 22808, "code": "\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key", "label": 0}, {"snippet_id": 63451, "code": ".app.config['NO_AUTHN_URLS']) with self.app.test_client() as c: resp=c.get('/test3') self.assertEqual(resp.status_code, 200) class LogoutRequestTests(AuthnAPITestBase): def test_metadataview(self): with", "label": 0}, {"snippet_id": 55443, "code": "\t\tif isinstance(other,FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) \tdef rmdir(self): \t\treturn os.rmdir(self.path) \tdef stat(self): \t\treturn os.stat(self", "label": 0}, {"snippet_id": 42230, "code": " be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertIn('<th>Product</th>', response, 'Data", "label": 0}, {"snippet_id": 27998, "code": " __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import", "label": 0}, {"snippet_id": 45767, "code": ".Meta.model script=Script.objects.get(title__icontains='Manual(dummy)') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext", "label": 1}, {"snippet_id": 31277, "code": "'DEFAULT_AUTHENTICATION_CLASSES':( 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication' ) } SOCIAL_AUTH_URL_NAMESPACE='auth' SOCIAL_AUTH_LOGIN_REDIRECT_URL=os.environ", "label": 1}, {"snippet_id": 67730, "code": ".distinct() context['types']=attr.values_list('type', flat=True).order_by('type').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET) context['search_form", "label": 0}, {"snippet_id": 43108, "code": "/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781)", "label": 0}, {"snippet_id": 21743, "code": " a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items():", "label": 0}, {"snippet_id": 77262, "code": " logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{", "label": 1}, {"snippet_id": 75073, "code": " and is locked.') if request.method=='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form.is_valid(): thesis=form.save", "label": 0}, {"snippet_id": 9915, "code": " _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns", "label": 0}, {"snippet_id": 14493, "code": " the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders", "label": 0}, {"snippet_id": 6624, "code": ".route('/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed.html') @auth.route('/login", "label": 0}, {"snippet_id": 18835, "code": "\t\thandlers=[ \t\t\t(r'/',IndexHandler), \t\t\t(r'/signup', SignUpHandler), \t\t\t(r'/signin', SignInHandler), \t\t\t(r'/postlogin',PostLoginHandler) \t\t], \t\ttemplate_path=os.path.join(os.path.dirname(__file__),\"templates", "label": 1}, {"snippet_id": 69389, "code": ".2', 'tornado<6.0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"\"\" Setup given list of users as admins. \"\"\" if", "label": 0}, {"snippet_id": 26308, "code": ".include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER", "label": 0}, {"snippet_id": 44526, "code": " downloaded_by=user, downloaded_at=timezone.now(), group_type=gt, csv='register_records_matching.csv', url='https://www.epa.gov') dt=DocumentType.objects.create(title='MSDS', code='MS', group_type=gt) doc", "label": 0}, {"snippet_id": 37566, "code": " Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form.submit();' class BulkProductTagForm(forms.ModelForm): required_css_class='required' tag=forms", "label": 0}, {"snippet_id": 76070, "code": ": return filename return resolve_path( project=self.project, language=language, version_slug=version_slug, filename=filename, ) def get_redirect_path(self, path, language=None, version_slug=None): method", "label": 1}, {"snippet_id": 69545, "code": " sudo -E in sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os", "label": 0}, {"snippet_id": 1444, "code": ".path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s", "label": 1}, {"snippet_id": 34915, "code": " CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect", "label": 0}, {"snippet_id": 27036, "code": " Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker", "label": 0}, {"snippet_id": 52513, "code": "=project_id).first() checked_lst=request.form.get(\"completion\") updated_notes=request.form.get(\"notes\") project_object.notes=updated_notes congratulatory_messages=[\"High five!\", \"Nice work!\", \"You rock.", "label": 0}, {"snippet_id": 81319, "code": ".fit_is_participating=False @api.onchange('date_begin') def update_day_of_week(self): start_date=self.date_begin_located if start_date: self.fit_day_of_week=datetime.strptime(start_date, '%Y-%m-%d %H:%M:%S", "label": 0}, {"snippet_id": 48197, "code": " tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, ", "label": 1}, {"snippet_id": 48707, "code": " puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ", "label": 0}, {"snippet_id": 81311, "code": "(domain) if count > 0: event.fit_is_participating=True else: event.fit_is_participating=False @api.onchange('date_begin') def update_day_of_week(self): start_date=self.date_begin_located if start_date: self", "label": 0}, {"snippet_id": 84380, "code": ") def article_history(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki', extra_context=None, is_member=None", "label": 0}, {"snippet_id": 13740, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if", "label": 0}, {"snippet_id": 28215, "code": " is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time", "label": 0}, {"snippet_id": 40694, "code": "+str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0],('gen_cat", "label": 1}, {"snippet_id": 45404, "code": " response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods", "label": 1}, {"snippet_id": 44046, "code": "'sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel", "label": 0}, {"snippet_id": 3392, "code": "(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names", "label": 0}, {"snippet_id": 81802, "code": "'input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}", "label": 0}, {"snippet_id": 13453, "code": " user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions", "label": 0}, {"snippet_id": 36690, "code": ".month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count()", "label": 0}, {"snippet_id": 77901, "code": " org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id", "label": 0}, {"snippet_id": 5995, "code": "[self.app.config['OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True)", "label": 0}, {"snippet_id": 13696, "code": ".password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse", "label": 0}, {"snippet_id": 68160, "code": " % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter", "label": 0}, {"snippet_id": 59207, "code": " from jinja2 import ChoiceLoader, Environment, FileSystemLoader, PrefixLoader from sanic import Sanic, response from sanic.exceptions import InvalidUsage, NotFound from.views.base import( DatasetteError,", "label": 0}, {"snippet_id": 22612, "code": " profile a span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object)", "label": 0}, {"snippet_id": 73807, "code": " return '-date_closed' elif request.POST.get(\"sort-position\"): return 'position_title' return sort_by def positions_list_data(request, sort_by): return{ 'baseVisibleText': InterfaceText, 'positionText'", "label": 0}, {"snippet_id": 48771, "code": ".objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm", "label": 0}, {"snippet_id": 79632, "code": " context, data_dict): \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be", "label": 0}, {"snippet_id": 69722, "code": " open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={} hook=plugin_manager.hook hook.tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main(", "label": 0}, {"snippet_id": 17359, "code": "' and form.validate(): if app.config['MAINTENANCE_MODE'] and not app.config['MAINTENANCE_MODE_LOGINS']: flask.flash(flask.Markup('<strong>Logins are currently disabled.</strong>'), 'danger') return flask", "label": 0}, {"snippet_id": 72516, "code": " import gettext as _ from screendoor.redactor import parse_applications from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm from.models import EmailAuthenticateToken", "label": 1}, {"snippet_id": 16250, "code": ".filter(the_round=r).exists() current['round_%d' % r.number()]=played data.append(current) if round_num: formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num), initial=data", "label": 0}, {"snippet_id": 3996, "code": " into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username", "label": 0}, {"snippet_id": 10903, "code": ".objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else", "label": 0}, {"snippet_id": 75075, "code": " if request.method=='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form.is_valid(): thesis=form.save() if thesis.abstract", "label": 0}, {"snippet_id": 83628, "code": " article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname, group=None, args=None, kw=None): if group is None: return reverse(urlname, args=args", "label": 0}, {"snippet_id": 65631, "code": ".add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk.ResponseType.OK: self.does_file_exist() elif response==Gtk.ResponseType.CANCEL: self.filechooser_creation_dialog.close(", "label": 0}, {"snippet_id": 22366, "code": "*kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None", "label": 0}, {"snippet_id": 9145, "code": "(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode", "label": 0}, {"snippet_id": 57988, "code": "\"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps(): data[step]={ 'done': onboarding_status", "label": 0}, {"snippet_id": 43596, "code": " '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser", "label": 1}, {"snippet_id": 24630, "code": "\"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self", "label": 1}, {"snippet_id": 57941, "code": " \"description\": \"\", \"title\": \"\" } }, \"create_courselet\":{ \"done\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title</p>", "label": 0}, {"snippet_id": 10724, "code": " 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset", "label": 0}, {"snippet_id": 21274, "code": " allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in", "label": 0}, {"snippet_id": 7155, "code": " qsystem import db class ExamTypeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed def get_query(self", "label": 1}, {"snippet_id": 41044, "code": "'Product card should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, '/link_product_form/167497/", "label": 0}, {"snippet_id": 59227, "code": " ) from.views.database import DatabaseDownload, DatabaseView from.views.index import IndexView from.views.special import JsonDataView from.views.table import RowView, TableView from.utils import( InterruptedError", "label": 0}, {"snippet_id": 54204, "code": ", query) politician=None for p in politicians: politician=p if politician !=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician", "label": 1}, {"snippet_id": 72060, "code": " result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path", "label": 0}, {"snippet_id": 7643, "code": " TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import", "label": 0}, {"snippet_id": 50354, "code": " oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication", "label": 0}, {"snippet_id": 14747, "code": ".path import json import redis import re import pprint pp=pprint.PrettyPrinter(indent=4) app=Flask(__name__) app.config['SECRET_KEY']='secret' app.jinja_env.filters['json_pretty']=lambda value: json.dumps", "label": 0}, {"snippet_id": 32194, "code": " self.char=='<': token=Token(TokenType.REDIRECT_IN, None, self.position) self.read() return token elif self.char=='|': token=Token(TokenType.PIPE, None, self.position) self.read() return token elif self", "label": 0}, {"snippet_id": 3737, "code": "']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range", "label": 0}, {"snippet_id": 4843, "code": "(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self)", "label": 0}, {"snippet_id": 976, "code": ".lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path", "label": 1}, {"snippet_id": 34179, "code": " doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]'", "label": 0}, {"snippet_id": 17056, "code": "=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue try:", "label": 0}, {"snippet_id": 5921, "code": "'OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE'", "label": 0}, {"snippet_id": 72943, "code": " Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() request.session['position_sort']=sort_by return render(request", "label": 0}, {"snippet_id": 25818, "code": "._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name", "label": 0}, {"snippet_id": 16589, "code": " two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7", "label": 0}, {"snippet_id": 56278, "code": " \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/e/AsdE43E4&other=param' '&st=a&sd=d&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link", "label": 0}, {"snippet_id": 64026, "code": " current session object :return: NameID :rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=['POST", "label": 0}, {"snippet_id": 59376, "code": ")), ConfigOption(\"suggest_facets\", True, \"\"\" Calculate and display suggested facets \"\"\".strip()), ConfigOption(\"allow_sql\", True, \"\"\" Allow arbitrary SQL queries via ?sql=parameter \"\"\".strip()), ConfigOption", "label": 1}, {"snippet_id": 1315, "code": " loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve", "label": 0}, {"snippet_id": 6710, "code": ", methods=['GET', 'POST']) def register(): form=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add", "label": 0}, {"snippet_id": 29474, "code": " login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id session['token']=resp['oauth_token'", "label": 0}, {"snippet_id": 25520, "code": " autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type", "label": 0}, {"snippet_id": 42045, "code": "'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product self.assertEqual(product", "label": 0}, {"snippet_id": 25615, "code": " division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray", "label": 0}, {"snippet_id": 71286, "code": " 'level': level}) add_message=_add_message def _get_messages(self, key='_messages'): try: return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self):", "label": 1}, {"snippet_id": 39790, "code": "=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is a part of", "label": 0}, {"snippet_id": 13655, "code": ", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses", "label": 0}, {"snippet_id": 67483, "code": " tag=self.request.GET.get('tag') if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level'", "label": 0}, {"snippet_id": 13469, "code": " form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint", "label": 0}, {"snippet_id": 75180, "code": "'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app/candidate_metadata.html', context) @login_required def candidate_committee(request, candidate_id): from.forms import CommitteeMemberPersonForm,", "label": 0}, {"snippet_id": 63052, "code": ".central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login') def test_chpass_authn(self): self.authn('/chpass', force_authn=True) def test_terminate_authn(self): self.authn(", "label": 0}, {"snippet_id": 39493, "code": " dashboard.models import CommonInfo from.raw_chem import RawChem class ExtractedListPresence(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old", "label": 1}, {"snippet_id": 57790, "code": " onboarding_data=c_onboarding_status(use_secondary=True).find_one(find_crit) if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{'$set':{ step: True }},", "label": 0}, {"snippet_id": 4545, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in", "label": 0}, {"snippet_id": 25266, "code": "._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls", "label": 0}, {"snippet_id": 17027, "code": ") round_players=r.roundplayer_set.count() expected_games=(round_players +6) // 7 if expected_games < 1: expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count", "label": 0}, {"snippet_id": 51236, "code": "*kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args) self._check_call(args, env", "label": 0}, {"snippet_id": 84751, "code": " return redirect(article) def article_preview(request): \"\"\"This is a AJAX function that previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs", "label": 0}, {"snippet_id": 56640, "code": " when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def then_response_should_be_json(self, json_string): assert json.loads(self.response.content)==json.loads(json_string", "label": 0}, {"snippet_id": 4597, "code": ".get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains", "label": 0}, {"snippet_id": 51390, "code": " sys.stdout)) stderr_thread=threading.Thread(target=pump_output_thread, args=(stderr, sys.stderr)) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel", "label": 0}, {"snippet_id": 18798, "code": "\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': \ttornado.options.parse_command_line() \tsettings=", "label": 1}, {"snippet_id": 79840, "code": " close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be", "label": 0}, {"snippet_id": 1648, "code": "\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item", "label": 0}, {"snippet_id": 40325, "code": " Return true when the percent checked is above the threshold \"\"\" return self.get_pct_checked_numeric() >=self.QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA", "label": 0}, {"snippet_id": 64777, "code": ", points, 'unable to execute function') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions", "label": 1}, {"snippet_id": 14445, "code": " redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page", "label": 0}, {"snippet_id": 4822, "code": ".\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %", "label": 0}, {"snippet_id": 70718, "code": ".http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None", "label": 0}, {"snippet_id": 40753, "code": "[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures", "label": 0}, {"snippet_id": 9459, "code": "=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email", "label": 0}, {"snippet_id": 79178, "code": " datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator Email') if", "label": 1}, {"snippet_id": 40609, "code": " must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get(", "label": 0}, {"snippet_id": 76107, "code": "=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting %s', self) cut_path=re.sub('^%s' % self.from_url, '', path) to", "label": 0}, {"snippet_id": 18307, "code": "\t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email':self", "label": 0}, {"snippet_id": 16481, "code": "': count, 'sitters': sitters, 'doubles': doubles} form=GetSevenPlayersForm(request.POST or None, the_round=r) if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1): rp.game_count=1 rp.save", "label": 0}, {"snippet_id": 83361, "code": " Database level \"\"\" title=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title", "label": 1}, {"snippet_id": 84509, "code": " try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else", "label": 1}, {"snippet_id": 27147, "code": " plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir", "label": 0}, {"snippet_id": 77859, "code": ".get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user", "label": 0}, {"snippet_id": 20466, "code": " address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False", "label": 0}, {"snippet_id": 10677, "code": " account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to", "label": 0}, {"snippet_id": 28837, "code": ".limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil", "label": 0}, {"snippet_id": 56247, "code": "/people/me/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_an_experience_on_db", "label": 0}, {"snippet_id": 61996, "code": " validate_cache_control_header(page, expected_directive): header=page.headers.get('Cache-Control', '') directives=[directive.lower().strip() for directive in header.split(',')] return expected_directive in", "label": 0}, {"snippet_id": 35309, "code": " def link_product_form(request, pk, template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product", "label": 0}, {"snippet_id": 42996, "code": "=self.client.get('/qa/extractedtext/5', follow=True) self.assertIn(b'/datadocument/5', response.content) def test_approval(self): response=self.client.get('/qa/extractionscript/5', follow=True) response", "label": 0}, {"snippet_id": 47148, "code": " 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save", "label": 0}, {"snippet_id": 59545, "code": "=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(\"max_returned_rows\") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self", "label": 0}, {"snippet_id": 50482, "code": " released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"APPDATA\"]+\"\\", "label": 0}, {"snippet_id": 79305, "code": "=str(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest", "label": 0}, {"snippet_id": 39286, "code": "=models.CharField(\"Raw maximum composition\", max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\"", "label": 0}, {"snippet_id": 7326, "code": "'appointments_enabled_ind', 'timezone') column_labels={'sb': 'Smartboard', 'timezone.timezone_name': 'Timezone Name'} column_sortable_list=['office_name', 'sb', 'deleted', 'exams_enabled_ind'] column_default_sort='office_name", "label": 0}, {"snippet_id": 80764, "code": " action in self.lock_actions] else: self.lock_all_action.setChecked(False) print(\"Couldn't lock all laser components.\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled", "label": 0}, {"snippet_id": 74926, "code": ")[0] context_data={'candidate': candidate} other_candidacies=Candidate.objects.filter(person__netid=request.user.username).exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies", "label": 0}, {"snippet_id": 73655, "code": " return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request)", "label": 0}, {"snippet_id": 16630, "code": " round_number): \"\"\"Return a GameSeeder that knows about the tournament so far\"\"\" tourney_players=tournament.tournamentplayer_set.all() seeder=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10", "label": 0}, {"snippet_id": 53656, "code": " state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err:", "label": 1}, {"snippet_id": 56149, "code": " Client from django.urls import reverse from experiences.models import ORMExperience from people.models import ORMPerson from profiles.models import ORMProfile class RedirectConfirmEmailTestCase(TestCase):", "label": 0}, {"snippet_id": 42406, "code": "'extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp.status_code", "label": 0}, {"snippet_id": 83338, "code": "'group', 'created_at', 'last_update') def clean_title(self): \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done", "label": 1}, {"snippet_id": 79156, "code": "._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit", "label": 0}, {"snippet_id": 10430, "code": " CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client", "label": 0}, {"snippet_id": 29273, "code": ".register_blueprint(gallery) app.register_blueprint(auth) app.register_blueprint(user) configure_uploads(app,(images,)) patch_request_class(app, FILE_SIZE_LIMIT) return app def register_blueprints(app)", "label": 0}, {"snippet_id": 24628, "code": " def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames", "label": 0}, {"snippet_id": 53697, "code": " self.bytes_buffer.seek(0) if contents is None: return '' return contents.decode(self.source_encoding) def write_both(self, *args, **kwargs): abort_thread() if self.active: self.last_write_time=time.time(", "label": 1}, {"snippet_id": 40436, "code": " not None: for text in texts: text.qa_group=qa_group text.save() if force_doc_id is not None and ExtractedText.objects.filter(pk=force_doc_id).exists(): text=ExtractedText.objects.get(pk=force_doc_id) text", "label": 0}, {"snippet_id": 535, "code": " use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath=''", "label": 1}, {"snippet_id": 78249, "code": " org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users:", "label": 0}, {"snippet_id": 58410, "code": " desc\", \"title\": \"create_course\" } }, onboarding.CREATE_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" } ", "label": 0}, {"snippet_id": 14922, "code": ") return render_template('models.html', models=models) @app.route('/results') def view_results(): results=load_json('results.json') time_series=[] for name, values in results.items(): ts={ 'id': name, ", "label": 0}, {"snippet_id": 11477, "code": " def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 65460, "code": "=builder.get_object(\"first_start_grid\") self.add(self.first_start_grid) def create_container(self): if self.first_start_grid !=NotImplemented: self.first_start_grid.destroy() self.container=Gtk.Notebook(", "label": 0}, {"snippet_id": 43064, "code": "-1-unit_type\"', response.content) self.assertIn(b'Functional Use Chem1', response.content) response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext/7/", "label": 0}, {"snippet_id": 67701, "code": ": model=Attribute template_name='threat/attribute_list.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): attr=Attribute.objects.all() context=super().get_context_data", "label": 0}, {"snippet_id": 79946, "code": "=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req", "label": 0}, {"snippet_id": 57561, "code": "'instructor_intro' STEP_3='create_course' STEP_4='create_courselet' STEP_5='create_thread' STEP_6='preview_courselet' STEP_7='next_steps' STEP_8='invite_somebody' INTRODUCTION_COURSE_ID='introduction_course_id", "label": 1}, {"snippet_id": 74442, "code": " form_invalid(self, form): return super().form_invalid(form) def view_action(self): pass class ReportDeletePartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"DELETE\" def view_action(self): self.report.delete()", "label": 0}, {"snippet_id": 9815, "code": "\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context", "label": 0}, {"snippet_id": 68601, "code": " redirect('twitter_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for tw in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by(", "label": 0}, {"snippet_id": 45906, "code": ".contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.http import HttpResponse from django.core.paginator import Paginator from dashboard", "label": 0}, {"snippet_id": 3599, "code": "\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self)", "label": 0}, {"snippet_id": 47061, "code": " columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg.get_name_as_slug() + \"_registered_records.csv\"), field_header_map", "label": 0}, {"snippet_id": 49574, "code": ".config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS']=set(['pml']) def get_resource_as_string(name, charset='utf-8'): with app.open_resource(name) as f: return f.read().decode(charset)", "label": 0}, {"snippet_id": 84725, "code": "=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if notification.is_observing", "label": 0}, {"snippet_id": 84319, "code": "(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision", "label": 0}, {"snippet_id": 10309, "code": "': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages", "label": 0}, {"snippet_id": 41856, "code": "') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup/{self.objects.dg", "label": 0}, {"snippet_id": 3689, "code": "'login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register", "label": 1}, {"snippet_id": 64386, "code": " or SAMLRequest parameter found') abort(400) @authn_views.route('/token-login', methods=['POST']) def token_login(): current_app.logger.debug('Starting token login') location_on_fail=current_app.config", "label": 0}, {"snippet_id": 14056, "code": ": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to", "label": 0}, {"snippet_id": 25239, "code": "\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message", "label": 0}, {"snippet_id": 67775, "code": " query=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(value__icontains=keyword))", "label": 0}, {"snippet_id": 46974, "code": ": group.codes=DocumentType.objects.filter(group_type=group) return render(request, template_name,{'datagroup': datagroup, 'form': form, 'header': header, 'groups': groups}) @login_required() def data_group_delete", "label": 0}, {"snippet_id": 66264, "code": " password_unlock_button.connect(\"clicked\", self.on_password_unlock_button_clicked) keyfile_unlock_button=self.builder.get_object(\"keyfile_unlock_button\") keyfile_unlock_button.connect(\"clicked\", self.on_keyfile_unlock_button_clicked", "label": 0}, {"snippet_id": 58508, "code": ".return_value={ onboarding.VIEW_INTRODUCTION: False, onboarding.INTRODUCTION_INTRO: False, onboarding.CREATE_COURSE: True, onboarding.CREATE_COURSELET: False, onboarding.CREATE_THREAD: False, onboarding", "label": 1}, {"snippet_id": 71736, "code": "() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create(auth_id, user_info) req=EngineAuthRequest", "label": 0}, {"snippet_id": 52978, "code": " request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase): def setUp(self", "label": 0}, {"snippet_id": 75630, "code": "'Previously Used', 'children': _select2_list(keywords)}] else: return[] def _build_fast_url(term, index): url='%s?query=%s&queryIndex=%s' %(settings.FAST_LOOKUP_BASE_URL, urllib.parse.quote(term), index) url", "label": 0}, {"snippet_id": 15638, "code": ".get('input_source_final', '') for index, command in enumerate(get_command('change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial", "label": 0}, {"snippet_id": 50476, "code": " unlocktime=datetime.datetime.now() print \"Lock released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self, name): BaseUserLock", "label": 0}, {"snippet_id": 77499, "code": " logger.debug(\"Fetching layer information for target url '%s'\", target_url) layers_by_name=_LayersFromServerVars(target_url) for layer_name in layers_by_name.keys(): if layers_by_name[layer_name].db_type", "label": 0}, {"snippet_id": 52046, "code": ": teams_list=[] invites_list=[] user_id=session.get(\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id", "label": 0}, {"snippet_id": 3547, "code": " response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/", "label": 0}, {"snippet_id": 13527, "code": "=\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[", "label": 0}, {"snippet_id": 47195, "code": ",'raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group=dg).first() if et: dg_name=dg.get_name_as_slug() qs=ExtractedChemical.objects", "label": 0}, {"snippet_id": 19397, "code": " log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port,", "label": 1}, {"snippet_id": 27785, "code": ".mode==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address", "label": 0}, {"snippet_id": 25851, "code": "(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare", "label": 0}, {"snippet_id": 67859, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) count=self.object_list.count() context['count']=count return context def get_queryset(self): query=Org.objects.order_by('id') return query", "label": 0}, {"snippet_id": 76859, "code": " im_tile=None logger.error(\"Failed to fetch tile:%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the", "label": 1}, {"snippet_id": 56774, "code": " if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept.concept_type)", "label": 0}, {"snippet_id": 57065, "code": ".','.add_') concept_model=apps.get_model(concept) if not permission in concepts_permitted_by_employee: continue disabled=False url=concept_model._url.format('new/{}'.format(transaction.code)) if not permission", "label": 0}, {"snippet_id": 50172, "code": ".html\") @app.route(\"/signup\", methods=[\"POST\"]) def signUpButton(): email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password\"] password_hash=generate_password_hash", "label": 0}, {"snippet_id": 6503, "code": "=self.flow_for_request() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get('hd')", "label": 0}, {"snippet_id": 24281, "code": "(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key))", "label": 0}, {"snippet_id": 73566, "code": "']=None request.GET._mutable=False def authenticate_user(account_key): if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user", "label": 0}, {"snippet_id": 33278, "code": ".register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC", "label": 1}, {"snippet_id": 64189, "code": "('Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods", "label": 0}, {"snippet_id": 25355, "code": "(\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split(\":\")[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to", "label": 0}, {"snippet_id": 13769, "code": ".objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else", "label": 0}, {"snippet_id": 70597, "code": ": f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since", "label": 0}, {"snippet_id": 2009, "code": "/body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index',", "label": 0}, {"snippet_id": 80347, "code": " setup_action_listeners(self): self.clear_log_area_action.triggered.connect(self.clear_log_area) self.open_idle_action.triggered.connect(self.open_idle) self.restart_action.triggered.connect(self.restart) self", "label": 0}, {"snippet_id": 54545, "code": " sys.stdout=codecs.getwriter(locale.getpreferredencoding())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import pprint", "label": 0}, {"snippet_id": 59676, "code": ": for item in search_list: if key in item: return item[key] return None else: m={} for item in search_list: m.update(item) return m def plugin_config( self, plugin_name, database=None, table=None, fallback", "label": 0}, {"snippet_id": 50470, "code": "(self, etype, einstance, etraceback): self.release() unlocktime=datetime.datetime.now() print \"Lock released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock", "label": 0}, {"snippet_id": 70397, "code": ").replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 17390, "code": "=form.password.data user=models.User.by_username(username) if not user: user=models.User.by_email(username) if not user or password !=user.password_hash: flask.flash(flask.Markup( '<strong>Login failed", "label": 0}, {"snippet_id": 46693, "code": " table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count+=1 doc_type=DocumentType", "label": 0}, {"snippet_id": 47803, "code": "'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' ", "label": 0}, {"snippet_id": 67738, "code": "').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET) context['search_form']=search_form return context def get_queryset(self): query=Attribute.objects", "label": 0}, {"snippet_id": 29192, "code": " from benwaonline.gallery import gallery from benwaonline.gallery.forms import images from benwaonline.user import user from benwaonline.auth import auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security", "label": 1}, {"snippet_id": 79078, "code": ") users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context", "label": 1}, {"snippet_id": 62502, "code": " import NotFound from werkzeug.http import dump_cookie from flask import session from flask import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb.user import User from eduid_userdb", "label": 0}, {"snippet_id": 73691, "code": " id=request.session['position_id'])) @login_required(login_url='/login/', redirect_field_name=None) def import_position(request): if request.method=='POST': create_position_form=CreatePositionForm( request", "label": 0}, {"snippet_id": 28831, "code": " in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f: docker_limit=int", "label": 0}, {"snippet_id": 61060, "code": " host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def", "label": 0}, {"snippet_id": 72022, "code": ".rgw_client import RgwClient def NfsTask(name, metadata, wait_for): def composed_decorator(func): return Task(\"nfs/{}\".format(name), metadata, wait_for, partial(serialize_dashboard_exception, include_http_status", "label": 0}, {"snippet_id": 43109, "code": " follow=True) self.assertIn( f'/qa/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps", "label": 0}, {"snippet_id": 13046, "code": " /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def", "label": 0}, {"snippet_id": 40075, "code": " def get_data_document(self): '''Find the child object by trying each of the classes, then return the datadocument id from it NOTE: this will be obsolete once we move the data_document foreign key into", "label": 0}, {"snippet_id": 54192, "code": "'POST', 'GET']) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician=None for p in politicians: politician=p if politician !=None", "label": 1}, {"snippet_id": 56427, "code": "/dynamic.link/link=http://pachatary.com/p/a_b.c&other=param' '&st=%40a_b.c&sd=my+info&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectProfileTestCase.ScenarioMaker", "label": 0}, {"snippet_id": 29455, "code": "'You denied the request to sign in.') return redirect(url_for('gallery.show_posts')) user_id=resp['user_id'] user=User.query.filter_by(user_id=user_id).first() if user: login_user(user) next=request.args", "label": 0}, {"snippet_id": 30739, "code": "(){alert('As juicy as this is, you are not authorized to edit this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': if request", "label": 1}, {"snippet_id": 3403, "code": " HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return", "label": 0}, {"snippet_id": 77295, "code": " read, start regex\") logger.debug(\"JSON vars: %s\", result) p=re.compile(r\"var geeServerDefs=\") result=p.sub(\"\", result) p=re.compile(r\";\\s*$\") result=p.sub(\"\", result) p=re.compile(r\"([\\[\\{,])\\s*(\\w+)\\s", "label": 0}, {"snippet_id": 55744, "code": "\t\ttry: \t\t\tthe_file=self[name] \t\texcept IndexError: \t\t\tthe_file=self.create(File,name) \t\treturn the_file class Line(object): \tdef __init__(self,file,number,text): \t\tself.file=file \t\tself.number=number \t", "label": 1}, {"snippet_id": 31045, "code": "'description'] if request.form['processed']: editgrudge.processed=request.form['processed'] if request.form['takeaway']: editgrudge.takeaway=request.form['takeaway'] session.add(editgrudge) session.commit", "label": 0}, {"snippet_id": 69627, "code": "=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format( len(apt_packages", "label": 0}, {"snippet_id": 69441, "code": " f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger", "label": 0}, {"snippet_id": 48614, "code": "['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter", "label": 0}, {"snippet_id": 47081, "code": "=DataDocument.objects.filter(data_group_id=0).values(*columnlist) return render_to_csv_response(qs, filename=\"registered_records.csv\", use_verbose_names=False) @login_required() def habitsandpractices(request", "label": 0}, {"snippet_id": 68793, "code": " stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc.stdout.decode() assert proc.stderr.decode", "label": 0}, {"snippet_id": 25085, "code": "( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex", "label": 0}, {"snippet_id": 33427, "code": "', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0] ds=dd.data_group.data_source", "label": 0}, {"snippet_id": 11904, "code": ".core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api", "label": 0}, {"snippet_id": 67098, "code": "(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes", "label": 0}, {"snippet_id": 60679, "code": "+templates info.update( {\"ok\": False, \"error\": message, \"status\": status, \"title\": title} ) if request is not None and request.path.split(\"?\")[0].endswith(\".json\"): return response.json(info, status=status", "label": 0}, {"snippet_id": 14173, "code": " the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized", "label": 0}, {"snippet_id": 63957, "code": " consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config, session,", "label": 0}, {"snippet_id": 40910, "code": " from django.test import TestCase, override_settings from django.core.exceptions import ObjectDoesNotExist from dashboard.forms import * from factotum.settings import EXTRA from dashboard.tests.loader import", "label": 0}, {"snippet_id": 62505, "code": " import dump_cookie from flask import session from flask import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb.user import User from eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE", "label": 0}, {"snippet_id": 69265, "code": ".9.4', 'jupyterhub-dummyauthenticator==0.3.1', 'jupyterhub-systemdspawner==0.11', 'jupyterhub-firstuseauthenticator==0.12', 'jupyterhub-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2'", "label": 1}, {"snippet_id": 84166, "code": "=group new_article, changeset=form.save() return redirect(new_article) elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip} if group_slug is not None: initial.update({'content_type", "label": 0}, {"snippet_id": 60974, "code": ".CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the", "label": 0}, {"snippet_id": 71666, "code": "/google') req.cookies['_eauth']=s.serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query()", "label": 0}, {"snippet_id": 83452, "code": "=self.instance.markup self.is_new=False def save(self, *args, **kwargs): editor_ip=self.cleaned_data['user_ip'] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs", "label": 0}, {"snippet_id": 73635, "code": "{'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText", "label": 0}, {"snippet_id": 54212, "code": "=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html", "label": 1}, {"snippet_id": 64437, "code": "(eppn=eppn, token=token, nonce=nonce, timestamp=timestamp): try: user=current_app.central_userdb.get_user_by_eppn(eppn) if user.locked_identity.count > 0: current_app.logger.error('Not new user{} tried", "label": 0}, {"snippet_id": 11439, "code": " if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date'", "label": 0}, {"snippet_id": 17306, "code": " datetime from ipaddress import ip_address import flask from nyaa import email, forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link", "label": 0}, {"snippet_id": 2920, "code": " login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 ", "label": 0}, {"snippet_id": 66691, "code": ") self.unlock_database_stack_box.destroy() UnlockedDatabase(self.window, self.parent_widget, self.database_manager) def clear_input_fields(self): password_unlock_entry=self.builder.get_object(\"password_unlock_entry", "label": 0}, {"snippet_id": 54837, "code": " detect_cheating(self): \t\tself.prepare_for_processing() \t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tp_text=string.join", "label": 0}, {"snippet_id": 38963, "code": " self.name def get_absolute_url(self): return reverse('data_group_edit', kwargs={'pk': self.pk}) def get_name_as_slug(self): return self.name.replace(' ', '_') def get_dg_folder(self): uuid_dir=f'{settings", "label": 0}, {"snippet_id": 37156, "code": "\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label=\"Weight Fraction Type\", initial=\"1\") extract_file=forms.FileField(label=\"Extracted Text", "label": 0}, {"snippet_id": 2120, "code": "(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError):", "label": 0}, {"snippet_id": 78323, "code": " as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants", "label": 0}, {"snippet_id": 9577, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in", "label": 0}, {"snippet_id": 181, "code": " os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime", "label": 0}, {"snippet_id": 59393, "code": "\"\"\".strip()), ConfigOption(\"default_cache_ttl\", 365 * 24 * 60 * 60, \"\"\" Default HTTP cache TTL(used in Cache-Control: max-age=header) \"\"\".strip()), ConfigOption(\"cache_size_kb\", 0, \"\"\" SQLite cache size", "label": 1}, {"snippet_id": 64892, "code": " status indicates the validity of the cases\") parser.add_argument('-t', '--test_case', required=True, action='append', help=\"The test cases to run the students code against. Each test case \" \"must take", "label": 0}, {"snippet_id": 31660, "code": ".locale=locale request.user.save() max_age=10 * 365 * 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME, locale, max_age=max_age, expires=(datetime.utcnow() +timedelta(seconds=max_age)).strftime( ", "label": 0}, {"snippet_id": 76507, "code": " user_height))) im_user=im_true.resize((user_width, user_height), Image.ANTIALIAS) return im_user def _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles for a given image", "label": 0}, {"snippet_id": 38850, "code": ", blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return str(self.group_type.code) @property def is_composition(self): return self.type=='CO", "label": 0}, {"snippet_id": 35868, "code": "') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=", "label": 0}, {"snippet_id": 33355, "code": " django.contrib.auth.models import User from dashboard.models import PUC, Product, ProductToPUC, ProductDocument, DSSToxLookup from dashboard.views.get_data import * from django.test import TestCase from", "label": 0}, {"snippet_id": 58169, "code": ".STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 75", "label": 1}, {"snippet_id": 65285, "code": "().__init__(*args, **kwargs) keepassgtk.config_manager.configure() self.assemble_window() def assemble_window(self): self.set_default_size(800, 500) self.create_headerbar() self.first_start_screen() self", "label": 0}, {"snippet_id": 26394, "code": " process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and", "label": 0}, {"snippet_id": 18513, "code": "[_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a", "label": 1}, {"snippet_id": 51487, "code": "(VERSION, required_version),32) def windows_program_exists(program): return subprocess.call([\"where\", \"/q\", program], shell=False)==0 def other_program_exists(program): return subprocess.call([\"/bin/sh\", ", "label": 1}, {"snippet_id": 5773, "code": " import os import json from base64 import b64encode import time as time_module from copy import copy import logging from six.moves.urllib.parse import urlencode from flask import request, session, redirect", "label": 0}, {"snippet_id": 75849, "code": " TYPE_CHOICES=( ('prefix', _('Prefix Redirect')), ('page', _('Page Redirect')), ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir', _('Sphinx HTML -> HTMLDir')", "label": 0}, {"snippet_id": 22839, "code": " called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings.", "label": 0}, {"snippet_id": 63622, "code": "('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) with self.app.test_request_context", "label": 0}, {"snippet_id": 63262, "code": " config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self):", "label": 0}, {"snippet_id": 65319, "code": "\"/run/terminal/KeepassGtk/main_window.ui\") self.headerbar=builder.get_object(\"headerbar\") file_open_button=builder.get_object(\"open_button\") file_open_button.connect(\"clicked\", self.open_filechooser, None", "label": 0}, {"snippet_id": 2611, "code": "'LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure", "label": 0}, {"snippet_id": 57517, "code": ".cleaned_data['save_button']: transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_pay.html", "label": 0}, {"snippet_id": 80433, "code": "=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id", "label": 0}, {"snippet_id": 73750, "code": "/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): save_position_to_user(request) return redirect('home'", "label": 0}, {"snippet_id": 64855, "code": " points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure to carefully escape", "label": 0}, {"snippet_id": 45086, "code": "['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count() stats['datadocument_with_extracted_text_percent']=\\ DataDocument.objects.filter(extracted=True).count", "label": 0}, {"snippet_id": 26671, "code": "\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that", "label": 0}, {"snippet_id": 73276, "code": ".PasswordInput) def clean(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data.get('password') user=authenticate(username=email, password=password) if user is None: message=forms", "label": 0}, {"snippet_id": 27665, "code": ".global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes: worker: the worker to profile.", "label": 0}, {"snippet_id": 44162, "code": "('There should be a circle' 'drawn for every PUC')) def test_datagroup(self): list_url=self.live_server_url +'/datagroups/' self.browser.get(list_url) self.browser.find_element_by_xpath('//*[@title=\"edit", "label": 0}, {"snippet_id": 57552, "code": " def transactions_open(request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) filter_data={ 'closed': False, } listview=TransactionList.as_view() return", "label": 1}, {"snippet_id": 42804, "code": "==group_pk) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/15/\\'> Continue QA\".encode(), response.content) def test_qa_script_without_ext_text(self): response", "label": 0}, {"snippet_id": 83397, "code": " old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type", "label": 1}, {"snippet_id": 5615, "code": ", }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 55393, "code": " None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef", "label": 0}, {"snippet_id": 66246, "code": ") self.overlay.add(stack) self.unlock_database_stack_box.add(self.overlay) self.unlock_database_stack_box.show_all() self.parent_widget.add(self.unlock_database_stack_box) def connect_events(self): password_unlock_button", "label": 0}, {"snippet_id": 5991, "code": ": id_token_cookie=request.cookies[self.app.config['OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid", "label": 0}, {"snippet_id": 11993, "code": " login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword", "label": 0}, {"snippet_id": 65523, "code": ".FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run()", "label": 0}, {"snippet_id": 46730, "code": " continue if len(line['filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line", "label": 0}, {"snippet_id": 6834, "code": ", methods=['GET', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password(form.old_password.data): current_user.password=form", "label": 0}, {"snippet_id": 13425, "code": "=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the", "label": 0}, {"snippet_id": 44002, "code": ": self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit(", "label": 1}, {"snippet_id": 56006, "code": "(experience.description) > 77 else experience.description preview_content={'st': experience.title, 'sd': desc, 'si': experience.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus", "label": 0}, {"snippet_id": 27089, "code": " password from connecting to Redis if provided. plasma_directory: A directory where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that will be run by the worker.", "label": 0}, {"snippet_id": 26391, "code": " method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process", "label": 0}, {"snippet_id": 71153, "code": " session_id=session.key.id() if session_id !=session.user_id: session=models.Session.upgrade_to_user_session( session_id, session.user_id) self.set_cookie('_eauth', session.serialize()) return self def", "label": 0}, {"snippet_id": 17987, "code": "=flask.url_for('main.home') url=flask.request.args.get('next') or \\ flask.request.referrer or \\ home_url if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link", "label": 1}, {"snippet_id": 79691, "code": ":param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string ", "label": 0}, {"snippet_id": 61467, "code": " mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check", "label": 0}, {"snippet_id": 78090, "code": ", \"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email", "label": 1}, {"snippet_id": 36887, "code": ") < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count", "label": 0}, {"snippet_id": 42749, "code": ") self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript/{pk}/') et=ExtractedText.objects.filter(extraction_script=pk).first", "label": 0}, {"snippet_id": 33971, "code": "\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser", "label": 0}, {"snippet_id": 71249, "code": ", profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile", "label": 0}, {"snippet_id": 38690, "code": " import shutil import uuid from factotum import settings from pathlib import Path, PurePath from django.db import models from.common_info import CommonInfo from django.urls import reverse from django.db", "label": 1}, {"snippet_id": 76623, "code": " rect_of_tiles) world_extent_in_tiles=2 ** zoom_level tiles_array=images.ImagesArray( rect_of_tiles.Width(), rect_of_tiles.Height()) logger.debug(\"World extent in tiles: %s\", str(world_extent_in_tiles)", "label": 0}, {"snippet_id": 35337, "code": "'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if", "label": 0}, {"snippet_id": 35827, "code": " p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None", "label": 0}, {"snippet_id": 81486, "code": "._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info(", "label": 0}, {"snippet_id": 82080, "code": ", kwargs={'pk': created.pk})) return render(request, 'home.html',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short", "label": 0}, {"snippet_id": 79617, "code": "[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action, context, data_dict): \"\"\"", "label": 1}, {"snippet_id": 76914, "code": " IOError, e: logger.error(\"Failed to save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source image to be", "label": 0}, {"snippet_id": 64572, "code": " 'BrokenPipeError', 'BufferError', '__build_class__', 'bytearray', 'bytes', 'BytesWarning', 'callable', 'ChildProcessError', 'chr', 'classmethod', 'complex', 'ConnectionAbortedError', 'ConnectionError'", "label": 0}, {"snippet_id": 67782, "code": "=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(value__icontains=keyword)).order_by('-timestamp') return query def thirty_day_data(self): data", "label": 0}, {"snippet_id": 1009, "code": " HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.", "label": 1}, {"snippet_id": 16884, "code": " the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power=power) current[gp.id]=power", "label": 0}, {"snippet_id": 19347, "code": " ray_constants from ray.services import get_ip_address from ray.services import get_port import ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring", "label": 1}, {"snippet_id": 63821, "code": " from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp.authn.schemas import LogoutPayload, LogoutResponseSchema authn_views=Blueprint('authn', __name__) @authn_views.route('/login'", "label": 1}, {"snippet_id": 11138, "code": " following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None", "label": 0}, {"snippet_id": 30332, "code": "'s client ID does not match app's.\"), 401) print \"Token's client ID does not match app's.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session.get('access_token", "label": 0}, {"snippet_id": 46798, "code": " doc=DataDocument(filename=line['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group=datagroup) doc.save() text.append(str(doc.pk)+','+'", "label": 0}, {"snippet_id": 2713, "code": ") class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__", "label": 0}, {"snippet_id": 61936, "code": "/hc/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux Digital: https://whotracks.me/trackers/krux_digital.html ", "label": 0}, {"snippet_id": 46170, "code": " set(table.fieldnames)) if missing: context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] ext_parent", "label": 0}, {"snippet_id": 78011, "code": "=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\" self._load_config() context", "label": 0}, {"snippet_id": 79246, "code": " user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show", "label": 0}, {"snippet_id": 55044, "code": " class FSPath(object): \tdef __init__(self,path): \t\tself.path=path \tdef __sub__(self,other): \t\tif(self.path.startswith(other.path)): \t\t\tr=self.path[len(other.path):] \t\t\tassert((other.path+r)==self.path) \t", "label": 0}, {"snippet_id": 65098, "code": " tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed: if vlevel >=1: print(repr(se), file=sys.stderr) dock_points(deductions, args.points, 'syntax error')", "label": 0}, {"snippet_id": 65630, "code": ".filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk.ResponseType.OK: self.does_file_exist() elif response==Gtk.ResponseType.CANCEL: self", "label": 0}, {"snippet_id": 34238, "code": " Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for", "label": 1}, {"snippet_id": 52801, "code": "**kwargs): room_id=self.request.data.get('room') try: self.room=Room.objects.get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text", "label": 0}, {"snippet_id": 46115, "code": " context['extract_form']=form context['msg']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request", "label": 0}, {"snippet_id": 83596, "code": " group=None if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_qs=article_qs.filter(content_type=get_ct(group), object_id=group.id) return article_qs", "label": 0}, {"snippet_id": 56959, "code": ",{}) return super().get(self, request, *args, **kwargs) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context", "label": 0}, {"snippet_id": 35843, "code": " pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid()", "label": 0}, {"snippet_id": 15272, "code": "(FormField(ChangeInputNewValue), min_entries=0) change_timeseries_value_several_days_add_delta=FieldList(FormField(ChangeInputAddDelta), min_entries=0) def get_models_choices(): models=load_json('models.json", "label": 0}, {"snippet_id": 54650, "code": "\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor problem in problems: \t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem", "label": 1}, {"snippet_id": 12660, "code": "\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request):", "label": 0}, {"snippet_id": 78664, "code": " request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype", "label": 0}, {"snippet_id": 70544, "code": "</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 38334, "code": "\nfrom.common_info import CommonInfo from.data_source import DataSource from.group_type import GroupType from.data_group import DataGroup from.document_type import DocumentType from.data_document import", "label": 0}, {"snippet_id": 56620, "code": "\"appID\": \"ASDF.com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response", "label": 0}, {"snippet_id": 34283, "code": ".until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id='id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 14149, "code": " for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form", "label": 0}, {"snippet_id": 80555, "code": "'Opening IDLE.') subprocess.Popen('python -m idlelib -t \"Matisse Controller -Python Shell\" -c \"from matisse import Matisse; ' + 'matisse=Matisse(); print(\\'Access the Matisse using \\\\\\'matisse.[method]\\\\\\'\\')", "label": 1}, {"snippet_id": 25987, "code": " ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file", "label": 0}, {"snippet_id": 73499, "code": ".split( '.')[1].split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request", "label": 0}, {"snippet_id": 48576, "code": " detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request):", "label": 0}, {"snippet_id": 60060, "code": "\" ) else: raise return self._inspect def register_custom_units(self): \"Register any custom units defined in the metadata.json with Pint\" for unit in self.metadata(\"custom_units\") or[]: ureg.define(unit", "label": 0}, {"snippet_id": 60338, "code": " params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio.get_event_loop().run_in_executor( self.executor", "label": 0}, {"snippet_id": 60941, "code": " a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent", "label": 0}, {"snippet_id": 57505, "code": ".closed_date=timezone.datetime.now() transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']: transaction.save() return redirect(", "label": 0}, {"snippet_id": 16293, "code": " continue i, created=TournamentPlayer.objects.get_or_create(player=p, tournament=t) try: i.full_clean() except ValidationError as e: form.add_error(form.fields['player'], e) i.delete() return render(request,", "label": 0}, {"snippet_id": 79671, "code": " send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the", "label": 0}, {"snippet_id": 2279, "code": "') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath", "label": 1}, {"snippet_id": 76303, "code": ": The user-requested projected, ie map coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height", "label": 0}, {"snippet_id": 15883, "code": "]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self", "label": 0}, {"snippet_id": 67246, "code": "(self, request, **kwargs): if request.GET.get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView", "label": 1}, {"snippet_id": 47723, "code": "=Count('curated_chemical__extracted_text_id', distinct=True)).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count", "label": 0}, {"snippet_id": 68610, "code": " stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for tw in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')) row=", "label": 0}, {"snippet_id": 10864, "code": " usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user", "label": 0}, {"snippet_id": 3915, "code": " target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, ", "label": 0}, {"snippet_id": 82894, "code": " to model a component crash. Provides the name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed", "label": 0}, {"snippet_id": 78280, "code": "(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +", "label": 0}, {"snippet_id": 84540, "code": " not possible because an article with name \\'%s\\' already exists' % old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None,", "label": 0}, {"snippet_id": 81069, "code": "['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner.mobile if partner.mobile else '', 'email': partner", "label": 0}, {"snippet_id": 16272, "code": ", initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue", "label": 0}, {"snippet_id": 65492, "code": ".connect(\"switch-page\", self.on_tab_switch) self.add(self.container) self.show_all() def destroy_container(self): self.container.destroy() def open_filechooser(self, widget, none): filechooser_opening_dialog", "label": 0}, {"snippet_id": 47193, "code": ",'raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group=dg).first() if et: dg_name=dg.get_name_as_slug() qs=ExtractedChemical", "label": 0}, {"snippet_id": 28842, "code": "(memory_limit_filename, \"r\") as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes", "label": 0}, {"snippet_id": 80295, "code": " self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action", "label": 0}, {"snippet_id": 51169, "code": " if enabled: print step.name step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs)", "label": 0}, {"snippet_id": 65900, "code": ".update_tab_bar_visibility() def on_cancel_button_clicked(self, widget): self.override_dialog.destroy() self.filechooser_creation_dialog.destroy() def on_override_button_clicked(self, widget): self.copy_database_file(", "label": 0}, {"snippet_id": 63888, "code": "('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url", "label": 1}, {"snippet_id": 3092, "code": "]=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView", "label": 1}, {"snippet_id": 38329, "code": "(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\") ordering=('name'", "label": 1}, {"snippet_id": 4207, "code": " for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def", "label": 0}, {"snippet_id": 33929, "code": " raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter", "label": 0}, {"snippet_id": 58143, "code": " onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4", "label": 1}, {"snippet_id": 8226, "code": " _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is", "label": 0}, {"snippet_id": 53569, "code": "=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating.render_template", "label": 0}, {"snippet_id": 39282, "code": " null=True, blank=True) raw_max_comp=models.CharField(\"Raw maximum composition\", max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models", "label": 0}, {"snippet_id": 5349, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']", "label": 1}, {"snippet_id": 29691, "code": ") if post.items: return render_template('show.html', post=post, form=CommentForm()) flash('That Benwa doesn\\'t exist yet') return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/add", "label": 0}, {"snippet_id": 18892, "code": "\n\"\"\"Base core views.\"\"\" from __future__ import unicode_literals from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from.", "label": 0}, {"snippet_id": 8153, "code": " return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 34862, "code": " def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response", "label": 0}, {"snippet_id": 30445, "code": "-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are now logged in as %s\" % login_session['username']) print \"done!\" return output @app.route('/logout') def disconnect(): if 'provider'", "label": 1}, {"snippet_id": 35284, "code": "(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,", "label": 0}, {"snippet_id": 31191, "code": " import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s '*szo DEBUG=literal_eval(os.environ.get('DJANGO_DEBUG', 'False')", "label": 0}, {"snippet_id": 49440, "code": "=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects", "label": 1}, {"snippet_id": 36054, "code": "'gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key", "label": 0}, {"snippet_id": 41609, "code": "(username='Karyn', password='specialP@55word') def test_detail_form_load(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should", "label": 0}, {"snippet_id": 42492, "code": ",200) qa_group=QAGroup.objects.get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get", "label": 0}, {"snippet_id": 26263, "code": ".PROCESS_TYPE_RAYLET_MONITOR]=[ process_info ] def start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to", "label": 0}, {"snippet_id": 30791, "code": ".filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if grudgetToDelete.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as", "label": 1}, {"snippet_id": 83000, "code": " comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name", "label": 0}, {"snippet_id": 14999, "code": " rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:', name): attrs=name.split(',", "label": 0}, {"snippet_id": 30692, "code": "']) session.add(newGrudget) session.commit() return redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST", "label": 0}, {"snippet_id": 50182, "code": ": email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email, password_hash) session['email']=email", "label": 0}, {"snippet_id": 8976, "code": " HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views", "label": 0}, {"snippet_id": 54213, "code": " politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) ", "label": 1}, {"snippet_id": 14650, "code": "'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login", "label": 0}, {"snippet_id": 22399, "code": " update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use ", "label": 0}, {"snippet_id": 63923, "code": " authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info('Redirecting the user to the IdP", "label": 0}, {"snippet_id": 21711, "code": " self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return", "label": 0}, {"snippet_id": 27645, "code": " will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet", "label": 0}, {"snippet_id": 13364, "code": " get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from", "label": 0}, {"snippet_id": 32286, "code": ".append(self.char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility", "label": 0}, {"snippet_id": 78170, "code": "'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name):", "label": 0}, {"snippet_id": 40537, "code": ".client.logout() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'", "label": 0}, {"snippet_id": 83068, "code": "\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def", "label": 0}, {"snippet_id": 51287, "code": "\"fetch_dependencies\", kwargs, {\"platform\":None}) dependencies=flatten_string_list(dependencies) platform=kwargs['platform'] or self._context.env[\"PLATFORM\"] dependency_collection=self._dependency_collection(", "label": 0}, {"snippet_id": 71051, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This", "label": 0}, {"snippet_id": 10301, "code": ": user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history", "label": 0}, {"snippet_id": 26868, "code": " Attributes: redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store", "label": 0}, {"snippet_id": 19293, "code": " serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE", "label": 0}, {"snippet_id": 63856, "code": " chpass(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('change-password-action', force_authn=True) @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn view, sends", "label": 0}, {"snippet_id": 56773, "code": ".transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept", "label": 0}, {"snippet_id": 41143, "code": " 'upc' :['stub_9101'], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401", "label": 0}, {"snippet_id": 72103, "code": "): if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot create this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance", "label": 0}, {"snippet_id": 67122, "code": "-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'", "label": 0}, {"snippet_id": 61931, "code": ".com/docs/ Quantcast: https://quantcast.zendesk.com/hc/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux Digital:", "label": 0}, {"snippet_id": 70401, "code": "') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath", "label": 1}, {"snippet_id": 38863, "code": ".group_type.code) @property def is_composition(self): return self.type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=", "label": 0}, {"snippet_id": 2999, "code": " if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=", "label": 0}, {"snippet_id": 4788, "code": "' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self", "label": 0}, {"snippet_id": 45308, "code": "', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12", "label": 0}, {"snippet_id": 38550, "code": " types allowed by the group type ``organization`` ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275)", "label": 0}, {"snippet_id": 44809, "code": " note\" try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type(ex).__name__, ex.args) long_note='A long QA note' * 200 note", "label": 0}, {"snippet_id": 28829, "code": " of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f", "label": 0}, {"snippet_id": 24568, "code": ".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]", "label": 1}, {"snippet_id": 43651, "code": ".click() raw_chem=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//", "label": 1}, {"snippet_id": 38204, "code": " def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self)", "label": 0}, {"snippet_id": 2081, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about.", "label": 0}, {"snippet_id": 62796, "code": "', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': came_from}): response1=self.app.dispatch_request() cookie=response1.headers['Set-Cookie", "label": 0}, {"snippet_id": 40997, "code": "=DataDocument.objects.first() response=self.client.get(f'/datadocument/179486/') self.assertIn('Download Script',response.content.decode('utf-8')) self.assertIn('Extraction Script',response.content.decode", "label": 0}, {"snippet_id": 12383, "code": "'hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to", "label": 0}, {"snippet_id": 53523, "code": " project: :return: \"\"\" filename=stack_frame.filename if filename.startswith(project.source_directory): filename=filename[len(project.source_directory) +1:] location=stack_frame.name if location=='<module", "label": 0}, {"snippet_id": 484, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$',", "label": 0}, {"snippet_id": 77191, "code": " +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles", "label": 0}, {"snippet_id": 73722, "code": "'pdf', errors) if create_position_form.is_valid(): position=dictionary.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position", "label": 0}, {"snippet_id": 12941, "code": " unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods", "label": 0}, {"snippet_id": 26653, "code": ".PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self", "label": 0}, {"snippet_id": 41191, "code": " group types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number':['47']} response=self.client", "label": 0}, {"snippet_id": 61158, "code": "\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self,", "label": 0}, {"snippet_id": 13426, "code": "(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login", "label": 0}, {"snippet_id": 2058, "code": "'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value", "label": 0}, {"snippet_id": 37517, "code": "=ExtractedHabitsAndPracticesToPUC fields=['puc'] class BulkProductPUCForm(forms.ModelForm): id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput(), required=True) class Meta: model=ProductToPUC fields=", "label": 0}, {"snippet_id": 53876, "code": ".results_path, '.cache', 'steps', '{}.json'.format(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition", "label": 0}, {"snippet_id": 29537, "code": "('Username %s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session.pop('token') user", "label": 0}, {"snippet_id": 81608, "code": "'fit.subscription', inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0 for subscription", "label": 0}, {"snippet_id": 52395, "code": " add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None)", "label": 0}, {"snippet_id": 9453, "code": " limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure(", "label": 0}, {"snippet_id": 7961, "code": " 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method", "label": 0}, {"snippet_id": 24360, "code": " function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR, traceback_str, driver_id=ray", "label": 0}, {"snippet_id": 1308, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 18434, "code": " match the submitted value. \tThen checks if the submitted username and email already exist in database by calling check_if_exists \tif check_if_exists returns not None then renders signup.html with the error", "label": 1}, {"snippet_id": 13483, "code": ".query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return", "label": 0}, {"snippet_id": 42848, "code": "(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText.objects.filter(qa_group=None).filter(extraction_script=scr )", "label": 0}, {"snippet_id": 7608, "code": ".programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site", "label": 0}, {"snippet_id": 26941, "code": " name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to", "label": 0}, {"snippet_id": 76740, "code": " parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile", "label": 0}, {"snippet_id": 23867, "code": " in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail", "label": 0}, {"snippet_id": 44557, "code": "'example.pdf') p=Product.objects.create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family', prod_type='Test Product Type", "label": 0}, {"snippet_id": 34423, "code": " cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button", "label": 0}, {"snippet_id": 24881, "code": ": self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes", "label": 0}, {"snippet_id": 23458, "code": " \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs. If it is not set, this returns", "label": 0}, {"snippet_id": 26083, "code": ".PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler", "label": 0}, {"snippet_id": 7210, "code": " under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0", "label": 0}, {"snippet_id": 55571, "code": "(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path) \t\telse: \t\t\treturn Folder(r.dirname().path) \tdef walk(self,*args,**kwargs): \t", "label": 0}, {"snippet_id": 60933, "code": " self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable", "label": 0}, {"snippet_id": 14897, "code": " name) return json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template", "label": 0}, {"snippet_id": 78146, "code": " notes=pkg['notes'] or pkg['title'] if 'update_frequency' in pkg: update_frequency=pkg['update_frequency'] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application", "label": 1}, {"snippet_id": 14719, "code": ", logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField, DateField, SelectField, \\ SelectMultipleField, FieldList", "label": 1}, {"snippet_id": 48022, "code": ", HnPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HnPFormSet(request.POST or None, instance=extext, prefix='habits') if request.method", "label": 0}, {"snippet_id": 25926, "code": "._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards=self._ray_params.num_redis_shards, redis_max_clients=self._ray_params.redis_max_clients", "label": 1}, {"snippet_id": 13206, "code": " state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), ", "label": 0}, {"snippet_id": 25058, "code": "(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging", "label": 0}, {"snippet_id": 43152, "code": ").count(), 30) elp_flagged=elps.filter(qa_flag=True).first() self.assertIn(elp_flagged.raw_cas.encode(), response.content) elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged", "label": 0}, {"snippet_id": 36836, "code": " document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append(", "label": 0}, {"snippet_id": 7948, "code": ".password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no", "label": 0}, {"snippet_id": 28175, "code": " to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python", "label": 0}, {"snippet_id": 79610, "code": ") users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action", "label": 1}, {"snippet_id": 16962, "code": ".append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(the_round=r, initial=data) context={'tournament': t, 'round': r, ", "label": 0}, {"snippet_id": 37608, "code": "', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm", "label": 0}, {"snippet_id": 76883, "code": " tile image. fname: the name to give the image. image_spec: all details about type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname +\"-\") image.save", "label": 0}, {"snippet_id": 77136, "code": "=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps\") tile_arg_names=_LAYER_ARG_NAMES[request_type] version_info=server_layer_def.get(\"version\", None) layer=WmsLayer( target_url", "label": 0}, {"snippet_id": 39415, "code": " return self.curated_chemical.true_cas else: return None @property def true_chemname(self): if hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_chemname", "label": 0}, {"snippet_id": 70981, "code": "</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 25070, "code": " this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray", "label": 0}, {"snippet_id": 60363, "code": "(__name__) default_templates=str(app_root / \"datasette\" / \"templates\") template_paths=[] if self.template_dir: template_paths.append(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"]", "label": 0}, {"snippet_id": 24045, "code": ".wraps(orig_attr) def _wrapper(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock", "label": 0}, {"snippet_id": 13895, "code": " view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME", "label": 0}, {"snippet_id": 45484, "code": "=create_detail_formset( doc, extra=edit, can_delete=edit) document_type_form=DocumentTypeForm(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form", "label": 1}, {"snippet_id": 41108, "code": "'stub_9100'], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response", "label": 0}, {"snippet_id": 7803, "code": " None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ", "label": 0}, {"snippet_id": 2332, "code": ") content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified", "label": 0}, {"snippet_id": 80913, "code": ".xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views/fit_event_views.xml', 'views/fit_subscription_templates", "label": 0}, {"snippet_id": 13218, "code": ".AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), }", "label": 0}, {"snippet_id": 17050, "code": "=GamePlayersFormset(request.POST or None, the_round=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set", "label": 0}, {"snippet_id": 81765, "code": " import create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import re class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm() return render(request", "label": 0}, {"snippet_id": 2639, "code": "=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): ", "label": 0}, {"snippet_id": 3579, "code": ", status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains", "label": 0}, {"snippet_id": 15051, "code": "='model' else: ts['source_type']='timeseries' time_series.append(ts) time_series.sort(key=lambda ts_item: ts_item['result_type'], reverse=False) return render_template('results.html', results=results, time_series", "label": 0}, {"snippet_id": 46831, "code": "'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup.csv.path,'w') as f: myfile=File(f) myfile.write(''.join(text)) new_zip_name=Path(settings.MEDIA_URL +\"/\" +str(datagroup.fs_id) ", "label": 0}, {"snippet_id": 32110, "code": " Returns: The value of self.char. ''' self.position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single", "label": 0}, {"snippet_id": 20808, "code": "\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket", "label": 0}, {"snippet_id": 173, "code": " show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath", "label": 1}, {"snippet_id": 41341, "code": " ExtractedHHDoc) else: self.assertEqual(type(extsub), ExtractedText) except ObjectDoesNotExist: pass def test_every_extractedtext(self): ''''Loop through all the ExtractedText objects and confirm that the", "label": 0}, {"snippet_id": 34677, "code": " entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n", "label": 0}, {"snippet_id": 16213, "code": " round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) PlayerRoundFormset=formset_factory(PlayerRoundForm, extra=2, formset=BasePlayerRoundFormset) if round_num: r=get_round_or_404(t", "label": 0}, {"snippet_id": 77324, "code": " _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database. Returns: layers_by_name: A dict of all the layers in a database. \"\"\"", "label": 0}, {"snippet_id": 77847, "code": " org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('------------------------", "label": 0}, {"snippet_id": 31099, "code": "): if 'username' not in login_session: return redirect('/login') grudgeToDelete=session.query(Grudge).filter_by(id=grudge_id).one() if login_session['user_id'] !=grudget.user_id: return \"<script>function", "label": 0}, {"snippet_id": 41287, "code": ".objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self): ''' Confirm that", "label": 0}, {"snippet_id": 44387, "code": ".browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self.live_server_url +f'/datadocument/{doc.pk", "label": 0}, {"snippet_id": 65639, "code": ".ResponseType.OK: self.does_file_exist() elif response==Gtk.ResponseType.CANCEL: self.filechooser_creation_dialog.close() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog.get_filename(", "label": 0}, {"snippet_id": 61930, "code": ".chartbeat.com/docs/ Quantcast: https://quantcast.zendesk.com/hc/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux", "label": 0}, {"snippet_id": 19937, "code": " exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from", "label": 0}, {"snippet_id": 80629, "code": "?', numeric_result=True)) if success: print(f\"Setting BiFi approximate wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog", "label": 0}, {"snippet_id": 59360, "code": " columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files \"\"\".strip()), ConfigOption(\"suggest_facets\", True, \"", "label": 0}, {"snippet_id": 6702, "code": "() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET', 'POST']) def register(): form=RegistrationForm() if form.validate_on_submit(): user=User", "label": 0}, {"snippet_id": 33864, "code": "(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input", "label": 0}, {"snippet_id": 45662, "code": "'referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk", "label": 0}, {"snippet_id": 18877, "code": "(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin: if admin.is_open:", "label": 1}, {"snippet_id": 37298, "code": "' class Meta: model=DataSource fields=['title', 'url', 'estimated_records', 'state', 'priority', 'description'] class PriorityForm(forms.ModelForm): class Meta: model=DataSource fields=['priority'] def", "label": 0}, {"snippet_id": 10038, "code": "']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings", "label": 0}, {"snippet_id": 3010, "code": " OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs)", "label": 0}, {"snippet_id": 3087, "code": " request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query", "label": 1}, {"snippet_id": 21764, "code": " in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result def any_processes_alive(self): \"\"\"Return true if any processes are still", "label": 0}, {"snippet_id": 48274, "code": "))\\ .filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category", "label": 0}, {"snippet_id": 32769, "code": ".command path=os.environ['PATH'].split(':') for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): '", "label": 0}, {"snippet_id": 43819, "code": " say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero", "label": 0}, {"snippet_id": 22508, "code": " works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally", "label": 0}, {"snippet_id": 65250, "code": "'3.0') class MainWindow(Gtk.ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog", "label": 0}, {"snippet_id": 35509, "code": ".get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC", "label": 0}, {"snippet_id": 11102, "code": " branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and", "label": 0}, {"snippet_id": 60936, "code": "=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated", "label": 0}, {"snippet_id": 3791, "code": "(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user", "label": 0}, {"snippet_id": 79683, "code": " data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param", "label": 0}, {"snippet_id": 11811, "code": ".contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import", "label": 0}, {"snippet_id": 52316, "code": "=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(\"/current-board\", methods", "label": 1}, {"snippet_id": 61734, "code": "=pshtt_data_to_result(securedrop, pshtt_results[0]) if commit: result.securedrop=securedrop result.save() return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet') -> None: \"\"\" This method takes a queryset and", "label": 1}, {"snippet_id": 48233, "code": "(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(", "label": 1}, {"snippet_id": 19630, "code": ".add_argument( \"--redis-address\", required=True, type=str, help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this", "label": 1}, {"snippet_id": 74135, "code": ": return self.request.site.id @property def decrypted_report(self): return self.report.decrypt_record(self.storage.passphrase) def get_form_kwargs(self): kwargs=super().get_form_kwargs() kwargs.update(", "label": 0}, {"snippet_id": 46329, "code": "']=(f'{len(good_records)} extracted records ' 'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk", "label": 0}, {"snippet_id": 78433, "code": "'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time, 'closed", "label": 0}, {"snippet_id": 43908, "code": ".webdriver.support.select import Select from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.by import", "label": 1}, {"snippet_id": 34875, "code": "=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data", "label": 0}, {"snippet_id": 38578, "code": ") data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument') matched=models.BooleanField(default=False) extracted=models.BooleanField", "label": 0}, {"snippet_id": 68652, "code": "\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() if hunt.notice==True: hunt.setNoticeFalse() else: hunt", "label": 0}, {"snippet_id": 62495, "code": " import json import base64 from hashlib import sha256 from werkzeug.exceptions import NotFound from werkzeug.http import dump_cookie from flask import session from flask import Blueprint from saml2.s_utils", "label": 0}, {"snippet_id": 64259, "code": "(current_app.saml2_config, state_cache=state, identity_cache=identity) logout_redirect_url=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') next_page=session.get('next', logout_redirect_url) next_page=request", "label": 0}, {"snippet_id": 11769, "code": "'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state", "label": 0}, {"snippet_id": 55555, "code": "(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l", "label": 0}, {"snippet_id": 56240, "code": ".response['Location']=='{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url", "label": 0}, {"snippet_id": 52903, "code": " group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update(group_channel, data): Group(group_channel).send({\"text\": json.dumps", "label": 0}, {"snippet_id": 83367, "code": "=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title).count() if cs > 0: raise", "label": 1}, {"snippet_id": 53740, "code": " elif item=='close': return super(RedirectBuffer, self).__getattribute__(item) source=super(RedirectBuffer, self) \\ .__getattribute__('redirection_source') if hasattr(source, item): return getattr(source", "label": 0}, {"snippet_id": 71579, "code": ".assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth", "label": 0}, {"snippet_id": 27677, "code": " class that holds the profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker", "label": 1}, {"snippet_id": 46915, "code": " @login_required() def data_group_update(request, pk, template_name='data_group/datagroup_form.html'): datagroup=get_object_or_404(DataGroup, pk=pk) form=DataGroupForm(request.POST or None, instance=datagroup)", "label": 0}, {"snippet_id": 38368, "code": " ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_habits_and_practices import ExtractedHabitsAndPractices from.extracted_list_presence import ExtractedListPresence", "label": 1}, {"snippet_id": 2138, "code": " production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, )", "label": 1}, {"snippet_id": 66442, "code": "+keyfile_chooser_dialog.get_filename()) keyfile_chooser_dialog.close() keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.get_style_context", "label": 0}, {"snippet_id": 29464, "code": "'gallery.show_posts')) user_id=resp['user_id'] user=User.query.filter_by(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username)", "label": 0}, {"snippet_id": 8368, "code": "\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request):", "label": 0}, {"snippet_id": 64413, "code": "'TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA", "label": 0}, {"snippet_id": 29563, "code": "('secret') db.session.commit() login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) flash('There was an issue with sign", "label": 1}, {"snippet_id": 21556, "code": "\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor", "label": 0}, {"snippet_id": 73374, "code": ", logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from.forms import ScreenDoorUserCreationForm", "label": 0}, {"snippet_id": 28577, "code": ". default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The", "label": 0}, {"snippet_id": 76403, "code": "\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str(rect_of_tiles), str(rect_of_tiles.Extent())) logger.debug(\"im_whole_tiles", "label": 0}, {"snippet_id": 226, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"", "label": 0}, {"snippet_id": 21912, "code": " memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction", "label": 0}, {"snippet_id": 18586, "code": "): \t\"\"\" get(): \tRenders the Sign In page when the user arrives at /signin \t\"\"\" \tdef get(self): \t\tself.render('signin.html',error='') \t\"\"\" check_database(): \tCreates an instance of PasswordHasher, finds", "label": 1}, {"snippet_id": 3433, "code": ".test import Client from drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword", "label": 0}, {"snippet_id": 30467, "code": " login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook': fbdisconnect() del login_session['facebook_id'", "label": 0}, {"snippet_id": 29002, "code": ").format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class", "label": 0}, {"snippet_id": 722, "code": "</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 83969, "code": " article=article_qs.get(**article_args) if notification is not None: is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter", "label": 0}, {"snippet_id": 50031, "code": "'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session", "label": 0}, {"snippet_id": 75212, "code": " locked.') if request.method=='POST': person_form=CommitteeMemberPersonForm(request.POST) committee_member_form=CommitteeMemberForm(request.POST) if person_form.is_valid() and committee_member_form.is_valid", "label": 0}, {"snippet_id": 72064, "code": " Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal': '{fsal.name}", "label": 0}, {"snippet_id": 8015, "code": " user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return", "label": 0}, {"snippet_id": 43382, "code": "('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its", "label": 0}, {"snippet_id": 4195, "code": " that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full", "label": 0}, {"snippet_id": 44864, "code": ": self.objects=load_model_objects() def test_habitsandpractices(self): found=resolve(f'/habitsandpractices/{self.objects.doc.pk}/') self.assertEqual(found.func, views.habitsandpractices) def test_link_habitandpractice_to_puc", "label": 0}, {"snippet_id": 70348, "code": " basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath", "label": 1}, {"snippet_id": 25735, "code": ".update_if_absent( node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), ", "label": 0}, {"snippet_id": 70072, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}<", "label": 0}, {"snippet_id": 22200, "code": "=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True", "label": 1}, {"snippet_id": 64342, "code": "'The session does not contain the subject id for user{0} ' 'Performing local logout'.format( session['eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page) else: http_info=client.handle_logout_request", "label": 0}, {"snippet_id": 36489, "code": ") dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase", "label": 0}, {"snippet_id": 55507, "code": " class FSPathList(list): \tdef _raw(self): \t\treturn map(lambda x: x.path,self) \t \t \tdef commonprefix(self): \t\treturn FSPath(os.path.commonprefix(self._raw())) \tdef join(self): \t\treturn FSPath(*(self._raw", "label": 0}, {"snippet_id": 56622, "code": ".com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get", "label": 0}, {"snippet_id": 25888, "code": "): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists", "label": 0}, {"snippet_id": 39548, "code": " from model_utils.managers import InheritanceManager from django.db import models from django.core.exceptions import ValidationError from django import forms from django.urls import reverse from.common_info", "label": 1}, {"snippet_id": 67273, "code": ", **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP().lookup(ip) try: context['domain']=socket.gethostbyaddr(ip)[0] except", "label": 0}, {"snippet_id": 38643, "code": "'CO',] @property def is_extracted(self): return hasattr(self,'extractedtext') def get_absolute_url(self): return reverse('data_document', kwargs={'pk': self.pk}) def get_abstract_filename(self): ext=self", "label": 0}, {"snippet_id": 61033, "code": "\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts ", "label": 0}, {"snippet_id": 72902, "code": " def positions(request): try: sort_by=request.session['position_sort'] except KeyError: sort_by='-created' if request.method=='POST': if request.POST.get(\"sort-created\"): sort_by='-created' elif request", "label": 1}, {"snippet_id": 6172, "code": ".url) g.oidc_id_token=id_token return None def require_login(self, view_func): \"\"\" Use this to decorate view functions if only some of your app's views require authentication. \"\"\" @wraps(view_func) def", "label": 0}, {"snippet_id": 73335, "code": ".login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form, name='confirm_account'), path('createnewposition/', views.import_position, name='importposition", "label": 0}, {"snippet_id": 66290, "code": ".connect(\"clicked\", self.on_keyfile_unlock_select_button_clicked) composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") composite_unlock_select_button.connect(\"clicked", "label": 0}, {"snippet_id": 11247, "code": "=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]", "label": 0}, {"snippet_id": 50023, "code": "('/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request", "label": 0}, {"snippet_id": 14967, "code": " name): attrs=name.split(':') (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name):", "label": 0}, {"snippet_id": 49401, "code": "'data_document_form.html')): datadocument=get_object_or_404(DataDocument, pk=pk) form=DataDocumentForm(request.POST or None, instance=datadocument) if form.is_valid(): if form.has_changed(): form.save() return redirect(", "label": 0}, {"snippet_id": 56840, "code": "*kwargs) extra_context['concept']=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context) @login_required()", "label": 0}, {"snippet_id": 47578, "code": " links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']", "label": 0}, {"snippet_id": 72755, "code": "'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error", "label": 0}, {"snippet_id": 43496, "code": "((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 70741, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>", "label": 0}, {"snippet_id": 15465, "code": "'change_timeseries_value_several_days_add_delta': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day", "label": 0}, {"snippet_id": 27347, "code": "=include_log_monitor self.autoscaling_config=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def", "label": 0}, {"snippet_id": 3569, "code": ".post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"", "label": 0}, {"snippet_id": 65959, "code": ".databases_to_save.clear() self.quit_dialog.destroy() def on_quit_button_clicked(self, button): for db in self.databases_to_save: db.database_manager.save_database() self.quit_dialog.destroy() self.application.quit", "label": 0}, {"snippet_id": 73777, "code": " CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort'] except KeyError: return '-created' def change_positions_sort_method(request,", "label": 0}, {"snippet_id": 39372, "code": ".extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def indexing(self): obj=ExtractedChemicalIndex( meta={'id': self.id}, chem_name", "label": 0}, {"snippet_id": 35837, "code": ", pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags", "label": 0}, {"snippet_id": 39225, "code": ".extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.raw_chem import RawChem def validate_ingredient_rank(value): if value < 1 or", "label": 1}, {"snippet_id": 50462, "code": ") print \"Lock acquired at \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback): self.release() unlocktime=datetime.datetime.now() print \"Lock released at \"+str(unlocktime) print \"Lock was", "label": 0}, {"snippet_id": 82915, "code": " Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed", "label": 0}, {"snippet_id": 64534, "code": ".format(location_on_fail)) return redirect(location_on_fail) @authn_views.route('/saml2-metadata') def metadata(): \"\"\" Returns an XML with the SAML 2.0 metadata for this SP as configured in the saml2_settings", "label": 0}, {"snippet_id": 31880, "code": "(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword", "label": 1}, {"snippet_id": 30026, "code": " @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge' id=Column(Integer, primary_key=True", "label": 0}, {"snippet_id": 21963, "code": " object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However, the", "label": 0}, {"snippet_id": 1365, "code": " the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like", "label": 0}, {"snippet_id": 11565, "code": " a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even", "label": 0}, {"snippet_id": 9253, "code": "'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode'", "label": 0}, {"snippet_id": 3490, "code": ".test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client", "label": 0}, {"snippet_id": 63793, "code": " import get_loa from eduid_common.authn.eduid_saml2 import get_authn_request, get_authn_response from eduid_common.authn.eduid_saml2 import authenticate from eduid_common.authn.cache import IdentityCache", "label": 0}, {"snippet_id": 31696, "code": ".url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')", "label": 1}, {"snippet_id": 1204, "code": " 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header", "label": 0}, {"snippet_id": 47873, "code": "'DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file", "label": 0}, {"snippet_id": 26975, "code": ". This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address", "label": 0}, {"snippet_id": 82805, "code": " :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in", "label": 0}, {"snippet_id": 41014, "code": ".assertIn('Extraction Script',response.content.decode('utf-8')) def test_product_card_location(self): response=self.client.get('/datadocument/179486/') html=response.content.decode('utf-8') e_idx=html.index", "label": 0}, {"snippet_id": 47181, "code": " render(request, template_name, context) @login_required def dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id','id','raw_cas','raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp", "label": 0}, {"snippet_id": 64638, "code": "'__name__', 'NameError', 'next', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'object', 'oct', 'ord', 'OSError', 'OverflowError', '__package__', 'PendingDeprecationWarning', 'PermissionError", "label": 0}, {"snippet_id": 46037, "code": "-len(prod_link), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files", "label": 0}, {"snippet_id": 17816, "code": "(flask.request.form) if flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask", "label": 0}, {"snippet_id": 6902, "code": ".validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password', 'auth/email/reset_password', user=user", "label": 0}, {"snippet_id": 3137, "code": "(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth.logout(request) return HttpResponseRedirect(logout_url)", "label": 0}, {"snippet_id": 49682, "code": " session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if('email' in session) or('social' in session): if 'email' in session: email", "label": 0}, {"snippet_id": 51781, "code": "\nimport requests from utility import * banner(OR) links=read_links() for link in links: url=get_url(link) params=get_params(url) params['redirect']='https://www.google.com' fullURL=generate_url_with_params", "label": 1}, {"snippet_id": 21236, "code": " set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is None: self.start_redis() self.start_monitor()", "label": 0}, {"snippet_id": 1368, "code": ". You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create", "label": 0}, {"snippet_id": 31464, "code": ".postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER', 'postgres'), 'PASSWORD': os.environ.get('DB_PASSWORD', ''), 'HOST': os.environ.get('DB_ADDRESS', ''), 'PORT': os", "label": 0}, {"snippet_id": 80290, "code": " All') self.lock_all_action.setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction", "label": 0}, {"snippet_id": 49447, "code": ".model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance", "label": 1}, {"snippet_id": 9848, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage", "label": 0}, {"snippet_id": 61085, "code": ") if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None", "label": 1}, {"snippet_id": 46682, "code": " table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id", "label": 0}, {"snippet_id": 31914, "code": " contextlib import enum from enum import Enum def main(): sh=Shell() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, ", "label": 0}, {"snippet_id": 24467, "code": ".redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"", "label": 1}, {"snippet_id": 501, "code": "'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic", "label": 0}, {"snippet_id": 36773, "code": "=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ ", "label": 0}, {"snippet_id": 45003, "code": " Category', html=True) self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\"", "label": 0}, {"snippet_id": 7400, "code": " from sqlalchemy import exc, or_ from app.models.bookings import Exam from app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime,", "label": 1}, {"snippet_id": 44548, "code": ".objects.create(title='test document', data_group=dg, document_type=dt, filename='example.pdf') p=Product.objects.create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test", "label": 0}, {"snippet_id": 74420, "code": "(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return", "label": 0}, {"snippet_id": 4283, "code": ".assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale", "label": 0}, {"snippet_id": 65304, "code": ".first_start_screen() self.connect(\"delete-event\", self.on_application_quit) self.custom_css() def create_headerbar(self): builder=Gtk.Builder() builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui", "label": 0}, {"snippet_id": 83775, "code": "\"\"\"Return True if the user have permission to edit Articles, False otherwise.\"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True return False def article_list(request, group_slug", "label": 0}, {"snippet_id": 22024, "code": " num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number. redis_password(str)", "label": 0}, {"snippet_id": 41106, "code": "], 'upc' :['stub_9100'], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401", "label": 0}, {"snippet_id": 12361, "code": "=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context[", "label": 0}, {"snippet_id": 36323, "code": " password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'", "label": 0}, {"snippet_id": 32842, "code": ", fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self)", "label": 1}, {"snippet_id": 44633, "code": " upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product=p, document=doc) ehp=ExtractedHabitsAndPractices.objects.create", "label": 0}, {"snippet_id": 13006, "code": " like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args:", "label": 0}, {"snippet_id": 58948, "code": " class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save(self, force_insert=False, force_update=False, using=None, update_fields=None): user=Invite.search_user_by_email", "label": 0}, {"snippet_id": 31027, "code": "'myFunction()'>\" if request.method=='POST': if request.form['name']: editgrudge.name=request.form['name'] if request.form['description']: editgrudge.description=request.form['description'] if request.form[", "label": 0}, {"snippet_id": 4995, "code": " that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),", "label": 0}, {"snippet_id": 40063, "code": " curated_chemical relationship, it evaluates to boolean False ''' try: return self.curated_chemical.sid except AttributeError: return False def get_data_document(self): '''Find the child object by trying each", "label": 0}, {"snippet_id": 71386, "code": ") req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self._url_parse_re.match( req.path_info).group(1, 2) if provider", "label": 1}, {"snippet_id": 60970, "code": " > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self)", "label": 0}, {"snippet_id": 55549, "code": " \t\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other):", "label": 0}, {"snippet_id": 18902, "code": " from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): ", "label": 0}, {"snippet_id": 12947, "code": " GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): ", "label": 0}, {"snippet_id": 47710, "code": "(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id',", "label": 0}, {"snippet_id": 61987, "code": ".headers: return False elif page.headers[header]==expected_value: return True else: return False def validate_cache_control_header(page, expected_directive): header=page.headers.get('Cache-Control', '')", "label": 0}, {"snippet_id": 16358, "code": " form.add_error(None, e) i.delete() return render(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset", "label": 0}, {"snippet_id": 76739, "code": " BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency", "label": 0}, {"snippet_id": 62603, "code": " saml_config, 'TOKEN_LOGIN_SHARED_KEY': 'shared_secret', 'TOKEN_LOGIN_SUCCESS_REDIRECT_URL': 'http://test.localhost/success', 'TOKEN_LOGIN_FAILURE_REDIRECT_URL': 'http://test.localhost/failure' }) return", "label": 1}, {"snippet_id": 68899, "code": " 89QyvxeRxAf93YFAVzMXhoKxu12IuH4VnSwAfb8gQyxKRyiGOUwk0YoBPpqRnMmD Dl7SdmY3oQHEJzBelTMjTM8AjbB9mWoPBX5G8t4u47/FZ6PgdfmRg9hsKXhkLJc7 C1btblOHNgDx19fzASWX+xOjZiKpP6MkEEzq1bilUFul6RDtxkTWsTa5TGixgCB/ G2fK8I9JL", "label": 0}, {"snippet_id": 46080, "code": ".ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc=DataDocument.objects.get(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +", "label": 0}, {"snippet_id": 29544, "code": " redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session.pop('token') user.oauth_secret=session.pop('secret') db.session", "label": 0}, {"snippet_id": 22148, "code": " files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker.", "label": 0}, {"snippet_id": 3506, "code": "%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 37477, "code": ".disabled=True class BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField( queryset=PUC.objects.all(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum", "label": 0}, {"snippet_id": 44560, "code": "=Product.objects.create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family', prod_type='Test Product Type', description", "label": 0}, {"snippet_id": 7800, "code": " initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if", "label": 0}, {"snippet_id": 33213, "code": ": return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description", "label": 0}, {"snippet_id": 25546, "code": "=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args()", "label": 0}, {"snippet_id": 18273, "code": "\"\"\" check_if_exists(): \tUses the pymongo driver(so everything is synchronous) to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions", "label": 1}, {"snippet_id": 30458, "code": " return output @app.route('/logout') def disconnect(): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token", "label": 0}, {"snippet_id": 35176, "code": "(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc", "label": 0}, {"snippet_id": 61886, "code": "'', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics", "label": 0}, {"snippet_id": 54264, "code": " routes ** \"\"\" \"\"\"JSON response containing information for a particular politician \"\"\" @app.route('/json/politicians/<politician>') def json_politician(politician): politicians=Politician.all() politicians", "label": 0}, {"snippet_id": 60368, "code": " / \"templates\") template_paths=[] if self.template_dir: template_paths.append(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"] for plugin in get_plugins(pm) if plugin[\"templates_path", "label": 0}, {"snippet_id": 51829, "code": " as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route(\"/\") def index(): \"\"\"Return index(homepage).", "label": 0}, {"snippet_id": 76560, "code": " with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0", "label": 0}, {"snippet_id": 62324, "code": " :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{!r} logging in.\".format(user)) session['_saml2_session_name_id']=code(session_info['name_id']) session['eduPersonPrincipalName']=user.eppn", "label": 0}, {"snippet_id": 3779, "code": " import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self", "label": 0}, {"snippet_id": 3753, "code": " directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001,", "label": 0}, {"snippet_id": 77199, "code": "=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles.\"\"\" tile_args=_TILE_ARGS %( self.tile_arg_names[\"x\"], x, self.tile_arg_names", "label": 0}, {"snippet_id": 43543, "code": "\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id", "label": 0}, {"snippet_id": 12701, "code": " JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/'", "label": 0}, {"snippet_id": 65922, "code": ".filechooser_creation_dialog.get_current_name()) self.start_database_creation_routine(tab_title) self.override_dialog.destroy() def on_tab_switch(self, notebook, tab, pagenum): headerbar=tab.get_headerbar() self.set_titlebar", "label": 0}, {"snippet_id": 80375, "code": ".set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action.triggered.connect(self.start_bifi_scan) self.thin_eta_scan_action", "label": 0}, {"snippet_id": 50190, "code": "=None: password=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email, password_hash) session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return", "label": 0}, {"snippet_id": 79718, "code": " closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not", "label": 0}, {"snippet_id": 10422, "code": " require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps.commerce.utils", "label": 0}, {"snippet_id": 3573, "code": "'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"", "label": 0}, {"snippet_id": 62960, "code": "'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(authr), 'RelayState': came_from}): oq_cache=OutstandingQueriesCache(session) oq_cache.set(token, came_from) resp=self.app.dispatch_request() self", "label": 0}, {"snippet_id": 65710, "code": "(self): stock_database=Gio.File.new_for_uri( \"resource:///run/terminal/KeepassGtk/database.kdbx\") new_database=Gio.File.new_for_path( self.filechooser_creation_dialog.get_filename()) stock_database.copy", "label": 0}, {"snippet_id": 82636, "code": " return \"Running check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job", "label": 0}, {"snippet_id": 20001, "code": "(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources, dynamic_resources) else: logger.warning( \"Monitor: \" \"could not find ip", "label": 0}, {"snippet_id": 55958, "code": "='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode()) return response def experience_redirect(request, experience_share_id): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link", "label": 0}, {"snippet_id": 37084, "code": " Meta: model=DataGroup fields=['name', 'description', 'url', 'group_type', 'downloaded_by', 'downloaded_at', 'download_script', 'data_source', 'csv'] widgets={'downloaded_at': DatePickerInput()} labels=", "label": 0}, {"snippet_id": 8247, "code": " currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has", "label": 0}, {"snippet_id": 64988, "code": " expr=ast.parse(test_case, mode='eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not expr: raise ValueError('Failed to parse test case %d' % i) valid=False", "label": 0}, {"snippet_id": 66874, "code": "]=vt.getDomainReport(domain) tm=ThreatMiner() context['tm_url']=tm.getURIFromDomain(domain) context['tm_sample']=tm.getSamplesFromDomain(domain) context['tm_report']=tm.getReportFromDomain(domain) context", "label": 0}, {"snippet_id": 60345, "code": "(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio.get_event_loop().run_in_executor( self.executor, sql_operation_in_thread ) def app(self)", "label": 0}, {"snippet_id": 35546, "code": ".method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects", "label": 0}, {"snippet_id": 8425, "code": "/', request.session), 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session) } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in", "label": 0}, {"snippet_id": 9448, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if", "label": 0}, {"snippet_id": 11155, "code": "\"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request", "label": 0}, {"snippet_id": 24984, "code": " def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data", "label": 0}, {"snippet_id": 81318, "code": " event.fit_is_participating=False @api.onchange('date_begin') def update_day_of_week(self): start_date=self.date_begin_located if start_date: self.fit_day_of_week=datetime.strptime(start_date, '%Y-%m-%d %H:", "label": 0}, {"snippet_id": 14071, "code": ".AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled", "label": 0}, {"snippet_id": 23706, "code": "): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode", "label": 0}, {"snippet_id": 73773, "code": "/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort'] except KeyError: return '-created", "label": 0}, {"snippet_id": 74712, "code": "') if banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return HttpResponseRedirect(reverse('candidate_home', kwargs", "label": 0}, {"snippet_id": 30585, "code": ").filter_by(id=grudget_id).one() grudges=session.query(Grudge).filter_by(grudget_id=grudget.id).all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route('/grudget/<int:grudget_id>/grudge/", "label": 1}, {"snippet_id": 60498, "code": " self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view", "label": 0}, {"snippet_id": 1684, "code": "([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime)", "label": 0}, {"snippet_id": 56106, "code": " username) response=HttpResponse('', status=302) response['Location']=link return response def root_redirect(request): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: link=dynamic_link.format('", "label": 1}, {"snippet_id": 53598, "code": " independently storing buffer writes for use within Cauldron step display. \"\"\" def __init__(self, redirection_source): self.active=False self.bytes_buffer=io.BytesIO() self.redirection_source=redirection_source", "label": 0}, {"snippet_id": 70291, "code": " import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory", "label": 0}, {"snippet_id": 44212, "code": "\"]')[1].click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), ds_detail_url, \"User should go back to detail view when clicking cancel\") dg_detail_url=f'{self", "label": 0}, {"snippet_id": 12583, "code": ".Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image", "label": 0}, {"snippet_id": 44999, "code": ") self.assertNotContains(response, 'Raw Category', html=True) self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup", "label": 0}, {"snippet_id": 18346, "code": " password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password): \t\tdocument={'username': self.username,'email': self.email,'password", "label": 1}, {"snippet_id": 44642, "code": " Attribute\") pd=ProductDocument.objects.create(product=p, document=doc) ehp=ExtractedHabitsAndPractices.objects.create(extracted_text=extext, product_surveyed='Test Product Surveyed', prevalence='Continuous')", "label": 0}, {"snippet_id": 57718, "code": " return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2,", "label": 0}, {"snippet_id": 68441, "code": ".http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection class IndexView(PaginationMixin, ListView): template_name='twitter_hunter/index.html' context_object_name", "label": 0}, {"snippet_id": 82086, "code": " return render(request, 'home.html',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}", "label": 0}, {"snippet_id": 73019, "code": " parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications/applications.html',{ 'form': form}", "label": 0}, {"snippet_id": 27497, "code": " print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"", "label": 1}, {"snippet_id": 81064, "code": ".info('No registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone", "label": 0}, {"snippet_id": 47608, "code": "(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS", "label": 0}, {"snippet_id": 23551, "code": " custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked", "label": 0}, {"snippet_id": 32687, "code": " inp: self.second.execute(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable", "label": 0}, {"snippet_id": 55609, "code": "(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef __init__(self,path):", "label": 0}, {"snippet_id": 36016, "code": " products=models.ManyToManyField('Product', through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC", "label": 0}, {"snippet_id": 84295, "code": "**{group_slug_field: group_slug}) article_args.update({'article__content_type': get_ct(group), 'article__object_id': group.id}) changeset=get_object_or_404( changes_qs, revision=int(revision), **article_args", "label": 0}, {"snippet_id": 83925, "code": " request.method=='GET': article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group),", "label": 0}, {"snippet_id": 58019, "code": " TestCase from core.common.utils import send_email, get_onboarding_percentage from core.common import onboarding from core.common.utils import get_onboarding_setting, ONBOARDING_STEPS_DEFAULT_TEMPLATE,", "label": 0}, {"snippet_id": 30680, "code": " login_session: return redirect('/login') if request.method=='POST': newGrudget=Grudget(name=request.form['name']) session.add(newGrudget) session.commit() return redirect(url_for('showGrudgets')) else: return", "label": 0}, {"snippet_id": 43922, "code": " as EC from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django", "label": 1}, {"snippet_id": 37067, "code": " dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models class DataGroupForm(forms.ModelForm): required_css_class='required' class Meta: model=DataGroup", "label": 1}, {"snippet_id": 37097, "code": " widgets={'downloaded_at': DatePickerInput()} labels={'csv': _('Register Records CSV File'), 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs", "label": 0}, {"snippet_id": 60439, "code": "(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path", "label": 0}, {"snippet_id": 16008, "code": "'view_home')) return render_template('register.html', form=register_form) @app.route('/login', methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')", "label": 0}, {"snippet_id": 25587, "code": ", redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils", "label": 1}, {"snippet_id": 1455, "code": " here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 66339, "code": " widget): self.window.set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self, widget): password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") if", "label": 1}, {"snippet_id": 70968, "code": "/head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode", "label": 0}, {"snippet_id": 76735, "code": " tile: Tile as sent from the server. bgcolor: BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"", "label": 0}, {"snippet_id": 18475, "code": " cookie and logs in the user. \t\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword", "label": 1}, {"snippet_id": 43887, "code": " import load_model_objects from dashboard.models import * import os import csv import time import unittest import collections import json import re from selenium import webdriver from selenium.webdriver", "label": 1}, {"snippet_id": 19096, "code": " import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under", "label": 1}, {"snippet_id": 31007, "code": ").filter_by(id=grudget_id).one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to edit this grudge.');}</script><body onload='myFunction", "label": 1}, {"snippet_id": 70175, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll", "label": 0}, {"snippet_id": 64099, "code": "}'.format(user)) state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id", "label": 0}, {"snippet_id": 68615, "code": ".writerow(header) for tw in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row", "label": 0}, {"snippet_id": 53244, "code": "\nimport os import sys import threading import traceback import types from importlib.abc import InspectLoader from cauldron import environ from cauldron import templating from cauldron.cli import threads", "label": 0}, {"snippet_id": 32522, "code": " self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result: return result", "label": 0}, {"snippet_id": 50938, "code": " f.buildstep.add_conditions(conditions) return f return decorator_func def build_step(self, name=None, optional=False, default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep", "label": 0}, {"snippet_id": 62556, "code": ".authn.app import authn_init_app from eduid_common.api.app import eduid_init_app import logging logger=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class AuthnAPITestBase", "label": 0}, {"snippet_id": 63533, "code": " test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context('/logout', method='POST', headers={'Cookie", "label": 0}, {"snippet_id": 7087, "code": " Province of British Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www", "label": 0}, {"snippet_id": 22597, "code": " attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with", "label": 0}, {"snippet_id": 54632, "code": ".assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t", "label": 1}, {"snippet_id": 25681, "code": " the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure", "label": 0}, {"snippet_id": 49740, "code": "): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=", "label": 0}, {"snippet_id": 49479, "code": " else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset", "label": 0}, {"snippet_id": 73328, "code": "'register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form, name='confirm_account'", "label": 0}, {"snippet_id": 82306, "code": ", request, pk, *args, **kwargs): object=get_object_or_404(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by('timestamp') return render(request, 'clicktracking-detail-view.html',{'object':", "label": 0}, {"snippet_id": 36375, "code": "/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 77070, "code": ": self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type=request_type self.db_type=db_type self.version=str(version) self.tile_arg_names", "label": 0}, {"snippet_id": 55952, "code": ": response=HttpResponse('', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode()) return response def experience_redirect(request, experience_share_id", "label": 0}, {"snippet_id": 45606, "code": " template ''' referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if", "label": 1}, {"snippet_id": 3520, "code": " target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image", "label": 0}, {"snippet_id": 39866, "code": ", decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis", "label": 0}, {"snippet_id": 81068, "code": " http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner.mobile if partner.mobile else '', ", "label": 0}, {"snippet_id": 8695, "code": " email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present", "label": 0}, {"snippet_id": 73326, "code": " name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form,", "label": 0}, {"snippet_id": 31773, "code": ".objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in", "label": 1}, {"snippet_id": 15021, "code": ", ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type", "label": 0}, {"snippet_id": 31777, "code": ".username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request", "label": 0}, {"snippet_id": 30721, "code": ") if 'username' not in login_session: return redirect('/login') if editGrudget.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized", "label": 1}, {"snippet_id": 65978, "code": "(self, window, event): unsaved_databases_list=[] for db in self.opened_databases: if db.database_manager.changes is True: unsaved_databases_list.append(db) if unsaved_databases_list.__len__() > 0: builder", "label": 0}, {"snippet_id": 29829, "code": " instance, False else: created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance, True @gallery.route('/gallery/benwa/<int:post_id>/comment/add', methods", "label": 0}, {"snippet_id": 4453, "code": "'testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password", "label": 0}, {"snippet_id": 59479, "code": ": def __init__( self, files, cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None, template_dir=None, plugins_dir=None, static_mounts=None, memory=False, config=None", "label": 0}, {"snippet_id": 35162, "code": ".objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)", "label": 0}, {"snippet_id": 51174, "code": "(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs) def add_option(self, *args, **kwargs):", "label": 0}, {"snippet_id": 11823, "code": " resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as", "label": 0}, {"snippet_id": 72874, "code": "=request.session['position_id']) request.user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form':", "label": 1}, {"snippet_id": 65726, "code": "(new_database, Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self.database_manager=DatabaseManager( self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 43397, "code": "(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should", "label": 0}, {"snippet_id": 63311, "code": ":{'id': '0'}})) eppn=self.test_user_data['eduPersonPrincipalName'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase):", "label": 0}, {"snippet_id": 21897, "code": " the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory", "label": 0}, {"snippet_id": 72251, "code": " 'pseudo': pseudo, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons", "label": 0}, {"snippet_id": 56154, "code": " import ORMExperience from people.models import ORMPerson from profiles.models import ORMProfile class RedirectConfirmEmailTestCase(TestCase): def test_when_called_redirect_view_redirects_to_apps_url(self", "label": 0}, {"snippet_id": 44436, "code": " dictionary attributes\"\"\" __getattr__=dict.get __setattr__=dict.__setitem__ __delattr__=dict.__delitem__ def load_model_objects(): user=User.objects.create_user(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 12136, "code": "'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages", "label": 0}, {"snippet_id": 64072, "code": ".logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location}).data user=current_app", "label": 0}, {"snippet_id": 23704, "code": " def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s", "label": 0}, {"snippet_id": 35172, "code": "'data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc", "label": 0}, {"snippet_id": 81417, "code": " _handle_daily_event_repetition(self, old_repeating_event): _logger.info('Handling daily repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date", "label": 1}, {"snippet_id": 22296, "code": " self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self.include_log_monitor", "label": 0}, {"snippet_id": 3695, "code": ") self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 34340, "code": "'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is", "label": 0}, {"snippet_id": 78260, "code": "'users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print(", "label": 0}, {"snippet_id": 53593, "code": " RedirectBuffer(io.TextIOWrapper): \"\"\" A class for intercepting and independently storing buffer writes for use within Cauldron step display. \"\"\" def __init__(self, redirection_source): self.active=False self", "label": 0}, {"snippet_id": 15225, "code": " number_of_days=IntegerField('Number of days',[validators.required()]) delta=FloatField('New Value',[validators.required()]) class RunForm(FlaskForm): start_day=DateField('Start day',[validators.required(", "label": 0}, {"snippet_id": 15760, "code": " render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods", "label": 0}, {"snippet_id": 68729, "code": " class SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder']='Lookup URL'", "label": 1}, {"snippet_id": 72844, "code": ": position, 'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form,", "label": 0}, {"snippet_id": 55781, "code": ".isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t ", "label": 0}, {"snippet_id": 18786, "code": ": Class that has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self):", "label": 1}, {"snippet_id": 82066, "code": "{short_url}', category=category) created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success-url-view', kwargs={'pk'", "label": 0}, {"snippet_id": 25756, "code": " ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray", "label": 0}, {"snippet_id": 71710, "code": ".get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id=user.get_id", "label": 0}, {"snippet_id": 1435, "code": "(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\"))", "label": 1}, {"snippet_id": 25211, "code": " \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification", "label": 0}, {"snippet_id": 16443, "code": "\"\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters", "label": 0}, {"snippet_id": 74786, "code": " CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked():", "label": 0}, {"snippet_id": 22436, "code": "\"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options", "label": 0}, {"snippet_id": 20575, "code": " import division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from", "label": 0}, {"snippet_id": 75496, "code": " @require_http_methods(['POST']) def staff_format_post(request, candidate_id): from.forms import FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST,", "label": 0}, {"snippet_id": 72953, "code": " Position.objects.get( id=request.POST.get(\"id\")).delete() request.session['position_sort']=sort_by return render(request, 'positions.html',{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, ", "label": 0}, {"snippet_id": 82170, "code": "'home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset", "label": 0}, {"snippet_id": 18989, "code": " import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given", "label": 0}, {"snippet_id": 55501, "code": "): \t\treturn os.walk(self.path,topdown,onerror,followlinks) class FSPathList(list): \tdef _raw(self): \t\treturn map(lambda x: x.path,self) \t \t \tdef commonprefix(self): \t\treturn FSPath(os.path.commonprefix", "label": 0}, {"snippet_id": 65178, "code": ") output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points", "label": 0}, {"snippet_id": 78085, "code": "={ \"id\": resource['id'], \"size\": size, \"name\": name, \"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application", "label": 1}, {"snippet_id": 11427, "code": "( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order", "label": 0}, {"snippet_id": 7094, "code": "\"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed", "label": 0}, {"snippet_id": 75714, "code": "'id': '', 'text': 'Error retrieving FAST results.'}]}] url=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return", "label": 0}, {"snippet_id": 26011, "code": "=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info", "label": 0}, {"snippet_id": 53228, "code": ".projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return", "label": 1}, {"snippet_id": 51149, "code": "=True if step.is_optional: enabled=step.is_enabled_by_default if self._disable_all_options: enabled=False if step.name in self._enabled_options: enabled=True if step.name in self._disabled_options: enabled", "label": 0}, {"snippet_id": 17840, "code": ".Markup('Your password was reset. Log in now.'), 'info') return flask.redirect(flask.url_for('account.login')) return flask.render_template('password_reset.html', form=form) @bp.route('/profile', methods", "label": 0}, {"snippet_id": 44416, "code": "'03_datagroup', '04_PUC', '05_product', '06_datadocument', '07_rawchem_etc', '08_script', '09_productdocument', '10_habits_and_practices', '11_habits_and_practices_to_puc', '12_product_to_puc', '13_puc_tag", "label": 1}, {"snippet_id": 11495, "code": " if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html", "label": 0}, {"snippet_id": 3032, "code": "=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name", "label": 0}, {"snippet_id": 73501, "code": "')[1].split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user)", "label": 0}, {"snippet_id": 403, "code": " about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3)", "label": 0}, {"snippet_id": 49472, "code": "() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk", "label": 0}, {"snippet_id": 31359, "code": "') SOCIAL_AUTH_BITBUCKET_SECRET=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS=( 'social_core.backends.github.GithubOAuth2', 'social_core.backends.gitlab.GitLabOAuth2', 'social_core", "label": 0}, {"snippet_id": 52538, "code": " project_object.phase_code=\"done\" flash(\"Action item is completed.{}\".format (random.choice(congratulatory_messages))) else: flash(\"Changes saved.\") db.session.commit() return redirect(\"/view-team\") @app", "label": 0}, {"snippet_id": 79080, "code": "[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"", "label": 1}, {"snippet_id": 73652, "code": "': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view", "label": 0}, {"snippet_id": 29475, "code": "(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id session['token']=resp['oauth_token'] session", "label": 0}, {"snippet_id": 55976, "code": "{}/{}'.format(settings.PUBLIC_DOMAIN, EXPERIENCE_PATH, experience_share_id) link=dynamic_link.format(real_link) get_experience_interactor=create_get_experience_interactor() experience=get_experience_interactor", "label": 0}, {"snippet_id": 81949, "code": " client_ip=ip, user_agent=client_agent, ) clicktracker.url.add(object) clicktracker.save() object.save() return link_redirect(request, pk) return render(request, 'url-detail-view.html',{'object': object,", "label": 0}, {"snippet_id": 67522, "code": " query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace", "label": 0}, {"snippet_id": 9457, "code": " user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else", "label": 0}, {"snippet_id": 34023, "code": " None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error '", "label": 0}, {"snippet_id": 31144, "code": ".commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('deletegrudge.html', grudget_id=grudget_id, grudge=grudgeToDelete) if __name__=='__main__': app.secret_key", "label": 0}, {"snippet_id": 34348, "code": " qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The", "label": 0}, {"snippet_id": 37559, "code": " self).__init__(*args, **kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form.submit();' class BulkProductTagForm", "label": 0}, {"snippet_id": 66030, "code": ") quit_button.connect(\"clicked\", self.on_quit_button_clicked) unsaved_databases_list_box=builder.get_object(\"unsaved_databases_list_box\") for db in unsaved_databases_list: unsaved_database_row=Gtk.ListBoxRow", "label": 0}, {"snippet_id": 65540, "code": ".log_debug( \"File selected: \" +filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() tab_title=self.create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self", "label": 1}, {"snippet_id": 74104, "code": ".clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial): EVAL_ACTION_TYPE=\"DASHBOARD\" class ReportBasePartial(EvalDataMixin, wizard_builder_partials", "label": 0}, {"snippet_id": 45793, "code": " pk=doc.pk) else: return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset", "label": 1}, {"snippet_id": 32800, "code": " redirections: The redirections to apply. ''' def __init__(self, base, redirections): self.base=base self.redirections=redirections def execute(self, builtins): with self.redirections: self.base.execute", "label": 0}, {"snippet_id": 1463, "code": "') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 58465, "code": ": \"<p>create_thread</p>\", \"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\": False, \"settings\":{ \"html\": \"<p>view_introduction</p>\", \"description\"", "label": 0}, {"snippet_id": 43023, "code": ": '''ExtractionScript 15 includes a functional use data group with pk=5. Its QA page should hide the composition fields ''' response=self.client.get('/qa/extractionscript/15/', follow=True) response=self", "label": 0}, {"snippet_id": 53955, "code": " current state of the print buffer(if it exists) and returns a body-ready dom object of those contents without adding them to the actual report body. This is useful for creating intermediate body values for", "label": 0}, {"snippet_id": 65815, "code": ") close_button.add(close_image) tab_hbox.pack_start(close_button, False, False, False) tab_hbox.show_all() self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container", "label": 0}, {"snippet_id": 73995, "code": ".djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models", "label": 0}, {"snippet_id": 78854, "code": " been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request", "label": 0}, {"snippet_id": 82558, "code": "\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name:", "label": 0}, {"snippet_id": 8596, "code": " 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines", "label": 0}, {"snippet_id": 66463, "code": " keyfile_unlock_select_button.set_label(ntpath.basename(keyfile_chooser_dialog.get_filename())) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") keyfile_chooser_dialog.close()", "label": 0}, {"snippet_id": 31132, "code": "/script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template", "label": 0}, {"snippet_id": 20711, "code": "(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params", "label": 0}, {"snippet_id": 71247, "code": " self def _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id", "label": 0}, {"snippet_id": 50022, "code": " return redirect('/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request", "label": 0}, {"snippet_id": 46409, "code": "'stub_{stub}', data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product, document=doc) stub +=1 context['bulk']=0 if request.method=='POST' and 'clean_comp_data_button", "label": 0}, {"snippet_id": 24068, "code": " thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to", "label": 0}, {"snippet_id": 57106, "code": ", code=transaction_code) return transaction def get_concept_and_form_from_kwargs(**kwargs): concept_form=kwargs.get('concept_form', None) concept_class=concept_form._meta.model transaction_code=kwargs.get", "label": 0}, {"snippet_id": 63091, "code": "/login', eppn, _check) def test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass'] now=int(time.time()", "label": 0}, {"snippet_id": 1917, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding", "label": 0}, {"snippet_id": 44068, "code": "(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self.browser.current_url,", "label": 0}, {"snippet_id": 81806, "code": ".cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request", "label": 0}, {"snippet_id": 60021, "code": " inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3.OperationalError as e: if(e.args[0]=='no such module: VirtualSpatialIndex'): raise click.UsageError( \"It looks like", "label": 0}, {"snippet_id": 13314, "code": ".external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps", "label": 0}, {"snippet_id": 77296, "code": ", start regex\") logger.debug(\"JSON vars: %s\", result) p=re.compile(r\"var geeServerDefs=\") result=p.sub(\"\", result) p=re.compile(r\";\\s*$\") result=p.sub(\"\", result) p=re.compile(r\"([\\[\\{,])\\s*(\\w+)\\s*:\")", "label": 0}, {"snippet_id": 72194, "code": " path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not", "label": 0}, {"snippet_id": 1757, "code": " path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(", "label": 0}, {"snippet_id": 74895, "code": " request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_: url='%s?type=%s' %(reverse('register", "label": 0}, {"snippet_id": 14924, "code": " render_template('models.html', models=models) @app.route('/results') def view_results(): results=load_json('results.json') time_series=[] for name, values in results.items(): ts={ 'id': name, 'values':{ 'x':[], ", "label": 0}, {"snippet_id": 62557, "code": ".app import authn_init_app from eduid_common.api.app import eduid_init_app import logging logger=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class AuthnAPITestBase(EduidAPITestCase", "label": 0}, {"snippet_id": 16060, "code": ".core.exceptions import ValidationError from django.forms.formsets import formset_factory from django.http import Http404, HttpResponseRedirect from django.shortcuts import render from django.urls import", "label": 0}, {"snippet_id": 31024, "code": "}</script><body onload='myFunction()'>\" if request.method=='POST': if request.form['name']: editgrudge.name=request.form['name'] if request.form['description']: editgrudge.description=request.form['description", "label": 0}, {"snippet_id": 15899, "code": "=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8", "label": 0}, {"snippet_id": 21510, "code": ": \"\"\"Kill the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_REDIS_SERVER, check_alive=check_alive", "label": 0}, {"snippet_id": 67979, "code": " return context def get_queryset(self): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('events')) return query class EventListView(PaginationMixin, ListView): model=Event template_name=", "label": 0}, {"snippet_id": 3964, "code": "/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\"", "label": 0}, {"snippet_id": 65700, "code": "=self.create_tab_title_from_filepath(self.filechooser_creation_dialog.get_current_name()) self.start_database_creation_routine(tab_title) def copy_database_file(self): stock_database=Gio.File.new_for_uri", "label": 0}, {"snippet_id": 74899, "code": ".user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_: url='%s?type=%s' %(reverse('register'), type_) else: url=reverse('register') return HttpResponseRedirect(url) except", "label": 0}, {"snippet_id": 79552, "code": " organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model", "label": 0}, {"snippet_id": 74889, "code": "=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_", "label": 0}, {"snippet_id": 54312, "code": ".image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def politicians_by_state(state): pols=Politician.all(", "label": 0}, {"snippet_id": 40044, "code": " objects=InheritanceManager() tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self): '''If there is no DSSToxLookup record via the", "label": 0}, {"snippet_id": 28306, "code": " the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could", "label": 0}, {"snippet_id": 44259, "code": " when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser", "label": 0}, {"snippet_id": 54995, "code": " something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder, and File \"\"\" import os import os.path import fnmatch def specialized(p): \tif os.path.isdir(p):", "label": 0}, {"snippet_id": 1183, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f))", "label": 0}, {"snippet_id": 79276, "code": ": organization_id}) except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id}) except", "label": 0}, {"snippet_id": 41285, "code": " child_model.objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self): ", "label": 0}, {"snippet_id": 53638, "code": ".encoding return 'utf8' def read_all(self) -> str: \"\"\" Reads the current state of the buffer and returns a string those contents :return: A string for the current state of the print buffer contents \"\"\"", "label": 1}, {"snippet_id": 39864, "code": "=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank", "label": 0}, {"snippet_id": 63326, "code": ".assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__) @test_views.route('/test')", "label": 0}, {"snippet_id": 25317, "code": "] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler=self.xray_driver_removed_handler", "label": 0}, {"snippet_id": 39328, "code": "\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length=100, null=True, blank=True) def __str__(self): return str", "label": 0}, {"snippet_id": 41425, "code": ".data_document ParentForm, ChildForm=create_detail_formset(dd) child_formset=ChildForm(instance=et) for form in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None", "label": 0}, {"snippet_id": 74893, "code": "(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_: url='%s?type=%s'", "label": 0}, {"snippet_id": 1122, "code": "\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if", "label": 0}, {"snippet_id": 24490, "code": "=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1) for log_filename in new_log_filenames: logger.info(\"Beginning", "label": 1}, {"snippet_id": 56812, "code": ".transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail", "label": 0}, {"snippet_id": 41022, "code": ")) def test_product_card_location(self): response=self.client.get('/datadocument/179486/') html=response.content.decode('utf-8') e_idx=html.index('<h4>Extracted Text') p_idx=html.index('<h4 class=\"d-inline", "label": 0}, {"snippet_id": 75505, "code": ".forms import FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid(", "label": 0}, {"snippet_id": 77891, "code": "'capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print(", "label": 0}, {"snippet_id": 17690, "code": ">', methods=['GET', 'POST']) @bp.route('/password-reset', methods=['GET', 'POST']) def password_reset(payload=None): if not app.config['ALLOW_PASSWORD_RESET']: return flask.abort(404) if flask.g.user: return", "label": 0}, {"snippet_id": 9322, "code": "'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value(", "label": 0}, {"snippet_id": 81006, "code": " partner, subscription_update_counter) else: existing_registration=http.request.env['event.registration'].sudo().search([('partner_id', '=', partner_id), ('event_id', '=', event.id)]) try: if existing_registration", "label": 0}, {"snippet_id": 11998, "code": ": \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or", "label": 0}, {"snippet_id": 14758, "code": " app.config['SECRET_KEY']='secret' app.jinja_env.filters['json_pretty']=lambda value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id=", "label": 0}, {"snippet_id": 48995, "code": " template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail',", "label": 0}, {"snippet_id": 29869, "code": "=datetime.utcnow(), user=current_user, post=post) db.session.add(comment) db.session.commit() return redirect(url_for('gallery.show_post', post_id=post_id)) @gallery.route('/gallery/benwa/<int:post_id>/comment", "label": 0}, {"snippet_id": 77124, "code": ", str(server_layer_def[\"id\"])) if server_layer_def[\"projection\"]==\"mercator\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps", "label": 0}, {"snippet_id": 69421, "code": "): with open(config_path, 'r') as f: config=yaml.load(f) else: config={} config['users']=config.get('users',{}) config['users']['admin']=list(admins) with open(config_path, 'w+') as f: yaml.dump(config", "label": 0}, {"snippet_id": 30489, "code": " del login_session['email'] del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')", "label": 0}, {"snippet_id": 53321, "code": " try: code=InspectLoader.source_to_code(source_code, step.source_path) except SyntaxError as error: return render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path)", "label": 0}, {"snippet_id": 49778, "code": "=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route('/upload',", "label": 0}, {"snippet_id": 13687, "code": " password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest)", "label": 0}, {"snippet_id": 84145, "code": "=article) form.cache_old_content() if form.is_valid(): if request.user.is_authenticated(): form.editor=request.user if((article is None) and(group_slug is not None)): form.group=group new_article, changeset", "label": 0}, {"snippet_id": 48920, "code": " 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}", "label": 0}, {"snippet_id": 42862, "code": "=ExtractedText.objects.filter(qa_group=None).filter(extraction_script=scr ).filter( data_document__data_group__group_type__code='CO').first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') scr", "label": 0}, {"snippet_id": 51056, "code": "+foo\" include step foo. \"-foo\" exclude step foo. ''' for name in steps: if name.startswith(\"+\"): name=name[1:] self._disabled_options.discard(name) self._enabled_options.add(name) elif name.startswith(", "label": 0}, {"snippet_id": 18865, "code": ".trainee_utils import is_trainee from.models import GospelTrip def gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available'", "label": 0}, {"snippet_id": 34776, "code": "=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n", "label": 0}, {"snippet_id": 16807, "code": "'round': r, 'formset': formset}) g.save() for gp_id, field in f.cleaned_data.items(): if gp_id in['the_set', 'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try: gp.full_clean", "label": 0}, {"snippet_id": 62085, "code": " server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not in page.headers: return True else: matches=version_regex.search(page.headers", "label": 0}, {"snippet_id": 35194, "code": " ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except: ds.no_category=0 dgs=ds.datagroup_set.all", "label": 0}, {"snippet_id": 34343, "code": "') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute", "label": 0}, {"snippet_id": 57206, "code": " transaction_detail(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction", "label": 0}, {"snippet_id": 43375, "code": "() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects", "label": 0}, {"snippet_id": 22925, "code": "\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value", "label": 0}, {"snippet_id": 46404, "code": ".objects.create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product, document=doc) stub +=1 context['bulk']=0 if request", "label": 0}, {"snippet_id": 5421, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id)", "label": 0}, {"snippet_id": 57862, "code": " of setting e.g. `create_course` Return: dict object with the data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\" try: ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError: return onboarding_setting=c_onboarding_settings", "label": 0}, {"snippet_id": 51101, "code": "( \"select_optional_steps\", kwargs, {\"disable_others\":False}) if kwargs[\"disable_others\"]: self._enabled_options.clear() self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list", "label": 0}, {"snippet_id": 30329, "code": ": response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app's.\" response.headers['Content-Type']='application/json' return response", "label": 0}, {"snippet_id": 34515, "code": " import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField", "label": 0}, {"snippet_id": 72875, "code": "['position_id']) request.user.positions.add(position) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm", "label": 1}, {"snippet_id": 74523, "code": ".widgets import ID_VAL_SEPARATOR BDR_EMAIL='bdr@brown.edu' logger=logging.getLogger('etd') def login(request): if request.user.is_authenticated(): next_url=request.GET.get('next', reverse('home')) return", "label": 1}, {"snippet_id": 81003, "code": "=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: existing_registration=http.request.env['event.registration'].sudo().search([('partner_id', '=', partner_id), ('event_id", "label": 0}, {"snippet_id": 28327, "code": " seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract", "label": 0}, {"snippet_id": 49645, "code": "\"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if", "label": 0}, {"snippet_id": 63271, "code": " the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code", "label": 0}, {"snippet_id": 82730, "code": "-F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True", "label": 0}, {"snippet_id": 21108, "code": " self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler", "label": 0}, {"snippet_id": 12845, "code": " commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache", "label": 0}, {"snippet_id": 37855, "code": "=ExtractedChemical fields='__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm based on conditions of DataGroup type=Composition and at least 1 document extracted ''' if not dg", "label": 0}, {"snippet_id": 23504, "code": " GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus", "label": 0}, {"snippet_id": 20879, "code": "._redis_address is None (self._redis_address, redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports", "label": 1}, {"snippet_id": 4334, "code": "=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password,", "label": 0}, {"snippet_id": 61407, "code": " by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring", "label": 0}, {"snippet_id": 33161, "code": " from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam', 'prod_type', 'description','tags", "label": 1}, {"snippet_id": 4318, "code": "(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param", "label": 0}, {"snippet_id": 76922, "code": " raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest", "label": 0}, {"snippet_id": 9636, "code": ".welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string", "label": 0}, {"snippet_id": 53526, "code": ": \"\"\" filename=stack_frame.filename if filename.startswith(project.source_directory): filename=filename[len(project.source_directory) +1:] location=stack_frame.name if location=='<module>': location=None", "label": 0}, {"snippet_id": 47236, "code": " render, redirect, get_object_or_404 from dashboard.forms import DataSourceForm, PriorityForm from dashboard.models import DataSource, DataGroup, DataDocument from.data_group import DataGroupForm from django", "label": 1}, {"snippet_id": 24139, "code": " other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes:", "label": 1}, {"snippet_id": 28720, "code": "=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler", "label": 1}, {"snippet_id": 66789, "code": ".models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 43977, "code": "(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn'", "label": 0}, {"snippet_id": 54844, "code": "\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text]", "label": 0}, {"snippet_id": 20403, "code": "(self): \"\"\"Run the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL", "label": 0}, {"snippet_id": 22722, "code": " profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\"", "label": 1}, {"snippet_id": 34232, "code": ".current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA", "label": 1}, {"snippet_id": 82634, "code": " \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring", "label": 0}, {"snippet_id": 1501, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"", "label": 0}, {"snippet_id": 41722, "code": ".context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects.dg.group_type),'Composition',", "label": 0}, {"snippet_id": 66007, "code": "\"quit_dialog\") self.quit_dialog.set_destroy_with_parent(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object", "label": 0}, {"snippet_id": 59927, "code": "(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect().get(database,{}).get(\"tables\") def inspect(self): \" Inspect the database", "label": 0}, {"snippet_id": 32353, "code": " parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands(", "label": 0}, {"snippet_id": 52149, "code": " new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(\"/team-invitation\", methods=[\"POST\"]) def update_team_membership(): \"\"\"Update UserTeam membership field's value", "label": 0}, {"snippet_id": 11663, "code": " True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), ", "label": 0}, {"snippet_id": 10901, "code": " else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status", "label": 0}, {"snippet_id": 210, "code": ".guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime)", "label": 0}, {"snippet_id": 14003, "code": " to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider", "label": 0}, {"snippet_id": 17981, "code": ".render_template('profile.html', form=form) def redirect_url(): home_url=flask.url_for('main.home') url=flask.request.args.get('next') or \\ flask.request.referrer or \\ home_url if url==flask.request.url:", "label": 1}, {"snippet_id": 11172, "code": " enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\"", "label": 0}, {"snippet_id": 34934, "code": " HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0:", "label": 0}, {"snippet_id": 46478, "code": " to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] for i, row in enumerate(csv.DictReader(info)): try: extracted_chemical=ExtractedChemical", "label": 0}, {"snippet_id": 16103, "code": " GameScoreForm from tournament.forms import GetSevenPlayersForm from tournament.forms import PlayerRoundForm from tournament.forms import PowerAssignForm from tournament.tournament_views import get_modifiable_tournament_or_404", "label": 0}, {"snippet_id": 55485, "code": ") \tdef utime(self,times): \t\treturn os.utime(self.path,times) \tdef walk(self,topdown=True, onerror=None, followlinks=False): \t\treturn os.walk(self.path,topdown,onerror,followlinks) class FSPathList(list", "label": 0}, {"snippet_id": 33235, "code": " num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number')", "label": 0}, {"snippet_id": 29335, "code": " benwaonline.models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db(error): \"\"\"Closes the database again at the end of the request.\"\"\" if hasattr(g, 'sqlite_db'): g.sqlite_db", "label": 0}, {"snippet_id": 71582, "code": " test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth", "label": 0}, {"snippet_id": 73487, "code": "'password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1].split('@')[0].title().translate({ord(n): None", "label": 0}, {"snippet_id": 66120, "code": ") def unlock_database(self): self.builder=Gtk.Builder() self.builder.add_from_resource(\"/run/terminal/KeepassGtk/unlock_database.ui\") self.set_headerbar() self.assemble_stack() self.connect_events() def", "label": 0}, {"snippet_id": 36838, "code": " item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , ", "label": 0}, {"snippet_id": 8932, "code": "'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login", "label": 0}, {"snippet_id": 16243, "code": "={'player': tp.player} rps=tp.roundplayers() for r in round_set: played=rps.filter(the_round=r).exists() current['round_%d' % r.number()]=played data.append(current) if round_num: formset=PlayerRoundFormset", "label": 0}, {"snippet_id": 10258, "code": "}, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options", "label": 0}, {"snippet_id": 13383, "code": " import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view", "label": 0}, {"snippet_id": 26989, "code": " node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The", "label": 0}, {"snippet_id": 80339, "code": " self.lock_thin_etalon_action, self.lock_piezo_etalon_action, self.lock_fast_piezo_action] def setup_action_listeners(self): self.clear_log_area_action.triggered.connect(self.clear_log_area) self.open_idle_action", "label": 0}, {"snippet_id": 63187, "code": ".post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_SUCCESS_REDIRECT_URL'])) def test_token_login_old_user(self):", "label": 0}, {"snippet_id": 42510, "code": "(f'/qa/extractedtext/{ext.pk}/') def test_qa_approval_redirect(self): self.client.get(f'/qa/extractionscript/{self.objects.exscript.pk}/') pk=self.objects.extext.pk response=self.client.post(f'/qa/extractedtext", "label": 1}, {"snippet_id": 51667, "code": " genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } script='' if method=='GET': script=createGetScript(endpoint", "label": 0}, {"snippet_id": 39735, "code": ", 'extractedcpcat'): return self.extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict", "label": 1}, {"snippet_id": 66978, "code": " import SearchForm from lib.vt import VT from lib.threatminer import ThreatMiner from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist", "label": 0}, {"snippet_id": 40073, "code": ": return False def get_data_document(self): '''Find the child object by trying each of the classes, then return the datadocument id from it NOTE: this will be obsolete once we move the data_document foreign", "label": 0}, {"snippet_id": 49940, "code": " diagram=diagram) @app.route('/saveAs', methods=['POST']) @app.route('/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname", "label": 0}, {"snippet_id": 43521, "code": " save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist", "label": 0}, {"snippet_id": 29467, "code": "'user_id'] user=User.query.filter_by(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test", "label": 0}, {"snippet_id": 68221, "code": " import urlparse from http.client import HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name='twitter/index.html' context_object_name=", "label": 0}, {"snippet_id": 50689, "code": " platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path", "label": 0}, {"snippet_id": 73985, "code": " a subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob", "label": 0}, {"snippet_id": 52335, "code": "]) def update_most_recently_clicked_board(): \"\"\" \"\"\" board_id=request.form.get(\"boardId\") session[\"current_board\"]=board_id print \"Session updated with board{}.\".format(board_id) return \"HTTP-status-code", "label": 0}, {"snippet_id": 78207, "code": " with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users", "label": 0}, {"snippet_id": 79488, "code": " creating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen", "label": 0}, {"snippet_id": 42947, "code": "(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter( qa_group=new_group).count() self.assertTrue(initial_qa_count > 100) pk=ExtractedText.objects.filter( extraction_script_id=scr.id).filter(qa_group", "label": 0}, {"snippet_id": 15467, "code": "'change_timeseries_value_several_days_add_delta': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days':", "label": 0}, {"snippet_id": 72438, "code": " \\ if not root_dir.endswith('/') else root_dir try: cfs=CephFS() paths=cfs.get_dir_list(root_dir, depth) paths=[p[:-1] for p in paths if p !=root_dir] return{'paths': paths} except(cephfs.ObjectNotFound", "label": 0}, {"snippet_id": 2168, "code": " import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given", "label": 0}, {"snippet_id": 70341, "code": " also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template", "label": 0}, {"snippet_id": 16434, "code": ",)), 'formset': formset}) @permission_required('tournament.add_game') def get_seven(request, tournament_id, round_num): \"\"\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404", "label": 0}, {"snippet_id": 44815, "code": "=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type(ex).__name__, ex.args) long_note='A long QA note' * 200 note.qa_notes=long_note try: note.clean() except Exception as", "label": 0}, {"snippet_id": 54039, "code": " for creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents \"\"\" try: return self.stderr_interceptor.read_all(", "label": 1}, {"snippet_id": 36994, "code": " from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type", "label": 0}, {"snippet_id": 8289, "code": " in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image", "label": 0}, {"snippet_id": 33675, "code": " \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a", "label": 0}, {"snippet_id": 59584, "code": " ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self, key=None,", "label": 0}, {"snippet_id": 62766, "code": " back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str \"\"\" session_id=self.add_outstanding_query(came_from) cookie", "label": 0}, {"snippet_id": 22539, "code": "\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile", "label": 0}, {"snippet_id": 4047, "code": "'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params", "label": 0}, {"snippet_id": 62271, "code": " return True def validate_onion_address_not_in_href(page): links_on_landing_page=page.find_all(\"a\") for link in links_on_landing_page: try: if '.onion' in link.attrs['href']: return False except KeyError", "label": 0}, {"snippet_id": 45217, "code": "']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats", "label": 0}, {"snippet_id": 81753, "code": " CategoryUpdateModelForm, CounterCountingForm from.models import JustURL, Category, ClickTracking from.utils import create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import", "label": 0}, {"snippet_id": 34172, "code": " return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self", "label": 0}, {"snippet_id": 35223, "code": ".data_groups=dgs return render(request, template_name,{'data_sources': data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' 'category_assignment.html')): ", "label": 0}, {"snippet_id": 28293, "code": " or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\")", "label": 0}, {"snippet_id": 43158, "code": ").first() self.assertIn(elp_flagged.raw_cas.encode(), response.content) elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged.raw_cas.encode(), response.content) def test_every_extractedtext_qa", "label": 0}, {"snippet_id": 42791, "code": "(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response=self.client.get", "label": 0}, {"snippet_id": 65825, "code": ") self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance def update_tab_bar_visibility", "label": 0}, {"snippet_id": 8579, "code": " api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\")", "label": 0}, {"snippet_id": 7992, "code": " AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change", "label": 0}, {"snippet_id": 3064, "code": "'oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request", "label": 0}, {"snippet_id": 61152, "code": ":type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed component and a short message.", "label": 0}, {"snippet_id": 52256, "code": ", with board\"\"\" team_id=request.form.get(\"team\") session[\"team_id\"]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(", "label": 0}, {"snippet_id": 81110, "code": ") except ValidationError as e: _logger.error('Unable to register: '+str(e)) referer=str(http.request.httprequest.headers.environ['HTTP_REFERER']) redirect=str('/'+referer.split('/')[-1]) return http.request", "label": 1}, {"snippet_id": 73243, "code": ") self.add_error('email', message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label", "label": 0}, {"snippet_id": 64190, "code": "'Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods", "label": 0}, {"snippet_id": 55995, "code": "=experience_share_id, logged_person_id='-1') \\ .execute() desc=(experience.description[:77] +'...') if len(experience.description) > 77 else experience.description preview_content={'st': experience.title,", "label": 0}, {"snippet_id": 22493, "code": ", worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or", "label": 0}, {"snippet_id": 78889, "code": ".organization_id !=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session.add(data_req) session.commit(", "label": 0}, {"snippet_id": 34746, "code": "(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n", "label": 0}, {"snippet_id": 71111, "code": " import absolute_import from engineauth import models from engineauth import utils from engineauth.config import load_config import re from webob import Response from webob import Request class EngineAuthResponse", "label": 0}, {"snippet_id": 15666, "code": ")) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.new_value.data=command.get('new_value', '') for index, command in enumerate(get_command('change_timeseries_value_several_days_add_delta", "label": 0}, {"snippet_id": 24730, "code": ".LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port", "label": 1}, {"snippet_id": 51690, "code": " script=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={ 'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method }", "label": 0}, {"snippet_id": 32638, "code": " that forwards the output of one node to the input of another. Args: first: The node to pipe the output from. second: The node to pipe the input into. ''' def __init__(self, first, second): self.first=first", "label": 0}, {"snippet_id": 80444, "code": " @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id=sys.argv[1], wavemeter_port=sys.argv[2]) except Exception as err: self.matisse: Matisse=None raise err @pyqtSlot() def", "label": 0}, {"snippet_id": 11960, "code": " old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils", "label": 0}, {"snippet_id": 22417, "code": " the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not", "label": 0}, {"snippet_id": 45945, "code": ".models import Max @login_required() def data_group_list(request, template_name='data_group/datagroup_list.html'): datagroup=DataGroup.objects.all() data={} data['object_list']=datagroup return render(request", "label": 0}, {"snippet_id": 74560, "code": " assistance.' % BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return", "label": 0}, {"snippet_id": 52048, "code": "[] invites_list=[] user_id=session.get(\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id\": userteam", "label": 0}, {"snippet_id": 25770, "code": " ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self", "label": 0}, {"snippet_id": 76868, "code": ") return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the image. image_spec: all details about", "label": 1}, {"snippet_id": 19519, "code": " > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in", "label": 1}, {"snippet_id": 8614, "code": "'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page.", "label": 0}, {"snippet_id": 47656, "code": " list)\" products.n \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count", "label": 0}, {"snippet_id": 32847, "code": " self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self", "label": 1}, {"snippet_id": 52942, "code": " from django.test import Client from realpal.apps.users.constants import * from realpal.apps.users.views import UserRedirectView, UserUpdateView class BaseUserTestCase(TestCase): def setUp(self): self.user", "label": 0}, {"snippet_id": 37746, "code": " as well as whether all records are matched, but not extracted ''' if not dg.type in['FU', 'CO', 'CP']: return False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg", "label": 0}, {"snippet_id": 13602, "code": ".loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) },", "label": 0}, {"snippet_id": 32114, "code": " ''' self.position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns:", "label": 0}, {"snippet_id": 62623, "code": " load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config) def add_outstanding_query(self", "label": 0}, {"snippet_id": 27294, "code": " self.redis_address=redis_address self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port", "label": 0}, {"snippet_id": 45944, "code": " update_fields from django.db.models import Max @login_required() def data_group_list(request, template_name='data_group/datagroup_list.html'): datagroup=DataGroup.objects.all() data={} data['object_list'", "label": 0}, {"snippet_id": 34989, "code": ": response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response", "label": 1}, {"snippet_id": 48312, "code": ")['no_category'] except: ds.no_category=0 dgs=ds.datagroup_set.all() for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull=False).count() ds", "label": 0}, {"snippet_id": 57605, "code": " c_onboarding_settings from core.common import onboarding def send_email(context_data, from_email, to_email, template_subject, template_text): \"\"\" Send an email with specified content. Arguments: context_data", "label": 0}, {"snippet_id": 45240, "code": " document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at',", "label": 0}, {"snippet_id": 81749, "code": " CategoryModelForm, ManyURLSForm, JustULRUpdateForm, \\ CategoryUpdateModelForm, CounterCountingForm from.models import JustURL, Category, ClickTracking from.utils import create_short_url, token_generator,", "label": 0}, {"snippet_id": 84223, "code": "'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is not None:", "label": 0}, {"snippet_id": 35764, "code": ".save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer", "label": 0}, {"snippet_id": 79532, "code": " string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional). :type organization_id", "label": 0}, {"snippet_id": 59165, "code": ", invite_domain) ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{}\".format(self.code", "label": 0}, {"snippet_id": 7615, "code": " import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from", "label": 0}, {"snippet_id": 75989, "code": " self.redirect_type in['prefix', 'page', 'exact']: return redirect_text.format( type=self.get_redirect_type_display(), from_to_url=self.get_from_to_url_display(), ) return ugettext( 'Redirect:{}'.format", "label": 0}, {"snippet_id": 33588, "code": " ethylparaben') ec=ExtractedChemical.objects.get(rawchem_ptr_id=73) ec.raw_min_comp=0.1 ec.save() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(2,", "label": 0}, {"snippet_id": 47230, "code": ".contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from dashboard.forms import DataSourceForm, PriorityForm from dashboard.models import DataSource", "label": 0}, {"snippet_id": 48814, "code": " ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name", "label": 0}, {"snippet_id": 24096, "code": " used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def is_main_thread(): return threading.current_thread().getName()", "label": 0}, {"snippet_id": 12557, "code": " configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, } if third_party_auth.is_enabled(): if not", "label": 0}, {"snippet_id": 80521, "code": "=QMessageBox(icon=QMessageBox.Critical) dialog.setWindowTitle('Error') dialog.setText(f\"{description +'_' * desired_width}\\n\\n{''.join(stack)}\") dialog.exec() @handled_slot(bool) def clear_log_area(self", "label": 0}, {"snippet_id": 15197, "code": "('Delta',[validators.required()]) class ChangeInputAddDelta(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeInputAddDelta, self).__init__(csrf_enabled=csrf_enabled, *args", "label": 0}, {"snippet_id": 77263, "code": ".debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp", "label": 1}, {"snippet_id": 29000, "code": " object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"", "label": 0}, {"snippet_id": 22064, "code": " code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether", "label": 0}, {"snippet_id": 34144, "code": " save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist", "label": 0}, {"snippet_id": 50216, "code": "'Email already in use') return redirect('/signup') @app.route(\"/login\") def login(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"login.html", "label": 0}, {"snippet_id": 81270, "code": "'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user'): email=self.env.user.partner_id.email for event in self: domain=['&", "label": 0}, {"snippet_id": 62651, "code": " to the queries cache. To be used before accessing the assertion consumer service. :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return", "label": 0}, {"snippet_id": 55055, "code": ".path)): \t\t\tr=self.path[len(other.path):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath", "label": 0}, {"snippet_id": 22048, "code": " without the password from connecting to Redis if provided. plasma_directory: A directory where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that will be run", "label": 0}, {"snippet_id": 5888, "code": " else httplib2.Http() self.time=time if time is not None else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self, app):", "label": 0}, {"snippet_id": 35820, "code": "'product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail", "label": 0}, {"snippet_id": 27818, "code": "(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being logged. extra_data: Additional information to log. \"\"\" def", "label": 0}, {"snippet_id": 70893, "code": " encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date", "label": 0}, {"snippet_id": 81854, "code": " SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render(request, 'success-url-view.html',{'object': object, 'form': form}) def", "label": 0}, {"snippet_id": 73164, "code": ".url_upload_not_supported_yet) self.add_error('url_ref', msg) return self.cleaned_data class ScreenDoorUserCreationForm(UserCreationForm): text=CreateAccountFormText.create_account email_text=CreateAccountFormText.email_address", "label": 1}, {"snippet_id": 70914, "code": ".st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <", "label": 0}, {"snippet_id": 34157, "code": "'../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made", "label": 0}, {"snippet_id": 83047, "code": " class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"", "label": 0}, {"snippet_id": 46983, "code": ", 'header': header, 'groups': groups}) @login_required() def data_group_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): datagroup=get_object_or_404(DataGroup, pk=pk) if", "label": 0}, {"snippet_id": 70395, "code": ".path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes:", "label": 1}, {"snippet_id": 74465, "code": " form_valid(self, form): pass class ViewPDFPartial(WizardPDFPartial): content_disposition=\"inline\" EVAL_ACTION_TYPE=\"VIEW_PDF\" class DownloadPDFPartial(WizardPDFPartial): content_disposition=\"attachment", "label": 0}, {"snippet_id": 72283, "code": " ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id': '{cluster_id}', 'export_id': '{export_id}'}, 2.0) def delete(self, cluster_id,", "label": 0}, {"snippet_id": 59977, "code": " \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem %s\" % name) try: with sqlite3.connect( \"file:{}?immutable=1\".format(path", "label": 0}, {"snippet_id": 61037, "code": " Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock", "label": 0}, {"snippet_id": 66460, "code": ".STYLE_CLASS_SUGGESTED_ACTION) keyfile_unlock_select_button.set_label(ntpath.basename(keyfile_chooser_dialog.get_filename())) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File", "label": 0}, {"snippet_id": 75078, "code": "='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form.is_valid(): thesis=form.save() if thesis.abstract !=form.cleaned_data", "label": 0}, {"snippet_id": 15897, "code": " rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data", "label": 0}, {"snippet_id": 15181, "code": "[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) new_value=FloatField('Delta',[validators.required()]) class ChangeInputAddDelta", "label": 0}, {"snippet_id": 80115, "code": " LoggingStream from.status_monitor import StatusMonitor from.threading import ExitFlag, LoggingThread class ControlApplication(QApplication): EXIT_CODE_RESTART=42 def __init__(self, *args, **kwargs): super(", "label": 0}, {"snippet_id": 80558, "code": "-m idlelib -t \"Matisse Controller -Python Shell\" -c \"from matisse import Matisse; ' + 'matisse=Matisse(); print(\\'Access the Matisse using \\\\\\'matisse.[method]\\\\\\'\\')\"') @handled_slot(bool) def restart", "label": 1}, {"snippet_id": 1617, "code": "[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse", "label": 0}, {"snippet_id": 75138, "code": "') if _user_keywords_changed(thesis, request.POST.getlist('keywords',[])): messages.info(request, 'Your keywords contained invisible characters that we\\'ve removed. Please make sure your keywords are correct", "label": 0}, {"snippet_id": 54638, "code": " self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor", "label": 1}, {"snippet_id": 82302, "code": ": def get(self, request, pk, *args, **kwargs): object=get_object_or_404(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by('timestamp') return render(request, 'clicktracking-detail-view.html", "label": 0}, {"snippet_id": 24341, "code": "\"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE and driver_id !=self.worker.task_driver_id.binary()): return try: function=pickle.loads(serialized_function", "label": 0}, {"snippet_id": 27445, "code": "(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU", "label": 0}, {"snippet_id": 80300, "code": ".lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction", "label": 0}, {"snippet_id": 48061, "code": "/habitsandpractices/{doc.pk}') context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required() def link_habitsandpractices(request, pk,", "label": 0}, {"snippet_id": 79273, "code": "'ignore_auth': True},{'id': organization_id}) except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id", "label": 0}, {"snippet_id": 52140, "code": " new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(\"/team-invitation\",", "label": 0}, {"snippet_id": 62788, "code": "=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64", "label": 0}, {"snippet_id": 21352, "code": " method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process", "label": 0}, {"snippet_id": 32864, "code": ".newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps perform multiple file redirections", "label": 0}, {"snippet_id": 49047, "code": " login_required from django.shortcuts import render, redirect, get_object_or_404 from django.core.exceptions import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms import *", "label": 0}, {"snippet_id": 35525, "code": "'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method", "label": 0}, {"snippet_id": 16260, "code": " if round_num: formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if", "label": 0}, {"snippet_id": 62599, "code": ": '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config, 'TOKEN_LOGIN_SHARED_KEY': 'shared_secret', 'TOKEN_LOGIN_SUCCESS_REDIRECT_URL': 'http://test.localhost/success', 'TOKEN_LOGIN_FAILURE_REDIRECT_URL'", "label": 1}, {"snippet_id": 34055, "code": ".browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable", "label": 0}, {"snippet_id": 70547, "code": " file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t", "label": 0}, {"snippet_id": 30133, "code": " import flow_from_clientsecrets from oauth2client.client import FlowExchangeError import httplib2 import json from flask import make_response import requests app=Flask(__name__) CLIENT_ID=json.loads( open", "label": 0}, {"snippet_id": 69317, "code": "'%jupyterhub-admins ALL=(ALL) NOPASSWD: ALL\\n') f.write('Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file): \"\"\" Set up user conda environment with required", "label": 0}, {"snippet_id": 21536, "code": " plasma store. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet", "label": 0}, {"snippet_id": 7514, "code": " django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import", "label": 0}, {"snippet_id": 70124, "code": " of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n", "label": 0}, {"snippet_id": 54571, "code": " hwml import Problem, Assignment from collections import defaultdict import string class HWML_processor(object): \tdef prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t\tself.p=pprint", "label": 1}, {"snippet_id": 65188, "code": " e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points, 'failed to compile code') output_json(args.points, deductions) return deductions +", "label": 0}, {"snippet_id": 82757, "code": "\"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s on host %s", "label": 0}, {"snippet_id": 45689, "code": "): ext_text_form.save() return redirect(referer, pk=pk) @login_required() def data_document_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): doc=get_object_or_404(DataDocument", "label": 0}, {"snippet_id": 35600, "code": " puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f", "label": 0}, {"snippet_id": 60209, "code": " \"templates\": p[\"templates_path\"] is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, )", "label": 0}, {"snippet_id": 81295, "code": ",('partner_id', '=', self.env.user.partner_id.id),('event_id', '=', event.id), ('state', '=', 'open')] count=self.env['event.registration'].search_count(domain) if count > 0: event.fit_is_participating", "label": 0}, {"snippet_id": 65037, "code": " left.func.id==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str, ast.Bytes, ast.NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid", "label": 0}, {"snippet_id": 44410, "code": ".contrib.auth.models import User from dashboard.models import * fixtures_standard=[ '00_superuser', '01_lookups', '02_datasource', '03_datagroup', '04_PUC', '05_product', '06_datadocument', '07_rawchem_etc',", "label": 0}, {"snippet_id": 24251, "code": " num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode ", "label": 1}, {"snippet_id": 5918, "code": "', 'email']) app.config.setdefault('OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config", "label": 0}, {"snippet_id": 55849, "code": ": \tdef __init__(self,path): \t\tsuper(Link,self).__init__(path) \t\tassert(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser", "label": 0}, {"snippet_id": 3174, "code": " import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): \"\"\"OIDC", "label": 0}, {"snippet_id": 25955, "code": ".PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER]=( process_infos) def start_log_monitor(self): \"\"\"Start the log monitor.\"\"\" stdout_file,", "label": 0}, {"snippet_id": 8515, "code": "\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce", "label": 0}, {"snippet_id": 33303, "code": ", PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup", "label": 0}, {"snippet_id": 44444, "code": " load_model_objects(): user=User.objects.create_user(username='Karyn', password='specialP@55word') superuser=User.objects.create_superuser(username='SuperKaryn', password='specialP@55word', email='me@epa.gov", "label": 0}, {"snippet_id": 75420, "code": ", raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) if request.method", "label": 0}, {"snippet_id": 1723, "code": "( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date", "label": 1}, {"snippet_id": 78302, "code": ": print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id'], users) else: print('-Nothing to update for organisation %s' % org['name']) print('-------", "label": 0}, {"snippet_id": 13092, "code": " log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender", "label": 0}, {"snippet_id": 83740, "code": "(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if", "label": 0}, {"snippet_id": 15096, "code": ", *args, **kwargs) model_system_name=NoValidationSelectField('Model',[validators.required()], choices=[]) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[", "label": 0}, {"snippet_id": 7542, "code": " django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods", "label": 0}, {"snippet_id": 7, "code": " used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse", "label": 0}, {"snippet_id": 12694, "code": ". Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request", "label": 0}, {"snippet_id": 53885, "code": "(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None def clear(self) -> ", "label": 0}, {"snippet_id": 27039, "code": " debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected", "label": 0}, {"snippet_id": 60462, "code": "\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"/-/inspect<as_format", "label": 0}, {"snippet_id": 18159, "code": "=url.strip()\r \r try:\r r=requests.head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file", "label": 1}, {"snippet_id": 18216, "code": " tornado.web import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web", "label": 1}, {"snippet_id": 35958, "code": " ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES=( ('UN', 'unknown'), ('FO', 'formulations'), ('AR', 'articles", "label": 0}, {"snippet_id": 8131, "code": "] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information", "label": 0}, {"snippet_id": 81757, "code": " CounterCountingForm from.models import JustURL, Category, ClickTracking from.utils import create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import re class HomeView(View): def get(self,", "label": 0}, {"snippet_id": 24682, "code": ".add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the", "label": 1}, {"snippet_id": 74388, "code": "() class EncryptedWizardPartial( _ReportUpdatePartial, wizard_builder_partials.WizardPartial ): steps_helper=view_helpers.ReportStepsHelper EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, **kwargs", "label": 0}, {"snippet_id": 56496, "code": " return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self", "label": 0}, {"snippet_id": 65131, "code": ") dock_points(deductions, args.points, 'failed to parse code') break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body)==1: fdef=tree.body", "label": 0}, {"snippet_id": 33044, "code": "(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object", "label": 0}, {"snippet_id": 73254, "code": ": login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) password=forms.CharField( label", "label": 0}, {"snippet_id": 31520, "code": " __future__ import print_function from __future__ import unicode_literals from __future__ import division from django.conf.urls import patterns, url from apps.home.views import home_page, projects, project,", "label": 1}, {"snippet_id": 2844, "code": "\nimport time try: from urllib.parse import urlencode except ImportError: from urllib import urlencode from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse", "label": 0}, {"snippet_id": 80418, "code": " def setup_log_window(self): self.layout.addWidget(self.log_area) @handled_function def setup_widgets(self): self.status_monitor_queue=queue.Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse", "label": 0}, {"snippet_id": 72253, "code": "'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons) for", "label": 0}, {"snippet_id": 11296, "code": " return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict", "label": 0}, {"snippet_id": 7027, "code": ".verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user", "label": 0}, {"snippet_id": 77019, "code": "\"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\" _TILE_ARGS=\"&%s=%d&", "label": 0}, {"snippet_id": 10591, "code": " or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint", "label": 0}, {"snippet_id": 63913, "code": "] idp=request.args.get('idp', idp) loa=request.args.get('required_loa', None) authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action", "label": 0}, {"snippet_id": 15736, "code": ", form=run_form) }) @app.route('/run/form/submit', methods=['POST']) def view_run_submit(): run_form=get_run_form() commands=get_commands(run_form) if run_form.validate_on_submit(): return json.dumps({", "label": 0}, {"snippet_id": 32147, "code": " malformed and a token cannot be correctly generated from it. ''' while self.char and self.char.isspace(): self.read() if self.char==None: return Token(TokenType.EOF, None, self.position) elif self.char=='>", "label": 0}, {"snippet_id": 41104, "code": "/245401/') data={'title' :['Product Title'], 'upc' :['stub_9100'], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects", "label": 0}, {"snippet_id": 16129, "code": ", GameSet from tournament.email import send_board_call from tournament.game_seeder import GameSeeder from tournament.models import Tournament, Round, Game from tournament.models import TournamentPlayer", "label": 0}, {"snippet_id": 52423, "code": "=request.form.get(\"board-id\") new_project=q.make_project(title, notes, phase_code, board_id) q.add_to_db(new_project) flash(\"New a new{} has been added to your board!\".format(phase_code)) return redirect(\"", "label": 0}, {"snippet_id": 53370, "code": " set_executing(True) threads.abort_thread() if environ.modes.has(environ.modes.TESTING): exec_test() else: exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except", "label": 0}, {"snippet_id": 63381, "code": " config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_authn(self", "label": 0}, {"snippet_id": 11563, "code": " is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before", "label": 0}, {"snippet_id": 13263, "code": " from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators", "label": 0}, {"snippet_id": 19200, "code": " num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key", "label": 0}, {"snippet_id": 4151, "code": " authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend", "label": 0}, {"snippet_id": 77561, "code": " that were added as free extras to datasets to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self", "label": 0}, {"snippet_id": 27876, "code": " ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must", "label": 0}, {"snippet_id": 24160, "code": " workers. Attributes: worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode", "label": 1}, {"snippet_id": 52076, "code": " teams_list.append(team_dict) elif userteam.is_member is None: invite_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name, \"desc\": userteam.team.desc} invites_list.append(invite_dict) return render_template", "label": 1}, {"snippet_id": 31112, "code": " login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script>", "label": 0}, {"snippet_id": 69029, "code": " remove_chp(): \"\"\" Ensure CHP is not running \"\"\" if os.path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try: systemd", "label": 0}, {"snippet_id": 69629, "code": "=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format( len(apt_packages), ' ", "label": 0}, {"snippet_id": 46791, "code": " doesn't exist.\"]) filenames.append(line['filename']) doc=DataDocument(filename=line['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group", "label": 0}, {"snippet_id": 76801, "code": "(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green, blue, alpha)=pixdata[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata[row, col]=(red,", "label": 0}, {"snippet_id": 43851, "code": "-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser.find_element_by_id( ", "label": 0}, {"snippet_id": 81860, "code": " pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render(request, 'success-url-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, *", "label": 0}, {"snippet_id": 34229, "code": "(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt", "label": 1}, {"snippet_id": 57396, "code": "**kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) print_transaction=request.POST.get('print_transaction', None) if print_transaction: transaction=get_object_or_404", "label": 0}, {"snippet_id": 39681, "code": "(ExtractedText.objects.filter( qa_group=self.qa_group, qa_checked=False), self, 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type", "label": 0}, {"snippet_id": 75560, "code": "\\'s thesis.') if not candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate", "label": 0}, {"snippet_id": 24979, "code": " subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries", "label": 0}, {"snippet_id": 33753, "code": ", rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The non-curated row should appear') rc_row=f'%s,%s,%s,%s,%s\\r\\n' %(rc.extracted_text.data_document.data_group", "label": 1}, {"snippet_id": 2649, "code": " +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del", "label": 0}, {"snippet_id": 50612, "code": " vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools", "label": 0}, {"snippet_id": 71901, "code": "':'TEST1'}, ]) msgs_key=req.get_messages('_mykey') self.assertEquals(msgs_key,[ {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) msgs_key=req.get_messages", "label": 0}, {"snippet_id": 38407, "code": " import ProductToTag from.product_to_puc import ProductToPUC from.extracted_habits_and_practices_to_puc import ExtractedHabitsAndPracticesToPUC from.qa_notes import QANotes from.raw_chem import RawChem", "label": 0}, {"snippet_id": 21530, "code": "=check_alive) def kill_plasma_store(self, check_alive=True): \"\"\"Kill the plasma store. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 15139, "code": "=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeInputNewValue(FlaskForm): def __init__", "label": 0}, {"snippet_id": 49697, "code": "' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename", "label": 0}, {"snippet_id": 39596, "code": "(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models.CASCADE, limit_choices_to={'script_type':", "label": 0}, {"snippet_id": 12281, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email'", "label": 0}, {"snippet_id": 10191, "code": ", 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 28546, "code": "\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"", "label": 0}, {"snippet_id": 6347, "code": " id_token['aud']: logger.error('We are not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple audiences and not authorized party') return False else: if id_token['aud'] !=self", "label": 0}, {"snippet_id": 54219, "code": "+1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other", "label": 1}, {"snippet_id": 21947, "code": " the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation", "label": 0}, {"snippet_id": 77774, "code": " notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary", "label": 1}, {"snippet_id": 44239, "code": ".find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\")", "label": 0}, {"snippet_id": 23845, "code": "\"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns", "label": 0}, {"snippet_id": 72298, "code": "(self, cluster_id, export_id, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) export", "label": 0}, {"snippet_id": 24053, "code": " with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks", "label": 0}, {"snippet_id": 46030, "code": " include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist", "label": 0}, {"snippet_id": 28710, "code": " logger.addHandler(_default_handler) logger.propagate=False def try_update_handler(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler", "label": 1}, {"snippet_id": 23909, "code": " pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker:", "label": 0}, {"snippet_id": 37851, "code": "'SID'].disabled=True class Meta: model=ExtractedChemical fields='__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm based on conditions of DataGroup type=Composition and at", "label": 0}, {"snippet_id": 41791, "code": ",'Functional use', 'Type of DataGroup needs to be \"FU\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename", "label": 0}, {"snippet_id": 33785, "code": ") rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s,%s,%s\\r\\n'", "label": 1}, {"snippet_id": 78029, "code": " package_ids: default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size", "label": 0}, {"snippet_id": 70566, "code": " t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 35464, "code": "}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required", "label": 0}, {"snippet_id": 32189, "code": "(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType.REDIRECT_IN, None, self.position) self.read() return token elif self.char=='|': token=Token(TokenType.PIPE, None, self.position", "label": 0}, {"snippet_id": 24452, "code": " redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port", "label": 1}, {"snippet_id": 28072, "code": ". Args: exception_message(str): A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines", "label": 0}, {"snippet_id": 1064, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length", "label": 0}, {"snippet_id": 56969, "code": "*kwargs): context=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context['is_filtered']=self.is_filtered return context def get_queryset(self): data=QueryDict", "label": 0}, {"snippet_id": 6537, "code": " return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized", "label": 1}, {"snippet_id": 48514, "code": "'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type", "label": 0}, {"snippet_id": 65230, "code": " CreateDatabase from keepassgtk.container_page import ContainerPage from keepassgtk.unlock_database import UnlockDatabase import keepassgtk.config_manager import os from os.path import exists import ntpath import", "label": 0}, {"snippet_id": 42629, "code": "&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result found') def test_faceted_search_renders_div(self): response=self.c.get('/find/?q=terro') self.assertNotContains(response, '<table')", "label": 0}, {"snippet_id": 72846, "code": "': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText", "label": 0}, {"snippet_id": 46971, "code": "=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) return render(request, template_name,{'datagroup': datagroup, 'form': form, 'header': header, 'groups", "label": 0}, {"snippet_id": 80685, "code": " checked): target_pos, success=QInputDialog.getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE:POS?', numeric_result=True)) if success:", "label": 0}, {"snippet_id": 20940, "code": " stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]", "label": 1}, {"snippet_id": 81917, "code": " return link_redirect(request, pk) return redirect('home-view') class URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects", "label": 1}, {"snippet_id": 39006, "code": ".isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy\"", "label": 0}, {"snippet_id": 38121, "code": "=models.ManyToManyField('Product', through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC", "label": 0}, {"snippet_id": 61606, "code": " Preloaded'], subdomain=validate_subdomain(securedrop.landing_page_url), no_cookies=validate_no_cookies(page), safe_onion_address=validate_onion_address_not_in_href(soup), no_cdn=validate_not_using_cdn(page)", "label": 1}, {"snippet_id": 38645, "code": " @property def is_extracted(self): return hasattr(self,'extractedtext') def get_absolute_url(self): return reverse('data_document', kwargs={'pk': self.pk}) def get_abstract_filename(self): ext=self.filename", "label": 0}, {"snippet_id": 84033, "code": " if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params", "label": 0}, {"snippet_id": 20678, "code": " monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params", "label": 0}, {"snippet_id": 64065, "code": "=session.get('user_eppn') if eppn is None: current_app.logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload", "label": 0}, {"snippet_id": 76774, "code": " tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row", "label": 0}, {"snippet_id": 2351, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"", "label": 0}, {"snippet_id": 18613, "code": " in the database with the \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument exists, returns None or the error message. \t\"\"\" \tdef check_database(self", "label": 1}, {"snippet_id": 68110, "code": ") for event in Event.objects.filter(id__in=Hunt(id=pk).events.all()).order_by('publish_timestamp'): dt=event.publish_timestamp.astimezone(timezone('Asia/Tokyo')) row=[dt, event.date, event.info, event.get_threat_level_id_display", "label": 0}, {"snippet_id": 24618, "code": "\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor", "label": 1}, {"snippet_id": 69139, "code": " traefik_unit_template=f.read() proxy_secret_path=os.path.join(STATE_DIR, 'traefik-api.secret') if not os.path.exists(proxy_secret_path): with open(proxy_secret_path, 'w') as f: f.write(secrets.token_hex(32)", "label": 0}, {"snippet_id": 35471, "code": ".get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag", "label": 0}, {"snippet_id": 59919, "code": "): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect().get(database,", "label": 0}, {"snippet_id": 80863, "code": " sys.argv.append('USB0::0x17E7::0x0102::07-40-01::INSTR') sys.argv.append('COM5') print(sys.argv) exit_code=ControlApplication.EXIT_CODE_RESTART while exit_code==ControlApplication.EXIT_CODE_RESTART: gui", "label": 0}, {"snippet_id": 73351, "code": "'createnewposition/', views.import_position, name='importposition'), path('positions/', views.positions, name='positions'), path('position/', views.position, name='position'), path('importapplications/'", "label": 1}, {"snippet_id": 72753, "code": " render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form'", "label": 0}, {"snippet_id": 53899, "code": " if self.step else None def clear(self) -> 'Report': \"\"\" Clear all user-data stored in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining ", "label": 0}, {"snippet_id": 22868, "code": ") self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can", "label": 0}, {"snippet_id": 55285, "code": ": \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode)", "label": 0}, {"snippet_id": 42797, "code": ").pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/15", "label": 0}, {"snippet_id": 49177, "code": ", 'extracted_text': extracted_text, 'detail_formset': child_formset} ) else: context['edit_text_form']=ParentForm() return render(request, template_name, context) @login_required() def save_doc_form(request", "label": 0}, {"snippet_id": 75840, "code": "), ) STATUS_CHOICES=( (True, _('Active')), (False, _('Inactive')), ) TYPE_CHOICES=( ('prefix', _('Prefix Redirect')), ('page', _('Page Redirect')), ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx", "label": 0}, {"snippet_id": 65789, "code": ", False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button", "label": 0}, {"snippet_id": 32100, "code": "=None self.read() def read(self): ''' Read a single char from the stream and store it in self.char. Returns: The value of self.char. ''' self.position +=1 if self.position < len(self.string): self.char", "label": 0}, {"snippet_id": 36018, "code": ".ManyToManyField('Product', through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC')", "label": 0}, {"snippet_id": 69687, "code": "( len(pip_packages), ' '.join(pip_packages) )) conda.ensure_pip_packages(USER_ENV_PREFIX, pip_packages) def ensure_config_yaml(plugin_manager): \"\"\" Ensure we have a config.yaml present \"\"\" for path in[CONFIG_DIR", "label": 0}, {"snippet_id": 58261, "code": " test_get_onboarding_setting(self, setting_name, value, _mock): self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting') @mock.patch('core", "label": 0}, {"snippet_id": 6674, "code": "'auth_token']=user.auth_token return redirect(request.args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout'", "label": 1}, {"snippet_id": 18488, "code": ".get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?", "label": 0}, {"snippet_id": 47136, "code": "=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST or None, instance=extext, prefix='habits') context={ 'doc' : doc, 'ext_form' : ext_form, ", "label": 0}, {"snippet_id": 36118, "code": " is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return", "label": 0}, {"snippet_id": 57575, "code": "='introduction_course_id' VIEW_INTRODUCTION=STEP_1 INTRODUCTION_INTRO=STEP_2 CREATE_COURSE=STEP_3 CREATE_COURSELET=STEP_4 CREATE_THREAD=STEP_5 PREVIEW_COURSELET=STEP_6 NEXT_STEPS=STEP_7 INVITE_SOMEBODY", "label": 1}, {"snippet_id": 77630, "code": "\" self._load_config() context={'session': model.Session} package_ids=self.get_package_ids() for package_id in package_ids: default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version", "label": 0}, {"snippet_id": 64333, "code": " from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for user{0} ' 'Performing local logout'.format( session[", "label": 0}, {"snippet_id": 77698, "code": " name, \"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version", "label": 1}, {"snippet_id": 14659, "code": " \"\"\" import signal import gateway_code.board_config as board_config from.. import serial_redirection from. import log_to_stderr def _get_node(board_cfg): if board_cfg.linux_on_class is not None: return", "label": 1}, {"snippet_id": 18061, "code": ".format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset.txt', user=user), html=flask.render_template('email/reset.html', user=user), ) email.send_email(email_msg", "label": 0}, {"snippet_id": 55470, "code": "\t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) \tdef utime(self,times): \t\treturn os.utime(self.path", "label": 0}, {"snippet_id": 42104, "code": "<600 documents at one time', response, 'Note to limit upload to <600 should be on the page') def test_extracted_count(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content", "label": 0}, {"snippet_id": 28073, "code": " Args: exception_message(str): A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines", "label": 0}, {"snippet_id": 36730, "code": "=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id", "label": 0}, {"snippet_id": 1800, "code": " like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. ", "label": 0}, {"snippet_id": 40689, "code": ".get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines", "label": 1}, {"snippet_id": 83501, "code": " settings from django.core.cache import cache from django.template import RequestContext from django.core.urlresolvers import reverse from django.http import(Http404, HttpResponseRedirect, HttpResponseNotAllowed", "label": 0}, {"snippet_id": 66891, "code": "'tm_report']=tm.getReportFromDomain(domain) context['bls']=blacklist.objects.filter(Q(domain=domain)|Q(url__contains=domain)) count=context['bls'].count() if count > 0: context['bls_count']=count context[", "label": 0}, {"snippet_id": 6332, "code": "-trusted issuer: %s' % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid audience') return False if 'azp", "label": 0}, {"snippet_id": 1494, "code": "(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content", "label": 0}, {"snippet_id": 38564, "code": "=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE", "label": 0}, {"snippet_id": 47289, "code": "=True)) extracted =Count('datagroup__datadocument__extractedtext') ds_list =DataSource.objects.annotate(registered=registered).annotate(uploaded=uploaded, extracted=extracted) out=zip(ds_list, frm_list", "label": 0}, {"snippet_id": 49680, "code": "'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if('email' in session) or('social' in session): if 'email' in", "label": 0}, {"snippet_id": 61686, "code": "=False) -> ScanResult: \"\"\" Scan a single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will", "label": 1}, {"snippet_id": 42465, "code": "='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects.extext.extraction_script", "label": 0}, {"snippet_id": 4535, "code": "/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected,", "label": 0}, {"snippet_id": 60214, "code": " \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name in a thread\"", "label": 0}, {"snippet_id": 43337, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value') true_cas=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects", "label": 0}, {"snippet_id": 20733, "code": ".services.include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self._node_ip_address=ray_params", "label": 0}, {"snippet_id": 57748, "code": " onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=", "label": 1}, {"snippet_id": 44061, "code": "=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click", "label": 0}, {"snippet_id": 3256, "code": ".session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET", "label": 0}, {"snippet_id": 31410, "code": " 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'gitmate.disable_csrf.DisableCSRF', ] ROOT_URLCONF='gitmate.urls' TEMPLATES=[ { 'BACKEND", "label": 0}, {"snippet_id": 38554, "code": " ``organization`` ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField", "label": 0}, {"snippet_id": 46038, "code": "), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context", "label": 0}, {"snippet_id": 40690, "code": ".get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0]", "label": 1}, {"snippet_id": 40546, "code": " self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string", "label": 0}, {"snippet_id": 38548, "code": " type is among the types allowed by the group type ``organization`` ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True", "label": 0}, {"snippet_id": 65351, "code": "(self): self.set_titlebar(self.headerbar) def get_headerbar(self): return self.headerbar def custom_css(self): screen=Gdk.Screen.get_default() css_provider=Gtk.CssProvider() css_provider_resource=Gio.File", "label": 0}, {"snippet_id": 3510, "code": "(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected", "label": 0}, {"snippet_id": 57278, "code": " available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid", "label": 0}, {"snippet_id": 20200, "code": "\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message", "label": 0}, {"snippet_id": 4667, "code": " path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 48811, "code": ".objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render", "label": 0}, {"snippet_id": 60299, "code": "=page_size: max_returned_rows +=1 if max_returned_rows and truncate: rows=cursor.fetchmany(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall(", "label": 0}, {"snippet_id": 45998, "code": "('page') paginator=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context={ 'datagroup' : dg, 'documents' : paginator.page", "label": 0}, {"snippet_id": 18541, "code": ": \t\t\tself.render(\"signup.html\",error=\"Your email doesn't look like a valid email\") \t\t\treturn \t\tdoes_it_exist=self.check_if_exists() \t\tif(does_it_exist!=None): \t\t\tself.render(\"signup.html\",error=does_it_exist", "label": 0}, {"snippet_id": 33793, "code": " response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc.raw_chem_name, rc.sid if rc.sid", "label": 1}, {"snippet_id": 54246, "code": " page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 \"\"\" ** JSON response routes ** \"", "label": 0}, {"snippet_id": 45359, "code": " bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\" or \"None\", it's worth noting that if when making the call to here from", "label": 0}, {"snippet_id": 41589, "code": " import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username='Karyn', password", "label": 0}, {"snippet_id": 33400, "code": ": dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n", "label": 0}, {"snippet_id": 65085, "code": "% i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed", "label": 0}, {"snippet_id": 73789, "code": "'position_sort'] except KeyError: return '-created' def change_positions_sort_method(request, sort_by): if request.POST.get(\"sort-created\"): return '-created' elif request.POST.get(\"sort-closed\"): return '", "label": 0}, {"snippet_id": 23068, "code": " \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str): The message that will be printed in the background", "label": 0}, {"snippet_id": 69762, "code": "-user-requirements-txt-url', help='URL to a requirements.txt file that should be installed in the user enviornment' ) argparser.add_argument( '--plugin', nargs='*', help='Plugin pip-specs to install' )", "label": 0}, {"snippet_id": 43116, "code": "/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 0) response=self.client", "label": 0}, {"snippet_id": 30324, "code": "'application/json' return response if result['issued_to'] !=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app's.\" response", "label": 0}, {"snippet_id": 55081, "code": ".path)) \tdef basename(self): \t\treturn os.path.basename(self.path) \tdef dirname(self): \t\treturn FSPath(os.path.dirname(self.path)) \tdef exists(self): \t\treturn FSPath(os.path.exists(self.path)) \tdef lexists", "label": 0}, {"snippet_id": 80457, "code": " Exception as err: self.matisse: Matisse=None raise err @pyqtSlot() def clean_up(self): self.status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self", "label": 0}, {"snippet_id": 54304, "code": "=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON ", "label": 0}, {"snippet_id": 34658, "code": " data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"", "label": 0}, {"snippet_id": 35437, "code": "=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect('link_product_list', pk=doc.data_group.pk) else: pass return", "label": 0}, {"snippet_id": 63264, "code": ", config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client", "label": 0}, {"snippet_id": 51906, "code": "[\"new_user\"]=True flash(\"Account created!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login", "label": 0}, {"snippet_id": 66554, "code": "/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application/x-iwork-keynote-sffkey\") filechooser_opening_dialog.add_filter", "label": 0}, {"snippet_id": 60259, "code": ": conn=sqlite3.connect( \"file:{}?immutable=1\".format(info[\"file\"]), uri=True, check_same_thread=False, ) self.prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms", "label": 0}, {"snippet_id": 2102, "code": " item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len", "label": 0}, {"snippet_id": 38799, "code": ", default=1) downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None, null=True, blank=True) data_source=models.ForeignKey('DataSource',", "label": 0}, {"snippet_id": 41271, "code": "' for et in ExtractedText.objects.all(): for ex_child in et.fetch_extracted_records(): child_model=ex_child.__class__ self.assertEqual(et.pk, child_model.objects.get(pk=ex_child.pk).extracted_text.pk, ", "label": 1}, {"snippet_id": 81529, "code": " new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event existence: '", "label": 0}, {"snippet_id": 2875, "code": " get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ", "label": 0}, {"snippet_id": 57347, "code": "/transaction_edit.html', extra_context) class TransactionList(PaginationMixin, ListView): model=Transaction context_object_name='transactions' paginate_by=8 queryset=None header=gettext_lazy('Transactions') request", "label": 0}, {"snippet_id": 37909, "code": " DataDocument The parent DataDocument extra: integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included exclude: list which fields to leave", "label": 0}, {"snippet_id": 31203, "code": "(os.environ.get('DJANGO_DEBUG', 'False')) if DEBUG and not literal_eval(os.environ.get('FORCE_CELERY', 'False')): CELERY_ALWAYS_EAGER=True CELERY_EAGER_PROPAGATES_EXCEPTIONS=True HOOK_DOMAIN=os.environ", "label": 0}, {"snippet_id": 46269, "code": "=ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean() good_records.append((d,ext,record))", "label": 0}, {"snippet_id": 81461, "code": " _handle_weekly_event_repetition(self, old_repeating_event): _logger.info('Handling weekly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00') present=datetime.now", "label": 0}, {"snippet_id": 72188, "code": "{export_id}'}, 2.0) def set(self, cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id", "label": 0}, {"snippet_id": 82796, "code": "\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts", "label": 0}, {"snippet_id": 67412, "code": ", timezone, timedelta class EventListView(PaginationMixin, ListView): model=Event template_name='threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs)", "label": 0}, {"snippet_id": 31147, "code": "('showGrudge', grudget_id=grudget_id)) else: return render_template('deletegrudge.html', grudget_id=grudget_id, grudge=grudgeToDelete) if __name__=='__main__': app.secret_key='super_secret_key' app.debug", "label": 0}, {"snippet_id": 47190, "code": ",'raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk=pk) et=ExtractedText.objects.filter(data_document__data_group=dg).first() if et: dg_name", "label": 0}, {"snippet_id": 35133, "code": " model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index", "label": 0}, {"snippet_id": 82820, "code": " hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status", "label": 0}, {"snippet_id": 28702, "code": "=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger.propagate=False def try_update_handler(new_stream): global _default_handler", "label": 1}, {"snippet_id": 33668, "code": ".assertEqual(1, ethylparaben_stats['products_n'], 'There should now be 1 product \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data", "label": 0}, {"snippet_id": 22199, "code": " redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False,", "label": 1}, {"snippet_id": 7102, "code": " You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an", "label": 0}, {"snippet_id": 16164, "code": "\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num, template): \"\"\"Just render the specified template with the", "label": 0}, {"snippet_id": 1912, "code": "=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode)", "label": 0}, {"snippet_id": 25131, "code": ".compute_task_id(object_id).binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash", "label": 0}, {"snippet_id": 19428, "code": ".redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"", "label": 1}, {"snippet_id": 63170, "code": "}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login', data=data", "label": 0}, {"snippet_id": 44845, "code": " views from dashboard.models import * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self):", "label": 1}, {"snippet_id": 62216, "code": " validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore(page", "label": 0}, {"snippet_id": 15475, "code": "'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'delta': entry.delta.data }) return result def get_run_form():", "label": 0}, {"snippet_id": 23059, "code": "(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The", "label": 0}, {"snippet_id": 62459, "code": " user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating", "label": 0}, {"snippet_id": 2381, "code": "\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans", "label": 0}, {"snippet_id": 38426, "code": " reverse from django.utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): \"\"\" A DataDocument object is a single", "label": 0}, {"snippet_id": 44331, "code": ") self.assertTrue(submit.is_enabled(), \"Button should be enabled\") def test_field_exclusion(self): doc=self.objects.doc qa_url=self.live_server_url +f'/qa/extractedtext/{doc.pk}/' self.browser.get(qa_url", "label": 0}, {"snippet_id": 29506, "code": " @auth.route('/signup', methods=['GET', 'POST']) def signup(): form=RegistrationForm() if request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos", "label": 0}, {"snippet_id": 29764, "code": ".session.add(image) tags=[Tag.query.get(1)] added_tags=[get_or_create_tag(db.session, tag)[0] for tag in form.tags.data if tag] tags.extend(added_tags) post=Post(title=fname, created=datetime.utcnow(), image", "label": 0}, {"snippet_id": 79900, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result:", "label": 0}, {"snippet_id": 59997, "code": "?immutable=1\".format(path), uri=True ) as conn: self.prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn", "label": 0}, {"snippet_id": 4560, "code": "=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects", "label": 0}, {"snippet_id": 8100, "code": " context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"", "label": 0}, {"snippet_id": 47468, "code": " if form.has_changed(): form.save() return redirect('data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required", "label": 0}, {"snippet_id": 69671, "code": "(USER_ENV_PREFIX, conda_packages) pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages()))) if pip_packages: logger.info('Installing{} pip packages collected from plugins:{}'.format", "label": 0}, {"snippet_id": 69747, "code": "=argparse.ArgumentParser() argparser.add_argument( '--admin', nargs='*', help='List of usernames set to be admin' ) argparser.add_argument( '--user-requirements-txt-url', help='URL to a requirements.txt", "label": 0}, {"snippet_id": 61092, "code": "/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname", "label": 1}, {"snippet_id": 10297, "code": "'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, ", "label": 0}, {"snippet_id": 49629, "code": "(request.form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname", "label": 0}, {"snippet_id": 50215, "code": "/') flash('Email already in use') return redirect('/signup') @app.route(\"/login\") def login(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"login", "label": 0}, {"snippet_id": 10235, "code": "'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':", "label": 0}, {"snippet_id": 11343, "code": "(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"", "label": 0}, {"snippet_id": 45880, "code": " render_to_csv_response from pathlib import Path from django import forms from django.urls import reverse from django.conf import settings from django.core.files import File from django.core.exceptions import", "label": 1}, {"snippet_id": 11090, "code": " platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string':", "label": 0}, {"snippet_id": 71614, "code": ".session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req", "label": 0}, {"snippet_id": 48255, "code": "].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count(", "label": 1}, {"snippet_id": 81179, "code": ".request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type", "label": 0}, {"snippet_id": 33922, "code": ") def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText", "label": 0}, {"snippet_id": 78204, "code": "'Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users", "label": 0}, {"snippet_id": 36915, "code": ".annotate( puc_assigned_month=(Trunc('created_at', 'month', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month'", "label": 0}, {"snippet_id": 6940, "code": "(url_for('auth.login')) return render_template('auth/reset_password.html', form=form) @auth.route('/reset/<token>', methods=['GET', 'POST']) def password_reset(token): if not current_user.is_anonymous:", "label": 0}, {"snippet_id": 68469, "code": ".get_context_data(**kwargs) return context def get_queryset(self, request): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('tweet')) return query def get(self, request): self.object_list=self", "label": 0}, {"snippet_id": 27364, "code": "(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self,", "label": 0}, {"snippet_id": 30243, "code": ": response=make_response( json.dumps('Failed to upgrade the authorization code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token url=('https", "label": 0}, {"snippet_id": 24684, "code": "-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for", "label": 1}, {"snippet_id": 25896, "code": ".exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def start_redis(self):", "label": 0}, {"snippet_id": 46724, "code": "': errors.append([count,\"Filename can't be empty!\"]) continue if len(line['filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, ", "label": 0}, {"snippet_id": 53529, "code": ".filename if filename.startswith(project.source_directory): filename=filename[len(project.source_directory) +1:] location=stack_frame.name if location=='<module>': location=None return dict( filename=filename,", "label": 0}, {"snippet_id": 51879, "code": "') user_record=User.query.filter(User.email==email).first() if user_record is None: new_user=q.make_user(email, pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login", "label": 0}, {"snippet_id": 42550, "code": ".tests.loader import fixtures_standard class FacetedSearchTest(TestCase): fixtures=fixtures_standard def setUp(self): self.c=Client() def test_faceted_search_excludes_chemicals(self): response=self.c.get('", "label": 0}, {"snippet_id": 69117, "code": " exist_ok=True) remove_chp() systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units', 'jupyterhub.service')) as f: hub_unit_template=f.read() with open(os.path.join(HERE, 'systemd-units', ", "label": 0}, {"snippet_id": 42661, "code": " django.test import Client from dashboard.tests.loader import * from django.test import TestCase, override_settings, RequestFactory from dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical", "label": 0}, {"snippet_id": 69378, "code": ", 'jupyterlab==0.35.3', 'nteract-on-jupyter==1.9.12', 'nbgitpuller==0.6.1', 'nbresuse==0.3.0', 'ipywidgets==7.4.2', 'tornado<6.0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX", "label": 1}, {"snippet_id": 81173, "code": "', '=', 'bc_montly'), ('subscription_partner', '=', partner.id)]) bc_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner", "label": 0}, {"snippet_id": 1601, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not", "label": 0}, {"snippet_id": 27470, "code": " not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\")", "label": 0}, {"snippet_id": 80043, "code": " not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict", "label": 0}, {"snippet_id": 16183, "code": "=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) context={'tournament': t, 'round': r} return render(request, 'rounds/%s.html' % template, context) @permission_required", "label": 0}, {"snippet_id": 77872, "code": " organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user", "label": 0}, {"snippet_id": 57178, "code": ".description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transactions_open') transaction.delete() next_page=request.POST.get('next', default_next)", "label": 0}, {"snippet_id": 56604, "code": " class AASATestCase(TestCase): def test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa() \\ .then_response_should_be_json( '", "label": 0}, {"snippet_id": 21044, "code": ".PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler", "label": 0}, {"snippet_id": 26745, "code": "\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process))", "label": 0}, {"snippet_id": 7711, "code": "/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to", "label": 0}, {"snippet_id": 48178, "code": " import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget): def tag_list(self, tags", "label": 1}, {"snippet_id": 18567, "code": "(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"\" SignInHandler(): Class that handles /signin \"\"\" class SignInHandler(tornado.web.RequestHandler)", "label": 1}, {"snippet_id": 42241, "code": ").content.decode('utf8') self.assertIn('<th>Product</th>', response, 'Data Group should have Product column.') fu=GroupType.objects.create(title='Functional use') self.objects.dg.group_type=fu self.objects", "label": 0}, {"snippet_id": 3988, "code": "\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http", "label": 0}, {"snippet_id": 49633, "code": "() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route", "label": 0}, {"snippet_id": 53354, "code": ".split(os.sep) ) ) def exec_test(): step.test_locals=dict() step.test_locals.update(module.__dict__) exec(code, step.test_locals) try: set_executing(True) threads.abort_thread() if environ.modes.has(environ", "label": 0}, {"snippet_id": 79705, "code": " the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype", "label": 0}, {"snippet_id": 25074, "code": " Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(", "label": 0}, {"snippet_id": 17238, "code": ".items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean() except ValidationError as e: f.add_error", "label": 0}, {"snippet_id": 54956, "code": " \t\t\tprint str(item.code)+\", \"+str(book_edition)+\", \"+str(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups) \t\t \t\t def process_hwml(): \thp=HWML_processor() \thp.process_hwml() def detect_cheating", "label": 1}, {"snippet_id": 52899, "code": ".attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update(group_channel, data): Group(group_channel", "label": 0}, {"snippet_id": 60718, "code": " is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\"", "label": 0}, {"snippet_id": 3240, "code": "(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request", "label": 0}, {"snippet_id": 34697, "code": "').\\ annotate(sid=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull", "label": 0}, {"snippet_id": 62042, "code": " return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if page.encoding is None: return False if page.encoding.upper() in", "label": 0}, {"snippet_id": 63927, "code": ".config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info('Redirecting the user to the IdP for ' +action) return redirect(get_location", "label": 0}, {"snippet_id": 39354, "code": ", 'raw_cas', 'raw_min_comp', 'raw_central_comp', 'raw_max_comp', 'unit_type', 'weight_fraction_type', 'report_funcuse', 'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text", "label": 0}, {"snippet_id": 75434, "code": "(Candidate, id=candidate_id) if request.method=='POST': form=GradschoolChecklistForm(request.POST) if form.is_valid(): form.save_data(candidate) return HttpResponseRedirect(reverse('staff_home')) else:", "label": 0}, {"snippet_id": 32954, "code": " dashboard.models import * from django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm):", "label": 0}, {"snippet_id": 72222, "code": " cherrypy.HTTPError(404) if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'", "label": 0}, {"snippet_id": 10423, "code": " django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps.commerce.utils import EcommerceService", "label": 0}, {"snippet_id": 16960, "code": ".power data.append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(the_round=r, initial=data) context={'tournament': t, ", "label": 0}, {"snippet_id": 68034, "code": " request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt", "label": 0}, {"snippet_id": 1049, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 55275, "code": ",mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self", "label": 0}, {"snippet_id": 84263, "code": "=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private", "label": 0}, {"snippet_id": 46549, "code": " ingredient.full_clean() except ValidationError as e: context['clean_comp_err'][i+1]=e.message_dict good_records.append(ingredient) if context['clean_comp_err']: context['clean_comp_data_form'].collapsed", "label": 0}, {"snippet_id": 35652, "code": "(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product", "label": 1}, {"snippet_id": 81159, "code": "'subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner', ", "label": 0}, {"snippet_id": 67370, "code": "['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count", "label": 0}, {"snippet_id": 23257, "code": ".isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def", "label": 0}, {"snippet_id": 82203, "code": ": context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count() print(urls_without_category) queryset=Category.objects.all() for cat in queryset", "label": 0}, {"snippet_id": 51422, "code": ": return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__", "label": 0}, {"snippet_id": 22801, "code": " event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute", "label": 0}, {"snippet_id": 71199, "code": ") else: session=models.Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class(self): try: return utils.import_class(self._config['user_model", "label": 0}, {"snippet_id": 26181, "code": ".all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"\"\"Start a worker process.\"\"\" raise NotImplementedError def start_monitor(self): \"\"\"Start the monitor", "label": 0}, {"snippet_id": 15485, "code": ".number_of_days.data, 'delta': entry.delta.data }) return result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form, commands): def", "label": 0}, {"snippet_id": 21704, "code": ". \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process", "label": 0}, {"snippet_id": 53463, "code": "', **render_data ) ) def get_stack_frames(): \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy()", "label": 0}, {"snippet_id": 81423, "code": "=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00')", "label": 1}, {"snippet_id": 80930, "code": "\n import logging from odoo import fields, http, _ from odoo.exceptions import ValidationError, UserError _logger=logging.getLogger(__name__) class WebsiteEventController(http.Controller): @http.route([", "label": 0}, {"snippet_id": 37630, "code": "'tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num'] widgets={ 'data_document': forms.HiddenInput(), 'extraction_script':", "label": 0}, {"snippet_id": 45395, "code": " checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv", "label": 0}, {"snippet_id": 3952, "code": " test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username':", "label": 0}, {"snippet_id": 48880, "code": " p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment", "label": 0}, {"snippet_id": 6345, "code": ".client_id not in id_token['aud']: logger.error('We are not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple audiences and not authorized party') return False else: if id_token", "label": 0}, {"snippet_id": 60721, "code": " is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name", "label": 0}, {"snippet_id": 19248, "code": ".profile( \"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( ", "label": 0}, {"snippet_id": 82754, "code": " info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with pid ", "label": 0}, {"snippet_id": 36835, "code": " document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type]", "label": 0}, {"snippet_id": 62842, "code": " of the desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client() as c:", "label": 0}, {"snippet_id": 4310, "code": ", }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response", "label": 0}, {"snippet_id": 51744, "code": ": self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count=0 def updateScope(self,scope): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url", "label": 0}, {"snippet_id": 65069, "code": " BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) obj=None if not obj: raise ValueError('Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return", "label": 0}, {"snippet_id": 74006, "code": "-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models -helper classes -access checks -redirect handlers and should not define: -templates", "label": 0}, {"snippet_id": 8452, "code": " request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest(", "label": 0}, {"snippet_id": 60394, "code": " FileSystemLoader(default_templates)}, delimiter=\":\" ), ] ) self.jinja_env=Environment(loader=template_loader, autoescape=True) self.jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[", "label": 0}, {"snippet_id": 51692, "code": " return scope, script def genSI(endpoint, params, method): scope={ 'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript", "label": 0}, {"snippet_id": 55528, "code": " \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname(", "label": 0}, {"snippet_id": 65437, "code": " \"history\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window", "label": 0}, {"snippet_id": 30764, "code": " editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget=editedGrudget) @app.route('/grudget/<int:grudget_id>/delete/', methods=[", "label": 0}, {"snippet_id": 44076, "code": "\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit\") detail_url=self.live_server_url +f", "label": 0}, {"snippet_id": 31177, "code": ", see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ", "label": 0}, {"snippet_id": 49889, "code": " if 'currentFile' in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email", "label": 0}, {"snippet_id": 82807, "code": " :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write", "label": 0}, {"snippet_id": 59940, "code": ",{}).get(\"tables\") def inspect(self): \" Inspect the database and return a dictionary of table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is", "label": 0}, {"snippet_id": 44554, "code": " document_type=dt, filename='example.pdf') p=Product.objects.create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family", "label": 0}, {"snippet_id": 15142, "code": "()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeInputNewValue(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs", "label": 0}, {"snippet_id": 8238, "code": " pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string):", "label": 0}, {"snippet_id": 83687, "code": " message_template is None: message_template=('Possible edit conflict:' ' another user started editing this article at %s') self.message_template=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60", "label": 0}, {"snippet_id": 67547, "code": " range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(publish_timestamp__gte=from_date, publish_timestamp__lte=to_date).count() data.append", "label": 0}, {"snippet_id": 79073, "code": ") session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title", "label": 1}, {"snippet_id": 49628, "code": " f.write(request.form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace", "label": 0}, {"snippet_id": 50108, "code": "' in session: email=session['email'] elif 'social' in session: email=session['social'] filename=session['currentFile'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath", "label": 0}, {"snippet_id": 66085, "code": "=NotImplemented window=NotImplemented database_filepath=NotImplemented database_manager=NotImplemented unlock_database_stack_box=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented", "label": 0}, {"snippet_id": 13170, "code": " reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth", "label": 0}, {"snippet_id": 82455, "code": "'category-delete-view'), re_path(r'^(?P<pk>(\\d)+)/reports/$', ClickTrackingDetailView.as_view(), name='clicktracking-detail-view'), re_path(r'^(?P<pk>(\\d)+)/$', link_redirect, name='url-redirect-view')", "label": 1}, {"snippet_id": 65252, "code": " class MainWindow(Gtk.ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog", "label": 0}, {"snippet_id": 7471, "code": ".is_(None), Exam.exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam, key): search_kwargs[key]=request.args.get(key) exams=exams.filter_by(", "label": 0}, {"snippet_id": 78238, "code": " org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('------------------------", "label": 0}, {"snippet_id": 63985, "code": " user authenticated by the IdP') user=authenticate(current_app, session_info) if user is None: current_app.logger.error('Could not find the user identified by the IdP') raise Forbidden(\"Access not authorized", "label": 0}, {"snippet_id": 5331, "code": " inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username'", "label": 0}, {"snippet_id": 69861, "code": ", ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views", "label": 0}, {"snippet_id": 75179, "code": ": form, 'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app/candidate_metadata.html', context) @login_required def candidate_committee(request, candidate_id): from.forms import CommitteeMemberPersonForm", "label": 0}, {"snippet_id": 49024, "code": ") def product_delete(request, pk): p=Product.objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html", "label": 0}, {"snippet_id": 62407, "code": " back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn", "label": 0}, {"snippet_id": 67451, "code": "['tags']=Tag.objects.filter(id__in=taglist) search_form=EventSearchForm(self.request.GET) context['search_form']=search_form context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self", "label": 0}, {"snippet_id": 9895, "code": " descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json", "label": 0}, {"snippet_id": 42476, "code": ".extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects.extext.extraction_script.pk response=self.client.get(f'/qa/extractionscript/{pk}/') self.assertEqual(response.status_code,200)", "label": 0}, {"snippet_id": 83845, "code": ".order_by('title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group new_article=ArticleClass(title='NewArticle', content_type=get_ct", "label": 0}, {"snippet_id": 66469, "code": ") elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") keyfile_chooser_dialog.close() def on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button", "label": 0}, {"snippet_id": 20671, "code": " the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes", "label": 0}, {"snippet_id": 20263, "code": "[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"] data", "label": 0}, {"snippet_id": 11500, "code": " page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request))", "label": 0}, {"snippet_id": 48596, "code": " template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'", "label": 0}, {"snippet_id": 67045, "code": "() return self.render_to_response(context) class DetailView(TemplateView): template_name='filehash/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context[", "label": 0}, {"snippet_id": 72861, "code": " InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session['position_id']) request.user.positions.add(position) return redirect", "label": 1}, {"snippet_id": 19833, "code": ") self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes", "label": 0}, {"snippet_id": 77695, "code": " resource['id'], \"size\": size, \"name\": name, \"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application", "label": 1}, {"snippet_id": 3241, "code": ".success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET", "label": 0}, {"snippet_id": 80613, "code": " set_bifi_approx_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Approx. Wavelength', label='Wavelength(nm): ', value=self.matisse.query('MOTBI:WL", "label": 0}, {"snippet_id": 26164, "code": " stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET", "label": 0}, {"snippet_id": 66963, "code": " import HttpResponse, HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.vt import VT", "label": 1}, {"snippet_id": 60534, "code": "\", ) app.add_route( JsonDataView.as_view(self, \"config.json\", lambda: self._config), r\"/-/config<as_format:(\\.json)?$>\", ) app.add_route( DatabaseDownload.as_view(self), r\"/<db_name:[^/]+?><as_db:(\\.db", "label": 0}, {"snippet_id": 43709, "code": " field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click", "label": 0}, {"snippet_id": 52778, "code": " 'file_name': message.attachment, 'file_link': message.attachment.path } \"\"\" model=Message serializer_class=MessageSerializer permission_classes=[IsAuthenticated,] def create(self, request, *args, **kwargs", "label": 0}, {"snippet_id": 76909, "code": " **image.info) os.chmod(t_path, 777) except IOError, e: logger.error(\"Failed to save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the", "label": 0}, {"snippet_id": 41857, "code": ".assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self", "label": 0}, {"snippet_id": 62509, "code": " import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb.user import User from eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing", "label": 0}, {"snippet_id": 26053, "code": "._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self._ray_params.object_store_memory, plasma_directory=self._ray_params.plasma_directory, huge_pages=self._ray_params", "label": 0}, {"snippet_id": 30436, "code": "'picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are now logged in as %s\" % login_session['username", "label": 0}, {"snippet_id": 63796, "code": " eduid_common.authn.eduid_saml2 import get_authn_request, get_authn_response from eduid_common.authn.eduid_saml2 import authenticate from eduid_common.authn.cache import IdentityCache, StateCache from eduid_webapp", "label": 0}, {"snippet_id": 29660, "code": " return render_template('gallery.html', posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int", "label": 1}, {"snippet_id": 60510, "code": ", \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"plugins.json\", self.plugins), r\"/-/plugins<as_format:(\\.json)?$>\", ) app.add_route(", "label": 0}, {"snippet_id": 13200, "code": "[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 54600, "code": "\t\t\tif homework_file.basename() !=\".DS_Store\": \t\t\t\t\tself.homeworks.append(parse(homework_file.path)) \t\t\texcept: \t\t\t\tprint \"parsing error in \"+homework_file.path \t\t\t\traise \t\tself.assignments=[] \t\tfor homework", "label": 0}, {"snippet_id": 10360, "code": " state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login or state.has_account", "label": 0}, {"snippet_id": 44803, "code": " self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\" try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type", "label": 0}, {"snippet_id": 43345, "code": "( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self", "label": 0}, {"snippet_id": 73074, "code": "=CreatePositionFormText.url pdf_text=CreatePositionFormText.browse_for_pdf url_text=CreatePositionFormText.link_to_job_description upload_text=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText.browse", "label": 0}, {"snippet_id": 48703, "code": "(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +", "label": 0}, {"snippet_id": 57547, "code": " 'transactions/transaction_pay.html', extra_context) def transactions_open(request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) filter_data={ 'closed", "label": 0}, {"snippet_id": 56414, "code": ".com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/p", "label": 0}, {"snippet_id": 28725, "code": " new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat", "label": 1}, {"snippet_id": 41316, "code": " objects ''' for doc in DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document=doc) if doc.data_group.group_type.code=='CP': self.assertEqual(type(extsub), ExtractedCPCat", "label": 0}, {"snippet_id": 45968, "code": ", pk, template_name='data_group/datagroup_detail.html'): dg=get_object_or_404(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset", "label": 0}, {"snippet_id": 69873, "code": "\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 51122, "code": "*args) def run(self, argv=None): self._context=BuildContext() options, args=self._optionParser.parse_args(argv) self._context.options=options self._context.args=args self._context.env=dict(os.environ) for", "label": 0}, {"snippet_id": 33549, "code": ", ethylparaben_stats['dds_n'], 'There should now be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"", "label": 0}, {"snippet_id": 5967, "code": ", scope=app.config['OIDC_SCOPES']) assert isinstance(self.flow, OAuth2WebServerFlow) self.cookie_serializer=TimedJSONWebSignatureSerializer( app.config['SECRET_KEY']) try: self.credentials_store=app.config", "label": 0}, {"snippet_id": 63167, "code": " token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post", "label": 0}, {"snippet_id": 5486, "code": "\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', ", "label": 0}, {"snippet_id": 44478, "code": "') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction Script', url='http://www", "label": 0}, {"snippet_id": 67520, "code": " keyword is not None: query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')", "label": 0}, {"snippet_id": 1717, "code": " mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context,", "label": 1}, {"snippet_id": 20877, "code": " servers.\"\"\" assert self._redis_address is None (self._redis_address, redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self", "label": 1}, {"snippet_id": 30807, "code": " return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to delete this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>", "label": 0}, {"snippet_id": 28285, "code": " Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the", "label": 0}, {"snippet_id": 12356, "code": " enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context", "label": 0}, {"snippet_id": 26084, "code": "]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True", "label": 0}, {"snippet_id": 26882, "code": " command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the", "label": 0}, {"snippet_id": 18559, "code": "\",error=does_it_exist) \t\t\treturn \t\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"", "label": 1}, {"snippet_id": 126, "code": ".lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path", "label": 1}, {"snippet_id": 59560, "code": ".page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path(filepath, name=filename", "label": 0}, {"snippet_id": 23570, "code": ". runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources", "label": 0}, {"snippet_id": 81326, "code": "(self): start_date=self.date_begin_located if start_date: self.fit_day_of_week=datetime.strptime(start_date, '%Y-%m-%d %H:%M:%S').strftime('%a') def get_attendee_list(self): attendee_list=str('') counter=1", "label": 0}, {"snippet_id": 34878, "code": " writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file", "label": 0}, {"snippet_id": 69611, "code": "'tljh') pm.add_hookspecs(hooks) pm.load_setuptools_entrypoints('tljh') return pm def run_plugin_actions(plugin_manager, plugins): \"\"\" Run installer hooks defined in plugins \"\"\" hook=plugin_manager.hook", "label": 0}, {"snippet_id": 59610, "code": ", table=None, fallback=True): \"\"\" Looks up metadata, cascading backwards from specified level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot", "label": 0}, {"snippet_id": 1214, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 21301, "code": " raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully.", "label": 0}, {"snippet_id": 62440, "code": " successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info", "label": 0}, {"snippet_id": 27945, "code": " a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be", "label": 0}, {"snippet_id": 34467, "code": "\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id", "label": 0}, {"snippet_id": 61890, "code": "(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics(page): \"\"\"Scan", "label": 0}, {"snippet_id": 1839, "code": " continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath:", "label": 1}, {"snippet_id": 38602, "code": "=False) document_type=models.ForeignKey(DocumentType, on_delete=models.PROTECT, null=True, blank=True) organization=models.CharField(max_length=255, blank=True) note=models.TextField(blank=True, null=True", "label": 0}, {"snippet_id": 55406, "code": " \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance(other,FSPath)", "label": 0}, {"snippet_id": 84719, "code": "['POST']) @login_required def stop_observing_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki", "label": 0}, {"snippet_id": 60123, "code": "]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\", \"FTS4\", \"FTS3\"): try: conn.execute( \"CREATE VIRTUAL TABLE v{fts} USING{fts}(data)\".format(fts=fts) ) fts_versions.append(fts) except", "label": 0}, {"snippet_id": 26416, "code": " process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process", "label": 0}, {"snippet_id": 46646, "code": "'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup=form.save() info=[x.decode('ascii'", "label": 0}, {"snippet_id": 57624, "code": " context_data(dict): data to be passed to templates. from_email(str): sender's email. to_email(list): list of addresses to send an email to. template_subject(str): path to a subject template, e.g. 'ctms", "label": 0}, {"snippet_id": 3895, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 65478, "code": ".Notebook() self.container.set_border_width(0) self.container.set_scrollable(True) self.container.set_show_border(False) self.container.connect(\"switch-page\", self.on_tab_switch) self.add(self.container", "label": 0}, {"snippet_id": 71231, "code": " None and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id)) if self.user is None: pass else: self.user=None return self def _load_user_by_profile(self, profile)", "label": 0}, {"snippet_id": 28053, "code": " by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message", "label": 0}, {"snippet_id": 10272, "code": " }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link", "label": 0}, {"snippet_id": 4904, "code": ".client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location", "label": 0}, {"snippet_id": 26204, "code": ".start_monitor( self._redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, autoscaling_config=self._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password", "label": 0}, {"snippet_id": 3302, "code": " OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args,", "label": 0}, {"snippet_id": 33455, "code": "=ProductDocument.objects.create(document=dd, product=p) pd.save() dd.refresh_from_db() pid=dd.products.first().pk puc=PUC.objects.get(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get", "label": 0}, {"snippet_id": 14268, "code": "=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user", "label": 0}, {"snippet_id": 25479, "code": "(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument(", "label": 0}, {"snippet_id": 56063, "code": " link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute() preview_content", "label": 0}, {"snippet_id": 4273, "code": "'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path", "label": 0}, {"snippet_id": 45991, "code": ".filter(document__in=docs) page=request.GET.get('page') paginator=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context=", "label": 0}, {"snippet_id": 11276, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_", "label": 0}, {"snippet_id": 29668, "code": ".route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1", "label": 1}, {"snippet_id": 2305, "code": " here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 50483, "code": "(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"APPDATA\"]+\"\\\\openhome-build", "label": 0}, {"snippet_id": 69486, "code": " continue raise except URLError as e: if isinstance(e.reason, ConnectionRefusedError): time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format(times)) def", "label": 0}, {"snippet_id": 8847, "code": ":{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link", "label": 0}, {"snippet_id": 24988, "code": "\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData", "label": 0}, {"snippet_id": 38993, "code": "(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath", "label": 0}, {"snippet_id": 69579, "code": ".realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest) def", "label": 0}, {"snippet_id": 18329, "code": ": \t\t\terror=\"Email exists already\" \t\treturn error \t\"\"\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document", "label": 1}, {"snippet_id": 41364, "code": " models ''' for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd, EXTRA) extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance", "label": 1}, {"snippet_id": 25288, "code": " calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for", "label": 0}, {"snippet_id": 67205, "code": " from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit", "label": 0}, {"snippet_id": 81695, "code": " subscribe for event id: %s, name: %s', event.event_type_id.name, event.name) can_subscribe=True return can_subscribe def can_unsubscribe(self, event): event_start=datetime.strptime(event.date_begin_located", "label": 0}, {"snippet_id": 9347, "code": "('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers", "label": 0}, {"snippet_id": 47301, "code": "=registered).annotate(uploaded=uploaded, extracted=extracted) out=zip(ds_list, frm_list) if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or", "label": 0}, {"snippet_id": 18492, "code": "=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$', self.username)==None): \t\t\tself.render", "label": 0}, {"snippet_id": 42669, "code": " TestCase, override_settings, RequestFactory from dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical, QAGroup from django.db.models import Count @override_settings(ALLOWED_HOSTS", "label": 0}, {"snippet_id": 7271, "code": " flask_login import current_user from qsystem import db class OfficeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code", "label": 0}, {"snippet_id": 64177, "code": " location}).data else: abort(500) headers_tuple=loresponse[1]['headers'] location=headers_tuple[0][1] current_app.logger.info('Redirecting to{!r} to continue the logout process ' 'for user{!r}'.format(location", "label": 0}, {"snippet_id": 40451, "code": " Taxonomy(CommonInfo): title=models.CharField(max_length=100, blank=False, null=False) description=models.TextField(null=True, blank=True) parent=models.ForeignKey('Taxonomy', on_delete=models.CASCADE,", "label": 1}, {"snippet_id": 53888, "code": "(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None def clear(self) -> 'Report': \"\"\" Clear all user", "label": 0}, {"snippet_id": 47046, "code": "(request, pk): columnlist=['filename','title','document_type','url','organization'] dg=DataGroup.objects.filter(pk=pk).first() if dg: columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id", "label": 0}, {"snippet_id": 15101, "code": "[validators.required()], choices=[]) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators", "label": 0}, {"snippet_id": 15790, "code": ") commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/remove", "label": 0}, {"snippet_id": 68235, "code": " template_name='twitter/index.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) search_form=SearchForm(self.request.GET) context", "label": 0}, {"snippet_id": 20912, "code": "._ray_params.redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER]=( process_infos) def start_log_monitor(self):", "label": 0}, {"snippet_id": 52917, "code": "\nfrom django.conf.urls import url from realpal.apps.chat.views import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'", "label": 1}, {"snippet_id": 79134, "code": " datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id)", "label": 0}, {"snippet_id": 38816, "code": " data_source=models.ForeignKey('DataSource', on_delete=models.CASCADE) fs_id=models.UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models", "label": 0}, {"snippet_id": 63808, "code": " eduid_common.authn.cache import IdentityCache, StateCache from eduid_webapp.authn.acs_registry import get_action, schedule_action from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp.authn", "label": 1}, {"snippet_id": 76779, "code": " 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata", "label": 0}, {"snippet_id": 82103, "code": "'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w", "label": 0}, {"snippet_id": 23576, "code": " Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources", "label": 0}, {"snippet_id": 20341, "code": " this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self", "label": 0}, {"snippet_id": 83417, "code": "'content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self", "label": 0}, {"snippet_id": 39968, "code": " receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas", "label": 1}, {"snippet_id": 39882, "code": " blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script, on_delete=models.CASCADE, null=True, blank=True) rawchem_ptr=models.OneToOneField(related_name='ingredient', parent_link", "label": 0}, {"snippet_id": 21952, "code": " use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across", "label": 0}, {"snippet_id": 47937, "code": "] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file", "label": 0}, {"snippet_id": 45354, "code": " call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\" or \"None\", it's worth", "label": 0}, {"snippet_id": 28935, "code": " check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type", "label": 0}, {"snippet_id": 62987, "code": ") check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param session_id: the token for the session :type session_id: str :return: the cookie", "label": 0}, {"snippet_id": 32858, "code": " self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper", "label": 0}, {"snippet_id": 2491, "code": " def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just", "label": 0}, {"snippet_id": 29577, "code": " import join from datetime import datetime from flask import request, redirect, url_for, render_template, flash, g, current_app from werkzeug.utils import secure_filename from flask_security import login_required", "label": 1}, {"snippet_id": 18081, "code": ") def send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user': user } email_msg=email.EmailHolder", "label": 0}, {"snippet_id": 42853, "code": ".filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText.objects.filter(qa_group=None).filter(extraction_script=scr ).filter( data_document__data_group__group_type__code='CO').first(", "label": 0}, {"snippet_id": 51578, "code": ", 'build_condition':builder.build_condition, 'default_platform':default_platform, 'get_vsvars_environment':get_vsvars_environment, 'SshSession':SshSession, 'select_optional_steps':builder.select_optional_steps", "label": 0}, {"snippet_id": 19826, "code": "=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config", "label": 1}, {"snippet_id": 12531, "code": " Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override", "label": 0}, {"snippet_id": 82454, "code": " name='category-delete-view'), re_path(r'^(?P<pk>(\\d)+)/reports/$', ClickTrackingDetailView.as_view(), name='clicktracking-detail-view'), re_path(r'^(?P<pk>(\\d)+)/$', link_redirect, name='url-redirect-view", "label": 1}, {"snippet_id": 54508, "code": " auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return", "label": 0}, {"snippet_id": 50845, "code": "[arglist] return sum([flatten_string_list(x) for x in arglist],[]) def flatten_comma_list(arglist): return sum([s.split(\",\") for s in arglist],[]) def process_kwargs(func_name, kwarg_dict, defaults_dict", "label": 0}, {"snippet_id": 65036, "code": ".Name and left.func.id==name: left_valid=True if left_valid: if type(right) in[ast.Num, ast.Str, ast.Bytes, ast.NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True", "label": 0}, {"snippet_id": 32617, "code": ".second=second def execute(self, *args): self.first.execute(*args) self.first.wait() self.second.execute(*args) self.second.wait() class PipeNode(DoubleNode): ''' A node that forwards the output of one node", "label": 0}, {"snippet_id": 43932, "code": " from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * def", "label": 1}, {"snippet_id": 42580, "code": ") self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find/?q=avcat') self.assertContains(response, 'stub_1845') def test_group_type_facet", "label": 0}, {"snippet_id": 41934, "code": " should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds) ProductDocument.objects.create(document=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/", "label": 0}, {"snippet_id": 44814, "code": " ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type(ex).__name__, ex.args) long_note='A long QA note' * 200 note.qa_notes=long_note try: note.clean() except", "label": 0}, {"snippet_id": 74240, "code": "\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger", "label": 0}, {"snippet_id": 1829, "code": " newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 55016, "code": ": \tif os.path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized", "label": 0}, {"snippet_id": 35062, "code": " BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator from django.db.models", "label": 0}, {"snippet_id": 49065, "code": ".forms import * from dashboard.forms import ExtractedListPresenceTagForm from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail(request, pk): template_name", "label": 0}, {"snippet_id": 55551, "code": ".dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList", "label": 0}, {"snippet_id": 19250, "code": "\"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker", "label": 0}, {"snippet_id": 43280, "code": "): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser", "label": 1}, {"snippet_id": 25164, "code": "+task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys", "label": 0}, {"snippet_id": 50586, "code": " run with the given name per user per machine. While waiting for the lock, prints a notice to stdout every 30s. ''' if platform.system()=='Windows': return WindowsUserLock(name) return PosixUserLock(name", "label": 0}, {"snippet_id": 58571, "code": " preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist:", "label": 1}, {"snippet_id": 72677, "code": " generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def login_form(request):", "label": 0}, {"snippet_id": 50937, "code": ") f.buildstep.add_conditions(conditions) return f return decorator_func def build_step(self, name=None, optional=False, default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep", "label": 0}, {"snippet_id": 25608, "code": ".format_exc()) message=\"The monitor failed with the following error:\\n{}\".format( traceback_str) ray.utils.push_error_to_driver_through_redis( redis_client, ray_constants.MONITOR_DIED_ERROR, message) raise e", "label": 0}, {"snippet_id": 75699, "code": " ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall'): error_response=[{'text': 'FAST results', 'children':[{'id': '', 'text'", "label": 0}, {"snippet_id": 20118, "code": " in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append", "label": 0}, {"snippet_id": 82241, "code": " def get(self, request, pk, *args, **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request, 'category-detail-view.html',{'object'", "label": 0}, {"snippet_id": 31362, "code": "=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS=( 'social_core.backends.github.GithubOAuth2', 'social_core.backends.gitlab.GitLabOAuth2', 'social_core.backends.bitbucket.BitbucketOAuth", "label": 0}, {"snippet_id": 9022, "code": ".external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps", "label": 0}, {"snippet_id": 58551, "code": " accounts.models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage from core.common import onboarding from django.conf import settings class Command(BaseCommand", "label": 0}, {"snippet_id": 67768, "code": ".request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None", "label": 0}, {"snippet_id": 61888, "code": " validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics", "label": 0}, {"snippet_id": 69615, "code": "') return pm def run_plugin_actions(plugin_manager, plugins): \"\"\" Run installer hooks defined in plugins \"\"\" hook=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages", "label": 0}, {"snippet_id": 15804, "code": ") @app.route('/run/form/remove/<field>', methods=['POST']) def view_run_remove(field): run_form=get_run_form() run_form[field].pop_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands", "label": 0}, {"snippet_id": 65878, "code": " sender, widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container.page_num(db.parent_widget)==page_num: self.opened_databases.remove(db) self.container.remove_page", "label": 0}, {"snippet_id": 10200, "code": " Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try", "label": 0}, {"snippet_id": 9477, "code": ".objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else", "label": 0}, {"snippet_id": 77792, "code": " respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help=", "label": 0}, {"snippet_id": 65529, "code": " filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug", "label": 0}, {"snippet_id": 41071, "code": "['/datadocument/167497/']} response=self.client.post('/link_product_form/167497/', data=data) self.assertRedirects(response,'/datadocument/167497/') response=self.client.get(response.url) self.assertContains", "label": 0}, {"snippet_id": 58315, "code": " onboarding.CREATE_COURSELET:{ \"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" }, onboarding.NEXT_STEPS:{ \"html\": \"<p>next_steps</p>\", \"description", "label": 0}, {"snippet_id": 30246, "code": "( json.dumps('Failed to upgrade the authorization code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token url=('https://www.googleapis.com", "label": 0}, {"snippet_id": 80392, "code": ") self.lock_all_action.triggered.connect(self.toggle_lock_all) self.lock_slow_piezo_action.triggered.connect(self.toggle_slow_piezo_lock) self.lock_thin_etalon_action.triggered.connect(self.toggle_thin_etalon_lock", "label": 0}, {"snippet_id": 2541, "code": "\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 54766, "code": "\tprob_code=str(hash(prob_code_data)) \t\t\tself.code_list.append((prob_code,prob_code_data)) \t\t\tself.problem_groups[prob_id].append(prob_code+\"\\n\"+(\"=\"*50)+\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list", "label": 1}, {"snippet_id": 18833, "code": "\t\t \tapplication=tornado.web.Application( \t\thandlers=[ \t\t\t(r'/',IndexHandler), \t\t\t(r'/signup', SignUpHandler), \t\t\t(r'/signin', SignInHandler), \t\t\t(r'/postlogin',PostLoginHandler) \t\t], \t\ttemplate_path=os", "label": 1}, {"snippet_id": 51378, "code": " line in source: destination.write(line) destination.flush() stdout_thread=threading.Thread(target=pump_output_thread, args=(stdout, sys.stdout)) stderr_thread=threading.Thread(target=pump_output_thread,", "label": 0}, {"snippet_id": 26782, "code": " a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items():", "label": 0}, {"snippet_id": 15547, "code": ")[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models')[0]['include'] if not form.change_input_series_one_model: for command in get_command('change_input_series_one_model", "label": 0}, {"snippet_id": 4615, "code": " self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 80608, "code": "(target_wavelength) @handled_slot(bool) def set_bifi_approx_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Approx. Wavelength', label='Wavelength", "label": 0}, {"snippet_id": 39446, "code": " from.extracted_text import ExtractedText from.raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old", "label": 1}, {"snippet_id": 22164, "code": " backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"", "label": 0}, {"snippet_id": 46601, "code": " context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects.filter(data_source", "label": 0}, {"snippet_id": 67308, "code": ".getSamplesFromIP(ip) context['tm_report']=tm.getReportFromIP(ip) context['bls']=blacklist.objects.filter(Q(ip=ip)|Q(url__contains=ip)) count=context['bls'].count() if count > 0: context['bls_count']=count", "label": 0}, {"snippet_id": 38308, "code": " content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default", "label": 0}, {"snippet_id": 83265, "code": " django.utils.translation import ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' ", "label": 0}, {"snippet_id": 23908, "code": " if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'.", "label": 0}, {"snippet_id": 20343, "code": " memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self", "label": 0}, {"snippet_id": 74047, "code": ".shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core.reporting", "label": 0}, {"snippet_id": 44987, "code": "'specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True) self.assertContains(response, f'href=\"/datagroup", "label": 0}, {"snippet_id": 79163, "code": "% datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req", "label": 0}, {"snippet_id": 57415, "code": "=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf\"'.format(transaction.code) context={ 'transaction':", "label": 0}, {"snippet_id": 7645, "code": " openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from", "label": 0}, {"snippet_id": 12326, "code": ".tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the", "label": 0}, {"snippet_id": 40791, "code": ", response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC", "label": 0}, {"snippet_id": 29896, "code": ") @login_required def delete_comment(post_id, comment_id): comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment.owner(current_user): db.session.delete(comment) db.session", "label": 0}, {"snippet_id": 18868, "code": ".models import GospelTrip def gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt", "label": 0}, {"snippet_id": 72702, "code": ".method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect(", "label": 1}, {"snippet_id": 40207, "code": " =True, blank =True, validators=[URLValidator()]) qa_begun=models.BooleanField(default=False) script_type=models.CharField( max_length=2, choices =TYPE_CHOICES, blank =False, default ='EX') confidence=models", "label": 0}, {"snippet_id": 27615, "code": " strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate", "label": 0}, {"snippet_id": 37544, "code": "): class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self", "label": 0}, {"snippet_id": 17771, "code": " form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time", "label": 0}, {"snippet_id": 65572, "code": " start_database_opening_routine(self, tab_title, filepath): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self", "label": 0}, {"snippet_id": 17996, "code": ".referrer or \\ home_url if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context={ 'activation_link': activation_link,", "label": 1}, {"snippet_id": 20256, "code": " maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client", "label": 0}, {"snippet_id": 11347, "code": " \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login", "label": 0}, {"snippet_id": 25087, "code": ".TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex=binary_to_hex", "label": 0}, {"snippet_id": 50945, "code": " default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None: f.buildstep.name=name f.buildstep.set_optional", "label": 0}, {"snippet_id": 40440, "code": " text.qa_group=qa_group text.save() if force_doc_id is not None and ExtractedText.objects.filter(pk=force_doc_id).exists(): text=ExtractedText.objects.get(pk=force_doc_id) text.qa_group=qa_group text.save", "label": 0}, {"snippet_id": 4393, "code": ".client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code", "label": 0}, {"snippet_id": 30748, "code": " grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': if request.form['name']: editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets'))", "label": 1}, {"snippet_id": 57815, "code": " onboarding.VIEW_INTRODUCTION: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.INTRODUCTION_INTRO: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSE: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding", "label": 0}, {"snippet_id": 39504, "code": "(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) qa_flag=models.BooleanField(default=False) @classmethod", "label": 0}, {"snippet_id": 6024, "code": " to set a new ID token cookie. \"\"\" g.oidc_id_token=id_token g.oidc_id_token_dirty=True def after_request(self, response): \"\"\" Set a new ID token cookie if the ID token has changed. \"\"\" if getattr(g, 'oidc_id_token_dirty", "label": 0}, {"snippet_id": 78343, "code": " logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE", "label": 0}, {"snippet_id": 56408, "code": ", bio='my info', pic='url') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to", "label": 0}, {"snippet_id": 24867, "code": " password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self", "label": 1}, {"snippet_id": 8054, "code": " view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context", "label": 0}, {"snippet_id": 11659, "code": "'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES],", "label": 0}, {"snippet_id": 55351, "code": ": \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode", "label": 0}, {"snippet_id": 60741, "code": "\"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def", "label": 0}, {"snippet_id": 21846, "code": " scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen", "label": 0}, {"snippet_id": 71905, "code": ".assertEquals(msgs_key,[ {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) msgs_key=req.get_messages() self.assertEquals(msgs_key, None) def test_set_redirect_uri", "label": 1}, {"snippet_id": 44008, "code": " settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_hem(self): for i in range(27", "label": 1}, {"snippet_id": 42620, "code": "'Showing 1 -20 of') response=self.c.get('/find/?q=diatom&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result found') def test_faceted_search_renders_div(self): response=self.c.get", "label": 0}, {"snippet_id": 46131, "code": " in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type) if extract_form.is_valid(): csv_file=request.FILES.get('extract_file') script_pk=int(request.POST['script_selection", "label": 0}, {"snippet_id": 46879, "code": "'data_group_detail', pk=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values", "label": 0}, {"snippet_id": 82358, "code": "<pk>(\\d)+)/$', SuccessUrlView.as_view(), name='success-url-view'), re_path(r'^add-custom/$', CustomShortURLCreateView.as_view(), name='add-custom-url'), re_path(r'^add-many/$', ShortManyURLSView.as_view", "label": 0}, {"snippet_id": 39437, "code": ".common_info import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo, RawChem):", "label": 1}, {"snippet_id": 36777, "code": " .annotate(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title", "label": 0}, {"snippet_id": 81886, "code": "(request.POST or None) if form.is_valid(): object.count +=1 ip=get_client_ip(request) client_agent=request.META['HTTP_USER_AGENT'] clicktracker=ClickTracking.objects.create( client_ip=ip, user_agent=client_agent", "label": 1}, {"snippet_id": 62432, "code": "'terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app", "label": 0}, {"snippet_id": 7128, "code": " WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' from app.models.bookings import", "label": 0}, {"snippet_id": 72926, "code": "-closed\"): sort_by='-date_closed' elif request.POST.get(\"sort-position\"): sort_by='position_title' elif request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\")", "label": 1}, {"snippet_id": 15749, "code": " commands=get_commands(run_form) if run_form.validate_on_submit(): return json.dumps({ 'commands': commands, 'html': render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands", "label": 0}, {"snippet_id": 3643, "code": " self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with", "label": 0}, {"snippet_id": 18196, "code": " argon2 import PasswordHasher from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options", "label": 1}, {"snippet_id": 21407, "code": " this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some errors", "label": 0}, {"snippet_id": 58112, "code": ": 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7", "label": 1}, {"snippet_id": 81516, "code": "%d %H:%M:00') +relativedelta(months=+1) new_end_date=end_date +relativedelta(months=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date", "label": 1}, {"snippet_id": 14631, "code": " state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ", "label": 0}, {"snippet_id": 10065, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return", "label": 0}, {"snippet_id": 20207, "code": " 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed", "label": 0}, {"snippet_id": 65986, "code": " if db.database_manager.changes is True: unsaved_databases_list.append(db) if unsaved_databases_list.__len__() > 0: builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/quit_dialog", "label": 0}, {"snippet_id": 56627, "code": "[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return", "label": 0}, {"snippet_id": 77249, "code": "\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url", "label": 1}, {"snippet_id": 16951, "code": ".get(player=tp.player, game=new_game) current[gp.id]=gp.power data.append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset", "label": 0}, {"snippet_id": 75737, "code": " logger.error('fast lookup timed out') return error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results", "label": 0}, {"snippet_id": 42307, "code": " to DataSource from here.') def test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by", "label": 0}, {"snippet_id": 42436, "code": " field_list='ExtractedChemical_id,raw_cas,raw_chem_name,raw_min_comp,raw_central_comp,raw_max_comp,unit_type' content=list(i.decode('utf-8') for i in resp.streaming_content) self.assertIn(field_list, content", "label": 0}, {"snippet_id": 71936, "code": "{'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/callback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback') req._load_session() req.set_redirect_uri", "label": 1}, {"snippet_id": 77593, "code": ".append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN", "label": 0}, {"snippet_id": 80801, "code": ") self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking", "label": 0}, {"snippet_id": 70573, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not", "label": 0}, {"snippet_id": 74776, "code": " @login_required def candidate_profile(request, candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist", "label": 0}, {"snippet_id": 40359, "code": ". \"\"\" from.qa_group import QAGroup from.extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup", "label": 0}, {"snippet_id": 83448, "code": " self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new=False def save(self, *args, **kwargs): editor_ip=self.cleaned_data['user_ip'] comment=self.cleaned_data['comment", "label": 0}, {"snippet_id": 54758, "code": "=prob_data \t\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data)) \t\t\tself.code_list.append((prob_code,prob_code_data)) \t\t\tself.problem_groups[prob_id].append(prob_code+\"\\n\"+(", "label": 0}, {"snippet_id": 2146, "code": ".http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import", "label": 1}, {"snippet_id": 70817, "code": " in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\',", "label": 1}, {"snippet_id": 49033, "code": "() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return", "label": 0}, {"snippet_id": 6829, "code": " sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if", "label": 0}, {"snippet_id": 9269, "code": ": _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings", "label": 0}, {"snippet_id": 83789, "code": "(user, group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html', template_dir", "label": 0}, {"snippet_id": 2985, "code": "=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active", "label": 0}, {"snippet_id": 37854, "code": " model=ExtractedChemical fields='__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm based on conditions of DataGroup type=Composition and at least 1 document extracted ''' if", "label": 0}, {"snippet_id": 6531, "code": "'OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token", "label": 1}, {"snippet_id": 80230, "code": "') self.restart_action=console_menu.addAction('Restart') set_menu=menu_bar.addMenu('Set') self.set_wavelength_action=set_menu.addAction('Wavelength') self.set_bifi_approx_wavelength_action=set_menu.addAction", "label": 0}, {"snippet_id": 54187, "code": " Page \"\"\" @app.route('/search', methods=['POST', 'GET']) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician=None for p in politicians", "label": 1}, {"snippet_id": 73752, "code": " create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): save_position_to_user(request) return redirect('home') create_position_form", "label": 0}, {"snippet_id": 59582, "code": "(mod) except ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self", "label": 0}, {"snippet_id": 19470, "code": ".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename]=[] def check_log_files_and_push_updates(self): \"\"\"Get any changes to the log files and push updates to Redis", "label": 1}, {"snippet_id": 62670, "code": " authn service. :type came_from: str :return: the session token corresponding to the query :rtype: str \"\"\" with self.app.test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache", "label": 0}, {"snippet_id": 84564, "code": " group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, *args, **kw): if request.method=='GET': if group_slug is not", "label": 0}, {"snippet_id": 8498, "code": "/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif", "label": 0}, {"snippet_id": 2406, "code": "{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 41145, "code": " response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9101", "label": 0}, {"snippet_id": 25401, "code": "=self.redis.get(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush", "label": 0}, {"snippet_id": 1480, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 70449, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb", "label": 0}, {"snippet_id": 43767, "code": " be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'", "label": 0}, {"snippet_id": 23469, "code": " is set, this returns a list of integers with the IDs of the GPUs. If it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if", "label": 0}, {"snippet_id": 84621, "code": " if group_slug is not None: template_params['group']=group_slug if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params", "label": 0}, {"snippet_id": 20941, "code": "=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info", "label": 1}, {"snippet_id": 36039, "code": "='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs", "label": 0}, {"snippet_id": 57450, "code": " transaction_pay(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction", "label": 0}, {"snippet_id": 60846, "code": " proc=Process(self.pid) if proc.is_running(): return True except NoSuchProcess: pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being", "label": 0}, {"snippet_id": 78039, "code": ".0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']", "label": 0}, {"snippet_id": 9745, "code": " enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, ", "label": 0}, {"snippet_id": 5456, "code": "' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self", "label": 0}, {"snippet_id": 68259, "code": "['count']=count context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=tweet.objects.order_by('-datetime') keyword=self", "label": 0}, {"snippet_id": 60366, "code": "(app_root / \"datasette\" / \"templates\") template_paths=[] if self.template_dir: template_paths.append(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"] for plugin in get_plugins(pm) if", "label": 0}, {"snippet_id": 66255, "code": ".add(self.unlock_database_stack_box) def connect_events(self): password_unlock_button=self.builder.get_object(\"password_unlock_button\") password_unlock_button.connect(\"clicked\", self.on_password_unlock_button_clicked", "label": 0}, {"snippet_id": 39764, "code": " view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict[", "label": 0}, {"snippet_id": 26061, "code": " plasma_directory=self._ray_params.plasma_directory, huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert", "label": 1}, {"snippet_id": 2177, "code": ", gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views", "label": 0}, {"snippet_id": 66091, "code": "=NotImplemented database_manager=NotImplemented unlock_database_stack_box=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented logging_manager=LoggingManager(True) overlay=NotImplemented def", "label": 0}, {"snippet_id": 58303, "code": "\"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" }, onboarding.CREATE_COURSELET:{ \"html\": \"<p>create_courselet</p>", "label": 0}, {"snippet_id": 66302, "code": ".on_composite_unlock_select_button_clicked) password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") password_unlock_entry.connect(\"activate\", self.on_password_unlock_button_clicked) password_unlock_entry", "label": 0}, {"snippet_id": 56673, "code": " name='login-redirect'), url(r'^e/(?P<experience_share_id>[a-zA-Z0-9]+)$', experience_redirect, name='experience-redirect'), url(r'^p/(?P<username>[a-zA-Z0-9._]+)$', profile_redirect, name='profile-redirect", "label": 0}, {"snippet_id": 75672, "code": "[] for item in fast_results: text=item['auth'] if item['type'] !='auth': text='%s(%s)' %(text, item[index][0]) if item['idroot'] not in fast_ids: results.append({'id': '%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR", "label": 0}, {"snippet_id": 73516, "code": " return user def send_user_email(request, user): url=generate_confirmation_url(request, user) send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account", "label": 0}, {"snippet_id": 69849, "code": " parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve", "label": 0}, {"snippet_id": 83439, "code": ".old_content=self.old_markup='' self.is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new=False def save(self, *args, *", "label": 0}, {"snippet_id": 82657, "code": "(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component", "label": 0}, {"snippet_id": 77173, "code": " tile_arg_names=tile_arg_names ) return layer def GetMapBaseUrl(self): \"\"\"Prepares the base URL for fetching tiles.\"\"\" base_url=_TILE_BASE_URL %(self.target_url, self.request_type) base_url +=_IMAGE_FMT ", "label": 0}, {"snippet_id": 37343, "code": ".attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA Notes", "label": 1}, {"snippet_id": 23219, "code": " check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if", "label": 0}, {"snippet_id": 63221, "code": " self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_FAILURE_REDIRECT_URL'])) class UnAuthnAPITestCase(EduidAPITestCase): def update_config(self", "label": 0}, {"snippet_id": 42112, "code": " upload to <600 should be on the page') def test_extracted_count(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('0 extracted', response, ", "label": 0}, {"snippet_id": 27119, "code": " include_webui: Boolean flag indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains", "label": 0}, {"snippet_id": 1841, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 12177, "code": ", 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER']", "label": 0}, {"snippet_id": 14902, "code": ".route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route(", "label": 0}, {"snippet_id": 25593, "code": "() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message", "label": 1}, {"snippet_id": 30977, "code": "<int:grudget_id>/grudge/<int:grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') editgrudge=session.query(Grudge", "label": 0}, {"snippet_id": 36555, "code": " should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/'", "label": 0}, {"snippet_id": 28513, "code": " it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split", "label": 0}, {"snippet_id": 81466, "code": " '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+7) new_end_date=end_date +relativedelta", "label": 1}, {"snippet_id": 10506, "code": ".lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student", "label": 0}, {"snippet_id": 32785, "code": " FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ", "label": 0}, {"snippet_id": 26210, "code": " stderr_file=stderr_file, autoscaling_config=self._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self", "label": 0}, {"snippet_id": 65440, "code": " \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui\")", "label": 0}, {"snippet_id": 60793, "code": " monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component ", "label": 0}, {"snippet_id": 83218, "code": " isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job", "label": 0}, {"snippet_id": 22923, "code": " str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str", "label": 0}, {"snippet_id": 12317, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided", "label": 0}, {"snippet_id": 4838, "code": ") for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def", "label": 0}, {"snippet_id": 40122, "code": ".ExtractedFunctionalUse').DoesNotExist: try: return apps.get_model('dashboard.ExtractedListPresence').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedListPresence').DoesNotExist", "label": 0}, {"snippet_id": 82899, "code": " crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name", "label": 0}, {"snippet_id": 45837, "code": "(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem", "label": 0}, {"snippet_id": 71502, "code": "._load_strategy, 'enron') from engineauth.strategies.appengine_openid import\\ AppEngineOpenIDStrategy strategy_class=app._load_strategy('appengine_openid') self.assertEqual(strategy_class, AppEngineOpenIDStrategy)", "label": 0}, {"snippet_id": 81763, "code": ", ClickTracking from.utils import create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import re class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm", "label": 0}, {"snippet_id": 53748, "code": " from cauldron.render import texts as render_texts from cauldron.session.buffering import RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management", "label": 0}, {"snippet_id": 32351, "code": ".next() def parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self", "label": 0}, {"snippet_id": 42786, "code": "==1) self.assertTrue(Script.objects.get(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id", "label": 0}, {"snippet_id": 8121, "code": "'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context", "label": 0}, {"snippet_id": 608, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 47478, "code": "', None) return render(request, template_name,{'form': form}) @login_required() def data_source_delete(request, pk, template_name=('data_source/' 'datasource_confirm_delete.html')): datasource=get_object_or_404", "label": 0}, {"snippet_id": 11726, "code": "'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled", "label": 0}, {"snippet_id": 61851, "code": "=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, ", "label": 0}, {"snippet_id": 75005, "code": "{'candidate': candidate, 'form': form}) def _user_keywords_changed(thesis, user_request_keywords): db_keywords_info={} for kw in thesis.keywords.all(): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords", "label": 0}, {"snippet_id": 20394, "code": "{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages about", "label": 0}, {"snippet_id": 59056, "code": "['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404(user, **kwargs): ''' Do a search for invite by passed", "label": 0}, {"snippet_id": 1343, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'})", "label": 0}, {"snippet_id": 74975, "code": " submitted and is locked.') if request.method=='POST': form=UploadForm(request.POST, request.FILES) if form.is_valid(): form.save_upload(candidate) return HttpResponseRedirect(reverse('candidate_home', kwargs=", "label": 0}, {"snippet_id": 56463, "code": " given_a_profile(self, username, bio, pic): orm_person=ORMPerson.objects.create() profile=ORMProfile.objects.create(username=username, bio=bio, person=orm_person) profile.picture=pic profile.save() return", "label": 0}, {"snippet_id": 19651, "code": " node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False", "label": 1}, {"snippet_id": 47882, "code": "} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV", "label": 0}, {"snippet_id": 64020, "code": " SAML2 NameID of the currently logged in user. :param session: The current session object :return: NameID :rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except", "label": 0}, {"snippet_id": 24187, "code": ": \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client", "label": 1}, {"snippet_id": 10919, "code": " return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the", "label": 0}, {"snippet_id": 7468, "code": ".filter(or_(Exam.exam_returned_date.is_(None), Exam.exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam, key): search_kwargs[key]=request", "label": 0}, {"snippet_id": 33341, "code": " from django.test import TestCase, override_settings from django.test.client import Client from django.contrib.auth import authenticate from django.contrib.auth.models import User from dashboard.models", "label": 0}, {"snippet_id": 83462, "code": ".cleaned_data['user_ip'] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new", "label": 0}, {"snippet_id": 22614, "code": " span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class", "label": 0}, {"snippet_id": 10536, "code": " as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils", "label": 0}, {"snippet_id": 1827, "code": "/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 30191, "code": "+string.digits) for x in xrange(32)) login_session['state']=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']) def gconnect(): if request.args.get('state') ", "label": 1}, {"snippet_id": 11691, "code": ".LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ ", "label": 0}, {"snippet_id": 46014, "code": " if page is None else page), 'all_documents' : docs, 'extract_fields': dg.get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form' : include_extract_form(dg), 'clean_comp_data_form", "label": 0}, {"snippet_id": 2498, "code": "\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item", "label": 0}, {"snippet_id": 7821, "code": "'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or ''", "label": 0}, {"snippet_id": 14926, "code": "'models.html', models=models) @app.route('/results') def view_results(): results=load_json('results.json') time_series=[] for name, values in results.items(): ts={ 'id': name, 'values':{ 'x':[], 'y':[]", "label": 0}, {"snippet_id": 35722, "code": "(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html", "label": 0}, {"snippet_id": 51216, "code": "%r\" %(k,v) for(k,v) in kwargs.items()])] print \"subprocess.check_call(%s)\" %(\", \".join(argstring+kwargstring)) subprocess.check_call(*args, **kwargs) def python(self, *args, **kwargs): args=flatten_string_list", "label": 0}, {"snippet_id": 66926, "code": "]=count context['attributes']=Attribute.objects.filter(Q(value__icontains=domain)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws", "label": 0}, {"snippet_id": 9492, "code": ".tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the", "label": 0}, {"snippet_id": 61639, "code": "), noopen_download=validate_download_options(page), xss_protection=validate_xss_protection(page), clickjacking_protection=validate_clickjacking_protection(page), good_cross_domain_policy=validate_cross_domain_policy", "label": 1}, {"snippet_id": 8984, "code": " ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from", "label": 0}, {"snippet_id": 62175, "code": "\", ) def validate_cross_domain_policy(page): return validate_security_header( page, \"X-Permitted-Cross-Domain-Policies\", \"master-only\", ) def validate_pragma(page): return validate_security_header(page", "label": 0}, {"snippet_id": 1268, "code": " re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except", "label": 0}, {"snippet_id": 42621, "code": "'Showing 1 -20 of') response=self.c.get('/find/?q=diatom&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result found') def test_faceted_search_renders_div(self): response=self.c.get('", "label": 0}, {"snippet_id": 28296, "code": ".isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def", "label": 0}, {"snippet_id": 44627, "code": "(lower_wf_analysis=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product", "label": 0}, {"snippet_id": 46815, "code": ".pk)+','+','.join(line.values())+'\\n') if errors: datagroup.csv.close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup", "label": 0}, {"snippet_id": 84431, "code": " template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None", "label": 0}, {"snippet_id": 38246, "code": ".filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL", "label": 0}, {"snippet_id": 72689, "code": "/localhost:8000/confirm?key=\" +str(token.key) def login_form(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None", "label": 1}, {"snippet_id": 11496, "code": " if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html'", "label": 0}, {"snippet_id": 2667, "code": " del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure(", "label": 0}, {"snippet_id": 11556, "code": " made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this", "label": 0}, {"snippet_id": 26464, "code": " errors in process of \" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:", "label": 0}, {"snippet_id": 20369, "code": "=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( ", "label": 0}, {"snippet_id": 63385, "code": " config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_authn(self): with self.app.test_client(", "label": 0}, {"snippet_id": 35356, "code": ") form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created", "label": 0}, {"snippet_id": 66793, "code": ".twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(", "label": 0}, {"snippet_id": 33886, "code": "=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestEditsWithSeedData(StaticLiveServerTestCase):", "label": 0}, {"snippet_id": 28901, "code": " file system. Returns: The size of the shared memory file system in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs", "label": 0}, {"snippet_id": 39343, "code": "=True, blank=True) def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @classmethod def detail_fields(cls): return['extracted_text', 'raw_chem_name', 'raw_cas', 'raw_min_comp'", "label": 0}, {"snippet_id": 14628, "code": ".provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url", "label": 0}, {"snippet_id": 45852, "code": "\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset", "label": 0}, {"snippet_id": 42442, "code": " from dashboard.tests.loader import load_model_objects from dashboard.models import QAGroup, ExtractedText class ExtractedQaTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client", "label": 0}, {"snippet_id": 11679, "code": ":{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'", "label": 0}, {"snippet_id": 35644, "code": ".mark_safe(request.GET.get('q', '')).lstrip() if q > '': p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat", "label": 0}, {"snippet_id": 15971, "code": " self.password.data): self.password.errors.append('Invalid email or password') return False self.user=user return True @app.route('/register', methods=['GET', 'POST']) def view_register(): if current_user", "label": 0}, {"snippet_id": 12525, "code": "\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the", "label": 0}, {"snippet_id": 57211, "code": "=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction return render(request, 'transactions/transaction_detail.html'", "label": 0}, {"snippet_id": 30666, "code": "=grudgets) @app.route('/grudget/new/', methods=['GET', 'POST']) def newGrudget(): if 'username' not in login_session: return redirect('/login') if request.method=='POST': newGrudget=Grudget(name=request", "label": 0}, {"snippet_id": 1894, "code": " not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 61744, "code": "> None: \"\"\" This method takes a queryset and scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances", "label": 0}, {"snippet_id": 66502, "code": "() self.logging_manager.log_debug(\"Database successfully opened with keyfile\") except(OSError, IndexError): self.show_unlock_failed_revealer() keyfile_unlock_select_button.get_style_context().add_class", "label": 0}, {"snippet_id": 20459, "code": ".add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file", "label": 0}, {"snippet_id": 14146, "code": "\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions", "label": 0}, {"snippet_id": 12920, "code": "): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page)", "label": 0}, {"snippet_id": 6633, "code": ".is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed.html') @auth.route('/login', methods=['GET', 'POST']) def login(): form=LoginForm", "label": 0}, {"snippet_id": 25220, "code": "-num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message", "label": 0}, {"snippet_id": 53307, "code": "', 1)[0] module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code(source_code, step.source_path) except SyntaxError as error", "label": 1}, {"snippet_id": 24102, "code": " absolute_import from __future__ import division from __future__ import print_function import threading import traceback import redis import ray from ray import ray_constants from ray import cloudpickle", "label": 1}, {"snippet_id": 24015, "code": " methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr", "label": 0}, {"snippet_id": 520, "code": " also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template", "label": 0}, {"snippet_id": 77974, "code": " package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application", "label": 0}, {"snippet_id": 53471, "code": "\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename: str) -> bool", "label": 0}, {"snippet_id": 44292, "code": "=self.objects.p puc=self.objects.puc tag=self.objects.pt PUCToTag.objects.create(content_object=puc, tag=tag) ProductToPUC.objects.create(product=p, puc=puc) url=self.live_server_url +f'/product/{p.pk}", "label": 0}, {"snippet_id": 74461, "code": "(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial(WizardPDFPartial): content_disposition=\"inline\" EVAL_ACTION_TYPE=\"VIEW_PDF\" class DownloadPDFPartial", "label": 0}, {"snippet_id": 48399, "code": " page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form", "label": 0}, {"snippet_id": 11292, "code": "'errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to", "label": 0}, {"snippet_id": 67818, "code": "=day-1) count=self.object_list.filter(timestamp__gte=from_date, timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta", "label": 0}, {"snippet_id": 16430, "code": "'roll_call', args=(tournament_id,)), 'formset': formset}) @permission_required('tournament.add_game') def get_seven(request, tournament_id, round_num): \"\"\"Provide a form to get a multiple of seven players for", "label": 0}, {"snippet_id": 24981, "code": ".subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data", "label": 0}, {"snippet_id": 61173, "code": " and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name", "label": 0}, {"snippet_id": 26231, "code": " raylet monitor.\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file=stdout_file,", "label": 0}, {"snippet_id": 25115, "code": "!=task_driver_id_hex: continue driver_task_id_bins.add(hex_to_binary(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id, _ in object_table_objects.items", "label": 0}, {"snippet_id": 20101, "code": "(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for", "label": 0}, {"snippet_id": 63130, "code": "-termination', session) then=session['reauthn-for-termination'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check) def test_token_login_new_user(self): eppn='hubba", "label": 0}, {"snippet_id": 83537, "code": ".contrib import messages from django.core.exceptions import ObjectDoesNotExist from wiki.forms import ArticleForm from wiki.models import Article, ChangeSet, dmp from wiki.utils import get_ct from django", "label": 1}, {"snippet_id": 77875, "code": " Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation", "label": 0}, {"snippet_id": 68608, "code": " stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for tw in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')", "label": 0}, {"snippet_id": 17875, "code": "(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password=form.new_password", "label": 0}, {"snippet_id": 6160, "code": " refresh credentials\", exc_info=True) del self.credentials_store[id_token['sub']] return self.redirect_to_auth_server(request.url) g.oidc_id_token=id_token return None def require_login(self, view_func): \"", "label": 0}, {"snippet_id": 78096, "code": ") security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency", "label": 0}, {"snippet_id": 60039, "code": ".UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading the SpatiaLite module.\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite.html\" ) else", "label": 0}, {"snippet_id": 40864, "code": " to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC", "label": 0}, {"snippet_id": 27791, "code": " else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self", "label": 0}, {"snippet_id": 54913, "code": "=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition,chapter,problem_number,prob_code)) \t \tanother_count_by_groups=0 ", "label": 1}, {"snippet_id": 45177, "code": "('document_type__title'), document_count=Count('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type", "label": 0}, {"snippet_id": 30280, "code": " if result.get('error') is not None: response=make_response(json.dumps(result.get('error')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials.id_token['sub']", "label": 0}, {"snippet_id": 54242, "code": "\" @app.errorhandler(404) def page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 ", "label": 0}, {"snippet_id": 10469, "code": ".programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site", "label": 0}, {"snippet_id": 24423, "code": " to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary", "label": 1}, {"snippet_id": 64852, "code": ", default=0, help=\"The number of points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission", "label": 0}, {"snippet_id": 2046, "code": "): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime", "label": 0}, {"snippet_id": 76652, "code": "(\"Row -abs: %d; rel:%d\", abs_tile_row, rel_tile_row) if rel_tile_row < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col", "label": 0}, {"snippet_id": 26688, "code": " of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the", "label": 0}, {"snippet_id": 59167, "code": ") ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email)", "label": 0}, {"snippet_id": 61527, "code": " pshtt_results: Dict) -> ScanResult: \"\"\" Takes a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"", "label": 1}, {"snippet_id": 82166, "code": " return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class", "label": 0}, {"snippet_id": 70261, "code": " import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date", "label": 1}, {"snippet_id": 6728, "code": "=form.password.data) db.session.add(user) db.session.commit() token=user.generate_confirmation_token() send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token) flash", "label": 0}, {"snippet_id": 61866, "code": " soup=BeautifulSoup(page.content, \"lxml\") return page, soup def validate_subdomain(url): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in", "label": 0}, {"snippet_id": 33295, "code": ".register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical)", "label": 0}, {"snippet_id": 70778, "code": " also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template", "label": 0}, {"snippet_id": 32005, "code": " _builtin_pwd(self, name): wd=os.getcwd() print(wd) def _builtin_cd(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT", "label": 0}, {"snippet_id": 12053, "code": ".skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except", "label": 1}, {"snippet_id": 36150, "code": ".objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self", "label": 0}, {"snippet_id": 82695, "code": ".__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the", "label": 0}, {"snippet_id": 14379, "code": "/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query", "label": 0}, {"snippet_id": 19216, "code": " self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun", "label": 1}, {"snippet_id": 1958, "code": "<head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %", "label": 0}, {"snippet_id": 8608, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render", "label": 0}, {"snippet_id": 56185, "code": "(reverse('email-confirmation-redirect'), 'token=ABXZ')) return self def then_response_should_be_a_redirect_to_app_deeplink_with_params(self): assert self.response.status_code==302 assert self.response[", "label": 0}, {"snippet_id": 42631, "code": " self.assertContains(response, 'Sorry, no result found') def test_faceted_search_renders_div(self): response=self.c.get('/find/?q=terro') self.assertNotContains(response, '<table') self.assertContains(response", "label": 0}, {"snippet_id": 65567, "code": "(\"File selection canceled\") filechooser_opening_dialog.close() def start_database_opening_routine(self, tab_title, filepath): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database", "label": 0}, {"snippet_id": 15185, "code": " default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) new_value=FloatField('Delta',[validators.required()]) class ChangeInputAddDelta(FlaskForm): def __init__(self", "label": 0}, {"snippet_id": 31333, "code": ".get('WEBHOOK_SECRET') SOCIAL_AUTH_GITHUB_KEY=os.environ.get('SOCIAL_AUTH_GITHUB_KEY') SOCIAL_AUTH_GITHUB_SECRET=os.environ.get('SOCIAL_AUTH_GITHUB_SECRET') SOCIAL_AUTH_GITHUB_SCOPE=[ 'admin:repo_hook', ", "label": 0}, {"snippet_id": 51409, "code": ") return stdout.channel.recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class", "label": 0}, {"snippet_id": 22623, "code": " worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes:", "label": 0}, {"snippet_id": 35960, "code": ".extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES=( ('UN', 'unknown'), ('FO', 'formulations'), ('AR', 'articles'), ('OC', 'occupational')) kind=models.CharField", "label": 0}, {"snippet_id": 35982, "code": ", default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank", "label": 0}, {"snippet_id": 50557, "code": "\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False def release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only", "label": 0}, {"snippet_id": 72829, "code": "'pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position", "label": 1}, {"snippet_id": 65003, "code": " not expr: raise ValueError('Failed to parse test case %d' % i) valid=False if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp", "label": 0}, {"snippet_id": 5784, "code": " copy import logging from six.moves.urllib.parse import urlencode from flask import request, session, redirect, url_for, g from oauth2client.client import flow_from_clientsecrets, OAuth2WebServerFlow,\\", "label": 0}, {"snippet_id": 69803, "code": " files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import", "label": 0}, {"snippet_id": 68556, "code": "): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def get_success_url(self): self.object.start() return '/twitter_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class", "label": 0}, {"snippet_id": 45557, "code": " hex in colors) for form in child_formset.forms: form.color=next(color) else: context['edit_text_form']=ParentForm() return render(request, template_name, context) @login_required() def save_doc_form(request", "label": 1}, {"snippet_id": 47207, "code": ".get_name_as_slug() qs=ExtractedChemical.objects.filter(extracted_text__data_document__data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg_name + \"_raw_extracted_records.csv\")", "label": 0}, {"snippet_id": 74493, "code": " django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect, HttpResponseForbidden, JsonResponse, FileResponse, HttpResponseServerError from django.shortcuts import render, get_object_or_404", "label": 0}, {"snippet_id": 26086, "code": " ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True if we should start", "label": 0}, {"snippet_id": 84436, "code": " HttpResponseNotAllowed(['GET']) @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None", "label": 0}, {"snippet_id": 2994, "code": " SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): ", "label": 0}, {"snippet_id": 82930, "code": " event subclass for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name", "label": 0}, {"snippet_id": 63487, "code": " '200 OK') def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout', method='POST', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn", "label": 0}, {"snippet_id": 70696, "code": " import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from", "label": 1}, {"snippet_id": 79115, "code": " is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id", "label": 0}, {"snippet_id": 42130, "code": "'0 extracted', response, 'Data Group should contain a count of 0 total extracted documents') self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{DataGroup.objects", "label": 0}, {"snippet_id": 25079, "code": " Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii", "label": 0}, {"snippet_id": 70947, "code": "\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title>", "label": 0}, {"snippet_id": 72831, "code": " if create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form", "label": 1}, {"snippet_id": 31956, "code": "(0) def readline(self): ''' Read a command from stdin to execute. Returns: A raw string read from stdin. ''' while True: raw=input('$ ') if len(raw) > 0: return raw def execute(self, raw): ''' Execute a", "label": 0}, {"snippet_id": 6828, "code": " has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit", "label": 0}, {"snippet_id": 51376, "code": ": for line in source: destination.write(line) destination.flush() stdout_thread=threading.Thread(target=pump_output_thread, args=(stdout, sys.stdout)) stderr_thread=threading.Thread(target=pump_output_thread", "label": 0}, {"snippet_id": 72494, "code": " import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText", "label": 0}, {"snippet_id": 35208, "code": ".datagroup_set.all() for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull=False).count() ds.data_groups=dgs return render(request, template_name", "label": 0}, {"snippet_id": 37267, "code": "**kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['clean_comp_data_file'].widget", "label": 0}, {"snippet_id": 60795, "code": " __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"", "label": 0}, {"snippet_id": 32607, "code": " def __init__(self, first, second): self.first=first self.second=second def execute(self, *args): self.first.execute(*args) self.first.wait() self.second.execute(*args) self.second.wait() class PipeNode", "label": 0}, {"snippet_id": 33978, "code": " rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit", "label": 0}, {"snippet_id": 70557, "code": "</html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]", "label": 0}, {"snippet_id": 47384, "code": "=PriorityForm(request.POST or None, instance=datasource) if request.method=='POST': if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list", "label": 0}, {"snippet_id": 36289, "code": "/a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to ", "label": 0}, {"snippet_id": 70705, "code": " HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote", "label": 1}, {"snippet_id": 78013, "code": "=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\" self._load_config() context={'session': model.Session} package_ids=self.get_package_ids", "label": 0}, {"snippet_id": 10758, "code": "'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise", "label": 0}, {"snippet_id": 43059, "code": ".assertNotIn( b'<input type=\"text\" name=\"rawchem-1-unit_type\"', response.content) self.assertIn(b'Functional Use Chem1', response.content) response=self.client.get('/qa/extractionscript/5', follow=True) response", "label": 0}, {"snippet_id": 36738, "code": "['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month", "label": 0}, {"snippet_id": 14538, "code": " 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 64452, "code": " 0: current_app.logger.error('Not new user{} tried to log in using token login'.format(user)) return redirect(location_on_fail) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn", "label": 0}, {"snippet_id": 15025, "code": " ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source", "label": 0}, {"snippet_id": 69416, "code": " admin users\") config_path=CONFIG_FILE if os.path.exists(config_path): with open(config_path, 'r') as f: config=yaml.load(f) else: config={} config['users']=config.get('users',{}) config['users']['admin']", "label": 0}, {"snippet_id": 61691, "code": " a single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the result to the database", "label": 0}, {"snippet_id": 38364, "code": " ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_habits_and_practices import", "label": 0}, {"snippet_id": 79103, "code": "\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request", "label": 0}, {"snippet_id": 80866, "code": "::0x0102::07-40-01::INSTR') sys.argv.append('COM5') print(sys.argv) exit_code=ControlApplication.EXIT_CODE_RESTART while exit_code==ControlApplication.EXIT_CODE_RESTART: gui=ControlApplication([]) with", "label": 1}, {"snippet_id": 63019, "code": "=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"\"\"", "label": 0}, {"snippet_id": 72217, "code": " ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by", "label": 0}, {"snippet_id": 75242, "code": ".committee_members.add(committee_member) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: person_form=CommitteeMemberPersonForm() committee_member_form", "label": 0}, {"snippet_id": 3946, "code": "}) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 2142, "code": " mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context,", "label": 1}, {"snippet_id": 10873, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email'", "label": 0}, {"snippet_id": 59502, "code": "=None, version_note=None, ): self.files=files if not self.files: self.files=[MEMORY] elif memory: self.files=(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data", "label": 0}, {"snippet_id": 47649, "code": " data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"", "label": 0}, {"snippet_id": 20851, "code": " file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format", "label": 0}, {"snippet_id": 59429, "code": ", ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for CSV export in MB -set 0 to disable this limit \"\"\".strip()), ConfigOption(\"truncate_cells_html\", 2048, \"\"\" Truncate cells longer than this in", "label": 0}, {"snippet_id": 36625, "code": "'/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1,", "label": 0}, {"snippet_id": 5962, "code": ".flow=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'], scope=app.config['OIDC_SCOPES']) assert isinstance(self.flow, OAuth2WebServerFlow) self.cookie_serializer=TimedJSONWebSignatureSerializer", "label": 0}, {"snippet_id": 43029, "code": " with pk=5. Its QA page should hide the composition fields ''' response=self.client.get('/qa/extractionscript/15/', follow=True) response=self.client.get('/qa/extractedtext/5/', follow=True) self.assertIn(", "label": 0}, {"snippet_id": 16740, "code": " seeder.seed_games_and_powers(omitting_players=sitters, players_doubling_up=two_gamers) @permission_required('tournament.add_game') def seed_games(request, tournament_id, round_num): \"\"\"Seed players to the", "label": 0}, {"snippet_id": 78037, "code": "\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources", "label": 0}, {"snippet_id": 4026, "code": "%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,)", "label": 1}, {"snippet_id": 54123, "code": "('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation(): return render_template('getlocation.html') \"\"\"Politician Page ", "label": 0}, {"snippet_id": 23562, "code": " runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements", "label": 0}, {"snippet_id": 40002, "code": " max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField(max_length", "label": 0}, {"snippet_id": 69196, "code": " systemd.enable_service('traefik') def ensure_jupyterlab_extensions(): \"\"\" Install the JupyterLab extensions we want. \"\"\" extensions=[ '@jupyterlab/hub-extension', '@jupyter-widgets/jupyterlab-manager'", "label": 0}, {"snippet_id": 27250, "code": ", local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages", "label": 1}, {"snippet_id": 51393, "code": "=threading.Thread(target=pump_output_thread, args=(stderr, sys.stderr)) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel.recv_exit_status() def", "label": 0}, {"snippet_id": 35029, "code": " safestring from django.shortcuts import redirect from django.db.models import Count, Q from django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from", "label": 0}, {"snippet_id": 32276, "code": "] while self.char and self.char.isprintable() and not self.char.isspace(): value.append(self.char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self", "label": 0}, {"snippet_id": 79169, "code": " data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users", "label": 1}, {"snippet_id": 70379, "code": " in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\", "label": 1}, {"snippet_id": 56882, "code": " instance=concept) if form.is_valid(): form.save() return redirect('transaction_edit', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/concept_edit", "label": 0}, {"snippet_id": 68801, "code": "] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc.stdout.decode() assert proc.stderr.decode()==' -Validating: \\x1b[32mOK\\x1b[0m\\n' * len(extensions) def test_labextensions()", "label": 0}, {"snippet_id": 75467, "code": "/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def view_abstract(request, candidate_id): candidate=get_object_or_404(Candidate, id", "label": 0}, {"snippet_id": 44777, "code": "=self.objects.extext) self.assertEqual(note.qa_notes, None) self.assertRaises(ValidationError, note.clean) def test_long_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text", "label": 1}, {"snippet_id": 35850, "code": "['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return", "label": 0}, {"snippet_id": 67910, "code": ", DetailView from django.views.generic.edit import CreateView, UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q, Count from.models import Hunt from apps.threat", "label": 0}, {"snippet_id": 25686, "code": " __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head", "label": 0}, {"snippet_id": 70342, "code": " ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called", "label": 0}, {"snippet_id": 13896, "code": " depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME',", "label": 0}, {"snippet_id": 21923, "code": " redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int", "label": 0}, {"snippet_id": 77181, "code": " URL for fetching tiles.\"\"\" base_url=_TILE_BASE_URL %(self.target_url, self.request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id", "label": 0}, {"snippet_id": 8677, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view", "label": 0}, {"snippet_id": 998, "code": ".path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes:", "label": 1}, {"snippet_id": 66168, "code": "() unlock_failed_overlay=self.builder.get_object(\"unlock_failed_overlay\") self.overlay.add_overlay(unlock_failed_overlay) stack=Gtk.Stack() stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE) self", "label": 0}, {"snippet_id": 53111, "code": "/update.html') data={'purchase_step': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().purchase_step, PS_DAP) data={'status': 8} self.client.post(update_url, data) self.assertEqual", "label": 1}, {"snippet_id": 63783, "code": " eduid_common.api.decorators import MarshalWith from eduid_common.authn.utils import get_location from eduid_common.authn.loa import get_loa from eduid_common.authn.eduid_saml2 import get_authn_request,", "label": 0}, {"snippet_id": 21673, "code": ".PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys", "label": 0}, {"snippet_id": 53928, "code": "() self.files=SharedCache() self._last_update_time=time.time() return self def append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time", "label": 0}, {"snippet_id": 18516, "code": "==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', self.email", "label": 1}, {"snippet_id": 39761, "code": " extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'", "label": 0}, {"snippet_id": 7250, "code": " OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' from app.models.theq import Office from.base", "label": 0}, {"snippet_id": 66786, "code": " apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='domain/index.html' def get_context_data", "label": 0}, {"snippet_id": 66805, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): domain=request.GET", "label": 0}, {"snippet_id": 77198, "code": "\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles.\"\"\" tile_args=_TILE_ARGS %( self.tile_arg_names[\"x\"]", "label": 0}, {"snippet_id": 40765, "code": "'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get(", "label": 0}, {"snippet_id": 63852, "code": " @authn_views.route('/chpass') def chpass(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('change-password-action', force_authn=True) @authn_views.route('/terminate') def", "label": 0}, {"snippet_id": 75844, "code": "')), (False, _('Inactive')), ) TYPE_CHOICES=( ('prefix', _('Prefix Redirect')), ('page', _('Page Redirect')), ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir", "label": 0}, {"snippet_id": 73614, "code": " user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html'", "label": 1}, {"snippet_id": 57703, "code": "**decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps", "label": 0}, {"snippet_id": 69047, "code": "('configurable-http-proxy.service'): try: systemd.stop_service('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot stop configurable-http-proxy...\") if systemd.check_service_enabled", "label": 0}, {"snippet_id": 57880, "code": "'name': setting_name}) if not onboarding_setting: c_onboarding_settings().insert({'name': setting_name, 'data': ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT[setting_name", "label": 0}, {"snippet_id": 55929, "code": "' PROFILE_PATH='/p' EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse('', status=302) response['Location']='{}{}?", "label": 0}, {"snippet_id": 68526, "code": " request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('-datetime') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data", "label": 0}, {"snippet_id": 35009, "code": "'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem", "label": 1}, {"snippet_id": 57067, "code": "') concept_model=apps.get_model(concept) if not permission in concepts_permitted_by_employee: continue disabled=False url=concept_model._url.format('new/{}'.format(transaction.code)) if not permission in", "label": 0}, {"snippet_id": 30207, "code": " if request.args.get('state') !=login_session['state']: response=make_response(json.dumps('Invalid state parameter.'), 401) response.headers['Content-Type']='application/json' return response code=request", "label": 1}, {"snippet_id": 46587, "code": " context['clean_comp_data_form']=include_clean_comp_data_form(dg) else: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) @login_required() def data_group_create", "label": 0}, {"snippet_id": 15317, "code": "['series_name_user'] ) for key, value in model['inputs'].iteritems()] def get_inputs_choices(): models=load_json('models.json') inputs_by_models=[get_inputs_choices_by_model(model['model_system_name'])", "label": 0}, {"snippet_id": 27211, "code": " options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None,", "label": 0}, {"snippet_id": 7839, "code": " configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 35567, "code": " form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id", "label": 0}, {"snippet_id": 41822, "code": ".objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm", "label": 0}, {"snippet_id": 50435, "code": ".filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0)", "label": 0}, {"snippet_id": 14415, "code": " This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration", "label": 0}, {"snippet_id": 17635, "code": ".url_for('users.view_user', user_name=user.username), user.username)), 'warning') else: if app.config['USE_EMAIL_VERIFICATION']: send_verification_email(user) return flask.render_template('waiting.html'", "label": 0}, {"snippet_id": 24328, "code": "\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers", "label": 0}, {"snippet_id": 17318, "code": ".extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint('account', __name__)", "label": 0}, {"snippet_id": 68574, "code": ": model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_edit_form.html' def get_success_url(self): self.object.restart() return '/twitter_hunter' def hunt_del(request, pk): hunt=get_object_or_404", "label": 0}, {"snippet_id": 60496, "code": ".json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/-/versions<as_format:(\\.json)?$>\", ) app.add_route", "label": 0}, {"snippet_id": 83231, "code": " mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check", "label": 0}, {"snippet_id": 53624, "code": " encoding=redirection_source.encoding, write_through=True ) @property def source_encoding(self): if self.redirection_source.encoding: return self.redirection_source.encoding return 'utf8' def read_all(self) ", "label": 1}, {"snippet_id": 16146, "code": " TournamentPlayer, RoundPlayer, GamePlayer def get_round_or_404(tournament, round_num): \"\"\"Return the specified numbered round of the specified tournament or raise Http404.\"\"\" try: return tournament.round_numbered", "label": 0}, {"snippet_id": 48395, "code": " paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup'", "label": 0}, {"snippet_id": 29833, "code": " created=datetime.utcnow() instance=Tag(name=tagname, created=created) session.add(instance) return instance, True @gallery.route('/gallery/benwa/<int:post_id>/comment/add', methods=['POST']) @login_required", "label": 0}, {"snippet_id": 67284, "code": "['pk'] context['geoip']=GeoIP().lookup(ip) try: context['domain']=socket.gethostbyaddr(ip)[0] except Exception as e: pass vt=VT() context['vt_ip']=vt.getIPReport(ip) tm=ThreatMiner() context['tm_url']=tm", "label": 0}, {"snippet_id": 24676, "code": "\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required", "label": 1}, {"snippet_id": 19352, "code": ".services import get_port import ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of", "label": 1}, {"snippet_id": 41798, "code": "{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name','report_funcuse']", "label": 0}, {"snippet_id": 11117, "code": "\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the", "label": 0}, {"snippet_id": 50147, "code": "\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(\"/signup\") def renderSignUp(): if 'return_url' in request.args: session['return_url", "label": 0}, {"snippet_id": 49103, "code": "(edit)) document_type_form=DocumentTypeForm(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs", "label": 0}, {"snippet_id": 55331, "code": " lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self)", "label": 0}, {"snippet_id": 53182, "code": "(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().how_soon, None) data={ 'first_name", "label": 0}, {"snippet_id": 14673, "code": " def _get_node(board_cfg): if board_cfg.linux_on_class is not None: return board_cfg.linux_on_class() return board_cfg.board_class() @log_to_stderr def main(): \"\"\" serial_redirection cli main function \"", "label": 0}, {"snippet_id": 82102, "code": ", 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r", "label": 0}, {"snippet_id": 75487, "code": ".html',{'candidate': candidate}) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) @require_http_methods(['POST']) def staff_format_post(request, candidate_id): from", "label": 0}, {"snippet_id": 58318, "code": ": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" }, onboarding.NEXT_STEPS:{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps", "label": 0}, {"snippet_id": 39450, "code": " class ExtractedFunctionalUse(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500,", "label": 0}, {"snippet_id": 23205, "code": ".gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an object is a Cython function or method\"\"\" def check_cython(x): return type(x).__name__==\"cython_function_or_method", "label": 0}, {"snippet_id": 7767, "code": " pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not", "label": 1}, {"snippet_id": 55915, "code": " experiences.factories import create_get_experience_interactor from profiles.factories import create_get_profile_interactor EMAIL_CONFIRMATION_PATH='/people/me/email-confirmation' LOGIN_PATH='/people/me/login'", "label": 0}, {"snippet_id": 13617, "code": "'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES", "label": 0}, {"snippet_id": 12803, "code": " None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders", "label": 0}, {"snippet_id": 59046, "code": "'success': False, 'message': 'You already have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code", "label": 0}, {"snippet_id": 10874, "code": ".is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if", "label": 0}, {"snippet_id": 15518, "code": " or str=='None': str=datetime.today().strftime('%Y-%m-%d') str=str[:10] return datetime.strptime(str, '%Y-%m-%d') if get_command('start_day'): form.start_day.data=str_to_datetime(get_command('start_day", "label": 0}, {"snippet_id": 40728, "code": "=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card???') response_html", "label": 0}, {"snippet_id": 39616, "code": "}) qa_checked=models.BooleanField(default=False, verbose_name=\"QA approved\") qa_edited=models.BooleanField(default=False, verbose_name=\"QA edited\") qa_approved_date=models.DateTimeField(null=True, blank", "label": 0}, {"snippet_id": 54750, "code": "] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data)) \t\t\tself", "label": 0}, {"snippet_id": 21595, "code": " kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR,", "label": 0}, {"snippet_id": 13674, "code": " originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views", "label": 0}, {"snippet_id": 4787, "code": "'testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password", "label": 0}, {"snippet_id": 72815, "code": " create_position_form.is_valid(): position=create_position_form.save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form", "label": 1}, {"snippet_id": 10498, "code": " get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from", "label": 0}, {"snippet_id": 50040, "code": ".route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social", "label": 0}, {"snippet_id": 20436, "code": " self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect", "label": 0}, {"snippet_id": 13794, "code": ")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that", "label": 0}, {"snippet_id": 44057, "code": "('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser", "label": 0}, {"snippet_id": 63360, "code": " according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE': saml_config, 'NO_AUTHN_URLS':[", "label": 0}, {"snippet_id": 17723, "code": ".PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash", "label": 0}, {"snippet_id": 36353, "code": ".qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( ", "label": 0}, {"snippet_id": 38499, "code": " the document has been uploaded to the file system, the document is considered \"matched\" to that source file. ``extracted`` When the content of a data document has been extracted by manual data entry or", "label": 0}, {"snippet_id": 35547, "code": "'POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id", "label": 0}, {"snippet_id": 82419, "code": "'^categories/$', CategoryListView.as_view(), name='category-list-view'), re_path(r'^detail/category/(?P<pk>(\\d)+)/$', CategoryDetailView.as_view(), name='category-detail-view'), re_path(r'^update/category/(?P", "label": 0}, {"snippet_id": 81356, "code": ".state=='open': if counter==1: attendee_list +=registration.partner_id.sudo().name else: attendee_list +=', ' +registration.partner_id.sudo().name counter +=1 return attendee_list def start_automatic_event_creation", "label": 0}, {"snippet_id": 80474, "code": ")) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception", "label": 0}, {"snippet_id": 11460, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render", "label": 0}, {"snippet_id": 48837, "code": ", 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter", "label": 0}, {"snippet_id": 61455, "code": ", HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs", "label": 0}, {"snippet_id": 59849, "code": " metadata.get(\"source_url\") or self.metadata(\"source_url\"), \"license\": metadata.get(\"license\") or self.metadata(\"license\"), \"license_url\": metadata.get(\"license_url\") or self.metadata(\"license_url\"), \"about", "label": 0}, {"snippet_id": 22297, "code": "=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self.include_log_monitor=include_log_monitor", "label": 0}, {"snippet_id": 21596, "code": " check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR, check_alive=check_alive", "label": 0}, {"snippet_id": 51858, "code": ".route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user form entry, register user if valid.\"\"\" email=request.form.get('email') pw=request.form.get('pw') displayname=request.form.get(", "label": 0}, {"snippet_id": 3369, "code": "'OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name)", "label": 1}, {"snippet_id": 58117, "code": "}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 13.0), ({onboarding", "label": 1}, {"snippet_id": 18102, "code": " password reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset-request.txt', **tmpl_context), html=flask.render_template('email/reset-request.html'", "label": 0}, {"snippet_id": 35169, "code": "(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count(", "label": 0}, {"snippet_id": 38163, "code": " verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj", "label": 0}, {"snippet_id": 68529, "code": ": query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('-datetime') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render", "label": 0}, {"snippet_id": 3408, "code": " view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request", "label": 0}, {"snippet_id": 5075, "code": "=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id", "label": 0}, {"snippet_id": 5896, "code": " else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self, app): \"\"\" Do setup that requires a Flask app. \"\"\" self.app=app", "label": 0}, {"snippet_id": 14085, "code": "[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry", "label": 0}, {"snippet_id": 32591, "code": "''' A node that executes two nodes sequentially. Args: first: The first node to execute. second: The second node to execute. ''' def __init__(self, first, second): self.first=first self.second=second def", "label": 0}, {"snippet_id": 80647, "code": "(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set BiFi Motor Position', label='Absolute Position:', value=self.matisse.query('MOTBI:POS?',", "label": 0}, {"snippet_id": 62944, "code": " resp=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr=auth_response(token, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}", "label": 0}, {"snippet_id": 47162, "code": "' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc.extracted=True doc.save() context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset", "label": 0}, {"snippet_id": 18569, "code": ".set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"\" SignInHandler(): Class that handles /signin \"\"\" class SignInHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tRenders the", "label": 1}, {"snippet_id": 60666, "code": " info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html\".format(status)] +templates info.update( {\"ok\": False, \"error\": message, \"status\": status,", "label": 0}, {"snippet_id": 77268, "code": " target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close() logger.debug(\"Server", "label": 1}, {"snippet_id": 70878, "code": " not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 69851, "code": ".utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below", "label": 0}, {"snippet_id": 1357, "code": ": '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 60118, "code": " sqlite_extensions[extension]=result.fetchone()[0] else: sqlite_extensions[extension]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\", \"FTS4\", \"FTS3\"): try: conn.execute( \"CREATE VIRTUAL TABLE", "label": 0}, {"snippet_id": 12510, "code": " branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and", "label": 0}, {"snippet_id": 20334, "code": "\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must", "label": 0}, {"snippet_id": 12731, "code": " a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get", "label": 0}, {"snippet_id": 5841, "code": "(object): \"\"\" @see: https://developers.google.com/api-client-library/python/start/get_started @see: https://developers.google.com/api-client-library/python/samples/authorized_api_web_server_calendar.py \"", "label": 0}, {"snippet_id": 11994, "code": "(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode", "label": 0}, {"snippet_id": 10668, "code": "(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages", "label": 0}, {"snippet_id": 71815, "code": ") req.load_user_by_profile(p1) user_count=models.User.query().count() self.assertEqual(user_count, 1) def test_add_message(self): req=EngineAuthRequest.blank('/auth/google') req._load_session() msgs=req", "label": 0}, {"snippet_id": 51041, "code": "( s for s in steps if s[0] not in \"+-\") def modify_optional_steps(self, *steps): ''' Add or remove optional steps in the build. \"+foo\" include step foo. \"-foo\" exclude step foo. ''' for name in steps: if", "label": 0}, {"snippet_id": 15684, "code": "=command.get('input_source_initial', '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.delta.data=command", "label": 0}, {"snippet_id": 23659, "code": "(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger.propagate=False", "label": 1}, {"snippet_id": 72127, "code": "'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports", "label": 0}, {"snippet_id": 53827, "code": " modified \"\"\" stdout=self.stdout_interceptor stderr=self.stderr_interceptor return max([ self._last_update_time, stdout.last_write_time if stdout else 0, stderr.last_write_time if stderr else 0, ]) @property", "label": 0}, {"snippet_id": 72508, "code": ", CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from django.utils.translation import gettext as _ from screendoor.redactor import parse_applications from.forms import ScreenDoorUserCreationForm", "label": 1}, {"snippet_id": 867, "code": " mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context,", "label": 1}, {"snippet_id": 38106, "code": " blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product", "label": 0}, {"snippet_id": 43191, "code": " import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import", "label": 1}, {"snippet_id": 42204, "code": ".objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>' self.assertIn(span, response, 'Check", "label": 0}, {"snippet_id": 84270, "code": "=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET':", "label": 0}, {"snippet_id": 59962, "code": " filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(", "label": 0}, {"snippet_id": 26129, "code": ") process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address, self._raylet_socket_name, self._plasma_store_socket_name, self._ray_params.worker_path, self._ray_params.num_cpus, self", "label": 1}, {"snippet_id": 12973, "code": " special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message", "label": 0}, {"snippet_id": 4446, "code": " test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client(", "label": 0}, {"snippet_id": 77813, "code": "'Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users", "label": 0}, {"snippet_id": 8571, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()", "label": 0}, {"snippet_id": 70989, "code": "> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html'", "label": 0}, {"snippet_id": 65013, "code": ".Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0] left_valid=False if type(left)==ast.Call: if type(left.func)=", "label": 0}, {"snippet_id": 30708, "code": ">/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if editGrudget", "label": 1}, {"snippet_id": 82791, "code": "(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str", "label": 0}, {"snippet_id": 13277, "code": " _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce", "label": 0}, {"snippet_id": 77917, "code": " organisation %s' % org['name']) self.patch_organisation_users(org['id'], users) else: print('-Nothing to update for organisation %s' % org['name']) print('-------------------------') return \"COMPLETED.", "label": 0}, {"snippet_id": 30831, "code": ": session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete) @app.route", "label": 0}, {"snippet_id": 69156, "code": ")) traefik.ensure_traefik_config(STATE_DIR) unit_params=dict( python_interpreter_path=sys.executable, jupyterhub_config_path=os.path.join(HERE, 'jupyterhub_config.py'), install_prefix=INSTALL_PREFIX, )", "label": 0}, {"snippet_id": 29556, "code": "=username) user.oauth_token=session.pop('token') user.oauth_secret=session.pop('secret') db.session.commit() login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username", "label": 0}, {"snippet_id": 35588, "code": ".objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute", "label": 0}, {"snippet_id": 80046, "code": " base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 55409, "code": ".path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.rename(self.path,other", "label": 0}, {"snippet_id": 32099, "code": "-1 self.char=None self.read() def read(self): ''' Read a single char from the stream and store it in self.char. Returns: The value of self.char. ''' self.position +=1 if self.position < len(self.string)", "label": 0}, {"snippet_id": 27249, "code": "=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None", "label": 1}, {"snippet_id": 43625, "code": " the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self", "label": 0}, {"snippet_id": 25184, "code": "[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver from redis shard{", "label": 0}, {"snippet_id": 36306, "code": "/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/'", "label": 0}, {"snippet_id": 3931, "code": ") self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username", "label": 0}, {"snippet_id": 3000, "code": " self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=[", "label": 0}, {"snippet_id": 45643, "code": "=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request", "label": 0}, {"snippet_id": 31510, "code": " LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True STATIC_ROOT=os.environ.get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static')) STATIC_URL='/static/' STATICFILES_DIRS=", "label": 0}, {"snippet_id": 60433, "code": ".jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?)?$>\") app.add_route(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname", "label": 0}, {"snippet_id": 40818, "code": " orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save(", "label": 0}, {"snippet_id": 20773, "code": " node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def", "label": 0}, {"snippet_id": 32490, "code": ", os.O_CREAT | os.O_WRONLY | os.O_APPEND)) elif self.accept(TokenType.REDIRECT_IN): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(0,(filename, os.O_RDONLY)) else: return None def", "label": 0}, {"snippet_id": 50979, "code": " step in self._steps if self.is_optional) def specify_optional_steps(self, *steps): ''' Specify which optional steps to include in the build. \"default\" includes all default steps. \"all\" includes all steps", "label": 0}, {"snippet_id": 38878, "code": " def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return self.type=='HH' def get_extract_models(self): '''returns", "label": 0}, {"snippet_id": 61992, "code": "=expected_value: return True else: return False def validate_cache_control_header(page, expected_directive): header=page.headers.get('Cache-Control', '') directives=[directive.lower().strip() for directive in", "label": 0}, {"snippet_id": 74533, "code": ": if request.user.is_authenticated(): next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error('login() -got anonymous user: %s' % request.META) return", "label": 1}, {"snippet_id": 23514, "code": "]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"\"Determine a task's resource requirements. Args", "label": 0}, {"snippet_id": 62814, "code": ".headers['Set-Cookie'] return cookie def authn(self, url, force_authn=False): \"\"\" Common code for the tests that need to send an authentication request. This checks that the client is redirected to the", "label": 1}, {"snippet_id": 9443, "code": " limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user", "label": 0}, {"snippet_id": 4663, "code": " inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username'", "label": 0}, {"snippet_id": 51599, "code": ".specify_optional_steps, 'userlock':userlock, 'fail':fail, 'scp':scp, 'require_version':require_version } try: execfile(os.path.join('projectdata', buildname+'_behaviour.py'), behaviour_globals) builder.run(argv)", "label": 0}, {"snippet_id": 34688, "code": "'curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n=Count('extracted_text__data_document'", "label": 0}, {"snippet_id": 80670, "code": " BiFi motor position to{target_pos}.\") self.matisse.set_bifi_motor_pos(target_pos) @handled_slot(bool) def set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window", "label": 0}, {"snippet_id": 16337, "code": ": continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True: i, created=RoundPlayer.objects.get_or_create(player=p, the_round=r) try: i.full_clean() except ValidationError as e: form.add_error(None", "label": 0}, {"snippet_id": 48404, "code": " page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form(request, pk, template_name=(", "label": 0}, {"snippet_id": 83920, "code": " is_private=None, *args, **kw): if request.method=='GET': article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({", "label": 0}, {"snippet_id": 28055, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str)", "label": 0}, {"snippet_id": 43534, "code": "'../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made", "label": 0}, {"snippet_id": 22572, "code": " extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply", "label": 0}, {"snippet_id": 40341, "code": " force_doc_id=None): \"\"\" Creates a QA Group for the specified Script object; Use all the related ExtractedText records or, if there are more than 100, select 20% of them. \"\"\" from.qa_group import QAGroup", "label": 0}, {"snippet_id": 56061, "code": " PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute()", "label": 0}, {"snippet_id": 81044, "code": "._update_counter_subscription(event, partner, subscription_update_counter) else: _logger.info('Found existing registration, no seats available') else: if event.seats_available > 0 and event.seats_availability==u'limited'", "label": 0}, {"snippet_id": 265, "code": " charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head", "label": 0}, {"snippet_id": 44743, "code": "\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised", "label": 0}, {"snippet_id": 30322, "code": "']='application/json' return response if result['issued_to'] !=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's client ID does not match app", "label": 0}, {"snippet_id": 1437, "code": " fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os", "label": 1}, {"snippet_id": 2437, "code": " template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist:", "label": 0}, {"snippet_id": 75071, "code": " has already been submitted and is locked.') if request.method=='POST': post_data=request.POST.copy() post_data['candidate']=candidate.id form=MetadataForm(post_data, instance=candidate.thesis) if form", "label": 0}, {"snippet_id": 59548, "code": "=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(\"max_returned_rows\") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self", "label": 0}, {"snippet_id": 59735, "code": "\"datasette/static/app.css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name", "label": 0}, {"snippet_id": 76032, "code": ".project.default_version, ) return '{from_url} ->{to_url}'.format( from_url=from_url, to_url=to_url, ) return '' def get_full_path(self, filename, language=None, version_slug=None): \"\"\" Return a full path for", "label": 1}, {"snippet_id": 45843, "code": "=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk): doc=get_object_or_404", "label": 0}, {"snippet_id": 61649, "code": " good_cross_domain_policy=validate_cross_domain_policy(page), http_1_0_caching_disabled=validate_pragma(page), expires_set=validate_expires(page), cache_control_set=validate_cache_control_set(page), cache_control_revalidate_set", "label": 1}, {"snippet_id": 43276, "code": " TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome()", "label": 1}, {"snippet_id": 74506, "code": ".shortcuts import render, get_object_or_404 from django.views.decorators.http import require_http_methods from.models import Person, Candidate, Keyword, CommitteeMember from.widgets import ID_VAL_SEPARATOR", "label": 0}, {"snippet_id": 1377, "code": " basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath", "label": 1}, {"snippet_id": 33053, "code": ".tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',)", "label": 0}, {"snippet_id": 67409, "code": " import datetime, timezone, timedelta class EventListView(PaginationMixin, ListView): model=Event template_name='threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data", "label": 0}, {"snippet_id": 52254, "code": " of team page, with board\"\"\" team_id=request.form.get(\"team\") session[\"team_id\"]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object)", "label": 0}, {"snippet_id": 23737, "code": "(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example", "label": 0}, {"snippet_id": 30693, "code": "]) session.add(newGrudget) session.commit() return redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST'", "label": 0}, {"snippet_id": 77897, "code": " in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self", "label": 0}, {"snippet_id": 38869, "code": ".type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type==", "label": 0}, {"snippet_id": 33143, "code": "\nfrom django.contrib import admin from dashboard.models import * from django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import ", "label": 0}, {"snippet_id": 38112, "code": ".TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product', through='ProductToPUC') extracted_habits_and_practices", "label": 0}, {"snippet_id": 51093, "code": " select_optional_steps(self, *args, **kwargs): ''' Deprecated. Use specify_optional_steps or modify_optional_steps instead. ''' kwargs=process_kwargs( \"select_optional_steps\", kwargs, {\"disable_others\":False}", "label": 0}, {"snippet_id": 78760, "code": " user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError", "label": 0}, {"snippet_id": 47792, "code": "=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type", "label": 0}, {"snippet_id": 36947, "code": "=chart_month: product_stats.insert(i,{'product_count': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view", "label": 0}, {"snippet_id": 14404, "code": " the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc", "label": 0}, {"snippet_id": 65656, "code": " builder.add_from_resource( \"/run/terminal/KeepassGtk/override_dialog.ui\") self.override_dialog=builder.get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog", "label": 0}, {"snippet_id": 64025, "code": " The current session object :return: NameID :rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=", "label": 0}, {"snippet_id": 56498, "code": " def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self, url):", "label": 0}, {"snippet_id": 55326, "code": ",mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t", "label": 0}, {"snippet_id": 41205, "code": "'hhe_report_number':['47']} response=self.client.post('/extractedtext/edit/354784/', data=data, follow=True) doc=DataDocument.objects.get(pk=354784) self.assertTrue(doc.extracted, \"This document is not", "label": 0}, {"snippet_id": 4902, "code": "(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2", "label": 0}, {"snippet_id": 4534, "code": ".\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response", "label": 0}, {"snippet_id": 23206, "code": ", driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an object is a Cython function or method\"\"\" def check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython", "label": 0}, {"snippet_id": 76700, "code": "(world_wrapped_tile_col, abs_tile_row, zoom_level) tile_url=base_url +tile_args im_tile=_FetchMapTile(tile_url) if im_tile: if im_tile.size==(1, 1): im_tile=im_tile.resize((_TILE_PIXEL_SIZE, _TILE_PIXEL_SIZE))", "label": 0}, {"snippet_id": 14063, "code": " enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id", "label": 0}, {"snippet_id": 67059, "code": "**kwargs) context['search_form']=SearchForm() filehash=self.kwargs['pk'] vt=VT() context['vt_hash']=vt.getFileReport(filehash) context['vt_behavior']=vt.getFileBehavior(filehash) tm=ThreatMiner() context", "label": 0}, {"snippet_id": 82581, "code": "(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns", "label": 0}, {"snippet_id": 76456, "code": ": im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\", str(tilepixel_rect)) offset_within_tiled_image=geom.Pair( tilepixel_rect", "label": 0}, {"snippet_id": 63475, "code": "() as c: response=c.get('/saml2-metadata') self.assertEqual(response.status, '200 OK') def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout", "label": 0}, {"snippet_id": 7949, "code": ", a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST", "label": 0}, {"snippet_id": 16262, "code": " formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if formset.is_valid", "label": 0}, {"snippet_id": 58234, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSE, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_THREAD, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 78827, "code": " title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if", "label": 0}, {"snippet_id": 25009, "code": "(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message", "label": 0}, {"snippet_id": 70519, "code": "\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if", "label": 0}, {"snippet_id": 33539, "code": "=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 1, ethylparaben_stats['dds_n'], 'There should now be 1 datadocument associated with ethylaraben')", "label": 0}, {"snippet_id": 41947, "code": "=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') self.objects.dg", "label": 0}, {"snippet_id": 1355, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory", "label": 0}, {"snippet_id": 20962, "code": " stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in", "label": 0}, {"snippet_id": 23760, "code": ", [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory", "label": 0}, {"snippet_id": 80957, "code": "(self, event_id, event_is_participating, **post): event_id=int(event_id) event_is_participating=event_is_participating event=http.request.env['event.event'].sudo().browse(event_id) subscription_update_counter", "label": 0}, {"snippet_id": 17686, "code": " form=form) @bp.route('/password-reset/<payload>', methods=['GET', 'POST']) @bp.route('/password-reset', methods=['GET', 'POST']) def password_reset(payload=None): if not app.config['ALLOW_PASSWORD_RESET']", "label": 0}, {"snippet_id": 64077, "code": ".config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location}).data user=current_app.central_userdb.get_user_by_eppn(eppn) current_app.logger.debug('Logout process started", "label": 0}, {"snippet_id": 6737, "code": ".generate_confirmation_token() send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token) flash('Check your inbox! A confirmation email has been sent.') return redirect(url_for('auth.login", "label": 0}, {"snippet_id": 46489, "code": " i, row in enumerate(csv.DictReader(info)): try: extracted_chemical=ExtractedChemical.objects.get(rawchem_ptr=int(row['id'])) except ExtractedChemical.DoesNotExist as e: extracted_chemical=None context", "label": 0}, {"snippet_id": 21135, "code": "=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"", "label": 0}, {"snippet_id": 45175, "code": " .annotate(source_type=F('document_type__title'), document_count=Count('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats", "label": 0}, {"snippet_id": 82800, "code": ":param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param", "label": 0}, {"snippet_id": 5804, "code": " itsdangerous import TimedJSONWebSignatureSerializer, SignatureExpired __all__=['OpenIDConnect', 'MemoryCredentials'] logger=logging.getLogger(__name__) class MemoryCredentials(dict): \"\"\" Non-persistent local", "label": 1}, {"snippet_id": 44017, "code": ".Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_hem(self): for i in range(27): ds=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/'", "label": 1}, {"snippet_id": 48295, "code": "=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)", "label": 0}, {"snippet_id": 57000, "code": " len([k for k in data.keys() if k !='page']) > 0: self.is_filtered=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency')", "label": 0}, {"snippet_id": 2260, "code": "('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath", "label": 1}, {"snippet_id": 63177, "code": ", 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith", "label": 0}, {"snippet_id": 40188, "code": "'product categorization'), ('DC', 'data cleaning')) QA_COMPLETE_PERCENTAGE=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators=[URLValidator", "label": 1}, {"snippet_id": 74105, "code": " return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial): EVAL_ACTION_TYPE=\"DASHBOARD\" class ReportBasePartial(EvalDataMixin, wizard_builder_partials.WizardFormPartial", "label": 0}, {"snippet_id": 66249, "code": ".unlock_database_stack_box.add(self.overlay) self.unlock_database_stack_box.show_all() self.parent_widget.add(self.unlock_database_stack_box) def connect_events(self): password_unlock_button=self.builder.get_object", "label": 0}, {"snippet_id": 32894, "code": " self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type,", "label": 0}, {"snippet_id": 68957, "code": " xCjZ5pp2JwdCjquXLTmUnbIZ9LGV54UZ/MeiG8yVu6pxbiGnXo4Ekbk6xgi1ewLi vGmz4QRfVklV0dba3Zj0fRozfZ22qUHxCfDM7ad0eBXMFmHiN8hg3IUHTO+UdlX/ aH3gADFAvSVDv0v8t6dGc6XE9Dr7mGEFnQMHO4zhM1HaS2Nh0TiL2tFLttLbfG5o QlxCfXX9", "label": 0}, {"snippet_id": 25478, "code": ") time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument", "label": 0}, {"snippet_id": 83468, "code": " article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article", "label": 0}, {"snippet_id": 73794, "code": " change_positions_sort_method(request, sort_by): if request.POST.get(\"sort-created\"): return '-created' elif request.POST.get(\"sort-closed\"): return '-date_closed' elif request.POST.get(\"sort-position\"", "label": 0}, {"snippet_id": 47944, "code": "(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload", "label": 0}, {"snippet_id": 23557, "code": " The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked", "label": 0}, {"snippet_id": 42769, "code": ".assertIn(f'/qa/extractedtext/{et.pk}/'.encode(), response.content) group_count=QAGroup.objects.filter(extraction_script_id=pk).count() self.assertTrue(group_count==1) self.assertTrue(Script.objects.get", "label": 0}, {"snippet_id": 73062, "code": " CreatePositionForm(forms.ModelForm): text=CreatePositionFormText.upload_new_position description=CreatePositionFormText.please_select_either_filetype pdf_name=CreatePositionFormText.pdf url_name=CreatePositionFormText", "label": 0}, {"snippet_id": 64056, "code": " view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest. \"\"\" eppn=session.get('user_eppn') if eppn is None: current_app.logger.info('Session cookie has expired, no", "label": 0}, {"snippet_id": 8567, "code": ".id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders", "label": 0}, {"snippet_id": 42833, "code": " response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True) self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count('extractedtext", "label": 1}, {"snippet_id": 82279, "code": " success_url=reverse_lazy('category-list-view') class CategoryDeleteView(LoginRequiredMixin, DeleteView): model=Category template_name='category-delete-view.html' success_url=reverse_lazy('category-list-view", "label": 0}, {"snippet_id": 14896, "code": "(app.static_folder, name) return json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return", "label": 0}, {"snippet_id": 70419, "code": " if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path", "label": 1}, {"snippet_id": 18146, "code": "\"+payload+\" -\"\r for domain in domains:\r if domain !=\"\":\r \r url=\"https://\" +domain +payload\r url=url.strip()\r \r try:\r r=requests.head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \"", "label": 1}, {"snippet_id": 59959, "code": "._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename", "label": 0}, {"snippet_id": 23532, "code": " number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources required by", "label": 0}, {"snippet_id": 69219, "code": "'install' ] +extensions) def ensure_jupyterhub_package(prefix): \"\"\" Install JupyterHub into our conda environment if needed. We install all python packages from PyPI as much as possible in the hub environment", "label": 0}, {"snippet_id": 62519, "code": ".data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing import EduidAPITestCase from eduid_common.authn.cache import OutstandingQueriesCache from eduid_common.authn.utils import", "label": 0}, {"snippet_id": 51492, "code": " windows_program_exists(program): return subprocess.call([\"where\", \"/q\", program], shell=False)==0 def other_program_exists(program): return subprocess.call([\"/bin/sh\", \"-c\", \"command -v \"+program], shell", "label": 1}, {"snippet_id": 68685, "code": "): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request", "label": 0}, {"snippet_id": 72934, "code": "-position\"): sort_by='position_title' elif request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get", "label": 1}, {"snippet_id": 25098, "code": ".task_table() driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex, task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object", "label": 0}, {"snippet_id": 61146, "code": " component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides", "label": 0}, {"snippet_id": 10716, "code": "'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 60808, "code": " component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid", "label": 0}, {"snippet_id": 45584, "code": " form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the", "label": 0}, {"snippet_id": 74621, "code": "=Person.objects.get(orcid=request.POST['orcid']) except Person.DoesNotExist: pass return person_instance def get_shib_info_from_request(request): info={} info['last_name']=request.META.get('Shibboleth-sn", "label": 0}, {"snippet_id": 33056, "code": "): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed", "label": 0}, {"snippet_id": 47508, "code": " reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery", "label": 1}, {"snippet_id": 56363, "code": " def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_experience_redirect(self, share_id): client=Client() self.response=client.get", "label": 0}, {"snippet_id": 3134, "code": ".\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth", "label": 0}, {"snippet_id": 81354, "code": " reg_ids: if registration.state=='open': if counter==1: attendee_list +=registration.partner_id.sudo().name else: attendee_list +=', ' +registration.partner_id.sudo().name counter +=1 return attendee_list", "label": 0}, {"snippet_id": 41698, "code": ".objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!", "label": 0}, {"snippet_id": 14804, "code": " password): user_id=db.incr('user:ids') db.hset('user:emails', email, user_id) db.hmset('user:%s' % user_id,{ 'user_id': user_id, 'email': email, 'password_hash': password }) return auth_get_user_by_id", "label": 0}, {"snippet_id": 25978, "code": " stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR", "label": 1}, {"snippet_id": 64064, "code": "\"\" eppn=session.get('user_eppn') if eppn is None: current_app.logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload", "label": 0}, {"snippet_id": 70284, "code": " parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False", "label": 0}, {"snippet_id": 35018, "code": " rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem.rid if rawchem.rid else ''", "label": 1}, {"snippet_id": 38033, "code": " ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO': one, 'UN': one, 'FU': two, 'HP': three, 'CP': four, 'HH': five, } func=dg_types.get", "label": 0}, {"snippet_id": 69520, "code": " the user conda environment to PATH for notebook terminals, but not the hub venv. This means tljh-config is not actually accessible. We symlink to /usr/bin and not /usr/local/bin, since /usr/local/bin is", "label": 0}, {"snippet_id": 39698, "code": "(self): \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if group_type_code in", "label": 0}, {"snippet_id": 77580, "code": ".__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self,", "label": 0}, {"snippet_id": 47774, "code": "))) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n", "label": 0}, {"snippet_id": 75285, "code": "(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) cm=CommitteeMember.objects.get(id=cm_id) candidate.committee_members.remove(cm", "label": 0}, {"snippet_id": 53706, "code": " write_both(self, *args, **kwargs): abort_thread() if self.active: self.last_write_time=time.time() super(RedirectBuffer, self).write(*args, **kwargs) return self.redirection_source.write(*args, **kwargs)", "label": 0}, {"snippet_id": 2741, "code": "): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME'", "label": 0}, {"snippet_id": 63049, "code": ") self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login') def test_chpass_authn(self): self.authn('/chpass', force_authn=True) def test_terminate_authn", "label": 0}, {"snippet_id": 68503, "code": " class TweetsView(PaginationMixin, ListView): template_name='twitter_hunter/tweets.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(", "label": 0}, {"snippet_id": 29299, "code": " and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string(name) if hasattr(mod, 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app): @app", "label": 0}, {"snippet_id": 33604, "code": "(2, ethylparaben_stats['dds_wf_n'], 'There should be 2 extracted chemicals \\ with weight fraction data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273", "label": 0}, {"snippet_id": 79717, "code": ", closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not", "label": 0}, {"snippet_id": 62831, "code": ". This checks that the client is redirected to the idp. :param url: the url of the desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated", "label": 0}, {"snippet_id": 49947, "code": "]) @app.route('/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name: if name", "label": 0}, {"snippet_id": 59709, "code": "=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self): if not hasattr(self, \"_app_css_hash", "label": 0}, {"snippet_id": 68225, "code": " HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name='twitter/index.html' context_object_name='tws' paginate_by=30 def get_context_data(self,", "label": 0}, {"snippet_id": 70515, "code": "\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 63107, "code": "'reauthn-for-chpass'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/chpass', eppn, _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn(", "label": 0}, {"snippet_id": 66075, "code": "', '3.0') import ntpath import threading class UnlockDatabase: builder=NotImplemented parent_widget=NotImplemented window=NotImplemented database_filepath=NotImplemented database_manager=NotImplemented", "label": 0}, {"snippet_id": 60305, "code": ".fetchmany(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args==('interrupted", "label": 0}, {"snippet_id": 47501, "code": ".db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models", "label": 1}, {"snippet_id": 66477, "code": ".close() def on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_path=keyfile_unlock_select_button.get_label() try", "label": 0}, {"snippet_id": 34925, "code": " big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines", "label": 0}, {"snippet_id": 5999, "code": " return self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def set_cookie_id_token(self, id_token)", "label": 0}, {"snippet_id": 9749, "code": " enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, ", "label": 0}, {"snippet_id": 42868, "code": ").first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script group_count=QAGroup.objects.filter(extraction_script=scr).count() self.assertTrue", "label": 0}, {"snippet_id": 82592, "code": " if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self.pid) if", "label": 0}, {"snippet_id": 71911, "code": "'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) msgs_key=req.get_messages() self.assertEquals(msgs_key, None) def test_set_redirect_uri(self): req=EngineAuthRequest.blank('", "label": 1}, {"snippet_id": 26982, "code": ". object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed", "label": 0}, {"snippet_id": 10626, "code": ") if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id", "label": 1}, {"snippet_id": 1274, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return False", "label": 0}, {"snippet_id": 2180, "code": "(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r", "label": 0}, {"snippet_id": 27088, "code": " the password from connecting to Redis if provided. plasma_directory: A directory where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that will be run by", "label": 0}, {"snippet_id": 76152, "code": "/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path", "label": 1}, {"snippet_id": 37440, "code": "'manufacturer', 'brand_name', 'size', 'color', 'model_number', 'short_description', 'long_description'] class ProductViewForm(ProductForm): class Meta(ProductForm.Meta): exclude=('title', 'long_description',", "label": 0}, {"snippet_id": 15855, "code": "] / 1000), 'commands': item['commands'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required", "label": 0}, {"snippet_id": 72631, "code": ".split( '.')[1].split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request,", "label": 1}, {"snippet_id": 36933, "code": "'puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month'] !=chart_month:", "label": 0}, {"snippet_id": 54801, "code": ".prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str(book_edition)+\" on problem \"+problem_number \t", "label": 1}, {"snippet_id": 64069, "code": " eppn is None: current_app.logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location", "label": 0}, {"snippet_id": 8639, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return", "label": 0}, {"snippet_id": 39665, "code": "=InheritanceManager() def __str__(self): return str(self.data_document) def next_extracted_text_in_qa_group(self): nextid=0 extextnext=get_next_or_prev(ExtractedText.objects.filter( qa_group=self.qa_group", "label": 0}, {"snippet_id": 19872, "code": " if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0", "label": 0}, {"snippet_id": 28922, "code": " shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a", "label": 0}, {"snippet_id": 39347, "code": " return str(self.raw_chem_name) if self.raw_chem_name else '' @classmethod def detail_fields(cls): return['extracted_text', 'raw_chem_name', 'raw_cas', 'raw_min_comp', 'raw_central_comp', 'raw_max_comp", "label": 0}, {"snippet_id": 44452, "code": "'specialP@55word') superuser=User.objects.create_superuser(username='SuperKaryn', password='specialP@55word', email='me@epa.gov') ds=DataSource.objects.create(title='Data Source for Test', estimated_records=2,", "label": 0}, {"snippet_id": 5244, "code": ".test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4", "label": 0}, {"snippet_id": 77233, "code": " server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1] !=\"/\": target_url +=\"/\" logger", "label": 0}, {"snippet_id": 66860, "code": ").lookup(domain) except Exception as e: print(e) pass try: context['ipaddress']=socket.gethostbyname(domain) except Exception as e: pass vt=VT() context['vt_domain']=vt.getDomainReport(domain) tm=ThreatMiner", "label": 0}, {"snippet_id": 60729, "code": "): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component", "label": 0}, {"snippet_id": 51071, "code": "._enabled_options.add(name) elif name.startswith(\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with", "label": 0}, {"snippet_id": 59067, "code": " @staticmethod def get_by_user_or_404(user, **kwargs): ''' Do a search for invite by passed parameters and user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user", "label": 0}, {"snippet_id": 80371, "code": " self.set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action.triggered", "label": 0}, {"snippet_id": 62121, "code": "'Content-Security-Policy' not in page.headers: return False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return", "label": 0}, {"snippet_id": 72591, "code": "}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password", "label": 0}, {"snippet_id": 83466, "code": ".cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor", "label": 0}, {"snippet_id": 33777, "code": " rc.raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull", "label": 1}, {"snippet_id": 28425, "code": " empty string. TODO(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and", "label": 0}, {"snippet_id": 67248, "code": "): if request.GET.get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name", "label": 1}, {"snippet_id": 39798, "code": "'' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is a part of. direction is 'next' or 'prev' ''' getit=False if direction=='prev", "label": 0}, {"snippet_id": 51623, "code": "[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript(endpoint, params): keys=params.keys() values=params.values() pair=[keys[i]", "label": 0}, {"snippet_id": 46158, "code": ",'ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context['msg']=('The following columns", "label": 0}, {"snippet_id": 56593, "code": ", url): assert self.response.status_code==302 assert self.response['Location']==url return self class AASATestCase(TestCase): def test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\", "label": 0}, {"snippet_id": 78919, "code": "(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition", "label": 1}, {"snippet_id": 58158, "code": " onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0,", "label": 1}, {"snippet_id": 44973, "code": " test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client", "label": 0}, {"snippet_id": 8062, "code": " it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']", "label": 0}, {"snippet_id": 45864, "code": " _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return redirect('data_document", "label": 0}, {"snippet_id": 44628, "code": "=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product=p, document", "label": 0}, {"snippet_id": 58786, "code": " self.filter(instructor=request.user.instructor) def testers(self): return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request): return self", "label": 0}, {"snippet_id": 81843, "code": ": created.pk})) return render(request, 'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return", "label": 0}, {"snippet_id": 37239, "code": " script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File", "label": 0}, {"snippet_id": 58129, "code": ": 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 13.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding", "label": 1}, {"snippet_id": 48516, "code": " product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form[", "label": 0}, {"snippet_id": 23605, "code": "\"The resources dictionary must not \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU\"]=(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus", "label": 0}, {"snippet_id": 28436, "code": " Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes", "label": 0}, {"snippet_id": 15267, "code": " min_entries=0) change_timeseries_value_several_days=FieldList(FormField(ChangeInputNewValue), min_entries=0) change_timeseries_value_several_days_add_delta=FieldList(FormField(ChangeInputAddDelta), min_entries", "label": 0}, {"snippet_id": 80033, "code": ".OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result", "label": 0}, {"snippet_id": 57702, "code": "): @receiver(signal, **decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper", "label": 0}, {"snippet_id": 4738, "code": "'policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"", "label": 0}, {"snippet_id": 83426, "code": "'object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title", "label": 0}, {"snippet_id": 74100, "code": ": def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial(_PassphraseClearingPartial): EVAL_ACTION_TYPE=\"DASHBOARD\"", "label": 0}, {"snippet_id": 26842, "code": " still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: True if any process that wasn't explicitly killed is still alive. \"\"\"", "label": 0}, {"snippet_id": 72483, "code": ".http import HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout", "label": 1}, {"snippet_id": 42093, "code": ".objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on the page') def test_extracted_count", "label": 0}, {"snippet_id": 44540, "code": " dt=DocumentType.objects.create(title='MSDS', code='MS', group_type=gt) doc=DataDocument.objects.create(title='test document', data_group=dg, document_type=dt, filename='example.pdf') p=Product.objects", "label": 0}, {"snippet_id": 7230, "code": ".apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF", "label": 0}, {"snippet_id": 3528, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s", "label": 0}, {"snippet_id": 14322, "code": "'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(", "label": 0}, {"snippet_id": 48351, "code": " and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request", "label": 0}, {"snippet_id": 13678, "code": " the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around", "label": 0}, {"snippet_id": 25531, "code": " parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( ", "label": 0}, {"snippet_id": 76098, "code": " ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting %s',", "label": 0}, {"snippet_id": 82553, "code": "\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int ", "label": 0}, {"snippet_id": 59876, "code": "\"about_url\") or self.metadata(\"about_url\"), } ) def prepare_connection(self, conn): conn.row_factory=sqlite3.Row conn.text_factory=lambda x: str(x, \"utf-8\", \"replace\") for name, num_args, func in self.sqlite_functions", "label": 0}, {"snippet_id": 11154, "code": "\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request", "label": 0}, {"snippet_id": 66542, "code": " Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") filter_text=Gtk.FileFilter() filter_text.set_name(", "label": 0}, {"snippet_id": 40181, "code": " TYPE_CHOICES=(('DL', 'download'), ('EX', 'extraction'), ('PC', 'product categorization'), ('DC', 'data cleaning')) QA_COMPLETE_PERCENTAGE=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length ", "label": 1}, {"snippet_id": 72415, "code": " depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if depth > 5: logger.warning(\"[NFS] Limiting depth to maximum value of 5: \" \"input depth=%s\", depth) depth=5 root_dir='{}/'.format(root_dir) ", "label": 0}, {"snippet_id": 20273, "code": "() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils", "label": 0}, {"snippet_id": 52181, "code": "=request.form.get(\"is_joining\") if user_choice==\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites have been updated!\"", "label": 0}, {"snippet_id": 75523, "code": ".handle_post(request.POST, candidate) return HttpResponseRedirect(reverse('approve', kwargs={'candidate_id': candidate_id})) @login_required def view_file(request, candidate_id): candidate=get_object_or_404", "label": 0}, {"snippet_id": 37488, "code": "), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'", "label": 0}, {"snippet_id": 13104, "code": ", 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 63698, "code": "{'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response", "label": 0}, {"snippet_id": 47172, "code": " : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required def dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id','id", "label": 0}, {"snippet_id": 69463, "code": ": try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1) continue raise", "label": 0}, {"snippet_id": 30559, "code": " def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user.id except: return None @app.route('/grudget/<int:grudget_id>/grudge/JSON') def grudgetGrudgeJSON(grudget_id):", "label": 1}, {"snippet_id": 16616, "code": " 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters, two_gamers def _create_game_seeder(tournament, round_number): \"\"\"Return a GameSeeder", "label": 0}, {"snippet_id": 71266, "code": ".user.get_id() load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self.session.data.get(key): self.session.data[key]=[] return self.session.data", "label": 0}, {"snippet_id": 38039, "code": " TaggedItemBase, TagBase from taggit.managers import TaggableManager from django.db import models from django.urls import reverse from django.utils.translation import ugettext_lazy as _ from.common_info", "label": 0}, {"snippet_id": 43056, "code": ".content) self.assertNotIn( b'<input type=\"text\" name=\"rawchem-1-unit_type\"', response.content) self.assertIn(b'Functional Use Chem1', response.content) response=self.client.get('/qa/extractionscript/5", "label": 0}, {"snippet_id": 2673, "code": " 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg=", "label": 0}, {"snippet_id": 11441, "code": " date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE", "label": 0}, {"snippet_id": 61755, "code": " the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that are in the database and always commits the results back to the database", "label": 0}, {"snippet_id": 14093, "code": " running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[", "label": 0}, {"snippet_id": 71305, "code": ": next_uri=self.GET.get('next') if next_uri is not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try: return self.session.data.pop('_redirect_uri", "label": 1}, {"snippet_id": 35190, "code": "'data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except", "label": 0}, {"snippet_id": 22592, "code": ", you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that", "label": 0}, {"snippet_id": 81233, "code": " _inherit=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week=fields.Char(string", "label": 0}, {"snippet_id": 37713, "code": "'document_type'] def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange'", "label": 0}, {"snippet_id": 63004, "code": " :return: the cookie \"\"\" return dump_cookie(self.app.config.get('SESSION_COOKIE_NAME'), session_id, max_age=float(self.app.config.get('PERMANENT_SESSION_LIFETIME')), path=self.app.config.get('SESSION_COOKIE_PATH", "label": 0}, {"snippet_id": 3248, "code": " OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce", "label": 0}, {"snippet_id": 63896, "code": "=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len(idps)==1 idp=idps.keys()[0] idp=request", "label": 1}, {"snippet_id": 34282, "code": ") raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id='id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser", "label": 0}, {"snippet_id": 18859, "code": ",\"static\"), \t\tui_modules={'bootstrap': BootstrapModule}, \t\tdebug=True, \t\tasync_db=async_db, \t\tsync_db=sync_db, \t\t**settings \t) \thttp_server=tornado.httpserver.HTTPServer(application) \thttp_server.listen", "label": 1}, {"snippet_id": 8775, "code": " the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders", "label": 0}, {"snippet_id": 36556, "code": " show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content", "label": 0}, {"snippet_id": 6716, "code": ": form=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit() token=user.generate_confirmation_token", "label": 0}, {"snippet_id": 69218, "code": "', 'install' ] +extensions) def ensure_jupyterhub_package(prefix): \"\"\" Install JupyterHub into our conda environment if needed. We install all python packages from PyPI as much as possible in the hub environment", "label": 0}, {"snippet_id": 48992, "code": "(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail", "label": 0}, {"snippet_id": 4465, "code": ".user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): ", "label": 0}, {"snippet_id": 36676, "code": "=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={", "label": 0}, {"snippet_id": 1283, "code": " during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 75503, "code": ": from.forms import FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid", "label": 0}, {"snippet_id": 35901, "code": "=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_delete(request, pk): p=Product", "label": 0}, {"snippet_id": 64018, "code": "\" Get the SAML2 NameID of the currently logged in user. :param session: The current session object :return: NameID :rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id", "label": 0}, {"snippet_id": 79520, "code": " users of assigned organisation with admin access :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string", "label": 0}, {"snippet_id": 38875, "code": " return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return self.type=='HH' def", "label": 0}, {"snippet_id": 35980, "code": ", blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length", "label": 0}, {"snippet_id": 79097, "code": " open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen.", "label": 0}, {"snippet_id": 16512, "code": "(doubles): rp=form.cleaned_data['double_%d' % i] if rp: rp.game_count=2 rp.save() return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request", "label": 0}, {"snippet_id": 10151, "code": " this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in", "label": 0}, {"snippet_id": 51863, "code": "): \"\"\"Validate new user form entry, register user if valid.\"\"\" email=request.form.get('email') pw=request.form.get('pw') displayname=request.form.get('displayname') user_record=User.query.filter(User.email", "label": 0}, {"snippet_id": 60557, "code": " DatabaseView.as_view(self), r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view", "label": 0}, {"snippet_id": 66229, "code": "-name\", \"mail-attachment-symbolic\") stack.add_titled(composite_unlock_stack_page, \"composite_unlock\", \"Composite\") stack.child_set_property(composite_unlock_stack_page, \"icon-name\", \"insert-link-symbolic\")", "label": 0}, {"snippet_id": 18955, "code": " nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin", "label": 1}, {"snippet_id": 34994, "code": "-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas", "label": 1}, {"snippet_id": 34237, "code": "'' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for", "label": 1}, {"snippet_id": 12956, "code": ")) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the", "label": 0}, {"snippet_id": 69890, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory.", "label": 0}, {"snippet_id": 25667, "code": " all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False", "label": 0}, {"snippet_id": 24554, "code": ".log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename))", "label": 1}, {"snippet_id": 15362, "code": " 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append({'command': field.name", "label": 0}, {"snippet_id": 63182, "code": "} with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_SUCCESS_REDIRECT_URL", "label": 0}, {"snippet_id": 30755, "code": " if request.method=='POST': if request.form['name']: editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget=editedGrudget", "label": 0}, {"snippet_id": 26378, "code": " alive and will raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception", "label": 0}, {"snippet_id": 75093, "code": ") if thesis.abstract !=form.cleaned_data['abstract']: messages.info(request, 'Your abstract contained invisible characters that we\\'ve removed. Please make sure your abstract is correct in the information", "label": 0}, {"snippet_id": 50640, "code": "&&\"%s\" -c \"import os; print repr(os.environ)\"' %(vsvars32, python), stdout=subprocess.PIPE, shell=True) stdout, _=process.communicate() exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error", "label": 0}, {"snippet_id": 71091, "code": "=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if", "label": 0}, {"snippet_id": 68668, "code": " if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.start() return redirect('twitter_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt", "label": 0}, {"snippet_id": 79687, "code": ":type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of", "label": 0}, {"snippet_id": 24442, "code": " dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object", "label": 1}, {"snippet_id": 18371, "code": " hash_password(): \tInitializes an instance of PasswordHasher from argon2, hashes the password, \tverifies if the hashing happened properly, re-hashes if the verification failed, \tand then returns hashed", "label": 1}, {"snippet_id": 12347, "code": " determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request", "label": 0}, {"snippet_id": 80584, "code": " def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Wavelength', label='Wavelength(nm): ', value=self.matisse.target_wavelength) if success", "label": 0}, {"snippet_id": 35825, "code": " template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm", "label": 0}, {"snippet_id": 83802, "code": " group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET", "label": 0}, {"snippet_id": 40926, "code": " from dashboard.tests.loader import * @override_settings(ALLOWED_HOSTS=['testserver']) class DataDocumentDetailTest(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn", "label": 0}, {"snippet_id": 61627, "code": "=validate_not_using_analytics(page), no_server_info=validate_server_software(page), no_server_version=validate_server_version(page), csp_origin_only=validate_csp(page), mime_sniffing_blocked=validate_no_sniff(page", "label": 1}, {"snippet_id": 73830, "code": ", 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method", "label": 0}, {"snippet_id": 7972, "code": " if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request", "label": 0}, {"snippet_id": 62080, "code": "'Server']) if 'nginx' in server_header or 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not in page.headers", "label": 0}, {"snippet_id": 19522, "code": "] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else", "label": 1}, {"snippet_id": 31502, "code": " 'django.contrib.auth.password_validation.' 'NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True STATIC_ROOT=os.environ.get('DJANGO_STATIC_ROOT", "label": 0}, {"snippet_id": 34350, "code": ".find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be", "label": 0}, {"snippet_id": 68867, "code": " yaml HERE=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs from nodesource is installed \"\"\" key=b\"\"\" -----BEGIN PGP PUBLIC KEY BLOCK----", "label": 0}, {"snippet_id": 55907, "code": " HttpResponse, JsonResponse from django.conf import settings from experiences.factories import create_get_experience_interactor from profiles.factories import create_get_profile_interactor EMAIL_CONFIRMATION_PATH=", "label": 0}, {"snippet_id": 2016, "code": "%(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n':", "label": 0}, {"snippet_id": 59520, "code": "=inspect_data self._metadata=metadata or{} self.sqlite_functions=[] self.sqlite_extensions=sqlite_extensions or[] self.template_dir=template_dir self.plugins_dir=plugins_dir self.static_mounts=static_mounts", "label": 0}, {"snippet_id": 8621, "code": " @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully", "label": 0}, {"snippet_id": 73898, "code": ".session['position_sort']=sort_by return render(request, 'positions.html', positions_list_data(request, sort_by)) def position_detail_data(request, position): return{'baseVisibleText': InterfaceText, 'applicationsForm", "label": 1}, {"snippet_id": 6836, "code": "'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password(form.old_password.data): current_user.password=form.password.data", "label": 0}, {"snippet_id": 45007, "code": " f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Back</a>') response2=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 18820, "code": "\", \t\t\"xsrf_cookies\":True, \t\t\"login_url\": \"/signin\", \t} \tasync_db=motor.motor_tornado.MotorClient().example \tsync_db=MongoClient().example \t\t\t\t\t \tapplication=tornado.web.Application( \t\thandlers=[ \t\t\t(r'", "label": 1}, {"snippet_id": 26862, "code": "\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a", "label": 0}, {"snippet_id": 15874, "code": "): email=StringField('Email',[validators.required()]) password=PasswordField('Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user", "label": 0}, {"snippet_id": 9018, "code": ".utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import", "label": 0}, {"snippet_id": 16730, "code": ")) sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games_and_powers(omitting_players=sitters, players_doubling_up=two_gamers) @permission_required('tournament.add_game", "label": 0}, {"snippet_id": 57217, "code": "(Transaction, code=transaction_code) extra_context['transaction']=transaction return render(request, 'transactions/transaction_detail.html', extra_context) @login_required def transaction_edit(request, *args, ", "label": 0}, {"snippet_id": 12896, "code": "'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(", "label": 0}, {"snippet_id": 81628, "code": ".fit_subscriptions: counter +=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name).lower() event_start=datetime.strptime(event.date_begin, ", "label": 0}, {"snippet_id": 69154, "code": "(secrets.token_hex(32)) traefik.ensure_traefik_config(STATE_DIR) unit_params=dict( python_interpreter_path=sys.executable, jupyterhub_config_path=os.path.join(HERE, 'jupyterhub_config.py'), install_prefix", "label": 0}, {"snippet_id": 74766, "code": " 'etd_app/register.html',{'person_form': person_form, 'candidate_form': candidate_form, 'register': True}) @login_required def candidate_profile(request, candidate_id): from.forms import PersonForm, CandidateForm", "label": 0}, {"snippet_id": 32623, "code": " self.first.execute(*args) self.first.wait() self.second.execute(*args) self.second.wait() class PipeNode(DoubleNode): ''' A node that forwards the output of one node to the input of another. Args: first", "label": 0}, {"snippet_id": 55245, "code": ".split(self.path) \t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive(self): \t\treturn os.path.splitdrive(self.path) \tdef splitext(self): \t\treturn os.path.splitext(self.path) \tdef splitunc(self): \t\treturn", "label": 0}, {"snippet_id": 53912, "code": " in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining \"\"\" self.body=[] self.data=SharedCache() self.files=SharedCache() self._last_update_time", "label": 0}, {"snippet_id": 52730, "code": " rest_framework import status from django.conf import settings from realpal.apps.chat.models import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import", "label": 1}, {"snippet_id": 46117, "code": "]=form context['msg']='Matching records uploaded successfully.' if request.method=='POST' and 'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type", "label": 0}, {"snippet_id": 33351, "code": " django.contrib.auth import authenticate from django.contrib.auth.models import User from dashboard.models import PUC, Product, ProductToPUC, ProductDocument, DSSToxLookup from dashboard.views.get_data", "label": 0}, {"snippet_id": 69839, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve", "label": 0}, {"snippet_id": 48524, "code": ".filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type", "label": 0}, {"snippet_id": 61395, "code": " to the list of queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__)", "label": 0}, {"snippet_id": 66993, "code": ".models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='filehash", "label": 0}, {"snippet_id": 29313, "code": " 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app): @app.cli.command('initdb') def initdb_command(): \"\"\"Creates the database tables.\"\"\" init_db() print('Initialized the database.'", "label": 0}, {"snippet_id": 54768, "code": "\t\t\tself.code_list.append((prob_code,prob_code_data)) \t\t\tself.problem_groups[prob_id].append(prob_code+\"\\n\"+(\"=\"*50)+\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group", "label": 1}, {"snippet_id": 53644, "code": ": \"\"\" Reads the current state of the buffer and returns a string those contents :return: A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue()", "label": 1}, {"snippet_id": 49776, "code": "'social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app", "label": 0}, {"snippet_id": 8393, "code": " descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the", "label": 0}, {"snippet_id": 75581, "code": ".thesis.current_file_name) response=FileResponse(open(file_path, 'rb'), content_type='application/pdf') response['Content-Disposition']='attachment; filename=\"%s\"' % candidate.thesis.original_file_name", "label": 0}, {"snippet_id": 58389, "code": ":{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" } }, onboarding.CREATE_COURSE:{ \"done\": True, \"settings\":{ \"html\": \"<p>create_course</p>\", \"description", "label": 1}, {"snippet_id": 1588, "code": "=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine", "label": 0}, {"snippet_id": 72621, "code": " email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1].split('@')[0].title().translate({ord(n): None for n", "label": 0}, {"snippet_id": 64174, "code": "({'location': location}).data else: abort(500) headers_tuple=loresponse[1]['headers'] location=headers_tuple[0][1] current_app.logger.info('Redirecting to{!r} to continue the logout process ' 'for user", "label": 0}, {"snippet_id": 55872, "code": "(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item) \t\treturn r \tdef filter(self", "label": 0}, {"snippet_id": 14990, "code": "(r'[()]', '', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author", "label": 0}, {"snippet_id": 76937, "code": " copied. im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size", "label": 0}, {"snippet_id": 58452, "code": "</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" } }, onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_thread</p>\", \"description\": \"create_thread desc\",", "label": 0}, {"snippet_id": 35145, "code": " self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate", "label": 0}, {"snippet_id": 8604, "code": "'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(", "label": 0}, {"snippet_id": 54652, "code": "\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor problem in problems: \t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem.childNodes) \t\tself", "label": 1}, {"snippet_id": 20238, "code": " all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum", "label": 0}, {"snippet_id": 33650, "code": " ProductToPUC') pd=ProductDocument.objects.create(document=dd, product=p) pd.save() dd.refresh_from_db() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self", "label": 0}, {"snippet_id": 84888, "code": "-z]+[A-Z]\\w+\\b)\", title) if m: search_title=re.compile(r\"%s\" % title) else: search_title=re.compile(r\"\\/%s\\)\" % title) found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title", "label": 0}, {"snippet_id": 39858, "code": ", blank=True, validators=[validate_wf_analysis]) central_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) upper_wf_analysis=models", "label": 0}, {"snippet_id": 17526, "code": "'login.html', form=form) @bp.route('/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session.modified=False response=flask.make_response(flask.redirect(redirect_url())) response", "label": 0}, {"snippet_id": 11031, "code": "-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME", "label": 0}, {"snippet_id": 63879, "code": ", sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL", "label": 0}, {"snippet_id": 24743, "code": "=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args.node_ip_address, redis_password=args.redis_password) log_monitor.run()", "label": 1}, {"snippet_id": 51133, "code": ".parse_args(argv) self._context.options=options self._context.args=args self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True if step.is_optional", "label": 0}, {"snippet_id": 19476, "code": "[log_filename]=[] def check_log_files_and_push_updates(self): \"\"\"Get any changes to the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles:", "label": 1}, {"snippet_id": 11875, "code": ".utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import", "label": 0}, {"snippet_id": 70071, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 56354, "code": " self def given_a_dynamic_link(self, dynamic_link): settings.DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return", "label": 0}, {"snippet_id": 4245, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[", "label": 0}, {"snippet_id": 9193, "code": "=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline", "label": 1}, {"snippet_id": 48503, "code": "=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product", "label": 0}, {"snippet_id": 69625, "code": " in plugins \"\"\" hook=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format", "label": 0}, {"snippet_id": 47875, "code": "]) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith", "label": 0}, {"snippet_id": 34704, "code": ")).\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) | Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False", "label": 0}, {"snippet_id": 35402, "code": "() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product,", "label": 0}, {"snippet_id": 54268, "code": "\"JSON response containing information for a particular politician \"\"\" @app.route('/json/politicians/<politician>') def json_politician(politician): politicians=Politician.all() politicians.filter(\"name=", "label": 0}, {"snippet_id": 74988, "code": " form.save_upload(candidate) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=UploadForm() return render(request, 'etd_app/candidate_upload.html'", "label": 0}, {"snippet_id": 68747, "code": "', 'list', '--sys-prefix' ], stderr=subprocess.PIPE) extensions=[ 'jupyterlab 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'", "label": 1}, {"snippet_id": 35995, "code": " default='') prod_type=models.CharField(max_length=100, blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE", "label": 0}, {"snippet_id": 6084, "code": "(below). Sets g.oidc_id_token to the ID token if the user has successfully authenticated, else returns a redirect object so they can go try to authenticate. :return: A redirect, or None if the user is authenticated", "label": 0}, {"snippet_id": 23420, "code": ".version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier", "label": 0}, {"snippet_id": 62846, "code": " mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client() as c: resp=c.get(url) authn_req=get_location", "label": 1}, {"snippet_id": 43046, "code": "/5/', follow=True) self.assertIn( b'<input type=\"text\" name=\"rawchem-1-raw_cas\"', response.content) self.assertNotIn( b'<input type=\"text\" name=\"rawchem-1-unit_type\"', response.content) self.assertIn(b", "label": 0}, {"snippet_id": 33979, "code": " rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"", "label": 0}, {"snippet_id": 26111, "code": " assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name or get_raylet_socket_name()) self.prepare_socket_file(self._raylet_socket_name) stdout_file, stderr_file", "label": 0}, {"snippet_id": 22705, "code": " default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In", "label": 1}, {"snippet_id": 44595, "code": " data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description='reported') ec=ExtractedChemical.objects", "label": 0}, {"snippet_id": 39742, "code": " self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail", "label": 1}, {"snippet_id": 84339, "code": " not int(revision_from) +1: from_value=revision_from template_params={'article': article, 'article_title': article.title, 'changeset': changeset, 'differences': changeset.compare_to(revision_from), 'from'", "label": 0}, {"snippet_id": 57978, "code": " }, \"create_thread\":{ \"done\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id", "label": 0}, {"snippet_id": 48405, "code": " page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form(request, pk, template_name=('product_curation/", "label": 0}, {"snippet_id": 42844, "code": " self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText", "label": 1}, {"snippet_id": 69817, "code": " import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from", "label": 1}, {"snippet_id": 36139, "code": ".is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in", "label": 0}, {"snippet_id": 16561, "code": "() for rp in round_players: assert rp.gameplayers().count()==0, \"%d games already exist for %s in this round\" %(rp.gameplayers().count(), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count", "label": 0}, {"snippet_id": 48489, "code": "=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form", "label": 0}, {"snippet_id": 72404, "code": "): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if depth > 5: logger.warning(\"[NFS] Limiting depth", "label": 0}, {"snippet_id": 16809, "code": " 'formset': formset}) g.save() for gp_id, field in f.cleaned_data.items(): if gp_id in['the_set', 'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try: gp.full_clean() except ValidationError", "label": 0}, {"snippet_id": 13232, "code": " student's account information. \"\"\" import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth", "label": 0}, {"snippet_id": 36133, "code": " return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk)", "label": 0}, {"snippet_id": 74394, "code": ".WizardPartial ): steps_helper=view_helpers.ReportStepsHelper EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, **kwargs): self._dispatch_processing() return super().dispatch(request, *args, **kwargs) def", "label": 0}, {"snippet_id": 38430, "code": " from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): \"\"\" A DataDocument object is a single source of Factotum data. ``filename`` the", "label": 0}, {"snippet_id": 27959, "code": ", str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data", "label": 0}, {"snippet_id": 66294, "code": " composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") composite_unlock_select_button.connect(\"clicked\", self.on_composite_unlock_select_button_clicked) password_unlock_entry", "label": 0}, {"snippet_id": 6736, "code": ".generate_confirmation_token() send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token) flash('Check your inbox! A confirmation email has been sent.') return redirect(url_for(", "label": 0}, {"snippet_id": 30319, "code": " response.headers['Content-Type']='application/json' return response if result['issued_to'] !=CLIENT_ID: response=make_response( json.dumps(\"Token's client ID does not match app's.\"), 401) print \"Token's", "label": 0}, {"snippet_id": 27703, "code": "=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this as a thread", "label": 1}, {"snippet_id": 34952, "code": ".objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request", "label": 0}, {"snippet_id": 39013, "code": "(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy\" property. If the folder cannot be found, dg.dg_folder evaluates to boolean False '", "label": 0}, {"snippet_id": 21840, "code": " not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port", "label": 0}, {"snippet_id": 44290, "code": " test_product(self): p=self.objects.p puc=self.objects.puc tag=self.objects.pt PUCToTag.objects.create(content_object=puc, tag=tag) ProductToPUC.objects.create(product=p, puc=puc) url=self.live_server_url ", "label": 0}, {"snippet_id": 12469, "code": "=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 1019, "code": ".path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s", "label": 1}, {"snippet_id": 81154, "code": ".subscription'].sudo().search([('subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', ", "label": 0}, {"snippet_id": 25576, "code": " autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args.redis_password) try: monitor.run", "label": 1}, {"snippet_id": 60467, "code": "-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"/-/inspect<as_format:(\\.json)?$>\", ) app", "label": 0}, {"snippet_id": 15131, "code": ", self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField", "label": 0}, {"snippet_id": 26511, "code": ".kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process.wait() finally: timer", "label": 0}, {"snippet_id": 41026, "code": ".client.get('/datadocument/179486/') html=response.content.decode('utf-8') e_idx=html.index('<h4>Extracted Text') p_idx=html.index('<h4 class=\"d-inline\">Products') self.assertTrue(p_idx > e_idx,('Product", "label": 0}, {"snippet_id": 11164, "code": " if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint", "label": 0}, {"snippet_id": 46514, "code": " ExtractedChemical matches rawchem_ptr_id %s' % row['id']) try: ingredient=Ingredient.objects.get(rawchem_ptr=extracted_chemical.rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr", "label": 0}, {"snippet_id": 75322, "code": "=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) return render(request, 'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods", "label": 0}, {"snippet_id": 34153, "code": ") card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the", "label": 0}, {"snippet_id": 81633, "code": "=1 self.fit_subscription_count=counter def can_subscribe(self, event): can_subscribe=False event_type=str(event.event_type_id.name).lower() event_start=datetime.strptime(event.date_begin, '%Y-%m-%d %H:", "label": 0}, {"snippet_id": 18265, "code": " the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself.render('signup.html',error='') \t \t\"\"\" check_if_exists(): \tUses the pymongo driver(so everything is synchronous) to check if the username exists in", "label": 1}, {"snippet_id": 34143, "code": ".select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse", "label": 0}, {"snippet_id": 15951, "code": " def validate(self): rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors", "label": 0}, {"snippet_id": 71422, "code": ".request=req if resp is None: resp=req.get_response(self.app) resp._save_session() return resp(environ, start_response) def _load_strategy(self, provider): try: strategy_location=self._config[ 'provider", "label": 0}, {"snippet_id": 59539, "code": "(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(\"max_returned_rows", "label": 0}, {"snippet_id": 46398, "code": ".title else: new_prod_title='unknown' product=Product.objects.create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product,", "label": 0}, {"snippet_id": 63577, "code": "(response2.data)['payload']['location']) def test_logout_service_startingSP(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) with", "label": 0}, {"snippet_id": 746, "code": "[ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[", "label": 0}, {"snippet_id": 55691, "code": "(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t", "label": 0}, {"snippet_id": 58623, "code": " update_onboarding_step(onboarding.STEP_3, instructor.user_id) if Unit.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_4, instructor.user_id) if Lesson.objects.filter", "label": 1}, {"snippet_id": 37742, "code": "'Returns the ExtractionScriptForm based on conditions of DataGroup type as well as whether all records are matched, but not extracted ''' if not dg.type in['FU', 'CO', 'CP']: return False if dg.all_matched(", "label": 0}, {"snippet_id": 17496, "code": "=ip_address(flask.request.remote_addr).packed if not app.config['MAINTENANCE_MODE']: db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask", "label": 0}, {"snippet_id": 80569, "code": "'matisse.[method]\\\\\\'\\')\"') @handled_slot(bool) def restart(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog", "label": 1}, {"snippet_id": 71389, "code": " if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self._url_parse_re.match( req.path_info).group(1, 2) if provider: req.provider=provider req.provider_params=provider_params", "label": 0}, {"snippet_id": 79964, "code": "[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"", "label": 1}, {"snippet_id": 39466, "code": " raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__(self)", "label": 0}, {"snippet_id": 66028, "code": " self.on_back_button_clicked) quit_button.connect(\"clicked\", self.on_quit_button_clicked) unsaved_databases_list_box=builder.get_object(\"unsaved_databases_list_box\") for db in unsaved_databases_list: unsaved_database_row", "label": 0}, {"snippet_id": 81545, "code": " ' +old_repeating_event.name +', date: ' +str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id existing_event=self.env['event.event'].search([('event_type_id', '=', old_event_cat),('date_end", "label": 0}, {"snippet_id": 10659, "code": ") elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages", "label": 0}, {"snippet_id": 50359, "code": "/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect(url_for", "label": 0}, {"snippet_id": 19641, "code": " parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None", "label": 1}, {"snippet_id": 20066, "code": " task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add", "label": 0}, {"snippet_id": 40990, "code": "(resp, '<h4>Extracted Text') def test_script_links(self): doc=DataDocument.objects.first() response=self.client.get(f'/datadocument/179486/') self.assertIn('Download Script',response.content.decode('utf-8'", "label": 0}, {"snippet_id": 82200, "code": " **kwargs): context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count() print(urls_without_category) queryset=Category.objects.all() for cat", "label": 0}, {"snippet_id": 82678, "code": " Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self", "label": 0}, {"snippet_id": 52052, "code": " user_id=session.get(\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id\": userteam.team_id, \"name\"", "label": 0}, {"snippet_id": 59347, "code": ", 50, \"\"\" Time limit for calculating a suggested facet \"\"\".strip()), ConfigOption(\"allow_facet\", True, \"\"\" Allow users to specify columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download", "label": 0}, {"snippet_id": 80596, "code": " value=self.matisse.target_wavelength) if success: print(f\"Setting wavelength to{target_wavelength} nm...\") self.matisse.set_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_approx_wavelength_dialog", "label": 0}, {"snippet_id": 23310, "code": " number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we", "label": 0}, {"snippet_id": 31938, "code": "._builtin_cd } def run(self): ''' Run the shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline(self): ''' Read a command from stdin to execute. Returns:", "label": 0}, {"snippet_id": 78033, "code": "\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show", "label": 0}, {"snippet_id": 64674, "code": "'sum', 'super', 'SyntaxError', 'SyntaxWarning', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'tuple', 'type', 'TypeError', 'UnboundLocalError', 'UnicodeEncodeError', 'UnicodeWarning', 'UserWarning", "label": 0}, {"snippet_id": 28962, "code": " 'remote function', 'actor', or 'object'. worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning", "label": 0}, {"snippet_id": 5768, "code": " i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id) self.assertEqual(12, get_partition_id(11002)", "label": 0}, {"snippet_id": 8814, "code": "':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ ", "label": 0}, {"snippet_id": 68368, "code": "%d') labels.append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def", "label": 0}, {"snippet_id": 13784, "code": ".tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the", "label": 0}, {"snippet_id": 44435, "code": ".notation access to dictionary attributes\"\"\" __getattr__=dict.get __setattr__=dict.__setitem__ __delattr__=dict.__delitem__ def load_model_objects(): user=User.objects.create_user(username='Karyn', password", "label": 0}, {"snippet_id": 79800, "code": ".id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) ", "label": 1}, {"snippet_id": 316, "code": "%(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n':", "label": 0}, {"snippet_id": 27502, "code": " traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value", "label": 1}, {"snippet_id": 55060, "code": " \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn", "label": 0}, {"snippet_id": 74060, "code": ".evaluation.view_partials import EvalDataMixin from callisto_core.reporting import report_delivery from callisto_core.wizard_builder import( data_helper, view_partials as wizard_builder_partials, ) from", "label": 0}, {"snippet_id": 55767, "code": ".file=file \t\tself.number=number \t\tself.text=text class File(FSItem): \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read", "label": 0}, {"snippet_id": 31637, "code": " request, *args, **kwargs): locale=request.GET.get('locale') resp=redirect(request.GET.get('next', request.META.get('HTTP_REFERER', '/'))) if locale in[lc for lc, ll in settings.LANGUAGES]: if request.user", "label": 1}, {"snippet_id": 3503, "code": " paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 67736, "code": ").order_by('type').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET) context['search_form']=search_form return context def get_queryset(self): query", "label": 0}, {"snippet_id": 61611, "code": "=validate_no_cookies(page), safe_onion_address=validate_onion_address_not_in_href(soup), no_cdn=validate_not_using_cdn(page), http_no_redirect=validate_no_redirects(no_redirects_page), expected_encoding", "label": 1}, {"snippet_id": 21853, "code": " plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen.", "label": 0}, {"snippet_id": 82625, "code": " \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name", "label": 0}, {"snippet_id": 67991, "code": ")) return query class EventListView(PaginationMixin, ListView): model=Event template_name='threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 49281, "code": "=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text", "label": 0}, {"snippet_id": 72471, "code": " filesystems(self): return CephFS.list_filesystems() @Endpoint('GET', '/rgw/buckets') def buckets(self, user_id=None): return RgwClient.instance(user_id).get_buckets() @Endpoint('GET', '/clusters') def clusters", "label": 0}, {"snippet_id": 50608, "code": " a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not", "label": 0}, {"snippet_id": 44065, "code": "'cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/'", "label": 0}, {"snippet_id": 3524, "code": " test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self", "label": 0}, {"snippet_id": 43305, "code": " the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False", "label": 0}, {"snippet_id": 83355, "code": " reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain", "label": 1}, {"snippet_id": 13629, "code": " settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 14740, "code": ", PasswordField, validators from datetime import datetime import os.path import json import redis import re import pprint pp=pprint.PrettyPrinter(indent=4) app=Flask(__name__) app.config['SECRET_KEY']=", "label": 0}, {"snippet_id": 22655, "code": ": self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t", "label": 1}, {"snippet_id": 31711, "code": "'defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in request.content", "label": 1}, {"snippet_id": 6671, "code": ".remember_me.data) session['auth_token']=user.auth_token return redirect(request.args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html',", "label": 1}, {"snippet_id": 6214, "code": " absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for('oidc_callback', _external=True) return flow def redirect_to_auth_server(self, destination): \"\"\" Set", "label": 0}, {"snippet_id": 66591, "code": ".set_label(ntpath.basename(file_path)) self.composite_keyfile_path=file_path elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection cancelled\") filechooser_opening_dialog", "label": 0}, {"snippet_id": 64315, "code": ".error('Unknown error during the logout') abort(400) elif 'SAMLRequest' in request.form: current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is", "label": 0}, {"snippet_id": 80737, "code": "() @handled_slot(bool) def toggle_lock_all(self, checked): if checked: for action in self.lock_actions: if not action.isChecked(): action.trigger() if all([action.isChecked() for action in self.lock_actions", "label": 0}, {"snippet_id": 48936, "code": " 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None,", "label": 0}, {"snippet_id": 61621, "code": "(no_redirects_page), expected_encoding=validate_encoding(page), no_analytics=validate_not_using_analytics(page), no_server_info=validate_server_software(page), no_server_version=validate_server_version", "label": 1}, {"snippet_id": 30905, "code": "=grudget, creator=creator) @app.route('/grudget/<int:grudget_id>/grudge/new/', methods=['GET', 'POST']) def newGrudge(grudget_id): if 'username' not in login_session: return redirect('/login') grudget=session", "label": 0}, {"snippet_id": 44148, "code": ")) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser.find_elements_by_class_name('bubble') self.assertEqual(num_pucs, len(bubbles),('There should be a circle' 'drawn", "label": 0}, {"snippet_id": 73251, "code": " LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) password", "label": 0}, {"snippet_id": 18331, "code": "\"Email exists already\" \t\treturn error \t\"\"\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database", "label": 1}, {"snippet_id": 79167, "code": "] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job", "label": 1}, {"snippet_id": 23367, "code": " leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is", "label": 0}, {"snippet_id": 10553, "code": " util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted", "label": 0}, {"snippet_id": 83289, "code": "(forms.ModelForm): summary=forms.CharField(widget=forms.Textarea) comment=forms.CharField(required=False) user_ip=forms.CharField(widget=forms.HiddenInput) content_type=forms.ModelChoiceField( queryset", "label": 0}, {"snippet_id": 9391, "code": ". Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view", "label": 0}, {"snippet_id": 35705, "code": ".get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request,", "label": 0}, {"snippet_id": 63882, "code": " request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state", "label": 1}, {"snippet_id": 74850, "code": " degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type=degree_type) return render(request", "label": 0}, {"snippet_id": 60683, "code": ": False, \"error\": message, \"status\": status, \"title\": title} ) if request is not None and request.path.split(\"?\")[0].endswith(\".json\"): return response.json(info, status=status) else: template=self.jinja_env", "label": 0}, {"snippet_id": 51577, "code": "'build_step':builder.build_step, 'build_condition':builder.build_condition, 'default_platform':default_platform, 'get_vsvars_environment':get_vsvars_environment, 'SshSession':SshSession, 'select_optional_steps", "label": 0}, {"snippet_id": 63445, "code": " self.assertEqual(no_authn_urls_before +['^{!s}$'.format(no_authn_path)], self.app.config['NO_AUTHN_URLS']) with self.app.test_client() as c: resp=c.get('/test3') self.assertEqual(resp.status_code, 200)", "label": 0}, {"snippet_id": 18875, "code": ".user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin:", "label": 1}, {"snippet_id": 15442, "code": "({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'new_value': entry.new_value.data", "label": 0}, {"snippet_id": 76195, "code": " full_path.startswith(match): cut_path=re.sub('^%s' % match, self.to_url, full_path) return cut_path def redirect_sphinx_html(self, path, language=None, version_slug=None): for ending in['/', '/index.html']", "label": 0}, {"snippet_id": 56139, "code": "=HttpResponse('', status=302) response['Location']=link return response def aasa_redirect(request): return JsonResponse({\"applinks\":{\"apps\":[], \"details\":[{\"appID\": settings.APPLE_APPID, \"paths\":[\"*\"]}]", "label": 0}, {"snippet_id": 19612, "code": ".check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument(", "label": 1}, {"snippet_id": 59930, "code": " pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect().get(database,{}).get(\"tables\") def inspect(self): \" Inspect the database and return a dictionary", "label": 0}, {"snippet_id": 32979, "code": "'prod_type', 'description','tags',] readonly_fields=('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products') form", "label": 1}, {"snippet_id": 69929, "code": "/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os", "label": 1}, {"snippet_id": 41627, "code": ", ('Document should start w/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start w/ extracted False')) self.assertFalse(response.context['datagroup'].all_matched(), ('UploadForm", "label": 0}, {"snippet_id": 73007, "code": "): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html", "label": 0}, {"snippet_id": 46749, "code": " in csv\"]) continue if line['title']=='': line['title']=line['filename'].split('.')[0] if code=='': errors.append([count, \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter", "label": 0}, {"snippet_id": 29399, "code": " \" +str(current_user.is_authenticated) @auth.route('/logout') @login_required def logout(): logout_user() return redirect(url_for('auth.test')) @auth.route('/login/auth') def oauthorize(): if g.user.is_authenticated", "label": 1}, {"snippet_id": 49754, "code": " in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session: email=session['email'] elif 'social' in session:", "label": 0}, {"snippet_id": 23541, "code": " number of GPUs required by this function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when", "label": 0}, {"snippet_id": 55856, "code": "(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr", "label": 0}, {"snippet_id": 26913, "code": " then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs", "label": 0}, {"snippet_id": 23330, "code": " manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes", "label": 0}, {"snippet_id": 84000, "code": "=ArticleClass(**article_args) if revision is not None: changeset=get_object_or_404( article.changeset_set, revision=revision) article.content=changeset.get_content() template_params={'article': article,", "label": 0}, {"snippet_id": 24687, "code": " help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging", "label": 1}, {"snippet_id": 5670, "code": "=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password,", "label": 0}, {"snippet_id": 21028, "code": "=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE", "label": 1}, {"snippet_id": 80495, "code": ".format_exception(*sys.exc_info())) desired_width=min(max([len(line) for line in stack]), 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py", "label": 0}, {"snippet_id": 71347, "code": "['ea.user']=self.user class AuthMiddleware(object): def __init__(self, app, config=None): self.app=app self._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/]+)/*(\\S*)' % (self._config", "label": 0}, {"snippet_id": 7637, "code": ".lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student", "label": 0}, {"snippet_id": 4448, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username", "label": 0}, {"snippet_id": 68873, "code": "\"\" Ensure nodejs from nodesource is installed \"\"\" key=b\"\"\" -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1 Comment: GPGTools -https://gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+", "label": 0}, {"snippet_id": 83971, "code": ".get(**article_args) if notification is not None: is_observing=notification.is_observing(article, request.user) except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter( old_title=title)", "label": 0}, {"snippet_id": 30387, "code": "/www.googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json() login_session['username']=data", "label": 0}, {"snippet_id": 74990, "code": " return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=UploadForm() return render(request, 'etd_app/candidate_upload.html',{'candidate': candidate, 'form", "label": 0}, {"snippet_id": 46865, "code": " +\".zip\") zf=zipfile.ZipFile(str(new_zip_path), 'w', zipfile.ZIP_DEFLATED) datagroup.zip_file=new_zip_name zf.close() datagroup.save() return redirect('data_group_detail', pk=datagroup.id) else: groups", "label": 0}, {"snippet_id": 16021, "code": " current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home", "label": 0}, {"snippet_id": 69759, "code": " ) argparser.add_argument( '--user-requirements-txt-url', help='URL to a requirements.txt file that should be installed in the user enviornment' ) argparser.add_argument( '--plugin', nargs='*', help='Plugin", "label": 0}, {"snippet_id": 15905, "code": " user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password.errors.append('Password should be", "label": 0}, {"snippet_id": 18337, "code": "\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password", "label": 1}, {"snippet_id": 10930, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's", "label": 0}, {"snippet_id": 47511, "code": " import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F, Sum", "label": 1}, {"snippet_id": 45249, "code": "(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count", "label": 0}, {"snippet_id": 50049, "code": "' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: data", "label": 0}, {"snippet_id": 14972, "code": " ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', '', name", "label": 0}, {"snippet_id": 31289, "code": " 'http://localhost:4200') SOCIAL_AUTH_LOGIN_URL='/login' SOCIAL_AUTH_PIPELINE=( 'social.pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed", "label": 1}, {"snippet_id": 51700, "code": " 'endpoint': endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script def genSCI(): pass def genSSCI(): pass def genCSRF(): pass", "label": 1}, {"snippet_id": 6176, "code": "=id_token return None def require_login(self, view_func): \"\"\" Use this to decorate view functions if only some of your app's views require authentication. \"\"\" @wraps(view_func) def decorated(*args, **kwargs):", "label": 0}, {"snippet_id": 38989, "code": "()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name", "label": 0}, {"snippet_id": 14113, "code": "=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]", "label": 0}, {"snippet_id": 13660, "code": " @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the", "label": 0}, {"snippet_id": 10719, "code": ") or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 58332, "code": " \"next_steps desc\", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" }, onboarding.CREATE_THREAD", "label": 1}, {"snippet_id": 19191, "code": " msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +", "label": 0}, {"snippet_id": 11304, "code": "\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'", "label": 0}, {"snippet_id": 26396, "code": " question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero", "label": 0}, {"snippet_id": 59895, "code": " self.sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension", "label": 0}, {"snippet_id": 29421, "code": " return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None", "label": 1}, {"snippet_id": 44143, "code": " num_pucs=len(PUC.objects.filter(kind='FO')) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser.find_elements_by_class_name('bubble') self.assertEqual(num_pucs, len(bubbles", "label": 0}, {"snippet_id": 1360, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 43978, "code": "\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class", "label": 0}, {"snippet_id": 66614, "code": "\"composite_unlock_entry\") composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\") if composite_unlock_entry.get_text() is not \"\": try: self.database_manager=DatabaseManager", "label": 0}, {"snippet_id": 27899, "code": " \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block", "label": 0}, {"snippet_id": 13900, "code": "=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 78134, "code": " default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes' in pkg: notes=pkg[", "label": 0}, {"snippet_id": 39369, "code": ": return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def indexing(self): obj=ExtractedChemicalIndex( meta={'id': self", "label": 0}, {"snippet_id": 16332, "code": " form.cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True: i, created=RoundPlayer.objects.get_or_create(player=p, the_round=r) try: i.full_clean", "label": 0}, {"snippet_id": 617, "code": ".stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath", "label": 0}, {"snippet_id": 38838, "code": ".CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker(", "label": 0}, {"snippet_id": 24717, "code": " help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args", "label": 0}, {"snippet_id": 23903, "code": "\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function", "label": 0}, {"snippet_id": 46213, "code": "' row[w]=WeightFractionType.objects.get(pk=int(wft)) unit_type_id=int(row['unit_type']) row['unit_type']=UnitType.objects.get(pk=unit_type_id) rank=row['ingredient_rank'] row['ingredient_rank']=None if", "label": 0}, {"snippet_id": 49110, "code": "(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit': edit, 'document_type_form", "label": 0}, {"snippet_id": 53654, "code": " A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding)", "label": 1}, {"snippet_id": 45801, "code": " def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get", "label": 0}, {"snippet_id": 24637, "code": " new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser", "label": 1}, {"snippet_id": 74196, "code": " ratelimit.mixins.RatelimitMixin ): ratelimit_key=\"user\" ratelimit_rate=settings.DECRYPT_THROTTLE_RATE class _ReportAccessPartial(_ReportLimitedDetailPartial): invalid_access_key_message=\"Invalid key in", "label": 0}, {"snippet_id": 68876, "code": "\"\" -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1 Comment: GPGTools -https://gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9", "label": 0}, {"snippet_id": 41032, "code": "=html.index('<h4>Extracted Text') p_idx=html.index('<h4 class=\"d-inline\">Products') self.assertTrue(p_idx > e_idx,('Product card should come after ' 'Extracted Text card')) def test_product_create_link", "label": 0}, {"snippet_id": 73098, "code": "=('pdf', 'url_ref') widgets={'url_ref': forms.TextInput(attrs={'disabled': 'disabled'})} def clean(self): pdf=self.cleaned_data.get('pdf') url=self.cleaned_data.get('url_ref') if not pdf and not url: msg", "label": 1}, {"snippet_id": 6790, "code": " Thank you!') else: flash('The confirmation link is invalid or has expired.') return redirect(url_for('main.index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user", "label": 0}, {"snippet_id": 11788, "code": "\n\"\"\" Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages", "label": 0}, {"snippet_id": 64382, "code": " return redirect(location) current_app.logger.error('No SAMLResponse or SAMLRequest parameter found') abort(400) @authn_views.route('/token-login', methods=['POST']) def token_login(): current_app.logger", "label": 0}, {"snippet_id": 7482, "code": " request.args: if hasattr(Exam, key): search_kwargs[key]=request.args.get(key) exams=exams.filter_by(**search_kwargs) result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}", "label": 0}, {"snippet_id": 83625, "code": " article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname, group=None, args=None, kw=None): if group is None: return reverse", "label": 0}, {"snippet_id": 22343, "code": " arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs", "label": 0}, {"snippet_id": 10210, "code": "=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.'", "label": 0}, {"snippet_id": 19102, "code": ". Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the", "label": 1}, {"snippet_id": 41020, "code": "'utf-8')) def test_product_card_location(self): response=self.client.get('/datadocument/179486/') html=response.content.decode('utf-8') e_idx=html.index('<h4>Extracted Text') p_idx=html.index('<h4 class", "label": 0}, {"snippet_id": 54110, "code": "(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html')", "label": 0}, {"snippet_id": 81713, "code": ".shortcuts import render from.models import Post def home(request): posts=Post.objects.order_by('pub_date') return render(request, 'posts/home.html',{'posts':posts}) def post_details(request, post_id): return", "label": 1}, {"snippet_id": 30134, "code": " flow_from_clientsecrets from oauth2client.client import FlowExchangeError import httplib2 import json from flask import make_response import requests app=Flask(__name__) CLIENT_ID=json.loads( open('client_secrets", "label": 0}, {"snippet_id": 55961, "code": ".format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode()) return response def experience_redirect(request, experience_share_id): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) >", "label": 0}, {"snippet_id": 70950, "code": " /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{%", "label": 0}, {"snippet_id": 12548, "code": " successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\"", "label": 0}, {"snippet_id": 65890, "code": ".page_num(db.parent_widget)==page_num: self.opened_databases.remove(db) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_cancel_button_clicked(self, widget): self.override_dialog", "label": 0}, {"snippet_id": 43080, "code": "/qa/extractedtext/7/', follow=True) self.assertIn(b'rawchem-1-unit_type', response.content) def test_cpcat_qa(self): response=self.client.get(f'/qa/chemicalpresence/') self.assertIn( f\"/qa/chemicalpresencegroup", "label": 0}, {"snippet_id": 70548, "code": "\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template", "label": 0}, {"snippet_id": 36234, "code": " import html from django.urls import resolve from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import", "label": 0}, {"snippet_id": 37573, "code": "].widget.attrs['onchange']='form.submit();' class BulkProductTagForm(forms.ModelForm): required_css_class='required' tag=forms.ModelChoiceField(queryset=PUCTag.objects.none(), label='Attribute') id_pks", "label": 0}, {"snippet_id": 79421, "code": "'site_url': config.get('ckan.site_url') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars)", "label": 0}, {"snippet_id": 50952, "code": ": f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None: f.buildstep.name=name f.buildstep.set_optional(optional) f.buildstep.set_default(default) return f return decorator_func", "label": 0}, {"snippet_id": 54966, "code": "//Users/chenan/Other/python-2.7.2-docs-html/library/os.html \tand \t\tfile:///Users/chenan/Other/python-2.7.2-docs-html/library/os.path.html \tbut make a more OO interface to dealing with files and folders", "label": 0}, {"snippet_id": 35761, "code": " p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get", "label": 0}, {"snippet_id": 49898, "code": ") if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request", "label": 0}, {"snippet_id": 11841, "code": " _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce", "label": 0}, {"snippet_id": 4084, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id", "label": 0}, {"snippet_id": 73191, "code": " label=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def", "label": 0}, {"snippet_id": 82440, "code": "?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update-view'), re_path(r'^delete/category/(?P<pk>(\\d)+)/$', CategoryDeleteView.as_view(), name='category-delete-view'), re_path(r'^(?P<pk>(", "label": 0}, {"snippet_id": 15280, "code": "=FieldList(FormField(ChangeInputAddDelta), min_entries=0) def get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'], model['model_name_user'] +':' +model['author']) for", "label": 0}, {"snippet_id": 63644, "code": "-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingIDP(self):", "label": 0}, {"snippet_id": 34541, "code": " django.forms.models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm()", "label": 0}, {"snippet_id": 12209, "code": " password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password", "label": 0}, {"snippet_id": 36939, "code": " chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month'] !=chart_month: product_stats.insert(i,{'product_count': '0', 'puc_assigned_month", "label": 0}, {"snippet_id": 10244, "code": "(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _", "label": 0}, {"snippet_id": 978, "code": ") newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 9539, "code": " context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only", "label": 0}, {"snippet_id": 67487, "code": " tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query", "label": 0}, {"snippet_id": 80354, "code": ".open_idle_action.triggered.connect(self.open_idle) self.restart_action.triggered.connect(self.restart) self.set_wavelength_action.triggered.connect(self.set_wavelength_dialog) self.set_bifi_approx_wavelength_action", "label": 0}, {"snippet_id": 74246, "code": ".storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message) return False @property", "label": 0}, {"snippet_id": 6316, "code": "\"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non-trusted issuer: %s' % id_token['iss']) return False if isinstance", "label": 0}, {"snippet_id": 56874, "code": "['transaction']=transaction if request.method=='POST': form=concept_form(request.POST, instance=concept) if form.is_valid(): form.save() return redirect('transaction_edit', transaction_code=transaction", "label": 0}, {"snippet_id": 35288, "code": " paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg})", "label": 0}, {"snippet_id": 42975, "code": ".objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains(response, '<b>Add New Habit and", "label": 0}, {"snippet_id": 80134, "code": " self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container", "label": 0}, {"snippet_id": 51601, "code": ":userlock, 'fail':fail, 'scp':scp, 'require_version':require_version } try: execfile(os.path.join('projectdata', buildname+'_behaviour.py'), behaviour_globals) builder.run(argv) except AbortRunException as", "label": 0}, {"snippet_id": 41115, "code": "/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get", "label": 0}, {"snippet_id": 32859, "code": ".newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: '", "label": 0}, {"snippet_id": 21142, "code": ".all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"\"\"Start a worker process.\"\"\" raise NotImplementedError def start_monitor(self): \"\"\"Start the monitor", "label": 0}, {"snippet_id": 41377, "code": " extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model =get_extracted_models(dd.data_group.group_type.code)[1] childform_model=child_formset.__dict__.get('queryset')", "label": 1}, {"snippet_id": 77818, "code": "=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id,", "label": 0}, {"snippet_id": 15203, "code": "(self, csrf_enabled=False, *args, **kwargs): super(ChangeInputAddDelta, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators", "label": 0}, {"snippet_id": 25459, "code": ".XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages(", "label": 0}, {"snippet_id": 4889, "code": ".locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post", "label": 0}, {"snippet_id": 84152, "code": ".is_authenticated(): form.editor=request.user if((article is None) and(group_slug is not None)): form.group=group new_article, changeset=form.save() return redirect(new_article) elif request.method=='GET':", "label": 0}, {"snippet_id": 63684, "code": " base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data", "label": 0}, {"snippet_id": 24311, "code": ".startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def fetch_and_execute_function_to_run(self, key): \"\"", "label": 0}, {"snippet_id": 8182, "code": ".get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u", "label": 0}, {"snippet_id": 67554, "code": ") to_date=today -timedelta(days=day-1) count=self.object_list.filter(publish_timestamp__gte=from_date, publish_timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self)", "label": 0}, {"snippet_id": 37864, "code": " the CleanCompDataForm based on conditions of DataGroup type=Composition and at least 1 document extracted ''' if not dg.type in['CO']: return False if dg.extracted_docs() > 0: return CleanCompDataForm()", "label": 0}, {"snippet_id": 23220, "code": ": return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a", "label": 0}, {"snippet_id": 19256, "code": " fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass", "label": 0}, {"snippet_id": 4521, "code": "=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile", "label": 0}, {"snippet_id": 10965, "code": " context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only", "label": 0}, {"snippet_id": 18353, "code": " \tasync def do_insert(self,hashed_password): \t\tdocument={'username': self.username,'email': self.email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password", "label": 1}, {"snippet_id": 11314, "code": " session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(),", "label": 0}, {"snippet_id": 25392, "code": " time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy", "label": 0}, {"snippet_id": 5657, "code": " response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation", "label": 0}, {"snippet_id": 3911, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[", "label": 0}, {"snippet_id": 82907, "code": "\"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash", "label": 0}, {"snippet_id": 38800, "code": ") downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None, null=True, blank=True) data_source=models.ForeignKey('DataSource', on_delete=models", "label": 0}, {"snippet_id": 38022, "code": "(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO':", "label": 0}, {"snippet_id": 65100, "code": ") except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed: if vlevel >=1: print(repr(se), file=sys.stderr) dock_points(deductions, args.points, 'syntax error') break code=fixed except BaseException", "label": 0}, {"snippet_id": 37461, "code": "(self, *args, **kwargs): super(ProductForm, self).__init__(*args, **kwargs) for f in self.fields: self.fields[f].disabled=True class BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField( queryset=PUC", "label": 0}, {"snippet_id": 62587, "code": " we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL", "label": 0}, {"snippet_id": 22920, "code": ", str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data", "label": 0}, {"snippet_id": 58941, "code": "() return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save", "label": 0}, {"snippet_id": 56942, "code": " get(self, request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop('filter_data',{}) return super()", "label": 0}, {"snippet_id": 76096, "code": "=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug", "label": 0}, {"snippet_id": 44135, "code": ", self.browser.current_url, \"User should always return to detail page after submit\") num_pucs=len(PUC.objects.filter(kind='FO')) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles", "label": 0}, {"snippet_id": 3073, "code": "=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request", "label": 1}, {"snippet_id": 75767, "code": " results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e) logger.error('fast response: %s -%s' %(r.status_code, r.text)) return error_response", "label": 0}, {"snippet_id": 25610, "code": " __future__ import absolute_import from __future__ import division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import", "label": 0}, {"snippet_id": 37047, "code": " import autocomplete from bootstrap_datepicker_plus import DatePickerInput from django import forms from django.forms import BaseInlineFormSet from django.utils.translation import ugettext_lazy as _ from", "label": 0}, {"snippet_id": 52762, "code": "(__name__) class MessageCreateAPIView(CreateAPIView): \"\"\" Creates a new message object with a file attachment Returns on the socket { 'id': \"id\", 'sent_by':'user_id', 'room':\"room_id\", 'text':message.txt", "label": 0}, {"snippet_id": 72076, "code": "}', 'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons", "label": 0}, {"snippet_id": 15990, "code": "(url_for('view_home')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home')) return render_template('register", "label": 1}, {"snippet_id": 36766, "code": "(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id'))", "label": 0}, {"snippet_id": 67422, "code": "'threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['count']=self.object_list.count() context['alltag", "label": 0}, {"snippet_id": 64513, "code": ".exceptions.MultipleUsersReturned: current_app.logger.error(\"There are more than one user with eduPersonPrincipalName={}\".format(eppn)) current_app.logger.info('Token login failed, redirecting user to{}'.format", "label": 0}, {"snippet_id": 34460, "code": "=wait.until( ec.invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button", "label": 0}, {"snippet_id": 9205, "code": ".skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError,", "label": 1}, {"snippet_id": 2233, "code": " will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath", "label": 1}, {"snippet_id": 84676, "code": "{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if", "label": 0}, {"snippet_id": 83425, "code": ".cleaned_data['object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else:", "label": 0}, {"snippet_id": 67382, "code": " import get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event, Attribute,", "label": 1}, {"snippet_id": 18452, "code": ".html with the error. \tAfter confirming that no errors have occured, hashes the password and then inserts it into the \tMongoDB database by calling hash_password() and do_insert() respectively. \tFinally", "label": 1}, {"snippet_id": 45761, "code": ", _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)') exttext, _=model.objects.get_or_create(extraction_script", "label": 1}, {"snippet_id": 26541, "code": ": process.wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True): \"\"\"Kill the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already", "label": 0}, {"snippet_id": 33930, "code": " or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk", "label": 0}, {"snippet_id": 32772, "code": "'].split(':') for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a", "label": 0}, {"snippet_id": 17351, "code": "(redirect_url()) form=forms.LoginForm(flask.request.form) if flask.request.method=='POST' and form.validate(): if app.config['MAINTENANCE_MODE'] and not app.config['MAINTENANCE_MODE_LOGINS']: flask.flash", "label": 0}, {"snippet_id": 64575, "code": "'bytearray', 'bytes', 'BytesWarning', 'callable', 'ChildProcessError', 'chr', 'classmethod', 'complex', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'delattr", "label": 0}, {"snippet_id": 38661, "code": " get_abstract_filename(self): ext=self.filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self.data_group fn=self.get_abstract_filename() return f'/media/{dg.fs_id}/pdf/{fn}' def clean", "label": 0}, {"snippet_id": 72254, "code": ", 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons) for d_id in", "label": 0}, {"snippet_id": 58517, "code": ".CREATE_COURSE: True, onboarding.CREATE_COURSELET: False, onboarding.CREATE_THREAD: False, onboarding.INVITE_SOMEBODY: True, onboarding.NEXT_STEPS: False, onboarding.PREVIEW_COURSELET: False } settings_mock", "label": 1}, {"snippet_id": 58285, "code": " def test_get_onboarding_status_with_settings(self, status_mock, settings_mock): def mocked_setting(setting_name): data={ onboarding.INTRODUCTION_INTRO:{ \"html\": \"<p>instructor_intro</p>\", \"description", "label": 0}, {"snippet_id": 17150, "code": ".save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset'", "label": 0}, {"snippet_id": 27869, "code": " the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or", "label": 0}, {"snippet_id": 82491, "code": " class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid:", "label": 0}, {"snippet_id": 24463, "code": " self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore", "label": 1}, {"snippet_id": 75739, "code": " lookup timed out') return error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list", "label": 0}, {"snippet_id": 41772, "code": "'raw_central_comp'], \"Fieldnames passed are incorrect!\") self.objects.gt.title='Functional use' self.objects.gt.code='FU' self.objects.gt.save() self.assertEqual(str(self.objects.dg.group_type),'Functional use',", "label": 0}, {"snippet_id": 4188, "code": " target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image", "label": 0}, {"snippet_id": 33853, "code": " expected_conditions as ec def log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn(", "label": 0}, {"snippet_id": 53573, "code": "}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', **render_data ", "label": 0}, {"snippet_id": 37904, "code": "--------- document: DataDocument The parent DataDocument extra: integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included exclude: list which", "label": 0}, {"snippet_id": 18200, "code": " from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options import define, options define", "label": 0}, {"snippet_id": 13742, "code": " AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change", "label": 0}, {"snippet_id": 7036, "code": ") send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent", "label": 0}, {"snippet_id": 45373, "code": " \"None\", it's worth noting that if when making the call to here from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether", "label": 0}, {"snippet_id": 440, "code": "\"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template", "label": 1}, {"snippet_id": 44868, "code": ": found=resolve(f'/habitsandpractices/{self.objects.doc.pk}/') self.assertEqual(found.func, views.habitsandpractices) def test_link_habitandpractice_to_puc(self): found=resolve(f'/link_habitandpractice_to_puc", "label": 0}, {"snippet_id": 80475, "code": " self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception", "label": 0}, {"snippet_id": 84012, "code": ".get_content() template_params={'article': article, 'revision': revision, 'redirected_from': redirected_from, 'allow_write': allow_write} if notification is not None: template_params.update({'is_observing':", "label": 0}, {"snippet_id": 3007, "code": ") class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__", "label": 0}, {"snippet_id": 18788, "code": " has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self", "label": 1}, {"snippet_id": 53939, "code": ":param dom: :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer(if it exists) and returns a body", "label": 0}, {"snippet_id": 4719, "code": " 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 8917, "code": "'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state", "label": 0}, {"snippet_id": 25984, "code": "=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self): \"", "label": 1}, {"snippet_id": 73102, "code": "'url_ref': forms.TextInput(attrs={'disabled': 'disabled'})} def clean(self): pdf=self.cleaned_data.get('pdf') url=self.cleaned_data.get('url_ref') if not pdf and not url: msg=forms.ValidationError(ErrorMessages", "label": 1}, {"snippet_id": 82394, "code": ".as_view(), name='url-update-view'), re_path(r'^delete/(?P<pk>(\\d)+)/$', URLDeleteView.as_view(), name='url-delete-view'), re_path(r'^category/add/$', CategoryCreateView.as_view(), name='category-create", "label": 0}, {"snippet_id": 20565, "code": ".redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed with the following error:\\n{}\".format( traceback_str) ray.utils.push_error_to_driver_through_redis", "label": 0}, {"snippet_id": 82735, "code": "' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate", "label": 0}, {"snippet_id": 30839, "code": " redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete) @app.route('/grudget/<int:grudget_id>/') @app.route('/grudget/<int", "label": 0}, {"snippet_id": 52177, "code": "=request.form.get(\"team\") user_choice=request.form.get(\"is_joining\") if user_choice==\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(", "label": 0}, {"snippet_id": 64779, "code": " execute function') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions, points_per_case,", "label": 1}, {"snippet_id": 57254, "code": ") return redirect('transaction_edit', transaction_code=transaction.code) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if transaction.closed", "label": 0}, {"snippet_id": 46372, "code": " ext=ExtractedText.objects.get(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title", "label": 0}, {"snippet_id": 51819, "code": " Team, UserTeam, Board, Project, Phase) import query as q import helper as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined app.jinja_env", "label": 0}, {"snippet_id": 8520, "code": " return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting", "label": 0}, {"snippet_id": 11754, "code": " auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 4351, "code": "'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"", "label": 1}, {"snippet_id": 39150, "code": ": for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name) return extract_fields +['cat_code','description_cpcat', 'cpcat_code','cpcat_sourcetype'] def get_clean_comp_data_fieldnames", "label": 0}, {"snippet_id": 25746, "code": " worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services", "label": 0}, {"snippet_id": 44385, "code": ": self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self.live_server_url +f'/datadocument", "label": 0}, {"snippet_id": 11708, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 26687, "code": "\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any", "label": 0}, {"snippet_id": 51178, "code": " **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs) def add_option(self, *args, **kwargs): self._optionParser.add_option(*args, **kwargs", "label": 0}, {"snippet_id": 70513, "code": " /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{%", "label": 0}, {"snippet_id": 66205, "code": "\"composite_unlock_stack_page\") stack.add_titled(password_unlock_stack_page, \"password_unlock\", \"Password\") stack.child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled", "label": 0}, {"snippet_id": 60071, "code": " in the metadata.json with Pint\" for unit in self.metadata(\"custom_units\") or[]: ureg.define(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection(conn) sqlite_version=conn", "label": 0}, {"snippet_id": 80135, "code": "() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container=QWidget() container", "label": 0}, {"snippet_id": 14802, "code": "'0') def auth_add_user(email, password): user_id=db.incr('user:ids') db.hset('user:emails', email, user_id) db.hmset('user:%s' % user_id,{ 'user_id': user_id, 'email': email, 'password_hash': password }", "label": 0}, {"snippet_id": 27052, "code": "(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard.", "label": 0}, {"snippet_id": 67887, "code": "/tag_list.html' context_object_name='tags' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) count=self.object_list.count() context['count']=count return context def get_queryset", "label": 0}, {"snippet_id": 69955, "code": " os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path", "label": 1}, {"snippet_id": 42331, "code": ", 'downloaded_at':['08/20/2017'], 'data_source':[dspk]} response=self.client.post(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code, 302, \"User is redirected to detail page.\"", "label": 0}, {"snippet_id": 54079, "code": " knowyourgov import app from knowyourgov.models import Politician from knowyourgov.scripts import insert_politicians_in_db from knowyourgov.scripts.scraping import scrapers \"\"\"Home page \"\"\" @app.route('/') def", "label": 0}, {"snippet_id": 1896, "code": ".META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application", "label": 0}, {"snippet_id": 79811, "code": " org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition(org_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, ", "label": 1}, {"snippet_id": 65264, "code": " override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True) opened_databases=", "label": 0}, {"snippet_id": 22491, "code": ", extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both", "label": 0}, {"snippet_id": 69790, "code": " ensure_node() ensure_jupyterhub_package(HUB_ENV_PREFIX) ensure_jupyterlab_extensions() ensure_jupyterhub_service(HUB_ENV_PREFIX) ensure_jupyterhub_running() ensure_symlinks(HUB_ENV_PREFIX) run_plugin_actions(pm", "label": 0}, {"snippet_id": 23007, "code": " task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some", "label": 0}, {"snippet_id": 37599, "code": "='Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl", "label": 0}, {"snippet_id": 16848, "code": " send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) else: r.game_set.all().delete() default_set=GameSet.objects.get(pk=1) data=[] if t.power_assignment==Tournament", "label": 0}, {"snippet_id": 46571, "code": " return render(request, template_name, context) if not context['clean_comp_err']: for ingredient in good_records: ingredient.save() context['msg']=(f'{len(good_records)} clean composition data records ' ", "label": 0}, {"snippet_id": 14118, "code": ") if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps", "label": 0}, {"snippet_id": 71272, "code": "=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self.session.data.get(key): self.session.data[key]=[] return self.session.data[key].append({ 'message': message, 'level': level}", "label": 0}, {"snippet_id": 33085, "code": ") admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site", "label": 1}, {"snippet_id": 15490, "code": ".data }) return result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form, commands): def get_command(command_name): return", "label": 0}, {"snippet_id": 40429, "code": "(pk__in=doc_text_ids[:random_20]) else: texts=None if texts is not None: for text in texts: text.qa_group=qa_group text.save() if force_doc_id is not None and ExtractedText.objects.filter(pk=force_doc_id", "label": 0}, {"snippet_id": 43409, "code": "(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et", "label": 0}, {"snippet_id": 26502, "code": ") raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process", "label": 0}, {"snippet_id": 257, "code": " <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans", "label": 0}, {"snippet_id": 29741, "code": "(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview", "label": 0}, {"snippet_id": 57842, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE } def get_onboarding_setting(setting_name): \"\"\" Return settings for the certain `settings_name` If it does not exist take default settings and save it to the MongoDB Argument:", "label": 0}, {"snippet_id": 51882, "code": ".email==email).first() if user_record is None: new_user=q.make_user(email, pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname)", "label": 0}, {"snippet_id": 12200, "code": " context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link", "label": 0}, {"snippet_id": 52494, "code": " print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=['POST']) def save_updated_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id", "label": 0}, {"snippet_id": 23904, "code": "\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', ", "label": 0}, {"snippet_id": 25884, "code": " exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else", "label": 0}, {"snippet_id": 22959, "code": " __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import", "label": 0}, {"snippet_id": 81808, "code": " created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return", "label": 0}, {"snippet_id": 176, "code": "(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath", "label": 1}, {"snippet_id": 14695, "code": "=_get_node(board_cfg) redirect=serial_redirection.SerialRedirection(node.TTY, node.BAUDRATE) try: redirect.start() print 'Press Ctrl+C to stop' signal.pause() except KeyboardInterrupt: pass finally: redirect", "label": 1}, {"snippet_id": 8640, "code": " the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response", "label": 0}, {"snippet_id": 69632, "code": " apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format( len(apt_packages), ' '.join(apt_packages) )) apt", "label": 0}, {"snippet_id": 82062, "code": "{request.get_host()}/{short_url}', category=category) created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success", "label": 0}, {"snippet_id": 65441, "code": "\"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui\") self", "label": 0}, {"snippet_id": 65748, "code": ".add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") CreateDatabase( self, self.create_tab(tab_title, headerbar), self.database_manager) def create_tab(self,", "label": 0}, {"snippet_id": 30284, "code": " is not None: response=make_response(json.dumps(result.get('error')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials.id_token['sub'] if result['user_id'] ", "label": 0}, {"snippet_id": 9972, "code": " service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 4627, "code": " logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http", "label": 0}, {"snippet_id": 17653, "code": " send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask", "label": 0}, {"snippet_id": 51198, "code": " self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in args])] kwargstring=[\", \".join([\"%s=%r\" ", "label": 0}, {"snippet_id": 81007, "code": " else: existing_registration=http.request.env['event.registration'].sudo().search([('partner_id', '=', partner_id), ('event_id', '=', event.id)]) try: if existing_registration: if event.seats_available", "label": 0}, {"snippet_id": 29270, "code": " register_cli(app) register_teardowns(app) app.register_blueprint(gallery) app.register_blueprint(auth) app.register_blueprint(user) configure_uploads(app,(images,)) patch_request_class(app, FILE_SIZE_LIMIT)", "label": 0}, {"snippet_id": 20262, "code": " subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"]", "label": 0}, {"snippet_id": 2601, "code": " authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self", "label": 0}, {"snippet_id": 12838, "code": " service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 50390, "code": " import read_dependencies_from_filename import os import platform import threading import sys import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS=\"default\"", "label": 0}, {"snippet_id": 66468, "code": "))) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") keyfile_chooser_dialog.close() def on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button", "label": 0}, {"snippet_id": 80680, "code": ") def set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE", "label": 0}, {"snippet_id": 69426, "code": " else: config={} config['users']=config.get('users',{}) config['users']['admin']=list(admins) with open(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure", "label": 0}, {"snippet_id": 32838, "code": " descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self", "label": 1}, {"snippet_id": 43117, "code": "\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 0) response=self.client.get", "label": 0}, {"snippet_id": 44511, "code": "(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing...', data_source=ds, download_script=script, downloaded_by=user, downloaded_at=timezone.now()", "label": 0}, {"snippet_id": 25761, "code": ": redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params=ray_params", "label": 0}, {"snippet_id": 48015, "code": " extext.doc_date='please add...' ExtractedTextForm, HnPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HnPFormSet(request.POST or None, instance", "label": 0}, {"snippet_id": 41122, "code": " data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product", "label": 0}, {"snippet_id": 84879, "code": "=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b)\", title) if m: search_title=re.compile(r\"%s\" % title) else: search_title=re.compile(r", "label": 0}, {"snippet_id": 43383, "code": "'changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox", "label": 0}, {"snippet_id": 44512, "code": "'Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing...', data_source=ds, download_script=script, downloaded_by=user, downloaded_at=timezone.now(), group_type", "label": 0}, {"snippet_id": 18295, "code": " database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif", "label": 1}, {"snippet_id": 39382, "code": " meta={'id': self.id}, chem_name=self.raw_chem_name, raw_cas=self.raw_cas, raw_chem_name=self.raw_chem_name, facet_model_name='Extracted Chemical', ) obj.save() return obj.to_dict(include_meta=True) def", "label": 0}, {"snippet_id": 4373, "code": "=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response", "label": 0}, {"snippet_id": 25760, "code": "=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params", "label": 0}, {"snippet_id": 29248, "code": ") @security_ctx.context_processor def security_context_processor(): return dict( admin_base_template=admin.base_template, admin_view=admin.index_view, h=helpers, get_url=url_for ) admin=Admin(app, name", "label": 0}, {"snippet_id": 67381, "code": " import get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event, Attribute", "label": 1}, {"snippet_id": 44045, "code": "/table[@id='sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name", "label": 0}, {"snippet_id": 12298, "code": ".get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG", "label": 0}, {"snippet_id": 74845, "code": " else: shib_info=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance", "label": 0}, {"snippet_id": 23034, "code": " Args: exception_message(str): A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines", "label": 0}, {"snippet_id": 21295, "code": " servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send", "label": 0}, {"snippet_id": 55536, "code": "(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t", "label": 0}, {"snippet_id": 60361, "code": " def app(self): app=Sanic(__name__) default_templates=str(app_root / \"datasette\" / \"templates\") template_paths=[] if self.template_dir: template_paths.append(self.template_dir) template_paths.extend( [", "label": 0}, {"snippet_id": 64210, "code": "=['POST']) def logout_service(): \"\"\"SAML Logout Response endpoint The IdP will send the logout response to this view, which will process it with pysaml2 help and log the user out. Note that the IdP can", "label": 0}, {"snippet_id": 67489, "code": ": query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id", "label": 0}, {"snippet_id": 61998, "code": " expected_directive): header=page.headers.get('Cache-Control', '') directives=[directive.lower().strip() for directive in header.split(',')] return expected_directive in directives def validate_no_redirects(page)", "label": 0}, {"snippet_id": 66674, "code": ".get_style_context().add_class(\"error\") def open_database_page(self): self.clear_input_fields() keepassgtk.config_manager.create_config_entry_string(\"history\", \"last-opened-db\", str(self.database_filepath)) keepassgtk", "label": 0}, {"snippet_id": 26157, "code": ".node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params", "label": 0}, {"snippet_id": 72123, "code": "=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type, 'squash': squash", "label": 0}, {"snippet_id": 18497, "code": "\tif(re.fullmatch('^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\")", "label": 0}, {"snippet_id": 56030, "code": " link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, EXPERIENCE_DEEPLINK_PATH, experience_share_id) response=HttpResponse('', status=302) response['Location']=link return response def profile_redirect(request", "label": 0}, {"snippet_id": 72851, "code": " 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request", "label": 0}, {"snippet_id": 57582, "code": "\" import functools from django.dispatch import receiver from django.conf import settings from django.core.mail import send_mail from django.template import loader, Context from core.common.mongo import", "label": 0}, {"snippet_id": 83010, "code": " component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running on :type hostname: str \"\"\"", "label": 0}, {"snippet_id": 26585, "code": ". \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception", "label": 0}, {"snippet_id": 12442, "code": "=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 35922, "code": ".objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data", "label": 0}, {"snippet_id": 30303, "code": "'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response.headers['Content-Type']='application/json' return response if result", "label": 0}, {"snippet_id": 66754, "code": " from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django", "label": 0}, {"snippet_id": 69279, "code": "-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins') user.ensure_group", "label": 1}, {"snippet_id": 905, "code": "(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r", "label": 0}, {"snippet_id": 60805, "code": ":param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self)", "label": 0}, {"snippet_id": 11267, "code": " a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages", "label": 0}, {"snippet_id": 9294, "code": " settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions", "label": 0}, {"snippet_id": 9122, "code": " from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model(", "label": 0}, {"snippet_id": 21710, "code": " process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): ", "label": 0}, {"snippet_id": 48629, "code": ", flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in", "label": 0}, {"snippet_id": 20998, "code": " get_object_store_socket_name()) self.prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self", "label": 0}, {"snippet_id": 57603, "code": " import c_onboarding_status, c_onboarding_settings from core.common import onboarding def send_email(context_data, from_email, to_email, template_subject, template_text): \"\"\" Send an email with specified", "label": 0}, {"snippet_id": 57956, "code": " }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title</p>\", \"description\": \"Here is some description\", \"title\": \"Title\" } }, \"invite_somebody\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description", "label": 0}, {"snippet_id": 55067, "code": "\t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn os.path.basename(self.path) \tdef dirname(self): \t\treturn", "label": 0}, {"snippet_id": 22652, "code": "\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information", "label": 1}, {"snippet_id": 23707, "code": "\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode", "label": 0}, {"snippet_id": 59575, "code": ".plugins_dir, filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option", "label": 0}, {"snippet_id": 70864, "code": " here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 73416, "code": "'positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST", "label": 0}, {"snippet_id": 50856, "code": " for s in arglist],[]) def process_kwargs(func_name, kwarg_dict, defaults_dict): result=dict(defaults_dict) for key, value in kwarg_dict.items(): if key in result: result[key]=value else: raise TypeError", "label": 0}, {"snippet_id": 84669, "code": "'title': title} group=None if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read", "label": 0}, {"snippet_id": 84045, "code": " template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def edit_article(request, title, group_slug=None, group_slug_field=None, group_qs=None", "label": 0}, {"snippet_id": 19301, "code": "\"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE and driver_id !=self.worker.task_driver_id.binary()): return try: function=pickle", "label": 0}, {"snippet_id": 37590, "code": ".ModelChoiceField(queryset=PUCTag.objects.none(), label='Attribute') id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self", "label": 0}, {"snippet_id": 35566, "code": " form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get", "label": 0}, {"snippet_id": 67200, "code": " lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import", "label": 0}, {"snippet_id": 32696, "code": ") class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable", "label": 0}, {"snippet_id": 49124, "code": " document_type_form} if code=='CP': try: list_presence=doc.extractedtext.rawchem.select_subclasses('extractedlistpresence').first() list_presence_tag_form=ExtractedListPresenceTagForm(instance=list_presence)", "label": 0}, {"snippet_id": 12096, "code": ": return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context", "label": 0}, {"snippet_id": 44527, "code": ", downloaded_at=timezone.now(), group_type=gt, csv='register_records_matching.csv', url='https://www.epa.gov') dt=DocumentType.objects.create(title='MSDS', code='MS', group_type=gt) doc=DataDocument.objects", "label": 0}, {"snippet_id": 81176, "code": "'subscription_partner', '=', partner.id)]) bc_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets", "label": 0}, {"snippet_id": 38432, "code": " DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): \"\"\" A DataDocument object is a single source of Factotum data. ``filename`` the name of the document's source file", "label": 0}, {"snippet_id": 84228, "code": "(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update", "label": 0}, {"snippet_id": 68995, "code": " xxECi0l/BzNxeU1gK88hEaNjIfviPR/h6Gq6KOcNKZ8rVFdwFpjbvwHMQBWhrqfu G3KaePvbnObKHXpfIKoAM7X2qfO+IFnLGTPyhFTcrl6vZBTMZTfZiC1XDQLuGUnd sckuXINIU3DFWzZGr0QrqkuE/jyr7FXeUJj9B7cLo+s/TXo+RaVfi3kOc9BoxIvy /qiNGs", "label": 0}, {"snippet_id": 19738, "code": ".ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__", "label": 0}, {"snippet_id": 59481, "code": "( self, files, cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None, template_dir=None, plugins_dir=None, static_mounts=None, memory=False, config=None, version_note", "label": 0}, {"snippet_id": 15034, "code": "'ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source[1], source[2:] ts['source_model_name']=source_model_name ts['source_type']", "label": 0}, {"snippet_id": 73961, "code": " breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications/applications.html", "label": 0}, {"snippet_id": 78451, "code": "(datarequest.user_id), 'organization': None, 'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show", "label": 0}, {"snippet_id": 29517, "code": " request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists=User.query.filter(User.username==username).all() if name_exists: flash(", "label": 1}, {"snippet_id": 79998, "code": " user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description", "label": 0}, {"snippet_id": 76913, "code": " except IOError, e: logger.error(\"Failed to save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source", "label": 0}, {"snippet_id": 59047, "code": "'message': 'You already have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod", "label": 0}, {"snippet_id": 66166, "code": "=Gtk.Overlay() unlock_failed_overlay=self.builder.get_object(\"unlock_failed_overlay\") self.overlay.add_overlay(unlock_failed_overlay) stack=Gtk.Stack() stack.set_transition_type(Gtk.StackTransitionType", "label": 0}, {"snippet_id": 41636, "code": ".extracted, ('Document should start w/ extracted False')) self.assertFalse(response.context['datagroup'].all_matched(), ('UploadForm should be included in the page!')) self.assertFalse(response.context[", "label": 0}, {"snippet_id": 3797, "code": ".user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): ", "label": 0}, {"snippet_id": 26655, "code": "=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 42428, "code": "(f'/datagroup/raw_extracted_records/%s/' % dg_ids[0]) field_list='ExtractedChemical_id,raw_cas,raw_chem_name,raw_min_comp,raw_central_comp,raw_max_comp,unit_type' content=list(i.decode('utf-8') for i in", "label": 0}, {"snippet_id": 75422, "code": " raise_exception=True) def staff_approve(request, candidate_id): from.forms import GradschoolChecklistForm, FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) if request.method=='POST'", "label": 0}, {"snippet_id": 47329, "code": ".cleaned_data['priority'] datasource.priority=priority datasource.save() return redirect('data_source_list') return render(request, template_name,{'object_list': out}) @login_required() def data_source_detail", "label": 0}, {"snippet_id": 18241, "code": "(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"", "label": 1}, {"snippet_id": 15762, "code": "('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']", "label": 0}, {"snippet_id": 37180, "code": "*kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {", "label": 0}, {"snippet_id": 7983, "code": "\"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email", "label": 0}, {"snippet_id": 11956, "code": " from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import", "label": 0}, {"snippet_id": 61910, "code": "(page): \"\"\"Scan for common analytics scripts anywhere in the page Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support.chartbeat.com/docs/ Quantcast: https", "label": 0}, {"snippet_id": 26918, "code": " list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary", "label": 0}, {"snippet_id": 27435, "code": " parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource", "label": 0}, {"snippet_id": 55699, "code": ") \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path", "label": 0}, {"snippet_id": 60634, "code": "(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception", "label": 0}, {"snippet_id": 74295, "code": " next_url def dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ) and self._passphrase_next_url(request):", "label": 0}, {"snippet_id": 61234, "code": " __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param", "label": 0}, {"snippet_id": 51312, "code": "> 0: if not dependency_collection.fetch(dependencies, self._context.env): raise AbortRunException() def get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection", "label": 0}, {"snippet_id": 84199, "code": " 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article': True", "label": 0}, {"snippet_id": 39233, "code": " import WeightFractionType from.raw_chem import RawChem def validate_ingredient_rank(value): if value < 1 or value > 999: raise ValidationError( (f'Quantity{value} is not allowed'), params={'value': value}", "label": 0}, {"snippet_id": 24228, "code": ".worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports)", "label": 0}, {"snippet_id": 78720, "code": ") if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation", "label": 1}, {"snippet_id": 43675, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save", "label": 0}, {"snippet_id": 55098, "code": " exists(self): \t\treturn FSPath(os.path.exists(self.path)) \tdef lexists(self): \t\treturn FSPath(os.path.lexists(self.path)) \tdef expanduser(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars", "label": 0}, {"snippet_id": 50300, "code": ": return redirect('/') @app.route(\"/tmp\", methods=[\"POST\"]) def tmp(): with tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write", "label": 0}, {"snippet_id": 53705, "code": ".source_encoding) def write_both(self, *args, **kwargs): abort_thread() if self.active: self.last_write_time=time.time() super(RedirectBuffer, self).write(*args, **kwargs) return self.redirection_source.write(*args,", "label": 1}, {"snippet_id": 27265, "code": "=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None", "label": 0}, {"snippet_id": 15299, "code": " for model in models ] def get_inputs_choices_by_model(name): models=load_json('models.json') model=next(item for item in models if item['model_system_name']==name) return[( value['series_name_system'],", "label": 0}, {"snippet_id": 23069, "code": " an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str): The message that will be printed in the background", "label": 0}, {"snippet_id": 59470, "code": " CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette: def __init__( self, files, cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None", "label": 0}, {"snippet_id": 48759, "code": ": p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product", "label": 0}, {"snippet_id": 51793, "code": "=get_params(url) params['redirect']='https://www.google.com' fullURL=generate_url_with_params(url, params) req=requests.get(fullURL) if req.content.find('google') !=-1: success_message(fullURL) print '\\n'", "label": 1}, {"snippet_id": 853, "code": " and functions for serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat", "label": 0}, {"snippet_id": 80504, "code": ", 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in item, stack) dialog=QMessageBox(icon=QMessageBox.Critical) dialog", "label": 0}, {"snippet_id": 78268, "code": "(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s", "label": 0}, {"snippet_id": 41854, "code": "/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup/{self", "label": 0}, {"snippet_id": 38020, "code": " return(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types=", "label": 0}, {"snippet_id": 30726, "code": "/login') if editGrudget.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to edit this grudget. Please create your own grudget", "label": 1}, {"snippet_id": 5617, "code": " self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 23018, "code": " method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated", "label": 0}, {"snippet_id": 5557, "code": ".locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post", "label": 0}, {"snippet_id": 1488, "code": " or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content", "label": 0}, {"snippet_id": 3283, "code": "='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return", "label": 0}, {"snippet_id": 84286, "code": "=='GET': article_args={'article__title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'article__content_type': get_ct(group", "label": 0}, {"snippet_id": 46166, "code": "(set(dg.get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name", "label": 0}, {"snippet_id": 1518, "code": "\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http", "label": 0}, {"snippet_id": 51777, "code": "'result/'+self.cate_str+'_attack'+str(self.count)+'.sh' with open(script_name, 'w') as f: f.write(script) def saveScope(self): file_name='result/'+self.cate_str+'_scope.json' with open(file_name,'w+') as f:", "label": 0}, {"snippet_id": 67263, "code": ".render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm()", "label": 0}, {"snippet_id": 16235, "code": " round_set=t.round_set.all() data=[] for tp in t.tournamentplayer_set.all(): current={'player': tp.player} rps=tp.roundplayers() for r in round_set: played=rps.filter(the_round=r).exists() current['round_%d'", "label": 0}, {"snippet_id": 8859, "code": "), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(", "label": 0}, {"snippet_id": 58325, "code": "\": \"create_courselet\" }, onboarding.NEXT_STEPS:{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody</p>\", \"description", "label": 1}, {"snippet_id": 40731, "code": " response=self.client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html", "label": 0}, {"snippet_id": 68967, "code": "/SWJxHpX795zn+iCwyvZSlLfH9mlegOeVmj9cyhN/VOmS3 QRhlYXoA2z7WZTNoC6iAIlyIpMTcZr+ntaGVtFOLS6fwdBqDXjmSQu66mDKwU5Ek fNlbyrpzZMyFCDWEYo4AIR/18aGZBYUAEQEAAYkCHwQYAQIACQUCU5sktgIbDAAK CRAWVaCraFdigIPQEACcYh8rR19wMZZ", "label": 0}, {"snippet_id": 53675, "code": " Exception as err: return 'Redirect Buffer Error:{}'.format(err) def flush_all(self) -> str: \"\"\" :return: \"\"\" self.bytes_buffer.seek(0) contents=self.bytes_buffer.read() self.bytes_buffer.truncate(0) self", "label": 1}, {"snippet_id": 13300, "code": " render_to_response from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register", "label": 0}, {"snippet_id": 42651, "code": ", '<div class=\"results-wrapper\">') def test_product_facet_returns(self): response=self.c.get('/find/?q=insecticide') brands=response.content.count(b'name=\"brand_name\"') self.assertTrue(brands>10,('There", "label": 0}, {"snippet_id": 30349, "code": "=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current user is already", "label": 0}, {"snippet_id": 74352, "code": "._get_access_form()) return self.render_to_response(context) def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner=", "label": 0}, {"snippet_id": 71047, "code": "(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 60548, "code": ".add_route( DatabaseDownload.as_view(self), r\"/<db_name:[^/]+?><as_db:(\\.db)$>\" ) app.add_route( DatabaseView.as_view(self), r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView", "label": 0}, {"snippet_id": 72421, "code": ") if depth > 5: logger.warning(\"[NFS] Limiting depth to maximum value of 5: \" \"input depth=%s\", depth) depth=5 root_dir='{}/'.format(root_dir) \\ if not root_dir.endswith('/') else root_dir try: cfs=CephFS", "label": 0}, {"snippet_id": 75584, "code": "(file_path, 'rb'), content_type='application/pdf') response['Content-Disposition']='attachment; filename=\"%s\"' % candidate.thesis.original_file_name return response def _select2_list(search_results): select2_results", "label": 0}, {"snippet_id": 83716, "code": " user editing this article.\"\"\" if not self.is_mine(request): user=request.user user.message_set.create( message=self.message_template % self.created_at) def is_mine(self, request): return self.user_ip=", "label": 0}, {"snippet_id": 6530, "code": ".config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token", "label": 1}, {"snippet_id": 27547, "code": " works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally", "label": 0}, {"snippet_id": 5749, "code": ".status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in", "label": 0}, {"snippet_id": 24304, "code": "): self.fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable", "label": 0}, {"snippet_id": 22737, "code": " automatically. \"\"\" with self.lock: events=self.events self.events=[] if self.worker.mode==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events", "label": 1}, {"snippet_id": 18557, "code": "(\"signup.html\",error=does_it_exist) \t\t\treturn \t\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password) \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin'", "label": 0}, {"snippet_id": 22209, "code": ", num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path", "label": 1}, {"snippet_id": 33863, "code": ".browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\")", "label": 0}, {"snippet_id": 4963, "code": "\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 27281, "code": " temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options=None, _internal_config=None): self.object_id_seed=object_id_seed self.redis_address=redis_address", "label": 0}, {"snippet_id": 29981, "code": " User(Base): __tablename__='user' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) email=Column(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base):", "label": 1}, {"snippet_id": 27184, "code": " monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can", "label": 0}, {"snippet_id": 84491, "code": "(allow_read or allow_write): return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) old_title=article.changeset_set.filter( revision=revision+1).get().old_title try: art=Article", "label": 0}, {"snippet_id": 70785, "code": " basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath", "label": 1}, {"snippet_id": 27768, "code": " function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events=self.events self.events=[] if self.worker", "label": 1}, {"snippet_id": 8157, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url=", "label": 0}, {"snippet_id": 81846, "code": " render(request, 'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render(request, ", "label": 0}, {"snippet_id": 60583, "code": ".jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash(request, original_response): if original_response.status==404 and request.path.endswith(\"/", "label": 0}, {"snippet_id": 27583, "code": " override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type:", "label": 0}, {"snippet_id": 21233, "code": " on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is None: self.start_redis", "label": 0}, {"snippet_id": 40691, "code": "()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0],", "label": 1}, {"snippet_id": 50165, "code": "'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"register.html\") @app.route(\"/signup\", methods=[\"POST\"]) def signUpButton(): email=request.form[\"email\"]", "label": 0}, {"snippet_id": 67252, "code": " ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html' def", "label": 1}, {"snippet_id": 68912, "code": "/kcmYBsLCCI5uSEP6JJRQQhHrCvOX0UaytItfsQfLm EYRd2F72o1yGh3yvWWfDIBXRmaBuIGXGpajC0JyBGSOWb9UxMNZY/2LJEwARAQAB tB9Ob2RlU291cmNlIDxncGdAbm9kZXNvdXJjZS5jb20+iQI4BBMBAgAiBQJTmyS2 AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAWVaCraFdigHTmD", "label": 0}, {"snippet_id": 14344, "code": " account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in", "label": 0}, {"snippet_id": 4501, "code": "'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301", "label": 0}, {"snippet_id": 62478, "code": ".info(\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get(", "label": 0}, {"snippet_id": 41582, "code": " Client from importlib import import_module from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def setUp(self): self.objects", "label": 0}, {"snippet_id": 37902, "code": " Parameters ---------- document: DataDocument The parent DataDocument extra: integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included exclude", "label": 0}, {"snippet_id": 29567, "code": ") next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) flash('There was an issue with sign up, please try again') return render_template", "label": 1}, {"snippet_id": 53420, "code": ": :param code: :param error: :return: \"\"\" stack=[dict( filename=error.filename, location=None, line_number=error.lineno, line=error.text.rstrip() )] render_data=dict( type=error.__class__.__name__, message", "label": 0}, {"snippet_id": 3723, "code": "', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response", "label": 0}, {"snippet_id": 55355, "code": "\tdef lstat(self): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t", "label": 0}, {"snippet_id": 83319, "code": ", widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class Meta: model=Article exclude=('creator', 'creator_ip", "label": 0}, {"snippet_id": 878, "code": ", HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext", "label": 1}, {"snippet_id": 6777, "code": " current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash('Your account is confirmed. Thank you!') else: flash('The confirmation link is invalid or has expired", "label": 0}, {"snippet_id": 45575, "code": ") def save_doc_form(request, pk): '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked", "label": 0}, {"snippet_id": 71587, "code": "'_eauth']=s.serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session", "label": 0}, {"snippet_id": 1666, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^", "label": 0}, {"snippet_id": 71574, "code": "=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1)", "label": 0}, {"snippet_id": 33100, "code": " admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical", "label": 0}, {"snippet_id": 22904, "code": "\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data", "label": 0}, {"snippet_id": 9455, "code": " exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user", "label": 0}, {"snippet_id": 28570, "code": " default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources", "label": 0}, {"snippet_id": 5891, "code": " self.time=time if time is not None else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self, app): \"\"\" Do setup that requires", "label": 0}, {"snippet_id": 76141, "code": " if path==self.from_url: log.debug('Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path", "label": 0}, {"snippet_id": 43653, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id='id_rawchem", "label": 1}, {"snippet_id": 80598, "code": " success: print(f\"Setting wavelength to{target_wavelength} nm...\") self.matisse.set_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_approx_wavelength_dialog(self, checked): target_wavelength,", "label": 0}, {"snippet_id": 66012, "code": ".set_destroy_with_parent(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(\"quit_button\") back_button.connect(", "label": 0}, {"snippet_id": 70895, "code": " content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode", "label": 0}, {"snippet_id": 84360, "code": " allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name", "label": 0}, {"snippet_id": 83347, "code": "\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title", "label": 1}, {"snippet_id": 11862, "code": " edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx", "label": 0}, {"snippet_id": 64136, "code": "('SAML2_LOGOUT_REDIRECT_URL') else: logouts=client.global_logout(subject_id) loresponse=logouts.values()[0] if isinstance(loresponse, LogoutResponse): if loresponse.status_ok(): current_app.logger.debug", "label": 0}, {"snippet_id": 40379, "code": "(extraction_script=es).count() > 1: return QAGroup.objects.filter(extraction_script=es).first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es", "label": 0}, {"snippet_id": 72109, "code": "\"Cannot create this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo", "label": 0}, {"snippet_id": 11270, "code": "' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags", "label": 0}, {"snippet_id": 76543, "code": " Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was", "label": 0}, {"snippet_id": 32057, "code": " The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical analysis", "label": 0}, {"snippet_id": 65115, "code": "(deductions, args.points, 'syntax error') break code=fixed except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, args.points, 'failed to parse code') break if", "label": 0}, {"snippet_id": 50995, "code": "\" includes all default steps. \"all\" includes all steps. \"foo\" or \"+foo\" includes step foo. \"-foo\" excludes step foo, even if \"default\" or \"all\" is present. ''' steps=flatten_string_list(steps) steps=flatten_comma_list", "label": 0}, {"snippet_id": 11220, "code": "\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline", "label": 0}, {"snippet_id": 13681, "code": " to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password", "label": 0}, {"snippet_id": 41804, "code": ", 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name','report_funcuse'], \"Fieldnames passed are incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects", "label": 0}, {"snippet_id": 70214, "code": "\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len", "label": 0}, {"snippet_id": 35382, "code": ".get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value", "label": 0}, {"snippet_id": 25805, "code": " self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self):", "label": 0}, {"snippet_id": 50931, "code": " f.__name__, f) self._steps.append(f.buildstep) f.buildstep.add_conditions(conditions) return f return decorator_func def build_step(self, name=None, optional=False, default=True): def decorator_func(f)", "label": 0}, {"snippet_id": 75973, "code": " objects=RedirectManager() class Meta: verbose_name=_('redirect') verbose_name_plural=_('redirects') ordering=('-update_dt',) def __str__(self): redirect_text='{type}:{from_to_url}' if self.redirect_type in[", "label": 0}, {"snippet_id": 54890, "code": " \t\t\tself.book_edition=book_edition \t\t\tself.chapter=chapter \t\t\tself.number=number \t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t", "label": 0}, {"snippet_id": 10723, "code": ": account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads", "label": 0}, {"snippet_id": 50554, "code": "=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False def release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the", "label": 0}, {"snippet_id": 80269, "code": "=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action", "label": 0}, {"snippet_id": 11381, "code": " detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service", "label": 0}, {"snippet_id": 19459, "code": ".node_ip_address), num_current_log_files, -1) for log_filename in new_log_filenames: logger.info(\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename", "label": 1}, {"snippet_id": 69097, "code": "\"Cannot uninstall configurable-http-proxy...\") def ensure_jupyterhub_service(prefix): \"\"\" Ensure JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp(", "label": 0}, {"snippet_id": 40018, "code": "(max_length=255, null=True, blank=True) rid=models.CharField(max_length=50, null=True, blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True,", "label": 1}, {"snippet_id": 44174, "code": "(list_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to", "label": 0}, {"snippet_id": 61024, "code": " monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host", "label": 0}, {"snippet_id": 65665, "code": "\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self.filechooser_creation_dialog) cancel_button=builder", "label": 0}, {"snippet_id": 51910, "code": "!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login(): \"\"\"Load login form.\"\"\" return", "label": 0}, {"snippet_id": 35270, "code": " template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage)", "label": 0}, {"snippet_id": 71745, "code": "'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create(auth_id, user_info) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() user_count=models.User.query().count", "label": 0}, {"snippet_id": 16087, "code": " BaseGamePlayersFormset from tournament.forms import BasePlayerRoundFormset from tournament.forms import BasePowerAssignFormset from tournament.forms import GamePlayersForm from tournament.forms import", "label": 0}, {"snippet_id": 43171, "code": " self.assertNotIn(elp_not_flagged.raw_cas.encode(), response.content) def test_every_extractedtext_qa(self): for et in ExtractedText.objects.all(): response=self.client.get(f'/qa/extractedtext/%s' % et", "label": 1}, {"snippet_id": 12750, "code": " session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve", "label": 0}, {"snippet_id": 13396, "code": " import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted", "label": 0}, {"snippet_id": 69330, "code": "\"\" Set up user conda environment with required packages \"\"\" logger.info(\"Setting up user environment...\") miniconda_version='4.5.4' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda", "label": 0}, {"snippet_id": 78405, "code": "{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time", "label": 0}, {"snippet_id": 12048, "code": "=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint", "label": 1}, {"snippet_id": 49216, "code": " appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST.get('referer', 'data_document'", "label": 0}, {"snippet_id": 70892, "code": " content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified", "label": 0}, {"snippet_id": 72190, "code": ".0) def set(self, cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf", "label": 0}, {"snippet_id": 84076, "code": "'wiki', extra_context=None, check_membership=False, is_member=None, is_private=None, *args, **kw): group=None article_args={'title': title} if group_slug is not None: group=get_object_or_404(group_qs, **", "label": 0}, {"snippet_id": 78509, "code": "=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get", "label": 1}, {"snippet_id": 57203, "code": "'core/delete.html', extra_context) @login_required def transaction_detail(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code", "label": 0}, {"snippet_id": 64644, "code": "'NotImplementedError', 'object', 'oct', 'ord', 'OSError', 'OverflowError', '__package__', 'PendingDeprecationWarning', 'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', 'range', 'RecursionError", "label": 0}, {"snippet_id": 53578, "code": "(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', **render_data ), html_message=templating.render_template( ", "label": 0}, {"snippet_id": 25526, "code": " default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help", "label": 0}, {"snippet_id": 50293, "code": " if 'return_url' in request.args: return redirect(request.args['return_url']) else: return redirect('/') @app.route(\"/tmp\", methods=[\"POST\"]) def tmp(): with tempfile.NamedTemporaryFile(mode=\"w+t\", delete", "label": 0}, {"snippet_id": 66569, "code": " filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +filechooser_opening_dialog", "label": 0}, {"snippet_id": 32054, "code": " value(optional). position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: '", "label": 0}, {"snippet_id": 20032, "code": "'s object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils", "label": 0}, {"snippet_id": 83598, "code": " not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_qs=article_qs.filter(content_type=get_ct(group), object_id=group.id) return article_qs, group def get_articles_for_object", "label": 0}, {"snippet_id": 46247, "code": ".one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name' err_msg=['must be 1:1 with \"data_document_id\".'] context['ext_err'][i+1]={col: err_msg} if created: update_fields(row, ext) row[", "label": 0}, {"snippet_id": 30714, "code": "(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if editGrudget.user_id !=login_session['user_id']: return ", "label": 1}, {"snippet_id": 79460, "code": " datarequest_dict['organization']['users'] if user.get('capacity')=='admin']) return users @tk.chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data", "label": 0}, {"snippet_id": 65854, "code": " def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget) self.container.remove_page(page_num", "label": 0}, {"snippet_id": 49564, "code": ", 'secret': 'U9ufkrhicVHrj5CGojmQ7ZCxSwytoShSgM0t9WCq0HbqcfKwL8' } } app.secret_key='fe2917b485cc985c47071f3e38273348' app.config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS']=set(['pml", "label": 0}, {"snippet_id": 20476, "code": " type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"-", "label": 0}, {"snippet_id": 52804, "code": ".request.data.get('room') try: self.room=Room.objects.get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text']=self.request.data", "label": 0}, {"snippet_id": 45592, "code": " redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST", "label": 1}, {"snippet_id": 24017, "code": " __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr", "label": 0}, {"snippet_id": 9127, "code": " util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted", "label": 0}, {"snippet_id": 59592, "code": ", None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self, key=None, database=None, table=None, fallback=True): \"\"\" Looks up metadata", "label": 0}, {"snippet_id": 78522, "code": "): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), 'site_url': config.get('ckan.site_url", "label": 1}, {"snippet_id": 30345, "code": "']='application/json' return response stored_access_token=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id", "label": 0}, {"snippet_id": 74727, "code": "(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type', '", "label": 0}, {"snippet_id": 44977, "code": ".exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/'", "label": 0}, {"snippet_id": 72063, "code": " for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal", "label": 0}, {"snippet_id": 9202, "code": " if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode", "label": 1}, {"snippet_id": 28855, "code": " psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\"", "label": 0}, {"snippet_id": 59247, "code": " escape_css_string, escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit, to_css_class ) from.inspect import inspect_hash, inspect_views, inspect_tables from.plugins import pm, DEFAULT_PLUGINS from", "label": 0}, {"snippet_id": 39378, "code": " indexing(self): obj=ExtractedChemicalIndex( meta={'id': self.id}, chem_name=self.raw_chem_name, raw_cas=self.raw_cas, raw_chem_name=self.raw_chem_name, facet_model_name='Extracted Chemical', ) obj.save", "label": 0}, {"snippet_id": 44339, "code": ": doc=self.objects.doc qa_url=self.live_server_url +f'/qa/extractedtext/{doc.pk}/' self.browser.get(qa_url) with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 56787, "code": "]=gettext('Delete{}?'.format(concept.concept_type)) extra_context['message']=concept.description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse", "label": 0}, {"snippet_id": 51272, "code": ": return read_dependencies_from_filename(os.path.join('projectdata', 'dependencies.txt'), logfile=sys.stdout) def fetch_dependencies(self, *dependencies, **kwargs): kwargs=process_kwargs( \"fetch_dependencies", "label": 0}, {"snippet_id": 70426, "code": " are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 64248, "code": "'Logout service started') state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) logout_redirect_url=current_app", "label": 0}, {"snippet_id": 359, "code": " 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the", "label": 0}, {"snippet_id": 17314, "code": " models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint", "label": 0}, {"snippet_id": 27271, "code": ", logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java", "label": 0}, {"snippet_id": 82222, "code": "=cat.justurl_set.all().count() context['number_of_links']=quantity context['urls_without_category']=urls_without_category return context class CategoryDetailView(LoginRequiredMixin, View): def get(self", "label": 0}, {"snippet_id": 33350, "code": " Client from django.contrib.auth import authenticate from django.contrib.auth.models import User from dashboard.models import PUC, Product, ProductToPUC, ProductDocument, DSSToxLookup from dashboard.views", "label": 0}, {"snippet_id": 32475, "code": ".O_CREAT | os.O_WRONLY | os.O_TRUNC)) elif self.accept(TokenType.REDIRECT_APPEND): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(1,(filename, os.O_CREAT | os.O_WRONLY | os.O_APPEND", "label": 0}, {"snippet_id": 65087, "code": " test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed: if vlevel >", "label": 0}, {"snippet_id": 14391, "code": " \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt", "label": 0}, {"snippet_id": 31368, "code": "'social_core.backends.github.GithubOAuth2', 'social_core.backends.gitlab.GitLabOAuth2', 'social_core.backends.bitbucket.BitbucketOAuth', 'django.contrib.auth.backends.ModelBackend' ) MIDDLEWARE_CLASSES", "label": 0}, {"snippet_id": 71246, "code": "=None return self def _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self", "label": 0}, {"snippet_id": 59999, "code": "(path), uri=True ) as conn: self.prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables", "label": 0}, {"snippet_id": 17307, "code": " ipaddress import ip_address import flask from nyaa import email, forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link", "label": 0}, {"snippet_id": 19429, "code": ".redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the", "label": 1}, {"snippet_id": 77055, "code": " deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label, projection, request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id", "label": 0}, {"snippet_id": 83465, "code": "] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip", "label": 0}, {"snippet_id": 14992, "code": "', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name", "label": 0}, {"snippet_id": 2170, "code": ", parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory", "label": 0}, {"snippet_id": 70424, "code": " fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not", "label": 1}, {"snippet_id": 4913, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[", "label": 0}, {"snippet_id": 17753, "code": ", ' 'if a matching account was found.'), 'info') return flask.redirect(flask.url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp", "label": 0}, {"snippet_id": 32774, "code": ") for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a number of IO", "label": 0}, {"snippet_id": 54937, "code": " Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups ", "label": 1}, {"snippet_id": 76745, "code": " client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\") if not tile: return tile if", "label": 0}, {"snippet_id": 46557, "code": ".message_dict good_records.append(ingredient) if context['clean_comp_err']: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) if not context['clean_comp_err']", "label": 0}, {"snippet_id": 7105, "code": " a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS", "label": 0}, {"snippet_id": 1610, "code": "': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files", "label": 0}, {"snippet_id": 46416, "code": ") stub +=1 context['bulk']=0 if request.method=='POST' and 'clean_comp_data_button' in request.POST: clean_comp_data_form=CleanCompDataForm(request.POST, request.FILES) if clean_comp_data_form.is_valid", "label": 0}, {"snippet_id": 52675, "code": " \"\"\" session.clear() return redirect(\"/\") @app.route(\"/logout\", methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility", "label": 0}, {"snippet_id": 45649, "code": "'dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document", "label": 0}, {"snippet_id": 61303, "code": ".\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def", "label": 0}, {"snippet_id": 77353, "code": "\"projection\"): server_vars[\"dbType\"]=\"gemap\" else: server_vars[\"dbType\"]=\"gedb\" if not server_vars.has_key(\"projection\"): server_vars[\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars", "label": 0}, {"snippet_id": 5312, "code": ", }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response", "label": 0}, {"snippet_id": 6309, "code": " verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non", "label": 0}, {"snippet_id": 35057, "code": " import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core", "label": 0}, {"snippet_id": 14532, "code": "':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ ", "label": 0}, {"snippet_id": 78686, "code": " session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic", "label": 0}, {"snippet_id": 5910, "code": " Flask app. \"\"\" self.app=app app.config.setdefault('OIDC_SCOPES',['openid', 'email']) app.config.setdefault('OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token", "label": 0}, {"snippet_id": 33470, "code": "(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get(pk=pid), puc=puc, puc_assigned_usr=User.objects.get(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids(dtxs) ethylparaben_stats", "label": 0}, {"snippet_id": 36340, "code": ")'), 'The link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response", "label": 0}, {"snippet_id": 51131, "code": " options, args=self._optionParser.parse_args(argv) self._context.options=options self._context.args=args self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env):", "label": 0}, {"snippet_id": 58355, "code": "\", \"title\": \"create_thread\" }, onboarding.VIEW_INTRODUCTION:{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{", "label": 0}, {"snippet_id": 37761, "code": ".all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs): super(", "label": 0}, {"snippet_id": 28520, "code": "(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES", "label": 0}, {"snippet_id": 7159, "code": ": roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed def get_query(self): return self.session.query(self.model", "label": 1}, {"snippet_id": 80499, "code": "[len(line) for line in stack]), 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in item, stack) dialog=QMessageBox(icon", "label": 0}, {"snippet_id": 29329, "code": "('Initialized the database.') def init_db(): import benwaonline.models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db(error): \"\"\"Closes the database again at the end", "label": 0}, {"snippet_id": 27858, "code": " None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute", "label": 0}, {"snippet_id": 66913, "code": ").order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=domain)).order_by('-timestamp", "label": 0}, {"snippet_id": 34078, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"", "label": 0}, {"snippet_id": 19926, "code": " given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe", "label": 0}, {"snippet_id": 52239, "code": ".first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page, with board\"\"\" team_id=request", "label": 0}, {"snippet_id": 7474, "code": ".exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam, key): search_kwargs[key]=request.args.get(key) exams=exams.filter_by(**search_kwargs) result=self", "label": 0}, {"snippet_id": 50406, "code": "=5 DEFAULT_STEPS=\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename=filename self.locktime=None def __enter__", "label": 0}, {"snippet_id": 9169, "code": " redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 57833, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.PREVIEW_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.NEXT_STEPS: ONBOARDING_STEPS_DEFAULT_TEMPLATE } def get_onboarding_setting(setting_name): \"", "label": 1}, {"snippet_id": 80614, "code": " set_bifi_approx_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Approx. Wavelength', label='Wavelength(nm): ', value=self.matisse.query('MOTBI:WL?', numeric_result=True)", "label": 0}, {"snippet_id": 73647, "code": "'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required", "label": 0}, {"snippet_id": 19167, "code": ".pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self", "label": 1}, {"snippet_id": 60228, "code": " custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name in a thread\"\"\" page_size=page_size or self.page_size def sql_operation_in_thread(): conn=getattr(connections, db_name, None) if not conn:", "label": 0}, {"snippet_id": 75054, "code": " def candidate_metadata(request, candidate_id): from.forms import MetadataForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect", "label": 0}, {"snippet_id": 24294, "code": ". fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) elif", "label": 0}, {"snippet_id": 12854, "code": "=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query", "label": 0}, {"snippet_id": 10895, "code": ", request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 27137, "code": " format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name", "label": 0}, {"snippet_id": 213, "code": " or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content", "label": 0}, {"snippet_id": 39844, "code": " and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) central_wf_analysis", "label": 0}, {"snippet_id": 56411, "code": "') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to( 'http", "label": 0}, {"snippet_id": 64567, "code": "'AssertionError', 'AttributeError', 'BaseException', 'bin', 'BlockingIOError', 'bool', 'BrokenPipeError', 'BufferError', '__build_class__', 'bytearray', 'bytes', 'BytesWarning', 'callable', 'ChildProcessError', ", "label": 0}, {"snippet_id": 74884, "code": " candidate_id: candidate=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request", "label": 0}, {"snippet_id": 68776, "code": " we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main'", "label": 0}, {"snippet_id": 83809, "code": "'wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': articles, group=get_articles_by_group( article_qs, group_slug, group_slug_field, group_qs) allow_read", "label": 0}, {"snippet_id": 12360, "code": " sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update", "label": 0}, {"snippet_id": 26095, "code": "\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name", "label": 0}, {"snippet_id": 19637, "code": "\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required", "label": 1}, {"snippet_id": 24168, "code": " redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.", "label": 1}, {"snippet_id": 65210, "code": " deductions) return deductions +=grade(code_obj, name, args.points, test_case_objs, vlevel) output_json(args.points, deductions) if __name__=='__main__': try: main() except Exception as e: sys.exit(str(e))", "label": 0}, {"snippet_id": 19932, "code": " channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel", "label": 0}, {"snippet_id": 4604, "code": ".client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after", "label": 0}, {"snippet_id": 35186, "code": "(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id)", "label": 0}, {"snippet_id": 54015, "code": "(contents) > 0: self.body.append(render_texts.preformatted_text(contents)) self._last_update_time=time.time() return contents def read_stderr(self): \"\"\" Returns the current state of the stderr redirect buffer", "label": 0}, {"snippet_id": 77361, "code": "=\"gedb\" if not server_vars.has_key(\"projection\"): server_vars[\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars", "label": 0}, {"snippet_id": 65603, "code": ".STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK)) self.filechooser_creation_dialog.set_current_name(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal(True) filter_text", "label": 0}, {"snippet_id": 6238, "code": " session, and redirect to the IdP. :param destination: the page that the user was going to, before we noticed they weren't logged in :return: a redirect response \"\"\" csrf_token=b64encode(self.urandom(24))", "label": 0}, {"snippet_id": 368, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is", "label": 0}, {"snippet_id": 29211, "code": " login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True) app.config.from_object('secrets", "label": 0}, {"snippet_id": 24644, "code": ". \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log", "label": 1}, {"snippet_id": 57994, "code": "\"\"\" Test core utility functions. \"\"\" import mock from unittest import skip from ddt import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core", "label": 0}, {"snippet_id": 78629, "code": " are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data request :type title: string :param description", "label": 0}, {"snippet_id": 10472, "code": " openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts", "label": 0}, {"snippet_id": 67785, "code": "=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(value__icontains=keyword)).order_by('-timestamp') return query def thirty_day_data(self): data=[] today=datetime", "label": 0}, {"snippet_id": 3377, "code": " nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'", "label": 1}, {"snippet_id": 9825, "code": "(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just", "label": 0}, {"snippet_id": 29043, "code": "(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache", "label": 0}, {"snippet_id": 30300, "code": " response gplus_id=credentials.id_token['sub'] if result['user_id'] !=gplus_id: response=make_response( json.dumps(\"Token's user ID doesn't match given user ID.\"), 401) response.headers['Content-Type']=", "label": 0}, {"snippet_id": 29208, "code": "=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True) app.config", "label": 0}, {"snippet_id": 84164, "code": "): form.group=group new_article, changeset=form.save() return redirect(new_article) elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip} if group_slug is not None: initial", "label": 0}, {"snippet_id": 24706, "code": "\"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format", "label": 0}, {"snippet_id": 52758, "code": " Room logger=logging.getLogger(__name__) class MessageCreateAPIView(CreateAPIView): \"\"\" Creates a new message object with a file attachment Returns on the socket { 'id': \"id\", 'sent_by':'user_id', 'room", "label": 1}, {"snippet_id": 69323, "code": "'Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file): \"\"\" Set up user conda environment with required packages \"\"\" logger.info(\"Setting up user environment...", "label": 0}, {"snippet_id": 80625, "code": " ', value=self.matisse.query('MOTBI:WL?', numeric_result=True)) if success: print(f\"Setting BiFi approximate wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength)", "label": 0}, {"snippet_id": 65927, "code": ".override_dialog.destroy() def on_tab_switch(self, notebook, tab, pagenum): headerbar=tab.get_headerbar() self.set_titlebar(headerbar) def on_save_check_button_toggled(self, check_button, db): if check_button", "label": 0}, {"snippet_id": 5231, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 23190, "code": ".construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(", "label": 0}, {"snippet_id": 18914, "code": "..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST", "label": 1}, {"snippet_id": 31065, "code": " session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route(", "label": 0}, {"snippet_id": 20254, "code": " max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages):", "label": 0}, {"snippet_id": 77028, "code": "%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\" _TILE_ARGS=\"&%s=%d&%s=%d&%s=%d\" _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer", "label": 0}, {"snippet_id": 56413, "code": ".given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link", "label": 0}, {"snippet_id": 6529, "code": "\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token", "label": 1}, {"snippet_id": 69998, "code": "') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 13027, "code": " if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course", "label": 0}, {"snippet_id": 20655, "code": " a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional processes like the Redis servers", "label": 0}, {"snippet_id": 66997, "code": " from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='filehash/index.html' def get_context_data", "label": 0}, {"snippet_id": 3582, "code": ") response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self", "label": 0}, {"snippet_id": 9546, "code": " context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those", "label": 0}, {"snippet_id": 34081, "code": "\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*')))", "label": 0}, {"snippet_id": 28075, "code": " exception_message(str): A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1]", "label": 0}, {"snippet_id": 68342, "code": "=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime", "label": 0}, {"snippet_id": 60780, "code": " is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"", "label": 0}, {"snippet_id": 29227, "code": "('secrets') db.init_app(app) migrate=Migrate(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app", "label": 0}, {"snippet_id": 17868, "code": " profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email", "label": 0}, {"snippet_id": 77320, "code": " return json.loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database. Returns: layers_by_name: A dict of all", "label": 0}, {"snippet_id": 73200, "code": ".have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data.get('email') email_domain=email.split('@')[1].lower() if email_domain !", "label": 0}, {"snippet_id": 32716, "code": " The arguments to be passed to the executable. ''' def __init__(self, command, args): self.command=command self.args=args self.args.insert(0, command) self.pid=None def execute(self, builtins): if self", "label": 0}, {"snippet_id": 72482, "code": " django.http import HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login", "label": 1}, {"snippet_id": 56055, "code": "{}'.format(settings.PUBLIC_DOMAIN, PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username", "label": 0}, {"snippet_id": 42726, "code": " of False at the beginning') response=self.client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response", "label": 0}, {"snippet_id": 74325, "code": "*args, **kwargs) else: return self._render_access_form() def _get_access_form(self): form_kwargs=self.get_form_kwargs() form_kwargs.update({\"instance\": self.get_object()}) return self.access_form_class(", "label": 0}, {"snippet_id": 69408, "code": " as admins. \"\"\" if not admins: return logger.info(\"Setting up admin users\") config_path=CONFIG_FILE if os.path.exists(config_path): with open(config_path, 'r') as f: config=yaml.load(f) else: config={}", "label": 0}, {"snippet_id": 74515, "code": " import require_http_methods from.models import Person, Candidate, Keyword, CommitteeMember from.widgets import ID_VAL_SEPARATOR BDR_EMAIL='bdr@brown.edu' logger=logging.getLogger('etd') def login(request)", "label": 0}, {"snippet_id": 6430, "code": "', False) and \\ self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): ", "label": 0}, {"snippet_id": 63314, "code": ") eppn=self.test_user_data['eduPersonPrincipalName'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self", "label": 0}, {"snippet_id": 20111, "code": " sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin", "label": 0}, {"snippet_id": 40886, "code": "=prod, puc=puc21, classification_method='MA') p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count", "label": 0}, {"snippet_id": 22677, "code": " \"\"\"Drivers run this as a thread to flush profile data in the background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the", "label": 1}, {"snippet_id": 65305, "code": ".first_start_screen() self.connect(\"delete-event\", self.on_application_quit) self.custom_css() def create_headerbar(self): builder=Gtk.Builder() builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui\")", "label": 0}, {"snippet_id": 71054, "code": "=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of", "label": 0}, {"snippet_id": 17696, "code": "/password-reset', methods=['GET', 'POST']) def password_reset(payload=None): if not app.config['ALLOW_PASSWORD_RESET']: return flask.abort(404) if flask.g.user: return flask.redirect(redirect_url()) if", "label": 0}, {"snippet_id": 1967, "code": " http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans ", "label": 0}, {"snippet_id": 65265, "code": " override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True) opened_databases=[]", "label": 0}, {"snippet_id": 36609, "code": ".objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save() response=self.client.get(", "label": 0}, {"snippet_id": 82083, "code": " created.pk})) return render(request, 'home.html',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html", "label": 0}, {"snippet_id": 6616, "code": "'static': return redirect(url_for('auth.unconfirmed')) @auth.route('/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return", "label": 0}, {"snippet_id": 12995, "code": " calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally", "label": 0}, {"snippet_id": 64411, "code": ".get('TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get", "label": 0}, {"snippet_id": 10776, "code": " context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\",", "label": 0}, {"snippet_id": 76247, "code": "\"\"Deals with fetching tiles and composing them for the final image.\"\"\" import logging import os import StringIO import tempfile import urllib import geom import images import PIL.Image as Image import tilecalcs", "label": 1}, {"snippet_id": 54679, "code": "\t\tself.book_editions=defaultdict(list) \t\tfor assignment in self.assignments: \t\t\tself.book_editions[assignment.book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert(assignment", "label": 1}, {"snippet_id": 12110, "code": " context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint':", "label": 0}, {"snippet_id": 2222, "code": " ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index", "label": 0}, {"snippet_id": 46655, "code": ".FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup=form.save() info=[x.decode('ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info) good_fields", "label": 0}, {"snippet_id": 48803, "code": ".value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'", "label": 0}, {"snippet_id": 47777, "code": "['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n", "label": 0}, {"snippet_id": 1636, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If", "label": 0}, {"snippet_id": 40167, "code": " from django.core.validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info import CommonInfo from.data_document import DataDocument class Script(CommonInfo): TYPE_CHOICES=((", "label": 0}, {"snippet_id": 19661, "code": " to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP", "label": 0}, {"snippet_id": 58251, "code": "(onboarding.NEXT_STEPS, ONBOARDING_STEPS_DEFAULT_TEMPLATE), ('fake_key', None) ) def test_get_onboarding_setting(self, setting_name, value, _mock): self.assertEqual(get_onboarding_setting(setting_name)", "label": 0}, {"snippet_id": 68283, "code": "'keyword') if keyword is not None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST", "label": 0}, {"snippet_id": 43624, "code": " of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/", "label": 0}, {"snippet_id": 84074, "code": " template_name='edit.html', template_dir='wiki', extra_context=None, check_membership=False, is_member=None, is_private=None, *args, **kw): group=None article_args={'title': title} if group_slug is not None: group", "label": 0}, {"snippet_id": 79609, "code": "=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email'", "label": 1}, {"snippet_id": 33091, "code": " admin.site.register(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin", "label": 1}, {"snippet_id": 14164, "code": " context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are ", "label": 0}, {"snippet_id": 35075, "code": " LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget): def tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc(", "label": 0}, {"snippet_id": 29573, "code": " flask import Blueprint, request, session, g, redirect, url_for, \\ render_template, flash, current_app bp=Blueprint('benwaonline', __name__) @bp.route('/') def under_construction(): return redirect(url_for", "label": 1}, {"snippet_id": 5225, "code": ".assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self", "label": 0}, {"snippet_id": 3914, "code": ", target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4", "label": 0}, {"snippet_id": 78807, "code": ":param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string ", "label": 0}, {"snippet_id": 54113, "code": " count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\"", "label": 0}, {"snippet_id": 15469, "code": ".entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'delta': entry", "label": 0}, {"snippet_id": 58467, "code": ">\", \"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\": False, \"settings\":{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc", "label": 0}, {"snippet_id": 53364, "code": "(module.__dict__) exec(code, step.test_locals) try: set_executing(True) threads.abort_thread() if environ.modes.has(environ.modes.TESTING): exec_test() else: exec(code, module.__dict__) out=None except", "label": 0}, {"snippet_id": 80775, "code": ") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'", "label": 0}, {"snippet_id": 11196, "code": ".url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id", "label": 0}, {"snippet_id": 2534, "code": "([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime)", "label": 0}, {"snippet_id": 4142, "code": ".create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths", "label": 0}, {"snippet_id": 31236, "code": " GITMATE_PLUGINS=[ 'code_analysis', 'welcome_commenter', 'auto_label_pending_or_wip', 'pr_size_labeller', 'issue_labeller', 'bug_spotter', 'ack', ] INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth',", "label": 0}, {"snippet_id": 11943, "code": " from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import", "label": 0}, {"snippet_id": 51102, "code": ", kwargs, {\"disable_others\":False}) if kwargs[\"disable_others\"]: self._enabled_options.clear() self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps", "label": 0}, {"snippet_id": 4154, "code": ".\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %", "label": 0}, {"snippet_id": 3884, "code": "(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,)", "label": 0}, {"snippet_id": 83833, "code": " group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles", "label": 0}, {"snippet_id": 83984, "code": " except ArticleClass.DoesNotExist: try: article=ChangeSet.objects.filter( old_title=title).order_by('-revision')[0].article redirected_from=title except IndexError: article=ArticleClass(**article_args)", "label": 0}, {"snippet_id": 59939, "code": ".get(database,{}).get(\"tables\") def inspect(self): \" Inspect the database and return a dictionary of table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files:", "label": 0}, {"snippet_id": 77782, "code": "\"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name", "label": 0}, {"snippet_id": 32171, "code": ">': start=self.position if self.read()=='>': self.read() return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType", "label": 0}, {"snippet_id": 41566, "code": " ExtractionScriptForm, DataGroupForm from django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import Client from importlib import import_module from django", "label": 1}, {"snippet_id": 487, "code": " \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to", "label": 0}, {"snippet_id": 3941, "code": "'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login", "label": 0}, {"snippet_id": 45141, "code": "/index.html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects", "label": 0}, {"snippet_id": 10920, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine", "label": 0}, {"snippet_id": 48223, "code": " tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__", "label": 1}, {"snippet_id": 34792, "code": "'dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n", "label": 0}, {"snippet_id": 30566, "code": ").one() return user.id except: return None @app.route('/grudget/<int:grudget_id>/grudge/JSON') def grudgetGrudgeJSON(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() grudges=session", "label": 1}, {"snippet_id": 2179, "code": " serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 25824, "code": " address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self):", "label": 0}, {"snippet_id": 21977, "code": " in order to generate the object IDs in a consistent manner. However, the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This", "label": 0}, {"snippet_id": 61581, "code": "['Live'], http_status_200_ok=validate_200_ok(no_redirects_page), forces_https=bool(pshtt_results['Strictly Forces HTTPS']), hsts=pshtt_results['HSTS'], hsts_max_age=validate_hsts_max_age(pshtt_results[", "label": 1}, {"snippet_id": 60818, "code": " self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent``", "label": 0}, {"snippet_id": 47000, "code": " pk=pk) if request.method=='POST': datagroup.delete() return redirect('data_group_list') return render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg", "label": 0}, {"snippet_id": 48168, "code": " ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator", "label": 1}, {"snippet_id": 18734, "code": " \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tChecks if a secure_cookie exists,", "label": 1}, {"snippet_id": 4716, "code": ", 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin", "label": 0}, {"snippet_id": 125, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 72541, "code": " @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def", "label": 0}, {"snippet_id": 59442, "code": "), ConfigOption(\"truncate_cells_html\", 2048, \"\"\" Truncate cells longer than this in HTML table view -set 0 to disable \"\"\".strip()), ConfigOption(\"force_https_urls\", False, \"\"\" Force URLs in API output to", "label": 0}, {"snippet_id": 10, "code": " SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified,", "label": 0}, {"snippet_id": 20608, "code": ".getLogger(__name__) class Node(object): \"\"\"An encapsulation of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict", "label": 0}, {"snippet_id": 5623, "code": " \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 21807, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class", "label": 0}, {"snippet_id": 41348, "code": " ObjectDoesNotExist: pass def test_every_extractedtext(self): ''''Loop through all the ExtractedText objects and confirm that the new create_detail_formset method returns forms based on the correct models ''' for et", "label": 0}, {"snippet_id": 1118, "code": "\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 6258, "code": "'oidc_csrf_token']=csrf_token state={ 'csrf_token': csrf_token, 'destination': destination, } extra_params={ 'state': json.dumps(state), } flow=self.flow_for_request() auth_url='{url}&{extra_params}'.format", "label": 0}, {"snippet_id": 2321, "code": ".META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application", "label": 0}, {"snippet_id": 60087, "code": ":\") self.prepare_connection(conn) sqlite_version=conn.execute(\"select sqlite_version()\").fetchone()[0] sqlite_extensions={} for extension, testsql, hasversion in( (\"json1\", \"SELECT json('{}')\", False),", "label": 0}, {"snippet_id": 42085, "code": " test_upload_note(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note", "label": 0}, {"snippet_id": 74606, "code": " person_instance=Person.objects.get(netid=request.user.username) except Person.DoesNotExist: if 'orcid' in request.POST: try: person_instance=Person.objects.get(orcid=request.POST['orcid']) except Person", "label": 0}, {"snippet_id": 52829, "code": ".get_serializer(data=request.data) self.perform_create(serializer) return Response(serializer.data, status=status.HTTP_201_CREATED) except Room.DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST)", "label": 0}, {"snippet_id": 16026, "code": "('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html', form=login_form", "label": 0}, {"snippet_id": 84186, "code": "{'content_type': group_ct.id, 'object_id': group.id}) if article is None: initial.update({'title': title, 'action': 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']='edit' form", "label": 0}, {"snippet_id": 78325, "code": " import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins", "label": 0}, {"snippet_id": 42603, "code": ".c.get('/find/?q=diatom') self.assertContains(response, 'Filter by Group Type') response=self.c.get('/find/?q=diatom&group_type=Unidentified') self.assertContains(response, 'Showing 1 -20 of') response", "label": 1}, {"snippet_id": 80835, "code": "'Locking' if checked else 'Unlocking'} piezo etalon.\") self.lock_piezo_etalon_action.setChecked(not checked) self.matisse.set_piezo_etalon_lock(checked) self.lock_piezo_etalon_action.setChecked(checked)", "label": 0}, {"snippet_id": 64878, "code": " argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument('", "label": 0}, {"snippet_id": 43400, "code": " None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error '", "label": 0}, {"snippet_id": 50783, "code": ".is_optional=optional def test_conditions(self, env): if len(self.condition_sets)==0: return True for conditions in self.condition_sets: if all(key in env and env[key]==value for(key, value) in conditions.items", "label": 0}, {"snippet_id": 20089, "code": "(): task_id_bin=ray._raylet.compute_task_id(object_id).binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id", "label": 0}, {"snippet_id": 12659, "code": ".skip_registration_form: context[\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def", "label": 0}, {"snippet_id": 21607, "code": " was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive", "label": 0}, {"snippet_id": 58134, "code": ".STEP_8: 0}, 13.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0", "label": 1}, {"snippet_id": 25135, "code": " task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys", "label": 0}, {"snippet_id": 80765, "code": ".lock_actions] else: self.lock_all_action.setChecked(False) print(\"Couldn't lock all laser components.\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool", "label": 0}, {"snippet_id": 6069, "code": ".oidc_id_token=None self.authenticate_or_redirect() def authenticate_or_redirect(self): \"\"\" Helper function suitable for @app.before_request and @check(below). Sets g.oidc_id_token to the ID token if the user has", "label": 0}, {"snippet_id": 73909, "code": " return{'baseVisibleText': InterfaceText, 'applicationsForm': ImportApplicationsForm, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position} @login_required(login_url=", "label": 1}, {"snippet_id": 4456, "code": "'test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user", "label": 0}, {"snippet_id": 31256, "code": " 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'social_django', 'gitmate_config', 'djcelery', 'rest_framework', 'rest_framework_docs", "label": 0}, {"snippet_id": 18674, "code": " variables and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"", "label": 1}, {"snippet_id": 54721, "code": " assignment.problems: \t\t\t\tprob_id=(assignment.book_edition,assignment.chapter,problem.number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob)", "label": 0}, {"snippet_id": 83350, "code": " the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title'] if not wikiword_pattern.match", "label": 1}, {"snippet_id": 20609, "code": ".getLogger(__name__) class Node(object): \"\"\"An encapsulation of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict):", "label": 0}, {"snippet_id": 8386, "code": " _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', ", "label": 0}, {"snippet_id": 15901, "code": ".validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password", "label": 0}, {"snippet_id": 15542, "code": " get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models')[0]['include'] if", "label": 0}, {"snippet_id": 12192, "code": " } context=update_context_for_enterprise(request, context) return render_to_response('student_account/login_and_register.html', context) @require_http_methods(['POST']) def password_change_request_handler", "label": 0}, {"snippet_id": 53475, "code": ") resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename: str) -> bool: if not test_filename or not test_filename.startswith", "label": 0}, {"snippet_id": 74627, "code": " Person.DoesNotExist: pass return person_instance def get_shib_info_from_request(request): info={} info['last_name']=request.META.get('Shibboleth-sn', '') info['first_name']=request.META.get('Shibboleth", "label": 0}, {"snippet_id": 23453, "code": "(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the", "label": 0}, {"snippet_id": 72151, "code": ": clients }) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(ex_id).to_dict() def get(self, cluster_id, export_id): export_id=int(export_id) ganesha_conf=GaneshaConf", "label": 0}, {"snippet_id": 6275, "code": "{extra_params}'.format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token): \"\"\" Check", "label": 0}, {"snippet_id": 9480, "code": " destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(", "label": 0}, {"snippet_id": 39409, "code": " hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_cas else: return None @property def true_chemname(self): if hasattr(self, 'curated_chemical')", "label": 0}, {"snippet_id": 58106, "code": " onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0", "label": 1}, {"snippet_id": 46626, "code": " default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'\"' initial_values={'downloaded_by': request.user, 'name' : default_name, 'data_source' :", "label": 0}, {"snippet_id": 2070, "code": "=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of", "label": 0}, {"snippet_id": 19741, "code": " ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"", "label": 0}, {"snippet_id": 39054, "code": " dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a \"falsy", "label": 0}, {"snippet_id": 45147, "code": " \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count", "label": 0}, {"snippet_id": 55538, "code": "(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile", "label": 0}, {"snippet_id": 60536, "code": " JsonDataView.as_view(self, \"config.json\", lambda: self._config), r\"/-/config<as_format:(\\.json)?$>\", ) app.add_route( DatabaseDownload.as_view(self), r\"/<db_name:[^/]+?><as_db:(\\.db)$>\" ) app.add_route(", "label": 0}, {"snippet_id": 28259, "code": ": return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a", "label": 0}, {"snippet_id": 36898, "code": ",{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime)", "label": 0}, {"snippet_id": 1457, "code": "(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size", "label": 0}, {"snippet_id": 67339, "code": " > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=ip)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count", "label": 0}, {"snippet_id": 51849, "code": "(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user form entry, register user if valid.\"", "label": 0}, {"snippet_id": 82514, "code": ":type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses.", "label": 0}, {"snippet_id": 22829, "code": " pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key,", "label": 0}, {"snippet_id": 57985, "code": ", \"description\": \"\", \"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps(): data", "label": 0}, {"snippet_id": 31463, "code": ".postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER', 'postgres'), 'PASSWORD': os.environ.get('DB_PASSWORD', ''), 'HOST': os.environ.get('DB_ADDRESS', ", "label": 0}, {"snippet_id": 34968, "code": ")) messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type", "label": 1}, {"snippet_id": 17201, "code": " content={'game_name': game.name} for gp in game.gameplayer_set.all(): content[gp.power.name]=gp.score data.append(content) formset=GameScoreFormset(request.POST or None, initial=data) if formset.is_valid", "label": 0}, {"snippet_id": 54992, "code": " class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder, and File \"\"\" import os import os.path import fnmatch def specialized", "label": 0}, {"snippet_id": 58402, "code": "\"done\": True, \"settings\":{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" } }, onboarding.CREATE_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_courselet", "label": 1}, {"snippet_id": 23443, "code": "(3, 0): hex_identifier=hex_identifier.decode() return hex_identifier def hex_to_binary(hex_identifier): return binascii.unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in", "label": 0}, {"snippet_id": 26180, "code": " self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"\"\"Start a worker process.\"\"\" raise NotImplementedError def start_monitor(self): \"\"\"Start", "label": 0}, {"snippet_id": 67197, "code": " from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from", "label": 0}, {"snippet_id": 36811, "code": "(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date']=datetime", "label": 0}, {"snippet_id": 20142, "code": ")): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver", "label": 0}, {"snippet_id": 29240, "code": "): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor(): return dict( admin_base_template=admin.base_template, admin_view", "label": 0}, {"snippet_id": 74360, "code": "(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self.request.user: logger.warn(self.invalid_access_user_message) raise PermissionDenied class _ReportUpdatePartial", "label": 0}, {"snippet_id": 63546, "code": ".app.test_request_context('/logout', method='POST', headers={'Cookie': cookie}, data={'csrf': csrft}): session['_csrft_']=csrft response2=self.app.dispatch_request() self.assertEqual(response2.status, ", "label": 0}, {"snippet_id": 25112, "code": "[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add(hex_to_binary(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id", "label": 0}, {"snippet_id": 47111, "code": ".get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...' ExtractedTextForm", "label": 0}, {"snippet_id": 76627, "code": " tiles_array=images.ImagesArray( rect_of_tiles.Width(), rect_of_tiles.Height()) logger.debug(\"World extent in tiles: %s\", str(world_extent_in_tiles)) base_url=layer_properties.GetMapBaseUrl() for abs_tile_row", "label": 0}, {"snippet_id": 58592, "code": ".DoesNotExist: print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists:", "label": 1}, {"snippet_id": 36537, "code": "[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products", "label": 0}, {"snippet_id": 84275, "code": " template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title': title} if group_slug is not None", "label": 0}, {"snippet_id": 16597, "code": " for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players", "label": 0}, {"snippet_id": 45778, "code": " exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() return redirect(referer, pk=doc.pk", "label": 1}, {"snippet_id": 22432, "code": " be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self", "label": 0}, {"snippet_id": 56056, "code": "'.format(settings.PUBLIC_DOMAIN, PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username", "label": 0}, {"snippet_id": 52902, "code": " } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update(group_channel, data): Group(group_channel).send({\"text\": json", "label": 0}, {"snippet_id": 80275, "code": ".addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action=lock_menu.addAction('Lock All') self.lock_all_action", "label": 0}, {"snippet_id": 72065, "code": " Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal': '{fsal.name}'", "label": 0}, {"snippet_id": 33557, "code": " test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual", "label": 0}, {"snippet_id": 43824, "code": "(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element(", "label": 0}, {"snippet_id": 81261, "code": ", 'Dagelijks'), ('weekly', 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user'): email=self", "label": 0}, {"snippet_id": 19557, "code": "==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found", "label": 1}, {"snippet_id": 58370, "code": ":{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False", "label": 0}, {"snippet_id": 30760, "code": "['name']: editedGrudget.name=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget=editedGrudget) @app.route('/grudget/<int:grudget_id>/delete", "label": 0}, {"snippet_id": 56524, "code": " test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link=", "label": 1}, {"snippet_id": 71598, "code": ") s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid=s.session_id s_serialized=s.serialize() s.key", "label": 0}, {"snippet_id": 15647, "code": "'change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', ", "label": 0}, {"snippet_id": 56951, "code": ".is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop('filter_data',{}) return super().get(self, request, *args, **kwargs) def get_context_data(self, *", "label": 0}, {"snippet_id": 32264, "code": " return Token(TokenType.WORD, ''.join(value), start) elif self.char.isprintable(): start=self.position value=[] while self.char and self.char.isprintable() and not self.char.isspace(): value.append(self", "label": 0}, {"snippet_id": 21409, "code": " already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some errors in process of \"", "label": 0}, {"snippet_id": 52280, "code": "-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request", "label": 0}, {"snippet_id": 36037, "code": " tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'", "label": 0}, {"snippet_id": 69195, "code": "'jupyterhub') systemd.enable_service('traefik') def ensure_jupyterlab_extensions(): \"\"\" Install the JupyterLab extensions we want. \"\"\" extensions=[ '@jupyterlab/hub-extension', '@jupyter-widgets/jupyterlab", "label": 0}, {"snippet_id": 9601, "code": " logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers", "label": 0}, {"snippet_id": 62627, "code": " Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config) def add_outstanding_query(self, came_from): \"\"\" Add a SAML2", "label": 0}, {"snippet_id": 39932, "code": " __str__(self): return 'Notes for{}'.format(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before approving, please add a note explaining", "label": 1}, {"snippet_id": 77259, "code": "(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any", "label": 1}, {"snippet_id": 71780, "code": ".query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models.User.query().count", "label": 0}, {"snippet_id": 1230, "code": " This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking", "label": 0}, {"snippet_id": 40894, "code": "('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1, 'The page should show", "label": 0}, {"snippet_id": 21890, "code": " raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount", "label": 0}, {"snippet_id": 45509, "code": "'document_type_form': document_type_form} if doc.is_extracted: extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) extracted_text_form=ParentForm(instance=extracted_text) child_formset=ChildFormSet", "label": 1}, {"snippet_id": 83161, "code": " of queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(", "label": 0}, {"snippet_id": 58159, "code": " onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3:", "label": 1}, {"snippet_id": 5864, "code": "(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self.credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials() self.http=http if http", "label": 0}, {"snippet_id": 51884, "code": ") if user_record is None: new_user=q.make_user(email, pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname) session[\"new_user", "label": 0}, {"snippet_id": 37071, "code": " import * from django.db.models import F from dashboard.utils import get_extracted_models class DataGroupForm(forms.ModelForm): required_css_class='required' class Meta: model=DataGroup fields=['name',", "label": 1}, {"snippet_id": 16670, "code": ".all(): game.add((gp.tournamentplayer(), gp.power)) assert len(game)==7 seeder.add_played_game(game) for tp in tourney_players: for sb in tp.seederbias_set.all(): seeder.add_bias(sb.player1, sb.player2,", "label": 0}, {"snippet_id": 57090, "code": "'url': url, 'disabled': disabled, } ) return available_concepts def get_transaction_from_kwargs(**kwargs): transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction", "label": 0}, {"snippet_id": 70861, "code": " fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not", "label": 1}, {"snippet_id": 44394, "code": "\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self.live_server_url +f'/datadocument/{doc.pk}/' self.browser.get(dd_url) try: self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 78591, "code": ", data_dict): \"\"\" Action to create a new data request. The function checks the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized exception will be risen", "label": 0}, {"snippet_id": 70080, "code": " /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}", "label": 0}, {"snippet_id": 61849, "code": "(url, allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects=allow_redirects) soup", "label": 0}, {"snippet_id": 590, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath):", "label": 1}, {"snippet_id": 67994, "code": " class EventListView(PaginationMixin, ListView): model=Event template_name='threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super()", "label": 0}, {"snippet_id": 24249, "code": " num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"", "label": 1}, {"snippet_id": 27172, "code": " the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis.", "label": 0}, {"snippet_id": 69723, "code": " open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={} hook=plugin_manager.hook hook.tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main():", "label": 0}, {"snippet_id": 44455, "code": ".objects.create_superuser(username='SuperKaryn', password='specialP@55word', email='me@epa.gov') ds=DataSource.objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI", "label": 0}, {"snippet_id": 60122, "code": " else: sqlite_extensions[extension]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\", \"FTS4\", \"FTS3\"): try: conn.execute( \"CREATE VIRTUAL TABLE v{fts} USING{fts}(data)\".format(fts=fts) )", "label": 0}, {"snippet_id": 39775, "code": " and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns", "label": 0}, {"snippet_id": 53437, "code": ".rstrip() )] render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=stack ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', *", "label": 0}, {"snippet_id": 28465, "code": "\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info", "label": 0}, {"snippet_id": 52886, "code": " 'file_name': os.path.basename(urlparse(instance.attachment.path).path) if instance.attachment else None, 'file_link': instance.file_download_link if instance.attachment else None, } group_channel=get_room_group_channel", "label": 0}, {"snippet_id": 20402, "code": " def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL", "label": 0}, {"snippet_id": 5249, "code": ", status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains", "label": 0}, {"snippet_id": 70972, "code": "}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} ", "label": 0}, {"snippet_id": 1369, "code": " may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create", "label": 0}, {"snippet_id": 26949, "code": " object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded,", "label": 0}, {"snippet_id": 59821, "code": " table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view') def update_with_inherited_metadata", "label": 0}, {"snippet_id": 23734, "code": " if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl", "label": 0}, {"snippet_id": 4773, "code": " drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email=", "label": 0}, {"snippet_id": 41988, "code": ", (\"Bulk button shouldn't be present w/ \" \"Habits and practices group_type.\")) def test_bulk_create_post(self): '''test the POST to create Products and link if needed''' doc=DataDocument.objects.create", "label": 0}, {"snippet_id": 64418, "code": ") token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA'), None) if verify_auth_token(eppn=eppn, token=token", "label": 0}, {"snippet_id": 24310, "code": ".startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def fetch_and_execute_function_to_run(self, key)", "label": 0}, {"snippet_id": 56710, "code": " django.utils.translation import gettext, gettext_lazy from clickgestion.transactions.filters import ConceptFilter, TransactionFilter from clickgestion.core.utilities import invalid_permission_redirect", "label": 0}, {"snippet_id": 50248, "code": "=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl=session.pop('return_url", "label": 0}, {"snippet_id": 77617, "code": "=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"", "label": 0}, {"snippet_id": 70413, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_(", "label": 1}, {"snippet_id": 19847, "code": " self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, ", "label": 0}, {"snippet_id": 52746, "code": " from realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models import Room logger=logging.getLogger(__name__) class MessageCreateAPIView(CreateAPIView): \"\"\" Creates a new", "label": 1}, {"snippet_id": 970, "code": "/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part)", "label": 1}, {"snippet_id": 38792, "code": " downloaded_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None,", "label": 0}, {"snippet_id": 53601, "code": " Cauldron step display. \"\"\" def __init__(self, redirection_source): self.active=False self.bytes_buffer=io.BytesIO() self.redirection_source=redirection_source self.last_write_time=0 super(RedirectBuffer", "label": 0}, {"snippet_id": 9813, "code": " context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer", "label": 0}, {"snippet_id": 65551, "code": ".get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled", "label": 1}, {"snippet_id": 78783, "code": " invalid. Data QLD modification Will send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id:", "label": 0}, {"snippet_id": 76007, "code": ", ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self.to_url if self.redirect_type=='prefix': to_url='/{lang}/{version}/'.format", "label": 0}, {"snippet_id": 63920, "code": "('required_loa', None) authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info('Redirecting", "label": 0}, {"snippet_id": 76508, "code": " user_height))) im_user=im_true.resize((user_width, user_height), Image.ANTIALIAS) return im_user def _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles for a given image. Args", "label": 0}, {"snippet_id": 54239, "code": " \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404) def page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template", "label": 0}, {"snippet_id": 6545, "code": "[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized', code=None): return(message, 401,{ 'Content-Type':", "label": 1}, {"snippet_id": 27883, "code": " attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\"", "label": 0}, {"snippet_id": 51318, "code": " AbortRunException() def get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection=self._dependency_collection() return dependency_collection.get_args(dependencies", "label": 0}, {"snippet_id": 1339, "code": "\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 49287, "code": "=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if ext_text_form.is_valid() and ext_text_form", "label": 0}, {"snippet_id": 67245, "code": " def get(self, request, **kwargs): if request.GET.get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class", "label": 1}, {"snippet_id": 64677, "code": "'SyntaxWarning', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'tuple', 'type', 'TypeError', 'UnboundLocalError', 'UnicodeEncodeError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'vars', 'Warning", "label": 0}, {"snippet_id": 54906, "code": " in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student", "label": 1}, {"snippet_id": 37408, "code": "'title', 'manufacturer', 'brand_name', 'upc', 'size', 'color'] def __init__(self, *args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'].widget=forms.HiddenInput", "label": 0}, {"snippet_id": 18512, "code": "<![_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\", "label": 1}, {"snippet_id": 34654, "code": " chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined", "label": 0}, {"snippet_id": 27371, "code": " arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in", "label": 0}, {"snippet_id": 76819, "code": "[0]: pixdata[row, col]=(red, green, blue) +_OPAQUE_ALPHA return tile def _FetchMapTile(url): \"\"\"Fetches and returns a tile, given an url. Args: url: the exact url of the tile to fetch. Returns: The tile", "label": 0}, {"snippet_id": 70927, "code": "\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http", "label": 0}, {"snippet_id": 57700, "code": "-tests \"\"\" def our_wrapper(func): @receiver(signal, **decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return", "label": 0}, {"snippet_id": 46390, "code": " new_prod_title: if doc.title: new_prod_title='%s stub' % doc.title else: new_prod_title='unknown' product=Product.objects.create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc.data_group", "label": 0}, {"snippet_id": 62665, "code": " redirect back the client after finishing with the authn service. :type came_from: str :return: the session token corresponding to the query :rtype: str \"\"\" with self.app.test_request_context('/login')", "label": 0}, {"snippet_id": 46945, "code": " form.has_changed(): form.save() return redirect('data_group_detail', pk=datagroup.id) form.referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled", "label": 0}, {"snippet_id": 61279, "code": " host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and", "label": 0}, {"snippet_id": 77754, "code": "'notes' in pkg: notes=pkg['notes'] or pkg['title'] if 'update_frequency' in pkg: update_frequency=pkg['update_frequency'] or default_update_frequency self.update_package(package_id, security_classification,", "label": 1}, {"snippet_id": 63951, "code": "/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400) xmlstr=request.form[", "label": 0}, {"snippet_id": 32781, "code": ".path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections", "label": 0}, {"snippet_id": 72226, "code": ": raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) old_export=ganesha_conf.update_export({ 'export_id': export_id, ", "label": 0}, {"snippet_id": 14910, "code": ") @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results') def view_results(): results=load_json('results.json", "label": 0}, {"snippet_id": 22752, "code": " else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self", "label": 0}, {"snippet_id": 21911, "code": " The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start", "label": 0}, {"snippet_id": 36159, "code": " querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): ", "label": 0}, {"snippet_id": 17812, "code": "=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session", "label": 0}, {"snippet_id": 51956, "code": ".get('pw') user_record=q.get_user_by_email(email) if user_record is None: flash(\"No account found with that email. Would you like to register?\") return redirect(\"/login\") else: if user_record.password ", "label": 0}, {"snippet_id": 26437, "code": " raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait()", "label": 0}, {"snippet_id": 13725, "code": " rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning", "label": 0}, {"snippet_id": 53063, "code": " HS_3}, 'personal_profile_form':{ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': '+263771819478', 'email': 'test_email@gmail.com', }, } self.client.login", "label": 1}, {"snippet_id": 72027, "code": " composed_decorator(func): return Task(\"nfs/{}\".format(name), metadata, wait_for, partial(serialize_dashboard_exception, include_http_status=True))(func) return composed_decorator @ApiController('/nfs-ganesha", "label": 0}, {"snippet_id": 34970, "code": " messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type=", "label": 1}, {"snippet_id": 39792, "code": " def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is a part of. direction is ", "label": 0}, {"snippet_id": 1307, "code": " django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request", "label": 0}, {"snippet_id": 61218, "code": "\"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates", "label": 0}, {"snippet_id": 77866, "code": "--') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix", "label": 0}, {"snippet_id": 45152, "code": "(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id'))", "label": 0}, {"snippet_id": 71297, "code": ": return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self): next_uri=self.GET.get('next') if next_uri is not None: self.session.data['_redirect_uri", "label": 1}, {"snippet_id": 84510, "code": "=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article", "label": 1}, {"snippet_id": 80261, "code": ".set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action", "label": 0}, {"snippet_id": 32091, "code": " ''' def __init__(self, string): self.string=string self.position=-1 self.char=None self.read() def read(self): ''' Read a single char from the stream and store it in self.char. Returns: The value of self", "label": 0}, {"snippet_id": 3047, "code": " redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME', 'next') params={ 'response_type': 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request,", "label": 0}, {"snippet_id": 66991, "code": " apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name", "label": 0}, {"snippet_id": 39787, "code": " return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of", "label": 0}, {"snippet_id": 28409, "code": " byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is only here to simplify", "label": 0}, {"snippet_id": 36356, "code": " test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div", "label": 0}, {"snippet_id": 44284, "code": " to detail page after submit\") def test_product(self): p=self.objects.p puc=self.objects.puc tag=self.objects.pt PUCToTag.objects.create(content_object=puc, tag=tag) ProductToPUC.objects.create(product", "label": 0}, {"snippet_id": 50402, "code": " time import ctypes import datetime VERSION=5 DEFAULT_STEPS=\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename", "label": 0}, {"snippet_id": 5224, "code": ",) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{", "label": 0}, {"snippet_id": 78876, "code": " data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict['title'] validator.validate_datarequest(context, data_dict) organisation_updated=data_req.organization_id !=data_dict", "label": 0}, {"snippet_id": 22919, "code": "(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None", "label": 0}, {"snippet_id": 36578, "code": ".fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' %", "label": 0}, {"snippet_id": 37962, "code": " in_field in formset_fields if not in_field in exclude] return forms.inlineformset_factory(parent_model=parent_model, model=model, fields=formset_fields, formset=formset, form=form, extra=extra, can_delete", "label": 0}, {"snippet_id": 32934, "code": "(\">\" in cmd): SetUpOutputRedirect(cmd) if(\">>\" in cmd): SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\") sys.stdout=open", "label": 1}, {"snippet_id": 6486, "code": " or code\", exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token: logger.debug(\"CSRF token mismatch\") return self.oidc_error() flow=self.flow_for_request() credentials=flow.step2_exchange", "label": 0}, {"snippet_id": 14482, "code": "': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 58839, "code": "=255) status=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES, default='tester') course=models", "label": 0}, {"snippet_id": 83427, "code": "'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title=self", "label": 0}, {"snippet_id": 82778, "code": "\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring", "label": 0}, {"snippet_id": 40216, "code": ".CharField( max_length=2, choices =TYPE_CHOICES, blank =False, default ='EX') confidence=models.PositiveSmallIntegerField('Confidence', blank=True, validators=[ MaxValueValidator(100), MinValueValidator(1", "label": 0}, {"snippet_id": 18237, "code": " needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class", "label": 1}, {"snippet_id": 58334, "code": ", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" }, onboarding.CREATE_THREAD:{ \"html\": \"<p>create_thread", "label": 1}, {"snippet_id": 29798, "code": "() return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session,", "label": 0}, {"snippet_id": 76688, "code": " rel_tile_row, None) else: world_wrapped_tile_col=abs_tile_col % world_extent_in_tiles tile_args=layer_properties.GetTileArgs(world_wrapped_tile_col, abs_tile_row, zoom_level) tile_url=base_url +tile_args", "label": 0}, {"snippet_id": 49127, "code": ": try: list_presence=doc.extractedtext.rawchem.select_subclasses('extractedlistpresence').first() list_presence_tag_form=ExtractedListPresenceTagForm(instance=list_presence) context.update({'list_presence_tag_form", "label": 0}, {"snippet_id": 40721, "code": ".assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS", "label": 1}, {"snippet_id": 31750, "code": " request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions", "label": 1}, {"snippet_id": 32181, "code": " return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType.REDIRECT_IN, None, self.position) self.read() return", "label": 0}, {"snippet_id": 33323, "code": "(QAGroup) admin.site.register(UnitType) admin.site.register(WeightFractionType) admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC", "label": 0}, {"snippet_id": 69176, "code": "*unit_params)) systemd.install_unit('traefik.service', traefik_unit_template.format(**unit_params)) systemd.reload_daemon() systemd.restart_service('jupyterhub') systemd.restart_service('traefik') systemd", "label": 0}, {"snippet_id": 63412, "code": " def test_authn(self): with self.app.test_client() as c: resp=c.get('/test2') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def", "label": 0}, {"snippet_id": 61476, "code": "[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else", "label": 0}, {"snippet_id": 84546, "code": "% old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES", "label": 0}, {"snippet_id": 6901, "code": " form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password', 'auth/email/reset_password'", "label": 0}, {"snippet_id": 23646, "code": "=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler", "label": 1}, {"snippet_id": 10479, "code": " openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import", "label": 0}, {"snippet_id": 8504, "code": " Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user)", "label": 0}, {"snippet_id": 75773, "code": "('fast data exception: %s' % e) logger.error('fast response: %s -%s' %(r.status_code, r.text)) return error_response @login_required def autocomplete_keywords(request): term=request.GET['term'] results", "label": 0}, {"snippet_id": 32935, "code": " cmd): SetUpOutputRedirect(cmd) if(\">>\" in cmd): SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\") sys.stdout=open(cmd", "label": 1}, {"snippet_id": 13064, "code": " account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year", "label": 0}, {"snippet_id": 22449, "code": " import absolute_import from __future__ import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END", "label": 0}, {"snippet_id": 14962, "code": ".append(values[date]) if re.search(':timeseries$', name): attrs=name.split(':') (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author'", "label": 0}, {"snippet_id": 83052, "code": " event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host", "label": 0}, {"snippet_id": 33177, "code": "('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self", "label": 0}, {"snippet_id": 35885, "code": ", template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail", "label": 0}, {"snippet_id": 17654, "code": " flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True", "label": 0}, {"snippet_id": 57239, "code": "(request) transaction_code=kwargs.get('transaction_code', None) if not transaction_code: transaction=Transaction.objects.create(employee=request.user) return redirect('transaction_edit', transaction_code", "label": 0}, {"snippet_id": 73298, "code": ".invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message) return self.cleaned_data", "label": 0}, {"snippet_id": 15634, "code": "'') sub_form.input_source_final.choices=get_inputs_choices() sub_form.input_source_final.data=command.get('input_source_final', '') for index, command in enumerate(get_command('change_timeseries_value_several_days", "label": 0}, {"snippet_id": 67310, "code": " context['tm_report']=tm.getReportFromIP(ip) context['bls']=blacklist.objects.filter(Q(ip=ip)|Q(url__contains=ip)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event", "label": 0}, {"snippet_id": 33090, "code": "(DocumentType) admin.site.register(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory", "label": 1}, {"snippet_id": 31454, "code": "}, }, ] WSGI_APPLICATION='gitmate.wsgi.application' DATABASES={ 'default':{ 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER", "label": 0}, {"snippet_id": 34969, "code": ") messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type", "label": 1}, {"snippet_id": 37975, "code": "=formset, form=form, extra=extra, can_delete=can_delete) def one(): ChemicalFormSet=make_formset( parent_model=parent, model=child, formset=ExtractedChemicalFormSet, form=ExtractedChemicalForm ) return", "label": 0}, {"snippet_id": 10473, "code": ".core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api", "label": 0}, {"snippet_id": 67857, "code": " def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) count=self.object_list.count() context['count']=count return context def get_queryset(self): query=Org.objects.order_by", "label": 0}, {"snippet_id": 48991, "code": " def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save(", "label": 0}, {"snippet_id": 35353, "code": "(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form[", "label": 0}, {"snippet_id": 22617, "code": " via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds", "label": 0}, {"snippet_id": 40629, "code": "=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count", "label": 0}, {"snippet_id": 37567, "code": ".fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form.submit();' class BulkProductTagForm(forms.ModelForm): required_css_class='required' tag=forms.ModelChoiceField(queryset=PUCTag", "label": 0}, {"snippet_id": 63312, "code": "'id': '0'}})) eppn=self.test_user_data['eduPersonPrincipalName'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def", "label": 0}, {"snippet_id": 23558, "code": " number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked", "label": 0}, {"snippet_id": 65096, "code": " tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed: if vlevel >=1: print(repr(se), file=sys.stderr) dock_points(deductions, args.points", "label": 0}, {"snippet_id": 14275, "code": "{'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders", "label": 0}, {"snippet_id": 21655, "code": " wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes", "label": 0}, {"snippet_id": 65852, "code": " self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget)", "label": 0}, {"snippet_id": 54904, "code": "(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append", "label": 1}, {"snippet_id": 22958, "code": " __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys", "label": 0}, {"snippet_id": 29231, "code": "=Migrate(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx", "label": 0}, {"snippet_id": 73189, "code": ".EmailField( label=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email", "label": 0}, {"snippet_id": 29493, "code": "['user_id']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup')) @auth.route('/signup', methods=['GET', 'POST']) def signup(", "label": 0}, {"snippet_id": 29676, "code": ".show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items: return render_template('show.html', post=post, form=CommentForm", "label": 1}, {"snippet_id": 42729, "code": "') response=self.client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client.get(f'/qa", "label": 0}, {"snippet_id": 6986, "code": " user.reset_password(token, form.password.data): flash('Your password has been updated.') return redirect(url_for('auth.login')) else: return redirect(url_for('main.index')) return render_template('auth", "label": 0}, {"snippet_id": 66467, "code": ".get_filename())) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") keyfile_chooser_dialog.close() def on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button", "label": 0}, {"snippet_id": 29122, "code": ": client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock", "label": 0}, {"snippet_id": 41127, "code": ",'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product.id) data={'title' :['Product Title", "label": 0}, {"snippet_id": 72639, "code": "): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent=send_mail( 'ScreenDoor: Please confirm", "label": 1}, {"snippet_id": 14372, "code": " GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request):", "label": 0}, {"snippet_id": 22952, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as", "label": 0}, {"snippet_id": 6679, "code": ".get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash", "label": 1}, {"snippet_id": 17141, "code": "': t, 'round': r, 'formset': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html',", "label": 0}, {"snippet_id": 38957, "code": ".filter(extracted=True).count() def __str__(self): return self.name def get_absolute_url(self): return reverse('data_group_edit', kwargs={'pk': self.pk}) def get_name_as_slug(self): return self.name.replace(", "label": 0}, {"snippet_id": 76366, "code": " rect_of_tiles.Height() * _TILE_PIXEL_SIZE) set_pixel_to_bgcolor=(layer_properties.image_format==\"image/png\" and layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor", "label": 0}, {"snippet_id": 69859, "code": " ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from", "label": 0}, {"snippet_id": 48901, "code": ".product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER'", "label": 0}, {"snippet_id": 37206, "code": "!important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['extract_file'].widget.attrs.update({'accept': '.csv'}) if self.dg_type in['FU', 'CP'", "label": 0}, {"snippet_id": 59342, "code": " requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested facet \"\"\".strip()), ConfigOption(\"allow_facet\", True, \"\"\" Allow users to specify columns", "label": 0}, {"snippet_id": 7869, "code": "'password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to", "label": 0}, {"snippet_id": 45659, "code": ", pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText", "label": 0}, {"snippet_id": 54350, "code": " pol.party, 'state': pol.state, 'constituency': pol.constituency, 'wiki': pol.wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians=politicians) \"\"\"Array", "label": 0}, {"snippet_id": 54521, "code": " auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates entry", "label": 0}, {"snippet_id": 65851, "code": " self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget", "label": 0}, {"snippet_id": 53510, "code": "(frames[0].filename): frames.pop(0) return frames def format_stack_frame(stack_frame, project: 'projects.Project'): \"\"\" :param stack_frame: :param project: :return: \"\"\" filename=stack_frame.filename if", "label": 0}, {"snippet_id": 4780, "code": " test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client(", "label": 0}, {"snippet_id": 64523, "code": "={}\".format(eppn)) current_app.logger.info('Token login failed, redirecting user to{}'.format(location_on_fail)) return redirect(location_on_fail) @authn_views.route('/saml2-metadata') def metadata(): ", "label": 0}, {"snippet_id": 82316, "code": ".all().order_by('timestamp') return render(request, 'clicktracking-detail-view.html',{'object': object, 'reports': reports}) def link_redirect(request, pk): instance=get_object_or_404(JustURL, pk=pk) return", "label": 1}, {"snippet_id": 72305, "code": " ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) export=ganesha_conf.remove_export(export_id) if reload_daemons: ganesha_conf.reload_daemons", "label": 0}, {"snippet_id": 69938, "code": ") newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 11818, "code": ".decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts", "label": 0}, {"snippet_id": 84315, "code": " is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args", "label": 0}, {"snippet_id": 64362, "code": "=client.handle_logout_request( request.form['SAMLRequest'], subject_id, BINDING_HTTP_REDIRECT, relay_state=request.form['RelayState'] ) state.sync() location=get_location(http_info) session.clear() return", "label": 0}, {"snippet_id": 82814, "code": " hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock", "label": 0}, {"snippet_id": 24073, "code": "\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a", "label": 0}, {"snippet_id": 11281, "code": "=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): ", "label": 0}, {"snippet_id": 30581, "code": "(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() grudges=session.query(Grudge).filter_by(grudget_id=grudget.id).all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route", "label": 1}, {"snippet_id": 44103, "code": ".find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), detail_url, \"User should go back to detail view when clicking cancel\")", "label": 0}, {"snippet_id": 59202, "code": " pathlib import Path from markupsafe import Markup from jinja2 import ChoiceLoader, Environment, FileSystemLoader, PrefixLoader from sanic import Sanic, response from sanic.exceptions import InvalidUsage", "label": 0}, {"snippet_id": 23828, "code": "=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if", "label": 0}, {"snippet_id": 75461, "code": "'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def view_abstract(request", "label": 0}, {"snippet_id": 55877, "code": ": \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item) \t\treturn r \tdef filter(self,pattern): \t\treturn fnmatch.filter(self,pattern) if __name__==\"__main__\": \tprint", "label": 0}, {"snippet_id": 18477, "code": " user. \t\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch", "label": 1}, {"snippet_id": 34997, "code": " filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid'])", "label": 1}, {"snippet_id": 84641, "code": "]) @login_required def observe_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context", "label": 0}, {"snippet_id": 18726, "code": "\treturn \"\"\" IndexHandler(): Class that handles / \"\"\" class IndexHandler(tornado.web.RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"", "label": 1}, {"snippet_id": 54124, "code": "/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation(): return render_template('getlocation.html') \"\"\"Politician Page \"\"", "label": 0}, {"snippet_id": 19186, "code": " msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported", "label": 1}, {"snippet_id": 16688, "code": " sb.player2, sb.weight) return seeder def _seed_games(tournament, the_round): \"\"\"Wrapper round GameSeeder to do the actual seeding for a round\"\"\" seeder=_create_game_seeder(tournament, the_round.number", "label": 0}, {"snippet_id": 24374, "code": " argparse import logging import os import redis import time import ray.ray_constants as ray_constants from ray.services import get_ip_address from ray.services import get_port import ray.utils logger=logging", "label": 1}, {"snippet_id": 61957, "code": ".js', 'analytics.js', 'quant.js', 'chartbeat.js', 'chartbeat_mab.js', 'beacon.js', 'krxd.net') page_str=str(page.content) for script in analytics_scripts: if script in page_str: return False return True", "label": 0}, {"snippet_id": 86, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 5628, "code": " logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual", "label": 0}, {"snippet_id": 20113, "code": " in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins", "label": 0}, {"snippet_id": 47908, "code": "(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")", "label": 0}, {"snippet_id": 44443, "code": ".__delitem__ def load_model_objects(): user=User.objects.create_user(username='Karyn', password='specialP@55word') superuser=User.objects.create_superuser(username='SuperKaryn', password='specialP@55word',", "label": 0}, {"snippet_id": 36976, "code": " download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\" or \"None\", it's worth noting that if when making the call to here from the index page we were to use ", "label": 0}, {"snippet_id": 12528, "code": " currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication.", "label": 0}, {"snippet_id": 82775, "code": " %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create", "label": 0}, {"snippet_id": 12280, "code": " limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 44885, "code": "=resolve(f'/link_habitandpractice_to_puc/{self.objects.ehp.pk}/') self.assertEqual(found.func, views.link_habitsandpractices) def test_product_surveyed_field(self): self.objects.gt.code='HP' self.objects.gt", "label": 0}, {"snippet_id": 57046, "code": " dictionaries. \"\"\" concepts_permitted_by_transaction=transaction.get_all_permissions() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept in settings.CONCEPTS", "label": 0}, {"snippet_id": 70944, "code": "-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 22600, "code": " color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with\" statement. \"\"\" if worker", "label": 0}, {"snippet_id": 34363, "code": ")) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click", "label": 0}, {"snippet_id": 38717, "code": " FieldTracker from django.core.exceptions import ValidationError from.group_type import GroupType from.extracted_text import ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical", "label": 0}, {"snippet_id": 20304, "code": ".state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address", "label": 0}, {"snippet_id": 82480, "code": " is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote)", "label": 0}, {"snippet_id": 43436, "code": "+doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\")", "label": 0}, {"snippet_id": 78095, "code": "(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency", "label": 0}, {"snippet_id": 30235, "code": "'') oauth_flow.redirect_uri='postmessage' credentials=oauth_flow.step2_exchange(code) except FlowExchangeError: response=make_response( json.dumps('Failed to upgrade the authorization code.'), 401) response", "label": 0}, {"snippet_id": 59117, "code": ": Http404 if not found ''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email: my_invite=invite break user_email_name", "label": 0}, {"snippet_id": 20162, "code": " the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted !=len(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format( len", "label": 0}, {"snippet_id": 19969, "code": " in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources", "label": 0}, {"snippet_id": 64036, "code": "(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=['POST']) @MarshalWith(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This", "label": 0}, {"snippet_id": 54541, "code": " import locale import sys sys.stdout=codecs.getwriter(locale.getpreferredencoding())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse", "label": 0}, {"snippet_id": 65859, "code": ".basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_tab_close_button_clicked(self", "label": 0}, {"snippet_id": 77004, "code": "\", \"y\": \"y\", \"z\": \"z\"}, \"VectorMapsRaster\":{ \"x\": \"col\", \"y\": \"row\", \"z\": \"level\"}, \"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\"", "label": 0}, {"snippet_id": 66722, "code": ".get_style_context() context.add_class('NotifyRevealer') unlock_failed_revealer=self.builder.get_object(\"unlock_failed_revealer\") unlock_failed_revealer.set_reveal_child(not unlock_failed_revealer.get_reveal_child()", "label": 0}, {"snippet_id": 52264, "code": " session[\"team_id\"]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): ", "label": 0}, {"snippet_id": 30009, "code": "'Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object", "label": 1}, {"snippet_id": 52946, "code": " from realpal.apps.users.constants import * from realpal.apps.users.views import UserRedirectView, UserUpdateView class BaseUserTestCase(TestCase): def setUp(self): self.user=self.make_user() self.factory", "label": 0}, {"snippet_id": 5643, "code": " self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): ", "label": 0}, {"snippet_id": 4020, "code": "}) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"", "label": 1}, {"snippet_id": 84685, "code": " group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args", "label": 0}, {"snippet_id": 76460, "code": " _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\", str(tilepixel_rect)) offset_within_tiled_image=geom.Pair( tilepixel_rect.x0 % _TILE_PIXEL_SIZE, tilepixel_rect.y0 % _TILE_PIXEL_SIZE", "label": 0}, {"snippet_id": 84410, "code": ": return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article.changeset_set.all().order_by('-revision') template_params={'article': article, 'changes': changes,", "label": 0}, {"snippet_id": 364, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 33693, "code": "'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains", "label": 1}, {"snippet_id": 80917, "code": "/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views/fit_event_views.xml', 'views/fit_subscription_templates.xml', 'views/fit_website_event_sale_templates.xml',", "label": 0}, {"snippet_id": 34885, "code": " response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('", "label": 0}, {"snippet_id": 36745, "code": "'product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date", "label": 0}, {"snippet_id": 83751, "code": ". \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user, group, is_member", "label": 0}, {"snippet_id": 49025, "code": " def product_delete(request, pk): p=Product.objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html'", "label": 0}, {"snippet_id": 1643, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is", "label": 0}, {"snippet_id": 30481, "code": " fbdisconnect() del login_session['facebook_id'] del login_session['username'] del login_session['email'] del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You", "label": 0}, {"snippet_id": 40471, "code": "=models.CASCADE, null=True, blank=True) source=models.ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey", "label": 0}, {"snippet_id": 39330, "code": ", blank=True, validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length=100, null=True, blank=True) def __str__(self): return str(self.raw_chem_name", "label": 0}, {"snippet_id": 13142, "code": "':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 7231, "code": ".apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY", "label": 0}, {"snippet_id": 54585, "code": "\tself.d=acedu.paths.corresponding() \t\t \t\tself.p=pprint.PrettyPrinter(indent=2) \t\tself.homeworks=[] \t\tfor homework_file in self.d: \t\t\ttry: \t\t\t\tif homework_file.basename() !=\".DS_Store\": \t\t\t\t\tself.homeworks", "label": 0}, {"snippet_id": 68877, "code": " -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v1 Comment: GPGTools -https://gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R", "label": 0}, {"snippet_id": 70117, "code": " </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index", "label": 0}, {"snippet_id": 45450, "code": " djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail(request, pk): template_name", "label": 0}, {"snippet_id": 3308, "code": " http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT')", "label": 0}, {"snippet_id": 54903, "code": " defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t", "label": 1}, {"snippet_id": 23218, "code": " def check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check", "label": 0}, {"snippet_id": 40569, "code": "/a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response", "label": 0}, {"snippet_id": 11353, "code": " request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register", "label": 0}, {"snippet_id": 53948, "code": "._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer(if it exists) and returns a body-ready dom object of those contents without adding them to the actual report body.", "label": 0}, {"snippet_id": 67123, "code": "') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count(", "label": 0}, {"snippet_id": 47285, "code": " filter=Q(datagroup__datadocument__matched=True)) extracted =Count('datagroup__datadocument__extractedtext') ds_list =DataSource.objects.annotate(registered=registered).annotate(uploaded=uploaded, extracted", "label": 0}, {"snippet_id": 74928, "code": " context_data={'candidate': candidate} other_candidacies=Candidate.objects.filter(person__netid=request.user.username).exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies']=other_candidacies", "label": 0}, {"snippet_id": 17276, "code": "', args=(tournament_id))) return render(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) def game_index(request, tournament_id, round_num): \"\"\"Display a list", "label": 0}, {"snippet_id": 9682, "code": " def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine", "label": 0}, {"snippet_id": 72479, "code": " import digits from django.http import HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib", "label": 1}, {"snippet_id": 25504, "code": ", help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required", "label": 0}, {"snippet_id": 67183, "code": " get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner", "label": 1}, {"snippet_id": 18347, "code": "\tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password): \t\tdocument={'username': self.username,'email': self.email,'password': hashed_password", "label": 1}, {"snippet_id": 32072, "code": " self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical analysis on a raw string. Args: string: The raw string on which to operate. ''' def __init__(self, string", "label": 0}, {"snippet_id": 49264, "code": " doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST.get('referer', 'data_document') doc", "label": 0}, {"snippet_id": 55399, "code": "\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path", "label": 0}, {"snippet_id": 81675, "code": "(event_start +relativedelta(hours=-24)) > datetime.now() and event_type=='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger", "label": 0}, {"snippet_id": 48649, "code": " products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in", "label": 0}, {"snippet_id": 77013, "code": "\"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\"", "label": 0}, {"snippet_id": 27918, "code": " itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self", "label": 0}, {"snippet_id": 63809, "code": " import IdentityCache, StateCache from eduid_webapp.authn.acs_registry import get_action, schedule_action from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp.authn.schemas import", "label": 1}, {"snippet_id": 74545, "code": " else: logger.error('login() -got anonymous user: %s' % request.META) return HttpResponseServerError('Internet Server error. Please contact %s for assistance.' % BDR_EMAIL) def redirect_to_home(request)", "label": 0}, {"snippet_id": 10750, "code": "': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings", "label": 0}, {"snippet_id": 51354, "code": "(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username, look_for_keys='True') def call(self, *args, **kwargs): stdin, stdout, stderr=self.ssh.exec_command(*args, **kwargs) def pump_output_thread", "label": 0}, {"snippet_id": 76791, "code": ": return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green", "label": 0}, {"snippet_id": 60664, "code": "=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html\".format(status)] +templates info.update( {\"ok\": False, \"error\"", "label": 0}, {"snippet_id": 76590, "code": " faster: 0.108545780182s vs 0.0410861968994s http://localhost/wms?LAYERS=1002&SERVICE=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000", "label": 0}, {"snippet_id": 34339, "code": ".assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]'", "label": 0}, {"snippet_id": 39629, "code": "=\"QA edited\") qa_approved_date=models.DateTimeField(null=True, blank=True, verbose_name=\"QA approval date\") qa_approved_by=models.ForeignKey('auth.User', on_delete=models.SET_NULL, verbose_name=\"QA approved", "label": 0}, {"snippet_id": 48712, "code": ") tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}", "label": 0}, {"snippet_id": 81813, "code": " short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk}", "label": 0}, {"snippet_id": 74308, "code": " self.access_form_valid ) and self._passphrase_next_url(request): return self._redirect_from_passphrase(request) elif self.access_granted or self.access_form_valid: return super().dispatch(request, *args", "label": 0}, {"snippet_id": 38413, "code": ".extracted_habits_and_practices_to_puc import ExtractedHabitsAndPracticesToPUC from.qa_notes import QANotes from.raw_chem import RawChem from.taxonomy import Taxonomy from.taxonomy_source import TaxonomySource from", "label": 0}, {"snippet_id": 72475, "code": "() @Endpoint('GET', '/rgw/buckets') def buckets(self, user_id=None): return RgwClient.instance(user_id).get_buckets() @Endpoint('GET', '/clusters') def clusters(self): return Ganesha.get_ganesha_clusters", "label": 0}, {"snippet_id": 57731, "code": " be done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage", "label": 1}, {"snippet_id": 59076, "code": " invite by passed parameters and user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and", "label": 0}, {"snippet_id": 19705, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import time import traceback import redis import ray", "label": 0}, {"snippet_id": 55884, "code": "\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item) \t\treturn r \tdef filter(self,pattern): \t\treturn fnmatch.filter(self,pattern) if __name__==\"__main__\": \tprint \"current has \" \tfor item in current(): \t\tprint", "label": 0}, {"snippet_id": 81382, "code": "'=', True)]) for repeating_event in repeating_event_ids: _logger.info('Found repeating event: ' +repeating_event.name) if repeating_event.fit_repetition=='daily': self._handle_daily_event_repetition(repeating_event", "label": 0}, {"snippet_id": 5887, "code": " None else httplib2.Http() self.time=time if time is not None else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self,", "label": 0}, {"snippet_id": 65387, "code": " def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\") !=\"\" and exists(keepassgtk.config_manager.get_string", "label": 0}, {"snippet_id": 29430, "code": ".oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response", "label": 1}, {"snippet_id": 17774, "code": " s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp", "label": 0}, {"snippet_id": 21021, "code": ".object_store_memory, plasma_directory=self._ray_params.plasma_directory, huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password", "label": 1}, {"snippet_id": 12719, "code": ", 'password_reset': _local_server_get('/user_api/v1/account/password_reset/', request.session) } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments", "label": 0}, {"snippet_id": 70216, "code": " ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size", "label": 0}, {"snippet_id": 16693, "code": " def _seed_games(tournament, the_round): \"\"\"Wrapper round GameSeeder to do the actual seeding for a round\"\"\" seeder=_create_game_seeder(tournament, the_round.number()) sitters, two_gamers=_sitters_and_two_gamers", "label": 0}, {"snippet_id": 56739, "code": " PaginationMixin from django.http import HttpResponse, QueryDict from django.conf import settings from django.utils import timezone from django_xhtml2pdf.utils import generate_pdf @login_required() def concept_delete", "label": 0}, {"snippet_id": 71308, "code": "('next') if next_uri is not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try: return self.session.data.pop('_redirect_uri').encode('utf", "label": 1}, {"snippet_id": 24176, "code": " \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=", "label": 1}, {"snippet_id": 54397, "code": ", 'tokens': tokens, 'search_count': pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp \"\"\"News articles", "label": 0}, {"snippet_id": 3772, "code": " import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation", "label": 0}, {"snippet_id": 1399, "code": ") path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 8455, "code": ") session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session", "label": 0}, {"snippet_id": 25104, "code": ", task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add", "label": 0}, {"snippet_id": 82006, "code": "*kwargs): form=JustURLForm() return render(request, 'custom-short-url.html',{'form': form}) def post(self, request, *args, **kwargs): form=JustURLForm(request.POST or None) if form.is_valid(): url=form", "label": 0}, {"snippet_id": 58540, "code": ", Response from ctms.models import Invite from chat.models import Chat, EnrollUnitCode from accounts.models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage", "label": 0}, {"snippet_id": 22061, "code": "): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean", "label": 0}, {"snippet_id": 7223, "code": " You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ", "label": 0}, {"snippet_id": 17797, "code": " 3600: return flask.abort(404) sha1_password_hash_hash=binascii.hexlify(sha1_hash(user.password_hash.hash)).decode() if pw_hash !=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm", "label": 0}, {"snippet_id": 9672, "code": " 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"", "label": 0}, {"snippet_id": 59394, "code": ".strip()), ConfigOption(\"default_cache_ttl\", 365 * 24 * 60 * 60, \"\"\" Default HTTP cache TTL(used in Cache-Control: max-age=header) \"\"\".strip()), ConfigOption(\"cache_size_kb\", 0, \"\"\" SQLite cache size in", "label": 1}, {"snippet_id": 57912, "code": " by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\"", "label": 0}, {"snippet_id": 26792, "code": " \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process", "label": 0}, {"snippet_id": 48643, "code": "(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form", "label": 0}, {"snippet_id": 64032, "code": ".saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None @authn_views.route('/logout', methods=['POST']) @MarshalWith(LogoutResponseSchema) def logout(): ", "label": 0}, {"snippet_id": 10909, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided", "label": 0}, {"snippet_id": 29289, "code": " register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string(name)", "label": 0}, {"snippet_id": 28912, "code": "=\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle", "label": 0}, {"snippet_id": 30706, "code": "<int:grudget_id>/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('", "label": 1}, {"snippet_id": 68646, "code": ".getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() if hunt", "label": 0}, {"snippet_id": 41300, "code": " parent') def test_extractedsubclasses(self): ''' Confirm that the inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(", "label": 0}, {"snippet_id": 60202, "code": " DEFAULT_PLUGINS] return[ { \"name\": p[\"name\"], \"static\": p[\"static_path\"] is not None, \"templates\": p[\"templates_path\"] is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql", "label": 0}, {"snippet_id": 42689, "code": "'testserver']) class TestQaPage(TestCase): fixtures=fixtures_standard def setUp(self): self.factory=RequestFactory() self.client.login(username='Karyn', password='specialP@55word') def test_qa_begin(self): \"\"", "label": 0}, {"snippet_id": 29078, "code": " orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr) def _wrapper(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache", "label": 0}, {"snippet_id": 21302, "code": " exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully. If that", "label": 0}, {"snippet_id": 55633, "code": " __init__(self,path): \t\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path", "label": 0}, {"snippet_id": 61607, "code": "=validate_subdomain(securedrop.landing_page_url), no_cookies=validate_no_cookies(page), safe_onion_address=validate_onion_address_not_in_href(soup), no_cdn=validate_not_using_cdn(page), http_no_redirect", "label": 1}, {"snippet_id": 24801, "code": " for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes", "label": 0}, {"snippet_id": 43683, "code": ".get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'", "label": 0}, {"snippet_id": 25169, "code": "(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index]", "label": 0}, {"snippet_id": 19027, "code": ".localconfig.parameters.get_value( \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core", "label": 1}, {"snippet_id": 65779, "code": "=Gtk.HBox(False, 0) tab_label=Gtk.Label(title) tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize", "label": 0}, {"snippet_id": 48694, "code": " product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"", "label": 0}, {"snippet_id": 76450, "code": " ) im_tile=tiles_array.ImageAt(column, row) if set_pixel_to_bgcolor: im_tile=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect:", "label": 0}, {"snippet_id": 82787, "code": " host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the", "label": 0}, {"snippet_id": 81935, "code": " form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL", "label": 0}, {"snippet_id": 72000, "code": ".services.cephfs import CephFS from..services.cephx import CephX from..services.exception import serialize_dashboard_exception from..services.ganesha import Ganesha, GaneshaConf, NFSException from..services", "label": 0}, {"snippet_id": 16135, "code": " tournament.game_seeder import GameSeeder from tournament.models import Tournament, Round, Game from tournament.models import TournamentPlayer, RoundPlayer, GamePlayer def get_round_or_404(tournament, round_num)", "label": 0}, {"snippet_id": 35335, "code": ".document_type, 'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type']", "label": 0}, {"snippet_id": 71191, "code": "=models.Session.get_by_value(value) if session is not None: session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self", "label": 0}, {"snippet_id": 69937, "code": "/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 49207, "code": " should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page", "label": 0}, {"snippet_id": 31868, "code": ")) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions", "label": 1}, {"snippet_id": 58375, "code": "\"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return data[setting_name] expected_result={ onboarding.INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro</p>", "label": 1}, {"snippet_id": 8093, "code": " context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is", "label": 0}, {"snippet_id": 34750, "code": "(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate", "label": 0}, {"snippet_id": 53376, "code": ".modes.has(environ.modes.TESTING): exec_test() else: exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except UserAbortError: out=None except Exception as error:", "label": 0}, {"snippet_id": 80587, "code": ": target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Wavelength', label='Wavelength(nm): ', value=self.matisse.target_wavelength) if success: print(f\"Setting wavelength to{target_wavelength", "label": 0}, {"snippet_id": 9420, "code": " email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage", "label": 0}, {"snippet_id": 22906, "code": " a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be", "label": 0}, {"snippet_id": 7491, "code": "**search_kwargs) result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}, 200 except exc.SQLAlchemyError as error: logging.error(error, exc_info=True) return{\"message\"", "label": 0}, {"snippet_id": 37796, "code": ".__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance.dsstox", "label": 0}, {"snippet_id": 15954, "code": "=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email", "label": 0}, {"snippet_id": 32221, "code": "';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start=self.position value=[] while self.char and self.char !=end", "label": 0}, {"snippet_id": 63670, "code": "(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', ", "label": 0}, {"snippet_id": 131, "code": " part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace", "label": 1}, {"snippet_id": 65543, "code": "+filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() tab_title=self.create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self.start_database_opening_routine( tab_title", "label": 1}, {"snippet_id": 73592, "code": " return True return False def login_form(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': clear_get_data(request) form=LoginForm(request.POST) if form.is_valid()", "label": 1}, {"snippet_id": 2643, "code": ") self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code", "label": 0}, {"snippet_id": 6098, "code": " authenticate. :return: A redirect, or None if the user is authenticated. \"\"\" if request.endpoint in frozenset(['oidc_callback', 'oidc_error']): return None id_token=self.get_cookie_id_token() if id_token is None:", "label": 0}, {"snippet_id": 53891, "code": ".step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None def clear(self) -> 'Report': \"\"\" Clear all user-data stored in this", "label": 0}, {"snippet_id": 30279, "code": "')[1]) if result.get('error') is not None: response=make_response(json.dumps(result.get('error')), 500) response.headers['Content-Type']='application/json' return response gplus_id=credentials.id_token", "label": 0}, {"snippet_id": 55288, "code": "()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) \tdef chown(self,uid=-1,gid", "label": 0}, {"snippet_id": 62449, "code": " the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination", "label": 0}, {"snippet_id": 34000, "code": ".browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self", "label": 0}, {"snippet_id": 47154, "code": "'hp_formset' : hp_formset, } if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc.extracted=True doc.save() context", "label": 0}, {"snippet_id": 84711, "code": " request.user, 'wiki_observed_article_changed') return redirect(article) return HttpResponseNotAllowed(['POST']) @login_required def stop_observing_article(request, title, group_slug=None, group_slug_field", "label": 0}, {"snippet_id": 2901, "code": "(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings", "label": 0}, {"snippet_id": 7828, "code": " third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 23813, "code": ": import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or", "label": 0}, {"snippet_id": 15044, "code": " source[2:] ts['source_model_name']=source_model_name ts['source_type']='model' else: ts['source_type']='timeseries' time_series.append(ts) time_series.sort(key=lambda ts_item: ts_item['result_type'], reverse", "label": 0}, {"snippet_id": 21296, "code": " If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM", "label": 0}, {"snippet_id": 18336, "code": " error \t\"\"\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self", "label": 1}, {"snippet_id": 30638, "code": "]) @app.route('/') @app.route('/grudget/') def showGrudgets(): grudgets=session.query(Grudget).all() if 'username' not in login_session: return render_template('publicgrudgets.html', grudgets=grudgets)", "label": 0}, {"snippet_id": 45252, "code": "=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month')", "label": 0}, {"snippet_id": 32534, "code": " return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class", "label": 0}, {"snippet_id": 52833, "code": ".perform_create(serializer) return Response(serializer.data, status=status.HTTP_201_CREATED) except Room.DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer)", "label": 0}, {"snippet_id": 50974, "code": " decorator_func def get_optional_steps(self): return(step.name for step in self._steps if self.is_optional) def specify_optional_steps(self, *steps): ''' Specify which optional steps to include in the build.", "label": 0}, {"snippet_id": 59417, "code": "\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for CSV", "label": 0}, {"snippet_id": 5102, "code": "\nfrom django.test import Client from drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password", "label": 0}, {"snippet_id": 52393, "code": "\"POST\"]) def add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(", "label": 0}, {"snippet_id": 61012, "code": " on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create", "label": 0}, {"snippet_id": 64141, "code": "=client.global_logout(subject_id) loresponse=logouts.values()[0] if isinstance(loresponse, LogoutResponse): if loresponse.status_ok(): current_app.logger.debug('Performing local logout for{!r}'.format(user))", "label": 0}, {"snippet_id": 80373, "code": ".set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action.triggered.connect(self", "label": 0}, {"snippet_id": 36837, "code": "'document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date'", "label": 0}, {"snippet_id": 53743, "code": ".__getattribute__(item) source=super(RedirectBuffer, self) \\ .__getattribute__('redirection_source') if hasattr(source, item): return getattr(source, item) return super(RedirectBuffer, self).__getattribute__", "label": 0}, {"snippet_id": 46384, "code": " else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if doc.title: new_prod_title='%s stub' % doc.title else: new_prod_title='unknown' product=Product", "label": 0}, {"snippet_id": 17453, "code": ".format(ban_reason)) flask.flash(flask.Markup(ban_str), 'danger') return flask.redirect(flask.url_for('account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '<strong", "label": 0}, {"snippet_id": 41688, "code": "(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/')", "label": 0}, {"snippet_id": 83435, "code": ": self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new=False", "label": 0}, {"snippet_id": 75867, "code": "('Sphinx HTML -> HTMLDir')), ) from_url_helptext=_( 'Absolute path, excluding the domain. ' 'Example: <b>/docs/</b> or <b>/install.html</b>', ) to_url_helptext=_( 'Absolute or relative URL. Example: ' ", "label": 0}, {"snippet_id": 48876, "code": "(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer'", "label": 0}, {"snippet_id": 57701, "code": "\"\"\" def our_wrapper(func): @receiver(signal, **decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver", "label": 0}, {"snippet_id": 28788, "code": ") def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess", "label": 0}, {"snippet_id": 6523, "code": ".oidc_error( \"You must log in with an account from the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token", "label": 0}, {"snippet_id": 40187, "code": ", 'product categorization'), ('DC', 'data cleaning')) QA_COMPLETE_PERCENTAGE=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators=[URLValidator", "label": 1}, {"snippet_id": 21120, "code": "._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options", "label": 0}, {"snippet_id": 6204, "code": " **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri", "label": 0}, {"snippet_id": 6819, "code": " Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST']", "label": 0}, {"snippet_id": 8994, "code": " import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps", "label": 0}, {"snippet_id": 41610, "code": "'Karyn', password='specialP@55word') def test_detail_form_load(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should start", "label": 0}, {"snippet_id": 9446, "code": " limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 22409, "code": " self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not", "label": 0}, {"snippet_id": 63718, "code": "(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self)", "label": 0}, {"snippet_id": 33846, "code": ".by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user in for further testing. '''", "label": 0}, {"snippet_id": 9845, "code": " configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]", "label": 0}, {"snippet_id": 71890, "code": ".add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages('_mykey') self.assertEquals(msgs_key,[ {'level", "label": 0}, {"snippet_id": 36876, "code": "(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month')) if len(document_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i ", "label": 0}, {"snippet_id": 33676, "code": "\\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a", "label": 0}, {"snippet_id": 72208, "code": "): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not in Ganesha.fsals_available(): raise", "label": 0}, {"snippet_id": 19285, "code": " fetch_and_execute_function_to_run(self, key): \"\"\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"])", "label": 0}, {"snippet_id": 80076, "code": ") if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job(_send_mail,[users, 'open_datarequest_organisation', datarequest_dict], title=u'Data Request", "label": 1}, {"snippet_id": 78805, "code": " string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id", "label": 0}, {"snippet_id": 55602, "code": ") \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list", "label": 0}, {"snippet_id": 20451, "code": " description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling", "label": 0}, {"snippet_id": 61479, "code": ") for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers", "label": 0}, {"snippet_id": 5532, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s", "label": 0}, {"snippet_id": 73132, "code": ".ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1][ magic.from_buffer(self.cleaned_data['pdf'].read(", "label": 0}, {"snippet_id": 79710, "code": " user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get(", "label": 0}, {"snippet_id": 48589, "code": ".pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm", "label": 0}, {"snippet_id": 31849, "code": " in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections", "label": 1}, {"snippet_id": 33270, "code": ", obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument) admin.site.register", "label": 1}, {"snippet_id": 76142, "code": " path==self.from_url: log.debug('Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path,", "label": 0}, {"snippet_id": 34985, "code": ") return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now()", "label": 1}, {"snippet_id": 48821, "code": "=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count", "label": 0}, {"snippet_id": 30532, "code": " session.add(newUser) session.commit() user=session.query(User).filter_by(email=login_session['email']).one() return user.id def getUserInfo(user_id): user=session.query(User).filter_by(id=user_id).one", "label": 1}, {"snippet_id": 9686, "code": " redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running", "label": 0}, {"snippet_id": 19098, "code": " driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers", "label": 1}, {"snippet_id": 83869, "code": " new_article=ArticleClass(title='NewArticle') template_params['new_article']=new_article if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir", "label": 0}, {"snippet_id": 40833, "code": " p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=", "label": 0}, {"snippet_id": 29669, "code": "/gallery/benwa/') def show_post_redirect(): return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False)", "label": 1}, {"snippet_id": 17341, "code": ", 'POST']) def login(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.LoginForm(flask.request.form) if flask.request.method=='POST' and form.validate(): if app.config['MAINTENANCE_MODE", "label": 0}, {"snippet_id": 82646, "code": " RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component", "label": 0}, {"snippet_id": 51321, "code": " get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection=self._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class", "label": 0}, {"snippet_id": 80307, "code": "'Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action.setCheckable(True) self.lock_fast_piezo_action", "label": 0}, {"snippet_id": 62312, "code": " to the app that asked for authn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{", "label": 0}, {"snippet_id": 80461, "code": "=None raise err @pyqtSlot() def clean_up(self): self.status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def", "label": 0}, {"snippet_id": 66664, "code": ".clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") else: composite_unlock_entry.get_style_context().add_class(\"error\") def open_database_page(self): self.clear_input_fields()", "label": 0}, {"snippet_id": 80244, "code": " self.set_bifi_approx_wavelength_action=set_menu.addAction('BiFi Approx. Wavelength') self.set_bifi_motor_pos_action=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu", "label": 0}, {"snippet_id": 34975, "code": " file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition", "label": 1}, {"snippet_id": 31395, "code": ".SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware', 'django.contrib.messages", "label": 0}, {"snippet_id": 32454, "code": " if len(redirs) > 0: return RedirectionsHelper(redirs) else: return None def redirection(self): if self.accept(TokenType.REDIRECT_OUT): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper", "label": 0}, {"snippet_id": 33399, "code": " test_dtxsid_pucs_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats", "label": 0}, {"snippet_id": 67955, "code": ".client import HTTPConnection class IndexView(PaginationMixin, ListView): model=Hunt template_name='threat_hunter/index.html' context_object_name='hunts' paginate_by=30 def get_context_data(self, **kwargs)", "label": 0}, {"snippet_id": 24611, "code": "=os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query", "label": 1}, {"snippet_id": 44947, "code": "', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', } hp_formset=HnPFormSet(data, prefix='habits') self.assertTrue(hp_formset.is_valid())", "label": 0}, {"snippet_id": 22173, "code": "(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None", "label": 0}, {"snippet_id": 57144, "code": " transaction_delete(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction", "label": 0}, {"snippet_id": 5793, "code": " from oauth2client.client import flow_from_clientsecrets, OAuth2WebServerFlow,\\ AccessTokenRefreshError import httplib2 from itsdangerous import TimedJSONWebSignatureSerializer, SignatureExpired __all__", "label": 1}, {"snippet_id": 47043, "code": " zip_file_name return response @login_required def data_group_registered_records_csv(request, pk): columnlist=['filename','title','document_type','url','organization'] dg=DataGroup.objects.filter(pk=pk).first() if", "label": 0}, {"snippet_id": 71030, "code": "): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime", "label": 0}, {"snippet_id": 34245, "code": " ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url", "label": 1}, {"snippet_id": 29620, "code": " @gallery.before_request def before_request(): g.user=current_user @gallery.route('/gallery/') @gallery.route('/gallery/<string:tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all", "label": 0}, {"snippet_id": 68925, "code": "/yROHHEfHjsTgMvFwAnf9uaxwWgE1d1RitIWgJpAnp1DZ5O0uVlsPPm XAhuBJ32mU8S5BezPTuJJICwBlLYECGb1Y65Cil4OALU7T7sbUqfLCuaRKxuPtcU VnJ6/qiyPygvKZWhV6Od0Yxlyed1kftMJyYoL8kPHfeHJ+vIyt0s7cropfiwXoka 1iJB5nKyt/eqMnPQ9aRpqkm9ABS/r7AauMA", "label": 0}, {"snippet_id": 65664, "code": ".get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self.filechooser_creation_dialog) cancel_button", "label": 0}, {"snippet_id": 35927, "code": " redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return render(request", "label": 0}, {"snippet_id": 51477, "code": " build requires a newer version of ohDevTools. You have version{0}, but need version{1}.\".format(VERSION, required_version),32) def windows_program_exists(program): return subprocess.call([\"where\", \"/q", "label": 0}, {"snippet_id": 21259, "code": ") if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive=True,", "label": 0}, {"snippet_id": 60283, "code": " time_limit_ms=custom_time_limit with sqlite_timelimit(conn, time_limit_ms): try: cursor=conn.cursor() cursor.execute(sql, params or{}) max_returned_rows=self.max_returned_rows if max_returned_rows==page_size", "label": 0}, {"snippet_id": 71612, "code": ".create() old_sid=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth", "label": 0}, {"snippet_id": 68463, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('tweet')", "label": 0}, {"snippet_id": 73118, "code": " msg=forms.ValidationError(ErrorMessages.empty_create_position_form) self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error", "label": 1}, {"snippet_id": 75457, "code": ") context={'candidate': candidate, 'format_form': format_form} return render(request, 'etd_app/staff_approve_candidate.html', context) @login_required @permission_required('etd_app.change_candidate', raise_exception", "label": 0}, {"snippet_id": 50424, "code": "=filename self.locktime=None def __enter__(self): dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename", "label": 0}, {"snippet_id": 34064, "code": "]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 25598, "code": ".StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed with the following error", "label": 1}, {"snippet_id": 63318, "code": "'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views", "label": 0}, {"snippet_id": 33862, "code": " object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name", "label": 0}, {"snippet_id": 75747, "code": ".error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list(r.json()['response']['docs'], index) if select2_results: return[{'text':", "label": 0}, {"snippet_id": 23425, "code": "(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info", "label": 0}, {"snippet_id": 4859, "code": ".logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s", "label": 0}, {"snippet_id": 48202, "code": ".form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags", "label": 1}, {"snippet_id": 865, "code": "\"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template", "label": 1}, {"snippet_id": 41792, "code": "', 'Type of DataGroup needs to be \"FU\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', ", "label": 0}, {"snippet_id": 63425, "code": ".assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_no_authn_util(self): no_authn_urls_before=[path for path in self.app.config['NO_AUTHN_URLS']] no_authn_path='/test3'", "label": 0}, {"snippet_id": 37959, "code": " formset_fields=[in_field for in_field in formset_fields if not in_field in exclude] return forms.inlineformset_factory(parent_model=parent_model, model=model, fields=formset_fields, formset=formset, form=form", "label": 0}, {"snippet_id": 75925, "code": ") from_url=models.CharField( _('From URL'), max_length=255, db_index=True, help_text=from_url_helptext, blank=True, ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext", "label": 0}, {"snippet_id": 65117, "code": "'syntax error') break code=fixed except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, args.points, 'failed to parse code') break if not tree: output_json(args", "label": 0}, {"snippet_id": 18446, "code": " check_if_exists \tif check_if_exists returns not None then renders signup.html with the error. \tAfter confirming that no errors have occured, hashes the password and then inserts it into the \tMongoDB database", "label": 1}, {"snippet_id": 16880, "code": "' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power", "label": 0}, {"snippet_id": 66470, "code": "=Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\") keyfile_chooser_dialog.close() def on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button=self.builder", "label": 0}, {"snippet_id": 67421, "code": "='threat/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['count']=self.object_list.count() context[", "label": 0}, {"snippet_id": 53551, "code": "=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project: 'projects.Project', error: Exception ) -> dict: \"\"\" :param project: :param error: :return: \"\"", "label": 0}, {"snippet_id": 6817, "code": "'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods", "label": 0}, {"snippet_id": 50872, "code": "(): if key in result: result[key]=value else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self._steps", "label": 0}, {"snippet_id": 59373, "code": " original SQLite database files \"\"\".strip()), ConfigOption(\"suggest_facets\", True, \"\"\" Calculate and display suggested facets \"\"\".strip()), ConfigOption(\"allow_sql\", True, \"\"\" Allow arbitrary SQL queries via", "label": 0}, {"snippet_id": 81978, "code": " form_class=JustULRUpdateForm template_name='url-update-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view')", "label": 0}, {"snippet_id": 79355, "code": "=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest", "label": 0}, {"snippet_id": 18036, "code": "', **tmpl_context), ) email.send_email(email_msg) def send_password_reset_email(user): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password", "label": 0}, {"snippet_id": 41086, "code": " response=self.client.get(response.url) self.assertContains(response, 'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response,", "label": 0}, {"snippet_id": 60856, "code": " CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local", "label": 0}, {"snippet_id": 7063, "code": " else: flash('Invalid password.') return render_template(\"auth/change_email.html\", form=form) @auth.route('/change-email/<token>') @login_required def change_email(token): if current_user.change_email(token", "label": 0}, {"snippet_id": 72492, "code": " from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText, CreateAccountFormText", "label": 0}, {"snippet_id": 68016, "code": "*kwargs) return context def get_queryset(self, request, pk): pk=self.kwargs['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self", "label": 0}, {"snippet_id": 66539, "code": ".window, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button\")", "label": 0}, {"snippet_id": 82154, "code": "=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"many_urls.csv\"' return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView", "label": 0}, {"snippet_id": 80478, "code": "() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception(*sys.exc_info())", "label": 0}, {"snippet_id": 44562, "code": ".create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family', prod_type='Test Product Type', description='Test Product", "label": 0}, {"snippet_id": 52812, "code": " self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text']=self.request.data.get('message') serializer=self.get_serializer(data=request.data) self", "label": 0}, {"snippet_id": 32866, "code": ": os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps perform multiple file redirections. Args: redirections: A list", "label": 0}, {"snippet_id": 29621, "code": " @gallery.before_request def before_request(): g.user=current_user @gallery.route('/gallery/') @gallery.route('/gallery/<string:tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all(", "label": 0}, {"snippet_id": 28345, "code": " the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated", "label": 0}, {"snippet_id": 43294, "code": ".browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup", "label": 1}, {"snippet_id": 16863, "code": ".objects.get(pk=1) data=[] if t.power_assignment==Tournament.AUTO: games=_seed_games_and_powers(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round", "label": 0}, {"snippet_id": 38437, "code": " DataDocument(CommonInfo): \"\"\" A DataDocument object is a single source of Factotum data. ``filename`` the name of the document's source file ``title`` the title of the document ``url`` an optional URL", "label": 0}, {"snippet_id": 77333, "code": ": layers_by_name: A dict of all the layers in a database. \"\"\" layers_by_name={} server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(\"projection\"): server_vars", "label": 0}, {"snippet_id": 68485, "code": " return query def get(self, request): self.object_list=self.get_queryset(request) context=self.get_context_data() return render(request, 'twitter_hunter/index.html', context) class TweetsView(PaginationMixin", "label": 0}, {"snippet_id": 28987, "code": ". \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker", "label": 0}, {"snippet_id": 64614, "code": "'id', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'input', 'int', 'InterruptedError', 'IOError', 'IsADirectoryError', 'isinstance', 'issubclass', 'iter', 'KeyboardInterrupt', 'KeyError", "label": 0}, {"snippet_id": 52689, "code": " redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate\" return r if", "label": 0}, {"snippet_id": 67320, "code": "=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=ip)).order_by('-publish_timestamp') count=context['events'].count() if count > 0", "label": 0}, {"snippet_id": 74706, "code": " banner_id=request.META.get('Shibboleth-brownBannerID', '') if banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return", "label": 0}, {"snippet_id": 55381, "code": "\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t", "label": 0}, {"snippet_id": 6999, "code": " return redirect(url_for('auth.login')) else: return redirect(url_for('main.index')) return render_template('auth/reset_password.html', form=form) @auth.route('/change-email', methods=['GET', 'POST']) @login_required", "label": 0}, {"snippet_id": 60754, "code": ": Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called in the main monitoring", "label": 0}, {"snippet_id": 37147, "code": "=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label=\"Weight", "label": 0}, {"snippet_id": 42496, "code": ".objects.get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get(f'/qa/extractedtext/{ext.pk", "label": 0}, {"snippet_id": 7979, "code": " Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden(", "label": 0}, {"snippet_id": 1227, "code": " downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of", "label": 0}, {"snippet_id": 68718, "code": ": url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location", "label": 0}, {"snippet_id": 43725, "code": " qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The", "label": 1}, {"snippet_id": 75975, "code": "() class Meta: verbose_name=_('redirect') verbose_name_plural=_('redirects') ordering=('-update_dt',) def __str__(self): redirect_text='{type}:{from_to_url}' if self.redirect_type in['prefix', 'page', ", "label": 0}, {"snippet_id": 49651, "code": "(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read();", "label": 0}, {"snippet_id": 39695, "code": " def get_qa_index_path(self): \"\"\" The type of data group to which the extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code", "label": 0}, {"snippet_id": 68385, "code": " exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location')==None:", "label": 0}, {"snippet_id": 36548, "code": "() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB", "label": 0}, {"snippet_id": 14712, "code": " FlaskForm from flask_login import LoginManager, current_user, login_user, logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField", "label": 1}, {"snippet_id": 83088, "code": "\" def __init__(self, queue): \"\"\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger", "label": 0}, {"snippet_id": 59397, "code": " ConfigOption(\"default_cache_ttl\", 365 * 24 * 60 * 60, \"\"\" Default HTTP cache TTL(used in Cache-Control: max-age=header) \"\"\".strip()), ConfigOption(\"cache_size_kb\", 0, \"\"\" SQLite cache size in KB(0==use SQLite", "label": 1}, {"snippet_id": 39671, "code": "): return str(self.data_document) def next_extracted_text_in_qa_group(self): nextid=0 extextnext=get_next_or_prev(ExtractedText.objects.filter( qa_group=self.qa_group, qa_checked=False), self, 'next') if", "label": 0}, {"snippet_id": 34840, "code": "(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]", "label": 1}, {"snippet_id": 33440, "code": "'extracted_text__data_document')) dd=dds[0] ds=dd.data_group.data_source p=Product.objects.create(data_source=ds, title='Test Product', upc='Test UPC for ProductToPUC') pd=ProductDocument.objects.create(document=dd, product=p", "label": 0}, {"snippet_id": 63615, "code": ".dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self): came_from='/afterlogin", "label": 0}, {"snippet_id": 57557, "code": "\nUSER_ID='user_id' STEP_1='view_introduction' STEP_2='instructor_intro' STEP_3='create_course' STEP_4='create_courselet' STEP_5='create_thread' STEP_6='preview_courselet' STEP_7='next_steps' STEP_8='invite_somebody", "label": 1}, {"snippet_id": 1334, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$',", "label": 0}, {"snippet_id": 27940, "code": ", type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError", "label": 0}, {"snippet_id": 10302, "code": ".username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history", "label": 0}, {"snippet_id": 34672, "code": " product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values(", "label": 0}, {"snippet_id": 80912, "code": "/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views/fit_event_views.xml', 'views/fit_subscription_templates", "label": 0}, {"snippet_id": 34983, "code": "=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %", "label": 1}, {"snippet_id": 56450, "code": ".when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to('pachatary://app/profiles/a_b.c') class ScenarioMaker: def given_a_profile(self, username, bio, pic): orm_person=ORMPerson.objects.create()", "label": 0}, {"snippet_id": 43781, "code": " doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait", "label": 0}, {"snippet_id": 29802, "code": ".show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session, tagname): instance=Tag.query.filter_by(name", "label": 0}, {"snippet_id": 11363, "code": " None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders", "label": 0}, {"snippet_id": 76576, "code": "&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,-30000000.0,30000000.0,30000000.0& WIDTH=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0.0410861968994s http:", "label": 0}, {"snippet_id": 48416, "code": ") def link_product_form(request, pk, template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str", "label": 0}, {"snippet_id": 15707, "code": " view_run(): return render_template('run.html') @app.route('/run/form/init', methods=['POST']) def view_run_init(): run_form=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults", "label": 0}, {"snippet_id": 20729, "code": ".redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config", "label": 0}, {"snippet_id": 26567, "code": ".PROCESS_TYPE_REDIS_SERVER, check_alive=check_alive) def kill_plasma_store(self, check_alive=True): \"\"\"Kill the plasma store. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self", "label": 0}, {"snippet_id": 16448, "code": " seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect", "label": 0}, {"snippet_id": 45110, "code": "'datadocument_count_by_month']=datadocument_count_by_month() stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical", "label": 0}, {"snippet_id": 77123, "code": "%(target_path, str(server_layer_def[\"id\"])) if server_layer_def[\"projection\"]==\"mercator\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType", "label": 0}, {"snippet_id": 20699, "code": "=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head", "label": 0}, {"snippet_id": 64384, "code": ") current_app.logger.error('No SAMLResponse or SAMLRequest parameter found') abort(400) @authn_views.route('/token-login', methods=['POST']) def token_login(): current_app.logger.debug('Starting token login", "label": 0}, {"snippet_id": 34492, "code": " prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual", "label": 0}, {"snippet_id": 27694, "code": ": self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t", "label": 1}, {"snippet_id": 14234, "code": " external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User):", "label": 0}, {"snippet_id": 43415, "code": " type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/", "label": 0}, {"snippet_id": 71849, "code": ": None, 'message':'TEST MESSAGE'}]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals", "label": 0}, {"snippet_id": 18499, "code": "{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch", "label": 1}, {"snippet_id": 60722, "code": " import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name)", "label": 0}, {"snippet_id": 42981, "code": " test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains(response, '<b>Add New Habit and Practice</b>') def test_dd_link(self): response=self.client.get(", "label": 0}, {"snippet_id": 62344, "code": " session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info) session['eduPersonAssurance']=loa session.persist() relay_state=request.form.get('RelayState', '/') current_app", "label": 1}, {"snippet_id": 69631, "code": " apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages: logger.info('Installing{} apt packages collected from plugins:{}'.format( len(apt_packages), ' '.join(apt_packages) )", "label": 0}, {"snippet_id": 57527, "code": "=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form", "label": 0}, {"snippet_id": 11898, "code": " openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import", "label": 0}, {"snippet_id": 63724, "code": ".com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn='hubba-bubba' came_from='/afterlogin/' session_id=self", "label": 0}, {"snippet_id": 80257, "code": ".addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan') self.bifi_scan_action=scan_menu.addAction('Birefringent", "label": 0}, {"snippet_id": 76314, "code": " region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image. Returns: The image to be presented to the user. \"\"\" proj=layer_properties", "label": 0}, {"snippet_id": 81429, "code": "%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta", "label": 1}, {"snippet_id": 8955, "code": " from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http", "label": 0}, {"snippet_id": 12960, "code": "']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user", "label": 0}, {"snippet_id": 25658, "code": " This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except", "label": 0}, {"snippet_id": 35734, "code": "(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request", "label": 0}, {"snippet_id": 57543, "code": "=transaction) extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context) def transactions_open(request, *args, **kwargs): if not request.user.is_authenticated", "label": 0}, {"snippet_id": 73793, "code": " def change_positions_sort_method(request, sort_by): if request.POST.get(\"sort-created\"): return '-created' elif request.POST.get(\"sort-closed\"): return '-date_closed' elif request.POST.get(\"sort-position", "label": 0}, {"snippet_id": 2581, "code": " get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ", "label": 0}, {"snippet_id": 60260, "code": "=sqlite3.connect( \"file:{}?immutable=1\".format(info[\"file\"]), uri=True, check_same_thread=False, ) self.prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms", "label": 0}, {"snippet_id": 68294, "code": "-datetime') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[", "label": 0}, {"snippet_id": 69705, "code": "[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config.d')]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files() if os.path.exists(CONFIG_FILE): with open(CONFIG_FILE, 'r') as", "label": 0}, {"snippet_id": 15642, "code": " enumerate(get_command('change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial", "label": 0}, {"snippet_id": 52922, "code": " url from realpal.apps.chat.views import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(?P<room_id>[0-9]+)/", "label": 1}, {"snippet_id": 25945, "code": ", password=self._ray_params.redis_password, redis_max_memory=self._ray_params.redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants", "label": 0}, {"snippet_id": 74567, "code": " HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def faq(request): return render", "label": 0}, {"snippet_id": 56809, "code": "'transaction_code': concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context)", "label": 0}, {"snippet_id": 65580, "code": ".add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget,", "label": 0}, {"snippet_id": 3979, "code": "\"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"", "label": 0}, {"snippet_id": 62268, "code": ") > 0: return False else: return True def validate_onion_address_not_in_href(page): links_on_landing_page=page.find_all(\"a\") for link in links_on_landing_page: try: if '.onion' in link.attrs['href']: return", "label": 0}, {"snippet_id": 53973, "code": " useful for creating intermediate body values for display while the method is still executing. :return: A dom string for the current state of the print buffer contents \"\"\" try: contents=self.stdout_interceptor", "label": 1}, {"snippet_id": 45438, "code": ".contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings", "label": 0}, {"snippet_id": 52723, "code": ".permissions import IsAuthenticated from rest_framework.response import Response from rest_framework import status from django.conf import settings from realpal.apps.chat.models import Message from realpal", "label": 1}, {"snippet_id": 60342, "code": ": return Results(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio.get_event_loop().run_in_executor( self.executor, sql_operation_in_thread", "label": 0}, {"snippet_id": 46422, "code": " request.method=='POST' and 'clean_comp_data_button' in request.POST: clean_comp_data_form=CleanCompDataForm(request.POST, request.FILES) if clean_comp_data_form.is_valid(): script_pk=int(request.POST[", "label": 0}, {"snippet_id": 25881, "code": " not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path", "label": 0}, {"snippet_id": 15742, "code": "/run/form/submit', methods=['POST']) def view_run_submit(): run_form=get_run_form() commands=get_commands(run_form) if run_form.validate_on_submit(): return json.dumps({ 'commands': commands, 'html': render_template", "label": 0}, {"snippet_id": 45535, "code": ".forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance=extracted_text), 'extracted_text': extracted_text, 'detail_formset", "label": 1}, {"snippet_id": 4556, "code": ",) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{", "label": 0}, {"snippet_id": 43500, "code": " raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 54648, "code": "\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor problem in problems: \t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"]", "label": 1}, {"snippet_id": 40488, "code": "(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC', through='TaxonomyToPUC') class Meta", "label": 0}, {"snippet_id": 54099, "code": ".order('-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About", "label": 0}, {"snippet_id": 50426, "code": " def __enter__(self): dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile ", "label": 0}, {"snippet_id": 55310, "code": "=-1,gid=-1): \t\treturn os.chown(self.path,uid,gid) \tdef lchflags(self,flags): \t\treturn os.lchflags(self.path,flags) \tdef lchmod(self,mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid", "label": 0}, {"snippet_id": 45663, "code": " if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form", "label": 0}, {"snippet_id": 63978, "code": "(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user=authenticate(current_app, session_info) if user is None: current_app.logger.error('Could", "label": 0}, {"snippet_id": 9632, "code": " None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 4385, "code": " 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 73336, "code": "='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form, name='confirm_account'), path('createnewposition/', views.import_position, name='importposition'), path(", "label": 0}, {"snippet_id": 25910, "code": "(socket_path)) def start_redis(self): \"\"\"Start the Redis servers.\"\"\" assert self._redis_address is None (self._redis_address, redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address", "label": 1}, {"snippet_id": 73107, "code": " clean(self): pdf=self.cleaned_data.get('pdf') url=self.cleaned_data.get('url_ref') if not pdf and not url: msg=forms.ValidationError(ErrorMessages.empty_create_position_form) self.add_error('pdf', msg", "label": 1}, {"snippet_id": 78055, "code": "}) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size", "label": 0}, {"snippet_id": 35880, "code": " assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p", "label": 0}, {"snippet_id": 23552, "code": " required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources", "label": 0}, {"snippet_id": 63263, "code": " load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self", "label": 0}, {"snippet_id": 74669, "code": ".username: raise PermissionDenied return candidate @login_required def register(request): from.forms import PersonForm, CandidateForm if request.method=='POST': post_data=request.POST.copy() post_data[", "label": 0}, {"snippet_id": 63954, "code": " assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response", "label": 0}, {"snippet_id": 26383, "code": " the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process", "label": 0}, {"snippet_id": 84352, "code": " changeset.compare_to(revision_from), 'from': from_value, 'to': revision, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params", "label": 0}, {"snippet_id": 10638, "code": " redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value", "label": 1}, {"snippet_id": 53204, "code": "'10118', 'phone_number': '+26334465657456774567', 'email': 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, '') self.assertEqual(self.view", "label": 0}, {"snippet_id": 11979, "code": ".getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode", "label": 0}, {"snippet_id": 32309, "code": " iterator to allow easy creation of a stream of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into an Abstract Syntax", "label": 0}, {"snippet_id": 10148, "code": " no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse", "label": 0}, {"snippet_id": 45282, "code": "] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter", "label": 0}, {"snippet_id": 46529, "code": " Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis=row['lower_wf_analysis'] ingredient.central_wf_analysis=row['central_wf_analysis", "label": 0}, {"snippet_id": 56420, "code": "=param') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/p/a_b.c&other=param' '&st=%40a_b.c&sd=my+info&si=%2Fmedia%2Furl.small", "label": 0}, {"snippet_id": 4791, "code": ".org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self", "label": 0}, {"snippet_id": 3497, "code": "/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 55369, "code": ".path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None", "label": 0}, {"snippet_id": 22189, "code": ", num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed", "label": 0}, {"snippet_id": 3230, "code": " * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization", "label": 0}, {"snippet_id": 24450, "code": "(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address", "label": 1}, {"snippet_id": 40482, "code": "=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField", "label": 0}, {"snippet_id": 58898, "code": "(email) try: old_invite=Invite.get_by_user_or_404( user=user, type=invite_type, course=course, instructor=instructor, enroll_unit_code=enroll_unit_code ) if old_invite: return old_invite except Http404", "label": 0}, {"snippet_id": 6456, "code": " originally requested page. \"\"\" try: session_csrf_token=session.pop('oidc_csrf_token') state=json.loads(request.args['state']) csrf_token=state['csrf_token'] destination=state['destination'] code=request", "label": 0}, {"snippet_id": 68162, "code": " response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter:index')", "label": 0}, {"snippet_id": 74264, "code": " @property def access_form_valid(self): form=self._get_access_form() if form.is_valid(): form.save() return True else: return False def _passphrase_next_url(self, request): next_url=None if \"next\" in request", "label": 0}, {"snippet_id": 78528, "code": "'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), 'site_url': config.get('ckan.site_url') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type", "label": 0}, {"snippet_id": 54112, "code": " count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location ", "label": 0}, {"snippet_id": 50323, "code": "\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session.pop('tempFile', None) return \"\" @app.route('", "label": 0}, {"snippet_id": 8314, "code": " enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context", "label": 0}, {"snippet_id": 54610, "code": "\tprint \"parsing error in \"+homework_file.path \t\t\t\traise \t\tself.assignments=[] \t\tfor homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append", "label": 0}, {"snippet_id": 84138, "code": " if request.method=='POST': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request.user.is_authenticated(): form.editor=request.user if((article is", "label": 0}, {"snippet_id": 38448, "code": " of the document's source file ``title`` the title of the document ``url`` an optional URL to the document's remote source ``raw_category`` ``data_group`` the DataGroup object to which the document belongs", "label": 0}, {"snippet_id": 84252, "code": ", context_instance=RequestContext(request)) def view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES", "label": 0}, {"snippet_id": 46527, "code": ".rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis=row['lower_wf_analysis'] ingredient.central_wf_analysis", "label": 0}, {"snippet_id": 22469, "code": "=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type", "label": 1}, {"snippet_id": 33776, "code": ".raw_cas, rc.raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull", "label": 1}, {"snippet_id": 71137, "code": " _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id !", "label": 0}, {"snippet_id": 72614, "code": "'email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1]", "label": 0}, {"snippet_id": 71287, "code": ": level}) add_message=_add_message def _get_messages(self, key='_messages'): try: return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self): next_uri", "label": 1}, {"snippet_id": 11013, "code": " field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise", "label": 0}, {"snippet_id": 50175, "code": "\", methods=[\"POST\"]) def signUpButton(): email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email", "label": 0}, {"snippet_id": 34134, "code": "=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id", "label": 0}, {"snippet_id": 30555, "code": ".filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user.id except: return None @app.route('/grudget/<int:grudget_id>/grudge/JSON", "label": 1}, {"snippet_id": 50684, "code": ")[0]=='32bit': return 'Linux-x86' if platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile", "label": 0}, {"snippet_id": 70868, "code": "'\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 73728, "code": "=dictionary.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form, 'baseVisibleText", "label": 0}, {"snippet_id": 60627, "code": " isinstance(exception, NotFound): status=404 info={} message=exception.args[0] elif isinstance(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif isinstance(exception, DatasetteError):", "label": 0}, {"snippet_id": 14733, "code": " SelectMultipleField, FieldList, FormField, StringField, PasswordField, validators from datetime import datetime import os.path import json import redis import re import pprint pp=pprint.PrettyPrinter(indent", "label": 0}, {"snippet_id": 60334, "code": "\".format( conn, repr(sql), params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description) else: return Results(rows, False, cursor.description) return await asyncio.get_event_loop", "label": 0}, {"snippet_id": 54510, "code": " response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else:", "label": 0}, {"snippet_id": 26063, "code": ", huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in", "label": 1}, {"snippet_id": 65618, "code": "(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self", "label": 0}, {"snippet_id": 30591, "code": ").filter_by(grudget_id=grudget.id).all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/JSON') def grudgeJSON(grudget_id, grudge_id):", "label": 0}, {"snippet_id": 22021, "code": " and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number", "label": 0}, {"snippet_id": 18050, "code": " has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset.txt", "label": 0}, {"snippet_id": 26763, "code": " process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(", "label": 0}, {"snippet_id": 73833, "code": "(sort_by), 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method", "label": 0}, {"snippet_id": 71142, "code": ".request.session_hash==session.hash(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id !=session.user_id: session=models.Session.upgrade_to_user_session", "label": 0}, {"snippet_id": 5982, "code": "=app.config['OIDC_CREDENTIALS_STORE'] except KeyError: pass def get_cookie_id_token(self): try: id_token_cookie=request.cookies[self.app.config['OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer", "label": 0}, {"snippet_id": 50539, "code": ", os.environ[\"HOME\"]+\"/.openhome-build/\"+name+\".lock\") def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f", "label": 0}, {"snippet_id": 38158, "code": "'gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key", "label": 0}, {"snippet_id": 78951, "code": " datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the", "label": 0}, {"snippet_id": 23284, "code": " as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random", "label": 0}, {"snippet_id": 39046, "code": "'''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return", "label": 0}, {"snippet_id": 72347, "code": "], 'desc': status_dict[cluster_id][daemon_id]['desc'] } for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend", "label": 0}, {"snippet_id": 47821, "code": "=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer", "label": 0}, {"snippet_id": 35012, "code": "'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem", "label": 1}, {"snippet_id": 40726, "code": "(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card?", "label": 0}, {"snippet_id": 58530, "code": ".core.management.base import BaseCommand from ct.models import Course, Role, UnitLesson, Unit, Lesson, Response from ctms.models import Invite from chat.models import Chat, EnrollUnitCode from accounts", "label": 0}, {"snippet_id": 53845, "code": " ]) @property def project(self): return self.step.project if self.step else None @property def results_cache_path(self) -> str: \"\"\" Location where step report is cached between sessions to prevent loss", "label": 0}, {"snippet_id": 9103, "code": " from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted", "label": 0}, {"snippet_id": 77626, "code": "): \"\"\" :return: \"\"\" self._load_config() context={'session': model.Session} package_ids=self.get_package_ids() for package_id in package_ids: default_security_classification=\"PUBLIC\" default_data_driven_application", "label": 0}, {"snippet_id": 29735, "code": "'STATIC_BENWA_DIR'], fname )) fpath='/'.join(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image", "label": 1}, {"snippet_id": 77965, "code": "] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids", "label": 0}, {"snippet_id": 41850, "code": ".gt.save() response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self)", "label": 0}, {"snippet_id": 25557, "code": ".LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args", "label": 1}, {"snippet_id": 79863, "code": " be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset", "label": 0}, {"snippet_id": 18904, "code": ".core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next", "label": 0}, {"snippet_id": 71878, "code": "'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ ", "label": 0}, {"snippet_id": 75156, "code": " removed. Please make sure your keywords are correct in the information section below.') return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=MetadataForm", "label": 0}, {"snippet_id": 27921, "code": " that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): ", "label": 0}, {"snippet_id": 50876, "code": " else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser()", "label": 0}, {"snippet_id": 41382, "code": "=ChildForm(instance=et) dd_child_model =get_extracted_models(dd.data_group.group_type.code)[1] childform_model=child_formset.__dict__.get('queryset').__dict__.get('model') self.assertEqual(dd_child_model,", "label": 0}, {"snippet_id": 2011, "code": " \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except", "label": 0}, {"snippet_id": 52281, "code": "\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new", "label": 0}, {"snippet_id": 54185, "code": "\"Search -> Politician Page \"\"\" @app.route('/search', methods=['POST', 'GET']) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician", "label": 1}, {"snippet_id": 26593, "code": "=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor", "label": 0}, {"snippet_id": 14620, "code": " auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 75402, "code": "=request.GET['sort_by']) else: candidates=Candidate.get_candidates_by_status(status) return render(request, 'etd_app/staff_view_candidates.html',{'candidates': candidates, 'status': status}) @login_required", "label": 0}, {"snippet_id": 9535, "code": "( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar", "label": 0}, {"snippet_id": 11747, "code": " third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id':", "label": 0}, {"snippet_id": 78863, "code": ", data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check", "label": 0}, {"snippet_id": 18717, "code": "\treturn \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"\" IndexHandler(): Class that handles / \"\"\" class IndexHandler(tornado.web.RequestHandler): \tdef get(self): \t", "label": 1}, {"snippet_id": 59335, "code": " ConfigOption(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested facet", "label": 0}, {"snippet_id": 60823, "code": " run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try:", "label": 0}, {"snippet_id": 55803, "code": " r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf.close()", "label": 0}, {"snippet_id": 28815, "code": " return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None", "label": 0}, {"snippet_id": 66948, "code": "=domain)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=domain)).order_by('-datetime') count=context[", "label": 0}, {"snippet_id": 41584, "code": " import import_module from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def setUp(self): self.objects=load_model_objects", "label": 0}, {"snippet_id": 80690, "code": ", title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE:POS?', numeric_result=True)) if success: print(f\"Setting thin etalon motor position to{target_pos}.", "label": 0}, {"snippet_id": 42018, "code": "{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1", "label": 0}, {"snippet_id": 51411, "code": ".recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception)", "label": 0}, {"snippet_id": 42656, "code": ") def test_product_facet_returns(self): response=self.c.get('/find/?q=insecticide') brands=response.content.count(b'name=\"brand_name\"') self.assertTrue(brands>10,('There should be ~143 product returns ", "label": 0}, {"snippet_id": 65552, "code": ".get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response==Gtk.ResponseType.CANCEL: self.logging_manager.log_debug(\"File selection canceled\")", "label": 1}, {"snippet_id": 54196, "code": ".get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician=None for p in politicians: politician=p if politician !=None: politician.search_count=politician.search_count", "label": 1}, {"snippet_id": 15755, "code": " json.dumps({ 'commands': commands, 'html': render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }", "label": 0}, {"snippet_id": 61761, "code": ", this method requires a DirectoryEntryQueryset of SecureDrop instances that are in the database and always commits the results back to the database. \"\"\" securedrops=securedrops.with_domain_annotation(", "label": 0}, {"snippet_id": 69500, "code": "(\"Installation failed: JupyterHub did not start in{}s\".format(times)) def ensure_symlinks(prefix): \"\"\" Ensure we symlink appropriate things into /usr/bin We add the user conda environment to PATH for notebook", "label": 0}, {"snippet_id": 44313, "code": "(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit.is_enabled(), \"Button should be disabled\") tag=self.browser.find_element_by_class_name('taggit-tag') tag.click() self.assertTrue", "label": 0}, {"snippet_id": 32215, "code": ".position) self.read() return token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start=self.position", "label": 0}, {"snippet_id": 72337, "code": " status_dict: return[ { 'daemon_id': daemon_id, 'cluster_id': cluster_id, 'status': status_dict[cluster_id][daemon_id]['status'], 'desc': status_dict[cluster_id][daemon_id]['desc'] } for daemon_id in status_dict", "label": 0}, {"snippet_id": 12485, "code": ", enterprise_name=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 71097, "code": "=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime:", "label": 0}, {"snippet_id": 80137, "code": ") self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container=QWidget() container.setLayout(self", "label": 0}, {"snippet_id": 72779, "code": " 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login", "label": 1}, {"snippet_id": 57902, "code": " def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id", "label": 0}, {"snippet_id": 59660, "code": " or{} ).get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item", "label": 0}, {"snippet_id": 77367, "code": "\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES: logger", "label": 0}, {"snippet_id": 55766, "code": "\tself.file=file \t\tself.number=number \t\tself.text=text class File(FSItem): \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f", "label": 0}, {"snippet_id": 75911, "code": "='redirects', ) redirect_type=models.CharField( _('Redirect Type'), max_length=255, choices=TYPE_CHOICES, help_text=redirect_type_helptext, ) from_url=models.CharField( _('From URL'), max_length=255, db_index", "label": 0}, {"snippet_id": 64232, "code": " Note that the IdP can request a logout even when we didn't initiate the process as a single logout request started by another SP. \"\"\" current_app.logger.debug('Logout service started') state=StateCache", "label": 0}, {"snippet_id": 57162, "code": ") transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction extra_context['header']=gettext('Delete Transaction?') extra_context['message']=transaction.description_short", "label": 0}, {"snippet_id": 18215, "code": ".options import tornado.web import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later", "label": 1}, {"snippet_id": 1725, "code": " Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date", "label": 1}, {"snippet_id": 8030, "code": " attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context", "label": 0}, {"snippet_id": 66917, "code": " count=context['events'].count() if count > 0: context['events_count']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=domain)).order_by('-timestamp') count=context['attributes']", "label": 0}, {"snippet_id": 17881, "code": ".request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user", "label": 0}, {"snippet_id": 19486, "code": " updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell()) next_line=self", "label": 1}, {"snippet_id": 14106, "code": "[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context", "label": 0}, {"snippet_id": 48687, "code": ".split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm(", "label": 0}, {"snippet_id": 81120, "code": "=str('/'+referer.split('/')[-1]) return http.request.redirect(redirect) def _update_counter_subscription(self, event, partner, subscription_update_counter): event_cat=str(event.event_type_id.name).lower", "label": 1}, {"snippet_id": 78908, "code": ") if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation", "label": 1}, {"snippet_id": 35130, "code": "=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self", "label": 0}, {"snippet_id": 60243, "code": ".page_size def sql_operation_in_thread(): conn=getattr(connections, db_name, None) if not conn: info=self.inspect()[db_name] if info[\"file\"]==\":memory:\": conn=sqlite3.connect(\":memory:\") else: conn=sqlite3", "label": 0}, {"snippet_id": 70943, "code": "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 63687, "code": "': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode", "label": 0}, {"snippet_id": 32735, "code": "=None def execute(self, builtins): if self.command in builtins: builtins[self.command](*self.args) else: pid=os.fork() if pid==0: os.execv(self.full_command, self.args) else: self.pid=pid def wait(self", "label": 0}, {"snippet_id": 76491, "code": " to: %s\", str(within_tiled_image.AsTuple())) im_true=im_whole_tiles.crop(within_tiled_image.AsTuple()) logger.debug(\"Stretching to requested: %s\", str( (user_width, user_height))) im_user=im_true.resize", "label": 0}, {"snippet_id": 81245, "code": " website_published=fields.Boolean(default=True) fit_day_of_week=fields.Char(string='Dag', default='') fit_repetition_enabled=fields.Boolean(string='Herhalen?', default=False) fit_repetition=fields.Selection([('daily", "label": 0}, {"snippet_id": 47275, "code": " frm_list.append(PriorityForm(request.POST or None, instance=ds)) registered=Count('datagroup__datadocument') uploaded =Count('datagroup__datadocument', filter=Q(datagroup__datadocument__matched=True))", "label": 0}, {"snippet_id": 43504, "code": "//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index", "label": 0}, {"snippet_id": 77841, "code": "(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('---------", "label": 0}, {"snippet_id": 74946, "code": "(request, 'etd_app/candidate.html', context_data) @login_required def candidate_upload(request, candidate_id): from.forms import UploadForm try: candidate=_get_candidate(candidate_id=candidate_id, request", "label": 0}, {"snippet_id": 82871, "code": ".host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent", "label": 0}, {"snippet_id": 82147, "code": ".save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"many_urls.csv\"' return", "label": 0}, {"snippet_id": 75906, "code": ".ForeignKey( Project, verbose_name=_('Project'), related_name='redirects', ) redirect_type=models.CharField( _('Redirect Type'), max_length=255, choices=TYPE_CHOICES, help_text=redirect_type_helptext, )", "label": 0}, {"snippet_id": 43627, "code": " approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser", "label": 0}, {"snippet_id": 17037, "code": " expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial", "label": 0}, {"snippet_id": 69344, "code": " not conda.check_miniconda_version(USER_ENV_PREFIX, miniconda_version): logger.info('Downloading & setting up user environment...') with conda.download_miniconda_installer(miniconda_version, miniconda_installer_md5", "label": 0}, {"snippet_id": 34583, "code": ".get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects", "label": 0}, {"snippet_id": 82932, "code": " local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short", "label": 0}, {"snippet_id": 17763, "code": ".url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404)", "label": 0}, {"snippet_id": 24764, "code": ".autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address", "label": 0}, {"snippet_id": 77469, "code": " tiles - everything a code client needs to know about and use, to get tiles from a server. Args: server_url: URL of the server on which command to be executed. target_path: Target published point. Returns", "label": 0}, {"snippet_id": 17165, "code": ", 'round': r, 'formset': formset}) @permission_required('tournament.change_gameplayer') def game_scores(request, tournament_id, round_num): \"\"\"Provide a form to enter scores for all the games in a round", "label": 0}, {"snippet_id": 28769, "code": " out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse", "label": 0}, {"snippet_id": 29495, "code": "']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup')) @auth.route('/signup', methods=['GET', 'POST']) def signup(): form=RegistrationForm", "label": 0}, {"snippet_id": 31077, "code": " render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/delete', methods=['GET', 'POST']) def deleteGrudge", "label": 0}, {"snippet_id": 38673, "code": ".get_abstract_filename() return f'/media/{dg.fs_id}/pdf/{fn}' def clean(self): this_type=self.data_group.group_type doc_types=DocumentType.objects.filter(group_type=this_type) if not self.document_type", "label": 1}, {"snippet_id": 1405, "code": "='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part)", "label": 1}, {"snippet_id": 55622, "code": " a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef __init__(self,path): \t\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items()", "label": 0}, {"snippet_id": 43265, "code": "(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp", "label": 0}, {"snippet_id": 78941, "code": "[users, 'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict", "label": 1}, {"snippet_id": 45587, "code": " should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page", "label": 0}, {"snippet_id": 61265, "code": ":type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object", "label": 0}, {"snippet_id": 52192, "code": " user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def", "label": 0}, {"snippet_id": 27763, "code": " appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock: events", "label": 1}, {"snippet_id": 73451, "code": "{'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account", "label": 0}, {"snippet_id": 32886, "code": ": A list of redirections. ''' def __init__(self, redirections): self.redirections=redirections self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection", "label": 0}, {"snippet_id": 28206, "code": " The redis client to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message", "label": 0}, {"snippet_id": 52125, "code": "=request.form.get(\"name\", \"Untitled\") desc=request.form.get(\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id", "label": 0}, {"snippet_id": 42372, "code": " self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f'/datagroup/%s/", "label": 0}, {"snippet_id": 58264, "code": " setting_name, value, _mock): self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting') @mock.patch('core.common.utils.c_onboarding_status')", "label": 0}, {"snippet_id": 71830, "code": ".blank('/auth/google') req._load_session() msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST MESSAGE') msgs=req.get_messages() self.assertEquals(msgs,[{'level': None, 'message", "label": 0}, {"snippet_id": 51752, "code": "(' ')) self.count=0 def updateScope(self,scope): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript(self,script): script_name", "label": 0}, {"snippet_id": 53124, "code": ".purchase_step, PS_DAP) data={'status': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().status, None) data={'house_type': 8, 'house_age': 8, 'house_cond': 8} self.client.post", "label": 0}, {"snippet_id": 65539, "code": " self.logging_manager.log_debug( \"File selected: \" +filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() tab_title=self.create_tab_title_from_filepath( filechooser_opening_dialog", "label": 1}, {"snippet_id": 51804, "code": " render_template, redirect, request, jsonify) from flask_debugtoolbar import DebugToolbarExtension import jinja2 import random from model import(db, connect_to_db, User, Team, UserTeam, Board, Project, Phase", "label": 0}, {"snippet_id": 26742, "code": " list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type", "label": 0}, {"snippet_id": 79136, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result:", "label": 0}, {"snippet_id": 48240, "code": " class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def", "label": 1}, {"snippet_id": 9102, "code": " UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import", "label": 0}, {"snippet_id": 79924, "code": "%s not found in the data base') % datarequest_id) validator.validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already", "label": 0}, {"snippet_id": 36800, "code": " document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count", "label": 0}, {"snippet_id": 45935, "code": " include_clean_comp_data_form) from dashboard.utils import get_extracted_models, clean_dict, update_fields from django.db.models import Max @login_required() def data_group_list(request, template_name='data_group/datagroup_list", "label": 1}, {"snippet_id": 57855, "code": " not exist take default settings and save it to the MongoDB Argument: setting_name(str): name of setting e.g. `create_course` Return: dict object with the data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\"", "label": 0}, {"snippet_id": 69782, "code": "(pm) ensure_admins(args.admin) ensure_usergroups() ensure_user_environment(args.user_requirements_txt_url) logger.info(\"Setting up JupyterHub...\") ensure_node() ensure_jupyterhub_package(HUB_ENV_PREFIX", "label": 0}, {"snippet_id": 37246, "code": ".objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 59762, "code": ") return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ", "label": 0}, {"snippet_id": 32077, "code": "=position class Tokenizer: ''' Performs lexical analysis on a raw string. Args: string: The raw string on which to operate. ''' def __init__(self, string): self.string=string self.position=-1 self.char", "label": 0}, {"snippet_id": 62847, "code": ":type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client() as c: resp=c.get(url) authn_req=get_location", "label": 1}, {"snippet_id": 7215, "code": "\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in", "label": 0}, {"snippet_id": 18721, "code": ") \t\tself.redirect('/postlogin') \t\treturn \"\"\" IndexHandler(): Class that handles / \"\"\" class IndexHandler(tornado.web.RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler():", "label": 1}, {"snippet_id": 58859, "code": "'tester') course=models.ForeignKey(Course) enroll_unit_code=models.ForeignKey(EnrollUnitCode, null=True) added=models.DateTimeField('added datetime', auto_now_add=True) objects=InviteQuerySet.as_manager()", "label": 0}, {"snippet_id": 14440, "code": " no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse", "label": 0}, {"snippet_id": 59689, "code": " search_list: m.update(item) return m def plugin_config( self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata", "label": 0}, {"snippet_id": 55398, "code": "\t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs", "label": 0}, {"snippet_id": 70391, "code": "(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root", "label": 1}, {"snippet_id": 10085, "code": "'student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle", "label": 0}, {"snippet_id": 73932, "code": "): return render(request, 'position.html', position_detail_data(request, position)) def upload_applications(request): position=Position.objects.get( id=request.POST.get(\"id\")) def import_applications(request", "label": 1}, {"snippet_id": 58507, "code": " status_mock.find_one.return_value={ onboarding.VIEW_INTRODUCTION: False, onboarding.INTRODUCTION_INTRO: False, onboarding.CREATE_COURSE: True, onboarding.CREATE_COURSELET: False, onboarding.CREATE_THREAD: False,", "label": 0}, {"snippet_id": 70497, "code": "{% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content", "label": 0}, {"snippet_id": 44601, "code": "(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type=ut, weight_fraction_type", "label": 0}, {"snippet_id": 9216, "code": "\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login", "label": 1}, {"snippet_id": 1895, "code": "(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application", "label": 0}, {"snippet_id": 37534, "code": " required=True) class Meta: model=ProductToPUC fields=['puc', 'id_pks'] class BulkPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs): super(BulkPUCForm", "label": 0}, {"snippet_id": 22522, "code": ".profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline", "label": 0}, {"snippet_id": 69540, "code": "/bin is not place, and works with sudo -E in sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS", "label": 0}, {"snippet_id": 10670, "code": ") if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account", "label": 0}, {"snippet_id": 64434, "code": " verify_auth_token(eppn=eppn, token=token, nonce=nonce, timestamp=timestamp): try: user=current_app.central_userdb.get_user_by_eppn(eppn) if user.locked_identity.count > 0: current_app.logger.error('Not", "label": 0}, {"snippet_id": 53323, "code": "=InspectLoader.source_to_code(source_code, step.source_path) except SyntaxError as error: return render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path) setattr( module", "label": 0}, {"snippet_id": 3521, "code": " target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/'", "label": 0}, {"snippet_id": 77007, "code": "\"VectorMapsRaster\":{ \"x\": \"col\", \"y\": \"row\", \"z\": \"level\"}, \"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=", "label": 0}, {"snippet_id": 76094, "code": ".format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url", "label": 0}, {"snippet_id": 53903, "code": " def clear(self) -> 'Report': \"\"\" Clear all user-data stored in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining \"\"\" self.body=[] self", "label": 0}, {"snippet_id": 77126, "code": "(server_layer_def[\"id\"])) if server_layer_def[\"projection\"]==\"mercator\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps\"", "label": 0}, {"snippet_id": 2806, "code": ") redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get", "label": 0}, {"snippet_id": 28991, "code": " Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR", "label": 0}, {"snippet_id": 31166, "code": " information on this file, see https://docs.djangoproject.com/en/1.9/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast", "label": 0}, {"snippet_id": 68004, "code": "'events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): pk=self.kwargs['pk'] query=Event.objects.filter", "label": 0}, {"snippet_id": 39146, "code": ", 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name) return extract_fields +['cat_code','description_cpcat', 'cpcat_code','cpcat_sourcetype", "label": 0}, {"snippet_id": 19356, "code": ".utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is", "label": 1}, {"snippet_id": 69659, "code": " collected from plugins:{}'.format( len(conda_packages), ' '.join(conda_packages) )) conda.ensure_conda_packages(USER_ENV_PREFIX, conda_packages) pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages", "label": 0}, {"snippet_id": 3329, "code": "): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME'", "label": 0}, {"snippet_id": 38739, "code": " ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace(' ', '_') name='{0}/{0}_{1}'.format(name_fill_space", "label": 0}, {"snippet_id": 53188, "code": ".get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().how_soon, None) data={ 'first_name': 'TestFirstName', 'last_name': 'TestLastName", "label": 0}, {"snippet_id": 48540, "code": " document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return", "label": 0}, {"snippet_id": 36022, "code": " extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag',", "label": 0}, {"snippet_id": 48095, "code": ": form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) if not ExtractedHabitsAndPracticesToPUC.objects.filter( PUC=puc, extracted_habits_and_practices=hnp).exists", "label": 0}, {"snippet_id": 32401, "code": " command(self): if self.accept(TokenType.WORD): command=self.last.lexeme args=[] while self.accept(TokenType.WORD): args.append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections(", "label": 0}, {"snippet_id": 82831, "code": " status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running(", "label": 1}, {"snippet_id": 51913, "code": " else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login(): \"\"\"Load login form.\"\"\" return render_template(\"login.html\"", "label": 0}, {"snippet_id": 69118, "code": " remove_chp() systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units', 'jupyterhub.service')) as f: hub_unit_template=f.read() with open(os.path.join(HERE, 'systemd-units', 'traefik.service'", "label": 0}, {"snippet_id": 10986, "code": " \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers", "label": 0}, {"snippet_id": 13862, "code": " a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field", "label": 0}, {"snippet_id": 22753, "code": " component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self.lock: self", "label": 0}, {"snippet_id": 39052, "code": " be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is", "label": 0}, {"snippet_id": 53470, "code": ": \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename: str) -", "label": 0}, {"snippet_id": 5792, "code": " redirect, url_for, g from oauth2client.client import flow_from_clientsecrets, OAuth2WebServerFlow,\\ AccessTokenRefreshError import httplib2 from itsdangerous import TimedJSONWebSignatureSerializer, SignatureExpired", "label": 1}, {"snippet_id": 69271, "code": ".11', 'jupyterhub-firstuseauthenticator==0.12', 'jupyterhub-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups", "label": 1}, {"snippet_id": 30877, "code": "(grudget_id=grudget_id).all() if 'username' not in login_session: return render_template('publicgrudges.html', grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return render_template(", "label": 0}, {"snippet_id": 64990, "code": "(test_case, mode='eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not expr: raise ValueError('Failed to parse test case %d' % i) valid=False if type(expr)=", "label": 0}, {"snippet_id": 41280, "code": ": child_model=ex_child.__class__ self.assertEqual(et.pk, child_model.objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text", "label": 1}, {"snippet_id": 45445, "code": " render, redirect, get_object_or_404 from djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail", "label": 0}, {"snippet_id": 21779, "code": " any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes()) def remaining_processes_alive(self): \"\"\"Return true if", "label": 0}, {"snippet_id": 70218, "code": "\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime", "label": 0}, {"snippet_id": 57080, "code": "(transaction.code)) if not permission in concepts_permitted_by_transaction: disabled=True url=' available_concepts.append( { 'name': concept_model._meta.verbose_name, 'url': url, 'disabled': disabled, ", "label": 0}, {"snippet_id": 28648, "code": " \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[\"CPU\"]=(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus is not None: resources[\"GPU", "label": 0}, {"snippet_id": 4041, "code": ".locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path,", "label": 0}, {"snippet_id": 75438, "code": "'POST': form=GradschoolChecklistForm(request.POST) if form.is_valid(): form.save_data(candidate) return HttpResponseRedirect(reverse('staff_home')) else: format_form=FormatChecklistForm(instance=candidate", "label": 0}, {"snippet_id": 20213, "code": ".GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def", "label": 0}, {"snippet_id": 70731, "code": ".translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL", "label": 0}, {"snippet_id": 64699, "code": "(points, deductions): score=points -sum(d['points'] for d in deductions) if score < 0: score=0 print(json.dumps({'score': score, 'deductions': deductions})) def dock_points(deductions, points, reason):", "label": 0}, {"snippet_id": 32421, "code": "=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command()) else: return node else: return None def", "label": 0}, {"snippet_id": 47671, "code": ".filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values(", "label": 0}, {"snippet_id": 58144, "code": ", onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5", "label": 1}, {"snippet_id": 41786, "code": " self.objects.gt.save() self.assertEqual(str(self.objects.dg.group_type),'Functional use', 'Type of DataGroup needs to be \"FU\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual", "label": 0}, {"snippet_id": 64154, "code": ".debug('Performing local logout for{!r}'.format(user)) session.clear() location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') location=request.form.get('RelayState', location) return LogoutPayload", "label": 1}, {"snippet_id": 12579, "code": "(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage", "label": 0}, {"snippet_id": 65745, "code": " builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") CreateDatabase( self, self.create_tab(tab_title, headerbar), self", "label": 0}, {"snippet_id": 13321, "code": ".djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs", "label": 0}, {"snippet_id": 34739, "code": "\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid", "label": 0}, {"snippet_id": 6444, "code": "'WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the auth code for actual credentials, then redirect to the originally requested page. \"\"\" try: session_csrf_token=session.pop('oidc_csrf_token", "label": 0}, {"snippet_id": 73838, "code": " @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request,", "label": 0}, {"snippet_id": 5116, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username", "label": 0}, {"snippet_id": 27541, "code": " that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray", "label": 0}, {"snippet_id": 44951, "code": "-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', } hp_formset=HnPFormSet(data, prefix='habits') self.assertTrue(hp_formset.is_valid()) def test_edit_hnp_detail(self): self.objects", "label": 0}, {"snippet_id": 76694, "code": "% world_extent_in_tiles tile_args=layer_properties.GetTileArgs(world_wrapped_tile_col, abs_tile_row, zoom_level) tile_url=base_url +tile_args im_tile=_FetchMapTile(tile_url) if im_tile: if im_tile.size", "label": 0}, {"snippet_id": 80882, "code": "'Website', 'version': '10.0.0.0.1', 'author': 'Fundament IT', 'website': 'https://fundament.it/', 'licence': 'AGPL-3', 'depends':['website_event'], 'summary':\"\"\"\"\"\", 'description': \"\"\" Extension for the", "label": 1}, {"snippet_id": 62615, "code": "'TOKEN_LOGIN_FAILURE_REDIRECT_URL': 'http://test.localhost/failure' }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. ", "label": 1}, {"snippet_id": 36501, "code": " match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get('/').content.decode('utf8", "label": 0}, {"snippet_id": 77767, "code": ".update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes", "label": 1}, {"snippet_id": 80465, "code": " clean_up(self): self.status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area", "label": 0}, {"snippet_id": 36559, "code": " PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 27717, "code": " run this as a thread to flush profile data in the background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling", "label": 1}, {"snippet_id": 78372, "code": " USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth", "label": 0}, {"snippet_id": 47734, "code": "'dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid", "label": 0}, {"snippet_id": 12644, "code": " context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: context[\"autoSubmitRegForm\"]", "label": 0}, {"snippet_id": 40354, "code": " more than 100, select 20% of them. \"\"\" from.qa_group import QAGroup from.extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get", "label": 0}, {"snippet_id": 64258, "code": " client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) logout_redirect_url=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') next_page=session.get('next', logout_redirect_url", "label": 0}, {"snippet_id": 84257, "code": " view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir", "label": 0}, {"snippet_id": 70111, "code": "\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template", "label": 0}, {"snippet_id": 17492, "code": ".last_login_date=datetime.utcnow() user.last_login_ip=ip_address(flask.request.remote_addr).packed if not app.config['MAINTENANCE_MODE']: db.session.add(user) db.session.commit() flask.g.user=user flask", "label": 0}, {"snippet_id": 81351, "code": "=False) for registration in reg_ids: if registration.state=='open': if counter==1: attendee_list +=registration.partner_id.sudo().name else: attendee_list +=', ' +registration.partner_id.sudo().name counter", "label": 0}, {"snippet_id": 66419, "code": " filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application/x-iwork-keynote-sffkey\") keyfile_chooser_dialog.add_filter(filter_text) response", "label": 0}, {"snippet_id": 23092, "code": " the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID", "label": 0}, {"snippet_id": 54576, "code": " import string class HWML_processor(object): \tdef prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t\tself.p=pprint.PrettyPrinter(indent=2) \t\tself.homeworks=[] \t\tfor homework_file in", "label": 1}, {"snippet_id": 57408, "code": "'print_transaction', None) if print_transaction: transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment;", "label": 0}, {"snippet_id": 76976, "code": " \"\"\"Code and objects that know about the servers.\"\"\" import json import logging import re from socket import gethostname import urllib2 import urlparse import wms.ogc.common.projections as projections _LAYER_ARG_NAMES", "label": 1}, {"snippet_id": 48482, "code": "'title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form[", "label": 0}, {"snippet_id": 1181, "code": "=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath", "label": 0}, {"snippet_id": 12081, "code": " old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response", "label": 0}, {"snippet_id": 36031, "code": ", through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC')", "label": 0}, {"snippet_id": 34147, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")", "label": 0}, {"snippet_id": 13087, "code": " UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden'", "label": 0}, {"snippet_id": 56723, "code": ".core.utilities import invalid_permission_redirect from django.views.generic import ListView from django.contrib.auth.decorators import login_required from pure_pagination.mixins import PaginationMixin", "label": 0}, {"snippet_id": 22423, "code": " instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers", "label": 0}, {"snippet_id": 58821, "code": ".Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code', max_length=255) status=models.CharField", "label": 0}, {"snippet_id": 64735, "code": "=0): deductions=[] points_per_case=points // len(test_case_objs) instr_globals={ k: globals()[k] for k in global_whitelist if k in globals() } instr_globals['__name__']=name instr_globals['__builtins__'", "label": 0}, {"snippet_id": 43277, "code": "(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def", "label": 1}, {"snippet_id": 73921, "code": "': position} @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request, 'position.html', position_detail_data(request, position)) def upload_applications", "label": 1}, {"snippet_id": 6140, "code": ") try: credentials.refresh(self.http) id_token=credentials.id_token self.credentials_store[id_token['sub']]=credentials self.set_cookie_id_token(id_token) except AccessTokenRefreshError: logger.debug(\"Expired", "label": 0}, {"snippet_id": 21265, "code": " self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given", "label": 0}, {"snippet_id": 67842, "code": ".strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs' def get_context_data(self, **kwargs): context", "label": 0}, {"snippet_id": 51155, "code": "._disable_all_options: enabled=False if step.name in self._enabled_options: enabled=True if step.name in self._disabled_options: enabled=False if enabled: print step.name step.run(self._context) def add_bool_option", "label": 0}, {"snippet_id": 59307, "code": "\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads in the thread pool for executing SQLite queries \"\"\".strip()), ConfigOption(\"sql_time_limit_ms\", 1000, \"\"\" Time limit for a SQL query", "label": 0}, {"snippet_id": 55057, "code": "(other.path):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self", "label": 0}, {"snippet_id": 33758, "code": " rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The non-curated row should appear') rc_row=f'%s,%s,%s,%s,%s\\r\\n' %(rc.extracted_text.data_document.data_group.id, rc.id, rc.raw_cas, rc", "label": 1}, {"snippet_id": 74429, "code": ": logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super().form_invalid(form) def view_action(self", "label": 0}, {"snippet_id": 72965, "code": "'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] ", "label": 0}, {"snippet_id": 12524, "code": "\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send", "label": 0}, {"snippet_id": 868, "code": " os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist", "label": 1}, {"snippet_id": 51688, "code": "=='GET': script=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={ 'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method", "label": 0}, {"snippet_id": 51843, "code": "(\"/\") def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new", "label": 0}, {"snippet_id": 27322, "code": "=redirect_worker_output self.redirect_output=redirect_output self.num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients self.redis_password=redis_password self.plasma_directory=plasma_directory", "label": 0}, {"snippet_id": 3585, "code": "(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self", "label": 0}, {"snippet_id": 64942, "code": "\"Specifies verbositiy level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information about exceptions that occur\") args=parser.parse_args() vlevel", "label": 0}, {"snippet_id": 58172, "code": ".0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 75.0), ({onboarding", "label": 1}, {"snippet_id": 40064, "code": " relationship, it evaluates to boolean False ''' try: return self.curated_chemical.sid except AttributeError: return False def get_data_document(self): '''Find the child object by trying each of the classes", "label": 0}, {"snippet_id": 7549, "code": " _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce", "label": 0}, {"snippet_id": 13091, "code": " except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), ", "label": 0}, {"snippet_id": 38898, "code": " get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs): super(DataGroup, self).save(*args, **kwargs) def matched_docs(self", "label": 0}, {"snippet_id": 59662, "code": ".get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item: return", "label": 0}, {"snippet_id": 17660, "code": ".UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()", "label": 0}, {"snippet_id": 8390, "code": "\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset", "label": 0}, {"snippet_id": 41466, "code": " else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms is appropriate for the group type. ''' group_models={ 'CO': ExtractedChemical, 'FU':", "label": 1}, {"snippet_id": 81739, "code": ", ListView, UpdateView, DeleteView from django.contrib.auth.mixins import LoginRequiredMixin from.forms import ShortUrlForm, JustURLForm, CategoryModelForm, ManyURLSForm, JustULRUpdateForm, \\ CategoryUpdateModelForm", "label": 0}, {"snippet_id": 21667, "code": " processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful)", "label": 0}, {"snippet_id": 29104, "code": " return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock", "label": 0}, {"snippet_id": 42447, "code": " from dashboard.models import QAGroup, ExtractedText class ExtractedQaTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def", "label": 0}, {"snippet_id": 5504, "code": "/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client", "label": 0}, {"snippet_id": 28536, "code": " set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i)", "label": 0}, {"snippet_id": 48972, "code": ".is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags", "label": 0}, {"snippet_id": 15080, "code": ": \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeOneModelForm, self).__init__(csrf_enabled=csrf_enabled, *args", "label": 0}, {"snippet_id": 25674, "code": " list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args:", "label": 0}, {"snippet_id": 19053, "code": ":dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"\" def get_redirect_url(self): \"\"\"Find proper next", "label": 1}, {"snippet_id": 41790, "code": ".group_type),'Functional use', 'Type of DataGroup needs to be \"FU\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id',", "label": 0}, {"snippet_id": 21134, "code": " java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self)", "label": 0}, {"snippet_id": 3536, "code": ", 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 33093, "code": "(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC", "label": 1}, {"snippet_id": 17425, "code": "'account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a", "label": 0}, {"snippet_id": 3331, "code": " \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME', ", "label": 0}, {"snippet_id": 28838, "code": " os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory(", "label": 0}, {"snippet_id": 70269, "code": ", ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django", "label": 1}, {"snippet_id": 28265, "code": "\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question", "label": 0}, {"snippet_id": 46898, "code": "=DataGroupForm(user=request.user, initial=initial_values) context={'form': form, 'header': header, 'datasource': datasource, 'groups': groups} return render(request, template_name, context) @login_required() def", "label": 0}, {"snippet_id": 54479, "code": "=access_token_secret, client_secret=consumer_secret ) base_url='https://api.twitter.com/1.1/' search_url='search/tweets.json' verify_url='account/verify_credentials.json' payload={'q': query, 'count': '5', 'lang", "label": 0}, {"snippet_id": 51192, "code": ", *args, **kwargs): self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in args])] kwargstring", "label": 0}, {"snippet_id": 39436, "code": ".common_info import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo, RawChem)", "label": 1}, {"snippet_id": 52855, "code": " serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ 'id': instance.id.__str__(), 'timestamp': instance.time_ago, 'timestamp_string", "label": 0}, {"snippet_id": 58798, "code": "(self): return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user=request.user) | models.Q(email=request.user.email) ) class Invite(models.Model): instructor", "label": 0}, {"snippet_id": 50329, "code": "\"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn", "label": 0}, {"snippet_id": 73304, "code": "', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message) return self.cleaned_data def get_user(self): email=self.cleaned_data", "label": 0}, {"snippet_id": 26134, "code": "._redis_address, self._node_ip_address, self._raylet_socket_name, self._plasma_store_socket_name, self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources", "label": 0}, {"snippet_id": 63525, "code": "'], json.loads(response.data)['payload']['location']) def test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context", "label": 0}, {"snippet_id": 16619, "code": " tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters, two_gamers def _create_game_seeder(tournament, round_number): \"\"\"Return a GameSeeder that knows about", "label": 0}, {"snippet_id": 66508, "code": ", IndexError): self.show_unlock_failed_revealer() keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self", "label": 0}, {"snippet_id": 10947, "code": " include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only", "label": 0}, {"snippet_id": 22895, "code": ". \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance", "label": 0}, {"snippet_id": 60629, "code": " status=404 info={} message=exception.args[0] elif isinstance(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info", "label": 0}, {"snippet_id": 38085, "code": "=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100", "label": 0}, {"snippet_id": 31478, "code": ".environ.get('DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation", "label": 0}, {"snippet_id": 43190, "code": ".tests.loader import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django", "label": 1}, {"snippet_id": 35394, "code": " product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter", "label": 0}, {"snippet_id": 11235, "code": ".provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider", "label": 0}, {"snippet_id": 3349, "code": " 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True", "label": 0}, {"snippet_id": 56016, "code": "={'st': experience.title, 'sd': desc, 'si': experience.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}{}/{}", "label": 0}, {"snippet_id": 50170, "code": "'return_url'] return render_template(\"register.html\") @app.route(\"/signup\", methods=[\"POST\"]) def signUpButton(): email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password", "label": 0}, {"snippet_id": 28596, "code": " The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked", "label": 0}, {"snippet_id": 77269, "code": " try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close() logger.debug(\"Server definitions", "label": 1}, {"snippet_id": 5292, "code": " redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, ", "label": 0}, {"snippet_id": 15040, "code": ",source_type:output', name): source_model_name, rest=source[1], source[2:] ts['source_model_name']=source_model_name ts['source_type']='model' else: ts['source_type']='timeseries' time_series.append(ts)", "label": 0}, {"snippet_id": 32523, "code": ".token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result: return result else", "label": 0}, {"snippet_id": 61336, "code": " queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self", "label": 0}, {"snippet_id": 61717, "code": " the database. \"\"\" securedrop_domain=url_to_domain(securedrop.landing_page_url) pshtt_results=inspect_domains([securedrop_domain],{'timeout': 10}) result=pshtt_data_to_result(securedrop, pshtt_results[0", "label": 1}, {"snippet_id": 64545, "code": " Returns an XML with the SAML 2.0 metadata for this SP as configured in the saml2_settings.py file. \"\"\" metadata=entity_descriptor(current_app.saml2_config) response=make_response(metadata.to_string(),", "label": 0}, {"snippet_id": 35740, "code": "' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid", "label": 0}, {"snippet_id": 44995, "code": ".client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True) self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>') self", "label": 0}, {"snippet_id": 69333, "code": " logger.info(\"Setting up user environment...\") miniconda_version='4.5.4' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda.check_miniconda_version(USER_ENV_PREFIX, miniconda_version)", "label": 0}, {"snippet_id": 43125, "code": ".filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 0) response=self.client.get(f'/qa/extractedtext/254781/', follow=True) elps=ExtractedListPresence.objects", "label": 0}, {"snippet_id": 70930, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" ", "label": 0}, {"snippet_id": 36320, "code": ".login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id", "label": 0}, {"snippet_id": 39167, "code": " return['id','lower_wf_analysis','central_wf_analysis', 'upper_wf_analysis'] def clean_fields(self, exclude=None): super().clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id') and", "label": 0}, {"snippet_id": 56252, "code": "(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase.ScenarioMaker() \\ .given_an_experience_on_db(title='a', description='d', share_id='AsdE43E4',", "label": 0}, {"snippet_id": 35106, "code": " in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model", "label": 0}, {"snippet_id": 10212, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[", "label": 0}, {"snippet_id": 74016, "code": "-models -helper classes -access checks -redirect handlers and should not define: -templates -url names \"\"\" import logging import re import ratelimit.mixins from nacl.exceptions import CryptoError from django", "label": 0}, {"snippet_id": 46439, "code": "(): script_pk=int(request.POST['script_selection']) script=Script.objects.get(pk=script_pk) csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines", "label": 0}, {"snippet_id": 7107, "code": " License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES", "label": 0}, {"snippet_id": 59356, "code": "\"allow_facet\", True, \"\"\" Allow users to specify columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files", "label": 0}, {"snippet_id": 49562, "code": ": 'cGFr2WV93py7an7FrGXXNDS6p', 'secret': 'U9ufkrhicVHrj5CGojmQ7ZCxSwytoShSgM0t9WCq0HbqcfKwL8' } } app.secret_key='fe2917b485cc985c47071f3e38273348' app.config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS", "label": 0}, {"snippet_id": 1164, "code": " of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n", "label": 0}, {"snippet_id": 48795, "code": "): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product", "label": 0}, {"snippet_id": 4563, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 36137, "code": ".gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don", "label": 0}, {"snippet_id": 80016, "code": "'') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest", "label": 0}, {"snippet_id": 58153, "code": ", 38.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding", "label": 1}, {"snippet_id": 43784, "code": " +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until", "label": 0}, {"snippet_id": 63699, "code": " cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302", "label": 0}, {"snippet_id": 62437, "code": ", user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info", "label": 0}, {"snippet_id": 3688, "code": ".assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"", "label": 1}, {"snippet_id": 17070, "code": " the_set=f.cleaned_data['the_set']) except KeyError: continue try: g.full_clean() except ValidationError as e: f.add_error(None, e) g.delete() return render(request, 'rounds/create_games.html', {'tournament':", "label": 0}, {"snippet_id": 11041, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url=", "label": 0}, {"snippet_id": 78833, "code": ", closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not", "label": 0}, {"snippet_id": 828, "code": " about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3)", "label": 0}, {"snippet_id": 70122, "code": " template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist:", "label": 0}, {"snippet_id": 12148, "code": "'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset", "label": 0}, {"snippet_id": 34896, "code": ", \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv", "label": 0}, {"snippet_id": 22092, "code": " logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If", "label": 0}, {"snippet_id": 77509, "code": ") for layer_name in layers_by_name.keys(): if layers_by_name[layer_name].db_type in(\"gedb\", \"glb\"): if layers_by_name[layer_name].label !=\"Imagery\": layers_by_name.pop(layer_name) return layers_by_name", "label": 0}, {"snippet_id": 27846, "code": " \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key", "label": 0}, {"snippet_id": 5523, "code": "=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile", "label": 0}, {"snippet_id": 4053, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post", "label": 0}, {"snippet_id": 10655, "code": "\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None", "label": 0}, {"snippet_id": 40554, "code": "/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The", "label": 0}, {"snippet_id": 41259, "code": " def test_fetch_extracted_records(self): ''' Confirm that each detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all(): for", "label": 1}, {"snippet_id": 9328, "code": ", 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER']", "label": 0}, {"snippet_id": 5348, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location", "label": 1}, {"snippet_id": 78359, "code": " if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn", "label": 0}, {"snippet_id": 74011, "code": "/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models -helper classes -access checks -redirect handlers and should not define: -templates -url names \"\"\" import logging import", "label": 0}, {"snippet_id": 34836, "code": ")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'],", "label": 1}, {"snippet_id": 1981, "code": "{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 14297, "code": " api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\")", "label": 0}, {"snippet_id": 35531, "code": ") prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm", "label": 0}, {"snippet_id": 51138, "code": " self._context.env=dict(os.environ) for step in self._steps: if step.test_conditions(self._context.env): enabled=True if step.is_optional: enabled=step.is_enabled_by_default if self._disable_all_options:", "label": 0}, {"snippet_id": 40547, "code": "'factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav/", "label": 0}, {"snippet_id": 38263, "code": " querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): ", "label": 0}, {"snippet_id": 79404, "code": "(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), ", "label": 1}, {"snippet_id": 12024, "code": " return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id", "label": 0}, {"snippet_id": 8946, "code": " import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth", "label": 0}, {"snippet_id": 28427, "code": "(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return", "label": 0}, {"snippet_id": 20817, "code": "\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if the", "label": 0}, {"snippet_id": 20509, "code": " parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args", "label": 0}, {"snippet_id": 55564, "code": " \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path) \t\telse: \t\t\treturn", "label": 0}, {"snippet_id": 18285, "code": " to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists", "label": 1}, {"snippet_id": 16018, "code": ", 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True", "label": 0}, {"snippet_id": 39191, "code": " Group Type may not be changed once extracted documents have been associated with the group.\" raise ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete", "label": 0}, {"snippet_id": 35264, "code": "'products': products}) @login_required() def link_product_list(request, pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter", "label": 0}, {"snippet_id": 76798, "code": " for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green, blue, alpha)=pixdata[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata", "label": 0}, {"snippet_id": 48650, "code": ".objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form", "label": 0}, {"snippet_id": 3676, "code": "=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 43616, "code": " process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7", "label": 0}, {"snippet_id": 22797, "code": " \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is", "label": 0}, {"snippet_id": 69931, "code": " path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in", "label": 1}, {"snippet_id": 81493, "code": " new_start_date, new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-", "label": 0}, {"snippet_id": 37235, "code": " CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file", "label": 0}, {"snippet_id": 38776, "code": ", ExtractedListPresence) } class DataGroup(CommonInfo): name=models.CharField(max_length=50) description=models.TextField(null=True, blank=True) downloaded_by=models.ForeignKey('auth.User', on_delete=models", "label": 0}, {"snippet_id": 11507, "code": " GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): ", "label": 0}, {"snippet_id": 24679, "code": ".\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None", "label": 1}, {"snippet_id": 107, "code": " view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath", "label": 1}, {"snippet_id": 17744, "code": " send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching account was found.'), 'info') return flask.redirect(flask.url_for('main.home')) return flask", "label": 0}, {"snippet_id": 16829, "code": "=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset}) gp.save()", "label": 0}, {"snippet_id": 67550, "code": " from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(publish_timestamp__gte=from_date, publish_timestamp__lte=to_date).count() data.append(count) return data", "label": 0}, {"snippet_id": 69808, "code": " SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404", "label": 0}, {"snippet_id": 28911, "code": " sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def", "label": 0}, {"snippet_id": 46676, "code": "'document_type', 'url','organization'] if not table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields':", "label": 0}, {"snippet_id": 18689, "code": " cookie and redirects to /postlogin. \t\"\"\" \tdef post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tcheck_details=self.check_database(", "label": 1}, {"snippet_id": 36055, "code": "', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self", "label": 0}, {"snippet_id": 90, "code": " the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like", "label": 0}, {"snippet_id": 62582, "code": "(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({", "label": 0}, {"snippet_id": 57816, "code": ": ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.INTRODUCTION_INTRO: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSE: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 57850, "code": " settings for the certain `settings_name` If it does not exist take default settings and save it to the MongoDB Argument: setting_name(str): name of setting e.g. `create_course` Return: dict object with", "label": 0}, {"snippet_id": 47453, "code": "'datasource_form.html')): datasource=get_object_or_404(DataSource, pk=pk) form=DataSourceForm(request.POST or None, instance=datasource) if form.is_valid(): if form.has_changed(): form.save() return redirect", "label": 0}, {"snippet_id": 26137, "code": " self._raylet_socket_name, self._plasma_store_socket_name, self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port", "label": 0}, {"snippet_id": 75233, "code": ") committee_member=committee_member_form.save(commit=False) committee_member.person=person committee_member.save() candidate.committee_members.add(committee_member) return HttpResponseRedirect(reverse(", "label": 0}, {"snippet_id": 56068, "code": " get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute() preview_content={'st': '@{}'.format(profile.username), 'sd'", "label": 0}, {"snippet_id": 50057, "code": "], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data", "label": 0}, {"snippet_id": 3493, "code": ") paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects", "label": 0}, {"snippet_id": 75938, "code": " _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField", "label": 0}, {"snippet_id": 36087, "code": " in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is ''", "label": 0}, {"snippet_id": 28914, "code": ".open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled", "label": 0}, {"snippet_id": 7240, "code": " under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations", "label": 0}, {"snippet_id": 3605, "code": "'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path", "label": 0}, {"snippet_id": 14863, "code": " user def auth_check_password(user, password): print('auth_check_password', user.password_hash, password) return check_password_hash(user.password_hash, password) db_init() login_manager=LoginManager(app)", "label": 1}, {"snippet_id": 59873, "code": " metadata.get(\"about_url\") or self.metadata(\"about_url\"), } ) def prepare_connection(self, conn): conn.row_factory=sqlite3.Row conn.text_factory=lambda x: str(x, \"utf-8\", \"replace\") for name, num_args,", "label": 0}, {"snippet_id": 50202, "code": " session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email already in use') return redirect('/signup') @app.route", "label": 0}, {"snippet_id": 73232, "code": "().objects.filter(username=email.lower()).exists(): message=forms.ValidationError( format(ErrorMessages.user_already_exists % email)) self.add_error('email', message) return self.cleaned_data class LoginForm", "label": 0}, {"snippet_id": 78703, "code": " _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 15860, "code": "['commands'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField", "label": 0}, {"snippet_id": 59024, "code": ", settings.EMAIL_FROM, [self.email], fail_silently=False ) return{ 'success': True, 'message': 'Invitation successfully sent.', 'invite':{ 'status': self.status, } } except IntegrityError: return{ 'success", "label": 0}, {"snippet_id": 26914, "code": " port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure", "label": 0}, {"snippet_id": 52166, "code": " \"\"\"Update UserTeam membership field's value to true; update Dashboard with a redirect.\"\"\" user_id=session[\"user_id\"] team_id=request.form.get(\"team\") user_choice=request.form.get(\"is_joining\") if user_choice", "label": 0}, {"snippet_id": 53560, "code": " Exception ) -> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames", "label": 0}, {"snippet_id": 41534, "code": " doc.detail_page_editable: error=(f'{model.__module__} should have one more forms' ' than instances') self.assertEqual(num_forms, children +1, error) else: error=(f'{model.__module__} should have the same", "label": 0}, {"snippet_id": 1469, "code": " not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 71601, "code": ").count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session", "label": 0}, {"snippet_id": 26733, "code": " allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for process_type, process_infos in self.all_processes.items", "label": 0}, {"snippet_id": 59416, "code": "\"\"\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for CSV", "label": 0}, {"snippet_id": 37361, "code": "'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name', 'data_document'", "label": 0}, {"snippet_id": 79340, "code": " 'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest.id, qualified=True) }", "label": 0}, {"snippet_id": 80337, "code": "=[self.lock_slow_piezo_action, self.lock_thin_etalon_action, self.lock_piezo_etalon_action, self.lock_fast_piezo_action] def setup_action_listeners(self): self.clear_log_area_action.triggered.connect(self", "label": 0}, {"snippet_id": 65043, "code": ".Num, ast.Str, ast.Bytes, ast.NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj", "label": 0}, {"snippet_id": 6953, "code": ", 'POST']) def password_reset(token): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form", "label": 0}, {"snippet_id": 81568, "code": ": return True def _create_new_event(self, old_repeating_event, new_start_date, new_end_date): _logger.info('Start creation new repeating event') new_repeating_event=old_repeating_event.copy(default={'website_published", "label": 0}, {"snippet_id": 28591, "code": " required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources", "label": 0}, {"snippet_id": 4163, "code": "', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 46997, "code": " datagroup=get_object_or_404(DataGroup, pk=pk) if request.method=='POST': datagroup.delete() return redirect('data_group_list') return render(request, template_name,{'object': datagroup}) @login_required", "label": 0}, {"snippet_id": 12569, "code": "\": None, } if third_party_auth.is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled", "label": 0}, {"snippet_id": 7568, "code": " CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client", "label": 0}, {"snippet_id": 53543, "code": "='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project: 'projects.Project', error: Exception ) -", "label": 0}, {"snippet_id": 32712, "code": " be looked up in PATH). args: The arguments to be passed to the executable. ''' def __init__(self, command, args): self.command=command self.args=args self.args.insert(0, command) self.pid=None def execute", "label": 0}, {"snippet_id": 24829, "code": " subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None", "label": 1}, {"snippet_id": 59636, "code": "=\" databases=self._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases.get(database) or{}) if table is not None: table_metadata=( (databases.get(database", "label": 0}, {"snippet_id": 8229, "code": " tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to", "label": 0}, {"snippet_id": 9715, "code": " authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[", "label": 0}]